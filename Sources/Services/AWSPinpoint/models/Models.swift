// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension PinpointClientTypes.ADMChannelRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientId = "ClientId"
        case clientSecret = "ClientSecret"
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clientSecret = self.clientSecret {
            try encodeContainer.encode(clientSecret, forKey: .clientSecret)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let clientSecretDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientSecret)
        clientSecret = clientSecretDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the status and settings of the ADM (Amazon Device Messaging) channel for an application.
    public struct ADMChannelRequest: Swift.Equatable {
        /// The Client ID that you received from Amazon to send messages by using ADM.
        /// This member is required.
        public var clientId: Swift.String?
        /// The Client Secret that you received from Amazon to send messages by using ADM.
        /// This member is required.
        public var clientSecret: Swift.String?
        /// Specifies whether to enable the ADM channel for the application.
        public var enabled: Swift.Bool?

        public init (
            clientId: Swift.String? = nil,
            clientSecret: Swift.String? = nil,
            enabled: Swift.Bool? = nil
        )
        {
            self.clientId = clientId
            self.clientSecret = clientSecret
            self.enabled = enabled
        }
    }

}

extension PinpointClientTypes.ADMChannelResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case creationDate = "CreationDate"
        case enabled = "Enabled"
        case hasCredential = "HasCredential"
        case id = "Id"
        case isArchived = "IsArchived"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedDate = "LastModifiedDate"
        case platform = "Platform"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let hasCredential = self.hasCredential {
            try encodeContainer.encode(hasCredential, forKey: .hasCredential)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isArchived = self.isArchived {
            try encodeContainer.encode(isArchived, forKey: .isArchived)
        }
        if let lastModifiedBy = self.lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let platform = self.platform {
            try encodeContainer.encode(platform, forKey: .platform)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let hasCredentialDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasCredential)
        hasCredential = hasCredentialDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let isArchivedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isArchived)
        isArchived = isArchivedDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let platformDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platform)
        platform = platformDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the status and settings of the ADM (Amazon Device Messaging) channel for an application.
    public struct ADMChannelResponse: Swift.Equatable {
        /// The unique identifier for the application that the ADM channel applies to.
        public var applicationId: Swift.String?
        /// The date and time when the ADM channel was enabled.
        public var creationDate: Swift.String?
        /// Specifies whether the ADM channel is enabled for the application.
        public var enabled: Swift.Bool?
        /// (Not used) This property is retained only for backward compatibility.
        public var hasCredential: Swift.Bool?
        /// (Deprecated) An identifier for the ADM channel. This property is retained only for backward compatibility.
        public var id: Swift.String?
        /// Specifies whether the ADM channel is archived.
        public var isArchived: Swift.Bool?
        /// The user who last modified the ADM channel.
        public var lastModifiedBy: Swift.String?
        /// The date and time when the ADM channel was last modified.
        public var lastModifiedDate: Swift.String?
        /// The type of messaging or notification platform for the channel. For the ADM channel, this value is ADM.
        /// This member is required.
        public var platform: Swift.String?
        /// The current version of the ADM channel.
        public var version: Swift.Int?

        public init (
            applicationId: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            hasCredential: Swift.Bool? = nil,
            id: Swift.String? = nil,
            isArchived: Swift.Bool? = nil,
            lastModifiedBy: Swift.String? = nil,
            lastModifiedDate: Swift.String? = nil,
            platform: Swift.String? = nil,
            version: Swift.Int? = nil
        )
        {
            self.applicationId = applicationId
            self.creationDate = creationDate
            self.enabled = enabled
            self.hasCredential = hasCredential
            self.id = id
            self.isArchived = isArchived
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedDate = lastModifiedDate
            self.platform = platform
            self.version = version
        }
    }

}

extension PinpointClientTypes.ADMMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case body = "Body"
        case consolidationKey = "ConsolidationKey"
        case data = "Data"
        case expiresAfter = "ExpiresAfter"
        case iconReference = "IconReference"
        case imageIconUrl = "ImageIconUrl"
        case imageUrl = "ImageUrl"
        case md5 = "MD5"
        case rawContent = "RawContent"
        case silentPush = "SilentPush"
        case smallImageIconUrl = "SmallImageIconUrl"
        case sound = "Sound"
        case substitutions = "Substitutions"
        case title = "Title"
        case url = "Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let consolidationKey = self.consolidationKey {
            try encodeContainer.encode(consolidationKey, forKey: .consolidationKey)
        }
        if let data = data {
            var dataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .data)
            for (dictKey0, mapOf__string0) in data {
                try dataContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let expiresAfter = self.expiresAfter {
            try encodeContainer.encode(expiresAfter, forKey: .expiresAfter)
        }
        if let iconReference = self.iconReference {
            try encodeContainer.encode(iconReference, forKey: .iconReference)
        }
        if let imageIconUrl = self.imageIconUrl {
            try encodeContainer.encode(imageIconUrl, forKey: .imageIconUrl)
        }
        if let imageUrl = self.imageUrl {
            try encodeContainer.encode(imageUrl, forKey: .imageUrl)
        }
        if let md5 = self.md5 {
            try encodeContainer.encode(md5, forKey: .md5)
        }
        if let rawContent = self.rawContent {
            try encodeContainer.encode(rawContent, forKey: .rawContent)
        }
        if let silentPush = self.silentPush {
            try encodeContainer.encode(silentPush, forKey: .silentPush)
        }
        if let smallImageIconUrl = self.smallImageIconUrl {
            try encodeContainer.encode(smallImageIconUrl, forKey: .smallImageIconUrl)
        }
        if let sound = self.sound {
            try encodeContainer.encode(sound, forKey: .sound)
        }
        if let substitutions = substitutions {
            var substitutionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .substitutions)
            for (dictKey0, mapOfListOf__string0) in substitutions {
                var mapOfListOf__string0Container = substitutionsContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for __string1 in mapOfListOf__string0 {
                    try mapOfListOf__string0Container.encode(__string1)
                }
            }
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Action.self, forKey: .action)
        action = actionDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let consolidationKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consolidationKey)
        consolidationKey = consolidationKeyDecoded
        let dataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .data)
        var dataDecoded0: [Swift.String:Swift.String]? = nil
        if let dataContainer = dataContainer {
            dataDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in dataContainer {
                if let __string0 = __string0 {
                    dataDecoded0?[key0] = __string0
                }
            }
        }
        data = dataDecoded0
        let expiresAfterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expiresAfter)
        expiresAfter = expiresAfterDecoded
        let iconReferenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iconReference)
        iconReference = iconReferenceDecoded
        let imageIconUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageIconUrl)
        imageIconUrl = imageIconUrlDecoded
        let imageUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageUrl)
        imageUrl = imageUrlDecoded
        let md5Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .md5)
        md5 = md5Decoded
        let rawContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rawContent)
        rawContent = rawContentDecoded
        let silentPushDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .silentPush)
        silentPush = silentPushDecoded
        let smallImageIconUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .smallImageIconUrl)
        smallImageIconUrl = smallImageIconUrlDecoded
        let soundDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sound)
        sound = soundDecoded
        let substitutionsContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .substitutions)
        var substitutionsDecoded0: [Swift.String:[Swift.String]]? = nil
        if let substitutionsContainer = substitutionsContainer {
            substitutionsDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listof__string0) in substitutionsContainer {
                var listof__string0Decoded0: [Swift.String]? = nil
                if let listof__string0 = listof__string0 {
                    listof__string0Decoded0 = [Swift.String]()
                    for string1 in listof__string0 {
                        if let string1 = string1 {
                            listof__string0Decoded0?.append(string1)
                        }
                    }
                }
                substitutionsDecoded0?[key0] = listof__string0Decoded0
            }
        }
        substitutions = substitutionsDecoded0
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the settings for a one-time message that's sent directly to an endpoint through the ADM (Amazon Device Messaging) channel.
    public struct ADMMessage: Swift.Equatable {
        /// The action to occur if the recipient taps the push notification. Valid values are:
        ///
        /// * OPEN_APP - Your app opens or it becomes the foreground app if it was sent to the background. This is the default action.
        ///
        /// * DEEP_LINK - Your app opens and displays a designated user interface in the app. This action uses the deep-linking features of the Android platform.
        ///
        /// * URL - The default mobile browser on the recipient's device opens and loads the web page at a URL that you specify.
        public var action: PinpointClientTypes.Action?
        /// The body of the notification message.
        public var body: Swift.String?
        /// An arbitrary string that indicates that multiple messages are logically the same and that Amazon Device Messaging (ADM) can drop previously enqueued messages in favor of this message.
        public var consolidationKey: Swift.String?
        /// The JSON data payload to use for the push notification, if the notification is a silent push notification. This payload is added to the data.pinpoint.jsonBody object of the notification.
        public var data: [Swift.String:Swift.String]?
        /// The amount of time, in seconds, that ADM should store the message if the recipient's device is offline. Amazon Pinpoint specifies this value in the expiresAfter parameter when it sends the notification message to ADM.
        public var expiresAfter: Swift.String?
        /// The icon image name of the asset saved in your app.
        public var iconReference: Swift.String?
        /// The URL of the large icon image to display in the content view of the push notification.
        public var imageIconUrl: Swift.String?
        /// The URL of an image to display in the push notification.
        public var imageUrl: Swift.String?
        /// The base64-encoded, MD5 checksum of the value specified by the Data property. ADM uses the MD5 value to verify the integrity of the data.
        public var md5: Swift.String?
        /// The raw, JSON-formatted string to use as the payload for the notification message. If specified, this value overrides all other content for the message.
        public var rawContent: Swift.String?
        /// Specifies whether the notification is a silent push notification, which is a push notification that doesn't display on a recipient's device. Silent push notifications can be used for cases such as updating an app's configuration or supporting phone home functionality.
        public var silentPush: Swift.Bool?
        /// The URL of the small icon image to display in the status bar and the content view of the push notification.
        public var smallImageIconUrl: Swift.String?
        /// The sound to play when the recipient receives the push notification. You can use the default stream or specify the file name of a sound resource that's bundled in your app. On an Android platform, the sound file must reside in /res/raw/.
        public var sound: Swift.String?
        /// The default message variables to use in the notification message. You can override the default variables with individual address variables.
        public var substitutions: [Swift.String:[Swift.String]]?
        /// The title to display above the notification message on the recipient's device.
        public var title: Swift.String?
        /// The URL to open in the recipient's default mobile browser, if a recipient taps the push notification and the value of the Action property is URL.
        public var url: Swift.String?

        public init (
            action: PinpointClientTypes.Action? = nil,
            body: Swift.String? = nil,
            consolidationKey: Swift.String? = nil,
            data: [Swift.String:Swift.String]? = nil,
            expiresAfter: Swift.String? = nil,
            iconReference: Swift.String? = nil,
            imageIconUrl: Swift.String? = nil,
            imageUrl: Swift.String? = nil,
            md5: Swift.String? = nil,
            rawContent: Swift.String? = nil,
            silentPush: Swift.Bool? = nil,
            smallImageIconUrl: Swift.String? = nil,
            sound: Swift.String? = nil,
            substitutions: [Swift.String:[Swift.String]]? = nil,
            title: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.action = action
            self.body = body
            self.consolidationKey = consolidationKey
            self.data = data
            self.expiresAfter = expiresAfter
            self.iconReference = iconReference
            self.imageIconUrl = imageIconUrl
            self.imageUrl = imageUrl
            self.md5 = md5
            self.rawContent = rawContent
            self.silentPush = silentPush
            self.smallImageIconUrl = smallImageIconUrl
            self.sound = sound
            self.substitutions = substitutions
            self.title = title
            self.url = url
        }
    }

}

extension PinpointClientTypes.APNSChannelRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId = "BundleId"
        case certificate = "Certificate"
        case defaultAuthenticationMethod = "DefaultAuthenticationMethod"
        case enabled = "Enabled"
        case privateKey = "PrivateKey"
        case teamId = "TeamId"
        case tokenKey = "TokenKey"
        case tokenKeyId = "TokenKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bundleId = self.bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let certificate = self.certificate {
            try encodeContainer.encode(certificate, forKey: .certificate)
        }
        if let defaultAuthenticationMethod = self.defaultAuthenticationMethod {
            try encodeContainer.encode(defaultAuthenticationMethod, forKey: .defaultAuthenticationMethod)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let privateKey = self.privateKey {
            try encodeContainer.encode(privateKey, forKey: .privateKey)
        }
        if let teamId = self.teamId {
            try encodeContainer.encode(teamId, forKey: .teamId)
        }
        if let tokenKey = self.tokenKey {
            try encodeContainer.encode(tokenKey, forKey: .tokenKey)
        }
        if let tokenKeyId = self.tokenKeyId {
            try encodeContainer.encode(tokenKeyId, forKey: .tokenKeyId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let certificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificate)
        certificate = certificateDecoded
        let defaultAuthenticationMethodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultAuthenticationMethod)
        defaultAuthenticationMethod = defaultAuthenticationMethodDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let privateKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateKey)
        privateKey = privateKeyDecoded
        let teamIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .teamId)
        teamId = teamIdDecoded
        let tokenKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenKey)
        tokenKey = tokenKeyDecoded
        let tokenKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenKeyId)
        tokenKeyId = tokenKeyIdDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the status and settings of the APNs (Apple Push Notification service) channel for an application.
    public struct APNSChannelRequest: Swift.Equatable {
        /// The bundle identifier that's assigned to your iOS app. This identifier is used for APNs tokens.
        public var bundleId: Swift.String?
        /// The APNs client certificate that you received from Apple, if you want Amazon Pinpoint to communicate with APNs by using an APNs certificate.
        public var certificate: Swift.String?
        /// The default authentication method that you want Amazon Pinpoint to use when authenticating with APNs, key or certificate.
        public var defaultAuthenticationMethod: Swift.String?
        /// Specifies whether to enable the APNs channel for the application.
        public var enabled: Swift.Bool?
        /// The private key for the APNs client certificate that you want Amazon Pinpoint to use to communicate with APNs.
        public var privateKey: Swift.String?
        /// The identifier that's assigned to your Apple developer account team. This identifier is used for APNs tokens.
        public var teamId: Swift.String?
        /// The authentication key to use for APNs tokens.
        public var tokenKey: Swift.String?
        /// The key identifier that's assigned to your APNs signing key, if you want Amazon Pinpoint to communicate with APNs by using APNs tokens.
        public var tokenKeyId: Swift.String?

        public init (
            bundleId: Swift.String? = nil,
            certificate: Swift.String? = nil,
            defaultAuthenticationMethod: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            privateKey: Swift.String? = nil,
            teamId: Swift.String? = nil,
            tokenKey: Swift.String? = nil,
            tokenKeyId: Swift.String? = nil
        )
        {
            self.bundleId = bundleId
            self.certificate = certificate
            self.defaultAuthenticationMethod = defaultAuthenticationMethod
            self.enabled = enabled
            self.privateKey = privateKey
            self.teamId = teamId
            self.tokenKey = tokenKey
            self.tokenKeyId = tokenKeyId
        }
    }

}

extension PinpointClientTypes.APNSChannelResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case creationDate = "CreationDate"
        case defaultAuthenticationMethod = "DefaultAuthenticationMethod"
        case enabled = "Enabled"
        case hasCredential = "HasCredential"
        case hasTokenKey = "HasTokenKey"
        case id = "Id"
        case isArchived = "IsArchived"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedDate = "LastModifiedDate"
        case platform = "Platform"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let defaultAuthenticationMethod = self.defaultAuthenticationMethod {
            try encodeContainer.encode(defaultAuthenticationMethod, forKey: .defaultAuthenticationMethod)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let hasCredential = self.hasCredential {
            try encodeContainer.encode(hasCredential, forKey: .hasCredential)
        }
        if let hasTokenKey = self.hasTokenKey {
            try encodeContainer.encode(hasTokenKey, forKey: .hasTokenKey)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isArchived = self.isArchived {
            try encodeContainer.encode(isArchived, forKey: .isArchived)
        }
        if let lastModifiedBy = self.lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let platform = self.platform {
            try encodeContainer.encode(platform, forKey: .platform)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let defaultAuthenticationMethodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultAuthenticationMethod)
        defaultAuthenticationMethod = defaultAuthenticationMethodDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let hasCredentialDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasCredential)
        hasCredential = hasCredentialDecoded
        let hasTokenKeyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasTokenKey)
        hasTokenKey = hasTokenKeyDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let isArchivedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isArchived)
        isArchived = isArchivedDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let platformDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platform)
        platform = platformDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the status and settings of the APNs (Apple Push Notification service) channel for an application.
    public struct APNSChannelResponse: Swift.Equatable {
        /// The unique identifier for the application that the APNs channel applies to.
        public var applicationId: Swift.String?
        /// The date and time when the APNs channel was enabled.
        public var creationDate: Swift.String?
        /// The default authentication method that Amazon Pinpoint uses to authenticate with APNs for this channel, key or certificate.
        public var defaultAuthenticationMethod: Swift.String?
        /// Specifies whether the APNs channel is enabled for the application.
        public var enabled: Swift.Bool?
        /// (Not used) This property is retained only for backward compatibility.
        public var hasCredential: Swift.Bool?
        /// Specifies whether the APNs channel is configured to communicate with APNs by using APNs tokens. To provide an authentication key for APNs tokens, set the TokenKey property of the channel.
        public var hasTokenKey: Swift.Bool?
        /// (Deprecated) An identifier for the APNs channel. This property is retained only for backward compatibility.
        public var id: Swift.String?
        /// Specifies whether the APNs channel is archived.
        public var isArchived: Swift.Bool?
        /// The user who last modified the APNs channel.
        public var lastModifiedBy: Swift.String?
        /// The date and time when the APNs channel was last modified.
        public var lastModifiedDate: Swift.String?
        /// The type of messaging or notification platform for the channel. For the APNs channel, this value is APNS.
        /// This member is required.
        public var platform: Swift.String?
        /// The current version of the APNs channel.
        public var version: Swift.Int?

        public init (
            applicationId: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            defaultAuthenticationMethod: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            hasCredential: Swift.Bool? = nil,
            hasTokenKey: Swift.Bool? = nil,
            id: Swift.String? = nil,
            isArchived: Swift.Bool? = nil,
            lastModifiedBy: Swift.String? = nil,
            lastModifiedDate: Swift.String? = nil,
            platform: Swift.String? = nil,
            version: Swift.Int? = nil
        )
        {
            self.applicationId = applicationId
            self.creationDate = creationDate
            self.defaultAuthenticationMethod = defaultAuthenticationMethod
            self.enabled = enabled
            self.hasCredential = hasCredential
            self.hasTokenKey = hasTokenKey
            self.id = id
            self.isArchived = isArchived
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedDate = lastModifiedDate
            self.platform = platform
            self.version = version
        }
    }

}

extension PinpointClientTypes.APNSMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apnsPushType = "APNSPushType"
        case action = "Action"
        case badge = "Badge"
        case body = "Body"
        case category = "Category"
        case collapseId = "CollapseId"
        case data = "Data"
        case mediaUrl = "MediaUrl"
        case preferredAuthenticationMethod = "PreferredAuthenticationMethod"
        case priority = "Priority"
        case rawContent = "RawContent"
        case silentPush = "SilentPush"
        case sound = "Sound"
        case substitutions = "Substitutions"
        case threadId = "ThreadId"
        case timeToLive = "TimeToLive"
        case title = "Title"
        case url = "Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let apnsPushType = self.apnsPushType {
            try encodeContainer.encode(apnsPushType, forKey: .apnsPushType)
        }
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let badge = self.badge {
            try encodeContainer.encode(badge, forKey: .badge)
        }
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let category = self.category {
            try encodeContainer.encode(category, forKey: .category)
        }
        if let collapseId = self.collapseId {
            try encodeContainer.encode(collapseId, forKey: .collapseId)
        }
        if let data = data {
            var dataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .data)
            for (dictKey0, mapOf__string0) in data {
                try dataContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let mediaUrl = self.mediaUrl {
            try encodeContainer.encode(mediaUrl, forKey: .mediaUrl)
        }
        if let preferredAuthenticationMethod = self.preferredAuthenticationMethod {
            try encodeContainer.encode(preferredAuthenticationMethod, forKey: .preferredAuthenticationMethod)
        }
        if let priority = self.priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let rawContent = self.rawContent {
            try encodeContainer.encode(rawContent, forKey: .rawContent)
        }
        if let silentPush = self.silentPush {
            try encodeContainer.encode(silentPush, forKey: .silentPush)
        }
        if let sound = self.sound {
            try encodeContainer.encode(sound, forKey: .sound)
        }
        if let substitutions = substitutions {
            var substitutionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .substitutions)
            for (dictKey0, mapOfListOf__string0) in substitutions {
                var mapOfListOf__string0Container = substitutionsContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for __string1 in mapOfListOf__string0 {
                    try mapOfListOf__string0Container.encode(__string1)
                }
            }
        }
        if let threadId = self.threadId {
            try encodeContainer.encode(threadId, forKey: .threadId)
        }
        if let timeToLive = self.timeToLive {
            try encodeContainer.encode(timeToLive, forKey: .timeToLive)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apnsPushTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .apnsPushType)
        apnsPushType = apnsPushTypeDecoded
        let actionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Action.self, forKey: .action)
        action = actionDecoded
        let badgeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .badge)
        badge = badgeDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let categoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .category)
        category = categoryDecoded
        let collapseIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collapseId)
        collapseId = collapseIdDecoded
        let dataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .data)
        var dataDecoded0: [Swift.String:Swift.String]? = nil
        if let dataContainer = dataContainer {
            dataDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in dataContainer {
                if let __string0 = __string0 {
                    dataDecoded0?[key0] = __string0
                }
            }
        }
        data = dataDecoded0
        let mediaUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mediaUrl)
        mediaUrl = mediaUrlDecoded
        let preferredAuthenticationMethodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredAuthenticationMethod)
        preferredAuthenticationMethod = preferredAuthenticationMethodDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .priority)
        priority = priorityDecoded
        let rawContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rawContent)
        rawContent = rawContentDecoded
        let silentPushDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .silentPush)
        silentPush = silentPushDecoded
        let soundDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sound)
        sound = soundDecoded
        let substitutionsContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .substitutions)
        var substitutionsDecoded0: [Swift.String:[Swift.String]]? = nil
        if let substitutionsContainer = substitutionsContainer {
            substitutionsDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listof__string0) in substitutionsContainer {
                var listof__string0Decoded0: [Swift.String]? = nil
                if let listof__string0 = listof__string0 {
                    listof__string0Decoded0 = [Swift.String]()
                    for string1 in listof__string0 {
                        if let string1 = string1 {
                            listof__string0Decoded0?.append(string1)
                        }
                    }
                }
                substitutionsDecoded0?[key0] = listof__string0Decoded0
            }
        }
        substitutions = substitutionsDecoded0
        let threadIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .threadId)
        threadId = threadIdDecoded
        let timeToLiveDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeToLive)
        timeToLive = timeToLiveDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the settings for a one-time message that's sent directly to an endpoint through the APNs (Apple Push Notification service) channel.
    public struct APNSMessage: Swift.Equatable {
        /// The action to occur if the recipient taps the push notification. Valid values are:
        ///
        /// * OPEN_APP - Your app opens or it becomes the foreground app if it was sent to the background. This is the default action.
        ///
        /// * DEEP_LINK - Your app opens and displays a designated user interface in the app. This setting uses the deep-linking features of the iOS platform.
        ///
        /// * URL - The default mobile browser on the recipient's device opens and loads the web page at a URL that you specify.
        public var action: PinpointClientTypes.Action?
        /// The type of push notification to send. Valid values are:
        ///
        /// * alert - For a standard notification that's displayed on recipients' devices and prompts a recipient to interact with the notification.
        ///
        /// * background - For a silent notification that delivers content in the background and isn't displayed on recipients' devices.
        ///
        /// * complication - For a notification that contains update information for an app’s complication timeline.
        ///
        /// * fileprovider - For a notification that signals changes to a File Provider extension.
        ///
        /// * mdm - For a notification that tells managed devices to contact the MDM server.
        ///
        /// * voip - For a notification that provides information about an incoming VoIP call.
        ///
        ///
        /// Amazon Pinpoint specifies this value in the apns-push-type request header when it sends the notification message to APNs. If you don't specify a value for this property, Amazon Pinpoint sets the value to alert or background automatically, based on the value that you specify for the SilentPush or RawContent property of the message. For more information about the apns-push-type request header, see [Sending Notification Requests to APNs](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/sending_notification_requests_to_apns) on the Apple Developer website.
        public var apnsPushType: Swift.String?
        /// The key that indicates whether and how to modify the badge of your app's icon when the recipient receives the push notification. If this key isn't included in the dictionary, the badge doesn't change. To remove the badge, set this value to 0.
        public var badge: Swift.Int?
        /// The body of the notification message.
        public var body: Swift.String?
        /// The key that indicates the notification type for the push notification. This key is a value that's defined by the identifier property of one of your app's registered categories.
        public var category: Swift.String?
        /// An arbitrary identifier that, if assigned to multiple messages, APNs uses to coalesce the messages into a single push notification instead of delivering each message individually. This value can't exceed 64 bytes. Amazon Pinpoint specifies this value in the apns-collapse-id request header when it sends the notification message to APNs.
        public var collapseId: Swift.String?
        /// The JSON payload to use for a silent push notification. This payload is added to the data.pinpoint.jsonBody object of the notification.
        public var data: [Swift.String:Swift.String]?
        /// The URL of an image or video to display in the push notification.
        public var mediaUrl: Swift.String?
        /// The authentication method that you want Amazon Pinpoint to use when authenticating with APNs, CERTIFICATE or TOKEN.
        public var preferredAuthenticationMethod: Swift.String?
        /// para>5 - Low priority, the notification might be delayed, delivered as part of a group, or throttled./listitem>
        /// * 10 - High priority, the notification is sent immediately. This is the default value. A high priority notification should trigger an alert, play a sound, or badge your app's icon on the recipient's device.
        /// /para> Amazon Pinpoint specifies this value in the apns-priority request header when it sends the notification message to APNs. The equivalent values for Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), are normal, for 5, and high, for 10. If you specify an FCM value for this property, Amazon Pinpoint accepts and converts the value to the corresponding APNs value.
        public var priority: Swift.String?
        /// The raw, JSON-formatted string to use as the payload for the notification message. If specified, this value overrides all other content for the message. If you specify the raw content of an APNs push notification, the message payload has to include the content-available key. The value of the content-available key has to be an integer, and can only be 0 or 1. If you're sending a standard notification, set the value of content-available to 0. If you're sending a silent (background) notification, set the value of content-available to 1. Additionally, silent notification payloads can't include the alert, badge, or sound keys. For more information, see [Generating a Remote Notification](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/generating_a_remote_notification) and [Pushing Background Updates to Your App](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/pushing_background_updates_to_your_app) on the Apple Developer website.
        public var rawContent: Swift.String?
        /// Specifies whether the notification is a silent push notification. A silent (or background) push notification isn't displayed on recipients' devices. You can use silent push notifications to make small updates to your app, or to display messages in an in-app message center. Amazon Pinpoint uses this property to determine the correct value for the apns-push-type request header when it sends the notification message to APNs. If you specify a value of true for this property, Amazon Pinpoint sets the value for the apns-push-type header field to background. If you specify the raw content of an APNs push notification, the message payload has to include the content-available key. For silent (background) notifications, set the value of content-available to 1. Additionally, the message payload for a silent notification can't include the alert, badge, or sound keys. For more information, see [Generating a Remote Notification](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/generating_a_remote_notification) and [Pushing Background Updates to Your App](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/pushing_background_updates_to_your_app) on the Apple Developer website. Apple has indicated that they will throttle "excessive" background notifications based on current traffic volumes. To prevent your notifications being throttled, Apple recommends that you send no more than 3 silent push notifications to each recipient per hour.
        public var silentPush: Swift.Bool?
        /// The key for the sound to play when the recipient receives the push notification. The value for this key is the name of a sound file in your app's main bundle or the Library/Sounds folder in your app's data container. If the sound file can't be found or you specify default for the value, the system plays the default alert sound.
        public var sound: Swift.String?
        /// The default message variables to use in the notification message. You can override these default variables with individual address variables.
        public var substitutions: [Swift.String:[Swift.String]]?
        /// The key that represents your app-specific identifier for grouping notifications. If you provide a Notification Content app extension, you can use this value to group your notifications together.
        public var threadId: Swift.String?
        /// The amount of time, in seconds, that APNs should store and attempt to deliver the push notification, if the service is unable to deliver the notification the first time. If this value is 0, APNs treats the notification as if it expires immediately and the service doesn't store or try to deliver the notification again. Amazon Pinpoint specifies this value in the apns-expiration request header when it sends the notification message to APNs.
        public var timeToLive: Swift.Int?
        /// The title to display above the notification message on the recipient's device.
        public var title: Swift.String?
        /// The URL to open in the recipient's default mobile browser, if a recipient taps the push notification and the value of the Action property is URL.
        public var url: Swift.String?

        public init (
            action: PinpointClientTypes.Action? = nil,
            apnsPushType: Swift.String? = nil,
            badge: Swift.Int? = nil,
            body: Swift.String? = nil,
            category: Swift.String? = nil,
            collapseId: Swift.String? = nil,
            data: [Swift.String:Swift.String]? = nil,
            mediaUrl: Swift.String? = nil,
            preferredAuthenticationMethod: Swift.String? = nil,
            priority: Swift.String? = nil,
            rawContent: Swift.String? = nil,
            silentPush: Swift.Bool? = nil,
            sound: Swift.String? = nil,
            substitutions: [Swift.String:[Swift.String]]? = nil,
            threadId: Swift.String? = nil,
            timeToLive: Swift.Int? = nil,
            title: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.action = action
            self.apnsPushType = apnsPushType
            self.badge = badge
            self.body = body
            self.category = category
            self.collapseId = collapseId
            self.data = data
            self.mediaUrl = mediaUrl
            self.preferredAuthenticationMethod = preferredAuthenticationMethod
            self.priority = priority
            self.rawContent = rawContent
            self.silentPush = silentPush
            self.sound = sound
            self.substitutions = substitutions
            self.threadId = threadId
            self.timeToLive = timeToLive
            self.title = title
            self.url = url
        }
    }

}

extension PinpointClientTypes.APNSPushNotificationTemplate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case body = "Body"
        case mediaUrl = "MediaUrl"
        case rawContent = "RawContent"
        case sound = "Sound"
        case title = "Title"
        case url = "Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let mediaUrl = self.mediaUrl {
            try encodeContainer.encode(mediaUrl, forKey: .mediaUrl)
        }
        if let rawContent = self.rawContent {
            try encodeContainer.encode(rawContent, forKey: .rawContent)
        }
        if let sound = self.sound {
            try encodeContainer.encode(sound, forKey: .sound)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Action.self, forKey: .action)
        action = actionDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let mediaUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mediaUrl)
        mediaUrl = mediaUrlDecoded
        let rawContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rawContent)
        rawContent = rawContentDecoded
        let soundDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sound)
        sound = soundDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies channel-specific content and settings for a message template that can be used in push notifications that are sent through the APNs (Apple Push Notification service) channel.
    public struct APNSPushNotificationTemplate: Swift.Equatable {
        /// The action to occur if a recipient taps a push notification that's based on the message template. Valid values are:
        ///
        /// * OPEN_APP - Your app opens or it becomes the foreground app if it was sent to the background. This is the default action.
        ///
        /// * DEEP_LINK - Your app opens and displays a designated user interface in the app. This setting uses the deep-linking features of the iOS platform.
        ///
        /// * URL - The default mobile browser on the recipient's device opens and loads the web page at a URL that you specify.
        public var action: PinpointClientTypes.Action?
        /// The message body to use in push notifications that are based on the message template.
        public var body: Swift.String?
        /// The URL of an image or video to display in push notifications that are based on the message template.
        public var mediaUrl: Swift.String?
        /// The raw, JSON-formatted string to use as the payload for push notifications that are based on the message template. If specified, this value overrides all other content for the message template.
        public var rawContent: Swift.String?
        /// The key for the sound to play when the recipient receives a push notification that's based on the message template. The value for this key is the name of a sound file in your app's main bundle or the Library/Sounds folder in your app's data container. If the sound file can't be found or you specify default for the value, the system plays the default alert sound.
        public var sound: Swift.String?
        /// The title to use in push notifications that are based on the message template. This title appears above the notification message on a recipient's device.
        public var title: Swift.String?
        /// The URL to open in the recipient's default mobile browser, if a recipient taps a push notification that's based on the message template and the value of the Action property is URL.
        public var url: Swift.String?

        public init (
            action: PinpointClientTypes.Action? = nil,
            body: Swift.String? = nil,
            mediaUrl: Swift.String? = nil,
            rawContent: Swift.String? = nil,
            sound: Swift.String? = nil,
            title: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.action = action
            self.body = body
            self.mediaUrl = mediaUrl
            self.rawContent = rawContent
            self.sound = sound
            self.title = title
            self.url = url
        }
    }

}

extension PinpointClientTypes.APNSSandboxChannelRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId = "BundleId"
        case certificate = "Certificate"
        case defaultAuthenticationMethod = "DefaultAuthenticationMethod"
        case enabled = "Enabled"
        case privateKey = "PrivateKey"
        case teamId = "TeamId"
        case tokenKey = "TokenKey"
        case tokenKeyId = "TokenKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bundleId = self.bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let certificate = self.certificate {
            try encodeContainer.encode(certificate, forKey: .certificate)
        }
        if let defaultAuthenticationMethod = self.defaultAuthenticationMethod {
            try encodeContainer.encode(defaultAuthenticationMethod, forKey: .defaultAuthenticationMethod)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let privateKey = self.privateKey {
            try encodeContainer.encode(privateKey, forKey: .privateKey)
        }
        if let teamId = self.teamId {
            try encodeContainer.encode(teamId, forKey: .teamId)
        }
        if let tokenKey = self.tokenKey {
            try encodeContainer.encode(tokenKey, forKey: .tokenKey)
        }
        if let tokenKeyId = self.tokenKeyId {
            try encodeContainer.encode(tokenKeyId, forKey: .tokenKeyId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let certificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificate)
        certificate = certificateDecoded
        let defaultAuthenticationMethodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultAuthenticationMethod)
        defaultAuthenticationMethod = defaultAuthenticationMethodDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let privateKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateKey)
        privateKey = privateKeyDecoded
        let teamIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .teamId)
        teamId = teamIdDecoded
        let tokenKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenKey)
        tokenKey = tokenKeyDecoded
        let tokenKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenKeyId)
        tokenKeyId = tokenKeyIdDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the status and settings of the APNs (Apple Push Notification service) sandbox channel for an application.
    public struct APNSSandboxChannelRequest: Swift.Equatable {
        /// The bundle identifier that's assigned to your iOS app. This identifier is used for APNs tokens.
        public var bundleId: Swift.String?
        /// The APNs client certificate that you received from Apple, if you want Amazon Pinpoint to communicate with the APNs sandbox environment by using an APNs certificate.
        public var certificate: Swift.String?
        /// The default authentication method that you want Amazon Pinpoint to use when authenticating with the APNs sandbox environment, key or certificate.
        public var defaultAuthenticationMethod: Swift.String?
        /// Specifies whether to enable the APNs sandbox channel for the application.
        public var enabled: Swift.Bool?
        /// The private key for the APNs client certificate that you want Amazon Pinpoint to use to communicate with the APNs sandbox environment.
        public var privateKey: Swift.String?
        /// The identifier that's assigned to your Apple developer account team. This identifier is used for APNs tokens.
        public var teamId: Swift.String?
        /// The authentication key to use for APNs tokens.
        public var tokenKey: Swift.String?
        /// The key identifier that's assigned to your APNs signing key, if you want Amazon Pinpoint to communicate with the APNs sandbox environment by using APNs tokens.
        public var tokenKeyId: Swift.String?

        public init (
            bundleId: Swift.String? = nil,
            certificate: Swift.String? = nil,
            defaultAuthenticationMethod: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            privateKey: Swift.String? = nil,
            teamId: Swift.String? = nil,
            tokenKey: Swift.String? = nil,
            tokenKeyId: Swift.String? = nil
        )
        {
            self.bundleId = bundleId
            self.certificate = certificate
            self.defaultAuthenticationMethod = defaultAuthenticationMethod
            self.enabled = enabled
            self.privateKey = privateKey
            self.teamId = teamId
            self.tokenKey = tokenKey
            self.tokenKeyId = tokenKeyId
        }
    }

}

extension PinpointClientTypes.APNSSandboxChannelResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case creationDate = "CreationDate"
        case defaultAuthenticationMethod = "DefaultAuthenticationMethod"
        case enabled = "Enabled"
        case hasCredential = "HasCredential"
        case hasTokenKey = "HasTokenKey"
        case id = "Id"
        case isArchived = "IsArchived"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedDate = "LastModifiedDate"
        case platform = "Platform"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let defaultAuthenticationMethod = self.defaultAuthenticationMethod {
            try encodeContainer.encode(defaultAuthenticationMethod, forKey: .defaultAuthenticationMethod)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let hasCredential = self.hasCredential {
            try encodeContainer.encode(hasCredential, forKey: .hasCredential)
        }
        if let hasTokenKey = self.hasTokenKey {
            try encodeContainer.encode(hasTokenKey, forKey: .hasTokenKey)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isArchived = self.isArchived {
            try encodeContainer.encode(isArchived, forKey: .isArchived)
        }
        if let lastModifiedBy = self.lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let platform = self.platform {
            try encodeContainer.encode(platform, forKey: .platform)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let defaultAuthenticationMethodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultAuthenticationMethod)
        defaultAuthenticationMethod = defaultAuthenticationMethodDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let hasCredentialDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasCredential)
        hasCredential = hasCredentialDecoded
        let hasTokenKeyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasTokenKey)
        hasTokenKey = hasTokenKeyDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let isArchivedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isArchived)
        isArchived = isArchivedDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let platformDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platform)
        platform = platformDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the status and settings of the APNs (Apple Push Notification service) sandbox channel for an application.
    public struct APNSSandboxChannelResponse: Swift.Equatable {
        /// The unique identifier for the application that the APNs sandbox channel applies to.
        public var applicationId: Swift.String?
        /// The date and time when the APNs sandbox channel was enabled.
        public var creationDate: Swift.String?
        /// The default authentication method that Amazon Pinpoint uses to authenticate with the APNs sandbox environment for this channel, key or certificate.
        public var defaultAuthenticationMethod: Swift.String?
        /// Specifies whether the APNs sandbox channel is enabled for the application.
        public var enabled: Swift.Bool?
        /// (Not used) This property is retained only for backward compatibility.
        public var hasCredential: Swift.Bool?
        /// Specifies whether the APNs sandbox channel is configured to communicate with APNs by using APNs tokens. To provide an authentication key for APNs tokens, set the TokenKey property of the channel.
        public var hasTokenKey: Swift.Bool?
        /// (Deprecated) An identifier for the APNs sandbox channel. This property is retained only for backward compatibility.
        public var id: Swift.String?
        /// Specifies whether the APNs sandbox channel is archived.
        public var isArchived: Swift.Bool?
        /// The user who last modified the APNs sandbox channel.
        public var lastModifiedBy: Swift.String?
        /// The date and time when the APNs sandbox channel was last modified.
        public var lastModifiedDate: Swift.String?
        /// The type of messaging or notification platform for the channel. For the APNs sandbox channel, this value is APNS_SANDBOX.
        /// This member is required.
        public var platform: Swift.String?
        /// The current version of the APNs sandbox channel.
        public var version: Swift.Int?

        public init (
            applicationId: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            defaultAuthenticationMethod: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            hasCredential: Swift.Bool? = nil,
            hasTokenKey: Swift.Bool? = nil,
            id: Swift.String? = nil,
            isArchived: Swift.Bool? = nil,
            lastModifiedBy: Swift.String? = nil,
            lastModifiedDate: Swift.String? = nil,
            platform: Swift.String? = nil,
            version: Swift.Int? = nil
        )
        {
            self.applicationId = applicationId
            self.creationDate = creationDate
            self.defaultAuthenticationMethod = defaultAuthenticationMethod
            self.enabled = enabled
            self.hasCredential = hasCredential
            self.hasTokenKey = hasTokenKey
            self.id = id
            self.isArchived = isArchived
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedDate = lastModifiedDate
            self.platform = platform
            self.version = version
        }
    }

}

extension PinpointClientTypes.APNSVoipChannelRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId = "BundleId"
        case certificate = "Certificate"
        case defaultAuthenticationMethod = "DefaultAuthenticationMethod"
        case enabled = "Enabled"
        case privateKey = "PrivateKey"
        case teamId = "TeamId"
        case tokenKey = "TokenKey"
        case tokenKeyId = "TokenKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bundleId = self.bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let certificate = self.certificate {
            try encodeContainer.encode(certificate, forKey: .certificate)
        }
        if let defaultAuthenticationMethod = self.defaultAuthenticationMethod {
            try encodeContainer.encode(defaultAuthenticationMethod, forKey: .defaultAuthenticationMethod)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let privateKey = self.privateKey {
            try encodeContainer.encode(privateKey, forKey: .privateKey)
        }
        if let teamId = self.teamId {
            try encodeContainer.encode(teamId, forKey: .teamId)
        }
        if let tokenKey = self.tokenKey {
            try encodeContainer.encode(tokenKey, forKey: .tokenKey)
        }
        if let tokenKeyId = self.tokenKeyId {
            try encodeContainer.encode(tokenKeyId, forKey: .tokenKeyId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let certificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificate)
        certificate = certificateDecoded
        let defaultAuthenticationMethodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultAuthenticationMethod)
        defaultAuthenticationMethod = defaultAuthenticationMethodDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let privateKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateKey)
        privateKey = privateKeyDecoded
        let teamIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .teamId)
        teamId = teamIdDecoded
        let tokenKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenKey)
        tokenKey = tokenKeyDecoded
        let tokenKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenKeyId)
        tokenKeyId = tokenKeyIdDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the status and settings of the APNs (Apple Push Notification service) VoIP channel for an application.
    public struct APNSVoipChannelRequest: Swift.Equatable {
        /// The bundle identifier that's assigned to your iOS app. This identifier is used for APNs tokens.
        public var bundleId: Swift.String?
        /// The APNs client certificate that you received from Apple, if you want Amazon Pinpoint to communicate with APNs by using an APNs certificate.
        public var certificate: Swift.String?
        /// The default authentication method that you want Amazon Pinpoint to use when authenticating with APNs, key or certificate.
        public var defaultAuthenticationMethod: Swift.String?
        /// Specifies whether to enable the APNs VoIP channel for the application.
        public var enabled: Swift.Bool?
        /// The private key for the APNs client certificate that you want Amazon Pinpoint to use to communicate with APNs.
        public var privateKey: Swift.String?
        /// The identifier that's assigned to your Apple developer account team. This identifier is used for APNs tokens.
        public var teamId: Swift.String?
        /// The authentication key to use for APNs tokens.
        public var tokenKey: Swift.String?
        /// The key identifier that's assigned to your APNs signing key, if you want Amazon Pinpoint to communicate with APNs by using APNs tokens.
        public var tokenKeyId: Swift.String?

        public init (
            bundleId: Swift.String? = nil,
            certificate: Swift.String? = nil,
            defaultAuthenticationMethod: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            privateKey: Swift.String? = nil,
            teamId: Swift.String? = nil,
            tokenKey: Swift.String? = nil,
            tokenKeyId: Swift.String? = nil
        )
        {
            self.bundleId = bundleId
            self.certificate = certificate
            self.defaultAuthenticationMethod = defaultAuthenticationMethod
            self.enabled = enabled
            self.privateKey = privateKey
            self.teamId = teamId
            self.tokenKey = tokenKey
            self.tokenKeyId = tokenKeyId
        }
    }

}

extension PinpointClientTypes.APNSVoipChannelResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case creationDate = "CreationDate"
        case defaultAuthenticationMethod = "DefaultAuthenticationMethod"
        case enabled = "Enabled"
        case hasCredential = "HasCredential"
        case hasTokenKey = "HasTokenKey"
        case id = "Id"
        case isArchived = "IsArchived"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedDate = "LastModifiedDate"
        case platform = "Platform"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let defaultAuthenticationMethod = self.defaultAuthenticationMethod {
            try encodeContainer.encode(defaultAuthenticationMethod, forKey: .defaultAuthenticationMethod)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let hasCredential = self.hasCredential {
            try encodeContainer.encode(hasCredential, forKey: .hasCredential)
        }
        if let hasTokenKey = self.hasTokenKey {
            try encodeContainer.encode(hasTokenKey, forKey: .hasTokenKey)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isArchived = self.isArchived {
            try encodeContainer.encode(isArchived, forKey: .isArchived)
        }
        if let lastModifiedBy = self.lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let platform = self.platform {
            try encodeContainer.encode(platform, forKey: .platform)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let defaultAuthenticationMethodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultAuthenticationMethod)
        defaultAuthenticationMethod = defaultAuthenticationMethodDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let hasCredentialDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasCredential)
        hasCredential = hasCredentialDecoded
        let hasTokenKeyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasTokenKey)
        hasTokenKey = hasTokenKeyDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let isArchivedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isArchived)
        isArchived = isArchivedDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let platformDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platform)
        platform = platformDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the status and settings of the APNs (Apple Push Notification service) VoIP channel for an application.
    public struct APNSVoipChannelResponse: Swift.Equatable {
        /// The unique identifier for the application that the APNs VoIP channel applies to.
        public var applicationId: Swift.String?
        /// The date and time when the APNs VoIP channel was enabled.
        public var creationDate: Swift.String?
        /// The default authentication method that Amazon Pinpoint uses to authenticate with APNs for this channel, key or certificate.
        public var defaultAuthenticationMethod: Swift.String?
        /// Specifies whether the APNs VoIP channel is enabled for the application.
        public var enabled: Swift.Bool?
        /// (Not used) This property is retained only for backward compatibility.
        public var hasCredential: Swift.Bool?
        /// Specifies whether the APNs VoIP channel is configured to communicate with APNs by using APNs tokens. To provide an authentication key for APNs tokens, set the TokenKey property of the channel.
        public var hasTokenKey: Swift.Bool?
        /// (Deprecated) An identifier for the APNs VoIP channel. This property is retained only for backward compatibility.
        public var id: Swift.String?
        /// Specifies whether the APNs VoIP channel is archived.
        public var isArchived: Swift.Bool?
        /// The user who last modified the APNs VoIP channel.
        public var lastModifiedBy: Swift.String?
        /// The date and time when the APNs VoIP channel was last modified.
        public var lastModifiedDate: Swift.String?
        /// The type of messaging or notification platform for the channel. For the APNs VoIP channel, this value is APNS_VOIP.
        /// This member is required.
        public var platform: Swift.String?
        /// The current version of the APNs VoIP channel.
        public var version: Swift.Int?

        public init (
            applicationId: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            defaultAuthenticationMethod: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            hasCredential: Swift.Bool? = nil,
            hasTokenKey: Swift.Bool? = nil,
            id: Swift.String? = nil,
            isArchived: Swift.Bool? = nil,
            lastModifiedBy: Swift.String? = nil,
            lastModifiedDate: Swift.String? = nil,
            platform: Swift.String? = nil,
            version: Swift.Int? = nil
        )
        {
            self.applicationId = applicationId
            self.creationDate = creationDate
            self.defaultAuthenticationMethod = defaultAuthenticationMethod
            self.enabled = enabled
            self.hasCredential = hasCredential
            self.hasTokenKey = hasTokenKey
            self.id = id
            self.isArchived = isArchived
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedDate = lastModifiedDate
            self.platform = platform
            self.version = version
        }
    }

}

extension PinpointClientTypes.APNSVoipSandboxChannelRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId = "BundleId"
        case certificate = "Certificate"
        case defaultAuthenticationMethod = "DefaultAuthenticationMethod"
        case enabled = "Enabled"
        case privateKey = "PrivateKey"
        case teamId = "TeamId"
        case tokenKey = "TokenKey"
        case tokenKeyId = "TokenKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bundleId = self.bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let certificate = self.certificate {
            try encodeContainer.encode(certificate, forKey: .certificate)
        }
        if let defaultAuthenticationMethod = self.defaultAuthenticationMethod {
            try encodeContainer.encode(defaultAuthenticationMethod, forKey: .defaultAuthenticationMethod)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let privateKey = self.privateKey {
            try encodeContainer.encode(privateKey, forKey: .privateKey)
        }
        if let teamId = self.teamId {
            try encodeContainer.encode(teamId, forKey: .teamId)
        }
        if let tokenKey = self.tokenKey {
            try encodeContainer.encode(tokenKey, forKey: .tokenKey)
        }
        if let tokenKeyId = self.tokenKeyId {
            try encodeContainer.encode(tokenKeyId, forKey: .tokenKeyId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let certificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificate)
        certificate = certificateDecoded
        let defaultAuthenticationMethodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultAuthenticationMethod)
        defaultAuthenticationMethod = defaultAuthenticationMethodDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let privateKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateKey)
        privateKey = privateKeyDecoded
        let teamIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .teamId)
        teamId = teamIdDecoded
        let tokenKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenKey)
        tokenKey = tokenKeyDecoded
        let tokenKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenKeyId)
        tokenKeyId = tokenKeyIdDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the status and settings of the APNs (Apple Push Notification service) VoIP sandbox channel for an application.
    public struct APNSVoipSandboxChannelRequest: Swift.Equatable {
        /// The bundle identifier that's assigned to your iOS app. This identifier is used for APNs tokens.
        public var bundleId: Swift.String?
        /// The APNs client certificate that you received from Apple, if you want Amazon Pinpoint to communicate with the APNs sandbox environment by using an APNs certificate.
        public var certificate: Swift.String?
        /// The default authentication method that you want Amazon Pinpoint to use when authenticating with the APNs sandbox environment for this channel, key or certificate.
        public var defaultAuthenticationMethod: Swift.String?
        /// Specifies whether the APNs VoIP sandbox channel is enabled for the application.
        public var enabled: Swift.Bool?
        /// The private key for the APNs client certificate that you want Amazon Pinpoint to use to communicate with the APNs sandbox environment.
        public var privateKey: Swift.String?
        /// The identifier that's assigned to your Apple developer account team. This identifier is used for APNs tokens.
        public var teamId: Swift.String?
        /// The authentication key to use for APNs tokens.
        public var tokenKey: Swift.String?
        /// The key identifier that's assigned to your APNs signing key, if you want Amazon Pinpoint to communicate with the APNs sandbox environment by using APNs tokens.
        public var tokenKeyId: Swift.String?

        public init (
            bundleId: Swift.String? = nil,
            certificate: Swift.String? = nil,
            defaultAuthenticationMethod: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            privateKey: Swift.String? = nil,
            teamId: Swift.String? = nil,
            tokenKey: Swift.String? = nil,
            tokenKeyId: Swift.String? = nil
        )
        {
            self.bundleId = bundleId
            self.certificate = certificate
            self.defaultAuthenticationMethod = defaultAuthenticationMethod
            self.enabled = enabled
            self.privateKey = privateKey
            self.teamId = teamId
            self.tokenKey = tokenKey
            self.tokenKeyId = tokenKeyId
        }
    }

}

extension PinpointClientTypes.APNSVoipSandboxChannelResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case creationDate = "CreationDate"
        case defaultAuthenticationMethod = "DefaultAuthenticationMethod"
        case enabled = "Enabled"
        case hasCredential = "HasCredential"
        case hasTokenKey = "HasTokenKey"
        case id = "Id"
        case isArchived = "IsArchived"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedDate = "LastModifiedDate"
        case platform = "Platform"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let defaultAuthenticationMethod = self.defaultAuthenticationMethod {
            try encodeContainer.encode(defaultAuthenticationMethod, forKey: .defaultAuthenticationMethod)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let hasCredential = self.hasCredential {
            try encodeContainer.encode(hasCredential, forKey: .hasCredential)
        }
        if let hasTokenKey = self.hasTokenKey {
            try encodeContainer.encode(hasTokenKey, forKey: .hasTokenKey)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isArchived = self.isArchived {
            try encodeContainer.encode(isArchived, forKey: .isArchived)
        }
        if let lastModifiedBy = self.lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let platform = self.platform {
            try encodeContainer.encode(platform, forKey: .platform)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let defaultAuthenticationMethodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultAuthenticationMethod)
        defaultAuthenticationMethod = defaultAuthenticationMethodDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let hasCredentialDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasCredential)
        hasCredential = hasCredentialDecoded
        let hasTokenKeyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasTokenKey)
        hasTokenKey = hasTokenKeyDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let isArchivedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isArchived)
        isArchived = isArchivedDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let platformDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platform)
        platform = platformDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the status and settings of the APNs (Apple Push Notification service) VoIP sandbox channel for an application.
    public struct APNSVoipSandboxChannelResponse: Swift.Equatable {
        /// The unique identifier for the application that the APNs VoIP sandbox channel applies to.
        public var applicationId: Swift.String?
        /// The date and time when the APNs VoIP sandbox channel was enabled.
        public var creationDate: Swift.String?
        /// The default authentication method that Amazon Pinpoint uses to authenticate with the APNs sandbox environment for this channel, key or certificate.
        public var defaultAuthenticationMethod: Swift.String?
        /// Specifies whether the APNs VoIP sandbox channel is enabled for the application.
        public var enabled: Swift.Bool?
        /// (Not used) This property is retained only for backward compatibility.
        public var hasCredential: Swift.Bool?
        /// Specifies whether the APNs VoIP sandbox channel is configured to communicate with APNs by using APNs tokens. To provide an authentication key for APNs tokens, set the TokenKey property of the channel.
        public var hasTokenKey: Swift.Bool?
        /// (Deprecated) An identifier for the APNs VoIP sandbox channel. This property is retained only for backward compatibility.
        public var id: Swift.String?
        /// Specifies whether the APNs VoIP sandbox channel is archived.
        public var isArchived: Swift.Bool?
        /// The user who last modified the APNs VoIP sandbox channel.
        public var lastModifiedBy: Swift.String?
        /// The date and time when the APNs VoIP sandbox channel was last modified.
        public var lastModifiedDate: Swift.String?
        /// The type of messaging or notification platform for the channel. For the APNs VoIP sandbox channel, this value is APNS_VOIP_SANDBOX.
        /// This member is required.
        public var platform: Swift.String?
        /// The current version of the APNs VoIP sandbox channel.
        public var version: Swift.Int?

        public init (
            applicationId: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            defaultAuthenticationMethod: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            hasCredential: Swift.Bool? = nil,
            hasTokenKey: Swift.Bool? = nil,
            id: Swift.String? = nil,
            isArchived: Swift.Bool? = nil,
            lastModifiedBy: Swift.String? = nil,
            lastModifiedDate: Swift.String? = nil,
            platform: Swift.String? = nil,
            version: Swift.Int? = nil
        )
        {
            self.applicationId = applicationId
            self.creationDate = creationDate
            self.defaultAuthenticationMethod = defaultAuthenticationMethod
            self.enabled = enabled
            self.hasCredential = hasCredential
            self.hasTokenKey = hasTokenKey
            self.id = id
            self.isArchived = isArchived
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedDate = lastModifiedDate
            self.platform = platform
            self.version = version
        }
    }

}

extension PinpointClientTypes {
    public enum Action: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deepLink
        case openApp
        case url
        case sdkUnknown(Swift.String)

        public static var allCases: [Action] {
            return [
                .deepLink,
                .openApp,
                .url,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deepLink: return "DEEP_LINK"
            case .openApp: return "OPEN_APP"
            case .url: return "URL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Action(rawValue: rawValue) ?? Action.sdkUnknown(rawValue)
        }
    }
}

extension PinpointClientTypes.ActivitiesResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case item = "Item"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let item = item {
            var itemContainer = encodeContainer.nestedUnkeyedContainer(forKey: .item)
            for activityresponse0 in item {
                try itemContainer.encode(activityresponse0)
            }
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([PinpointClientTypes.ActivityResponse?].self, forKey: .item)
        var itemDecoded0:[PinpointClientTypes.ActivityResponse]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [PinpointClientTypes.ActivityResponse]()
            for structure0 in itemContainer {
                if let structure0 = structure0 {
                    itemDecoded0?.append(structure0)
                }
            }
        }
        item = itemDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the activities that were performed by a campaign.
    public struct ActivitiesResponse: Swift.Equatable {
        /// An array of responses, one for each activity that was performed by the campaign.
        /// This member is required.
        public var item: [PinpointClientTypes.ActivityResponse]?
        /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
        public var nextToken: Swift.String?

        public init (
            item: [PinpointClientTypes.ActivityResponse]? = nil,
            nextToken: Swift.String? = nil
        )
        {
            self.item = item
            self.nextToken = nextToken
        }
    }

}

extension PinpointClientTypes.Activity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case custom = "CUSTOM"
        case conditionalSplit = "ConditionalSplit"
        case contactCenter = "ContactCenter"
        case description = "Description"
        case email = "EMAIL"
        case holdout = "Holdout"
        case multiCondition = "MultiCondition"
        case push = "PUSH"
        case randomSplit = "RandomSplit"
        case sms = "SMS"
        case wait = "Wait"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let custom = self.custom {
            try encodeContainer.encode(custom, forKey: .custom)
        }
        if let conditionalSplit = self.conditionalSplit {
            try encodeContainer.encode(conditionalSplit, forKey: .conditionalSplit)
        }
        if let contactCenter = self.contactCenter {
            try encodeContainer.encode(contactCenter, forKey: .contactCenter)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let email = self.email {
            try encodeContainer.encode(email, forKey: .email)
        }
        if let holdout = self.holdout {
            try encodeContainer.encode(holdout, forKey: .holdout)
        }
        if let multiCondition = self.multiCondition {
            try encodeContainer.encode(multiCondition, forKey: .multiCondition)
        }
        if let push = self.push {
            try encodeContainer.encode(push, forKey: .push)
        }
        if let randomSplit = self.randomSplit {
            try encodeContainer.encode(randomSplit, forKey: .randomSplit)
        }
        if let sms = self.sms {
            try encodeContainer.encode(sms, forKey: .sms)
        }
        if let wait = self.wait {
            try encodeContainer.encode(wait, forKey: .wait)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CustomMessageActivity.self, forKey: .custom)
        custom = customDecoded
        let conditionalSplitDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ConditionalSplitActivity.self, forKey: .conditionalSplit)
        conditionalSplit = conditionalSplitDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let emailDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EmailMessageActivity.self, forKey: .email)
        email = emailDecoded
        let holdoutDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.HoldoutActivity.self, forKey: .holdout)
        holdout = holdoutDecoded
        let multiConditionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MultiConditionalSplitActivity.self, forKey: .multiCondition)
        multiCondition = multiConditionDecoded
        let pushDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.PushMessageActivity.self, forKey: .push)
        push = pushDecoded
        let randomSplitDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.RandomSplitActivity.self, forKey: .randomSplit)
        randomSplit = randomSplitDecoded
        let smsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SMSMessageActivity.self, forKey: .sms)
        sms = smsDecoded
        let waitDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.WaitActivity.self, forKey: .wait)
        wait = waitDecoded
        let contactCenterDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ContactCenterActivity.self, forKey: .contactCenter)
        contactCenter = contactCenterDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the configuration and other settings for an activity in a journey.
    public struct Activity: Swift.Equatable {
        /// The settings for a yes/no split activity. This type of activity sends participants down one of two paths in a journey, based on conditions that you specify.
        public var conditionalSplit: PinpointClientTypes.ConditionalSplitActivity?
        /// The settings for a connect activity. This type of activity initiates a contact center call to participants.
        public var contactCenter: PinpointClientTypes.ContactCenterActivity?
        /// The settings for a custom message activity. This type of activity calls an AWS Lambda function or web hook that sends messages to participants.
        public var custom: PinpointClientTypes.CustomMessageActivity?
        /// The custom description of the activity.
        public var description: Swift.String?
        /// The settings for an email activity. This type of activity sends an email message to participants.
        public var email: PinpointClientTypes.EmailMessageActivity?
        /// The settings for a holdout activity. This type of activity stops a journey for a specified percentage of participants.
        public var holdout: PinpointClientTypes.HoldoutActivity?
        /// The settings for a multivariate split activity. This type of activity sends participants down one of as many as five paths (including a default Else path) in a journey, based on conditions that you specify.
        public var multiCondition: PinpointClientTypes.MultiConditionalSplitActivity?
        /// The settings for a push notification activity. This type of activity sends a push notification to participants.
        public var push: PinpointClientTypes.PushMessageActivity?
        /// The settings for a random split activity. This type of activity randomly sends specified percentages of participants down one of as many as five paths in a journey, based on conditions that you specify.
        public var randomSplit: PinpointClientTypes.RandomSplitActivity?
        /// The settings for an SMS activity. This type of activity sends a text message to participants.
        public var sms: PinpointClientTypes.SMSMessageActivity?
        /// The settings for a wait activity. This type of activity waits for a certain amount of time or until a specific date and time before moving participants to the next activity in a journey.
        public var wait: PinpointClientTypes.WaitActivity?

        public init (
            conditionalSplit: PinpointClientTypes.ConditionalSplitActivity? = nil,
            contactCenter: PinpointClientTypes.ContactCenterActivity? = nil,
            custom: PinpointClientTypes.CustomMessageActivity? = nil,
            description: Swift.String? = nil,
            email: PinpointClientTypes.EmailMessageActivity? = nil,
            holdout: PinpointClientTypes.HoldoutActivity? = nil,
            multiCondition: PinpointClientTypes.MultiConditionalSplitActivity? = nil,
            push: PinpointClientTypes.PushMessageActivity? = nil,
            randomSplit: PinpointClientTypes.RandomSplitActivity? = nil,
            sms: PinpointClientTypes.SMSMessageActivity? = nil,
            wait: PinpointClientTypes.WaitActivity? = nil
        )
        {
            self.conditionalSplit = conditionalSplit
            self.contactCenter = contactCenter
            self.custom = custom
            self.description = description
            self.email = email
            self.holdout = holdout
            self.multiCondition = multiCondition
            self.push = push
            self.randomSplit = randomSplit
            self.sms = sms
            self.wait = wait
        }
    }

}

extension PinpointClientTypes.ActivityResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case campaignId = "CampaignId"
        case end = "End"
        case id = "Id"
        case result = "Result"
        case scheduledStart = "ScheduledStart"
        case start = "Start"
        case state = "State"
        case successfulEndpointCount = "SuccessfulEndpointCount"
        case timezonesCompletedCount = "TimezonesCompletedCount"
        case timezonesTotalCount = "TimezonesTotalCount"
        case totalEndpointCount = "TotalEndpointCount"
        case treatmentId = "TreatmentId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let campaignId = self.campaignId {
            try encodeContainer.encode(campaignId, forKey: .campaignId)
        }
        if let end = self.end {
            try encodeContainer.encode(end, forKey: .end)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let result = self.result {
            try encodeContainer.encode(result, forKey: .result)
        }
        if let scheduledStart = self.scheduledStart {
            try encodeContainer.encode(scheduledStart, forKey: .scheduledStart)
        }
        if let start = self.start {
            try encodeContainer.encode(start, forKey: .start)
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let successfulEndpointCount = self.successfulEndpointCount {
            try encodeContainer.encode(successfulEndpointCount, forKey: .successfulEndpointCount)
        }
        if let timezonesCompletedCount = self.timezonesCompletedCount {
            try encodeContainer.encode(timezonesCompletedCount, forKey: .timezonesCompletedCount)
        }
        if let timezonesTotalCount = self.timezonesTotalCount {
            try encodeContainer.encode(timezonesTotalCount, forKey: .timezonesTotalCount)
        }
        if let totalEndpointCount = self.totalEndpointCount {
            try encodeContainer.encode(totalEndpointCount, forKey: .totalEndpointCount)
        }
        if let treatmentId = self.treatmentId {
            try encodeContainer.encode(treatmentId, forKey: .treatmentId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let campaignIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .campaignId)
        campaignId = campaignIdDecoded
        let endDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .end)
        end = endDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let resultDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .result)
        result = resultDecoded
        let scheduledStartDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledStart)
        scheduledStart = scheduledStartDecoded
        let startDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .start)
        start = startDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let successfulEndpointCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .successfulEndpointCount)
        successfulEndpointCount = successfulEndpointCountDecoded
        let timezonesCompletedCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timezonesCompletedCount)
        timezonesCompletedCount = timezonesCompletedCountDecoded
        let timezonesTotalCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timezonesTotalCount)
        timezonesTotalCount = timezonesTotalCountDecoded
        let totalEndpointCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalEndpointCount)
        totalEndpointCount = totalEndpointCountDecoded
        let treatmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .treatmentId)
        treatmentId = treatmentIdDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about an activity that was performed by a campaign.
    public struct ActivityResponse: Swift.Equatable {
        /// The unique identifier for the application that the campaign applies to.
        /// This member is required.
        public var applicationId: Swift.String?
        /// The unique identifier for the campaign that the activity applies to.
        /// This member is required.
        public var campaignId: Swift.String?
        /// The actual time, in ISO 8601 format, when the activity was marked CANCELLED or COMPLETED.
        public var end: Swift.String?
        /// The unique identifier for the activity.
        /// This member is required.
        public var id: Swift.String?
        /// Specifies whether the activity succeeded. Possible values are SUCCESS and FAIL.
        public var result: Swift.String?
        /// The scheduled start time, in ISO 8601 format, for the activity.
        public var scheduledStart: Swift.String?
        /// The actual start time, in ISO 8601 format, of the activity.
        public var start: Swift.String?
        /// The current status of the activity. Possible values are: PENDING, INITIALIZING, RUNNING, PAUSED, CANCELLED, and COMPLETED.
        public var state: Swift.String?
        /// The total number of endpoints that the campaign successfully delivered messages to.
        public var successfulEndpointCount: Swift.Int?
        /// The total number of time zones that were completed.
        public var timezonesCompletedCount: Swift.Int?
        /// The total number of unique time zones that are in the segment for the campaign.
        public var timezonesTotalCount: Swift.Int?
        /// The total number of endpoints that the campaign attempted to deliver messages to.
        public var totalEndpointCount: Swift.Int?
        /// The unique identifier for the campaign treatment that the activity applies to. A treatment is a variation of a campaign that's used for A/B testing of a campaign.
        public var treatmentId: Swift.String?

        public init (
            applicationId: Swift.String? = nil,
            campaignId: Swift.String? = nil,
            end: Swift.String? = nil,
            id: Swift.String? = nil,
            result: Swift.String? = nil,
            scheduledStart: Swift.String? = nil,
            start: Swift.String? = nil,
            state: Swift.String? = nil,
            successfulEndpointCount: Swift.Int? = nil,
            timezonesCompletedCount: Swift.Int? = nil,
            timezonesTotalCount: Swift.Int? = nil,
            totalEndpointCount: Swift.Int? = nil,
            treatmentId: Swift.String? = nil
        )
        {
            self.applicationId = applicationId
            self.campaignId = campaignId
            self.end = end
            self.id = id
            self.result = result
            self.scheduledStart = scheduledStart
            self.start = start
            self.state = state
            self.successfulEndpointCount = successfulEndpointCount
            self.timezonesCompletedCount = timezonesCompletedCount
            self.timezonesTotalCount = timezonesTotalCount
            self.totalEndpointCount = totalEndpointCount
            self.treatmentId = treatmentId
        }
    }

}

extension PinpointClientTypes.AddressConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bodyOverride = "BodyOverride"
        case channelType = "ChannelType"
        case context = "Context"
        case rawContent = "RawContent"
        case substitutions = "Substitutions"
        case titleOverride = "TitleOverride"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bodyOverride = self.bodyOverride {
            try encodeContainer.encode(bodyOverride, forKey: .bodyOverride)
        }
        if let channelType = self.channelType {
            try encodeContainer.encode(channelType.rawValue, forKey: .channelType)
        }
        if let context = context {
            var contextContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .context)
            for (dictKey0, mapOf__string0) in context {
                try contextContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let rawContent = self.rawContent {
            try encodeContainer.encode(rawContent, forKey: .rawContent)
        }
        if let substitutions = substitutions {
            var substitutionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .substitutions)
            for (dictKey0, mapOfListOf__string0) in substitutions {
                var mapOfListOf__string0Container = substitutionsContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for __string1 in mapOfListOf__string0 {
                    try mapOfListOf__string0Container.encode(__string1)
                }
            }
        }
        if let titleOverride = self.titleOverride {
            try encodeContainer.encode(titleOverride, forKey: .titleOverride)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bodyOverrideDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bodyOverride)
        bodyOverride = bodyOverrideDecoded
        let channelTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ChannelType.self, forKey: .channelType)
        channelType = channelTypeDecoded
        let contextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .context)
        var contextDecoded0: [Swift.String:Swift.String]? = nil
        if let contextContainer = contextContainer {
            contextDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in contextContainer {
                if let __string0 = __string0 {
                    contextDecoded0?[key0] = __string0
                }
            }
        }
        context = contextDecoded0
        let rawContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rawContent)
        rawContent = rawContentDecoded
        let substitutionsContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .substitutions)
        var substitutionsDecoded0: [Swift.String:[Swift.String]]? = nil
        if let substitutionsContainer = substitutionsContainer {
            substitutionsDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listof__string0) in substitutionsContainer {
                var listof__string0Decoded0: [Swift.String]? = nil
                if let listof__string0 = listof__string0 {
                    listof__string0Decoded0 = [Swift.String]()
                    for string1 in listof__string0 {
                        if let string1 = string1 {
                            listof__string0Decoded0?.append(string1)
                        }
                    }
                }
                substitutionsDecoded0?[key0] = listof__string0Decoded0
            }
        }
        substitutions = substitutionsDecoded0
        let titleOverrideDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .titleOverride)
        titleOverride = titleOverrideDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies address-based configuration settings for a message that's sent directly to an endpoint.
    public struct AddressConfiguration: Swift.Equatable {
        /// The message body to use instead of the default message body. This value overrides the default message body.
        public var bodyOverride: Swift.String?
        /// The channel to use when sending the message.
        public var channelType: PinpointClientTypes.ChannelType?
        /// An object that maps custom attributes to attributes for the address and is attached to the message. Attribute names are case sensitive. For a push notification, this payload is added to the data.pinpoint object. For an email or text message, this payload is added to email/SMS delivery receipt event attributes.
        public var context: [Swift.String:Swift.String]?
        /// The raw, JSON-formatted string to use as the payload for the message. If specified, this value overrides all other values for the message.
        public var rawContent: Swift.String?
        /// A map of the message variables to merge with the variables specified by properties of the DefaultMessage object. The variables specified in this map take precedence over all other variables.
        public var substitutions: [Swift.String:[Swift.String]]?
        /// The message title to use instead of the default message title. This value overrides the default message title.
        public var titleOverride: Swift.String?

        public init (
            bodyOverride: Swift.String? = nil,
            channelType: PinpointClientTypes.ChannelType? = nil,
            context: [Swift.String:Swift.String]? = nil,
            rawContent: Swift.String? = nil,
            substitutions: [Swift.String:[Swift.String]]? = nil,
            titleOverride: Swift.String? = nil
        )
        {
            self.bodyOverride = bodyOverride
            self.channelType = channelType
            self.context = context
            self.rawContent = rawContent
            self.substitutions = substitutions
            self.titleOverride = titleOverride
        }
    }

}

extension PinpointClientTypes {
    public enum Alignment: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case center
        case `left`
        case `right`
        case sdkUnknown(Swift.String)

        public static var allCases: [Alignment] {
            return [
                .center,
                .left,
                .right,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .center: return "CENTER"
            case .left: return "LEFT"
            case .right: return "RIGHT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Alignment(rawValue: rawValue) ?? Alignment.sdkUnknown(rawValue)
        }
    }
}

extension PinpointClientTypes.AndroidPushNotificationTemplate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case body = "Body"
        case imageIconUrl = "ImageIconUrl"
        case imageUrl = "ImageUrl"
        case rawContent = "RawContent"
        case smallImageIconUrl = "SmallImageIconUrl"
        case sound = "Sound"
        case title = "Title"
        case url = "Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let imageIconUrl = self.imageIconUrl {
            try encodeContainer.encode(imageIconUrl, forKey: .imageIconUrl)
        }
        if let imageUrl = self.imageUrl {
            try encodeContainer.encode(imageUrl, forKey: .imageUrl)
        }
        if let rawContent = self.rawContent {
            try encodeContainer.encode(rawContent, forKey: .rawContent)
        }
        if let smallImageIconUrl = self.smallImageIconUrl {
            try encodeContainer.encode(smallImageIconUrl, forKey: .smallImageIconUrl)
        }
        if let sound = self.sound {
            try encodeContainer.encode(sound, forKey: .sound)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Action.self, forKey: .action)
        action = actionDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let imageIconUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageIconUrl)
        imageIconUrl = imageIconUrlDecoded
        let imageUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageUrl)
        imageUrl = imageUrlDecoded
        let rawContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rawContent)
        rawContent = rawContentDecoded
        let smallImageIconUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .smallImageIconUrl)
        smallImageIconUrl = smallImageIconUrlDecoded
        let soundDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sound)
        sound = soundDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies channel-specific content and settings for a message template that can be used in push notifications that are sent through the ADM (Amazon Device Messaging), Baidu (Baidu Cloud Push), or GCM (Firebase Cloud Messaging, formerly Google Cloud Messaging) channel.
    public struct AndroidPushNotificationTemplate: Swift.Equatable {
        /// The action to occur if a recipient taps a push notification that's based on the message template. Valid values are:
        ///
        /// * OPEN_APP - Your app opens or it becomes the foreground app if it was sent to the background. This is the default action.
        ///
        /// * DEEP_LINK - Your app opens and displays a designated user interface in the app. This action uses the deep-linking features of the Android platform.
        ///
        /// * URL - The default mobile browser on the recipient's device opens and loads the web page at a URL that you specify.
        public var action: PinpointClientTypes.Action?
        /// The message body to use in a push notification that's based on the message template.
        public var body: Swift.String?
        /// The URL of the large icon image to display in the content view of a push notification that's based on the message template.
        public var imageIconUrl: Swift.String?
        /// The URL of an image to display in a push notification that's based on the message template.
        public var imageUrl: Swift.String?
        /// The raw, JSON-formatted string to use as the payload for a push notification that's based on the message template. If specified, this value overrides all other content for the message template.
        public var rawContent: Swift.String?
        /// The URL of the small icon image to display in the status bar and the content view of a push notification that's based on the message template.
        public var smallImageIconUrl: Swift.String?
        /// The sound to play when a recipient receives a push notification that's based on the message template. You can use the default stream or specify the file name of a sound resource that's bundled in your app. On an Android platform, the sound file must reside in /res/raw/.
        public var sound: Swift.String?
        /// The title to use in a push notification that's based on the message template. This title appears above the notification message on a recipient's device.
        public var title: Swift.String?
        /// The URL to open in a recipient's default mobile browser, if a recipient taps a push notification that's based on the message template and the value of the Action property is URL.
        public var url: Swift.String?

        public init (
            action: PinpointClientTypes.Action? = nil,
            body: Swift.String? = nil,
            imageIconUrl: Swift.String? = nil,
            imageUrl: Swift.String? = nil,
            rawContent: Swift.String? = nil,
            smallImageIconUrl: Swift.String? = nil,
            sound: Swift.String? = nil,
            title: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.action = action
            self.body = body
            self.imageIconUrl = imageIconUrl
            self.imageUrl = imageUrl
            self.rawContent = rawContent
            self.smallImageIconUrl = smallImageIconUrl
            self.sound = sound
            self.title = title
            self.url = url
        }
    }

}

extension PinpointClientTypes.ApplicationDateRangeKpiResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case endTime = "EndTime"
        case kpiName = "KpiName"
        case kpiResult = "KpiResult"
        case nextToken = "NextToken"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .dateTime, forKey: .endTime)
        }
        if let kpiName = self.kpiName {
            try encodeContainer.encode(kpiName, forKey: .kpiName)
        }
        if let kpiResult = self.kpiResult {
            try encodeContainer.encode(kpiResult, forKey: .kpiResult)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .dateTime, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
        let kpiNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kpiName)
        kpiName = kpiNameDecoded
        let kpiResultDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.BaseKpiResult.self, forKey: .kpiResult)
        kpiResult = kpiResultDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
    }
}

extension PinpointClientTypes {
    /// Provides the results of a query that retrieved the data for a standard metric that applies to an application, and provides information about that query.
    public struct ApplicationDateRangeKpiResponse: Swift.Equatable {
        /// The unique identifier for the application that the metric applies to.
        /// This member is required.
        public var applicationId: Swift.String?
        /// The last date and time of the date range that was used to filter the query results, in extended ISO 8601 format. The date range is inclusive.
        /// This member is required.
        public var endTime: ClientRuntime.Date?
        /// The name of the metric, also referred to as a key performance indicator (KPI), that the data was retrieved for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. For a list of possible values, see the [Amazon Pinpoint Developer Guide](https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html).
        /// This member is required.
        public var kpiName: Swift.String?
        /// An array of objects that contains the results of the query. Each object contains the value for the metric and metadata about that value.
        /// This member is required.
        public var kpiResult: PinpointClientTypes.BaseKpiResult?
        /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null for the Application Metrics resource because the resource returns all results in a single page.
        public var nextToken: Swift.String?
        /// The first date and time of the date range that was used to filter the query results, in extended ISO 8601 format. The date range is inclusive.
        /// This member is required.
        public var startTime: ClientRuntime.Date?

        public init (
            applicationId: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            kpiName: Swift.String? = nil,
            kpiResult: PinpointClientTypes.BaseKpiResult? = nil,
            nextToken: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.applicationId = applicationId
            self.endTime = endTime
            self.kpiName = kpiName
            self.kpiResult = kpiResult
            self.nextToken = nextToken
            self.startTime = startTime
        }
    }

}

extension PinpointClientTypes.ApplicationResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case id = "Id"
        case name = "Name"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapOf__string0) in tags {
                try tagsContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about an application.
    public struct ApplicationResponse: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the application.
        /// This member is required.
        public var arn: Swift.String?
        /// The date and time when the Application was created.
        public var creationDate: Swift.String?
        /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
        /// This member is required.
        public var id: Swift.String?
        /// The display name of the application. This name is displayed as the Project name on the Amazon Pinpoint console.
        /// This member is required.
        public var name: Swift.String?
        /// A string-to-string map of key-value pairs that identifies the tags that are associated with the application. Each tag consists of a required tag key and an associated tag value.
        public var tags: [Swift.String:Swift.String]?

        public init (
            arn: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.arn = arn
            self.creationDate = creationDate
            self.id = id
            self.name = name
            self.tags = tags
        }
    }

}

extension PinpointClientTypes.ApplicationSettingsResource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case campaignHook = "CampaignHook"
        case lastModifiedDate = "LastModifiedDate"
        case limits = "Limits"
        case quietTime = "QuietTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let campaignHook = self.campaignHook {
            try encodeContainer.encode(campaignHook, forKey: .campaignHook)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let limits = self.limits {
            try encodeContainer.encode(limits, forKey: .limits)
        }
        if let quietTime = self.quietTime {
            try encodeContainer.encode(quietTime, forKey: .quietTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let campaignHookDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignHook.self, forKey: .campaignHook)
        campaignHook = campaignHookDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let limitsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignLimits.self, forKey: .limits)
        limits = limitsDecoded
        let quietTimeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.QuietTime.self, forKey: .quietTime)
        quietTime = quietTimeDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about an application, including the default settings for an application.
    public struct ApplicationSettingsResource: Swift.Equatable {
        /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
        /// This member is required.
        public var applicationId: Swift.String?
        /// The settings for the AWS Lambda function to invoke by default as a code hook for campaigns in the application. You can use this hook to customize segments that are used by campaigns in the application.
        public var campaignHook: PinpointClientTypes.CampaignHook?
        /// The date and time, in ISO 8601 format, when the application's settings were last modified.
        public var lastModifiedDate: Swift.String?
        /// The default sending limits for campaigns in the application.
        public var limits: PinpointClientTypes.CampaignLimits?
        /// The default quiet time for campaigns in the application. Quiet time is a specific time range when messages aren't sent to endpoints, if all the following conditions are met:
        ///
        /// * The EndpointDemographic.Timezone property of the endpoint is set to a valid value.
        ///
        /// * The current time in the endpoint's time zone is later than or equal to the time specified by the QuietTime.Start property for the application (or a campaign or journey that has custom quiet time settings).
        ///
        /// * The current time in the endpoint's time zone is earlier than or equal to the time specified by the QuietTime.End property for the application (or a campaign or journey that has custom quiet time settings).
        ///
        ///
        /// If any of the preceding conditions isn't met, the endpoint will receive messages from a campaign or journey, even if quiet time is enabled.
        public var quietTime: PinpointClientTypes.QuietTime?

        public init (
            applicationId: Swift.String? = nil,
            campaignHook: PinpointClientTypes.CampaignHook? = nil,
            lastModifiedDate: Swift.String? = nil,
            limits: PinpointClientTypes.CampaignLimits? = nil,
            quietTime: PinpointClientTypes.QuietTime? = nil
        )
        {
            self.applicationId = applicationId
            self.campaignHook = campaignHook
            self.lastModifiedDate = lastModifiedDate
            self.limits = limits
            self.quietTime = quietTime
        }
    }

}

extension PinpointClientTypes.ApplicationsResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case item = "Item"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let item = item {
            var itemContainer = encodeContainer.nestedUnkeyedContainer(forKey: .item)
            for applicationresponse0 in item {
                try itemContainer.encode(applicationresponse0)
            }
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([PinpointClientTypes.ApplicationResponse?].self, forKey: .item)
        var itemDecoded0:[PinpointClientTypes.ApplicationResponse]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [PinpointClientTypes.ApplicationResponse]()
            for structure0 in itemContainer {
                if let structure0 = structure0 {
                    itemDecoded0?.append(structure0)
                }
            }
        }
        item = itemDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about all of your applications.
    public struct ApplicationsResponse: Swift.Equatable {
        /// An array of responses, one for each application that was returned.
        public var item: [PinpointClientTypes.ApplicationResponse]?
        /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
        public var nextToken: Swift.String?

        public init (
            item: [PinpointClientTypes.ApplicationResponse]? = nil,
            nextToken: Swift.String? = nil
        )
        {
            self.item = item
            self.nextToken = nextToken
        }
    }

}

extension PinpointClientTypes.AttributeDimension: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeType = "AttributeType"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeType = self.attributeType {
            try encodeContainer.encode(attributeType.rawValue, forKey: .attributeType)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for __string0 in values {
                try valuesContainer.encode(__string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.AttributeType.self, forKey: .attributeType)
        attributeType = attributeTypeDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension PinpointClientTypes {
    /// Specifies attribute-based criteria for including or excluding endpoints from a segment.
    public struct AttributeDimension: Swift.Equatable {
        /// The type of segment dimension to use. Valid values are:
        ///
        /// * INCLUSIVE - endpoints that have attributes matching the values are included in the segment.
        ///
        /// * EXCLUSIVE - endpoints that have attributes matching the values are excluded in the segment.
        ///
        /// * CONTAINS - endpoints that have attributes' substrings match the values are included in the segment.
        ///
        /// * BEFORE - endpoints with attributes read as ISO_INSTANT datetimes before the value are included in the segment.
        ///
        /// * AFTER - endpoints with attributes read as ISO_INSTANT datetimes after the value are included in the segment.
        ///
        /// * ON - endpoints with attributes read as ISO_INSTANT dates on the value are included in the segment. Time is ignored in this comparison.
        ///
        /// * BETWEEN - endpoints with attributes read as ISO_INSTANT datetimes between the values are included in the segment.
        public var attributeType: PinpointClientTypes.AttributeType?
        /// The criteria values to use for the segment dimension. Depending on the value of the AttributeType property, endpoints are included or excluded from the segment if their attribute values match the criteria values.
        /// This member is required.
        public var values: [Swift.String]?

        public init (
            attributeType: PinpointClientTypes.AttributeType? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.attributeType = attributeType
            self.values = values
        }
    }

}

extension PinpointClientTypes {
    public enum AttributeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case after
        case before
        case between
        case contains
        case exclusive
        case inclusive
        case on
        case sdkUnknown(Swift.String)

        public static var allCases: [AttributeType] {
            return [
                .after,
                .before,
                .between,
                .contains,
                .exclusive,
                .inclusive,
                .on,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .after: return "AFTER"
            case .before: return "BEFORE"
            case .between: return "BETWEEN"
            case .contains: return "CONTAINS"
            case .exclusive: return "EXCLUSIVE"
            case .inclusive: return "INCLUSIVE"
            case .on: return "ON"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AttributeType(rawValue: rawValue) ?? AttributeType.sdkUnknown(rawValue)
        }
    }
}

extension PinpointClientTypes.AttributesResource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case attributeType = "AttributeType"
        case attributes = "Attributes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let attributeType = self.attributeType {
            try encodeContainer.encode(attributeType, forKey: .attributeType)
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributes)
            for __string0 in attributes {
                try attributesContainer.encode(__string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let attributeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeType)
        attributeType = attributeTypeDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .attributes)
        var attributesDecoded0:[Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String]()
            for string0 in attributesContainer {
                if let string0 = string0 {
                    attributesDecoded0?.append(string0)
                }
            }
        }
        attributes = attributesDecoded0
    }
}

extension PinpointClientTypes {
    /// Provides information about the type and the names of attributes that were removed from all the endpoints that are associated with an application.
    public struct AttributesResource: Swift.Equatable {
        /// The unique identifier for the application.
        /// This member is required.
        public var applicationId: Swift.String?
        /// The type of attribute or attributes that were removed from the endpoints. Valid values are:
        ///
        /// * endpoint-custom-attributes - Custom attributes that describe endpoints.
        ///
        /// * endpoint-metric-attributes - Custom metrics that your app reports to Amazon Pinpoint for endpoints.
        ///
        /// * endpoint-user-attributes - Custom attributes that describe users.
        /// This member is required.
        public var attributeType: Swift.String?
        /// An array that specifies the names of the attributes that were removed from the endpoints.
        public var attributes: [Swift.String]?

        public init (
            applicationId: Swift.String? = nil,
            attributeType: Swift.String? = nil,
            attributes: [Swift.String]? = nil
        )
        {
            self.applicationId = applicationId
            self.attributeType = attributeType
            self.attributes = attributes
        }
    }

}

extension BadRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BadRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestID = output.requestID
        } else {
            self.message = nil
            self.requestID = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Provides information about an API request or response.
public struct BadRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that's returned from the API.
    public var message: Swift.String?
    /// The unique identifier for the request or response.
    public var requestID: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestID: Swift.String? = nil
    )
    {
        self.message = message
        self.requestID = requestID
    }
}

struct BadRequestExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let requestID: Swift.String?
}

extension BadRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestID = "RequestID"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestID)
        requestID = requestIDDecoded
    }
}

extension PinpointClientTypes.BaiduChannelRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apiKey = "ApiKey"
        case enabled = "Enabled"
        case secretKey = "SecretKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let apiKey = self.apiKey {
            try encodeContainer.encode(apiKey, forKey: .apiKey)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let secretKey = self.secretKey {
            try encodeContainer.encode(secretKey, forKey: .secretKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apiKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .apiKey)
        apiKey = apiKeyDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let secretKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretKey)
        secretKey = secretKeyDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the status and settings of the Baidu (Baidu Cloud Push) channel for an application.
    public struct BaiduChannelRequest: Swift.Equatable {
        /// The API key that you received from the Baidu Cloud Push service to communicate with the service.
        /// This member is required.
        public var apiKey: Swift.String?
        /// Specifies whether to enable the Baidu channel for the application.
        public var enabled: Swift.Bool?
        /// The secret key that you received from the Baidu Cloud Push service to communicate with the service.
        /// This member is required.
        public var secretKey: Swift.String?

        public init (
            apiKey: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            secretKey: Swift.String? = nil
        )
        {
            self.apiKey = apiKey
            self.enabled = enabled
            self.secretKey = secretKey
        }
    }

}

extension PinpointClientTypes.BaiduChannelResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case creationDate = "CreationDate"
        case credential = "Credential"
        case enabled = "Enabled"
        case hasCredential = "HasCredential"
        case id = "Id"
        case isArchived = "IsArchived"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedDate = "LastModifiedDate"
        case platform = "Platform"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let credential = self.credential {
            try encodeContainer.encode(credential, forKey: .credential)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let hasCredential = self.hasCredential {
            try encodeContainer.encode(hasCredential, forKey: .hasCredential)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isArchived = self.isArchived {
            try encodeContainer.encode(isArchived, forKey: .isArchived)
        }
        if let lastModifiedBy = self.lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let platform = self.platform {
            try encodeContainer.encode(platform, forKey: .platform)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let credentialDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .credential)
        credential = credentialDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let hasCredentialDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasCredential)
        hasCredential = hasCredentialDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let isArchivedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isArchived)
        isArchived = isArchivedDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let platformDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platform)
        platform = platformDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the status and settings of the Baidu (Baidu Cloud Push) channel for an application.
    public struct BaiduChannelResponse: Swift.Equatable {
        /// The unique identifier for the application that the Baidu channel applies to.
        public var applicationId: Swift.String?
        /// The date and time when the Baidu channel was enabled.
        public var creationDate: Swift.String?
        /// The API key that you received from the Baidu Cloud Push service to communicate with the service.
        /// This member is required.
        public var credential: Swift.String?
        /// Specifies whether the Baidu channel is enabled for the application.
        public var enabled: Swift.Bool?
        /// (Not used) This property is retained only for backward compatibility.
        public var hasCredential: Swift.Bool?
        /// (Deprecated) An identifier for the Baidu channel. This property is retained only for backward compatibility.
        public var id: Swift.String?
        /// Specifies whether the Baidu channel is archived.
        public var isArchived: Swift.Bool?
        /// The user who last modified the Baidu channel.
        public var lastModifiedBy: Swift.String?
        /// The date and time when the Baidu channel was last modified.
        public var lastModifiedDate: Swift.String?
        /// The type of messaging or notification platform for the channel. For the Baidu channel, this value is BAIDU.
        /// This member is required.
        public var platform: Swift.String?
        /// The current version of the Baidu channel.
        public var version: Swift.Int?

        public init (
            applicationId: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            credential: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            hasCredential: Swift.Bool? = nil,
            id: Swift.String? = nil,
            isArchived: Swift.Bool? = nil,
            lastModifiedBy: Swift.String? = nil,
            lastModifiedDate: Swift.String? = nil,
            platform: Swift.String? = nil,
            version: Swift.Int? = nil
        )
        {
            self.applicationId = applicationId
            self.creationDate = creationDate
            self.credential = credential
            self.enabled = enabled
            self.hasCredential = hasCredential
            self.id = id
            self.isArchived = isArchived
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedDate = lastModifiedDate
            self.platform = platform
            self.version = version
        }
    }

}

extension PinpointClientTypes.BaiduMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case body = "Body"
        case data = "Data"
        case iconReference = "IconReference"
        case imageIconUrl = "ImageIconUrl"
        case imageUrl = "ImageUrl"
        case rawContent = "RawContent"
        case silentPush = "SilentPush"
        case smallImageIconUrl = "SmallImageIconUrl"
        case sound = "Sound"
        case substitutions = "Substitutions"
        case timeToLive = "TimeToLive"
        case title = "Title"
        case url = "Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let data = data {
            var dataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .data)
            for (dictKey0, mapOf__string0) in data {
                try dataContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let iconReference = self.iconReference {
            try encodeContainer.encode(iconReference, forKey: .iconReference)
        }
        if let imageIconUrl = self.imageIconUrl {
            try encodeContainer.encode(imageIconUrl, forKey: .imageIconUrl)
        }
        if let imageUrl = self.imageUrl {
            try encodeContainer.encode(imageUrl, forKey: .imageUrl)
        }
        if let rawContent = self.rawContent {
            try encodeContainer.encode(rawContent, forKey: .rawContent)
        }
        if let silentPush = self.silentPush {
            try encodeContainer.encode(silentPush, forKey: .silentPush)
        }
        if let smallImageIconUrl = self.smallImageIconUrl {
            try encodeContainer.encode(smallImageIconUrl, forKey: .smallImageIconUrl)
        }
        if let sound = self.sound {
            try encodeContainer.encode(sound, forKey: .sound)
        }
        if let substitutions = substitutions {
            var substitutionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .substitutions)
            for (dictKey0, mapOfListOf__string0) in substitutions {
                var mapOfListOf__string0Container = substitutionsContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for __string1 in mapOfListOf__string0 {
                    try mapOfListOf__string0Container.encode(__string1)
                }
            }
        }
        if let timeToLive = self.timeToLive {
            try encodeContainer.encode(timeToLive, forKey: .timeToLive)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Action.self, forKey: .action)
        action = actionDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let dataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .data)
        var dataDecoded0: [Swift.String:Swift.String]? = nil
        if let dataContainer = dataContainer {
            dataDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in dataContainer {
                if let __string0 = __string0 {
                    dataDecoded0?[key0] = __string0
                }
            }
        }
        data = dataDecoded0
        let iconReferenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iconReference)
        iconReference = iconReferenceDecoded
        let imageIconUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageIconUrl)
        imageIconUrl = imageIconUrlDecoded
        let imageUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageUrl)
        imageUrl = imageUrlDecoded
        let rawContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rawContent)
        rawContent = rawContentDecoded
        let silentPushDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .silentPush)
        silentPush = silentPushDecoded
        let smallImageIconUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .smallImageIconUrl)
        smallImageIconUrl = smallImageIconUrlDecoded
        let soundDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sound)
        sound = soundDecoded
        let substitutionsContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .substitutions)
        var substitutionsDecoded0: [Swift.String:[Swift.String]]? = nil
        if let substitutionsContainer = substitutionsContainer {
            substitutionsDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listof__string0) in substitutionsContainer {
                var listof__string0Decoded0: [Swift.String]? = nil
                if let listof__string0 = listof__string0 {
                    listof__string0Decoded0 = [Swift.String]()
                    for string1 in listof__string0 {
                        if let string1 = string1 {
                            listof__string0Decoded0?.append(string1)
                        }
                    }
                }
                substitutionsDecoded0?[key0] = listof__string0Decoded0
            }
        }
        substitutions = substitutionsDecoded0
        let timeToLiveDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeToLive)
        timeToLive = timeToLiveDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the settings for a one-time message that's sent directly to an endpoint through the Baidu (Baidu Cloud Push) channel.
    public struct BaiduMessage: Swift.Equatable {
        /// The action to occur if the recipient taps the push notification. Valid values are:
        ///
        /// * OPEN_APP - Your app opens or it becomes the foreground app if it was sent to the background. This is the default action.
        ///
        /// * DEEP_LINK - Your app opens and displays a designated user interface in the app. This action uses the deep-linking features of the Android platform.
        ///
        /// * URL - The default mobile browser on the recipient's device opens and loads the web page at a URL that you specify.
        public var action: PinpointClientTypes.Action?
        /// The body of the notification message.
        public var body: Swift.String?
        /// The JSON data payload to use for the push notification, if the notification is a silent push notification. This payload is added to the data.pinpoint.jsonBody object of the notification.
        public var data: [Swift.String:Swift.String]?
        /// The icon image name of the asset saved in your app.
        public var iconReference: Swift.String?
        /// The URL of the large icon image to display in the content view of the push notification.
        public var imageIconUrl: Swift.String?
        /// The URL of an image to display in the push notification.
        public var imageUrl: Swift.String?
        /// The raw, JSON-formatted string to use as the payload for the notification message. If specified, this value overrides all other content for the message.
        public var rawContent: Swift.String?
        /// Specifies whether the notification is a silent push notification, which is a push notification that doesn't display on a recipient's device. Silent push notifications can be used for cases such as updating an app's configuration or supporting phone home functionality.
        public var silentPush: Swift.Bool?
        /// The URL of the small icon image to display in the status bar and the content view of the push notification.
        public var smallImageIconUrl: Swift.String?
        /// The sound to play when the recipient receives the push notification. You can use the default stream or specify the file name of a sound resource that's bundled in your app. On an Android platform, the sound file must reside in /res/raw/.
        public var sound: Swift.String?
        /// The default message variables to use in the notification message. You can override the default variables with individual address variables.
        public var substitutions: [Swift.String:[Swift.String]]?
        /// The amount of time, in seconds, that the Baidu Cloud Push service should store the message if the recipient's device is offline. The default value and maximum supported time is 604,800 seconds (7 days).
        public var timeToLive: Swift.Int?
        /// The title to display above the notification message on the recipient's device.
        public var title: Swift.String?
        /// The URL to open in the recipient's default mobile browser, if a recipient taps the push notification and the value of the Action property is URL.
        public var url: Swift.String?

        public init (
            action: PinpointClientTypes.Action? = nil,
            body: Swift.String? = nil,
            data: [Swift.String:Swift.String]? = nil,
            iconReference: Swift.String? = nil,
            imageIconUrl: Swift.String? = nil,
            imageUrl: Swift.String? = nil,
            rawContent: Swift.String? = nil,
            silentPush: Swift.Bool? = nil,
            smallImageIconUrl: Swift.String? = nil,
            sound: Swift.String? = nil,
            substitutions: [Swift.String:[Swift.String]]? = nil,
            timeToLive: Swift.Int? = nil,
            title: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.action = action
            self.body = body
            self.data = data
            self.iconReference = iconReference
            self.imageIconUrl = imageIconUrl
            self.imageUrl = imageUrl
            self.rawContent = rawContent
            self.silentPush = silentPush
            self.smallImageIconUrl = smallImageIconUrl
            self.sound = sound
            self.substitutions = substitutions
            self.timeToLive = timeToLive
            self.title = title
            self.url = url
        }
    }

}

extension PinpointClientTypes.BaseKpiResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rows = "Rows"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let rows = rows {
            var rowsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rows)
            for resultrow0 in rows {
                try rowsContainer.encode(resultrow0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rowsContainer = try containerValues.decodeIfPresent([PinpointClientTypes.ResultRow?].self, forKey: .rows)
        var rowsDecoded0:[PinpointClientTypes.ResultRow]? = nil
        if let rowsContainer = rowsContainer {
            rowsDecoded0 = [PinpointClientTypes.ResultRow]()
            for structure0 in rowsContainer {
                if let structure0 = structure0 {
                    rowsDecoded0?.append(structure0)
                }
            }
        }
        rows = rowsDecoded0
    }
}

extension PinpointClientTypes {
    /// Provides the results of a query that retrieved the data for a standard metric that applies to an application, campaign, or journey.
    public struct BaseKpiResult: Swift.Equatable {
        /// An array of objects that provides the results of a query that retrieved the data for a standard metric that applies to an application, campaign, or journey.
        /// This member is required.
        public var rows: [PinpointClientTypes.ResultRow]?

        public init (
            rows: [PinpointClientTypes.ResultRow]? = nil
        )
        {
            self.rows = rows
        }
    }

}

extension PinpointClientTypes {
    public enum ButtonAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case close
        case deepLink
        case link
        case sdkUnknown(Swift.String)

        public static var allCases: [ButtonAction] {
            return [
                .close,
                .deepLink,
                .link,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .close: return "CLOSE"
            case .deepLink: return "DEEP_LINK"
            case .link: return "LINK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ButtonAction(rawValue: rawValue) ?? ButtonAction.sdkUnknown(rawValue)
        }
    }
}

extension PinpointClientTypes.CampaignCustomMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case data = "Data"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let data = self.data {
            try encodeContainer.encode(data, forKey: .data)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .data)
        data = dataDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the contents of a message that's sent through a custom channel to recipients of a campaign.
    public struct CampaignCustomMessage: Swift.Equatable {
        /// The raw, JSON-formatted string to use as the payload for the message. The maximum size is 5 KB.
        public var data: Swift.String?

        public init (
            data: Swift.String? = nil
        )
        {
            self.data = data
        }
    }

}

extension PinpointClientTypes.CampaignDateRangeKpiResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case campaignId = "CampaignId"
        case endTime = "EndTime"
        case kpiName = "KpiName"
        case kpiResult = "KpiResult"
        case nextToken = "NextToken"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let campaignId = self.campaignId {
            try encodeContainer.encode(campaignId, forKey: .campaignId)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .dateTime, forKey: .endTime)
        }
        if let kpiName = self.kpiName {
            try encodeContainer.encode(kpiName, forKey: .kpiName)
        }
        if let kpiResult = self.kpiResult {
            try encodeContainer.encode(kpiResult, forKey: .kpiResult)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .dateTime, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let campaignIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .campaignId)
        campaignId = campaignIdDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
        let kpiNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kpiName)
        kpiName = kpiNameDecoded
        let kpiResultDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.BaseKpiResult.self, forKey: .kpiResult)
        kpiResult = kpiResultDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
    }
}

extension PinpointClientTypes {
    /// Provides the results of a query that retrieved the data for a standard metric that applies to a campaign, and provides information about that query.
    public struct CampaignDateRangeKpiResponse: Swift.Equatable {
        /// The unique identifier for the application that the metric applies to.
        /// This member is required.
        public var applicationId: Swift.String?
        /// The unique identifier for the campaign that the metric applies to.
        /// This member is required.
        public var campaignId: Swift.String?
        /// The last date and time of the date range that was used to filter the query results, in extended ISO 8601 format. The date range is inclusive.
        /// This member is required.
        public var endTime: ClientRuntime.Date?
        /// The name of the metric, also referred to as a key performance indicator (KPI), that the data was retrieved for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. For a list of possible values, see the [Amazon Pinpoint Developer Guide](https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html).
        /// This member is required.
        public var kpiName: Swift.String?
        /// An array of objects that contains the results of the query. Each object contains the value for the metric and metadata about that value.
        /// This member is required.
        public var kpiResult: PinpointClientTypes.BaseKpiResult?
        /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null for the Campaign Metrics resource because the resource returns all results in a single page.
        public var nextToken: Swift.String?
        /// The first date and time of the date range that was used to filter the query results, in extended ISO 8601 format. The date range is inclusive.
        /// This member is required.
        public var startTime: ClientRuntime.Date?

        public init (
            applicationId: Swift.String? = nil,
            campaignId: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            kpiName: Swift.String? = nil,
            kpiResult: PinpointClientTypes.BaseKpiResult? = nil,
            nextToken: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.applicationId = applicationId
            self.campaignId = campaignId
            self.endTime = endTime
            self.kpiName = kpiName
            self.kpiResult = kpiResult
            self.nextToken = nextToken
            self.startTime = startTime
        }
    }

}

extension PinpointClientTypes.CampaignEmailMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
        case fromAddress = "FromAddress"
        case htmlBody = "HtmlBody"
        case title = "Title"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let fromAddress = self.fromAddress {
            try encodeContainer.encode(fromAddress, forKey: .fromAddress)
        }
        if let htmlBody = self.htmlBody {
            try encodeContainer.encode(htmlBody, forKey: .htmlBody)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let fromAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromAddress)
        fromAddress = fromAddressDecoded
        let htmlBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .htmlBody)
        htmlBody = htmlBodyDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the content and "From" address for an email message that's sent to recipients of a campaign.
    public struct CampaignEmailMessage: Swift.Equatable {
        /// The body of the email for recipients whose email clients don't render HTML content.
        public var body: Swift.String?
        /// The verified email address to send the email from. The default address is the FromAddress specified for the email channel for the application.
        public var fromAddress: Swift.String?
        /// The body of the email, in HTML format, for recipients whose email clients render HTML content.
        public var htmlBody: Swift.String?
        /// The subject line, or title, of the email.
        public var title: Swift.String?

        public init (
            body: Swift.String? = nil,
            fromAddress: Swift.String? = nil,
            htmlBody: Swift.String? = nil,
            title: Swift.String? = nil
        )
        {
            self.body = body
            self.fromAddress = fromAddress
            self.htmlBody = htmlBody
            self.title = title
        }
    }

}

extension PinpointClientTypes.CampaignEventFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case filterType = "FilterType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensions = self.dimensions {
            try encodeContainer.encode(dimensions, forKey: .dimensions)
        }
        if let filterType = self.filterType {
            try encodeContainer.encode(filterType.rawValue, forKey: .filterType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EventDimensions.self, forKey: .dimensions)
        dimensions = dimensionsDecoded
        let filterTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.FilterType.self, forKey: .filterType)
        filterType = filterTypeDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the settings for events that cause a campaign to be sent.
    public struct CampaignEventFilter: Swift.Equatable {
        /// The dimension settings of the event filter for the campaign.
        /// This member is required.
        public var dimensions: PinpointClientTypes.EventDimensions?
        /// The type of event that causes the campaign to be sent. Valid values are: SYSTEM, sends the campaign when a system event occurs; and, ENDPOINT, sends the campaign when an endpoint event (Events resource) occurs.
        /// This member is required.
        public var filterType: PinpointClientTypes.FilterType?

        public init (
            dimensions: PinpointClientTypes.EventDimensions? = nil,
            filterType: PinpointClientTypes.FilterType? = nil
        )
        {
            self.dimensions = dimensions
            self.filterType = filterType
        }
    }

}

extension PinpointClientTypes.CampaignHook: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lambdaFunctionName = "LambdaFunctionName"
        case mode = "Mode"
        case webUrl = "WebUrl"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lambdaFunctionName = self.lambdaFunctionName {
            try encodeContainer.encode(lambdaFunctionName, forKey: .lambdaFunctionName)
        }
        if let mode = self.mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
        if let webUrl = self.webUrl {
            try encodeContainer.encode(webUrl, forKey: .webUrl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lambdaFunctionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lambdaFunctionName)
        lambdaFunctionName = lambdaFunctionNameDecoded
        let modeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Mode.self, forKey: .mode)
        mode = modeDecoded
        let webUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webUrl)
        webUrl = webUrlDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies settings for invoking an AWS Lambda function that customizes a segment for a campaign.
    public struct CampaignHook: Swift.Equatable {
        /// The name or Amazon Resource Name (ARN) of the AWS Lambda function that Amazon Pinpoint invokes to customize a segment for a campaign.
        public var lambdaFunctionName: Swift.String?
        /// The mode that Amazon Pinpoint uses to invoke the AWS Lambda function. Possible values are:
        ///
        /// * FILTER - Invoke the function to customize the segment that's used by a campaign.
        ///
        /// * DELIVERY - (Deprecated) Previously, invoked the function to send a campaign through a custom channel. This functionality is not supported anymore. To send a campaign through a custom channel, use the CustomDeliveryConfiguration and CampaignCustomMessage objects of the campaign.
        public var mode: PinpointClientTypes.Mode?
        /// The web URL that Amazon Pinpoint calls to invoke the AWS Lambda function over HTTPS.
        public var webUrl: Swift.String?

        public init (
            lambdaFunctionName: Swift.String? = nil,
            mode: PinpointClientTypes.Mode? = nil,
            webUrl: Swift.String? = nil
        )
        {
            self.lambdaFunctionName = lambdaFunctionName
            self.mode = mode
            self.webUrl = webUrl
        }
    }

}

extension PinpointClientTypes.CampaignInAppMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
        case content = "Content"
        case customConfig = "CustomConfig"
        case layout = "Layout"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let content = content {
            var contentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .content)
            for inappmessagecontent0 in content {
                try contentContainer.encode(inappmessagecontent0)
            }
        }
        if let customConfig = customConfig {
            var customConfigContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customConfig)
            for (dictKey0, mapOf__string0) in customConfig {
                try customConfigContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let layout = self.layout {
            try encodeContainer.encode(layout.rawValue, forKey: .layout)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let contentContainer = try containerValues.decodeIfPresent([PinpointClientTypes.InAppMessageContent?].self, forKey: .content)
        var contentDecoded0:[PinpointClientTypes.InAppMessageContent]? = nil
        if let contentContainer = contentContainer {
            contentDecoded0 = [PinpointClientTypes.InAppMessageContent]()
            for structure0 in contentContainer {
                if let structure0 = structure0 {
                    contentDecoded0?.append(structure0)
                }
            }
        }
        content = contentDecoded0
        let customConfigContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .customConfig)
        var customConfigDecoded0: [Swift.String:Swift.String]? = nil
        if let customConfigContainer = customConfigContainer {
            customConfigDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in customConfigContainer {
                if let __string0 = __string0 {
                    customConfigDecoded0?[key0] = __string0
                }
            }
        }
        customConfig = customConfigDecoded0
        let layoutDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Layout.self, forKey: .layout)
        layout = layoutDecoded
    }
}

extension PinpointClientTypes {
    /// In-app message configuration.
    public struct CampaignInAppMessage: Swift.Equatable {
        /// The message body of the notification, the email body or the text message.
        public var body: Swift.String?
        /// In-app message content.
        public var content: [PinpointClientTypes.InAppMessageContent]?
        /// Custom config to be sent to client.
        public var customConfig: [Swift.String:Swift.String]?
        /// In-app message layout.
        public var layout: PinpointClientTypes.Layout?

        public init (
            body: Swift.String? = nil,
            content: [PinpointClientTypes.InAppMessageContent]? = nil,
            customConfig: [Swift.String:Swift.String]? = nil,
            layout: PinpointClientTypes.Layout? = nil
        )
        {
            self.body = body
            self.content = content
            self.customConfig = customConfig
            self.layout = layout
        }
    }

}

extension PinpointClientTypes.CampaignLimits: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case daily = "Daily"
        case maximumDuration = "MaximumDuration"
        case messagesPerSecond = "MessagesPerSecond"
        case session = "Session"
        case total = "Total"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let daily = self.daily {
            try encodeContainer.encode(daily, forKey: .daily)
        }
        if let maximumDuration = self.maximumDuration {
            try encodeContainer.encode(maximumDuration, forKey: .maximumDuration)
        }
        if let messagesPerSecond = self.messagesPerSecond {
            try encodeContainer.encode(messagesPerSecond, forKey: .messagesPerSecond)
        }
        if let session = self.session {
            try encodeContainer.encode(session, forKey: .session)
        }
        if let total = self.total {
            try encodeContainer.encode(total, forKey: .total)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dailyDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .daily)
        daily = dailyDecoded
        let maximumDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumDuration)
        maximumDuration = maximumDurationDecoded
        let messagesPerSecondDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .messagesPerSecond)
        messagesPerSecond = messagesPerSecondDecoded
        let totalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .total)
        total = totalDecoded
        let sessionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .session)
        session = sessionDecoded
    }
}

extension PinpointClientTypes {
    /// For a campaign, specifies limits on the messages that the campaign can send. For an application, specifies the default limits for messages that campaigns in the application can send.
    public struct CampaignLimits: Swift.Equatable {
        /// The maximum number of messages that a campaign can send to a single endpoint during a 24-hour period. For an application, this value specifies the default limit for the number of messages that campaigns and journeys can send to a single endpoint during a 24-hour period. The maximum value is 100.
        public var daily: Swift.Int?
        /// The maximum amount of time, in seconds, that a campaign can attempt to deliver a message after the scheduled start time for the campaign. The minimum value is 60 seconds.
        public var maximumDuration: Swift.Int?
        /// The maximum number of messages that a campaign can send each second. For an application, this value specifies the default limit for the number of messages that campaigns can send each second. The minimum value is 50. The maximum value is 20,000.
        public var messagesPerSecond: Swift.Int?
        /// The maximum total number of messages that the campaign can send per user session.
        public var session: Swift.Int?
        /// The maximum number of messages that a campaign can send to a single endpoint during the course of the campaign. If a campaign recurs, this setting applies to all runs of the campaign. The maximum value is 100.
        public var total: Swift.Int?

        public init (
            daily: Swift.Int? = nil,
            maximumDuration: Swift.Int? = nil,
            messagesPerSecond: Swift.Int? = nil,
            session: Swift.Int? = nil,
            total: Swift.Int? = nil
        )
        {
            self.daily = daily
            self.maximumDuration = maximumDuration
            self.messagesPerSecond = messagesPerSecond
            self.session = session
            self.total = total
        }
    }

}

extension PinpointClientTypes.CampaignResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalTreatments = "AdditionalTreatments"
        case applicationId = "ApplicationId"
        case arn = "Arn"
        case creationDate = "CreationDate"
        case customDeliveryConfiguration = "CustomDeliveryConfiguration"
        case defaultState = "DefaultState"
        case description = "Description"
        case holdoutPercent = "HoldoutPercent"
        case hook = "Hook"
        case id = "Id"
        case isPaused = "IsPaused"
        case lastModifiedDate = "LastModifiedDate"
        case limits = "Limits"
        case messageConfiguration = "MessageConfiguration"
        case name = "Name"
        case priority = "Priority"
        case schedule = "Schedule"
        case segmentId = "SegmentId"
        case segmentVersion = "SegmentVersion"
        case state = "State"
        case templateConfiguration = "TemplateConfiguration"
        case treatmentDescription = "TreatmentDescription"
        case treatmentName = "TreatmentName"
        case version = "Version"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalTreatments = additionalTreatments {
            var additionalTreatmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalTreatments)
            for treatmentresource0 in additionalTreatments {
                try additionalTreatmentsContainer.encode(treatmentresource0)
            }
        }
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let customDeliveryConfiguration = self.customDeliveryConfiguration {
            try encodeContainer.encode(customDeliveryConfiguration, forKey: .customDeliveryConfiguration)
        }
        if let defaultState = self.defaultState {
            try encodeContainer.encode(defaultState, forKey: .defaultState)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let holdoutPercent = self.holdoutPercent {
            try encodeContainer.encode(holdoutPercent, forKey: .holdoutPercent)
        }
        if let hook = self.hook {
            try encodeContainer.encode(hook, forKey: .hook)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isPaused = self.isPaused {
            try encodeContainer.encode(isPaused, forKey: .isPaused)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let limits = self.limits {
            try encodeContainer.encode(limits, forKey: .limits)
        }
        if let messageConfiguration = self.messageConfiguration {
            try encodeContainer.encode(messageConfiguration, forKey: .messageConfiguration)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let priority = self.priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let schedule = self.schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let segmentId = self.segmentId {
            try encodeContainer.encode(segmentId, forKey: .segmentId)
        }
        if let segmentVersion = self.segmentVersion {
            try encodeContainer.encode(segmentVersion, forKey: .segmentVersion)
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let templateConfiguration = self.templateConfiguration {
            try encodeContainer.encode(templateConfiguration, forKey: .templateConfiguration)
        }
        if let treatmentDescription = self.treatmentDescription {
            try encodeContainer.encode(treatmentDescription, forKey: .treatmentDescription)
        }
        if let treatmentName = self.treatmentName {
            try encodeContainer.encode(treatmentName, forKey: .treatmentName)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapOf__string0) in tags {
                try tagsContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let additionalTreatmentsContainer = try containerValues.decodeIfPresent([PinpointClientTypes.TreatmentResource?].self, forKey: .additionalTreatments)
        var additionalTreatmentsDecoded0:[PinpointClientTypes.TreatmentResource]? = nil
        if let additionalTreatmentsContainer = additionalTreatmentsContainer {
            additionalTreatmentsDecoded0 = [PinpointClientTypes.TreatmentResource]()
            for structure0 in additionalTreatmentsContainer {
                if let structure0 = structure0 {
                    additionalTreatmentsDecoded0?.append(structure0)
                }
            }
        }
        additionalTreatments = additionalTreatmentsDecoded0
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let customDeliveryConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CustomDeliveryConfiguration.self, forKey: .customDeliveryConfiguration)
        customDeliveryConfiguration = customDeliveryConfigurationDecoded
        let defaultStateDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignState.self, forKey: .defaultState)
        defaultState = defaultStateDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let holdoutPercentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .holdoutPercent)
        holdoutPercent = holdoutPercentDecoded
        let hookDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignHook.self, forKey: .hook)
        hook = hookDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let isPausedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isPaused)
        isPaused = isPausedDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let limitsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignLimits.self, forKey: .limits)
        limits = limitsDecoded
        let messageConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageConfiguration.self, forKey: .messageConfiguration)
        messageConfiguration = messageConfigurationDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Schedule.self, forKey: .schedule)
        schedule = scheduleDecoded
        let segmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .segmentId)
        segmentId = segmentIdDecoded
        let segmentVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentVersion)
        segmentVersion = segmentVersionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let templateConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.TemplateConfiguration.self, forKey: .templateConfiguration)
        templateConfiguration = templateConfigurationDecoded
        let treatmentDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .treatmentDescription)
        treatmentDescription = treatmentDescriptionDecoded
        let treatmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .treatmentName)
        treatmentName = treatmentNameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the status, configuration, and other settings for a campaign.
    public struct CampaignResponse: Swift.Equatable {
        /// An array of responses, one for each treatment that you defined for the campaign, in addition to the default treatment.
        public var additionalTreatments: [PinpointClientTypes.TreatmentResource]?
        /// The unique identifier for the application that the campaign applies to.
        /// This member is required.
        public var applicationId: Swift.String?
        /// The Amazon Resource Name (ARN) of the campaign.
        /// This member is required.
        public var arn: Swift.String?
        /// The date, in ISO 8601 format, when the campaign was created.
        /// This member is required.
        public var creationDate: Swift.String?
        /// The delivery configuration settings for sending the campaign through a custom channel.
        public var customDeliveryConfiguration: PinpointClientTypes.CustomDeliveryConfiguration?
        /// The current status of the campaign's default treatment. This value exists only for campaigns that have more than one treatment.
        public var defaultState: PinpointClientTypes.CampaignState?
        /// The custom description of the campaign.
        public var description: Swift.String?
        /// The allocated percentage of users (segment members) who shouldn't receive messages from the campaign.
        public var holdoutPercent: Swift.Int?
        /// The settings for the AWS Lambda function to use as a code hook for the campaign. You can use this hook to customize the segment that's used by the campaign.
        public var hook: PinpointClientTypes.CampaignHook?
        /// The unique identifier for the campaign.
        /// This member is required.
        public var id: Swift.String?
        /// Specifies whether the campaign is paused. A paused campaign doesn't run unless you resume it by changing this value to false.
        public var isPaused: Swift.Bool?
        /// The date, in ISO 8601 format, when the campaign was last modified.
        /// This member is required.
        public var lastModifiedDate: Swift.String?
        /// The messaging limits for the campaign.
        public var limits: PinpointClientTypes.CampaignLimits?
        /// The message configuration settings for the campaign.
        public var messageConfiguration: PinpointClientTypes.MessageConfiguration?
        /// The name of the campaign.
        public var name: Swift.String?
        /// Defines the priority of the campaign, used to decide the order of messages displayed to user if there are multiple messages scheduled to be displayed at the same moment.
        public var priority: Swift.Int?
        /// The schedule settings for the campaign.
        public var schedule: PinpointClientTypes.Schedule?
        /// The unique identifier for the segment that's associated with the campaign.
        /// This member is required.
        public var segmentId: Swift.String?
        /// The version number of the segment that's associated with the campaign.
        /// This member is required.
        public var segmentVersion: Swift.Int?
        /// The current status of the campaign.
        public var state: PinpointClientTypes.CampaignState?
        /// A string-to-string map of key-value pairs that identifies the tags that are associated with the campaign. Each tag consists of a required tag key and an associated tag value.
        public var tags: [Swift.String:Swift.String]?
        /// The message template that’s used for the campaign.
        public var templateConfiguration: PinpointClientTypes.TemplateConfiguration?
        /// The custom description of the default treatment for the campaign.
        public var treatmentDescription: Swift.String?
        /// The custom name of the default treatment for the campaign, if the campaign has multiple treatments. A treatment is a variation of a campaign that's used for A/B testing.
        public var treatmentName: Swift.String?
        /// The version number of the campaign.
        public var version: Swift.Int?

        public init (
            additionalTreatments: [PinpointClientTypes.TreatmentResource]? = nil,
            applicationId: Swift.String? = nil,
            arn: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            customDeliveryConfiguration: PinpointClientTypes.CustomDeliveryConfiguration? = nil,
            defaultState: PinpointClientTypes.CampaignState? = nil,
            description: Swift.String? = nil,
            holdoutPercent: Swift.Int? = nil,
            hook: PinpointClientTypes.CampaignHook? = nil,
            id: Swift.String? = nil,
            isPaused: Swift.Bool? = nil,
            lastModifiedDate: Swift.String? = nil,
            limits: PinpointClientTypes.CampaignLimits? = nil,
            messageConfiguration: PinpointClientTypes.MessageConfiguration? = nil,
            name: Swift.String? = nil,
            priority: Swift.Int? = nil,
            schedule: PinpointClientTypes.Schedule? = nil,
            segmentId: Swift.String? = nil,
            segmentVersion: Swift.Int? = nil,
            state: PinpointClientTypes.CampaignState? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            templateConfiguration: PinpointClientTypes.TemplateConfiguration? = nil,
            treatmentDescription: Swift.String? = nil,
            treatmentName: Swift.String? = nil,
            version: Swift.Int? = nil
        )
        {
            self.additionalTreatments = additionalTreatments
            self.applicationId = applicationId
            self.arn = arn
            self.creationDate = creationDate
            self.customDeliveryConfiguration = customDeliveryConfiguration
            self.defaultState = defaultState
            self.description = description
            self.holdoutPercent = holdoutPercent
            self.hook = hook
            self.id = id
            self.isPaused = isPaused
            self.lastModifiedDate = lastModifiedDate
            self.limits = limits
            self.messageConfiguration = messageConfiguration
            self.name = name
            self.priority = priority
            self.schedule = schedule
            self.segmentId = segmentId
            self.segmentVersion = segmentVersion
            self.state = state
            self.tags = tags
            self.templateConfiguration = templateConfiguration
            self.treatmentDescription = treatmentDescription
            self.treatmentName = treatmentName
            self.version = version
        }
    }

}

extension PinpointClientTypes.CampaignSmsMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
        case entityId = "EntityId"
        case messageType = "MessageType"
        case originationNumber = "OriginationNumber"
        case senderId = "SenderId"
        case templateId = "TemplateId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let entityId = self.entityId {
            try encodeContainer.encode(entityId, forKey: .entityId)
        }
        if let messageType = self.messageType {
            try encodeContainer.encode(messageType.rawValue, forKey: .messageType)
        }
        if let originationNumber = self.originationNumber {
            try encodeContainer.encode(originationNumber, forKey: .originationNumber)
        }
        if let senderId = self.senderId {
            try encodeContainer.encode(senderId, forKey: .senderId)
        }
        if let templateId = self.templateId {
            try encodeContainer.encode(templateId, forKey: .templateId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let messageTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageType.self, forKey: .messageType)
        messageType = messageTypeDecoded
        let originationNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originationNumber)
        originationNumber = originationNumberDecoded
        let senderIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .senderId)
        senderId = senderIdDecoded
        let entityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityId)
        entityId = entityIdDecoded
        let templateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateId)
        templateId = templateIdDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the content and settings for an SMS message that's sent to recipients of a campaign.
    public struct CampaignSmsMessage: Swift.Equatable {
        /// The body of the SMS message.
        public var body: Swift.String?
        /// The entity ID or Principal Entity (PE) id received from the regulatory body for sending SMS in your country.
        public var entityId: Swift.String?
        /// The SMS message type. Valid values are TRANSACTIONAL (for messages that are critical or time-sensitive, such as a one-time passwords) and PROMOTIONAL (for messsages that aren't critical or time-sensitive, such as marketing messages).
        public var messageType: PinpointClientTypes.MessageType?
        /// The long code to send the SMS message from. This value should be one of the dedicated long codes that's assigned to your AWS account. Although it isn't required, we recommend that you specify the long code using an E.164 format to ensure prompt and accurate delivery of the message. For example, +12065550100.
        public var originationNumber: Swift.String?
        /// The sender ID to display on recipients' devices when they receive the SMS message.
        public var senderId: Swift.String?
        /// The template ID received from the regulatory body for sending SMS in your country.
        public var templateId: Swift.String?

        public init (
            body: Swift.String? = nil,
            entityId: Swift.String? = nil,
            messageType: PinpointClientTypes.MessageType? = nil,
            originationNumber: Swift.String? = nil,
            senderId: Swift.String? = nil,
            templateId: Swift.String? = nil
        )
        {
            self.body = body
            self.entityId = entityId
            self.messageType = messageType
            self.originationNumber = originationNumber
            self.senderId = senderId
            self.templateId = templateId
        }
    }

}

extension PinpointClientTypes.CampaignState: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case campaignStatus = "CampaignStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let campaignStatus = self.campaignStatus {
            try encodeContainer.encode(campaignStatus.rawValue, forKey: .campaignStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let campaignStatusDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignStatus.self, forKey: .campaignStatus)
        campaignStatus = campaignStatusDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the status of a campaign.
    public struct CampaignState: Swift.Equatable {
        /// The current status of the campaign, or the current status of a treatment that belongs to an A/B test campaign. If a campaign uses A/B testing, the campaign has a status of COMPLETED only if all campaign treatments have a status of COMPLETED. If you delete the segment that's associated with a campaign, the campaign fails and has a status of DELETED.
        public var campaignStatus: PinpointClientTypes.CampaignStatus?

        public init (
            campaignStatus: PinpointClientTypes.CampaignStatus? = nil
        )
        {
            self.campaignStatus = campaignStatus
        }
    }

}

extension PinpointClientTypes {
    public enum CampaignStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case deleted
        case executing
        case invalid
        case paused
        case pendingNextRun
        case scheduled
        case sdkUnknown(Swift.String)

        public static var allCases: [CampaignStatus] {
            return [
                .completed,
                .deleted,
                .executing,
                .invalid,
                .paused,
                .pendingNextRun,
                .scheduled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .deleted: return "DELETED"
            case .executing: return "EXECUTING"
            case .invalid: return "INVALID"
            case .paused: return "PAUSED"
            case .pendingNextRun: return "PENDING_NEXT_RUN"
            case .scheduled: return "SCHEDULED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CampaignStatus(rawValue: rawValue) ?? CampaignStatus.sdkUnknown(rawValue)
        }
    }
}

extension PinpointClientTypes.CampaignsResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case item = "Item"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let item = item {
            var itemContainer = encodeContainer.nestedUnkeyedContainer(forKey: .item)
            for campaignresponse0 in item {
                try itemContainer.encode(campaignresponse0)
            }
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([PinpointClientTypes.CampaignResponse?].self, forKey: .item)
        var itemDecoded0:[PinpointClientTypes.CampaignResponse]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [PinpointClientTypes.CampaignResponse]()
            for structure0 in itemContainer {
                if let structure0 = structure0 {
                    itemDecoded0?.append(structure0)
                }
            }
        }
        item = itemDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the configuration and other settings for all the campaigns that are associated with an application.
    public struct CampaignsResponse: Swift.Equatable {
        /// An array of responses, one for each campaign that's associated with the application.
        /// This member is required.
        public var item: [PinpointClientTypes.CampaignResponse]?
        /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
        public var nextToken: Swift.String?

        public init (
            item: [PinpointClientTypes.CampaignResponse]? = nil,
            nextToken: Swift.String? = nil
        )
        {
            self.item = item
            self.nextToken = nextToken
        }
    }

}

extension PinpointClientTypes.ChannelResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case creationDate = "CreationDate"
        case enabled = "Enabled"
        case hasCredential = "HasCredential"
        case id = "Id"
        case isArchived = "IsArchived"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedDate = "LastModifiedDate"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let hasCredential = self.hasCredential {
            try encodeContainer.encode(hasCredential, forKey: .hasCredential)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isArchived = self.isArchived {
            try encodeContainer.encode(isArchived, forKey: .isArchived)
        }
        if let lastModifiedBy = self.lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let hasCredentialDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasCredential)
        hasCredential = hasCredentialDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let isArchivedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isArchived)
        isArchived = isArchivedDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the general settings and status of a channel for an application.
    public struct ChannelResponse: Swift.Equatable {
        /// The unique identifier for the application.
        public var applicationId: Swift.String?
        /// The date and time, in ISO 8601 format, when the channel was enabled.
        public var creationDate: Swift.String?
        /// Specifies whether the channel is enabled for the application.
        public var enabled: Swift.Bool?
        /// (Not used) This property is retained only for backward compatibility.
        public var hasCredential: Swift.Bool?
        /// (Deprecated) An identifier for the channel. This property is retained only for backward compatibility.
        public var id: Swift.String?
        /// Specifies whether the channel is archived.
        public var isArchived: Swift.Bool?
        /// The user who last modified the channel.
        public var lastModifiedBy: Swift.String?
        /// The date and time, in ISO 8601 format, when the channel was last modified.
        public var lastModifiedDate: Swift.String?
        /// The current version of the channel.
        public var version: Swift.Int?

        public init (
            applicationId: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            hasCredential: Swift.Bool? = nil,
            id: Swift.String? = nil,
            isArchived: Swift.Bool? = nil,
            lastModifiedBy: Swift.String? = nil,
            lastModifiedDate: Swift.String? = nil,
            version: Swift.Int? = nil
        )
        {
            self.applicationId = applicationId
            self.creationDate = creationDate
            self.enabled = enabled
            self.hasCredential = hasCredential
            self.id = id
            self.isArchived = isArchived
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedDate = lastModifiedDate
            self.version = version
        }
    }

}

extension PinpointClientTypes {
    public enum ChannelType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case adm
        case apns
        case apnsSandbox
        case apnsVoip
        case apnsVoipSandbox
        case baidu
        case custom
        case email
        case gcm
        case inApp
        case push
        case sms
        case voice
        case sdkUnknown(Swift.String)

        public static var allCases: [ChannelType] {
            return [
                .adm,
                .apns,
                .apnsSandbox,
                .apnsVoip,
                .apnsVoipSandbox,
                .baidu,
                .custom,
                .email,
                .gcm,
                .inApp,
                .push,
                .sms,
                .voice,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .adm: return "ADM"
            case .apns: return "APNS"
            case .apnsSandbox: return "APNS_SANDBOX"
            case .apnsVoip: return "APNS_VOIP"
            case .apnsVoipSandbox: return "APNS_VOIP_SANDBOX"
            case .baidu: return "BAIDU"
            case .custom: return "CUSTOM"
            case .email: return "EMAIL"
            case .gcm: return "GCM"
            case .inApp: return "IN_APP"
            case .push: return "PUSH"
            case .sms: return "SMS"
            case .voice: return "VOICE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChannelType(rawValue: rawValue) ?? ChannelType.sdkUnknown(rawValue)
        }
    }
}

extension PinpointClientTypes.ChannelsResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channels = "Channels"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channels = channels {
            var channelsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .channels)
            for (dictKey0, mapOfChannelResponse0) in channels {
                try channelsContainer.encode(mapOfChannelResponse0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelsContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.ChannelResponse?].self, forKey: .channels)
        var channelsDecoded0: [Swift.String:PinpointClientTypes.ChannelResponse]? = nil
        if let channelsContainer = channelsContainer {
            channelsDecoded0 = [Swift.String:PinpointClientTypes.ChannelResponse]()
            for (key0, channelresponse0) in channelsContainer {
                if let channelresponse0 = channelresponse0 {
                    channelsDecoded0?[key0] = channelresponse0
                }
            }
        }
        channels = channelsDecoded0
    }
}

extension PinpointClientTypes {
    /// Provides information about the general settings and status of all channels for an application, including channels that aren't enabled for the application.
    public struct ChannelsResponse: Swift.Equatable {
        /// A map that contains a multipart response for each channel. For each item in this object, the ChannelType is the key and the Channel is the value.
        /// This member is required.
        public var channels: [Swift.String:PinpointClientTypes.ChannelResponse]?

        public init (
            channels: [Swift.String:PinpointClientTypes.ChannelResponse]? = nil
        )
        {
            self.channels = channels
        }
    }

}

extension PinpointClientTypes.ClosedDays: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case custom = "CUSTOM"
        case email = "EMAIL"
        case push = "PUSH"
        case sms = "SMS"
        case voice = "VOICE"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let custom = custom {
            var customContainer = encodeContainer.nestedUnkeyedContainer(forKey: .custom)
            for closeddaysrule0 in custom {
                try customContainer.encode(closeddaysrule0)
            }
        }
        if let email = email {
            var emailContainer = encodeContainer.nestedUnkeyedContainer(forKey: .email)
            for closeddaysrule0 in email {
                try emailContainer.encode(closeddaysrule0)
            }
        }
        if let push = push {
            var pushContainer = encodeContainer.nestedUnkeyedContainer(forKey: .push)
            for closeddaysrule0 in push {
                try pushContainer.encode(closeddaysrule0)
            }
        }
        if let sms = sms {
            var smsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sms)
            for closeddaysrule0 in sms {
                try smsContainer.encode(closeddaysrule0)
            }
        }
        if let voice = voice {
            var voiceContainer = encodeContainer.nestedUnkeyedContainer(forKey: .voice)
            for closeddaysrule0 in voice {
                try voiceContainer.encode(closeddaysrule0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailContainer = try containerValues.decodeIfPresent([PinpointClientTypes.ClosedDaysRule?].self, forKey: .email)
        var emailDecoded0:[PinpointClientTypes.ClosedDaysRule]? = nil
        if let emailContainer = emailContainer {
            emailDecoded0 = [PinpointClientTypes.ClosedDaysRule]()
            for structure0 in emailContainer {
                if let structure0 = structure0 {
                    emailDecoded0?.append(structure0)
                }
            }
        }
        email = emailDecoded0
        let smsContainer = try containerValues.decodeIfPresent([PinpointClientTypes.ClosedDaysRule?].self, forKey: .sms)
        var smsDecoded0:[PinpointClientTypes.ClosedDaysRule]? = nil
        if let smsContainer = smsContainer {
            smsDecoded0 = [PinpointClientTypes.ClosedDaysRule]()
            for structure0 in smsContainer {
                if let structure0 = structure0 {
                    smsDecoded0?.append(structure0)
                }
            }
        }
        sms = smsDecoded0
        let pushContainer = try containerValues.decodeIfPresent([PinpointClientTypes.ClosedDaysRule?].self, forKey: .push)
        var pushDecoded0:[PinpointClientTypes.ClosedDaysRule]? = nil
        if let pushContainer = pushContainer {
            pushDecoded0 = [PinpointClientTypes.ClosedDaysRule]()
            for structure0 in pushContainer {
                if let structure0 = structure0 {
                    pushDecoded0?.append(structure0)
                }
            }
        }
        push = pushDecoded0
        let voiceContainer = try containerValues.decodeIfPresent([PinpointClientTypes.ClosedDaysRule?].self, forKey: .voice)
        var voiceDecoded0:[PinpointClientTypes.ClosedDaysRule]? = nil
        if let voiceContainer = voiceContainer {
            voiceDecoded0 = [PinpointClientTypes.ClosedDaysRule]()
            for structure0 in voiceContainer {
                if let structure0 = structure0 {
                    voiceDecoded0?.append(structure0)
                }
            }
        }
        voice = voiceDecoded0
        let customContainer = try containerValues.decodeIfPresent([PinpointClientTypes.ClosedDaysRule?].self, forKey: .custom)
        var customDecoded0:[PinpointClientTypes.ClosedDaysRule]? = nil
        if let customContainer = customContainer {
            customDecoded0 = [PinpointClientTypes.ClosedDaysRule]()
            for structure0 in customContainer {
                if let structure0 = structure0 {
                    customDecoded0?.append(structure0)
                }
            }
        }
        custom = customDecoded0
    }
}

extension PinpointClientTypes {
    /// The time when journey will stop sending messages.
    public struct ClosedDays: Swift.Equatable {
        /// Rules for Custom Channel.
        public var custom: [PinpointClientTypes.ClosedDaysRule]?
        /// Rules for Email Channel.
        public var email: [PinpointClientTypes.ClosedDaysRule]?
        /// Rules for Push Channel.
        public var push: [PinpointClientTypes.ClosedDaysRule]?
        /// Rules for SMS Channel.
        public var sms: [PinpointClientTypes.ClosedDaysRule]?
        /// Rules for Voice Channel.
        public var voice: [PinpointClientTypes.ClosedDaysRule]?

        public init (
            custom: [PinpointClientTypes.ClosedDaysRule]? = nil,
            email: [PinpointClientTypes.ClosedDaysRule]? = nil,
            push: [PinpointClientTypes.ClosedDaysRule]? = nil,
            sms: [PinpointClientTypes.ClosedDaysRule]? = nil,
            voice: [PinpointClientTypes.ClosedDaysRule]? = nil
        )
        {
            self.custom = custom
            self.email = email
            self.push = push
            self.sms = sms
            self.voice = voice
        }
    }

}

extension PinpointClientTypes.ClosedDaysRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endDateTime = "EndDateTime"
        case name = "Name"
        case startDateTime = "StartDateTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endDateTime = self.endDateTime {
            try encodeContainer.encode(endDateTime, forKey: .endDateTime)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let startDateTime = self.startDateTime {
            try encodeContainer.encode(startDateTime, forKey: .startDateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let startDateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startDateTime)
        startDateTime = startDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
    }
}

extension PinpointClientTypes {
    /// Closed Days Rule. Part of Journey sending schedule.
    public struct ClosedDaysRule: Swift.Equatable {
        /// End Datetime in ISO 8601 format.
        public var endDateTime: Swift.String?
        /// Name of the rule.
        public var name: Swift.String?
        /// Start Datetime in ISO 8601 format.
        public var startDateTime: Swift.String?

        public init (
            endDateTime: Swift.String? = nil,
            name: Swift.String? = nil,
            startDateTime: Swift.String? = nil
        )
        {
            self.endDateTime = endDateTime
            self.name = name
            self.startDateTime = startDateTime
        }
    }

}

extension PinpointClientTypes.Condition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conditions = "Conditions"
        case `operator` = "Operator"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditions = conditions {
            var conditionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .conditions)
            for simplecondition0 in conditions {
                try conditionsContainer.encode(simplecondition0)
            }
        }
        if let `operator` = self.`operator` {
            try encodeContainer.encode(`operator`.rawValue, forKey: .`operator`)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conditionsContainer = try containerValues.decodeIfPresent([PinpointClientTypes.SimpleCondition?].self, forKey: .conditions)
        var conditionsDecoded0:[PinpointClientTypes.SimpleCondition]? = nil
        if let conditionsContainer = conditionsContainer {
            conditionsDecoded0 = [PinpointClientTypes.SimpleCondition]()
            for structure0 in conditionsContainer {
                if let structure0 = structure0 {
                    conditionsDecoded0?.append(structure0)
                }
            }
        }
        conditions = conditionsDecoded0
        let operatorDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Operator.self, forKey: .operator)
        `operator` = operatorDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the conditions to evaluate for an activity in a journey, and how to evaluate those conditions.
    public struct Condition: Swift.Equatable {
        /// The conditions to evaluate for the activity.
        public var conditions: [PinpointClientTypes.SimpleCondition]?
        /// Specifies how to handle multiple conditions for the activity. For example, if you specify two conditions for an activity, whether both or only one of the conditions must be met for the activity to be performed.
        public var `operator`: PinpointClientTypes.Operator?

        public init (
            conditions: [PinpointClientTypes.SimpleCondition]? = nil,
            `operator`: PinpointClientTypes.Operator? = nil
        )
        {
            self.conditions = conditions
            self.`operator` = `operator`
        }
    }

}

extension PinpointClientTypes.ConditionalSplitActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case condition = "Condition"
        case evaluationWaitTime = "EvaluationWaitTime"
        case falseActivity = "FalseActivity"
        case trueActivity = "TrueActivity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let condition = self.condition {
            try encodeContainer.encode(condition, forKey: .condition)
        }
        if let evaluationWaitTime = self.evaluationWaitTime {
            try encodeContainer.encode(evaluationWaitTime, forKey: .evaluationWaitTime)
        }
        if let falseActivity = self.falseActivity {
            try encodeContainer.encode(falseActivity, forKey: .falseActivity)
        }
        if let trueActivity = self.trueActivity {
            try encodeContainer.encode(trueActivity, forKey: .trueActivity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conditionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Condition.self, forKey: .condition)
        condition = conditionDecoded
        let evaluationWaitTimeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.WaitTime.self, forKey: .evaluationWaitTime)
        evaluationWaitTime = evaluationWaitTimeDecoded
        let falseActivityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .falseActivity)
        falseActivity = falseActivityDecoded
        let trueActivityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trueActivity)
        trueActivity = trueActivityDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the settings for a yes/no split activity in a journey. This type of activity sends participants down one of two paths in a journey, based on conditions that you specify. To create yes/no split activities that send participants down different paths based on push notification events (such as Open or Received events), your mobile app has to specify the User ID and Endpoint ID values. For more information, see [Integrating Amazon Pinpoint with your application](https://docs.aws.amazon.com/pinpoint/latest/developerguide/integrate.html) in the Amazon Pinpoint Developer Guide.
    public struct ConditionalSplitActivity: Swift.Equatable {
        /// The conditions that define the paths for the activity, and the relationship between the conditions.
        public var condition: PinpointClientTypes.Condition?
        /// The amount of time to wait before determining whether the conditions are met, or the date and time when Amazon Pinpoint determines whether the conditions are met.
        public var evaluationWaitTime: PinpointClientTypes.WaitTime?
        /// The unique identifier for the activity to perform if the conditions aren't met.
        public var falseActivity: Swift.String?
        /// The unique identifier for the activity to perform if the conditions are met.
        public var trueActivity: Swift.String?

        public init (
            condition: PinpointClientTypes.Condition? = nil,
            evaluationWaitTime: PinpointClientTypes.WaitTime? = nil,
            falseActivity: Swift.String? = nil,
            trueActivity: Swift.String? = nil
        )
        {
            self.condition = condition
            self.evaluationWaitTime = evaluationWaitTime
            self.falseActivity = falseActivity
            self.trueActivity = trueActivity
        }
    }

}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestID = output.requestID
        } else {
            self.message = nil
            self.requestID = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Provides information about an API request or response.
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that's returned from the API.
    public var message: Swift.String?
    /// The unique identifier for the request or response.
    public var requestID: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestID: Swift.String? = nil
    )
    {
        self.message = message
        self.requestID = requestID
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let requestID: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestID = "RequestID"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestID)
        requestID = requestIDDecoded
    }
}

extension PinpointClientTypes.ContactCenterActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextActivity = "NextActivity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextActivity = self.nextActivity {
            try encodeContainer.encode(nextActivity, forKey: .nextActivity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextActivityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextActivity)
        nextActivity = nextActivityDecoded
    }
}

extension PinpointClientTypes {
    public struct ContactCenterActivity: Swift.Equatable {
        /// The unique identifier for the next activity to perform after the this activity.
        public var nextActivity: Swift.String?

        public init (
            nextActivity: Swift.String? = nil
        )
        {
            self.nextActivity = nextActivity
        }
    }

}

public struct CreateAppInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAppInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateAppInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<CreateAppOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let createApplicationRequest = input.operationInput.createApplicationRequest {
                let createApplicationRequestdata = try encoder.encode(createApplicationRequest)
                let createApplicationRequestbody = ClientRuntime.HttpBody.data(createApplicationRequestdata)
                input.builder.withBody(createApplicationRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let createApplicationRequestdata = "{}".data(using: .utf8)!
                    let createApplicationRequestbody = ClientRuntime.HttpBody.data(createApplicationRequestdata)
                    input.builder.withBody(createApplicationRequestbody)
                }
            }
        } catch let err {
            throw SdkError<CreateAppOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateAppInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAppOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension CreateAppInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createApplicationRequest = "CreateApplicationRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createApplicationRequest = self.createApplicationRequest {
            try encodeContainer.encode(createApplicationRequest, forKey: .createApplicationRequest)
        }
    }
}

extension CreateAppInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/apps"
    }
}

public struct CreateAppInput: Swift.Equatable {
    /// Specifies the display name of an application and the tags to associate with the application.
    /// This member is required.
    public var createApplicationRequest: PinpointClientTypes.CreateApplicationRequest?

    public init (
        createApplicationRequest: PinpointClientTypes.CreateApplicationRequest? = nil
    )
    {
        self.createApplicationRequest = createApplicationRequest
    }
}

struct CreateAppInputBody: Swift.Equatable {
    let createApplicationRequest: PinpointClientTypes.CreateApplicationRequest?
}

extension CreateAppInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createApplicationRequest = "CreateApplicationRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createApplicationRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CreateApplicationRequest.self, forKey: .createApplicationRequest)
        createApplicationRequest = createApplicationRequestDecoded
    }
}

extension CreateAppOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateAppOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateAppOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAppOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.ApplicationResponse = try responseDecoder.decode(responseBody: data)
                self.applicationResponse = output
            } else {
                self.applicationResponse = nil
            }
        } else {
            self.applicationResponse = nil
        }
    }
}

public struct CreateAppOutputResponse: Swift.Equatable {
    /// Provides information about an application.
    /// This member is required.
    public var applicationResponse: PinpointClientTypes.ApplicationResponse?

    public init (
        applicationResponse: PinpointClientTypes.ApplicationResponse? = nil
    )
    {
        self.applicationResponse = applicationResponse
    }
}

struct CreateAppOutputResponseBody: Swift.Equatable {
    let applicationResponse: PinpointClientTypes.ApplicationResponse?
}

extension CreateAppOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationResponse = "ApplicationResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ApplicationResponse.self, forKey: .applicationResponse)
        applicationResponse = applicationResponseDecoded
    }
}

extension PinpointClientTypes.CreateApplicationRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapOf__string0) in tags {
                try tagsContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PinpointClientTypes {
    /// Specifies the display name of an application and the tags to associate with the application.
    public struct CreateApplicationRequest: Swift.Equatable {
        /// The display name of the application. This name is displayed as the Project name on the Amazon Pinpoint console.
        /// This member is required.
        public var name: Swift.String?
        /// A string-to-string map of key-value pairs that defines the tags to associate with the application. Each tag consists of a required tag key and an associated tag value.
        public var tags: [Swift.String:Swift.String]?

        public init (
            name: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.name = name
            self.tags = tags
        }
    }

}

public struct CreateCampaignInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCampaignInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateCampaignInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<CreateCampaignOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let writeCampaignRequest = input.operationInput.writeCampaignRequest {
                let writeCampaignRequestdata = try encoder.encode(writeCampaignRequest)
                let writeCampaignRequestbody = ClientRuntime.HttpBody.data(writeCampaignRequestdata)
                input.builder.withBody(writeCampaignRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let writeCampaignRequestdata = "{}".data(using: .utf8)!
                    let writeCampaignRequestbody = ClientRuntime.HttpBody.data(writeCampaignRequestdata)
                    input.builder.withBody(writeCampaignRequestbody)
                }
            }
        } catch let err {
            throw SdkError<CreateCampaignOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateCampaignInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCampaignOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension CreateCampaignInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case writeCampaignRequest = "WriteCampaignRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let writeCampaignRequest = self.writeCampaignRequest {
            try encodeContainer.encode(writeCampaignRequest, forKey: .writeCampaignRequest)
        }
    }
}

extension CreateCampaignInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/campaigns"
    }
}

public struct CreateCampaignInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// Specifies the configuration and other settings for a campaign.
    /// This member is required.
    public var writeCampaignRequest: PinpointClientTypes.WriteCampaignRequest?

    public init (
        applicationId: Swift.String? = nil,
        writeCampaignRequest: PinpointClientTypes.WriteCampaignRequest? = nil
    )
    {
        self.applicationId = applicationId
        self.writeCampaignRequest = writeCampaignRequest
    }
}

struct CreateCampaignInputBody: Swift.Equatable {
    let writeCampaignRequest: PinpointClientTypes.WriteCampaignRequest?
}

extension CreateCampaignInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case writeCampaignRequest = "WriteCampaignRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let writeCampaignRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.WriteCampaignRequest.self, forKey: .writeCampaignRequest)
        writeCampaignRequest = writeCampaignRequestDecoded
    }
}

extension CreateCampaignOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateCampaignOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateCampaignOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCampaignOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.CampaignResponse = try responseDecoder.decode(responseBody: data)
                self.campaignResponse = output
            } else {
                self.campaignResponse = nil
            }
        } else {
            self.campaignResponse = nil
        }
    }
}

public struct CreateCampaignOutputResponse: Swift.Equatable {
    /// Provides information about the status, configuration, and other settings for a campaign.
    /// This member is required.
    public var campaignResponse: PinpointClientTypes.CampaignResponse?

    public init (
        campaignResponse: PinpointClientTypes.CampaignResponse? = nil
    )
    {
        self.campaignResponse = campaignResponse
    }
}

struct CreateCampaignOutputResponseBody: Swift.Equatable {
    let campaignResponse: PinpointClientTypes.CampaignResponse?
}

extension CreateCampaignOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case campaignResponse = "CampaignResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let campaignResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignResponse.self, forKey: .campaignResponse)
        campaignResponse = campaignResponseDecoded
    }
}

public struct CreateEmailTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateEmailTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateEmailTemplateInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<CreateEmailTemplateOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let emailTemplateRequest = input.operationInput.emailTemplateRequest {
                let emailTemplateRequestdata = try encoder.encode(emailTemplateRequest)
                let emailTemplateRequestbody = ClientRuntime.HttpBody.data(emailTemplateRequestdata)
                input.builder.withBody(emailTemplateRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let emailTemplateRequestdata = "{}".data(using: .utf8)!
                    let emailTemplateRequestbody = ClientRuntime.HttpBody.data(emailTemplateRequestdata)
                    input.builder.withBody(emailTemplateRequestbody)
                }
            }
        } catch let err {
            throw SdkError<CreateEmailTemplateOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension CreateEmailTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailTemplateRequest = "EmailTemplateRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let emailTemplateRequest = self.emailTemplateRequest {
            try encodeContainer.encode(emailTemplateRequest, forKey: .emailTemplateRequest)
        }
    }
}

extension CreateEmailTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v1/templates/\(templateName.urlPercentEncoding())/email"
    }
}

public struct CreateEmailTemplateInput: Swift.Equatable {
    /// Specifies the content and settings for a message template that can be used in messages that are sent through the email channel.
    /// This member is required.
    public var emailTemplateRequest: PinpointClientTypes.EmailTemplateRequest?
    /// The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        emailTemplateRequest: PinpointClientTypes.EmailTemplateRequest? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.emailTemplateRequest = emailTemplateRequest
        self.templateName = templateName
    }
}

struct CreateEmailTemplateInputBody: Swift.Equatable {
    let emailTemplateRequest: PinpointClientTypes.EmailTemplateRequest?
}

extension CreateEmailTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailTemplateRequest = "EmailTemplateRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailTemplateRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EmailTemplateRequest.self, forKey: .emailTemplateRequest)
        emailTemplateRequest = emailTemplateRequestDecoded
    }
}

extension CreateEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.CreateTemplateMessageBody = try responseDecoder.decode(responseBody: data)
                self.createTemplateMessageBody = output
            } else {
                self.createTemplateMessageBody = nil
            }
        } else {
            self.createTemplateMessageBody = nil
        }
    }
}

public struct CreateEmailTemplateOutputResponse: Swift.Equatable {
    /// Provides information about a request to create a message template.
    /// This member is required.
    public var createTemplateMessageBody: PinpointClientTypes.CreateTemplateMessageBody?

    public init (
        createTemplateMessageBody: PinpointClientTypes.CreateTemplateMessageBody? = nil
    )
    {
        self.createTemplateMessageBody = createTemplateMessageBody
    }
}

struct CreateEmailTemplateOutputResponseBody: Swift.Equatable {
    let createTemplateMessageBody: PinpointClientTypes.CreateTemplateMessageBody?
}

extension CreateEmailTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTemplateMessageBody = "CreateTemplateMessageBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createTemplateMessageBodyDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CreateTemplateMessageBody.self, forKey: .createTemplateMessageBody)
        createTemplateMessageBody = createTemplateMessageBodyDecoded
    }
}

public struct CreateExportJobInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateExportJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateExportJobInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<CreateExportJobOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let exportJobRequest = input.operationInput.exportJobRequest {
                let exportJobRequestdata = try encoder.encode(exportJobRequest)
                let exportJobRequestbody = ClientRuntime.HttpBody.data(exportJobRequestdata)
                input.builder.withBody(exportJobRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let exportJobRequestdata = "{}".data(using: .utf8)!
                    let exportJobRequestbody = ClientRuntime.HttpBody.data(exportJobRequestdata)
                    input.builder.withBody(exportJobRequestbody)
                }
            }
        } catch let err {
            throw SdkError<CreateExportJobOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateExportJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateExportJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension CreateExportJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportJobRequest = "ExportJobRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exportJobRequest = self.exportJobRequest {
            try encodeContainer.encode(exportJobRequest, forKey: .exportJobRequest)
        }
    }
}

extension CreateExportJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/jobs/export"
    }
}

public struct CreateExportJobInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// Specifies the settings for a job that exports endpoint definitions to an Amazon Simple Storage Service (Amazon S3) bucket.
    /// This member is required.
    public var exportJobRequest: PinpointClientTypes.ExportJobRequest?

    public init (
        applicationId: Swift.String? = nil,
        exportJobRequest: PinpointClientTypes.ExportJobRequest? = nil
    )
    {
        self.applicationId = applicationId
        self.exportJobRequest = exportJobRequest
    }
}

struct CreateExportJobInputBody: Swift.Equatable {
    let exportJobRequest: PinpointClientTypes.ExportJobRequest?
}

extension CreateExportJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportJobRequest = "ExportJobRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportJobRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ExportJobRequest.self, forKey: .exportJobRequest)
        exportJobRequest = exportJobRequestDecoded
    }
}

extension CreateExportJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateExportJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateExportJobOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateExportJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.ExportJobResponse = try responseDecoder.decode(responseBody: data)
                self.exportJobResponse = output
            } else {
                self.exportJobResponse = nil
            }
        } else {
            self.exportJobResponse = nil
        }
    }
}

public struct CreateExportJobOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of a job that exports endpoint definitions to a file. The file can be added directly to an Amazon Simple Storage Service (Amazon S3) bucket by using the Amazon Pinpoint API or downloaded directly to a computer by using the Amazon Pinpoint console.
    /// This member is required.
    public var exportJobResponse: PinpointClientTypes.ExportJobResponse?

    public init (
        exportJobResponse: PinpointClientTypes.ExportJobResponse? = nil
    )
    {
        self.exportJobResponse = exportJobResponse
    }
}

struct CreateExportJobOutputResponseBody: Swift.Equatable {
    let exportJobResponse: PinpointClientTypes.ExportJobResponse?
}

extension CreateExportJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportJobResponse = "ExportJobResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportJobResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ExportJobResponse.self, forKey: .exportJobResponse)
        exportJobResponse = exportJobResponseDecoded
    }
}

public struct CreateImportJobInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateImportJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateImportJobInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<CreateImportJobOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let importJobRequest = input.operationInput.importJobRequest {
                let importJobRequestdata = try encoder.encode(importJobRequest)
                let importJobRequestbody = ClientRuntime.HttpBody.data(importJobRequestdata)
                input.builder.withBody(importJobRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let importJobRequestdata = "{}".data(using: .utf8)!
                    let importJobRequestbody = ClientRuntime.HttpBody.data(importJobRequestdata)
                    input.builder.withBody(importJobRequestbody)
                }
            }
        } catch let err {
            throw SdkError<CreateImportJobOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateImportJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateImportJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension CreateImportJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importJobRequest = "ImportJobRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let importJobRequest = self.importJobRequest {
            try encodeContainer.encode(importJobRequest, forKey: .importJobRequest)
        }
    }
}

extension CreateImportJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/jobs/import"
    }
}

public struct CreateImportJobInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// Specifies the settings for a job that imports endpoint definitions from an Amazon Simple Storage Service (Amazon S3) bucket.
    /// This member is required.
    public var importJobRequest: PinpointClientTypes.ImportJobRequest?

    public init (
        applicationId: Swift.String? = nil,
        importJobRequest: PinpointClientTypes.ImportJobRequest? = nil
    )
    {
        self.applicationId = applicationId
        self.importJobRequest = importJobRequest
    }
}

struct CreateImportJobInputBody: Swift.Equatable {
    let importJobRequest: PinpointClientTypes.ImportJobRequest?
}

extension CreateImportJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importJobRequest = "ImportJobRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importJobRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ImportJobRequest.self, forKey: .importJobRequest)
        importJobRequest = importJobRequestDecoded
    }
}

extension CreateImportJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateImportJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateImportJobOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateImportJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.ImportJobResponse = try responseDecoder.decode(responseBody: data)
                self.importJobResponse = output
            } else {
                self.importJobResponse = nil
            }
        } else {
            self.importJobResponse = nil
        }
    }
}

public struct CreateImportJobOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of a job that imports endpoint definitions from one or more files. The files can be stored in an Amazon Simple Storage Service (Amazon S3) bucket or uploaded directly from a computer by using the Amazon Pinpoint console.
    /// This member is required.
    public var importJobResponse: PinpointClientTypes.ImportJobResponse?

    public init (
        importJobResponse: PinpointClientTypes.ImportJobResponse? = nil
    )
    {
        self.importJobResponse = importJobResponse
    }
}

struct CreateImportJobOutputResponseBody: Swift.Equatable {
    let importJobResponse: PinpointClientTypes.ImportJobResponse?
}

extension CreateImportJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importJobResponse = "ImportJobResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importJobResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ImportJobResponse.self, forKey: .importJobResponse)
        importJobResponse = importJobResponseDecoded
    }
}

public struct CreateInAppTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInAppTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateInAppTemplateInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<CreateInAppTemplateOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let inAppTemplateRequest = input.operationInput.inAppTemplateRequest {
                let inAppTemplateRequestdata = try encoder.encode(inAppTemplateRequest)
                let inAppTemplateRequestbody = ClientRuntime.HttpBody.data(inAppTemplateRequestdata)
                input.builder.withBody(inAppTemplateRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let inAppTemplateRequestdata = "{}".data(using: .utf8)!
                    let inAppTemplateRequestbody = ClientRuntime.HttpBody.data(inAppTemplateRequestdata)
                    input.builder.withBody(inAppTemplateRequestbody)
                }
            }
        } catch let err {
            throw SdkError<CreateInAppTemplateOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateInAppTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInAppTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension CreateInAppTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inAppTemplateRequest = "InAppTemplateRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inAppTemplateRequest = self.inAppTemplateRequest {
            try encodeContainer.encode(inAppTemplateRequest, forKey: .inAppTemplateRequest)
        }
    }
}

extension CreateInAppTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v1/templates/\(templateName.urlPercentEncoding())/inapp"
    }
}

public struct CreateInAppTemplateInput: Swift.Equatable {
    /// InApp Template Request.
    /// This member is required.
    public var inAppTemplateRequest: PinpointClientTypes.InAppTemplateRequest?
    /// The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        inAppTemplateRequest: PinpointClientTypes.InAppTemplateRequest? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.inAppTemplateRequest = inAppTemplateRequest
        self.templateName = templateName
    }
}

struct CreateInAppTemplateInputBody: Swift.Equatable {
    let inAppTemplateRequest: PinpointClientTypes.InAppTemplateRequest?
}

extension CreateInAppTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inAppTemplateRequest = "InAppTemplateRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inAppTemplateRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.InAppTemplateRequest.self, forKey: .inAppTemplateRequest)
        inAppTemplateRequest = inAppTemplateRequestDecoded
    }
}

extension CreateInAppTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateInAppTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateInAppTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateInAppTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.TemplateCreateMessageBody = try responseDecoder.decode(responseBody: data)
                self.templateCreateMessageBody = output
            } else {
                self.templateCreateMessageBody = nil
            }
        } else {
            self.templateCreateMessageBody = nil
        }
    }
}

public struct CreateInAppTemplateOutputResponse: Swift.Equatable {
    /// Provides information about a request to create a message template.
    /// This member is required.
    public var templateCreateMessageBody: PinpointClientTypes.TemplateCreateMessageBody?

    public init (
        templateCreateMessageBody: PinpointClientTypes.TemplateCreateMessageBody? = nil
    )
    {
        self.templateCreateMessageBody = templateCreateMessageBody
    }
}

struct CreateInAppTemplateOutputResponseBody: Swift.Equatable {
    let templateCreateMessageBody: PinpointClientTypes.TemplateCreateMessageBody?
}

extension CreateInAppTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateCreateMessageBody = "TemplateCreateMessageBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateCreateMessageBodyDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.TemplateCreateMessageBody.self, forKey: .templateCreateMessageBody)
        templateCreateMessageBody = templateCreateMessageBodyDecoded
    }
}

public struct CreateJourneyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateJourneyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateJourneyInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<CreateJourneyOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let writeJourneyRequest = input.operationInput.writeJourneyRequest {
                let writeJourneyRequestdata = try encoder.encode(writeJourneyRequest)
                let writeJourneyRequestbody = ClientRuntime.HttpBody.data(writeJourneyRequestdata)
                input.builder.withBody(writeJourneyRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let writeJourneyRequestdata = "{}".data(using: .utf8)!
                    let writeJourneyRequestbody = ClientRuntime.HttpBody.data(writeJourneyRequestdata)
                    input.builder.withBody(writeJourneyRequestbody)
                }
            }
        } catch let err {
            throw SdkError<CreateJourneyOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateJourneyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateJourneyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension CreateJourneyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case writeJourneyRequest = "WriteJourneyRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let writeJourneyRequest = self.writeJourneyRequest {
            try encodeContainer.encode(writeJourneyRequest, forKey: .writeJourneyRequest)
        }
    }
}

extension CreateJourneyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/journeys"
    }
}

public struct CreateJourneyInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// Specifies the configuration and other settings for a journey.
    /// This member is required.
    public var writeJourneyRequest: PinpointClientTypes.WriteJourneyRequest?

    public init (
        applicationId: Swift.String? = nil,
        writeJourneyRequest: PinpointClientTypes.WriteJourneyRequest? = nil
    )
    {
        self.applicationId = applicationId
        self.writeJourneyRequest = writeJourneyRequest
    }
}

struct CreateJourneyInputBody: Swift.Equatable {
    let writeJourneyRequest: PinpointClientTypes.WriteJourneyRequest?
}

extension CreateJourneyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case writeJourneyRequest = "WriteJourneyRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let writeJourneyRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.WriteJourneyRequest.self, forKey: .writeJourneyRequest)
        writeJourneyRequest = writeJourneyRequestDecoded
    }
}

extension CreateJourneyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateJourneyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateJourneyOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateJourneyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.JourneyResponse = try responseDecoder.decode(responseBody: data)
                self.journeyResponse = output
            } else {
                self.journeyResponse = nil
            }
        } else {
            self.journeyResponse = nil
        }
    }
}

public struct CreateJourneyOutputResponse: Swift.Equatable {
    /// Provides information about the status, configuration, and other settings for a journey.
    /// This member is required.
    public var journeyResponse: PinpointClientTypes.JourneyResponse?

    public init (
        journeyResponse: PinpointClientTypes.JourneyResponse? = nil
    )
    {
        self.journeyResponse = journeyResponse
    }
}

struct CreateJourneyOutputResponseBody: Swift.Equatable {
    let journeyResponse: PinpointClientTypes.JourneyResponse?
}

extension CreateJourneyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case journeyResponse = "JourneyResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let journeyResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneyResponse.self, forKey: .journeyResponse)
        journeyResponse = journeyResponseDecoded
    }
}

public struct CreatePushTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreatePushTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreatePushTemplateInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<CreatePushTemplateOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let pushNotificationTemplateRequest = input.operationInput.pushNotificationTemplateRequest {
                let pushNotificationTemplateRequestdata = try encoder.encode(pushNotificationTemplateRequest)
                let pushNotificationTemplateRequestbody = ClientRuntime.HttpBody.data(pushNotificationTemplateRequestdata)
                input.builder.withBody(pushNotificationTemplateRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let pushNotificationTemplateRequestdata = "{}".data(using: .utf8)!
                    let pushNotificationTemplateRequestbody = ClientRuntime.HttpBody.data(pushNotificationTemplateRequestdata)
                    input.builder.withBody(pushNotificationTemplateRequestbody)
                }
            }
        } catch let err {
            throw SdkError<CreatePushTemplateOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreatePushTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreatePushTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension CreatePushTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pushNotificationTemplateRequest = "PushNotificationTemplateRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pushNotificationTemplateRequest = self.pushNotificationTemplateRequest {
            try encodeContainer.encode(pushNotificationTemplateRequest, forKey: .pushNotificationTemplateRequest)
        }
    }
}

extension CreatePushTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v1/templates/\(templateName.urlPercentEncoding())/push"
    }
}

public struct CreatePushTemplateInput: Swift.Equatable {
    /// Specifies the content and settings for a message template that can be used in messages that are sent through a push notification channel.
    /// This member is required.
    public var pushNotificationTemplateRequest: PinpointClientTypes.PushNotificationTemplateRequest?
    /// The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        pushNotificationTemplateRequest: PinpointClientTypes.PushNotificationTemplateRequest? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.pushNotificationTemplateRequest = pushNotificationTemplateRequest
        self.templateName = templateName
    }
}

struct CreatePushTemplateInputBody: Swift.Equatable {
    let pushNotificationTemplateRequest: PinpointClientTypes.PushNotificationTemplateRequest?
}

extension CreatePushTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pushNotificationTemplateRequest = "PushNotificationTemplateRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pushNotificationTemplateRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.PushNotificationTemplateRequest.self, forKey: .pushNotificationTemplateRequest)
        pushNotificationTemplateRequest = pushNotificationTemplateRequestDecoded
    }
}

extension CreatePushTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePushTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreatePushTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePushTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.CreateTemplateMessageBody = try responseDecoder.decode(responseBody: data)
                self.createTemplateMessageBody = output
            } else {
                self.createTemplateMessageBody = nil
            }
        } else {
            self.createTemplateMessageBody = nil
        }
    }
}

public struct CreatePushTemplateOutputResponse: Swift.Equatable {
    /// Provides information about a request to create a message template.
    /// This member is required.
    public var createTemplateMessageBody: PinpointClientTypes.CreateTemplateMessageBody?

    public init (
        createTemplateMessageBody: PinpointClientTypes.CreateTemplateMessageBody? = nil
    )
    {
        self.createTemplateMessageBody = createTemplateMessageBody
    }
}

struct CreatePushTemplateOutputResponseBody: Swift.Equatable {
    let createTemplateMessageBody: PinpointClientTypes.CreateTemplateMessageBody?
}

extension CreatePushTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTemplateMessageBody = "CreateTemplateMessageBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createTemplateMessageBodyDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CreateTemplateMessageBody.self, forKey: .createTemplateMessageBody)
        createTemplateMessageBody = createTemplateMessageBodyDecoded
    }
}

public struct CreateRecommenderConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRecommenderConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRecommenderConfigurationInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<CreateRecommenderConfigurationOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let createRecommenderConfiguration = input.operationInput.createRecommenderConfiguration {
                let createRecommenderConfigurationdata = try encoder.encode(createRecommenderConfiguration)
                let createRecommenderConfigurationbody = ClientRuntime.HttpBody.data(createRecommenderConfigurationdata)
                input.builder.withBody(createRecommenderConfigurationbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let createRecommenderConfigurationdata = "{}".data(using: .utf8)!
                    let createRecommenderConfigurationbody = ClientRuntime.HttpBody.data(createRecommenderConfigurationdata)
                    input.builder.withBody(createRecommenderConfigurationbody)
                }
            }
        } catch let err {
            throw SdkError<CreateRecommenderConfigurationOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRecommenderConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRecommenderConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension CreateRecommenderConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createRecommenderConfiguration = "CreateRecommenderConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createRecommenderConfiguration = self.createRecommenderConfiguration {
            try encodeContainer.encode(createRecommenderConfiguration, forKey: .createRecommenderConfiguration)
        }
    }
}

extension CreateRecommenderConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/recommenders"
    }
}

public struct CreateRecommenderConfigurationInput: Swift.Equatable {
    /// Specifies Amazon Pinpoint configuration settings for retrieving and processing recommendation data from a recommender model.
    /// This member is required.
    public var createRecommenderConfiguration: PinpointClientTypes.CreateRecommenderConfigurationShape?

    public init (
        createRecommenderConfiguration: PinpointClientTypes.CreateRecommenderConfigurationShape? = nil
    )
    {
        self.createRecommenderConfiguration = createRecommenderConfiguration
    }
}

struct CreateRecommenderConfigurationInputBody: Swift.Equatable {
    let createRecommenderConfiguration: PinpointClientTypes.CreateRecommenderConfigurationShape?
}

extension CreateRecommenderConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createRecommenderConfiguration = "CreateRecommenderConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createRecommenderConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CreateRecommenderConfigurationShape.self, forKey: .createRecommenderConfiguration)
        createRecommenderConfiguration = createRecommenderConfigurationDecoded
    }
}

extension CreateRecommenderConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRecommenderConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateRecommenderConfigurationOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRecommenderConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.RecommenderConfigurationResponse = try responseDecoder.decode(responseBody: data)
                self.recommenderConfigurationResponse = output
            } else {
                self.recommenderConfigurationResponse = nil
            }
        } else {
            self.recommenderConfigurationResponse = nil
        }
    }
}

public struct CreateRecommenderConfigurationOutputResponse: Swift.Equatable {
    /// Provides information about Amazon Pinpoint configuration settings for retrieving and processing data from a recommender model.
    /// This member is required.
    public var recommenderConfigurationResponse: PinpointClientTypes.RecommenderConfigurationResponse?

    public init (
        recommenderConfigurationResponse: PinpointClientTypes.RecommenderConfigurationResponse? = nil
    )
    {
        self.recommenderConfigurationResponse = recommenderConfigurationResponse
    }
}

struct CreateRecommenderConfigurationOutputResponseBody: Swift.Equatable {
    let recommenderConfigurationResponse: PinpointClientTypes.RecommenderConfigurationResponse?
}

extension CreateRecommenderConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recommenderConfigurationResponse = "RecommenderConfigurationResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommenderConfigurationResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.RecommenderConfigurationResponse.self, forKey: .recommenderConfigurationResponse)
        recommenderConfigurationResponse = recommenderConfigurationResponseDecoded
    }
}

extension PinpointClientTypes.CreateRecommenderConfigurationShape: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case description = "Description"
        case name = "Name"
        case recommendationProviderIdType = "RecommendationProviderIdType"
        case recommendationProviderRoleArn = "RecommendationProviderRoleArn"
        case recommendationProviderUri = "RecommendationProviderUri"
        case recommendationTransformerUri = "RecommendationTransformerUri"
        case recommendationsDisplayName = "RecommendationsDisplayName"
        case recommendationsPerMessage = "RecommendationsPerMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, mapOf__string0) in attributes {
                try attributesContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let recommendationProviderIdType = self.recommendationProviderIdType {
            try encodeContainer.encode(recommendationProviderIdType, forKey: .recommendationProviderIdType)
        }
        if let recommendationProviderRoleArn = self.recommendationProviderRoleArn {
            try encodeContainer.encode(recommendationProviderRoleArn, forKey: .recommendationProviderRoleArn)
        }
        if let recommendationProviderUri = self.recommendationProviderUri {
            try encodeContainer.encode(recommendationProviderUri, forKey: .recommendationProviderUri)
        }
        if let recommendationTransformerUri = self.recommendationTransformerUri {
            try encodeContainer.encode(recommendationTransformerUri, forKey: .recommendationTransformerUri)
        }
        if let recommendationsDisplayName = self.recommendationsDisplayName {
            try encodeContainer.encode(recommendationsDisplayName, forKey: .recommendationsDisplayName)
        }
        if let recommendationsPerMessage = self.recommendationsPerMessage {
            try encodeContainer.encode(recommendationsPerMessage, forKey: .recommendationsPerMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in attributesContainer {
                if let __string0 = __string0 {
                    attributesDecoded0?[key0] = __string0
                }
            }
        }
        attributes = attributesDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let recommendationProviderIdTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationProviderIdType)
        recommendationProviderIdType = recommendationProviderIdTypeDecoded
        let recommendationProviderRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationProviderRoleArn)
        recommendationProviderRoleArn = recommendationProviderRoleArnDecoded
        let recommendationProviderUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationProviderUri)
        recommendationProviderUri = recommendationProviderUriDecoded
        let recommendationTransformerUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationTransformerUri)
        recommendationTransformerUri = recommendationTransformerUriDecoded
        let recommendationsDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationsDisplayName)
        recommendationsDisplayName = recommendationsDisplayNameDecoded
        let recommendationsPerMessageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .recommendationsPerMessage)
        recommendationsPerMessage = recommendationsPerMessageDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies Amazon Pinpoint configuration settings for retrieving and processing recommendation data from a recommender model.
    public struct CreateRecommenderConfigurationShape: Swift.Equatable {
        /// A map of key-value pairs that defines 1-10 custom endpoint or user attributes, depending on the value for the RecommendationProviderIdType property. Each of these attributes temporarily stores a recommended item that's retrieved from the recommender model and sent to an AWS Lambda function for additional processing. Each attribute can be used as a message variable in a message template. In the map, the key is the name of a custom attribute and the value is a custom display name for that attribute. The display name appears in the Attribute finder of the template editor on the Amazon Pinpoint console. The following restrictions apply to these names:
        ///
        /// * An attribute name must start with a letter or number and it can contain up to 50 characters. The characters can be letters, numbers, underscores (_), or hyphens (-). Attribute names are case sensitive and must be unique.
        ///
        /// * An attribute display name must start with a letter or number and it can contain up to 25 characters. The characters can be letters, numbers, spaces, underscores (_), or hyphens (-).
        ///
        ///
        /// This object is required if the configuration invokes an AWS Lambda function (RecommendationTransformerUri) to process recommendation data. Otherwise, don't include this object in your request.
        public var attributes: [Swift.String:Swift.String]?
        /// A custom description of the configuration for the recommender model. The description can contain up to 128 characters. The characters can be letters, numbers, spaces, or the following symbols: _ ; () , ‐.
        public var description: Swift.String?
        /// A custom name of the configuration for the recommender model. The name must start with a letter or number and it can contain up to 128 characters. The characters can be letters, numbers, spaces, underscores (_), or hyphens (-).
        public var name: Swift.String?
        /// The type of Amazon Pinpoint ID to associate with unique user IDs in the recommender model. This value enables the model to use attribute and event data that’s specific to a particular endpoint or user in an Amazon Pinpoint application. Valid values are:
        ///
        /// * PINPOINT_ENDPOINT_ID - Associate each user in the model with a particular endpoint in Amazon Pinpoint. The data is correlated based on endpoint IDs in Amazon Pinpoint. This is the default value.
        ///
        /// * PINPOINT_USER_ID - Associate each user in the model with a particular user and endpoint in Amazon Pinpoint. The data is correlated based on user IDs in Amazon Pinpoint. If you specify this value, an endpoint definition in Amazon Pinpoint has to specify both a user ID (UserId) and an endpoint ID. Otherwise, messages won’t be sent to the user's endpoint.
        public var recommendationProviderIdType: Swift.String?
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon Pinpoint to retrieve recommendation data from the recommender model.
        /// This member is required.
        public var recommendationProviderRoleArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the recommender model to retrieve recommendation data from. This value must match the ARN of an Amazon Personalize campaign.
        /// This member is required.
        public var recommendationProviderUri: Swift.String?
        /// The name or Amazon Resource Name (ARN) of the AWS Lambda function to invoke for additional processing of recommendation data that's retrieved from the recommender model.
        public var recommendationTransformerUri: Swift.String?
        /// A custom display name for the standard endpoint or user attribute (RecommendationItems) that temporarily stores recommended items for each endpoint or user, depending on the value for the RecommendationProviderIdType property. This value is required if the configuration doesn't invoke an AWS Lambda function (RecommendationTransformerUri) to perform additional processing of recommendation data. This name appears in the Attribute finder of the template editor on the Amazon Pinpoint console. The name can contain up to 25 characters. The characters can be letters, numbers, spaces, underscores (_), or hyphens (-). These restrictions don't apply to attribute values.
        public var recommendationsDisplayName: Swift.String?
        /// The number of recommended items to retrieve from the model for each endpoint or user, depending on the value for the RecommendationProviderIdType property. This number determines how many recommended items are available for use in message variables. The minimum value is 1. The maximum value is 5. The default value is 5. To use multiple recommended items and custom attributes with message variables, you have to use an AWS Lambda function (RecommendationTransformerUri) to perform additional processing of recommendation data.
        public var recommendationsPerMessage: Swift.Int?

        public init (
            attributes: [Swift.String:Swift.String]? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            recommendationProviderIdType: Swift.String? = nil,
            recommendationProviderRoleArn: Swift.String? = nil,
            recommendationProviderUri: Swift.String? = nil,
            recommendationTransformerUri: Swift.String? = nil,
            recommendationsDisplayName: Swift.String? = nil,
            recommendationsPerMessage: Swift.Int? = nil
        )
        {
            self.attributes = attributes
            self.description = description
            self.name = name
            self.recommendationProviderIdType = recommendationProviderIdType
            self.recommendationProviderRoleArn = recommendationProviderRoleArn
            self.recommendationProviderUri = recommendationProviderUri
            self.recommendationTransformerUri = recommendationTransformerUri
            self.recommendationsDisplayName = recommendationsDisplayName
            self.recommendationsPerMessage = recommendationsPerMessage
        }
    }

}

public struct CreateSegmentInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateSegmentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateSegmentInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<CreateSegmentOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let writeSegmentRequest = input.operationInput.writeSegmentRequest {
                let writeSegmentRequestdata = try encoder.encode(writeSegmentRequest)
                let writeSegmentRequestbody = ClientRuntime.HttpBody.data(writeSegmentRequestdata)
                input.builder.withBody(writeSegmentRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let writeSegmentRequestdata = "{}".data(using: .utf8)!
                    let writeSegmentRequestbody = ClientRuntime.HttpBody.data(writeSegmentRequestdata)
                    input.builder.withBody(writeSegmentRequestbody)
                }
            }
        } catch let err {
            throw SdkError<CreateSegmentOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateSegmentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateSegmentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension CreateSegmentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case writeSegmentRequest = "WriteSegmentRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let writeSegmentRequest = self.writeSegmentRequest {
            try encodeContainer.encode(writeSegmentRequest, forKey: .writeSegmentRequest)
        }
    }
}

extension CreateSegmentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/segments"
    }
}

public struct CreateSegmentInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// Specifies the configuration, dimension, and other settings for a segment. A WriteSegmentRequest object can include a Dimensions object or a SegmentGroups object, but not both.
    /// This member is required.
    public var writeSegmentRequest: PinpointClientTypes.WriteSegmentRequest?

    public init (
        applicationId: Swift.String? = nil,
        writeSegmentRequest: PinpointClientTypes.WriteSegmentRequest? = nil
    )
    {
        self.applicationId = applicationId
        self.writeSegmentRequest = writeSegmentRequest
    }
}

struct CreateSegmentInputBody: Swift.Equatable {
    let writeSegmentRequest: PinpointClientTypes.WriteSegmentRequest?
}

extension CreateSegmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case writeSegmentRequest = "WriteSegmentRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let writeSegmentRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.WriteSegmentRequest.self, forKey: .writeSegmentRequest)
        writeSegmentRequest = writeSegmentRequestDecoded
    }
}

extension CreateSegmentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateSegmentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateSegmentOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateSegmentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.SegmentResponse = try responseDecoder.decode(responseBody: data)
                self.segmentResponse = output
            } else {
                self.segmentResponse = nil
            }
        } else {
            self.segmentResponse = nil
        }
    }
}

public struct CreateSegmentOutputResponse: Swift.Equatable {
    /// Provides information about the configuration, dimension, and other settings for a segment.
    /// This member is required.
    public var segmentResponse: PinpointClientTypes.SegmentResponse?

    public init (
        segmentResponse: PinpointClientTypes.SegmentResponse? = nil
    )
    {
        self.segmentResponse = segmentResponse
    }
}

struct CreateSegmentOutputResponseBody: Swift.Equatable {
    let segmentResponse: PinpointClientTypes.SegmentResponse?
}

extension CreateSegmentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case segmentResponse = "SegmentResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let segmentResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentResponse.self, forKey: .segmentResponse)
        segmentResponse = segmentResponseDecoded
    }
}

public struct CreateSmsTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateSmsTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateSmsTemplateInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<CreateSmsTemplateOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let smsTemplateRequest = input.operationInput.smsTemplateRequest {
                let smsTemplateRequestdata = try encoder.encode(smsTemplateRequest)
                let smsTemplateRequestbody = ClientRuntime.HttpBody.data(smsTemplateRequestdata)
                input.builder.withBody(smsTemplateRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let smsTemplateRequestdata = "{}".data(using: .utf8)!
                    let smsTemplateRequestbody = ClientRuntime.HttpBody.data(smsTemplateRequestdata)
                    input.builder.withBody(smsTemplateRequestbody)
                }
            }
        } catch let err {
            throw SdkError<CreateSmsTemplateOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateSmsTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateSmsTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension CreateSmsTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case smsTemplateRequest = "SMSTemplateRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let smsTemplateRequest = self.smsTemplateRequest {
            try encodeContainer.encode(smsTemplateRequest, forKey: .smsTemplateRequest)
        }
    }
}

extension CreateSmsTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v1/templates/\(templateName.urlPercentEncoding())/sms"
    }
}

public struct CreateSmsTemplateInput: Swift.Equatable {
    /// Specifies the content and settings for a message template that can be used in text messages that are sent through the SMS channel.
    /// This member is required.
    public var smsTemplateRequest: PinpointClientTypes.SMSTemplateRequest?
    /// The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        smsTemplateRequest: PinpointClientTypes.SMSTemplateRequest? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.smsTemplateRequest = smsTemplateRequest
        self.templateName = templateName
    }
}

struct CreateSmsTemplateInputBody: Swift.Equatable {
    let smsTemplateRequest: PinpointClientTypes.SMSTemplateRequest?
}

extension CreateSmsTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case smsTemplateRequest = "SMSTemplateRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let smsTemplateRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SMSTemplateRequest.self, forKey: .smsTemplateRequest)
        smsTemplateRequest = smsTemplateRequestDecoded
    }
}

extension CreateSmsTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateSmsTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateSmsTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateSmsTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.CreateTemplateMessageBody = try responseDecoder.decode(responseBody: data)
                self.createTemplateMessageBody = output
            } else {
                self.createTemplateMessageBody = nil
            }
        } else {
            self.createTemplateMessageBody = nil
        }
    }
}

public struct CreateSmsTemplateOutputResponse: Swift.Equatable {
    /// Provides information about a request to create a message template.
    /// This member is required.
    public var createTemplateMessageBody: PinpointClientTypes.CreateTemplateMessageBody?

    public init (
        createTemplateMessageBody: PinpointClientTypes.CreateTemplateMessageBody? = nil
    )
    {
        self.createTemplateMessageBody = createTemplateMessageBody
    }
}

struct CreateSmsTemplateOutputResponseBody: Swift.Equatable {
    let createTemplateMessageBody: PinpointClientTypes.CreateTemplateMessageBody?
}

extension CreateSmsTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTemplateMessageBody = "CreateTemplateMessageBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createTemplateMessageBodyDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CreateTemplateMessageBody.self, forKey: .createTemplateMessageBody)
        createTemplateMessageBody = createTemplateMessageBodyDecoded
    }
}

extension PinpointClientTypes.CreateTemplateMessageBody: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case message = "Message"
        case requestID = "RequestID"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let requestID = self.requestID {
            try encodeContainer.encode(requestID, forKey: .requestID)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestID)
        requestID = requestIDDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about a request to create a message template.
    public struct CreateTemplateMessageBody: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the message template that was created.
        public var arn: Swift.String?
        /// The message that's returned from the API for the request to create the message template.
        public var message: Swift.String?
        /// The unique identifier for the request to create the message template.
        public var requestID: Swift.String?

        public init (
            arn: Swift.String? = nil,
            message: Swift.String? = nil,
            requestID: Swift.String? = nil
        )
        {
            self.arn = arn
            self.message = message
            self.requestID = requestID
        }
    }

}

public struct CreateVoiceTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVoiceTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateVoiceTemplateInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<CreateVoiceTemplateOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let voiceTemplateRequest = input.operationInput.voiceTemplateRequest {
                let voiceTemplateRequestdata = try encoder.encode(voiceTemplateRequest)
                let voiceTemplateRequestbody = ClientRuntime.HttpBody.data(voiceTemplateRequestdata)
                input.builder.withBody(voiceTemplateRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let voiceTemplateRequestdata = "{}".data(using: .utf8)!
                    let voiceTemplateRequestbody = ClientRuntime.HttpBody.data(voiceTemplateRequestdata)
                    input.builder.withBody(voiceTemplateRequestbody)
                }
            }
        } catch let err {
            throw SdkError<CreateVoiceTemplateOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateVoiceTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVoiceTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension CreateVoiceTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case voiceTemplateRequest = "VoiceTemplateRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let voiceTemplateRequest = self.voiceTemplateRequest {
            try encodeContainer.encode(voiceTemplateRequest, forKey: .voiceTemplateRequest)
        }
    }
}

extension CreateVoiceTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v1/templates/\(templateName.urlPercentEncoding())/voice"
    }
}

public struct CreateVoiceTemplateInput: Swift.Equatable {
    /// The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
    /// This member is required.
    public var templateName: Swift.String?
    /// Specifies the content and settings for a message template that can be used in messages that are sent through the voice channel.
    /// This member is required.
    public var voiceTemplateRequest: PinpointClientTypes.VoiceTemplateRequest?

    public init (
        templateName: Swift.String? = nil,
        voiceTemplateRequest: PinpointClientTypes.VoiceTemplateRequest? = nil
    )
    {
        self.templateName = templateName
        self.voiceTemplateRequest = voiceTemplateRequest
    }
}

struct CreateVoiceTemplateInputBody: Swift.Equatable {
    let voiceTemplateRequest: PinpointClientTypes.VoiceTemplateRequest?
}

extension CreateVoiceTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case voiceTemplateRequest = "VoiceTemplateRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let voiceTemplateRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.VoiceTemplateRequest.self, forKey: .voiceTemplateRequest)
        voiceTemplateRequest = voiceTemplateRequestDecoded
    }
}

extension CreateVoiceTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateVoiceTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateVoiceTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateVoiceTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.CreateTemplateMessageBody = try responseDecoder.decode(responseBody: data)
                self.createTemplateMessageBody = output
            } else {
                self.createTemplateMessageBody = nil
            }
        } else {
            self.createTemplateMessageBody = nil
        }
    }
}

public struct CreateVoiceTemplateOutputResponse: Swift.Equatable {
    /// Provides information about a request to create a message template.
    /// This member is required.
    public var createTemplateMessageBody: PinpointClientTypes.CreateTemplateMessageBody?

    public init (
        createTemplateMessageBody: PinpointClientTypes.CreateTemplateMessageBody? = nil
    )
    {
        self.createTemplateMessageBody = createTemplateMessageBody
    }
}

struct CreateVoiceTemplateOutputResponseBody: Swift.Equatable {
    let createTemplateMessageBody: PinpointClientTypes.CreateTemplateMessageBody?
}

extension CreateVoiceTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTemplateMessageBody = "CreateTemplateMessageBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createTemplateMessageBodyDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CreateTemplateMessageBody.self, forKey: .createTemplateMessageBody)
        createTemplateMessageBody = createTemplateMessageBodyDecoded
    }
}

extension PinpointClientTypes.CustomDeliveryConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryUri = "DeliveryUri"
        case endpointTypes = "EndpointTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryUri = self.deliveryUri {
            try encodeContainer.encode(deliveryUri, forKey: .deliveryUri)
        }
        if let endpointTypes = endpointTypes {
            var endpointTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .endpointTypes)
            for __endpointtypeselement0 in endpointTypes {
                try endpointTypesContainer.encode(__endpointtypeselement0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryUri)
        deliveryUri = deliveryUriDecoded
        let endpointTypesContainer = try containerValues.decodeIfPresent([PinpointClientTypes.__EndpointTypesElement?].self, forKey: .endpointTypes)
        var endpointTypesDecoded0:[PinpointClientTypes.__EndpointTypesElement]? = nil
        if let endpointTypesContainer = endpointTypesContainer {
            endpointTypesDecoded0 = [PinpointClientTypes.__EndpointTypesElement]()
            for string0 in endpointTypesContainer {
                if let string0 = string0 {
                    endpointTypesDecoded0?.append(string0)
                }
            }
        }
        endpointTypes = endpointTypesDecoded0
    }
}

extension PinpointClientTypes {
    /// Specifies the delivery configuration settings for sending a campaign or campaign treatment through a custom channel. This object is required if you use the CampaignCustomMessage object to define the message to send for the campaign or campaign treatment.
    public struct CustomDeliveryConfiguration: Swift.Equatable {
        /// The destination to send the campaign or treatment to. This value can be one of the following:
        ///
        /// * The name or Amazon Resource Name (ARN) of an AWS Lambda function to invoke to handle delivery of the campaign or treatment.
        ///
        /// * The URL for a web application or service that supports HTTPS and can receive the message. The URL has to be a full URL, including the HTTPS protocol.
        /// This member is required.
        public var deliveryUri: Swift.String?
        /// The types of endpoints to send the campaign or treatment to. Each valid value maps to a type of channel that you can associate with an endpoint by using the ChannelType property of an endpoint.
        public var endpointTypes: [PinpointClientTypes.__EndpointTypesElement]?

        public init (
            deliveryUri: Swift.String? = nil,
            endpointTypes: [PinpointClientTypes.__EndpointTypesElement]? = nil
        )
        {
            self.deliveryUri = deliveryUri
            self.endpointTypes = endpointTypes
        }
    }

}

extension PinpointClientTypes.CustomMessageActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryUri = "DeliveryUri"
        case endpointTypes = "EndpointTypes"
        case messageConfig = "MessageConfig"
        case nextActivity = "NextActivity"
        case templateName = "TemplateName"
        case templateVersion = "TemplateVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryUri = self.deliveryUri {
            try encodeContainer.encode(deliveryUri, forKey: .deliveryUri)
        }
        if let endpointTypes = endpointTypes {
            var endpointTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .endpointTypes)
            for __endpointtypeselement0 in endpointTypes {
                try endpointTypesContainer.encode(__endpointtypeselement0.rawValue)
            }
        }
        if let messageConfig = self.messageConfig {
            try encodeContainer.encode(messageConfig, forKey: .messageConfig)
        }
        if let nextActivity = self.nextActivity {
            try encodeContainer.encode(nextActivity, forKey: .nextActivity)
        }
        if let templateName = self.templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
        if let templateVersion = self.templateVersion {
            try encodeContainer.encode(templateVersion, forKey: .templateVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryUri)
        deliveryUri = deliveryUriDecoded
        let endpointTypesContainer = try containerValues.decodeIfPresent([PinpointClientTypes.__EndpointTypesElement?].self, forKey: .endpointTypes)
        var endpointTypesDecoded0:[PinpointClientTypes.__EndpointTypesElement]? = nil
        if let endpointTypesContainer = endpointTypesContainer {
            endpointTypesDecoded0 = [PinpointClientTypes.__EndpointTypesElement]()
            for string0 in endpointTypesContainer {
                if let string0 = string0 {
                    endpointTypesDecoded0?.append(string0)
                }
            }
        }
        endpointTypes = endpointTypesDecoded0
        let messageConfigDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneyCustomMessage.self, forKey: .messageConfig)
        messageConfig = messageConfigDecoded
        let nextActivityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextActivity)
        nextActivity = nextActivityDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let templateVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateVersion)
        templateVersion = templateVersionDecoded
    }
}

extension PinpointClientTypes {
    /// The settings for a custom message activity. This type of activity calls an AWS Lambda function or web hook that sends messages to participants.
    public struct CustomMessageActivity: Swift.Equatable {
        /// The destination to send the campaign or treatment to. This value can be one of the following:
        ///
        /// * The name or Amazon Resource Name (ARN) of an AWS Lambda function to invoke to handle delivery of the campaign or treatment.
        ///
        /// * The URL for a web application or service that supports HTTPS and can receive the message. The URL has to be a full URL, including the HTTPS protocol.
        public var deliveryUri: Swift.String?
        /// The types of endpoints to send the custom message to. Each valid value maps to a type of channel that you can associate with an endpoint by using the ChannelType property of an endpoint.
        public var endpointTypes: [PinpointClientTypes.__EndpointTypesElement]?
        /// Specifies the message data included in a custom channel message that's sent to participants in a journey.
        public var messageConfig: PinpointClientTypes.JourneyCustomMessage?
        /// The unique identifier for the next activity to perform, after Amazon Pinpoint calls the AWS Lambda function or web hook.
        public var nextActivity: Swift.String?
        /// The name of the custom message template to use for the message. If specified, this value must match the name of an existing message template.
        public var templateName: Swift.String?
        /// The unique identifier for the version of the message template to use for the message. If specified, this value must match the identifier for an existing template version. To retrieve a list of versions and version identifiers for a template, use the Template Versions resource. If you don't specify a value for this property, Amazon Pinpoint uses the active version of the template. The active version is typically the version of a template that's been most recently reviewed and approved for use, depending on your workflow. It isn't necessarily the latest version of a template.
        public var templateVersion: Swift.String?

        public init (
            deliveryUri: Swift.String? = nil,
            endpointTypes: [PinpointClientTypes.__EndpointTypesElement]? = nil,
            messageConfig: PinpointClientTypes.JourneyCustomMessage? = nil,
            nextActivity: Swift.String? = nil,
            templateName: Swift.String? = nil,
            templateVersion: Swift.String? = nil
        )
        {
            self.deliveryUri = deliveryUri
            self.endpointTypes = endpointTypes
            self.messageConfig = messageConfig
            self.nextActivity = nextActivity
            self.templateName = templateName
            self.templateVersion = templateVersion
        }
    }

}

extension PinpointClientTypes {
    public enum DayOfWeek: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case friday
        case monday
        case saturday
        case sunday
        case thursday
        case tuesday
        case wednesday
        case sdkUnknown(Swift.String)

        public static var allCases: [DayOfWeek] {
            return [
                .friday,
                .monday,
                .saturday,
                .sunday,
                .thursday,
                .tuesday,
                .wednesday,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .friday: return "FRIDAY"
            case .monday: return "MONDAY"
            case .saturday: return "SATURDAY"
            case .sunday: return "SUNDAY"
            case .thursday: return "THURSDAY"
            case .tuesday: return "TUESDAY"
            case .wednesday: return "WEDNESDAY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DayOfWeek(rawValue: rawValue) ?? DayOfWeek.sdkUnknown(rawValue)
        }
    }
}

extension PinpointClientTypes.DefaultButtonConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backgroundColor = "BackgroundColor"
        case borderRadius = "BorderRadius"
        case buttonAction = "ButtonAction"
        case link = "Link"
        case text = "Text"
        case textColor = "TextColor"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backgroundColor = self.backgroundColor {
            try encodeContainer.encode(backgroundColor, forKey: .backgroundColor)
        }
        if let borderRadius = self.borderRadius {
            try encodeContainer.encode(borderRadius, forKey: .borderRadius)
        }
        if let buttonAction = self.buttonAction {
            try encodeContainer.encode(buttonAction.rawValue, forKey: .buttonAction)
        }
        if let link = self.link {
            try encodeContainer.encode(link, forKey: .link)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
        if let textColor = self.textColor {
            try encodeContainer.encode(textColor, forKey: .textColor)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backgroundColorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backgroundColor)
        backgroundColor = backgroundColorDecoded
        let borderRadiusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .borderRadius)
        borderRadius = borderRadiusDecoded
        let buttonActionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ButtonAction.self, forKey: .buttonAction)
        buttonAction = buttonActionDecoded
        let linkDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .link)
        link = linkDecoded
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let textColorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .textColor)
        textColor = textColorDecoded
    }
}

extension PinpointClientTypes {
    /// Default button configuration.
    public struct DefaultButtonConfiguration: Swift.Equatable {
        /// The background color of the button.
        public var backgroundColor: Swift.String?
        /// The border radius of the button.
        public var borderRadius: Swift.Int?
        /// Action triggered by the button.
        /// This member is required.
        public var buttonAction: PinpointClientTypes.ButtonAction?
        /// Button destination.
        public var link: Swift.String?
        /// Button text.
        /// This member is required.
        public var text: Swift.String?
        /// The text color of the button.
        public var textColor: Swift.String?

        public init (
            backgroundColor: Swift.String? = nil,
            borderRadius: Swift.Int? = nil,
            buttonAction: PinpointClientTypes.ButtonAction? = nil,
            link: Swift.String? = nil,
            text: Swift.String? = nil,
            textColor: Swift.String? = nil
        )
        {
            self.backgroundColor = backgroundColor
            self.borderRadius = borderRadius
            self.buttonAction = buttonAction
            self.link = link
            self.text = text
            self.textColor = textColor
        }
    }

}

extension PinpointClientTypes.DefaultMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
        case substitutions = "Substitutions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let substitutions = substitutions {
            var substitutionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .substitutions)
            for (dictKey0, mapOfListOf__string0) in substitutions {
                var mapOfListOf__string0Container = substitutionsContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for __string1 in mapOfListOf__string0 {
                    try mapOfListOf__string0Container.encode(__string1)
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let substitutionsContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .substitutions)
        var substitutionsDecoded0: [Swift.String:[Swift.String]]? = nil
        if let substitutionsContainer = substitutionsContainer {
            substitutionsDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listof__string0) in substitutionsContainer {
                var listof__string0Decoded0: [Swift.String]? = nil
                if let listof__string0 = listof__string0 {
                    listof__string0Decoded0 = [Swift.String]()
                    for string1 in listof__string0 {
                        if let string1 = string1 {
                            listof__string0Decoded0?.append(string1)
                        }
                    }
                }
                substitutionsDecoded0?[key0] = listof__string0Decoded0
            }
        }
        substitutions = substitutionsDecoded0
    }
}

extension PinpointClientTypes {
    /// Specifies the default message for all channels.
    public struct DefaultMessage: Swift.Equatable {
        /// The default body of the message.
        public var body: Swift.String?
        /// The default message variables to use in the message. You can override these default variables with individual address variables.
        public var substitutions: [Swift.String:[Swift.String]]?

        public init (
            body: Swift.String? = nil,
            substitutions: [Swift.String:[Swift.String]]? = nil
        )
        {
            self.body = body
            self.substitutions = substitutions
        }
    }

}

extension PinpointClientTypes.DefaultPushNotificationMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case body = "Body"
        case data = "Data"
        case silentPush = "SilentPush"
        case substitutions = "Substitutions"
        case title = "Title"
        case url = "Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let data = data {
            var dataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .data)
            for (dictKey0, mapOf__string0) in data {
                try dataContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let silentPush = self.silentPush {
            try encodeContainer.encode(silentPush, forKey: .silentPush)
        }
        if let substitutions = substitutions {
            var substitutionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .substitutions)
            for (dictKey0, mapOfListOf__string0) in substitutions {
                var mapOfListOf__string0Container = substitutionsContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for __string1 in mapOfListOf__string0 {
                    try mapOfListOf__string0Container.encode(__string1)
                }
            }
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Action.self, forKey: .action)
        action = actionDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let dataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .data)
        var dataDecoded0: [Swift.String:Swift.String]? = nil
        if let dataContainer = dataContainer {
            dataDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in dataContainer {
                if let __string0 = __string0 {
                    dataDecoded0?[key0] = __string0
                }
            }
        }
        data = dataDecoded0
        let silentPushDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .silentPush)
        silentPush = silentPushDecoded
        let substitutionsContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .substitutions)
        var substitutionsDecoded0: [Swift.String:[Swift.String]]? = nil
        if let substitutionsContainer = substitutionsContainer {
            substitutionsDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listof__string0) in substitutionsContainer {
                var listof__string0Decoded0: [Swift.String]? = nil
                if let listof__string0 = listof__string0 {
                    listof__string0Decoded0 = [Swift.String]()
                    for string1 in listof__string0 {
                        if let string1 = string1 {
                            listof__string0Decoded0?.append(string1)
                        }
                    }
                }
                substitutionsDecoded0?[key0] = listof__string0Decoded0
            }
        }
        substitutions = substitutionsDecoded0
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the default settings and content for a push notification that's sent directly to an endpoint.
    public struct DefaultPushNotificationMessage: Swift.Equatable {
        /// The default action to occur if a recipient taps the push notification. Valid values are:
        ///
        /// * OPEN_APP - Your app opens or it becomes the foreground app if it was sent to the background. This is the default action.
        ///
        /// * DEEP_LINK - Your app opens and displays a designated user interface in the app. This setting uses the deep-linking features of the iOS and Android platforms.
        ///
        /// * URL - The default mobile browser on the recipient's device opens and loads the web page at a URL that you specify.
        public var action: PinpointClientTypes.Action?
        /// The default body of the notification message.
        public var body: Swift.String?
        /// The JSON data payload to use for the default push notification, if the notification is a silent push notification. This payload is added to the data.pinpoint.jsonBody object of the notification.
        public var data: [Swift.String:Swift.String]?
        /// Specifies whether the default notification is a silent push notification, which is a push notification that doesn't display on a recipient's device. Silent push notifications can be used for cases such as updating an app's configuration or delivering messages to an in-app notification center.
        public var silentPush: Swift.Bool?
        /// The default message variables to use in the notification message. You can override the default variables with individual address variables.
        public var substitutions: [Swift.String:[Swift.String]]?
        /// The default title to display above the notification message on a recipient's device.
        public var title: Swift.String?
        /// The default URL to open in a recipient's default mobile browser, if a recipient taps the push notification and the value of the Action property is URL.
        public var url: Swift.String?

        public init (
            action: PinpointClientTypes.Action? = nil,
            body: Swift.String? = nil,
            data: [Swift.String:Swift.String]? = nil,
            silentPush: Swift.Bool? = nil,
            substitutions: [Swift.String:[Swift.String]]? = nil,
            title: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.action = action
            self.body = body
            self.data = data
            self.silentPush = silentPush
            self.substitutions = substitutions
            self.title = title
            self.url = url
        }
    }

}

extension PinpointClientTypes.DefaultPushNotificationTemplate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case body = "Body"
        case sound = "Sound"
        case title = "Title"
        case url = "Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let sound = self.sound {
            try encodeContainer.encode(sound, forKey: .sound)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Action.self, forKey: .action)
        action = actionDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let soundDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sound)
        sound = soundDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the default settings and content for a message template that can be used in messages that are sent through a push notification channel.
    public struct DefaultPushNotificationTemplate: Swift.Equatable {
        /// The action to occur if a recipient taps a push notification that's based on the message template. Valid values are:
        ///
        /// * OPEN_APP - Your app opens or it becomes the foreground app if it was sent to the background. This is the default action.
        ///
        /// * DEEP_LINK - Your app opens and displays a designated user interface in the app. This setting uses the deep-linking features of the iOS and Android platforms.
        ///
        /// * URL - The default mobile browser on the recipient's device opens and loads the web page at a URL that you specify.
        public var action: PinpointClientTypes.Action?
        /// The message body to use in push notifications that are based on the message template.
        public var body: Swift.String?
        /// The sound to play when a recipient receives a push notification that's based on the message template. You can use the default stream or specify the file name of a sound resource that's bundled in your app. On an Android platform, the sound file must reside in /res/raw/. For an iOS platform, this value is the key for the name of a sound file in your app's main bundle or the Library/Sounds folder in your app's data container. If the sound file can't be found or you specify default for the value, the system plays the default alert sound.
        public var sound: Swift.String?
        /// The title to use in push notifications that are based on the message template. This title appears above the notification message on a recipient's device.
        public var title: Swift.String?
        /// The URL to open in a recipient's default mobile browser, if a recipient taps a push notification that's based on the message template and the value of the Action property is URL.
        public var url: Swift.String?

        public init (
            action: PinpointClientTypes.Action? = nil,
            body: Swift.String? = nil,
            sound: Swift.String? = nil,
            title: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.action = action
            self.body = body
            self.sound = sound
            self.title = title
            self.url = url
        }
    }

}

extension DeleteAdmChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/adm"
    }
}

public struct DeleteAdmChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct DeleteAdmChannelInputBody: Swift.Equatable {
}

extension DeleteAdmChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteAdmChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteAdmChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteAdmChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAdmChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.ADMChannelResponse = try responseDecoder.decode(responseBody: data)
                self.admChannelResponse = output
            } else {
                self.admChannelResponse = nil
            }
        } else {
            self.admChannelResponse = nil
        }
    }
}

public struct DeleteAdmChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the ADM (Amazon Device Messaging) channel for an application.
    /// This member is required.
    public var admChannelResponse: PinpointClientTypes.ADMChannelResponse?

    public init (
        admChannelResponse: PinpointClientTypes.ADMChannelResponse? = nil
    )
    {
        self.admChannelResponse = admChannelResponse
    }
}

struct DeleteAdmChannelOutputResponseBody: Swift.Equatable {
    let admChannelResponse: PinpointClientTypes.ADMChannelResponse?
}

extension DeleteAdmChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case admChannelResponse = "ADMChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let admChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ADMChannelResponse.self, forKey: .admChannelResponse)
        admChannelResponse = admChannelResponseDecoded
    }
}

extension DeleteApnsChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/apns"
    }
}

public struct DeleteApnsChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct DeleteApnsChannelInputBody: Swift.Equatable {
}

extension DeleteApnsChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteApnsChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteApnsChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteApnsChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteApnsChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.APNSChannelResponse = try responseDecoder.decode(responseBody: data)
                self.apnsChannelResponse = output
            } else {
                self.apnsChannelResponse = nil
            }
        } else {
            self.apnsChannelResponse = nil
        }
    }
}

public struct DeleteApnsChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the APNs (Apple Push Notification service) channel for an application.
    /// This member is required.
    public var apnsChannelResponse: PinpointClientTypes.APNSChannelResponse?

    public init (
        apnsChannelResponse: PinpointClientTypes.APNSChannelResponse? = nil
    )
    {
        self.apnsChannelResponse = apnsChannelResponse
    }
}

struct DeleteApnsChannelOutputResponseBody: Swift.Equatable {
    let apnsChannelResponse: PinpointClientTypes.APNSChannelResponse?
}

extension DeleteApnsChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apnsChannelResponse = "APNSChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apnsChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.APNSChannelResponse.self, forKey: .apnsChannelResponse)
        apnsChannelResponse = apnsChannelResponseDecoded
    }
}

extension DeleteApnsSandboxChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/apns_sandbox"
    }
}

public struct DeleteApnsSandboxChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct DeleteApnsSandboxChannelInputBody: Swift.Equatable {
}

extension DeleteApnsSandboxChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteApnsSandboxChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteApnsSandboxChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteApnsSandboxChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteApnsSandboxChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.APNSSandboxChannelResponse = try responseDecoder.decode(responseBody: data)
                self.apnsSandboxChannelResponse = output
            } else {
                self.apnsSandboxChannelResponse = nil
            }
        } else {
            self.apnsSandboxChannelResponse = nil
        }
    }
}

public struct DeleteApnsSandboxChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the APNs (Apple Push Notification service) sandbox channel for an application.
    /// This member is required.
    public var apnsSandboxChannelResponse: PinpointClientTypes.APNSSandboxChannelResponse?

    public init (
        apnsSandboxChannelResponse: PinpointClientTypes.APNSSandboxChannelResponse? = nil
    )
    {
        self.apnsSandboxChannelResponse = apnsSandboxChannelResponse
    }
}

struct DeleteApnsSandboxChannelOutputResponseBody: Swift.Equatable {
    let apnsSandboxChannelResponse: PinpointClientTypes.APNSSandboxChannelResponse?
}

extension DeleteApnsSandboxChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apnsSandboxChannelResponse = "APNSSandboxChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apnsSandboxChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.APNSSandboxChannelResponse.self, forKey: .apnsSandboxChannelResponse)
        apnsSandboxChannelResponse = apnsSandboxChannelResponseDecoded
    }
}

extension DeleteApnsVoipChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/apns_voip"
    }
}

public struct DeleteApnsVoipChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct DeleteApnsVoipChannelInputBody: Swift.Equatable {
}

extension DeleteApnsVoipChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteApnsVoipChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteApnsVoipChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteApnsVoipChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteApnsVoipChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.APNSVoipChannelResponse = try responseDecoder.decode(responseBody: data)
                self.apnsVoipChannelResponse = output
            } else {
                self.apnsVoipChannelResponse = nil
            }
        } else {
            self.apnsVoipChannelResponse = nil
        }
    }
}

public struct DeleteApnsVoipChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the APNs (Apple Push Notification service) VoIP channel for an application.
    /// This member is required.
    public var apnsVoipChannelResponse: PinpointClientTypes.APNSVoipChannelResponse?

    public init (
        apnsVoipChannelResponse: PinpointClientTypes.APNSVoipChannelResponse? = nil
    )
    {
        self.apnsVoipChannelResponse = apnsVoipChannelResponse
    }
}

struct DeleteApnsVoipChannelOutputResponseBody: Swift.Equatable {
    let apnsVoipChannelResponse: PinpointClientTypes.APNSVoipChannelResponse?
}

extension DeleteApnsVoipChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apnsVoipChannelResponse = "APNSVoipChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apnsVoipChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.APNSVoipChannelResponse.self, forKey: .apnsVoipChannelResponse)
        apnsVoipChannelResponse = apnsVoipChannelResponseDecoded
    }
}

extension DeleteApnsVoipSandboxChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/apns_voip_sandbox"
    }
}

public struct DeleteApnsVoipSandboxChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct DeleteApnsVoipSandboxChannelInputBody: Swift.Equatable {
}

extension DeleteApnsVoipSandboxChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteApnsVoipSandboxChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteApnsVoipSandboxChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteApnsVoipSandboxChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteApnsVoipSandboxChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.APNSVoipSandboxChannelResponse = try responseDecoder.decode(responseBody: data)
                self.apnsVoipSandboxChannelResponse = output
            } else {
                self.apnsVoipSandboxChannelResponse = nil
            }
        } else {
            self.apnsVoipSandboxChannelResponse = nil
        }
    }
}

public struct DeleteApnsVoipSandboxChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the APNs (Apple Push Notification service) VoIP sandbox channel for an application.
    /// This member is required.
    public var apnsVoipSandboxChannelResponse: PinpointClientTypes.APNSVoipSandboxChannelResponse?

    public init (
        apnsVoipSandboxChannelResponse: PinpointClientTypes.APNSVoipSandboxChannelResponse? = nil
    )
    {
        self.apnsVoipSandboxChannelResponse = apnsVoipSandboxChannelResponse
    }
}

struct DeleteApnsVoipSandboxChannelOutputResponseBody: Swift.Equatable {
    let apnsVoipSandboxChannelResponse: PinpointClientTypes.APNSVoipSandboxChannelResponse?
}

extension DeleteApnsVoipSandboxChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apnsVoipSandboxChannelResponse = "APNSVoipSandboxChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apnsVoipSandboxChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.APNSVoipSandboxChannelResponse.self, forKey: .apnsVoipSandboxChannelResponse)
        apnsVoipSandboxChannelResponse = apnsVoipSandboxChannelResponseDecoded
    }
}

extension DeleteAppInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())"
    }
}

public struct DeleteAppInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct DeleteAppInputBody: Swift.Equatable {
}

extension DeleteAppInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteAppOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteAppOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteAppOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAppOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.ApplicationResponse = try responseDecoder.decode(responseBody: data)
                self.applicationResponse = output
            } else {
                self.applicationResponse = nil
            }
        } else {
            self.applicationResponse = nil
        }
    }
}

public struct DeleteAppOutputResponse: Swift.Equatable {
    /// Provides information about an application.
    /// This member is required.
    public var applicationResponse: PinpointClientTypes.ApplicationResponse?

    public init (
        applicationResponse: PinpointClientTypes.ApplicationResponse? = nil
    )
    {
        self.applicationResponse = applicationResponse
    }
}

struct DeleteAppOutputResponseBody: Swift.Equatable {
    let applicationResponse: PinpointClientTypes.ApplicationResponse?
}

extension DeleteAppOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationResponse = "ApplicationResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ApplicationResponse.self, forKey: .applicationResponse)
        applicationResponse = applicationResponseDecoded
    }
}

extension DeleteBaiduChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/baidu"
    }
}

public struct DeleteBaiduChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct DeleteBaiduChannelInputBody: Swift.Equatable {
}

extension DeleteBaiduChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBaiduChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteBaiduChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteBaiduChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBaiduChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.BaiduChannelResponse = try responseDecoder.decode(responseBody: data)
                self.baiduChannelResponse = output
            } else {
                self.baiduChannelResponse = nil
            }
        } else {
            self.baiduChannelResponse = nil
        }
    }
}

public struct DeleteBaiduChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the Baidu (Baidu Cloud Push) channel for an application.
    /// This member is required.
    public var baiduChannelResponse: PinpointClientTypes.BaiduChannelResponse?

    public init (
        baiduChannelResponse: PinpointClientTypes.BaiduChannelResponse? = nil
    )
    {
        self.baiduChannelResponse = baiduChannelResponse
    }
}

struct DeleteBaiduChannelOutputResponseBody: Swift.Equatable {
    let baiduChannelResponse: PinpointClientTypes.BaiduChannelResponse?
}

extension DeleteBaiduChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baiduChannelResponse = "BaiduChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let baiduChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.BaiduChannelResponse.self, forKey: .baiduChannelResponse)
        baiduChannelResponse = baiduChannelResponseDecoded
    }
}

extension DeleteCampaignInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let campaignId = campaignId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/campaigns/\(campaignId.urlPercentEncoding())"
    }
}

public struct DeleteCampaignInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the campaign.
    /// This member is required.
    public var campaignId: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        campaignId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.campaignId = campaignId
    }
}

struct DeleteCampaignInputBody: Swift.Equatable {
}

extension DeleteCampaignInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteCampaignOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteCampaignOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteCampaignOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCampaignOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.CampaignResponse = try responseDecoder.decode(responseBody: data)
                self.campaignResponse = output
            } else {
                self.campaignResponse = nil
            }
        } else {
            self.campaignResponse = nil
        }
    }
}

public struct DeleteCampaignOutputResponse: Swift.Equatable {
    /// Provides information about the status, configuration, and other settings for a campaign.
    /// This member is required.
    public var campaignResponse: PinpointClientTypes.CampaignResponse?

    public init (
        campaignResponse: PinpointClientTypes.CampaignResponse? = nil
    )
    {
        self.campaignResponse = campaignResponse
    }
}

struct DeleteCampaignOutputResponseBody: Swift.Equatable {
    let campaignResponse: PinpointClientTypes.CampaignResponse?
}

extension DeleteCampaignOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case campaignResponse = "CampaignResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let campaignResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignResponse.self, forKey: .campaignResponse)
        campaignResponse = campaignResponseDecoded
    }
}

extension DeleteEmailChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/email"
    }
}

public struct DeleteEmailChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct DeleteEmailChannelInputBody: Swift.Equatable {
}

extension DeleteEmailChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteEmailChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteEmailChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteEmailChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteEmailChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.EmailChannelResponse = try responseDecoder.decode(responseBody: data)
                self.emailChannelResponse = output
            } else {
                self.emailChannelResponse = nil
            }
        } else {
            self.emailChannelResponse = nil
        }
    }
}

public struct DeleteEmailChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the email channel for an application.
    /// This member is required.
    public var emailChannelResponse: PinpointClientTypes.EmailChannelResponse?

    public init (
        emailChannelResponse: PinpointClientTypes.EmailChannelResponse? = nil
    )
    {
        self.emailChannelResponse = emailChannelResponse
    }
}

struct DeleteEmailChannelOutputResponseBody: Swift.Equatable {
    let emailChannelResponse: PinpointClientTypes.EmailChannelResponse?
}

extension DeleteEmailChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailChannelResponse = "EmailChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EmailChannelResponse.self, forKey: .emailChannelResponse)
        emailChannelResponse = emailChannelResponseDecoded
    }
}

extension DeleteEmailTemplateInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let version = version {
                let versionQueryItem = ClientRuntime.URLQueryItem(name: "version".urlPercentEncoding(), value: Swift.String(version).urlPercentEncoding())
                items.append(versionQueryItem)
            }
            return items
        }
    }
}

extension DeleteEmailTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v1/templates/\(templateName.urlPercentEncoding())/email"
    }
}

public struct DeleteEmailTemplateInput: Swift.Equatable {
    /// The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
    /// This member is required.
    public var templateName: Swift.String?
    /// The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following:
    ///
    /// * For a get operation, retrieves information about the active version of the template.
    ///
    /// * For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.
    ///
    /// * For a delete operation, deletes the template, including all versions of the template.
    public var version: Swift.String?

    public init (
        templateName: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.templateName = templateName
        self.version = version
    }
}

struct DeleteEmailTemplateInputBody: Swift.Equatable {
}

extension DeleteEmailTemplateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.MessageBody = try responseDecoder.decode(responseBody: data)
                self.messageBody = output
            } else {
                self.messageBody = nil
            }
        } else {
            self.messageBody = nil
        }
    }
}

public struct DeleteEmailTemplateOutputResponse: Swift.Equatable {
    /// Provides information about an API request or response.
    /// This member is required.
    public var messageBody: PinpointClientTypes.MessageBody?

    public init (
        messageBody: PinpointClientTypes.MessageBody? = nil
    )
    {
        self.messageBody = messageBody
    }
}

struct DeleteEmailTemplateOutputResponseBody: Swift.Equatable {
    let messageBody: PinpointClientTypes.MessageBody?
}

extension DeleteEmailTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageBody = "MessageBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageBodyDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageBody.self, forKey: .messageBody)
        messageBody = messageBodyDecoded
    }
}

extension DeleteEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let endpointId = endpointId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/endpoints/\(endpointId.urlPercentEncoding())"
    }
}

public struct DeleteEndpointInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the endpoint.
    /// This member is required.
    public var endpointId: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        endpointId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.endpointId = endpointId
    }
}

struct DeleteEndpointInputBody: Swift.Equatable {
}

extension DeleteEndpointInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteEndpointOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.EndpointResponse = try responseDecoder.decode(responseBody: data)
                self.endpointResponse = output
            } else {
                self.endpointResponse = nil
            }
        } else {
            self.endpointResponse = nil
        }
    }
}

public struct DeleteEndpointOutputResponse: Swift.Equatable {
    /// Provides information about the channel type and other settings for an endpoint.
    /// This member is required.
    public var endpointResponse: PinpointClientTypes.EndpointResponse?

    public init (
        endpointResponse: PinpointClientTypes.EndpointResponse? = nil
    )
    {
        self.endpointResponse = endpointResponse
    }
}

struct DeleteEndpointOutputResponseBody: Swift.Equatable {
    let endpointResponse: PinpointClientTypes.EndpointResponse?
}

extension DeleteEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointResponse = "EndpointResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EndpointResponse.self, forKey: .endpointResponse)
        endpointResponse = endpointResponseDecoded
    }
}

extension DeleteEventStreamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/eventstream"
    }
}

public struct DeleteEventStreamInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct DeleteEventStreamInputBody: Swift.Equatable {
}

extension DeleteEventStreamInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteEventStreamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteEventStreamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteEventStreamOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteEventStreamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.EventStream = try responseDecoder.decode(responseBody: data)
                self.eventStream = output
            } else {
                self.eventStream = nil
            }
        } else {
            self.eventStream = nil
        }
    }
}

public struct DeleteEventStreamOutputResponse: Swift.Equatable {
    /// Specifies settings for publishing event data to an Amazon Kinesis data stream or an Amazon Kinesis Data Firehose delivery stream.
    /// This member is required.
    public var eventStream: PinpointClientTypes.EventStream?

    public init (
        eventStream: PinpointClientTypes.EventStream? = nil
    )
    {
        self.eventStream = eventStream
    }
}

struct DeleteEventStreamOutputResponseBody: Swift.Equatable {
    let eventStream: PinpointClientTypes.EventStream?
}

extension DeleteEventStreamOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventStream = "EventStream"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventStreamDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EventStream.self, forKey: .eventStream)
        eventStream = eventStreamDecoded
    }
}

extension DeleteGcmChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/gcm"
    }
}

public struct DeleteGcmChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct DeleteGcmChannelInputBody: Swift.Equatable {
}

extension DeleteGcmChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteGcmChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteGcmChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteGcmChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteGcmChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.GCMChannelResponse = try responseDecoder.decode(responseBody: data)
                self.gcmChannelResponse = output
            } else {
                self.gcmChannelResponse = nil
            }
        } else {
            self.gcmChannelResponse = nil
        }
    }
}

public struct DeleteGcmChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the GCM channel for an application. The GCM channel enables Amazon Pinpoint to send push notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service.
    /// This member is required.
    public var gcmChannelResponse: PinpointClientTypes.GCMChannelResponse?

    public init (
        gcmChannelResponse: PinpointClientTypes.GCMChannelResponse? = nil
    )
    {
        self.gcmChannelResponse = gcmChannelResponse
    }
}

struct DeleteGcmChannelOutputResponseBody: Swift.Equatable {
    let gcmChannelResponse: PinpointClientTypes.GCMChannelResponse?
}

extension DeleteGcmChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gcmChannelResponse = "GCMChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gcmChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.GCMChannelResponse.self, forKey: .gcmChannelResponse)
        gcmChannelResponse = gcmChannelResponseDecoded
    }
}

extension DeleteInAppTemplateInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let version = version {
                let versionQueryItem = ClientRuntime.URLQueryItem(name: "version".urlPercentEncoding(), value: Swift.String(version).urlPercentEncoding())
                items.append(versionQueryItem)
            }
            return items
        }
    }
}

extension DeleteInAppTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v1/templates/\(templateName.urlPercentEncoding())/inapp"
    }
}

public struct DeleteInAppTemplateInput: Swift.Equatable {
    /// The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
    /// This member is required.
    public var templateName: Swift.String?
    /// The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following:
    ///
    /// * For a get operation, retrieves information about the active version of the template.
    ///
    /// * For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.
    ///
    /// * For a delete operation, deletes the template, including all versions of the template.
    public var version: Swift.String?

    public init (
        templateName: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.templateName = templateName
        self.version = version
    }
}

struct DeleteInAppTemplateInputBody: Swift.Equatable {
}

extension DeleteInAppTemplateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteInAppTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteInAppTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteInAppTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteInAppTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.MessageBody = try responseDecoder.decode(responseBody: data)
                self.messageBody = output
            } else {
                self.messageBody = nil
            }
        } else {
            self.messageBody = nil
        }
    }
}

public struct DeleteInAppTemplateOutputResponse: Swift.Equatable {
    /// Provides information about an API request or response.
    /// This member is required.
    public var messageBody: PinpointClientTypes.MessageBody?

    public init (
        messageBody: PinpointClientTypes.MessageBody? = nil
    )
    {
        self.messageBody = messageBody
    }
}

struct DeleteInAppTemplateOutputResponseBody: Swift.Equatable {
    let messageBody: PinpointClientTypes.MessageBody?
}

extension DeleteInAppTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageBody = "MessageBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageBodyDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageBody.self, forKey: .messageBody)
        messageBody = messageBodyDecoded
    }
}

extension DeleteJourneyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let journeyId = journeyId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/journeys/\(journeyId.urlPercentEncoding())"
    }
}

public struct DeleteJourneyInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the journey.
    /// This member is required.
    public var journeyId: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        journeyId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.journeyId = journeyId
    }
}

struct DeleteJourneyInputBody: Swift.Equatable {
}

extension DeleteJourneyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteJourneyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteJourneyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteJourneyOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteJourneyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.JourneyResponse = try responseDecoder.decode(responseBody: data)
                self.journeyResponse = output
            } else {
                self.journeyResponse = nil
            }
        } else {
            self.journeyResponse = nil
        }
    }
}

public struct DeleteJourneyOutputResponse: Swift.Equatable {
    /// Provides information about the status, configuration, and other settings for a journey.
    /// This member is required.
    public var journeyResponse: PinpointClientTypes.JourneyResponse?

    public init (
        journeyResponse: PinpointClientTypes.JourneyResponse? = nil
    )
    {
        self.journeyResponse = journeyResponse
    }
}

struct DeleteJourneyOutputResponseBody: Swift.Equatable {
    let journeyResponse: PinpointClientTypes.JourneyResponse?
}

extension DeleteJourneyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case journeyResponse = "JourneyResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let journeyResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneyResponse.self, forKey: .journeyResponse)
        journeyResponse = journeyResponseDecoded
    }
}

extension DeletePushTemplateInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let version = version {
                let versionQueryItem = ClientRuntime.URLQueryItem(name: "version".urlPercentEncoding(), value: Swift.String(version).urlPercentEncoding())
                items.append(versionQueryItem)
            }
            return items
        }
    }
}

extension DeletePushTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v1/templates/\(templateName.urlPercentEncoding())/push"
    }
}

public struct DeletePushTemplateInput: Swift.Equatable {
    /// The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
    /// This member is required.
    public var templateName: Swift.String?
    /// The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following:
    ///
    /// * For a get operation, retrieves information about the active version of the template.
    ///
    /// * For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.
    ///
    /// * For a delete operation, deletes the template, including all versions of the template.
    public var version: Swift.String?

    public init (
        templateName: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.templateName = templateName
        self.version = version
    }
}

struct DeletePushTemplateInputBody: Swift.Equatable {
}

extension DeletePushTemplateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeletePushTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeletePushTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeletePushTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePushTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.MessageBody = try responseDecoder.decode(responseBody: data)
                self.messageBody = output
            } else {
                self.messageBody = nil
            }
        } else {
            self.messageBody = nil
        }
    }
}

public struct DeletePushTemplateOutputResponse: Swift.Equatable {
    /// Provides information about an API request or response.
    /// This member is required.
    public var messageBody: PinpointClientTypes.MessageBody?

    public init (
        messageBody: PinpointClientTypes.MessageBody? = nil
    )
    {
        self.messageBody = messageBody
    }
}

struct DeletePushTemplateOutputResponseBody: Swift.Equatable {
    let messageBody: PinpointClientTypes.MessageBody?
}

extension DeletePushTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageBody = "MessageBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageBodyDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageBody.self, forKey: .messageBody)
        messageBody = messageBodyDecoded
    }
}

extension DeleteRecommenderConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let recommenderId = recommenderId else {
            return nil
        }
        return "/v1/recommenders/\(recommenderId.urlPercentEncoding())"
    }
}

public struct DeleteRecommenderConfigurationInput: Swift.Equatable {
    /// The unique identifier for the recommender model configuration. This identifier is displayed as the Recommender ID on the Amazon Pinpoint console.
    /// This member is required.
    public var recommenderId: Swift.String?

    public init (
        recommenderId: Swift.String? = nil
    )
    {
        self.recommenderId = recommenderId
    }
}

struct DeleteRecommenderConfigurationInputBody: Swift.Equatable {
}

extension DeleteRecommenderConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteRecommenderConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRecommenderConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteRecommenderConfigurationOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRecommenderConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.RecommenderConfigurationResponse = try responseDecoder.decode(responseBody: data)
                self.recommenderConfigurationResponse = output
            } else {
                self.recommenderConfigurationResponse = nil
            }
        } else {
            self.recommenderConfigurationResponse = nil
        }
    }
}

public struct DeleteRecommenderConfigurationOutputResponse: Swift.Equatable {
    /// Provides information about Amazon Pinpoint configuration settings for retrieving and processing data from a recommender model.
    /// This member is required.
    public var recommenderConfigurationResponse: PinpointClientTypes.RecommenderConfigurationResponse?

    public init (
        recommenderConfigurationResponse: PinpointClientTypes.RecommenderConfigurationResponse? = nil
    )
    {
        self.recommenderConfigurationResponse = recommenderConfigurationResponse
    }
}

struct DeleteRecommenderConfigurationOutputResponseBody: Swift.Equatable {
    let recommenderConfigurationResponse: PinpointClientTypes.RecommenderConfigurationResponse?
}

extension DeleteRecommenderConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recommenderConfigurationResponse = "RecommenderConfigurationResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommenderConfigurationResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.RecommenderConfigurationResponse.self, forKey: .recommenderConfigurationResponse)
        recommenderConfigurationResponse = recommenderConfigurationResponseDecoded
    }
}

extension DeleteSegmentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let segmentId = segmentId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/segments/\(segmentId.urlPercentEncoding())"
    }
}

public struct DeleteSegmentInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the segment.
    /// This member is required.
    public var segmentId: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        segmentId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.segmentId = segmentId
    }
}

struct DeleteSegmentInputBody: Swift.Equatable {
}

extension DeleteSegmentInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteSegmentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSegmentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteSegmentOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSegmentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.SegmentResponse = try responseDecoder.decode(responseBody: data)
                self.segmentResponse = output
            } else {
                self.segmentResponse = nil
            }
        } else {
            self.segmentResponse = nil
        }
    }
}

public struct DeleteSegmentOutputResponse: Swift.Equatable {
    /// Provides information about the configuration, dimension, and other settings for a segment.
    /// This member is required.
    public var segmentResponse: PinpointClientTypes.SegmentResponse?

    public init (
        segmentResponse: PinpointClientTypes.SegmentResponse? = nil
    )
    {
        self.segmentResponse = segmentResponse
    }
}

struct DeleteSegmentOutputResponseBody: Swift.Equatable {
    let segmentResponse: PinpointClientTypes.SegmentResponse?
}

extension DeleteSegmentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case segmentResponse = "SegmentResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let segmentResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentResponse.self, forKey: .segmentResponse)
        segmentResponse = segmentResponseDecoded
    }
}

extension DeleteSmsChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/sms"
    }
}

public struct DeleteSmsChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct DeleteSmsChannelInputBody: Swift.Equatable {
}

extension DeleteSmsChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteSmsChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSmsChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteSmsChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSmsChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.SMSChannelResponse = try responseDecoder.decode(responseBody: data)
                self.smsChannelResponse = output
            } else {
                self.smsChannelResponse = nil
            }
        } else {
            self.smsChannelResponse = nil
        }
    }
}

public struct DeleteSmsChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the SMS channel for an application.
    /// This member is required.
    public var smsChannelResponse: PinpointClientTypes.SMSChannelResponse?

    public init (
        smsChannelResponse: PinpointClientTypes.SMSChannelResponse? = nil
    )
    {
        self.smsChannelResponse = smsChannelResponse
    }
}

struct DeleteSmsChannelOutputResponseBody: Swift.Equatable {
    let smsChannelResponse: PinpointClientTypes.SMSChannelResponse?
}

extension DeleteSmsChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case smsChannelResponse = "SMSChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let smsChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SMSChannelResponse.self, forKey: .smsChannelResponse)
        smsChannelResponse = smsChannelResponseDecoded
    }
}

extension DeleteSmsTemplateInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let version = version {
                let versionQueryItem = ClientRuntime.URLQueryItem(name: "version".urlPercentEncoding(), value: Swift.String(version).urlPercentEncoding())
                items.append(versionQueryItem)
            }
            return items
        }
    }
}

extension DeleteSmsTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v1/templates/\(templateName.urlPercentEncoding())/sms"
    }
}

public struct DeleteSmsTemplateInput: Swift.Equatable {
    /// The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
    /// This member is required.
    public var templateName: Swift.String?
    /// The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following:
    ///
    /// * For a get operation, retrieves information about the active version of the template.
    ///
    /// * For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.
    ///
    /// * For a delete operation, deletes the template, including all versions of the template.
    public var version: Swift.String?

    public init (
        templateName: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.templateName = templateName
        self.version = version
    }
}

struct DeleteSmsTemplateInputBody: Swift.Equatable {
}

extension DeleteSmsTemplateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteSmsTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSmsTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteSmsTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSmsTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.MessageBody = try responseDecoder.decode(responseBody: data)
                self.messageBody = output
            } else {
                self.messageBody = nil
            }
        } else {
            self.messageBody = nil
        }
    }
}

public struct DeleteSmsTemplateOutputResponse: Swift.Equatable {
    /// Provides information about an API request or response.
    /// This member is required.
    public var messageBody: PinpointClientTypes.MessageBody?

    public init (
        messageBody: PinpointClientTypes.MessageBody? = nil
    )
    {
        self.messageBody = messageBody
    }
}

struct DeleteSmsTemplateOutputResponseBody: Swift.Equatable {
    let messageBody: PinpointClientTypes.MessageBody?
}

extension DeleteSmsTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageBody = "MessageBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageBodyDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageBody.self, forKey: .messageBody)
        messageBody = messageBodyDecoded
    }
}

extension DeleteUserEndpointsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let userId = userId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/users/\(userId.urlPercentEncoding())"
    }
}

public struct DeleteUserEndpointsInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the user.
    /// This member is required.
    public var userId: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.userId = userId
    }
}

struct DeleteUserEndpointsInputBody: Swift.Equatable {
}

extension DeleteUserEndpointsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteUserEndpointsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteUserEndpointsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteUserEndpointsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteUserEndpointsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.EndpointsResponse = try responseDecoder.decode(responseBody: data)
                self.endpointsResponse = output
            } else {
                self.endpointsResponse = nil
            }
        } else {
            self.endpointsResponse = nil
        }
    }
}

public struct DeleteUserEndpointsOutputResponse: Swift.Equatable {
    /// Provides information about all the endpoints that are associated with a user ID.
    /// This member is required.
    public var endpointsResponse: PinpointClientTypes.EndpointsResponse?

    public init (
        endpointsResponse: PinpointClientTypes.EndpointsResponse? = nil
    )
    {
        self.endpointsResponse = endpointsResponse
    }
}

struct DeleteUserEndpointsOutputResponseBody: Swift.Equatable {
    let endpointsResponse: PinpointClientTypes.EndpointsResponse?
}

extension DeleteUserEndpointsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointsResponse = "EndpointsResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointsResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EndpointsResponse.self, forKey: .endpointsResponse)
        endpointsResponse = endpointsResponseDecoded
    }
}

extension DeleteVoiceChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/voice"
    }
}

public struct DeleteVoiceChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct DeleteVoiceChannelInputBody: Swift.Equatable {
}

extension DeleteVoiceChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteVoiceChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteVoiceChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteVoiceChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteVoiceChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.VoiceChannelResponse = try responseDecoder.decode(responseBody: data)
                self.voiceChannelResponse = output
            } else {
                self.voiceChannelResponse = nil
            }
        } else {
            self.voiceChannelResponse = nil
        }
    }
}

public struct DeleteVoiceChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the voice channel for an application.
    /// This member is required.
    public var voiceChannelResponse: PinpointClientTypes.VoiceChannelResponse?

    public init (
        voiceChannelResponse: PinpointClientTypes.VoiceChannelResponse? = nil
    )
    {
        self.voiceChannelResponse = voiceChannelResponse
    }
}

struct DeleteVoiceChannelOutputResponseBody: Swift.Equatable {
    let voiceChannelResponse: PinpointClientTypes.VoiceChannelResponse?
}

extension DeleteVoiceChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case voiceChannelResponse = "VoiceChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let voiceChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.VoiceChannelResponse.self, forKey: .voiceChannelResponse)
        voiceChannelResponse = voiceChannelResponseDecoded
    }
}

extension DeleteVoiceTemplateInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let version = version {
                let versionQueryItem = ClientRuntime.URLQueryItem(name: "version".urlPercentEncoding(), value: Swift.String(version).urlPercentEncoding())
                items.append(versionQueryItem)
            }
            return items
        }
    }
}

extension DeleteVoiceTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v1/templates/\(templateName.urlPercentEncoding())/voice"
    }
}

public struct DeleteVoiceTemplateInput: Swift.Equatable {
    /// The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
    /// This member is required.
    public var templateName: Swift.String?
    /// The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following:
    ///
    /// * For a get operation, retrieves information about the active version of the template.
    ///
    /// * For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.
    ///
    /// * For a delete operation, deletes the template, including all versions of the template.
    public var version: Swift.String?

    public init (
        templateName: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.templateName = templateName
        self.version = version
    }
}

struct DeleteVoiceTemplateInputBody: Swift.Equatable {
}

extension DeleteVoiceTemplateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteVoiceTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteVoiceTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteVoiceTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteVoiceTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.MessageBody = try responseDecoder.decode(responseBody: data)
                self.messageBody = output
            } else {
                self.messageBody = nil
            }
        } else {
            self.messageBody = nil
        }
    }
}

public struct DeleteVoiceTemplateOutputResponse: Swift.Equatable {
    /// Provides information about an API request or response.
    /// This member is required.
    public var messageBody: PinpointClientTypes.MessageBody?

    public init (
        messageBody: PinpointClientTypes.MessageBody? = nil
    )
    {
        self.messageBody = messageBody
    }
}

struct DeleteVoiceTemplateOutputResponseBody: Swift.Equatable {
    let messageBody: PinpointClientTypes.MessageBody?
}

extension DeleteVoiceTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageBody = "MessageBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageBodyDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageBody.self, forKey: .messageBody)
        messageBody = messageBodyDecoded
    }
}

extension PinpointClientTypes {
    public enum DeliveryStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case duplicate
        case optOut
        case permanentFailure
        case successful
        case temporaryFailure
        case throttled
        case unknownFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliveryStatus] {
            return [
                .duplicate,
                .optOut,
                .permanentFailure,
                .successful,
                .temporaryFailure,
                .throttled,
                .unknownFailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .duplicate: return "DUPLICATE"
            case .optOut: return "OPT_OUT"
            case .permanentFailure: return "PERMANENT_FAILURE"
            case .successful: return "SUCCESSFUL"
            case .temporaryFailure: return "TEMPORARY_FAILURE"
            case .throttled: return "THROTTLED"
            case .unknownFailure: return "UNKNOWN_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeliveryStatus(rawValue: rawValue) ?? DeliveryStatus.sdkUnknown(rawValue)
        }
    }
}

extension PinpointClientTypes {
    public enum DimensionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case exclusive
        case inclusive
        case sdkUnknown(Swift.String)

        public static var allCases: [DimensionType] {
            return [
                .exclusive,
                .inclusive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .exclusive: return "EXCLUSIVE"
            case .inclusive: return "INCLUSIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DimensionType(rawValue: rawValue) ?? DimensionType.sdkUnknown(rawValue)
        }
    }
}

extension PinpointClientTypes.DirectMessageConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case admMessage = "ADMMessage"
        case apnsMessage = "APNSMessage"
        case baiduMessage = "BaiduMessage"
        case defaultMessage = "DefaultMessage"
        case defaultPushNotificationMessage = "DefaultPushNotificationMessage"
        case emailMessage = "EmailMessage"
        case gcmMessage = "GCMMessage"
        case smsMessage = "SMSMessage"
        case voiceMessage = "VoiceMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let admMessage = self.admMessage {
            try encodeContainer.encode(admMessage, forKey: .admMessage)
        }
        if let apnsMessage = self.apnsMessage {
            try encodeContainer.encode(apnsMessage, forKey: .apnsMessage)
        }
        if let baiduMessage = self.baiduMessage {
            try encodeContainer.encode(baiduMessage, forKey: .baiduMessage)
        }
        if let defaultMessage = self.defaultMessage {
            try encodeContainer.encode(defaultMessage, forKey: .defaultMessage)
        }
        if let defaultPushNotificationMessage = self.defaultPushNotificationMessage {
            try encodeContainer.encode(defaultPushNotificationMessage, forKey: .defaultPushNotificationMessage)
        }
        if let emailMessage = self.emailMessage {
            try encodeContainer.encode(emailMessage, forKey: .emailMessage)
        }
        if let gcmMessage = self.gcmMessage {
            try encodeContainer.encode(gcmMessage, forKey: .gcmMessage)
        }
        if let smsMessage = self.smsMessage {
            try encodeContainer.encode(smsMessage, forKey: .smsMessage)
        }
        if let voiceMessage = self.voiceMessage {
            try encodeContainer.encode(voiceMessage, forKey: .voiceMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let admMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ADMMessage.self, forKey: .admMessage)
        admMessage = admMessageDecoded
        let apnsMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.APNSMessage.self, forKey: .apnsMessage)
        apnsMessage = apnsMessageDecoded
        let baiduMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.BaiduMessage.self, forKey: .baiduMessage)
        baiduMessage = baiduMessageDecoded
        let defaultMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.DefaultMessage.self, forKey: .defaultMessage)
        defaultMessage = defaultMessageDecoded
        let defaultPushNotificationMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.DefaultPushNotificationMessage.self, forKey: .defaultPushNotificationMessage)
        defaultPushNotificationMessage = defaultPushNotificationMessageDecoded
        let emailMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EmailMessage.self, forKey: .emailMessage)
        emailMessage = emailMessageDecoded
        let gcmMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.GCMMessage.self, forKey: .gcmMessage)
        gcmMessage = gcmMessageDecoded
        let smsMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SMSMessage.self, forKey: .smsMessage)
        smsMessage = smsMessageDecoded
        let voiceMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.VoiceMessage.self, forKey: .voiceMessage)
        voiceMessage = voiceMessageDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the settings and content for the default message and any default messages that you tailored for specific channels.
    public struct DirectMessageConfiguration: Swift.Equatable {
        /// The default push notification message for the ADM (Amazon Device Messaging) channel. This message overrides the default push notification message (DefaultPushNotificationMessage).
        public var admMessage: PinpointClientTypes.ADMMessage?
        /// The default push notification message for the APNs (Apple Push Notification service) channel. This message overrides the default push notification message (DefaultPushNotificationMessage).
        public var apnsMessage: PinpointClientTypes.APNSMessage?
        /// The default push notification message for the Baidu (Baidu Cloud Push) channel. This message overrides the default push notification message (DefaultPushNotificationMessage).
        public var baiduMessage: PinpointClientTypes.BaiduMessage?
        /// The default message for all channels.
        public var defaultMessage: PinpointClientTypes.DefaultMessage?
        /// The default push notification message for all push notification channels.
        public var defaultPushNotificationMessage: PinpointClientTypes.DefaultPushNotificationMessage?
        /// The default message for the email channel. This message overrides the default message (DefaultMessage).
        public var emailMessage: PinpointClientTypes.EmailMessage?
        /// The default push notification message for the GCM channel, which is used to send notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service. This message overrides the default push notification message (DefaultPushNotificationMessage).
        public var gcmMessage: PinpointClientTypes.GCMMessage?
        /// The default message for the SMS channel. This message overrides the default message (DefaultMessage).
        public var smsMessage: PinpointClientTypes.SMSMessage?
        /// The default message for the voice channel. This message overrides the default message (DefaultMessage).
        public var voiceMessage: PinpointClientTypes.VoiceMessage?

        public init (
            admMessage: PinpointClientTypes.ADMMessage? = nil,
            apnsMessage: PinpointClientTypes.APNSMessage? = nil,
            baiduMessage: PinpointClientTypes.BaiduMessage? = nil,
            defaultMessage: PinpointClientTypes.DefaultMessage? = nil,
            defaultPushNotificationMessage: PinpointClientTypes.DefaultPushNotificationMessage? = nil,
            emailMessage: PinpointClientTypes.EmailMessage? = nil,
            gcmMessage: PinpointClientTypes.GCMMessage? = nil,
            smsMessage: PinpointClientTypes.SMSMessage? = nil,
            voiceMessage: PinpointClientTypes.VoiceMessage? = nil
        )
        {
            self.admMessage = admMessage
            self.apnsMessage = apnsMessage
            self.baiduMessage = baiduMessage
            self.defaultMessage = defaultMessage
            self.defaultPushNotificationMessage = defaultPushNotificationMessage
            self.emailMessage = emailMessage
            self.gcmMessage = gcmMessage
            self.smsMessage = smsMessage
            self.voiceMessage = voiceMessage
        }
    }

}

extension PinpointClientTypes {
    public enum Duration: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case day14
        case day30
        case day7
        case hr24
        case sdkUnknown(Swift.String)

        public static var allCases: [Duration] {
            return [
                .day14,
                .day30,
                .day7,
                .hr24,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .day14: return "DAY_14"
            case .day30: return "DAY_30"
            case .day7: return "DAY_7"
            case .hr24: return "HR_24"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Duration(rawValue: rawValue) ?? Duration.sdkUnknown(rawValue)
        }
    }
}

extension PinpointClientTypes.EmailChannelRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSet = "ConfigurationSet"
        case enabled = "Enabled"
        case fromAddress = "FromAddress"
        case identity = "Identity"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationSet = self.configurationSet {
            try encodeContainer.encode(configurationSet, forKey: .configurationSet)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let fromAddress = self.fromAddress {
            try encodeContainer.encode(fromAddress, forKey: .fromAddress)
        }
        if let identity = self.identity {
            try encodeContainer.encode(identity, forKey: .identity)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSet)
        configurationSet = configurationSetDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let fromAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromAddress)
        fromAddress = fromAddressDecoded
        let identityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identity)
        identity = identityDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the status and settings of the email channel for an application.
    public struct EmailChannelRequest: Swift.Equatable {
        /// The [Amazon SES configuration set](https://docs.aws.amazon.com/ses/latest/APIReference/API_ConfigurationSet.html) that you want to apply to messages that you send through the channel.
        public var configurationSet: Swift.String?
        /// Specifies whether to enable the email channel for the application.
        public var enabled: Swift.Bool?
        /// The verified email address that you want to send email from when you send email through the channel.
        /// This member is required.
        public var fromAddress: Swift.String?
        /// The Amazon Resource Name (ARN) of the identity, verified with Amazon Simple Email Service (Amazon SES), that you want to use when you send email through the channel.
        /// This member is required.
        public var identity: Swift.String?
        /// The ARN of the AWS Identity and Access Management (IAM) role that you want Amazon Pinpoint to use when it submits email-related event data for the channel.
        public var roleArn: Swift.String?

        public init (
            configurationSet: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            fromAddress: Swift.String? = nil,
            identity: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.configurationSet = configurationSet
            self.enabled = enabled
            self.fromAddress = fromAddress
            self.identity = identity
            self.roleArn = roleArn
        }
    }

}

extension PinpointClientTypes.EmailChannelResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case configurationSet = "ConfigurationSet"
        case creationDate = "CreationDate"
        case enabled = "Enabled"
        case fromAddress = "FromAddress"
        case hasCredential = "HasCredential"
        case id = "Id"
        case identity = "Identity"
        case isArchived = "IsArchived"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedDate = "LastModifiedDate"
        case messagesPerSecond = "MessagesPerSecond"
        case platform = "Platform"
        case roleArn = "RoleArn"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let configurationSet = self.configurationSet {
            try encodeContainer.encode(configurationSet, forKey: .configurationSet)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let fromAddress = self.fromAddress {
            try encodeContainer.encode(fromAddress, forKey: .fromAddress)
        }
        if let hasCredential = self.hasCredential {
            try encodeContainer.encode(hasCredential, forKey: .hasCredential)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let identity = self.identity {
            try encodeContainer.encode(identity, forKey: .identity)
        }
        if let isArchived = self.isArchived {
            try encodeContainer.encode(isArchived, forKey: .isArchived)
        }
        if let lastModifiedBy = self.lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let messagesPerSecond = self.messagesPerSecond {
            try encodeContainer.encode(messagesPerSecond, forKey: .messagesPerSecond)
        }
        if let platform = self.platform {
            try encodeContainer.encode(platform, forKey: .platform)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let configurationSetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSet)
        configurationSet = configurationSetDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let fromAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromAddress)
        fromAddress = fromAddressDecoded
        let hasCredentialDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasCredential)
        hasCredential = hasCredentialDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let identityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identity)
        identity = identityDecoded
        let isArchivedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isArchived)
        isArchived = isArchivedDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let messagesPerSecondDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .messagesPerSecond)
        messagesPerSecond = messagesPerSecondDecoded
        let platformDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platform)
        platform = platformDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the status and settings of the email channel for an application.
    public struct EmailChannelResponse: Swift.Equatable {
        /// The unique identifier for the application that the email channel applies to.
        public var applicationId: Swift.String?
        /// The [Amazon SES configuration set](https://docs.aws.amazon.com/ses/latest/APIReference/API_ConfigurationSet.html) that's applied to messages that are sent through the channel.
        public var configurationSet: Swift.String?
        /// The date and time, in ISO 8601 format, when the email channel was enabled.
        public var creationDate: Swift.String?
        /// Specifies whether the email channel is enabled for the application.
        public var enabled: Swift.Bool?
        /// The verified email address that email is sent from when you send email through the channel.
        public var fromAddress: Swift.String?
        /// (Not used) This property is retained only for backward compatibility.
        public var hasCredential: Swift.Bool?
        /// (Deprecated) An identifier for the email channel. This property is retained only for backward compatibility.
        public var id: Swift.String?
        /// The Amazon Resource Name (ARN) of the identity, verified with Amazon Simple Email Service (Amazon SES), that's used when you send email through the channel.
        public var identity: Swift.String?
        /// Specifies whether the email channel is archived.
        public var isArchived: Swift.Bool?
        /// The user who last modified the email channel.
        public var lastModifiedBy: Swift.String?
        /// The date and time, in ISO 8601 format, when the email channel was last modified.
        public var lastModifiedDate: Swift.String?
        /// The maximum number of emails that can be sent through the channel each second.
        public var messagesPerSecond: Swift.Int?
        /// The type of messaging or notification platform for the channel. For the email channel, this value is EMAIL.
        /// This member is required.
        public var platform: Swift.String?
        /// The ARN of the AWS Identity and Access Management (IAM) role that Amazon Pinpoint uses to submit email-related event data for the channel.
        public var roleArn: Swift.String?
        /// The current version of the email channel.
        public var version: Swift.Int?

        public init (
            applicationId: Swift.String? = nil,
            configurationSet: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            fromAddress: Swift.String? = nil,
            hasCredential: Swift.Bool? = nil,
            id: Swift.String? = nil,
            identity: Swift.String? = nil,
            isArchived: Swift.Bool? = nil,
            lastModifiedBy: Swift.String? = nil,
            lastModifiedDate: Swift.String? = nil,
            messagesPerSecond: Swift.Int? = nil,
            platform: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            version: Swift.Int? = nil
        )
        {
            self.applicationId = applicationId
            self.configurationSet = configurationSet
            self.creationDate = creationDate
            self.enabled = enabled
            self.fromAddress = fromAddress
            self.hasCredential = hasCredential
            self.id = id
            self.identity = identity
            self.isArchived = isArchived
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedDate = lastModifiedDate
            self.messagesPerSecond = messagesPerSecond
            self.platform = platform
            self.roleArn = roleArn
            self.version = version
        }
    }

}

extension PinpointClientTypes.EmailMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
        case feedbackForwardingAddress = "FeedbackForwardingAddress"
        case fromAddress = "FromAddress"
        case rawEmail = "RawEmail"
        case replyToAddresses = "ReplyToAddresses"
        case simpleEmail = "SimpleEmail"
        case substitutions = "Substitutions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let feedbackForwardingAddress = self.feedbackForwardingAddress {
            try encodeContainer.encode(feedbackForwardingAddress, forKey: .feedbackForwardingAddress)
        }
        if let fromAddress = self.fromAddress {
            try encodeContainer.encode(fromAddress, forKey: .fromAddress)
        }
        if let rawEmail = self.rawEmail {
            try encodeContainer.encode(rawEmail, forKey: .rawEmail)
        }
        if let replyToAddresses = replyToAddresses {
            var replyToAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replyToAddresses)
            for __string0 in replyToAddresses {
                try replyToAddressesContainer.encode(__string0)
            }
        }
        if let simpleEmail = self.simpleEmail {
            try encodeContainer.encode(simpleEmail, forKey: .simpleEmail)
        }
        if let substitutions = substitutions {
            var substitutionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .substitutions)
            for (dictKey0, mapOfListOf__string0) in substitutions {
                var mapOfListOf__string0Container = substitutionsContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for __string1 in mapOfListOf__string0 {
                    try mapOfListOf__string0Container.encode(__string1)
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let feedbackForwardingAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .feedbackForwardingAddress)
        feedbackForwardingAddress = feedbackForwardingAddressDecoded
        let fromAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromAddress)
        fromAddress = fromAddressDecoded
        let rawEmailDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.RawEmail.self, forKey: .rawEmail)
        rawEmail = rawEmailDecoded
        let replyToAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .replyToAddresses)
        var replyToAddressesDecoded0:[Swift.String]? = nil
        if let replyToAddressesContainer = replyToAddressesContainer {
            replyToAddressesDecoded0 = [Swift.String]()
            for string0 in replyToAddressesContainer {
                if let string0 = string0 {
                    replyToAddressesDecoded0?.append(string0)
                }
            }
        }
        replyToAddresses = replyToAddressesDecoded0
        let simpleEmailDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SimpleEmail.self, forKey: .simpleEmail)
        simpleEmail = simpleEmailDecoded
        let substitutionsContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .substitutions)
        var substitutionsDecoded0: [Swift.String:[Swift.String]]? = nil
        if let substitutionsContainer = substitutionsContainer {
            substitutionsDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listof__string0) in substitutionsContainer {
                var listof__string0Decoded0: [Swift.String]? = nil
                if let listof__string0 = listof__string0 {
                    listof__string0Decoded0 = [Swift.String]()
                    for string1 in listof__string0 {
                        if let string1 = string1 {
                            listof__string0Decoded0?.append(string1)
                        }
                    }
                }
                substitutionsDecoded0?[key0] = listof__string0Decoded0
            }
        }
        substitutions = substitutionsDecoded0
    }
}

extension PinpointClientTypes {
    /// Specifies the default settings and content for a one-time email message that's sent directly to an endpoint.
    public struct EmailMessage: Swift.Equatable {
        /// The body of the email message.
        public var body: Swift.String?
        /// The email address to forward bounces and complaints to, if feedback forwarding is enabled.
        public var feedbackForwardingAddress: Swift.String?
        /// The verified email address to send the email message from. The default value is the FromAddress specified for the email channel.
        public var fromAddress: Swift.String?
        /// The email message, represented as a raw MIME message.
        public var rawEmail: PinpointClientTypes.RawEmail?
        /// The reply-to email address(es) for the email message. If a recipient replies to the email, each reply-to address receives the reply.
        public var replyToAddresses: [Swift.String]?
        /// The email message, composed of a subject, a text part, and an HTML part.
        public var simpleEmail: PinpointClientTypes.SimpleEmail?
        /// The default message variables to use in the email message. You can override the default variables with individual address variables.
        public var substitutions: [Swift.String:[Swift.String]]?

        public init (
            body: Swift.String? = nil,
            feedbackForwardingAddress: Swift.String? = nil,
            fromAddress: Swift.String? = nil,
            rawEmail: PinpointClientTypes.RawEmail? = nil,
            replyToAddresses: [Swift.String]? = nil,
            simpleEmail: PinpointClientTypes.SimpleEmail? = nil,
            substitutions: [Swift.String:[Swift.String]]? = nil
        )
        {
            self.body = body
            self.feedbackForwardingAddress = feedbackForwardingAddress
            self.fromAddress = fromAddress
            self.rawEmail = rawEmail
            self.replyToAddresses = replyToAddresses
            self.simpleEmail = simpleEmail
            self.substitutions = substitutions
        }
    }

}

extension PinpointClientTypes.EmailMessageActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageConfig = "MessageConfig"
        case nextActivity = "NextActivity"
        case templateName = "TemplateName"
        case templateVersion = "TemplateVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let messageConfig = self.messageConfig {
            try encodeContainer.encode(messageConfig, forKey: .messageConfig)
        }
        if let nextActivity = self.nextActivity {
            try encodeContainer.encode(nextActivity, forKey: .nextActivity)
        }
        if let templateName = self.templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
        if let templateVersion = self.templateVersion {
            try encodeContainer.encode(templateVersion, forKey: .templateVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageConfigDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneyEmailMessage.self, forKey: .messageConfig)
        messageConfig = messageConfigDecoded
        let nextActivityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextActivity)
        nextActivity = nextActivityDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let templateVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateVersion)
        templateVersion = templateVersionDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the settings for an email activity in a journey. This type of activity sends an email message to participants.
    public struct EmailMessageActivity: Swift.Equatable {
        /// Specifies the sender address for an email message that's sent to participants in the journey.
        public var messageConfig: PinpointClientTypes.JourneyEmailMessage?
        /// The unique identifier for the next activity to perform, after the message is sent.
        public var nextActivity: Swift.String?
        /// The name of the email message template to use for the message. If specified, this value must match the name of an existing message template.
        public var templateName: Swift.String?
        /// The unique identifier for the version of the email template to use for the message. If specified, this value must match the identifier for an existing template version. To retrieve a list of versions and version identifiers for a template, use the Template Versions resource. If you don't specify a value for this property, Amazon Pinpoint uses the active version of the template. The active version is typically the version of a template that's been most recently reviewed and approved for use, depending on your workflow. It isn't necessarily the latest version of a template.
        public var templateVersion: Swift.String?

        public init (
            messageConfig: PinpointClientTypes.JourneyEmailMessage? = nil,
            nextActivity: Swift.String? = nil,
            templateName: Swift.String? = nil,
            templateVersion: Swift.String? = nil
        )
        {
            self.messageConfig = messageConfig
            self.nextActivity = nextActivity
            self.templateName = templateName
            self.templateVersion = templateVersion
        }
    }

}

extension PinpointClientTypes.EmailTemplateRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultSubstitutions = "DefaultSubstitutions"
        case htmlPart = "HtmlPart"
        case recommenderId = "RecommenderId"
        case subject = "Subject"
        case templateDescription = "TemplateDescription"
        case textPart = "TextPart"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultSubstitutions = self.defaultSubstitutions {
            try encodeContainer.encode(defaultSubstitutions, forKey: .defaultSubstitutions)
        }
        if let htmlPart = self.htmlPart {
            try encodeContainer.encode(htmlPart, forKey: .htmlPart)
        }
        if let recommenderId = self.recommenderId {
            try encodeContainer.encode(recommenderId, forKey: .recommenderId)
        }
        if let subject = self.subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
        if let templateDescription = self.templateDescription {
            try encodeContainer.encode(templateDescription, forKey: .templateDescription)
        }
        if let textPart = self.textPart {
            try encodeContainer.encode(textPart, forKey: .textPart)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapOf__string0) in tags {
                try tagsContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultSubstitutionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultSubstitutions)
        defaultSubstitutions = defaultSubstitutionsDecoded
        let htmlPartDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .htmlPart)
        htmlPart = htmlPartDecoded
        let recommenderIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommenderId)
        recommenderId = recommenderIdDecoded
        let subjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subject)
        subject = subjectDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let templateDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateDescription)
        templateDescription = templateDescriptionDecoded
        let textPartDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .textPart)
        textPart = textPartDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the content and settings for a message template that can be used in messages that are sent through the email channel.
    public struct EmailTemplateRequest: Swift.Equatable {
        /// A JSON object that specifies the default values to use for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable. When you create a message that's based on the template, you can override these defaults with message-specific and address-specific variables and values.
        public var defaultSubstitutions: Swift.String?
        /// The message body, in HTML format, to use in email messages that are based on the message template. We recommend using HTML format for email clients that render HTML content. You can include links, formatted text, and more in an HTML message.
        public var htmlPart: Swift.String?
        /// The unique identifier for the recommender model to use for the message template. Amazon Pinpoint uses this value to determine how to retrieve and process data from a recommender model when it sends messages that use the template, if the template contains message variables for recommendation data.
        public var recommenderId: Swift.String?
        /// The subject line, or title, to use in email messages that are based on the message template.
        public var subject: Swift.String?
        /// A string-to-string map of key-value pairs that defines the tags to associate with the message template. Each tag consists of a required tag key and an associated tag value.
        public var tags: [Swift.String:Swift.String]?
        /// A custom description of the message template.
        public var templateDescription: Swift.String?
        /// The message body, in plain text format, to use in email messages that are based on the message template. We recommend using plain text format for email clients that don't render HTML content and clients that are connected to high-latency networks, such as mobile devices.
        public var textPart: Swift.String?

        public init (
            defaultSubstitutions: Swift.String? = nil,
            htmlPart: Swift.String? = nil,
            recommenderId: Swift.String? = nil,
            subject: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            templateDescription: Swift.String? = nil,
            textPart: Swift.String? = nil
        )
        {
            self.defaultSubstitutions = defaultSubstitutions
            self.htmlPart = htmlPart
            self.recommenderId = recommenderId
            self.subject = subject
            self.tags = tags
            self.templateDescription = templateDescription
            self.textPart = textPart
        }
    }

}

extension PinpointClientTypes.EmailTemplateResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case defaultSubstitutions = "DefaultSubstitutions"
        case htmlPart = "HtmlPart"
        case lastModifiedDate = "LastModifiedDate"
        case recommenderId = "RecommenderId"
        case subject = "Subject"
        case templateDescription = "TemplateDescription"
        case templateName = "TemplateName"
        case templateType = "TemplateType"
        case textPart = "TextPart"
        case version = "Version"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let defaultSubstitutions = self.defaultSubstitutions {
            try encodeContainer.encode(defaultSubstitutions, forKey: .defaultSubstitutions)
        }
        if let htmlPart = self.htmlPart {
            try encodeContainer.encode(htmlPart, forKey: .htmlPart)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let recommenderId = self.recommenderId {
            try encodeContainer.encode(recommenderId, forKey: .recommenderId)
        }
        if let subject = self.subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
        if let templateDescription = self.templateDescription {
            try encodeContainer.encode(templateDescription, forKey: .templateDescription)
        }
        if let templateName = self.templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
        if let templateType = self.templateType {
            try encodeContainer.encode(templateType.rawValue, forKey: .templateType)
        }
        if let textPart = self.textPart {
            try encodeContainer.encode(textPart, forKey: .textPart)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapOf__string0) in tags {
                try tagsContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let defaultSubstitutionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultSubstitutions)
        defaultSubstitutions = defaultSubstitutionsDecoded
        let htmlPartDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .htmlPart)
        htmlPart = htmlPartDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let recommenderIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommenderId)
        recommenderId = recommenderIdDecoded
        let subjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subject)
        subject = subjectDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let templateDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateDescription)
        templateDescription = templateDescriptionDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let templateTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.TemplateType.self, forKey: .templateType)
        templateType = templateTypeDecoded
        let textPartDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .textPart)
        textPart = textPartDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the content and settings for a message template that can be used in messages that are sent through the email channel.
    public struct EmailTemplateResponse: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the message template.
        public var arn: Swift.String?
        /// The date, in ISO 8601 format, when the message template was created.
        /// This member is required.
        public var creationDate: Swift.String?
        /// The JSON object that specifies the default values that are used for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable.
        public var defaultSubstitutions: Swift.String?
        /// The message body, in HTML format, that's used in email messages that are based on the message template.
        public var htmlPart: Swift.String?
        /// The date, in ISO 8601 format, when the message template was last modified.
        /// This member is required.
        public var lastModifiedDate: Swift.String?
        /// The unique identifier for the recommender model that's used by the message template.
        public var recommenderId: Swift.String?
        /// The subject line, or title, that's used in email messages that are based on the message template.
        public var subject: Swift.String?
        /// A string-to-string map of key-value pairs that identifies the tags that are associated with the message template. Each tag consists of a required tag key and an associated tag value.
        public var tags: [Swift.String:Swift.String]?
        /// The custom description of the message template.
        public var templateDescription: Swift.String?
        /// The name of the message template.
        /// This member is required.
        public var templateName: Swift.String?
        /// The type of channel that the message template is designed for. For an email template, this value is EMAIL.
        /// This member is required.
        public var templateType: PinpointClientTypes.TemplateType?
        /// The message body, in plain text format, that's used in email messages that are based on the message template.
        public var textPart: Swift.String?
        /// The unique identifier, as an integer, for the active version of the message template, or the version of the template that you specified by using the version parameter in your request.
        public var version: Swift.String?

        public init (
            arn: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            defaultSubstitutions: Swift.String? = nil,
            htmlPart: Swift.String? = nil,
            lastModifiedDate: Swift.String? = nil,
            recommenderId: Swift.String? = nil,
            subject: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            templateDescription: Swift.String? = nil,
            templateName: Swift.String? = nil,
            templateType: PinpointClientTypes.TemplateType? = nil,
            textPart: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.arn = arn
            self.creationDate = creationDate
            self.defaultSubstitutions = defaultSubstitutions
            self.htmlPart = htmlPart
            self.lastModifiedDate = lastModifiedDate
            self.recommenderId = recommenderId
            self.subject = subject
            self.tags = tags
            self.templateDescription = templateDescription
            self.templateName = templateName
            self.templateType = templateType
            self.textPart = textPart
            self.version = version
        }
    }

}

extension PinpointClientTypes.EndpointBatchItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address = "Address"
        case attributes = "Attributes"
        case channelType = "ChannelType"
        case demographic = "Demographic"
        case effectiveDate = "EffectiveDate"
        case endpointStatus = "EndpointStatus"
        case id = "Id"
        case location = "Location"
        case metrics = "Metrics"
        case optOut = "OptOut"
        case requestId = "RequestId"
        case user = "User"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let address = self.address {
            try encodeContainer.encode(address, forKey: .address)
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, mapOfListOf__string0) in attributes {
                var mapOfListOf__string0Container = attributesContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for __string1 in mapOfListOf__string0 {
                    try mapOfListOf__string0Container.encode(__string1)
                }
            }
        }
        if let channelType = self.channelType {
            try encodeContainer.encode(channelType.rawValue, forKey: .channelType)
        }
        if let demographic = self.demographic {
            try encodeContainer.encode(demographic, forKey: .demographic)
        }
        if let effectiveDate = self.effectiveDate {
            try encodeContainer.encode(effectiveDate, forKey: .effectiveDate)
        }
        if let endpointStatus = self.endpointStatus {
            try encodeContainer.encode(endpointStatus, forKey: .endpointStatus)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let metrics = metrics {
            var metricsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .metrics)
            for (dictKey0, mapOf__double0) in metrics {
                try metricsContainer.encode(mapOf__double0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let optOut = self.optOut {
            try encodeContainer.encode(optOut, forKey: .optOut)
        }
        if let requestId = self.requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let user = self.user {
            try encodeContainer.encode(user, forKey: .user)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .address)
        address = addressDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:[Swift.String]]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listof__string0) in attributesContainer {
                var listof__string0Decoded0: [Swift.String]? = nil
                if let listof__string0 = listof__string0 {
                    listof__string0Decoded0 = [Swift.String]()
                    for string1 in listof__string0 {
                        if let string1 = string1 {
                            listof__string0Decoded0?.append(string1)
                        }
                    }
                }
                attributesDecoded0?[key0] = listof__string0Decoded0
            }
        }
        attributes = attributesDecoded0
        let channelTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ChannelType.self, forKey: .channelType)
        channelType = channelTypeDecoded
        let demographicDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EndpointDemographic.self, forKey: .demographic)
        demographic = demographicDecoded
        let effectiveDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .effectiveDate)
        effectiveDate = effectiveDateDecoded
        let endpointStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointStatus)
        endpointStatus = endpointStatusDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let locationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EndpointLocation.self, forKey: .location)
        location = locationDecoded
        let metricsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Double?].self, forKey: .metrics)
        var metricsDecoded0: [Swift.String:Swift.Double]? = nil
        if let metricsContainer = metricsContainer {
            metricsDecoded0 = [Swift.String:Swift.Double]()
            for (key0, __double0) in metricsContainer {
                if let __double0 = __double0 {
                    metricsDecoded0?[key0] = __double0
                }
            }
        }
        metrics = metricsDecoded0
        let optOutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .optOut)
        optOut = optOutDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let userDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EndpointUser.self, forKey: .user)
        user = userDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies an endpoint to create or update and the settings and attributes to set or change for the endpoint.
    public struct EndpointBatchItem: Swift.Equatable {
        /// The destination address for messages or push notifications that you send to the endpoint. The address varies by channel. For a push-notification channel, use the token provided by the push notification service, such as an Apple Push Notification service (APNs) device token or a Firebase Cloud Messaging (FCM) registration token. For the SMS channel, use a phone number in E.164 format, such as +12065550100. For the email channel, use an email address.
        public var address: Swift.String?
        /// One or more custom attributes that describe the endpoint by associating a name with an array of values. For example, the value of a custom attribute named Interests might be: ["Science", "Music", "Travel"]. You can use these attributes as filter criteria when you create segments. Attribute names are case sensitive. An attribute name can contain up to 50 characters. An attribute value can contain up to 100 characters. When you define the name of a custom attribute, avoid using the following characters: number sign (#), colon (:), question mark (?), backslash (\), and slash (/). The Amazon Pinpoint console can't display attribute names that contain these characters. This restriction doesn't apply to attribute values.
        public var attributes: [Swift.String:[Swift.String]]?
        /// The channel to use when sending messages or push notifications to the endpoint.
        public var channelType: PinpointClientTypes.ChannelType?
        /// The demographic information for the endpoint, such as the time zone and platform.
        public var demographic: PinpointClientTypes.EndpointDemographic?
        /// The date and time, in ISO 8601 format, when the endpoint was created or updated.
        public var effectiveDate: Swift.String?
        /// Specifies whether to send messages or push notifications to the endpoint. Valid values are: ACTIVE, messages are sent to the endpoint; and, INACTIVE, messages aren’t sent to the endpoint. Amazon Pinpoint automatically sets this value to ACTIVE when you create an endpoint or update an existing endpoint. Amazon Pinpoint automatically sets this value to INACTIVE if you update another endpoint that has the same address specified by the Address property.
        public var endpointStatus: Swift.String?
        /// The unique identifier for the endpoint in the context of the batch.
        public var id: Swift.String?
        /// The geographic information for the endpoint.
        public var location: PinpointClientTypes.EndpointLocation?
        /// One or more custom metrics that your app reports to Amazon Pinpoint for the endpoint.
        public var metrics: [Swift.String:Swift.Double]?
        /// Specifies whether the user who's associated with the endpoint has opted out of receiving messages and push notifications from you. Possible values are: ALL, the user has opted out and doesn't want to receive any messages or push notifications; and, NONE, the user hasn't opted out and wants to receive all messages and push notifications.
        public var optOut: Swift.String?
        /// The unique identifier for the request to create or update the endpoint.
        public var requestId: Swift.String?
        /// One or more custom attributes that describe the user who's associated with the endpoint.
        public var user: PinpointClientTypes.EndpointUser?

        public init (
            address: Swift.String? = nil,
            attributes: [Swift.String:[Swift.String]]? = nil,
            channelType: PinpointClientTypes.ChannelType? = nil,
            demographic: PinpointClientTypes.EndpointDemographic? = nil,
            effectiveDate: Swift.String? = nil,
            endpointStatus: Swift.String? = nil,
            id: Swift.String? = nil,
            location: PinpointClientTypes.EndpointLocation? = nil,
            metrics: [Swift.String:Swift.Double]? = nil,
            optOut: Swift.String? = nil,
            requestId: Swift.String? = nil,
            user: PinpointClientTypes.EndpointUser? = nil
        )
        {
            self.address = address
            self.attributes = attributes
            self.channelType = channelType
            self.demographic = demographic
            self.effectiveDate = effectiveDate
            self.endpointStatus = endpointStatus
            self.id = id
            self.location = location
            self.metrics = metrics
            self.optOut = optOut
            self.requestId = requestId
            self.user = user
        }
    }

}

extension PinpointClientTypes.EndpointBatchRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case item = "Item"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let item = item {
            var itemContainer = encodeContainer.nestedUnkeyedContainer(forKey: .item)
            for endpointbatchitem0 in item {
                try itemContainer.encode(endpointbatchitem0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([PinpointClientTypes.EndpointBatchItem?].self, forKey: .item)
        var itemDecoded0:[PinpointClientTypes.EndpointBatchItem]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [PinpointClientTypes.EndpointBatchItem]()
            for structure0 in itemContainer {
                if let structure0 = structure0 {
                    itemDecoded0?.append(structure0)
                }
            }
        }
        item = itemDecoded0
    }
}

extension PinpointClientTypes {
    /// Specifies a batch of endpoints to create or update and the settings and attributes to set or change for each endpoint.
    public struct EndpointBatchRequest: Swift.Equatable {
        /// An array that defines the endpoints to create or update and, for each endpoint, the property values to set or change. An array can contain a maximum of 100 items.
        /// This member is required.
        public var item: [PinpointClientTypes.EndpointBatchItem]?

        public init (
            item: [PinpointClientTypes.EndpointBatchItem]? = nil
        )
        {
            self.item = item
        }
    }

}

extension PinpointClientTypes.EndpointDemographic: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appVersion = "AppVersion"
        case locale = "Locale"
        case make = "Make"
        case model = "Model"
        case modelVersion = "ModelVersion"
        case platform = "Platform"
        case platformVersion = "PlatformVersion"
        case timezone = "Timezone"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appVersion = self.appVersion {
            try encodeContainer.encode(appVersion, forKey: .appVersion)
        }
        if let locale = self.locale {
            try encodeContainer.encode(locale, forKey: .locale)
        }
        if let make = self.make {
            try encodeContainer.encode(make, forKey: .make)
        }
        if let model = self.model {
            try encodeContainer.encode(model, forKey: .model)
        }
        if let modelVersion = self.modelVersion {
            try encodeContainer.encode(modelVersion, forKey: .modelVersion)
        }
        if let platform = self.platform {
            try encodeContainer.encode(platform, forKey: .platform)
        }
        if let platformVersion = self.platformVersion {
            try encodeContainer.encode(platformVersion, forKey: .platformVersion)
        }
        if let timezone = self.timezone {
            try encodeContainer.encode(timezone, forKey: .timezone)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appVersion)
        appVersion = appVersionDecoded
        let localeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locale)
        locale = localeDecoded
        let makeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .make)
        make = makeDecoded
        let modelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .model)
        model = modelDecoded
        let modelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelVersion)
        modelVersion = modelVersionDecoded
        let platformDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platform)
        platform = platformDecoded
        let platformVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformVersion)
        platformVersion = platformVersionDecoded
        let timezoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timezone)
        timezone = timezoneDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies demographic information about an endpoint, such as the applicable time zone and platform.
    public struct EndpointDemographic: Swift.Equatable {
        /// The version of the app that's associated with the endpoint.
        public var appVersion: Swift.String?
        /// The locale of the endpoint, in the following format: the ISO 639-1 alpha-2 code, followed by an underscore (_), followed by an ISO 3166-1 alpha-2 value.
        public var locale: Swift.String?
        /// The manufacturer of the endpoint device, such as apple or samsung.
        public var make: Swift.String?
        /// The model name or number of the endpoint device, such as iPhone or SM-G900F.
        public var model: Swift.String?
        /// The model version of the endpoint device.
        public var modelVersion: Swift.String?
        /// The platform of the endpoint device, such as ios.
        public var platform: Swift.String?
        /// The platform version of the endpoint device.
        public var platformVersion: Swift.String?
        /// The time zone of the endpoint, specified as a tz database name value, such as America/Los_Angeles.
        public var timezone: Swift.String?

        public init (
            appVersion: Swift.String? = nil,
            locale: Swift.String? = nil,
            make: Swift.String? = nil,
            model: Swift.String? = nil,
            modelVersion: Swift.String? = nil,
            platform: Swift.String? = nil,
            platformVersion: Swift.String? = nil,
            timezone: Swift.String? = nil
        )
        {
            self.appVersion = appVersion
            self.locale = locale
            self.make = make
            self.model = model
            self.modelVersion = modelVersion
            self.platform = platform
            self.platformVersion = platformVersion
            self.timezone = timezone
        }
    }

}

extension PinpointClientTypes.EndpointItemResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case statusCode = "StatusCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let statusCode = self.statusCode {
            try encodeContainer.encode(statusCode, forKey: .statusCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let statusCodeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
    }
}

extension PinpointClientTypes {
    /// Provides the status code and message that result from processing data for an endpoint.
    public struct EndpointItemResponse: Swift.Equatable {
        /// The custom message that's returned in the response as a result of processing the endpoint data.
        public var message: Swift.String?
        /// The status code that's returned in the response as a result of processing the endpoint data.
        public var statusCode: Swift.Int?

        public init (
            message: Swift.String? = nil,
            statusCode: Swift.Int? = nil
        )
        {
            self.message = message
            self.statusCode = statusCode
        }
    }

}

extension PinpointClientTypes.EndpointLocation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case city = "City"
        case country = "Country"
        case latitude = "Latitude"
        case longitude = "Longitude"
        case postalCode = "PostalCode"
        case region = "Region"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let city = self.city {
            try encodeContainer.encode(city, forKey: .city)
        }
        if let country = self.country {
            try encodeContainer.encode(country, forKey: .country)
        }
        if let latitude = self.latitude {
            try encodeContainer.encode(latitude, forKey: .latitude)
        }
        if let longitude = self.longitude {
            try encodeContainer.encode(longitude, forKey: .longitude)
        }
        if let postalCode = self.postalCode {
            try encodeContainer.encode(postalCode, forKey: .postalCode)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .city)
        city = cityDecoded
        let countryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .country)
        country = countryDecoded
        let latitudeDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .latitude)
        latitude = latitudeDecoded
        let longitudeDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .longitude)
        longitude = longitudeDecoded
        let postalCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .postalCode)
        postalCode = postalCodeDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies geographic information about an endpoint.
    public struct EndpointLocation: Swift.Equatable {
        /// The name of the city where the endpoint is located.
        public var city: Swift.String?
        /// The two-character code, in ISO 3166-1 alpha-2 format, for the country or region where the endpoint is located. For example, US for the United States.
        public var country: Swift.String?
        /// The latitude coordinate of the endpoint location, rounded to one decimal place.
        public var latitude: Swift.Double?
        /// The longitude coordinate of the endpoint location, rounded to one decimal place.
        public var longitude: Swift.Double?
        /// The postal or ZIP code for the area where the endpoint is located.
        public var postalCode: Swift.String?
        /// The name of the region where the endpoint is located. For locations in the United States, this value is the name of a state.
        public var region: Swift.String?

        public init (
            city: Swift.String? = nil,
            country: Swift.String? = nil,
            latitude: Swift.Double? = nil,
            longitude: Swift.Double? = nil,
            postalCode: Swift.String? = nil,
            region: Swift.String? = nil
        )
        {
            self.city = city
            self.country = country
            self.latitude = latitude
            self.longitude = longitude
            self.postalCode = postalCode
            self.region = region
        }
    }

}

extension PinpointClientTypes.EndpointMessageResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address = "Address"
        case deliveryStatus = "DeliveryStatus"
        case messageId = "MessageId"
        case statusCode = "StatusCode"
        case statusMessage = "StatusMessage"
        case updatedToken = "UpdatedToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let address = self.address {
            try encodeContainer.encode(address, forKey: .address)
        }
        if let deliveryStatus = self.deliveryStatus {
            try encodeContainer.encode(deliveryStatus.rawValue, forKey: .deliveryStatus)
        }
        if let messageId = self.messageId {
            try encodeContainer.encode(messageId, forKey: .messageId)
        }
        if let statusCode = self.statusCode {
            try encodeContainer.encode(statusCode, forKey: .statusCode)
        }
        if let statusMessage = self.statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let updatedToken = self.updatedToken {
            try encodeContainer.encode(updatedToken, forKey: .updatedToken)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .address)
        address = addressDecoded
        let deliveryStatusDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.DeliveryStatus.self, forKey: .deliveryStatus)
        deliveryStatus = deliveryStatusDecoded
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
        let statusCodeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let updatedTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updatedToken)
        updatedToken = updatedTokenDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the delivery status and results of sending a message directly to an endpoint.
    public struct EndpointMessageResult: Swift.Equatable {
        /// The endpoint address that the message was delivered to.
        public var address: Swift.String?
        /// The delivery status of the message. Possible values are:
        ///
        /// * DUPLICATE - The endpoint address is a duplicate of another endpoint address. Amazon Pinpoint won't attempt to send the message again.
        ///
        /// * OPT_OUT - The user who's associated with the endpoint has opted out of receiving messages from you. Amazon Pinpoint won't attempt to send the message again.
        ///
        /// * PERMANENT_FAILURE - An error occurred when delivering the message to the endpoint. Amazon Pinpoint won't attempt to send the message again.
        ///
        /// * SUCCESSFUL - The message was successfully delivered to the endpoint.
        ///
        /// * TEMPORARY_FAILURE - A temporary error occurred. Amazon Pinpoint won't attempt to send the message again.
        ///
        /// * THROTTLED - Amazon Pinpoint throttled the operation to send the message to the endpoint.
        ///
        /// * TIMEOUT - The message couldn't be sent within the timeout period.
        ///
        /// * UNKNOWN_FAILURE - An unknown error occurred.
        /// This member is required.
        public var deliveryStatus: PinpointClientTypes.DeliveryStatus?
        /// The unique identifier for the message that was sent.
        public var messageId: Swift.String?
        /// The downstream service status code for delivering the message.
        /// This member is required.
        public var statusCode: Swift.Int?
        /// The status message for delivering the message.
        public var statusMessage: Swift.String?
        /// For push notifications that are sent through the GCM channel, specifies whether the endpoint's device registration token was updated as part of delivering the message.
        public var updatedToken: Swift.String?

        public init (
            address: Swift.String? = nil,
            deliveryStatus: PinpointClientTypes.DeliveryStatus? = nil,
            messageId: Swift.String? = nil,
            statusCode: Swift.Int? = nil,
            statusMessage: Swift.String? = nil,
            updatedToken: Swift.String? = nil
        )
        {
            self.address = address
            self.deliveryStatus = deliveryStatus
            self.messageId = messageId
            self.statusCode = statusCode
            self.statusMessage = statusMessage
            self.updatedToken = updatedToken
        }
    }

}

extension PinpointClientTypes.EndpointRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address = "Address"
        case attributes = "Attributes"
        case channelType = "ChannelType"
        case demographic = "Demographic"
        case effectiveDate = "EffectiveDate"
        case endpointStatus = "EndpointStatus"
        case location = "Location"
        case metrics = "Metrics"
        case optOut = "OptOut"
        case requestId = "RequestId"
        case user = "User"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let address = self.address {
            try encodeContainer.encode(address, forKey: .address)
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, mapOfListOf__string0) in attributes {
                var mapOfListOf__string0Container = attributesContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for __string1 in mapOfListOf__string0 {
                    try mapOfListOf__string0Container.encode(__string1)
                }
            }
        }
        if let channelType = self.channelType {
            try encodeContainer.encode(channelType.rawValue, forKey: .channelType)
        }
        if let demographic = self.demographic {
            try encodeContainer.encode(demographic, forKey: .demographic)
        }
        if let effectiveDate = self.effectiveDate {
            try encodeContainer.encode(effectiveDate, forKey: .effectiveDate)
        }
        if let endpointStatus = self.endpointStatus {
            try encodeContainer.encode(endpointStatus, forKey: .endpointStatus)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let metrics = metrics {
            var metricsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .metrics)
            for (dictKey0, mapOf__double0) in metrics {
                try metricsContainer.encode(mapOf__double0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let optOut = self.optOut {
            try encodeContainer.encode(optOut, forKey: .optOut)
        }
        if let requestId = self.requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let user = self.user {
            try encodeContainer.encode(user, forKey: .user)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .address)
        address = addressDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:[Swift.String]]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listof__string0) in attributesContainer {
                var listof__string0Decoded0: [Swift.String]? = nil
                if let listof__string0 = listof__string0 {
                    listof__string0Decoded0 = [Swift.String]()
                    for string1 in listof__string0 {
                        if let string1 = string1 {
                            listof__string0Decoded0?.append(string1)
                        }
                    }
                }
                attributesDecoded0?[key0] = listof__string0Decoded0
            }
        }
        attributes = attributesDecoded0
        let channelTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ChannelType.self, forKey: .channelType)
        channelType = channelTypeDecoded
        let demographicDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EndpointDemographic.self, forKey: .demographic)
        demographic = demographicDecoded
        let effectiveDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .effectiveDate)
        effectiveDate = effectiveDateDecoded
        let endpointStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointStatus)
        endpointStatus = endpointStatusDecoded
        let locationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EndpointLocation.self, forKey: .location)
        location = locationDecoded
        let metricsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Double?].self, forKey: .metrics)
        var metricsDecoded0: [Swift.String:Swift.Double]? = nil
        if let metricsContainer = metricsContainer {
            metricsDecoded0 = [Swift.String:Swift.Double]()
            for (key0, __double0) in metricsContainer {
                if let __double0 = __double0 {
                    metricsDecoded0?[key0] = __double0
                }
            }
        }
        metrics = metricsDecoded0
        let optOutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .optOut)
        optOut = optOutDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let userDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EndpointUser.self, forKey: .user)
        user = userDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the channel type and other settings for an endpoint.
    public struct EndpointRequest: Swift.Equatable {
        /// The destination address for messages or push notifications that you send to the endpoint. The address varies by channel. For a push-notification channel, use the token provided by the push notification service, such as an Apple Push Notification service (APNs) device token or a Firebase Cloud Messaging (FCM) registration token. For the SMS channel, use a phone number in E.164 format, such as +12065550100. For the email channel, use an email address.
        public var address: Swift.String?
        /// One or more custom attributes that describe the endpoint by associating a name with an array of values. For example, the value of a custom attribute named Interests might be: ["Science", "Music", "Travel"]. You can use these attributes as filter criteria when you create segments. Attribute names are case sensitive. An attribute name can contain up to 50 characters. An attribute value can contain up to 100 characters. When you define the name of a custom attribute, avoid using the following characters: number sign (#), colon (:), question mark (?), backslash (\), and slash (/). The Amazon Pinpoint console can't display attribute names that contain these characters. This restriction doesn't apply to attribute values.
        public var attributes: [Swift.String:[Swift.String]]?
        /// The channel to use when sending messages or push notifications to the endpoint.
        public var channelType: PinpointClientTypes.ChannelType?
        /// The demographic information for the endpoint, such as the time zone and platform.
        public var demographic: PinpointClientTypes.EndpointDemographic?
        /// The date and time, in ISO 8601 format, when the endpoint is updated.
        public var effectiveDate: Swift.String?
        /// Specifies whether to send messages or push notifications to the endpoint. Valid values are: ACTIVE, messages are sent to the endpoint; and, INACTIVE, messages aren’t sent to the endpoint. Amazon Pinpoint automatically sets this value to ACTIVE when you create an endpoint or update an existing endpoint. Amazon Pinpoint automatically sets this value to INACTIVE if you update another endpoint that has the same address specified by the Address property.
        public var endpointStatus: Swift.String?
        /// The geographic information for the endpoint.
        public var location: PinpointClientTypes.EndpointLocation?
        /// One or more custom metrics that your app reports to Amazon Pinpoint for the endpoint.
        public var metrics: [Swift.String:Swift.Double]?
        /// Specifies whether the user who's associated with the endpoint has opted out of receiving messages and push notifications from you. Possible values are: ALL, the user has opted out and doesn't want to receive any messages or push notifications; and, NONE, the user hasn't opted out and wants to receive all messages and push notifications.
        public var optOut: Swift.String?
        /// The unique identifier for the most recent request to update the endpoint.
        public var requestId: Swift.String?
        /// One or more custom attributes that describe the user who's associated with the endpoint.
        public var user: PinpointClientTypes.EndpointUser?

        public init (
            address: Swift.String? = nil,
            attributes: [Swift.String:[Swift.String]]? = nil,
            channelType: PinpointClientTypes.ChannelType? = nil,
            demographic: PinpointClientTypes.EndpointDemographic? = nil,
            effectiveDate: Swift.String? = nil,
            endpointStatus: Swift.String? = nil,
            location: PinpointClientTypes.EndpointLocation? = nil,
            metrics: [Swift.String:Swift.Double]? = nil,
            optOut: Swift.String? = nil,
            requestId: Swift.String? = nil,
            user: PinpointClientTypes.EndpointUser? = nil
        )
        {
            self.address = address
            self.attributes = attributes
            self.channelType = channelType
            self.demographic = demographic
            self.effectiveDate = effectiveDate
            self.endpointStatus = endpointStatus
            self.location = location
            self.metrics = metrics
            self.optOut = optOut
            self.requestId = requestId
            self.user = user
        }
    }

}

extension PinpointClientTypes.EndpointResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address = "Address"
        case applicationId = "ApplicationId"
        case attributes = "Attributes"
        case channelType = "ChannelType"
        case cohortId = "CohortId"
        case creationDate = "CreationDate"
        case demographic = "Demographic"
        case effectiveDate = "EffectiveDate"
        case endpointStatus = "EndpointStatus"
        case id = "Id"
        case location = "Location"
        case metrics = "Metrics"
        case optOut = "OptOut"
        case requestId = "RequestId"
        case user = "User"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let address = self.address {
            try encodeContainer.encode(address, forKey: .address)
        }
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, mapOfListOf__string0) in attributes {
                var mapOfListOf__string0Container = attributesContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for __string1 in mapOfListOf__string0 {
                    try mapOfListOf__string0Container.encode(__string1)
                }
            }
        }
        if let channelType = self.channelType {
            try encodeContainer.encode(channelType.rawValue, forKey: .channelType)
        }
        if let cohortId = self.cohortId {
            try encodeContainer.encode(cohortId, forKey: .cohortId)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let demographic = self.demographic {
            try encodeContainer.encode(demographic, forKey: .demographic)
        }
        if let effectiveDate = self.effectiveDate {
            try encodeContainer.encode(effectiveDate, forKey: .effectiveDate)
        }
        if let endpointStatus = self.endpointStatus {
            try encodeContainer.encode(endpointStatus, forKey: .endpointStatus)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let metrics = metrics {
            var metricsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .metrics)
            for (dictKey0, mapOf__double0) in metrics {
                try metricsContainer.encode(mapOf__double0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let optOut = self.optOut {
            try encodeContainer.encode(optOut, forKey: .optOut)
        }
        if let requestId = self.requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let user = self.user {
            try encodeContainer.encode(user, forKey: .user)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .address)
        address = addressDecoded
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:[Swift.String]]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listof__string0) in attributesContainer {
                var listof__string0Decoded0: [Swift.String]? = nil
                if let listof__string0 = listof__string0 {
                    listof__string0Decoded0 = [Swift.String]()
                    for string1 in listof__string0 {
                        if let string1 = string1 {
                            listof__string0Decoded0?.append(string1)
                        }
                    }
                }
                attributesDecoded0?[key0] = listof__string0Decoded0
            }
        }
        attributes = attributesDecoded0
        let channelTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ChannelType.self, forKey: .channelType)
        channelType = channelTypeDecoded
        let cohortIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cohortId)
        cohortId = cohortIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let demographicDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EndpointDemographic.self, forKey: .demographic)
        demographic = demographicDecoded
        let effectiveDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .effectiveDate)
        effectiveDate = effectiveDateDecoded
        let endpointStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointStatus)
        endpointStatus = endpointStatusDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let locationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EndpointLocation.self, forKey: .location)
        location = locationDecoded
        let metricsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Double?].self, forKey: .metrics)
        var metricsDecoded0: [Swift.String:Swift.Double]? = nil
        if let metricsContainer = metricsContainer {
            metricsDecoded0 = [Swift.String:Swift.Double]()
            for (key0, __double0) in metricsContainer {
                if let __double0 = __double0 {
                    metricsDecoded0?[key0] = __double0
                }
            }
        }
        metrics = metricsDecoded0
        let optOutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .optOut)
        optOut = optOutDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let userDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EndpointUser.self, forKey: .user)
        user = userDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the channel type and other settings for an endpoint.
    public struct EndpointResponse: Swift.Equatable {
        /// The destination address for messages or push notifications that you send to the endpoint. The address varies by channel. For example, the address for a push-notification channel is typically the token provided by a push notification service, such as an Apple Push Notification service (APNs) device token or a Firebase Cloud Messaging (FCM) registration token. The address for the SMS channel is a phone number in E.164 format, such as +12065550100. The address for the email channel is an email address.
        public var address: Swift.String?
        /// The unique identifier for the application that's associated with the endpoint.
        public var applicationId: Swift.String?
        /// One or more custom attributes that describe the endpoint by associating a name with an array of values. For example, the value of a custom attribute named Interests might be: ["Science", "Music", "Travel"]. You can use these attributes as filter criteria when you create segments.
        public var attributes: [Swift.String:[Swift.String]]?
        /// The channel that's used when sending messages or push notifications to the endpoint.
        public var channelType: PinpointClientTypes.ChannelType?
        /// A number from 0-99 that represents the cohort that the endpoint is assigned to. Endpoints are grouped into cohorts randomly, and each cohort contains approximately 1 percent of the endpoints for an application. Amazon Pinpoint assigns cohorts to the holdout or treatment allocations for campaigns.
        public var cohortId: Swift.String?
        /// The date and time, in ISO 8601 format, when the endpoint was created.
        public var creationDate: Swift.String?
        /// The demographic information for the endpoint, such as the time zone and platform.
        public var demographic: PinpointClientTypes.EndpointDemographic?
        /// The date and time, in ISO 8601 format, when the endpoint was last updated.
        public var effectiveDate: Swift.String?
        /// Specifies whether messages or push notifications are sent to the endpoint. Possible values are: ACTIVE, messages are sent to the endpoint; and, INACTIVE, messages aren’t sent to the endpoint. Amazon Pinpoint automatically sets this value to ACTIVE when you create an endpoint or update an existing endpoint. Amazon Pinpoint automatically sets this value to INACTIVE if you update another endpoint that has the same address specified by the Address property.
        public var endpointStatus: Swift.String?
        /// The unique identifier that you assigned to the endpoint. The identifier should be a globally unique identifier (GUID) to ensure that it doesn't conflict with other endpoint identifiers that are associated with the application.
        public var id: Swift.String?
        /// The geographic information for the endpoint.
        public var location: PinpointClientTypes.EndpointLocation?
        /// One or more custom metrics that your app reports to Amazon Pinpoint for the endpoint.
        public var metrics: [Swift.String:Swift.Double]?
        /// Specifies whether the user who's associated with the endpoint has opted out of receiving messages and push notifications from you. Possible values are: ALL, the user has opted out and doesn't want to receive any messages or push notifications; and, NONE, the user hasn't opted out and wants to receive all messages and push notifications.
        public var optOut: Swift.String?
        /// The unique identifier for the most recent request to update the endpoint.
        public var requestId: Swift.String?
        /// One or more custom user attributes that your app reports to Amazon Pinpoint for the user who's associated with the endpoint.
        public var user: PinpointClientTypes.EndpointUser?

        public init (
            address: Swift.String? = nil,
            applicationId: Swift.String? = nil,
            attributes: [Swift.String:[Swift.String]]? = nil,
            channelType: PinpointClientTypes.ChannelType? = nil,
            cohortId: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            demographic: PinpointClientTypes.EndpointDemographic? = nil,
            effectiveDate: Swift.String? = nil,
            endpointStatus: Swift.String? = nil,
            id: Swift.String? = nil,
            location: PinpointClientTypes.EndpointLocation? = nil,
            metrics: [Swift.String:Swift.Double]? = nil,
            optOut: Swift.String? = nil,
            requestId: Swift.String? = nil,
            user: PinpointClientTypes.EndpointUser? = nil
        )
        {
            self.address = address
            self.applicationId = applicationId
            self.attributes = attributes
            self.channelType = channelType
            self.cohortId = cohortId
            self.creationDate = creationDate
            self.demographic = demographic
            self.effectiveDate = effectiveDate
            self.endpointStatus = endpointStatus
            self.id = id
            self.location = location
            self.metrics = metrics
            self.optOut = optOut
            self.requestId = requestId
            self.user = user
        }
    }

}

extension PinpointClientTypes.EndpointSendConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bodyOverride = "BodyOverride"
        case context = "Context"
        case rawContent = "RawContent"
        case substitutions = "Substitutions"
        case titleOverride = "TitleOverride"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bodyOverride = self.bodyOverride {
            try encodeContainer.encode(bodyOverride, forKey: .bodyOverride)
        }
        if let context = context {
            var contextContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .context)
            for (dictKey0, mapOf__string0) in context {
                try contextContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let rawContent = self.rawContent {
            try encodeContainer.encode(rawContent, forKey: .rawContent)
        }
        if let substitutions = substitutions {
            var substitutionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .substitutions)
            for (dictKey0, mapOfListOf__string0) in substitutions {
                var mapOfListOf__string0Container = substitutionsContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for __string1 in mapOfListOf__string0 {
                    try mapOfListOf__string0Container.encode(__string1)
                }
            }
        }
        if let titleOverride = self.titleOverride {
            try encodeContainer.encode(titleOverride, forKey: .titleOverride)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bodyOverrideDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bodyOverride)
        bodyOverride = bodyOverrideDecoded
        let contextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .context)
        var contextDecoded0: [Swift.String:Swift.String]? = nil
        if let contextContainer = contextContainer {
            contextDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in contextContainer {
                if let __string0 = __string0 {
                    contextDecoded0?[key0] = __string0
                }
            }
        }
        context = contextDecoded0
        let rawContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rawContent)
        rawContent = rawContentDecoded
        let substitutionsContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .substitutions)
        var substitutionsDecoded0: [Swift.String:[Swift.String]]? = nil
        if let substitutionsContainer = substitutionsContainer {
            substitutionsDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listof__string0) in substitutionsContainer {
                var listof__string0Decoded0: [Swift.String]? = nil
                if let listof__string0 = listof__string0 {
                    listof__string0Decoded0 = [Swift.String]()
                    for string1 in listof__string0 {
                        if let string1 = string1 {
                            listof__string0Decoded0?.append(string1)
                        }
                    }
                }
                substitutionsDecoded0?[key0] = listof__string0Decoded0
            }
        }
        substitutions = substitutionsDecoded0
        let titleOverrideDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .titleOverride)
        titleOverride = titleOverrideDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the content, including message variables and attributes, to use in a message that's sent directly to an endpoint.
    public struct EndpointSendConfiguration: Swift.Equatable {
        /// The body of the message. If specified, this value overrides the default message body.
        public var bodyOverride: Swift.String?
        /// A map of custom attributes to attach to the message for the address. Attribute names are case sensitive. For a push notification, this payload is added to the data.pinpoint object. For an email or text message, this payload is added to email/SMS delivery receipt event attributes.
        public var context: [Swift.String:Swift.String]?
        /// The raw, JSON-formatted string to use as the payload for the message. If specified, this value overrides all other values for the message.
        public var rawContent: Swift.String?
        /// A map of the message variables to merge with the variables specified for the default message (DefaultMessage.Substitutions). The variables specified in this map take precedence over all other variables.
        public var substitutions: [Swift.String:[Swift.String]]?
        /// The title or subject line of the message. If specified, this value overrides the default message title or subject line.
        public var titleOverride: Swift.String?

        public init (
            bodyOverride: Swift.String? = nil,
            context: [Swift.String:Swift.String]? = nil,
            rawContent: Swift.String? = nil,
            substitutions: [Swift.String:[Swift.String]]? = nil,
            titleOverride: Swift.String? = nil
        )
        {
            self.bodyOverride = bodyOverride
            self.context = context
            self.rawContent = rawContent
            self.substitutions = substitutions
            self.titleOverride = titleOverride
        }
    }

}

extension PinpointClientTypes.EndpointUser: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userAttributes = "UserAttributes"
        case userId = "UserId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let userAttributes = userAttributes {
            var userAttributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .userAttributes)
            for (dictKey0, mapOfListOf__string0) in userAttributes {
                var mapOfListOf__string0Container = userAttributesContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for __string1 in mapOfListOf__string0 {
                    try mapOfListOf__string0Container.encode(__string1)
                }
            }
        }
        if let userId = self.userId {
            try encodeContainer.encode(userId, forKey: .userId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userAttributesContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .userAttributes)
        var userAttributesDecoded0: [Swift.String:[Swift.String]]? = nil
        if let userAttributesContainer = userAttributesContainer {
            userAttributesDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listof__string0) in userAttributesContainer {
                var listof__string0Decoded0: [Swift.String]? = nil
                if let listof__string0 = listof__string0 {
                    listof__string0Decoded0 = [Swift.String]()
                    for string1 in listof__string0 {
                        if let string1 = string1 {
                            listof__string0Decoded0?.append(string1)
                        }
                    }
                }
                userAttributesDecoded0?[key0] = listof__string0Decoded0
            }
        }
        userAttributes = userAttributesDecoded0
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies data for one or more attributes that describe the user who's associated with an endpoint.
    public struct EndpointUser: Swift.Equatable {
        /// One or more custom attributes that describe the user by associating a name with an array of values. For example, the value of an attribute named Interests might be: ["Science", "Music", "Travel"]. You can use these attributes as filter criteria when you create segments. Attribute names are case sensitive. An attribute name can contain up to 50 characters. An attribute value can contain up to 100 characters. When you define the name of a custom attribute, avoid using the following characters: number sign (#), colon (:), question mark (?), backslash (\), and slash (/). The Amazon Pinpoint console can't display attribute names that contain these characters. This restriction doesn't apply to attribute values.
        public var userAttributes: [Swift.String:[Swift.String]]?
        /// The unique identifier for the user.
        public var userId: Swift.String?

        public init (
            userAttributes: [Swift.String:[Swift.String]]? = nil,
            userId: Swift.String? = nil
        )
        {
            self.userAttributes = userAttributes
            self.userId = userId
        }
    }

}

extension PinpointClientTypes.EndpointsResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case item = "Item"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let item = item {
            var itemContainer = encodeContainer.nestedUnkeyedContainer(forKey: .item)
            for endpointresponse0 in item {
                try itemContainer.encode(endpointresponse0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([PinpointClientTypes.EndpointResponse?].self, forKey: .item)
        var itemDecoded0:[PinpointClientTypes.EndpointResponse]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [PinpointClientTypes.EndpointResponse]()
            for structure0 in itemContainer {
                if let structure0 = structure0 {
                    itemDecoded0?.append(structure0)
                }
            }
        }
        item = itemDecoded0
    }
}

extension PinpointClientTypes {
    /// Provides information about all the endpoints that are associated with a user ID.
    public struct EndpointsResponse: Swift.Equatable {
        /// An array of responses, one for each endpoint that's associated with the user ID.
        /// This member is required.
        public var item: [PinpointClientTypes.EndpointResponse]?

        public init (
            item: [PinpointClientTypes.EndpointResponse]? = nil
        )
        {
            self.item = item
        }
    }

}

extension PinpointClientTypes.Event: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appPackageName = "AppPackageName"
        case appTitle = "AppTitle"
        case appVersionCode = "AppVersionCode"
        case attributes = "Attributes"
        case clientSdkVersion = "ClientSdkVersion"
        case eventType = "EventType"
        case metrics = "Metrics"
        case sdkName = "SdkName"
        case session = "Session"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appPackageName = self.appPackageName {
            try encodeContainer.encode(appPackageName, forKey: .appPackageName)
        }
        if let appTitle = self.appTitle {
            try encodeContainer.encode(appTitle, forKey: .appTitle)
        }
        if let appVersionCode = self.appVersionCode {
            try encodeContainer.encode(appVersionCode, forKey: .appVersionCode)
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, mapOf__string0) in attributes {
                try attributesContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let clientSdkVersion = self.clientSdkVersion {
            try encodeContainer.encode(clientSdkVersion, forKey: .clientSdkVersion)
        }
        if let eventType = self.eventType {
            try encodeContainer.encode(eventType, forKey: .eventType)
        }
        if let metrics = metrics {
            var metricsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .metrics)
            for (dictKey0, mapOf__double0) in metrics {
                try metricsContainer.encode(mapOf__double0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let sdkName = self.sdkName {
            try encodeContainer.encode(sdkName, forKey: .sdkName)
        }
        if let session = self.session {
            try encodeContainer.encode(session, forKey: .session)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appPackageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appPackageName)
        appPackageName = appPackageNameDecoded
        let appTitleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appTitle)
        appTitle = appTitleDecoded
        let appVersionCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appVersionCode)
        appVersionCode = appVersionCodeDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in attributesContainer {
                if let __string0 = __string0 {
                    attributesDecoded0?[key0] = __string0
                }
            }
        }
        attributes = attributesDecoded0
        let clientSdkVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientSdkVersion)
        clientSdkVersion = clientSdkVersionDecoded
        let eventTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventType)
        eventType = eventTypeDecoded
        let metricsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Double?].self, forKey: .metrics)
        var metricsDecoded0: [Swift.String:Swift.Double]? = nil
        if let metricsContainer = metricsContainer {
            metricsDecoded0 = [Swift.String:Swift.Double]()
            for (key0, __double0) in metricsContainer {
                if let __double0 = __double0 {
                    metricsDecoded0?[key0] = __double0
                }
            }
        }
        metrics = metricsDecoded0
        let sdkNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sdkName)
        sdkName = sdkNameDecoded
        let sessionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Session.self, forKey: .session)
        session = sessionDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestamp)
        timestamp = timestampDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies information about an event that reports data to Amazon Pinpoint.
    public struct Event: Swift.Equatable {
        /// The package name of the app that's recording the event.
        public var appPackageName: Swift.String?
        /// The title of the app that's recording the event.
        public var appTitle: Swift.String?
        /// The version number of the app that's recording the event.
        public var appVersionCode: Swift.String?
        /// One or more custom attributes that are associated with the event.
        public var attributes: [Swift.String:Swift.String]?
        /// The version of the SDK that's running on the client device.
        public var clientSdkVersion: Swift.String?
        /// The name of the event.
        /// This member is required.
        public var eventType: Swift.String?
        /// One or more custom metrics that are associated with the event.
        public var metrics: [Swift.String:Swift.Double]?
        /// The name of the SDK that's being used to record the event.
        public var sdkName: Swift.String?
        /// Information about the session in which the event occurred.
        public var session: PinpointClientTypes.Session?
        /// The date and time, in ISO 8601 format, when the event occurred.
        /// This member is required.
        public var timestamp: Swift.String?

        public init (
            appPackageName: Swift.String? = nil,
            appTitle: Swift.String? = nil,
            appVersionCode: Swift.String? = nil,
            attributes: [Swift.String:Swift.String]? = nil,
            clientSdkVersion: Swift.String? = nil,
            eventType: Swift.String? = nil,
            metrics: [Swift.String:Swift.Double]? = nil,
            sdkName: Swift.String? = nil,
            session: PinpointClientTypes.Session? = nil,
            timestamp: Swift.String? = nil
        )
        {
            self.appPackageName = appPackageName
            self.appTitle = appTitle
            self.appVersionCode = appVersionCode
            self.attributes = attributes
            self.clientSdkVersion = clientSdkVersion
            self.eventType = eventType
            self.metrics = metrics
            self.sdkName = sdkName
            self.session = session
            self.timestamp = timestamp
        }
    }

}

extension PinpointClientTypes.EventCondition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case messageActivity = "MessageActivity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensions = self.dimensions {
            try encodeContainer.encode(dimensions, forKey: .dimensions)
        }
        if let messageActivity = self.messageActivity {
            try encodeContainer.encode(messageActivity, forKey: .messageActivity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EventDimensions.self, forKey: .dimensions)
        dimensions = dimensionsDecoded
        let messageActivityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageActivity)
        messageActivity = messageActivityDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the conditions to evaluate for an event that applies to an activity in a journey.
    public struct EventCondition: Swift.Equatable {
        /// The dimensions for the event filter to use for the activity.
        public var dimensions: PinpointClientTypes.EventDimensions?
        /// The message identifier (message_id) for the message to use when determining whether message events meet the condition.
        public var messageActivity: Swift.String?

        public init (
            dimensions: PinpointClientTypes.EventDimensions? = nil,
            messageActivity: Swift.String? = nil
        )
        {
            self.dimensions = dimensions
            self.messageActivity = messageActivity
        }
    }

}

extension PinpointClientTypes.EventDimensions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case eventType = "EventType"
        case metrics = "Metrics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, mapOfAttributeDimension0) in attributes {
                try attributesContainer.encode(mapOfAttributeDimension0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let eventType = self.eventType {
            try encodeContainer.encode(eventType, forKey: .eventType)
        }
        if let metrics = metrics {
            var metricsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .metrics)
            for (dictKey0, mapOfMetricDimension0) in metrics {
                try metricsContainer.encode(mapOfMetricDimension0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.AttributeDimension?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:PinpointClientTypes.AttributeDimension]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:PinpointClientTypes.AttributeDimension]()
            for (key0, attributedimension0) in attributesContainer {
                if let attributedimension0 = attributedimension0 {
                    attributesDecoded0?[key0] = attributedimension0
                }
            }
        }
        attributes = attributesDecoded0
        let eventTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SetDimension.self, forKey: .eventType)
        eventType = eventTypeDecoded
        let metricsContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.MetricDimension?].self, forKey: .metrics)
        var metricsDecoded0: [Swift.String:PinpointClientTypes.MetricDimension]? = nil
        if let metricsContainer = metricsContainer {
            metricsDecoded0 = [Swift.String:PinpointClientTypes.MetricDimension]()
            for (key0, metricdimension0) in metricsContainer {
                if let metricdimension0 = metricdimension0 {
                    metricsDecoded0?[key0] = metricdimension0
                }
            }
        }
        metrics = metricsDecoded0
    }
}

extension PinpointClientTypes {
    /// Specifies the dimensions for an event filter that determines when a campaign is sent or a journey activity is performed.
    public struct EventDimensions: Swift.Equatable {
        /// One or more custom attributes that your application reports to Amazon Pinpoint. You can use these attributes as selection criteria when you create an event filter.
        public var attributes: [Swift.String:PinpointClientTypes.AttributeDimension]?
        /// The name of the event that causes the campaign to be sent or the journey activity to be performed. This can be a standard event that Amazon Pinpoint generates, such as _email.delivered. For campaigns, this can also be a custom event that's specific to your application. For information about standard events, see [Streaming Amazon Pinpoint Events](https://docs.aws.amazon.com/pinpoint/latest/developerguide/event-streams.html) in the Amazon Pinpoint Developer Guide.
        public var eventType: PinpointClientTypes.SetDimension?
        /// One or more custom metrics that your application reports to Amazon Pinpoint. You can use these metrics as selection criteria when you create an event filter.
        public var metrics: [Swift.String:PinpointClientTypes.MetricDimension]?

        public init (
            attributes: [Swift.String:PinpointClientTypes.AttributeDimension]? = nil,
            eventType: PinpointClientTypes.SetDimension? = nil,
            metrics: [Swift.String:PinpointClientTypes.MetricDimension]? = nil
        )
        {
            self.attributes = attributes
            self.eventType = eventType
            self.metrics = metrics
        }
    }

}

extension PinpointClientTypes.EventFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case filterType = "FilterType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensions = self.dimensions {
            try encodeContainer.encode(dimensions, forKey: .dimensions)
        }
        if let filterType = self.filterType {
            try encodeContainer.encode(filterType.rawValue, forKey: .filterType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EventDimensions.self, forKey: .dimensions)
        dimensions = dimensionsDecoded
        let filterTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.FilterType.self, forKey: .filterType)
        filterType = filterTypeDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the settings for an event that causes a campaign to be sent or a journey activity to be performed.
    public struct EventFilter: Swift.Equatable {
        /// The dimensions for the event filter to use for the campaign or the journey activity.
        /// This member is required.
        public var dimensions: PinpointClientTypes.EventDimensions?
        /// The type of event that causes the campaign to be sent or the journey activity to be performed. Valid values are: SYSTEM, sends the campaign or performs the activity when a system event occurs; and, ENDPOINT, sends the campaign or performs the activity when an endpoint event (Events resource) occurs.
        /// This member is required.
        public var filterType: PinpointClientTypes.FilterType?

        public init (
            dimensions: PinpointClientTypes.EventDimensions? = nil,
            filterType: PinpointClientTypes.FilterType? = nil
        )
        {
            self.dimensions = dimensions
            self.filterType = filterType
        }
    }

}

extension PinpointClientTypes.EventItemResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case statusCode = "StatusCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let statusCode = self.statusCode {
            try encodeContainer.encode(statusCode, forKey: .statusCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let statusCodeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
    }
}

extension PinpointClientTypes {
    /// Provides the status code and message that result from processing an event.
    public struct EventItemResponse: Swift.Equatable {
        /// A custom message that's returned in the response as a result of processing the event.
        public var message: Swift.String?
        /// The status code that's returned in the response as a result of processing the event. Possible values are: 202, for events that were accepted; and, 400, for events that weren't valid.
        public var statusCode: Swift.Int?

        public init (
            message: Swift.String? = nil,
            statusCode: Swift.Int? = nil
        )
        {
            self.message = message
            self.statusCode = statusCode
        }
    }

}

extension PinpointClientTypes.EventStartCondition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventFilter = "EventFilter"
        case segmentId = "SegmentId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventFilter = self.eventFilter {
            try encodeContainer.encode(eventFilter, forKey: .eventFilter)
        }
        if let segmentId = self.segmentId {
            try encodeContainer.encode(segmentId, forKey: .segmentId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventFilterDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EventFilter.self, forKey: .eventFilter)
        eventFilter = eventFilterDecoded
        let segmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .segmentId)
        segmentId = segmentIdDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the settings for an event that causes a journey activity to start.
    public struct EventStartCondition: Swift.Equatable {
        /// Specifies the settings for an event that causes a campaign to be sent or a journey activity to be performed.
        public var eventFilter: PinpointClientTypes.EventFilter?
        public var segmentId: Swift.String?

        public init (
            eventFilter: PinpointClientTypes.EventFilter? = nil,
            segmentId: Swift.String? = nil
        )
        {
            self.eventFilter = eventFilter
            self.segmentId = segmentId
        }
    }

}

extension PinpointClientTypes.EventStream: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case destinationStreamArn = "DestinationStreamArn"
        case externalId = "ExternalId"
        case lastModifiedDate = "LastModifiedDate"
        case lastUpdatedBy = "LastUpdatedBy"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let destinationStreamArn = self.destinationStreamArn {
            try encodeContainer.encode(destinationStreamArn, forKey: .destinationStreamArn)
        }
        if let externalId = self.externalId {
            try encodeContainer.encode(externalId, forKey: .externalId)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let lastUpdatedBy = self.lastUpdatedBy {
            try encodeContainer.encode(lastUpdatedBy, forKey: .lastUpdatedBy)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let destinationStreamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationStreamArn)
        destinationStreamArn = destinationStreamArnDecoded
        let externalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalId)
        externalId = externalIdDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let lastUpdatedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdatedBy)
        lastUpdatedBy = lastUpdatedByDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies settings for publishing event data to an Amazon Kinesis data stream or an Amazon Kinesis Data Firehose delivery stream.
    public struct EventStream: Swift.Equatable {
        /// The unique identifier for the application to publish event data for.
        /// This member is required.
        public var applicationId: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon Kinesis data stream or Amazon Kinesis Data Firehose delivery stream to publish event data to. For a Kinesis data stream, the ARN format is: arn:aws:kinesis:region:account-id:stream/stream_name For a Kinesis Data Firehose delivery stream, the ARN format is: arn:aws:firehose:region:account-id:deliverystream/stream_name
        /// This member is required.
        public var destinationStreamArn: Swift.String?
        /// (Deprecated) Your AWS account ID, which you assigned to an external ID key in an IAM trust policy. Amazon Pinpoint previously used this value to assume an IAM role when publishing event data, but we removed this requirement. We don't recommend use of external IDs for IAM roles that are assumed by Amazon Pinpoint.
        public var externalId: Swift.String?
        /// The date, in ISO 8601 format, when the event stream was last modified.
        public var lastModifiedDate: Swift.String?
        /// The IAM user who last modified the event stream.
        public var lastUpdatedBy: Swift.String?
        /// The AWS Identity and Access Management (IAM) role that authorizes Amazon Pinpoint to publish event data to the stream in your AWS account.
        /// This member is required.
        public var roleArn: Swift.String?

        public init (
            applicationId: Swift.String? = nil,
            destinationStreamArn: Swift.String? = nil,
            externalId: Swift.String? = nil,
            lastModifiedDate: Swift.String? = nil,
            lastUpdatedBy: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.applicationId = applicationId
            self.destinationStreamArn = destinationStreamArn
            self.externalId = externalId
            self.lastModifiedDate = lastModifiedDate
            self.lastUpdatedBy = lastUpdatedBy
            self.roleArn = roleArn
        }
    }

}

extension PinpointClientTypes.EventsBatch: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpoint = "Endpoint"
        case events = "Events"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpoint = self.endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let events = events {
            var eventsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .events)
            for (dictKey0, mapOfEvent0) in events {
                try eventsContainer.encode(mapOfEvent0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.PublicEndpoint.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let eventsContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.Event?].self, forKey: .events)
        var eventsDecoded0: [Swift.String:PinpointClientTypes.Event]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [Swift.String:PinpointClientTypes.Event]()
            for (key0, event0) in eventsContainer {
                if let event0 = event0 {
                    eventsDecoded0?[key0] = event0
                }
            }
        }
        events = eventsDecoded0
    }
}

extension PinpointClientTypes {
    /// Specifies a batch of endpoints and events to process.
    public struct EventsBatch: Swift.Equatable {
        /// A set of properties and attributes that are associated with the endpoint.
        /// This member is required.
        public var endpoint: PinpointClientTypes.PublicEndpoint?
        /// A set of properties that are associated with the event.
        /// This member is required.
        public var events: [Swift.String:PinpointClientTypes.Event]?

        public init (
            endpoint: PinpointClientTypes.PublicEndpoint? = nil,
            events: [Swift.String:PinpointClientTypes.Event]? = nil
        )
        {
            self.endpoint = endpoint
            self.events = events
        }
    }

}

extension PinpointClientTypes.EventsRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchItem = "BatchItem"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchItem = batchItem {
            var batchItemContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .batchItem)
            for (dictKey0, mapOfEventsBatch0) in batchItem {
                try batchItemContainer.encode(mapOfEventsBatch0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchItemContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.EventsBatch?].self, forKey: .batchItem)
        var batchItemDecoded0: [Swift.String:PinpointClientTypes.EventsBatch]? = nil
        if let batchItemContainer = batchItemContainer {
            batchItemDecoded0 = [Swift.String:PinpointClientTypes.EventsBatch]()
            for (key0, eventsbatch0) in batchItemContainer {
                if let eventsbatch0 = eventsbatch0 {
                    batchItemDecoded0?[key0] = eventsbatch0
                }
            }
        }
        batchItem = batchItemDecoded0
    }
}

extension PinpointClientTypes {
    /// Specifies a batch of events to process.
    public struct EventsRequest: Swift.Equatable {
        /// The batch of events to process. For each item in a batch, the endpoint ID acts as a key that has an EventsBatch object as its value.
        /// This member is required.
        public var batchItem: [Swift.String:PinpointClientTypes.EventsBatch]?

        public init (
            batchItem: [Swift.String:PinpointClientTypes.EventsBatch]? = nil
        )
        {
            self.batchItem = batchItem
        }
    }

}

extension PinpointClientTypes.EventsResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case results = "Results"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let results = results {
            var resultsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .results)
            for (dictKey0, mapOfItemResponse0) in results {
                try resultsContainer.encode(mapOfItemResponse0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultsContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.ItemResponse?].self, forKey: .results)
        var resultsDecoded0: [Swift.String:PinpointClientTypes.ItemResponse]? = nil
        if let resultsContainer = resultsContainer {
            resultsDecoded0 = [Swift.String:PinpointClientTypes.ItemResponse]()
            for (key0, itemresponse0) in resultsContainer {
                if let itemresponse0 = itemresponse0 {
                    resultsDecoded0?[key0] = itemresponse0
                }
            }
        }
        results = resultsDecoded0
    }
}

extension PinpointClientTypes {
    /// Provides information about endpoints and the events that they're associated with.
    public struct EventsResponse: Swift.Equatable {
        /// A map that contains a multipart response for each endpoint. For each item in this object, the endpoint ID is the key and the item response is the value. If no item response exists, the value can also be one of the following: 202, the request was processed successfully; or 400, the payload wasn't valid or required fields were missing.
        public var results: [Swift.String:PinpointClientTypes.ItemResponse]?

        public init (
            results: [Swift.String:PinpointClientTypes.ItemResponse]? = nil
        )
        {
            self.results = results
        }
    }

}

extension PinpointClientTypes.ExportJobRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case roleArn = "RoleArn"
        case s3UrlPrefix = "S3UrlPrefix"
        case segmentId = "SegmentId"
        case segmentVersion = "SegmentVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let s3UrlPrefix = self.s3UrlPrefix {
            try encodeContainer.encode(s3UrlPrefix, forKey: .s3UrlPrefix)
        }
        if let segmentId = self.segmentId {
            try encodeContainer.encode(segmentId, forKey: .segmentId)
        }
        if let segmentVersion = self.segmentVersion {
            try encodeContainer.encode(segmentVersion, forKey: .segmentVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let s3UrlPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3UrlPrefix)
        s3UrlPrefix = s3UrlPrefixDecoded
        let segmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .segmentId)
        segmentId = segmentIdDecoded
        let segmentVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentVersion)
        segmentVersion = segmentVersionDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the settings for a job that exports endpoint definitions to an Amazon Simple Storage Service (Amazon S3) bucket.
    public struct ExportJobRequest: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon Pinpoint to access the Amazon S3 location where you want to export endpoint definitions to.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The URL of the location in an Amazon Simple Storage Service (Amazon S3) bucket where you want to export endpoint definitions to. This location is typically a folder that contains multiple files. The URL should be in the following format: s3://bucket-name/folder-name/.
        /// This member is required.
        public var s3UrlPrefix: Swift.String?
        /// The identifier for the segment to export endpoint definitions from. If you don't specify this value, Amazon Pinpoint exports definitions for all the endpoints that are associated with the application.
        public var segmentId: Swift.String?
        /// The version of the segment to export endpoint definitions from, if specified.
        public var segmentVersion: Swift.Int?

        public init (
            roleArn: Swift.String? = nil,
            s3UrlPrefix: Swift.String? = nil,
            segmentId: Swift.String? = nil,
            segmentVersion: Swift.Int? = nil
        )
        {
            self.roleArn = roleArn
            self.s3UrlPrefix = s3UrlPrefix
            self.segmentId = segmentId
            self.segmentVersion = segmentVersion
        }
    }

}

extension PinpointClientTypes.ExportJobResource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case roleArn = "RoleArn"
        case s3UrlPrefix = "S3UrlPrefix"
        case segmentId = "SegmentId"
        case segmentVersion = "SegmentVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let s3UrlPrefix = self.s3UrlPrefix {
            try encodeContainer.encode(s3UrlPrefix, forKey: .s3UrlPrefix)
        }
        if let segmentId = self.segmentId {
            try encodeContainer.encode(segmentId, forKey: .segmentId)
        }
        if let segmentVersion = self.segmentVersion {
            try encodeContainer.encode(segmentVersion, forKey: .segmentVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let s3UrlPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3UrlPrefix)
        s3UrlPrefix = s3UrlPrefixDecoded
        let segmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .segmentId)
        segmentId = segmentIdDecoded
        let segmentVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentVersion)
        segmentVersion = segmentVersionDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the resource settings for a job that exports endpoint definitions to a file. The file can be added directly to an Amazon Simple Storage Service (Amazon S3) bucket by using the Amazon Pinpoint API or downloaded directly to a computer by using the Amazon Pinpoint console.
    public struct ExportJobResource: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorized Amazon Pinpoint to access the Amazon S3 location where the endpoint definitions were exported to.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The URL of the location in an Amazon Simple Storage Service (Amazon S3) bucket where the endpoint definitions were exported to. This location is typically a folder that contains multiple files. The URL should be in the following format: s3://bucket-name/folder-name/.
        /// This member is required.
        public var s3UrlPrefix: Swift.String?
        /// The identifier for the segment that the endpoint definitions were exported from. If this value isn't present, Amazon Pinpoint exported definitions for all the endpoints that are associated with the application.
        public var segmentId: Swift.String?
        /// The version of the segment that the endpoint definitions were exported from.
        public var segmentVersion: Swift.Int?

        public init (
            roleArn: Swift.String? = nil,
            s3UrlPrefix: Swift.String? = nil,
            segmentId: Swift.String? = nil,
            segmentVersion: Swift.Int? = nil
        )
        {
            self.roleArn = roleArn
            self.s3UrlPrefix = s3UrlPrefix
            self.segmentId = segmentId
            self.segmentVersion = segmentVersion
        }
    }

}

extension PinpointClientTypes.ExportJobResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case completedPieces = "CompletedPieces"
        case completionDate = "CompletionDate"
        case creationDate = "CreationDate"
        case definition = "Definition"
        case failedPieces = "FailedPieces"
        case failures = "Failures"
        case id = "Id"
        case jobStatus = "JobStatus"
        case totalFailures = "TotalFailures"
        case totalPieces = "TotalPieces"
        case totalProcessed = "TotalProcessed"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let completedPieces = self.completedPieces {
            try encodeContainer.encode(completedPieces, forKey: .completedPieces)
        }
        if let completionDate = self.completionDate {
            try encodeContainer.encode(completionDate, forKey: .completionDate)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let definition = self.definition {
            try encodeContainer.encode(definition, forKey: .definition)
        }
        if let failedPieces = self.failedPieces {
            try encodeContainer.encode(failedPieces, forKey: .failedPieces)
        }
        if let failures = failures {
            var failuresContainer = encodeContainer.nestedUnkeyedContainer(forKey: .failures)
            for __string0 in failures {
                try failuresContainer.encode(__string0)
            }
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let jobStatus = self.jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let totalFailures = self.totalFailures {
            try encodeContainer.encode(totalFailures, forKey: .totalFailures)
        }
        if let totalPieces = self.totalPieces {
            try encodeContainer.encode(totalPieces, forKey: .totalPieces)
        }
        if let totalProcessed = self.totalProcessed {
            try encodeContainer.encode(totalProcessed, forKey: .totalProcessed)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let completedPiecesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .completedPieces)
        completedPieces = completedPiecesDecoded
        let completionDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .completionDate)
        completionDate = completionDateDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let definitionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ExportJobResource.self, forKey: .definition)
        definition = definitionDecoded
        let failedPiecesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failedPieces)
        failedPieces = failedPiecesDecoded
        let failuresContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .failures)
        var failuresDecoded0:[Swift.String]? = nil
        if let failuresContainer = failuresContainer {
            failuresDecoded0 = [Swift.String]()
            for string0 in failuresContainer {
                if let string0 = string0 {
                    failuresDecoded0?.append(string0)
                }
            }
        }
        failures = failuresDecoded0
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let totalFailuresDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalFailures)
        totalFailures = totalFailuresDecoded
        let totalPiecesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalPieces)
        totalPieces = totalPiecesDecoded
        let totalProcessedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalProcessed)
        totalProcessed = totalProcessedDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the status and settings of a job that exports endpoint definitions to a file. The file can be added directly to an Amazon Simple Storage Service (Amazon S3) bucket by using the Amazon Pinpoint API or downloaded directly to a computer by using the Amazon Pinpoint console.
    public struct ExportJobResponse: Swift.Equatable {
        /// The unique identifier for the application that's associated with the export job.
        /// This member is required.
        public var applicationId: Swift.String?
        /// The number of pieces that were processed successfully (completed) by the export job, as of the time of the request.
        public var completedPieces: Swift.Int?
        /// The date, in ISO 8601 format, when the export job was completed.
        public var completionDate: Swift.String?
        /// The date, in ISO 8601 format, when the export job was created.
        /// This member is required.
        public var creationDate: Swift.String?
        /// The resource settings that apply to the export job.
        /// This member is required.
        public var definition: PinpointClientTypes.ExportJobResource?
        /// The number of pieces that weren't processed successfully (failed) by the export job, as of the time of the request.
        public var failedPieces: Swift.Int?
        /// An array of entries, one for each of the first 100 entries that weren't processed successfully (failed) by the export job, if any.
        public var failures: [Swift.String]?
        /// The unique identifier for the export job.
        /// This member is required.
        public var id: Swift.String?
        /// The status of the export job. The job status is FAILED if Amazon Pinpoint wasn't able to process one or more pieces in the job.
        /// This member is required.
        public var jobStatus: PinpointClientTypes.JobStatus?
        /// The total number of endpoint definitions that weren't processed successfully (failed) by the export job, typically because an error, such as a syntax error, occurred.
        public var totalFailures: Swift.Int?
        /// The total number of pieces that must be processed to complete the export job. Each piece consists of an approximately equal portion of the endpoint definitions that are part of the export job.
        public var totalPieces: Swift.Int?
        /// The total number of endpoint definitions that were processed by the export job.
        public var totalProcessed: Swift.Int?
        /// The job type. This value is EXPORT for export jobs.
        /// This member is required.
        public var type: Swift.String?

        public init (
            applicationId: Swift.String? = nil,
            completedPieces: Swift.Int? = nil,
            completionDate: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            definition: PinpointClientTypes.ExportJobResource? = nil,
            failedPieces: Swift.Int? = nil,
            failures: [Swift.String]? = nil,
            id: Swift.String? = nil,
            jobStatus: PinpointClientTypes.JobStatus? = nil,
            totalFailures: Swift.Int? = nil,
            totalPieces: Swift.Int? = nil,
            totalProcessed: Swift.Int? = nil,
            type: Swift.String? = nil
        )
        {
            self.applicationId = applicationId
            self.completedPieces = completedPieces
            self.completionDate = completionDate
            self.creationDate = creationDate
            self.definition = definition
            self.failedPieces = failedPieces
            self.failures = failures
            self.id = id
            self.jobStatus = jobStatus
            self.totalFailures = totalFailures
            self.totalPieces = totalPieces
            self.totalProcessed = totalProcessed
            self.type = type
        }
    }

}

extension PinpointClientTypes.ExportJobsResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case item = "Item"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let item = item {
            var itemContainer = encodeContainer.nestedUnkeyedContainer(forKey: .item)
            for exportjobresponse0 in item {
                try itemContainer.encode(exportjobresponse0)
            }
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([PinpointClientTypes.ExportJobResponse?].self, forKey: .item)
        var itemDecoded0:[PinpointClientTypes.ExportJobResponse]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [PinpointClientTypes.ExportJobResponse]()
            for structure0 in itemContainer {
                if let structure0 = structure0 {
                    itemDecoded0?.append(structure0)
                }
            }
        }
        item = itemDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about all the export jobs that are associated with an application or segment. An export job is a job that exports endpoint definitions to a file.
    public struct ExportJobsResponse: Swift.Equatable {
        /// An array of responses, one for each export job that's associated with the application (Export Jobs resource) or segment (Segment Export Jobs resource).
        /// This member is required.
        public var item: [PinpointClientTypes.ExportJobResponse]?
        /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
        public var nextToken: Swift.String?

        public init (
            item: [PinpointClientTypes.ExportJobResponse]? = nil,
            nextToken: Swift.String? = nil
        )
        {
            self.item = item
            self.nextToken = nextToken
        }
    }

}

extension PinpointClientTypes {
    public enum FilterType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case endpoint
        case system
        case sdkUnknown(Swift.String)

        public static var allCases: [FilterType] {
            return [
                .endpoint,
                .system,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .endpoint: return "ENDPOINT"
            case .system: return "SYSTEM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FilterType(rawValue: rawValue) ?? FilterType.sdkUnknown(rawValue)
        }
    }
}

extension ForbiddenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ForbiddenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestID = output.requestID
        } else {
            self.message = nil
            self.requestID = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Provides information about an API request or response.
public struct ForbiddenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that's returned from the API.
    public var message: Swift.String?
    /// The unique identifier for the request or response.
    public var requestID: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestID: Swift.String? = nil
    )
    {
        self.message = message
        self.requestID = requestID
    }
}

struct ForbiddenExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let requestID: Swift.String?
}

extension ForbiddenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestID = "RequestID"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestID)
        requestID = requestIDDecoded
    }
}

extension PinpointClientTypes {
    public enum Format: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case csv
        case json
        case sdkUnknown(Swift.String)

        public static var allCases: [Format] {
            return [
                .csv,
                .json,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case .json: return "JSON"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Format(rawValue: rawValue) ?? Format.sdkUnknown(rawValue)
        }
    }
}

extension PinpointClientTypes {
    public enum Frequency: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case daily
        case event
        case hourly
        case inAppEvent
        case monthly
        case once
        case weekly
        case sdkUnknown(Swift.String)

        public static var allCases: [Frequency] {
            return [
                .daily,
                .event,
                .hourly,
                .inAppEvent,
                .monthly,
                .once,
                .weekly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .daily: return "DAILY"
            case .event: return "EVENT"
            case .hourly: return "HOURLY"
            case .inAppEvent: return "IN_APP_EVENT"
            case .monthly: return "MONTHLY"
            case .once: return "ONCE"
            case .weekly: return "WEEKLY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Frequency(rawValue: rawValue) ?? Frequency.sdkUnknown(rawValue)
        }
    }
}

extension PinpointClientTypes.GCMChannelRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apiKey = "ApiKey"
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let apiKey = self.apiKey {
            try encodeContainer.encode(apiKey, forKey: .apiKey)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apiKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .apiKey)
        apiKey = apiKeyDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the status and settings of the GCM channel for an application. This channel enables Amazon Pinpoint to send push notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service.
    public struct GCMChannelRequest: Swift.Equatable {
        /// The Web API Key, also referred to as an API_KEY or server key, that you received from Google to communicate with Google services.
        /// This member is required.
        public var apiKey: Swift.String?
        /// Specifies whether to enable the GCM channel for the application.
        public var enabled: Swift.Bool?

        public init (
            apiKey: Swift.String? = nil,
            enabled: Swift.Bool? = nil
        )
        {
            self.apiKey = apiKey
            self.enabled = enabled
        }
    }

}

extension PinpointClientTypes.GCMChannelResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case creationDate = "CreationDate"
        case credential = "Credential"
        case enabled = "Enabled"
        case hasCredential = "HasCredential"
        case id = "Id"
        case isArchived = "IsArchived"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedDate = "LastModifiedDate"
        case platform = "Platform"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let credential = self.credential {
            try encodeContainer.encode(credential, forKey: .credential)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let hasCredential = self.hasCredential {
            try encodeContainer.encode(hasCredential, forKey: .hasCredential)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isArchived = self.isArchived {
            try encodeContainer.encode(isArchived, forKey: .isArchived)
        }
        if let lastModifiedBy = self.lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let platform = self.platform {
            try encodeContainer.encode(platform, forKey: .platform)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let credentialDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .credential)
        credential = credentialDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let hasCredentialDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasCredential)
        hasCredential = hasCredentialDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let isArchivedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isArchived)
        isArchived = isArchivedDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let platformDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platform)
        platform = platformDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the status and settings of the GCM channel for an application. The GCM channel enables Amazon Pinpoint to send push notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service.
    public struct GCMChannelResponse: Swift.Equatable {
        /// The unique identifier for the application that the GCM channel applies to.
        public var applicationId: Swift.String?
        /// The date and time when the GCM channel was enabled.
        public var creationDate: Swift.String?
        /// The Web API Key, also referred to as an API_KEY or server key, that you received from Google to communicate with Google services.
        /// This member is required.
        public var credential: Swift.String?
        /// Specifies whether the GCM channel is enabled for the application.
        public var enabled: Swift.Bool?
        /// (Not used) This property is retained only for backward compatibility.
        public var hasCredential: Swift.Bool?
        /// (Deprecated) An identifier for the GCM channel. This property is retained only for backward compatibility.
        public var id: Swift.String?
        /// Specifies whether the GCM channel is archived.
        public var isArchived: Swift.Bool?
        /// The user who last modified the GCM channel.
        public var lastModifiedBy: Swift.String?
        /// The date and time when the GCM channel was last modified.
        public var lastModifiedDate: Swift.String?
        /// The type of messaging or notification platform for the channel. For the GCM channel, this value is GCM.
        /// This member is required.
        public var platform: Swift.String?
        /// The current version of the GCM channel.
        public var version: Swift.Int?

        public init (
            applicationId: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            credential: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            hasCredential: Swift.Bool? = nil,
            id: Swift.String? = nil,
            isArchived: Swift.Bool? = nil,
            lastModifiedBy: Swift.String? = nil,
            lastModifiedDate: Swift.String? = nil,
            platform: Swift.String? = nil,
            version: Swift.Int? = nil
        )
        {
            self.applicationId = applicationId
            self.creationDate = creationDate
            self.credential = credential
            self.enabled = enabled
            self.hasCredential = hasCredential
            self.id = id
            self.isArchived = isArchived
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedDate = lastModifiedDate
            self.platform = platform
            self.version = version
        }
    }

}

extension PinpointClientTypes.GCMMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case body = "Body"
        case collapseKey = "CollapseKey"
        case data = "Data"
        case iconReference = "IconReference"
        case imageIconUrl = "ImageIconUrl"
        case imageUrl = "ImageUrl"
        case priority = "Priority"
        case rawContent = "RawContent"
        case restrictedPackageName = "RestrictedPackageName"
        case silentPush = "SilentPush"
        case smallImageIconUrl = "SmallImageIconUrl"
        case sound = "Sound"
        case substitutions = "Substitutions"
        case timeToLive = "TimeToLive"
        case title = "Title"
        case url = "Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let collapseKey = self.collapseKey {
            try encodeContainer.encode(collapseKey, forKey: .collapseKey)
        }
        if let data = data {
            var dataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .data)
            for (dictKey0, mapOf__string0) in data {
                try dataContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let iconReference = self.iconReference {
            try encodeContainer.encode(iconReference, forKey: .iconReference)
        }
        if let imageIconUrl = self.imageIconUrl {
            try encodeContainer.encode(imageIconUrl, forKey: .imageIconUrl)
        }
        if let imageUrl = self.imageUrl {
            try encodeContainer.encode(imageUrl, forKey: .imageUrl)
        }
        if let priority = self.priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let rawContent = self.rawContent {
            try encodeContainer.encode(rawContent, forKey: .rawContent)
        }
        if let restrictedPackageName = self.restrictedPackageName {
            try encodeContainer.encode(restrictedPackageName, forKey: .restrictedPackageName)
        }
        if let silentPush = self.silentPush {
            try encodeContainer.encode(silentPush, forKey: .silentPush)
        }
        if let smallImageIconUrl = self.smallImageIconUrl {
            try encodeContainer.encode(smallImageIconUrl, forKey: .smallImageIconUrl)
        }
        if let sound = self.sound {
            try encodeContainer.encode(sound, forKey: .sound)
        }
        if let substitutions = substitutions {
            var substitutionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .substitutions)
            for (dictKey0, mapOfListOf__string0) in substitutions {
                var mapOfListOf__string0Container = substitutionsContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for __string1 in mapOfListOf__string0 {
                    try mapOfListOf__string0Container.encode(__string1)
                }
            }
        }
        if let timeToLive = self.timeToLive {
            try encodeContainer.encode(timeToLive, forKey: .timeToLive)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Action.self, forKey: .action)
        action = actionDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let collapseKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collapseKey)
        collapseKey = collapseKeyDecoded
        let dataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .data)
        var dataDecoded0: [Swift.String:Swift.String]? = nil
        if let dataContainer = dataContainer {
            dataDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in dataContainer {
                if let __string0 = __string0 {
                    dataDecoded0?[key0] = __string0
                }
            }
        }
        data = dataDecoded0
        let iconReferenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iconReference)
        iconReference = iconReferenceDecoded
        let imageIconUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageIconUrl)
        imageIconUrl = imageIconUrlDecoded
        let imageUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageUrl)
        imageUrl = imageUrlDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .priority)
        priority = priorityDecoded
        let rawContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rawContent)
        rawContent = rawContentDecoded
        let restrictedPackageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .restrictedPackageName)
        restrictedPackageName = restrictedPackageNameDecoded
        let silentPushDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .silentPush)
        silentPush = silentPushDecoded
        let smallImageIconUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .smallImageIconUrl)
        smallImageIconUrl = smallImageIconUrlDecoded
        let soundDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sound)
        sound = soundDecoded
        let substitutionsContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .substitutions)
        var substitutionsDecoded0: [Swift.String:[Swift.String]]? = nil
        if let substitutionsContainer = substitutionsContainer {
            substitutionsDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listof__string0) in substitutionsContainer {
                var listof__string0Decoded0: [Swift.String]? = nil
                if let listof__string0 = listof__string0 {
                    listof__string0Decoded0 = [Swift.String]()
                    for string1 in listof__string0 {
                        if let string1 = string1 {
                            listof__string0Decoded0?.append(string1)
                        }
                    }
                }
                substitutionsDecoded0?[key0] = listof__string0Decoded0
            }
        }
        substitutions = substitutionsDecoded0
        let timeToLiveDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeToLive)
        timeToLive = timeToLiveDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the settings for a one-time message that's sent directly to an endpoint through the GCM channel. The GCM channel enables Amazon Pinpoint to send messages to the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service.
    public struct GCMMessage: Swift.Equatable {
        /// The action to occur if the recipient taps the push notification. Valid values are:
        ///
        /// * OPEN_APP - Your app opens or it becomes the foreground app if it was sent to the background. This is the default action.
        ///
        /// * DEEP_LINK - Your app opens and displays a designated user interface in the app. This action uses the deep-linking features of the Android platform.
        ///
        /// * URL - The default mobile browser on the recipient's device opens and loads the web page at a URL that you specify.
        public var action: PinpointClientTypes.Action?
        /// The body of the notification message.
        public var body: Swift.String?
        /// An arbitrary string that identifies a group of messages that can be collapsed to ensure that only the last message is sent when delivery can resume. This helps avoid sending too many instances of the same messages when the recipient's device comes online again or becomes active. Amazon Pinpoint specifies this value in the Firebase Cloud Messaging (FCM) collapse_key parameter when it sends the notification message to FCM.
        public var collapseKey: Swift.String?
        /// The JSON data payload to use for the push notification, if the notification is a silent push notification. This payload is added to the data.pinpoint.jsonBody object of the notification.
        public var data: [Swift.String:Swift.String]?
        /// The icon image name of the asset saved in your app.
        public var iconReference: Swift.String?
        /// The URL of the large icon image to display in the content view of the push notification.
        public var imageIconUrl: Swift.String?
        /// The URL of an image to display in the push notification.
        public var imageUrl: Swift.String?
        /// para>normal - The notification might be delayed. Delivery is optimized for battery usage on the recipient's device. Use this value unless immediate delivery is required./listitem>
        /// * high - The notification is sent immediately and might wake a sleeping device.
        /// /para> Amazon Pinpoint specifies this value in the FCM priority parameter when it sends the notification message to FCM. The equivalent values for Apple Push Notification service (APNs) are 5, for normal, and 10, for high. If you specify an APNs value for this property, Amazon Pinpoint accepts and converts the value to the corresponding FCM value.
        public var priority: Swift.String?
        /// The raw, JSON-formatted string to use as the payload for the notification message. If specified, this value overrides all other content for the message.
        public var rawContent: Swift.String?
        /// The package name of the application where registration tokens must match in order for the recipient to receive the message.
        public var restrictedPackageName: Swift.String?
        /// Specifies whether the notification is a silent push notification, which is a push notification that doesn't display on a recipient's device. Silent push notifications can be used for cases such as updating an app's configuration or supporting phone home functionality.
        public var silentPush: Swift.Bool?
        /// The URL of the small icon image to display in the status bar and the content view of the push notification.
        public var smallImageIconUrl: Swift.String?
        /// The sound to play when the recipient receives the push notification. You can use the default stream or specify the file name of a sound resource that's bundled in your app. On an Android platform, the sound file must reside in /res/raw/.
        public var sound: Swift.String?
        /// The default message variables to use in the notification message. You can override the default variables with individual address variables.
        public var substitutions: [Swift.String:[Swift.String]]?
        /// The amount of time, in seconds, that FCM should store and attempt to deliver the push notification, if the service is unable to deliver the notification the first time. If you don't specify this value, FCM defaults to the maximum value, which is 2,419,200 seconds (28 days). Amazon Pinpoint specifies this value in the FCM time_to_live parameter when it sends the notification message to FCM.
        public var timeToLive: Swift.Int?
        /// The title to display above the notification message on the recipient's device.
        public var title: Swift.String?
        /// The URL to open in the recipient's default mobile browser, if a recipient taps the push notification and the value of the Action property is URL.
        public var url: Swift.String?

        public init (
            action: PinpointClientTypes.Action? = nil,
            body: Swift.String? = nil,
            collapseKey: Swift.String? = nil,
            data: [Swift.String:Swift.String]? = nil,
            iconReference: Swift.String? = nil,
            imageIconUrl: Swift.String? = nil,
            imageUrl: Swift.String? = nil,
            priority: Swift.String? = nil,
            rawContent: Swift.String? = nil,
            restrictedPackageName: Swift.String? = nil,
            silentPush: Swift.Bool? = nil,
            smallImageIconUrl: Swift.String? = nil,
            sound: Swift.String? = nil,
            substitutions: [Swift.String:[Swift.String]]? = nil,
            timeToLive: Swift.Int? = nil,
            title: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.action = action
            self.body = body
            self.collapseKey = collapseKey
            self.data = data
            self.iconReference = iconReference
            self.imageIconUrl = imageIconUrl
            self.imageUrl = imageUrl
            self.priority = priority
            self.rawContent = rawContent
            self.restrictedPackageName = restrictedPackageName
            self.silentPush = silentPush
            self.smallImageIconUrl = smallImageIconUrl
            self.sound = sound
            self.substitutions = substitutions
            self.timeToLive = timeToLive
            self.title = title
            self.url = url
        }
    }

}

extension PinpointClientTypes.GPSCoordinates: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case latitude = "Latitude"
        case longitude = "Longitude"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let latitude = self.latitude {
            try encodeContainer.encode(latitude, forKey: .latitude)
        }
        if let longitude = self.longitude {
            try encodeContainer.encode(longitude, forKey: .longitude)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let latitudeDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .latitude)
        latitude = latitudeDecoded
        let longitudeDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .longitude)
        longitude = longitudeDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the GPS coordinates of a location.
    public struct GPSCoordinates: Swift.Equatable {
        /// The latitude coordinate of the location.
        /// This member is required.
        public var latitude: Swift.Double?
        /// The longitude coordinate of the location.
        /// This member is required.
        public var longitude: Swift.Double?

        public init (
            latitude: Swift.Double? = nil,
            longitude: Swift.Double? = nil
        )
        {
            self.latitude = latitude
            self.longitude = longitude
        }
    }

}

extension PinpointClientTypes.GPSPointDimension: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case coordinates = "Coordinates"
        case rangeInKilometers = "RangeInKilometers"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let coordinates = self.coordinates {
            try encodeContainer.encode(coordinates, forKey: .coordinates)
        }
        if let rangeInKilometers = self.rangeInKilometers {
            try encodeContainer.encode(rangeInKilometers, forKey: .rangeInKilometers)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let coordinatesDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.GPSCoordinates.self, forKey: .coordinates)
        coordinates = coordinatesDecoded
        let rangeInKilometersDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .rangeInKilometers)
        rangeInKilometers = rangeInKilometersDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies GPS-based criteria for including or excluding endpoints from a segment.
    public struct GPSPointDimension: Swift.Equatable {
        /// The GPS coordinates to measure distance from.
        /// This member is required.
        public var coordinates: PinpointClientTypes.GPSCoordinates?
        /// The range, in kilometers, from the GPS coordinates.
        public var rangeInKilometers: Swift.Double?

        public init (
            coordinates: PinpointClientTypes.GPSCoordinates? = nil,
            rangeInKilometers: Swift.Double? = nil
        )
        {
            self.coordinates = coordinates
            self.rangeInKilometers = rangeInKilometers
        }
    }

}

extension GetAdmChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/adm"
    }
}

public struct GetAdmChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct GetAdmChannelInputBody: Swift.Equatable {
}

extension GetAdmChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetAdmChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAdmChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetAdmChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAdmChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.ADMChannelResponse = try responseDecoder.decode(responseBody: data)
                self.admChannelResponse = output
            } else {
                self.admChannelResponse = nil
            }
        } else {
            self.admChannelResponse = nil
        }
    }
}

public struct GetAdmChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the ADM (Amazon Device Messaging) channel for an application.
    /// This member is required.
    public var admChannelResponse: PinpointClientTypes.ADMChannelResponse?

    public init (
        admChannelResponse: PinpointClientTypes.ADMChannelResponse? = nil
    )
    {
        self.admChannelResponse = admChannelResponse
    }
}

struct GetAdmChannelOutputResponseBody: Swift.Equatable {
    let admChannelResponse: PinpointClientTypes.ADMChannelResponse?
}

extension GetAdmChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case admChannelResponse = "ADMChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let admChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ADMChannelResponse.self, forKey: .admChannelResponse)
        admChannelResponse = admChannelResponseDecoded
    }
}

extension GetApnsChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/apns"
    }
}

public struct GetApnsChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct GetApnsChannelInputBody: Swift.Equatable {
}

extension GetApnsChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetApnsChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetApnsChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetApnsChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetApnsChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.APNSChannelResponse = try responseDecoder.decode(responseBody: data)
                self.apnsChannelResponse = output
            } else {
                self.apnsChannelResponse = nil
            }
        } else {
            self.apnsChannelResponse = nil
        }
    }
}

public struct GetApnsChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the APNs (Apple Push Notification service) channel for an application.
    /// This member is required.
    public var apnsChannelResponse: PinpointClientTypes.APNSChannelResponse?

    public init (
        apnsChannelResponse: PinpointClientTypes.APNSChannelResponse? = nil
    )
    {
        self.apnsChannelResponse = apnsChannelResponse
    }
}

struct GetApnsChannelOutputResponseBody: Swift.Equatable {
    let apnsChannelResponse: PinpointClientTypes.APNSChannelResponse?
}

extension GetApnsChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apnsChannelResponse = "APNSChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apnsChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.APNSChannelResponse.self, forKey: .apnsChannelResponse)
        apnsChannelResponse = apnsChannelResponseDecoded
    }
}

extension GetApnsSandboxChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/apns_sandbox"
    }
}

public struct GetApnsSandboxChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct GetApnsSandboxChannelInputBody: Swift.Equatable {
}

extension GetApnsSandboxChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetApnsSandboxChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetApnsSandboxChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetApnsSandboxChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetApnsSandboxChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.APNSSandboxChannelResponse = try responseDecoder.decode(responseBody: data)
                self.apnsSandboxChannelResponse = output
            } else {
                self.apnsSandboxChannelResponse = nil
            }
        } else {
            self.apnsSandboxChannelResponse = nil
        }
    }
}

public struct GetApnsSandboxChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the APNs (Apple Push Notification service) sandbox channel for an application.
    /// This member is required.
    public var apnsSandboxChannelResponse: PinpointClientTypes.APNSSandboxChannelResponse?

    public init (
        apnsSandboxChannelResponse: PinpointClientTypes.APNSSandboxChannelResponse? = nil
    )
    {
        self.apnsSandboxChannelResponse = apnsSandboxChannelResponse
    }
}

struct GetApnsSandboxChannelOutputResponseBody: Swift.Equatable {
    let apnsSandboxChannelResponse: PinpointClientTypes.APNSSandboxChannelResponse?
}

extension GetApnsSandboxChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apnsSandboxChannelResponse = "APNSSandboxChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apnsSandboxChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.APNSSandboxChannelResponse.self, forKey: .apnsSandboxChannelResponse)
        apnsSandboxChannelResponse = apnsSandboxChannelResponseDecoded
    }
}

extension GetApnsVoipChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/apns_voip"
    }
}

public struct GetApnsVoipChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct GetApnsVoipChannelInputBody: Swift.Equatable {
}

extension GetApnsVoipChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetApnsVoipChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetApnsVoipChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetApnsVoipChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetApnsVoipChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.APNSVoipChannelResponse = try responseDecoder.decode(responseBody: data)
                self.apnsVoipChannelResponse = output
            } else {
                self.apnsVoipChannelResponse = nil
            }
        } else {
            self.apnsVoipChannelResponse = nil
        }
    }
}

public struct GetApnsVoipChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the APNs (Apple Push Notification service) VoIP channel for an application.
    /// This member is required.
    public var apnsVoipChannelResponse: PinpointClientTypes.APNSVoipChannelResponse?

    public init (
        apnsVoipChannelResponse: PinpointClientTypes.APNSVoipChannelResponse? = nil
    )
    {
        self.apnsVoipChannelResponse = apnsVoipChannelResponse
    }
}

struct GetApnsVoipChannelOutputResponseBody: Swift.Equatable {
    let apnsVoipChannelResponse: PinpointClientTypes.APNSVoipChannelResponse?
}

extension GetApnsVoipChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apnsVoipChannelResponse = "APNSVoipChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apnsVoipChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.APNSVoipChannelResponse.self, forKey: .apnsVoipChannelResponse)
        apnsVoipChannelResponse = apnsVoipChannelResponseDecoded
    }
}

extension GetApnsVoipSandboxChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/apns_voip_sandbox"
    }
}

public struct GetApnsVoipSandboxChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct GetApnsVoipSandboxChannelInputBody: Swift.Equatable {
}

extension GetApnsVoipSandboxChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetApnsVoipSandboxChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetApnsVoipSandboxChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetApnsVoipSandboxChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetApnsVoipSandboxChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.APNSVoipSandboxChannelResponse = try responseDecoder.decode(responseBody: data)
                self.apnsVoipSandboxChannelResponse = output
            } else {
                self.apnsVoipSandboxChannelResponse = nil
            }
        } else {
            self.apnsVoipSandboxChannelResponse = nil
        }
    }
}

public struct GetApnsVoipSandboxChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the APNs (Apple Push Notification service) VoIP sandbox channel for an application.
    /// This member is required.
    public var apnsVoipSandboxChannelResponse: PinpointClientTypes.APNSVoipSandboxChannelResponse?

    public init (
        apnsVoipSandboxChannelResponse: PinpointClientTypes.APNSVoipSandboxChannelResponse? = nil
    )
    {
        self.apnsVoipSandboxChannelResponse = apnsVoipSandboxChannelResponse
    }
}

struct GetApnsVoipSandboxChannelOutputResponseBody: Swift.Equatable {
    let apnsVoipSandboxChannelResponse: PinpointClientTypes.APNSVoipSandboxChannelResponse?
}

extension GetApnsVoipSandboxChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apnsVoipSandboxChannelResponse = "APNSVoipSandboxChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apnsVoipSandboxChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.APNSVoipSandboxChannelResponse.self, forKey: .apnsVoipSandboxChannelResponse)
        apnsVoipSandboxChannelResponse = apnsVoipSandboxChannelResponseDecoded
    }
}

extension GetAppInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())"
    }
}

public struct GetAppInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct GetAppInputBody: Swift.Equatable {
}

extension GetAppInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetAppOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAppOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetAppOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAppOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.ApplicationResponse = try responseDecoder.decode(responseBody: data)
                self.applicationResponse = output
            } else {
                self.applicationResponse = nil
            }
        } else {
            self.applicationResponse = nil
        }
    }
}

public struct GetAppOutputResponse: Swift.Equatable {
    /// Provides information about an application.
    /// This member is required.
    public var applicationResponse: PinpointClientTypes.ApplicationResponse?

    public init (
        applicationResponse: PinpointClientTypes.ApplicationResponse? = nil
    )
    {
        self.applicationResponse = applicationResponse
    }
}

struct GetAppOutputResponseBody: Swift.Equatable {
    let applicationResponse: PinpointClientTypes.ApplicationResponse?
}

extension GetAppOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationResponse = "ApplicationResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ApplicationResponse.self, forKey: .applicationResponse)
        applicationResponse = applicationResponseDecoded
    }
}

extension GetApplicationDateRangeKpiInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let endTime = endTime {
                let endTimeQueryItem = ClientRuntime.URLQueryItem(name: "end-time".urlPercentEncoding(), value: Swift.String(TimestampFormatter(format: .dateTime).string(from: endTime)).urlPercentEncoding())
                items.append(endTimeQueryItem)
            }
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "page-size".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            if let startTime = startTime {
                let startTimeQueryItem = ClientRuntime.URLQueryItem(name: "start-time".urlPercentEncoding(), value: Swift.String(TimestampFormatter(format: .dateTime).string(from: startTime)).urlPercentEncoding())
                items.append(startTimeQueryItem)
            }
            return items
        }
    }
}

extension GetApplicationDateRangeKpiInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let kpiName = kpiName else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/kpis/daterange/\(kpiName.urlPercentEncoding())"
    }
}

public struct GetApplicationDateRangeKpiInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.
    public var endTime: ClientRuntime.Date?
    /// The name of the metric, also referred to as a key performance indicator (KPI), to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the [Amazon Pinpoint Developer Guide](https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html).
    /// This member is required.
    public var kpiName: Swift.String?
    /// The string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var nextToken: Swift.String?
    /// The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var pageSize: Swift.String?
    /// The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.
    public var startTime: ClientRuntime.Date?

    public init (
        applicationId: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        kpiName: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        pageSize: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.applicationId = applicationId
        self.endTime = endTime
        self.kpiName = kpiName
        self.nextToken = nextToken
        self.pageSize = pageSize
        self.startTime = startTime
    }
}

struct GetApplicationDateRangeKpiInputBody: Swift.Equatable {
}

extension GetApplicationDateRangeKpiInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetApplicationDateRangeKpiOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetApplicationDateRangeKpiOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetApplicationDateRangeKpiOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetApplicationDateRangeKpiOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.ApplicationDateRangeKpiResponse = try responseDecoder.decode(responseBody: data)
                self.applicationDateRangeKpiResponse = output
            } else {
                self.applicationDateRangeKpiResponse = nil
            }
        } else {
            self.applicationDateRangeKpiResponse = nil
        }
    }
}

public struct GetApplicationDateRangeKpiOutputResponse: Swift.Equatable {
    /// Provides the results of a query that retrieved the data for a standard metric that applies to an application, and provides information about that query.
    /// This member is required.
    public var applicationDateRangeKpiResponse: PinpointClientTypes.ApplicationDateRangeKpiResponse?

    public init (
        applicationDateRangeKpiResponse: PinpointClientTypes.ApplicationDateRangeKpiResponse? = nil
    )
    {
        self.applicationDateRangeKpiResponse = applicationDateRangeKpiResponse
    }
}

struct GetApplicationDateRangeKpiOutputResponseBody: Swift.Equatable {
    let applicationDateRangeKpiResponse: PinpointClientTypes.ApplicationDateRangeKpiResponse?
}

extension GetApplicationDateRangeKpiOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationDateRangeKpiResponse = "ApplicationDateRangeKpiResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationDateRangeKpiResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ApplicationDateRangeKpiResponse.self, forKey: .applicationDateRangeKpiResponse)
        applicationDateRangeKpiResponse = applicationDateRangeKpiResponseDecoded
    }
}

extension GetApplicationSettingsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/settings"
    }
}

public struct GetApplicationSettingsInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct GetApplicationSettingsInputBody: Swift.Equatable {
}

extension GetApplicationSettingsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetApplicationSettingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetApplicationSettingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetApplicationSettingsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetApplicationSettingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.ApplicationSettingsResource = try responseDecoder.decode(responseBody: data)
                self.applicationSettingsResource = output
            } else {
                self.applicationSettingsResource = nil
            }
        } else {
            self.applicationSettingsResource = nil
        }
    }
}

public struct GetApplicationSettingsOutputResponse: Swift.Equatable {
    /// Provides information about an application, including the default settings for an application.
    /// This member is required.
    public var applicationSettingsResource: PinpointClientTypes.ApplicationSettingsResource?

    public init (
        applicationSettingsResource: PinpointClientTypes.ApplicationSettingsResource? = nil
    )
    {
        self.applicationSettingsResource = applicationSettingsResource
    }
}

struct GetApplicationSettingsOutputResponseBody: Swift.Equatable {
    let applicationSettingsResource: PinpointClientTypes.ApplicationSettingsResource?
}

extension GetApplicationSettingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationSettingsResource = "ApplicationSettingsResource"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationSettingsResourceDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ApplicationSettingsResource.self, forKey: .applicationSettingsResource)
        applicationSettingsResource = applicationSettingsResourceDecoded
    }
}

extension GetAppsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "page-size".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            if let token = token {
                let tokenQueryItem = ClientRuntime.URLQueryItem(name: "token".urlPercentEncoding(), value: Swift.String(token).urlPercentEncoding())
                items.append(tokenQueryItem)
            }
            return items
        }
    }
}

extension GetAppsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/apps"
    }
}

public struct GetAppsInput: Swift.Equatable {
    /// The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var pageSize: Swift.String?
    /// The NextToken string that specifies which page of results to return in a paginated response.
    public var token: Swift.String?

    public init (
        pageSize: Swift.String? = nil,
        token: Swift.String? = nil
    )
    {
        self.pageSize = pageSize
        self.token = token
    }
}

struct GetAppsInputBody: Swift.Equatable {
}

extension GetAppsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetAppsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAppsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetAppsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAppsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.ApplicationsResponse = try responseDecoder.decode(responseBody: data)
                self.applicationsResponse = output
            } else {
                self.applicationsResponse = nil
            }
        } else {
            self.applicationsResponse = nil
        }
    }
}

public struct GetAppsOutputResponse: Swift.Equatable {
    /// Provides information about all of your applications.
    /// This member is required.
    public var applicationsResponse: PinpointClientTypes.ApplicationsResponse?

    public init (
        applicationsResponse: PinpointClientTypes.ApplicationsResponse? = nil
    )
    {
        self.applicationsResponse = applicationsResponse
    }
}

struct GetAppsOutputResponseBody: Swift.Equatable {
    let applicationsResponse: PinpointClientTypes.ApplicationsResponse?
}

extension GetAppsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationsResponse = "ApplicationsResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationsResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ApplicationsResponse.self, forKey: .applicationsResponse)
        applicationsResponse = applicationsResponseDecoded
    }
}

extension GetBaiduChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/baidu"
    }
}

public struct GetBaiduChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct GetBaiduChannelInputBody: Swift.Equatable {
}

extension GetBaiduChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBaiduChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBaiduChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetBaiduChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBaiduChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.BaiduChannelResponse = try responseDecoder.decode(responseBody: data)
                self.baiduChannelResponse = output
            } else {
                self.baiduChannelResponse = nil
            }
        } else {
            self.baiduChannelResponse = nil
        }
    }
}

public struct GetBaiduChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the Baidu (Baidu Cloud Push) channel for an application.
    /// This member is required.
    public var baiduChannelResponse: PinpointClientTypes.BaiduChannelResponse?

    public init (
        baiduChannelResponse: PinpointClientTypes.BaiduChannelResponse? = nil
    )
    {
        self.baiduChannelResponse = baiduChannelResponse
    }
}

struct GetBaiduChannelOutputResponseBody: Swift.Equatable {
    let baiduChannelResponse: PinpointClientTypes.BaiduChannelResponse?
}

extension GetBaiduChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baiduChannelResponse = "BaiduChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let baiduChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.BaiduChannelResponse.self, forKey: .baiduChannelResponse)
        baiduChannelResponse = baiduChannelResponseDecoded
    }
}

extension GetCampaignActivitiesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "page-size".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            if let token = token {
                let tokenQueryItem = ClientRuntime.URLQueryItem(name: "token".urlPercentEncoding(), value: Swift.String(token).urlPercentEncoding())
                items.append(tokenQueryItem)
            }
            return items
        }
    }
}

extension GetCampaignActivitiesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let campaignId = campaignId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/campaigns/\(campaignId.urlPercentEncoding())/activities"
    }
}

public struct GetCampaignActivitiesInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the campaign.
    /// This member is required.
    public var campaignId: Swift.String?
    /// The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var pageSize: Swift.String?
    /// The NextToken string that specifies which page of results to return in a paginated response.
    public var token: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        campaignId: Swift.String? = nil,
        pageSize: Swift.String? = nil,
        token: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.campaignId = campaignId
        self.pageSize = pageSize
        self.token = token
    }
}

struct GetCampaignActivitiesInputBody: Swift.Equatable {
}

extension GetCampaignActivitiesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetCampaignActivitiesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCampaignActivitiesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetCampaignActivitiesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCampaignActivitiesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.ActivitiesResponse = try responseDecoder.decode(responseBody: data)
                self.activitiesResponse = output
            } else {
                self.activitiesResponse = nil
            }
        } else {
            self.activitiesResponse = nil
        }
    }
}

public struct GetCampaignActivitiesOutputResponse: Swift.Equatable {
    /// Provides information about the activities that were performed by a campaign.
    /// This member is required.
    public var activitiesResponse: PinpointClientTypes.ActivitiesResponse?

    public init (
        activitiesResponse: PinpointClientTypes.ActivitiesResponse? = nil
    )
    {
        self.activitiesResponse = activitiesResponse
    }
}

struct GetCampaignActivitiesOutputResponseBody: Swift.Equatable {
    let activitiesResponse: PinpointClientTypes.ActivitiesResponse?
}

extension GetCampaignActivitiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activitiesResponse = "ActivitiesResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activitiesResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ActivitiesResponse.self, forKey: .activitiesResponse)
        activitiesResponse = activitiesResponseDecoded
    }
}

extension GetCampaignDateRangeKpiInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let endTime = endTime {
                let endTimeQueryItem = ClientRuntime.URLQueryItem(name: "end-time".urlPercentEncoding(), value: Swift.String(TimestampFormatter(format: .dateTime).string(from: endTime)).urlPercentEncoding())
                items.append(endTimeQueryItem)
            }
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "page-size".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            if let startTime = startTime {
                let startTimeQueryItem = ClientRuntime.URLQueryItem(name: "start-time".urlPercentEncoding(), value: Swift.String(TimestampFormatter(format: .dateTime).string(from: startTime)).urlPercentEncoding())
                items.append(startTimeQueryItem)
            }
            return items
        }
    }
}

extension GetCampaignDateRangeKpiInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let campaignId = campaignId else {
            return nil
        }
        guard let kpiName = kpiName else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/campaigns/\(campaignId.urlPercentEncoding())/kpis/daterange/\(kpiName.urlPercentEncoding())"
    }
}

public struct GetCampaignDateRangeKpiInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the campaign.
    /// This member is required.
    public var campaignId: Swift.String?
    /// The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.
    public var endTime: ClientRuntime.Date?
    /// The name of the metric, also referred to as a key performance indicator (KPI), to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the [Amazon Pinpoint Developer Guide](https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html).
    /// This member is required.
    public var kpiName: Swift.String?
    /// The string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var nextToken: Swift.String?
    /// The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var pageSize: Swift.String?
    /// The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.
    public var startTime: ClientRuntime.Date?

    public init (
        applicationId: Swift.String? = nil,
        campaignId: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        kpiName: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        pageSize: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.applicationId = applicationId
        self.campaignId = campaignId
        self.endTime = endTime
        self.kpiName = kpiName
        self.nextToken = nextToken
        self.pageSize = pageSize
        self.startTime = startTime
    }
}

struct GetCampaignDateRangeKpiInputBody: Swift.Equatable {
}

extension GetCampaignDateRangeKpiInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetCampaignDateRangeKpiOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCampaignDateRangeKpiOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetCampaignDateRangeKpiOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCampaignDateRangeKpiOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.CampaignDateRangeKpiResponse = try responseDecoder.decode(responseBody: data)
                self.campaignDateRangeKpiResponse = output
            } else {
                self.campaignDateRangeKpiResponse = nil
            }
        } else {
            self.campaignDateRangeKpiResponse = nil
        }
    }
}

public struct GetCampaignDateRangeKpiOutputResponse: Swift.Equatable {
    /// Provides the results of a query that retrieved the data for a standard metric that applies to a campaign, and provides information about that query.
    /// This member is required.
    public var campaignDateRangeKpiResponse: PinpointClientTypes.CampaignDateRangeKpiResponse?

    public init (
        campaignDateRangeKpiResponse: PinpointClientTypes.CampaignDateRangeKpiResponse? = nil
    )
    {
        self.campaignDateRangeKpiResponse = campaignDateRangeKpiResponse
    }
}

struct GetCampaignDateRangeKpiOutputResponseBody: Swift.Equatable {
    let campaignDateRangeKpiResponse: PinpointClientTypes.CampaignDateRangeKpiResponse?
}

extension GetCampaignDateRangeKpiOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case campaignDateRangeKpiResponse = "CampaignDateRangeKpiResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let campaignDateRangeKpiResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignDateRangeKpiResponse.self, forKey: .campaignDateRangeKpiResponse)
        campaignDateRangeKpiResponse = campaignDateRangeKpiResponseDecoded
    }
}

extension GetCampaignInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let campaignId = campaignId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/campaigns/\(campaignId.urlPercentEncoding())"
    }
}

public struct GetCampaignInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the campaign.
    /// This member is required.
    public var campaignId: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        campaignId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.campaignId = campaignId
    }
}

struct GetCampaignInputBody: Swift.Equatable {
}

extension GetCampaignInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetCampaignOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCampaignOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetCampaignOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCampaignOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.CampaignResponse = try responseDecoder.decode(responseBody: data)
                self.campaignResponse = output
            } else {
                self.campaignResponse = nil
            }
        } else {
            self.campaignResponse = nil
        }
    }
}

public struct GetCampaignOutputResponse: Swift.Equatable {
    /// Provides information about the status, configuration, and other settings for a campaign.
    /// This member is required.
    public var campaignResponse: PinpointClientTypes.CampaignResponse?

    public init (
        campaignResponse: PinpointClientTypes.CampaignResponse? = nil
    )
    {
        self.campaignResponse = campaignResponse
    }
}

struct GetCampaignOutputResponseBody: Swift.Equatable {
    let campaignResponse: PinpointClientTypes.CampaignResponse?
}

extension GetCampaignOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case campaignResponse = "CampaignResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let campaignResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignResponse.self, forKey: .campaignResponse)
        campaignResponse = campaignResponseDecoded
    }
}

extension GetCampaignVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let campaignId = campaignId else {
            return nil
        }
        guard let version = version else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/campaigns/\(campaignId.urlPercentEncoding())/versions/\(version.urlPercentEncoding())"
    }
}

public struct GetCampaignVersionInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the campaign.
    /// This member is required.
    public var campaignId: Swift.String?
    /// The unique version number (Version property) for the campaign version.
    /// This member is required.
    public var version: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        campaignId: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.campaignId = campaignId
        self.version = version
    }
}

struct GetCampaignVersionInputBody: Swift.Equatable {
}

extension GetCampaignVersionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetCampaignVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCampaignVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetCampaignVersionOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCampaignVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.CampaignResponse = try responseDecoder.decode(responseBody: data)
                self.campaignResponse = output
            } else {
                self.campaignResponse = nil
            }
        } else {
            self.campaignResponse = nil
        }
    }
}

public struct GetCampaignVersionOutputResponse: Swift.Equatable {
    /// Provides information about the status, configuration, and other settings for a campaign.
    /// This member is required.
    public var campaignResponse: PinpointClientTypes.CampaignResponse?

    public init (
        campaignResponse: PinpointClientTypes.CampaignResponse? = nil
    )
    {
        self.campaignResponse = campaignResponse
    }
}

struct GetCampaignVersionOutputResponseBody: Swift.Equatable {
    let campaignResponse: PinpointClientTypes.CampaignResponse?
}

extension GetCampaignVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case campaignResponse = "CampaignResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let campaignResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignResponse.self, forKey: .campaignResponse)
        campaignResponse = campaignResponseDecoded
    }
}

extension GetCampaignVersionsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "page-size".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            if let token = token {
                let tokenQueryItem = ClientRuntime.URLQueryItem(name: "token".urlPercentEncoding(), value: Swift.String(token).urlPercentEncoding())
                items.append(tokenQueryItem)
            }
            return items
        }
    }
}

extension GetCampaignVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let campaignId = campaignId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/campaigns/\(campaignId.urlPercentEncoding())/versions"
    }
}

public struct GetCampaignVersionsInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the campaign.
    /// This member is required.
    public var campaignId: Swift.String?
    /// The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var pageSize: Swift.String?
    /// The NextToken string that specifies which page of results to return in a paginated response.
    public var token: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        campaignId: Swift.String? = nil,
        pageSize: Swift.String? = nil,
        token: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.campaignId = campaignId
        self.pageSize = pageSize
        self.token = token
    }
}

struct GetCampaignVersionsInputBody: Swift.Equatable {
}

extension GetCampaignVersionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetCampaignVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCampaignVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetCampaignVersionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCampaignVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.CampaignsResponse = try responseDecoder.decode(responseBody: data)
                self.campaignsResponse = output
            } else {
                self.campaignsResponse = nil
            }
        } else {
            self.campaignsResponse = nil
        }
    }
}

public struct GetCampaignVersionsOutputResponse: Swift.Equatable {
    /// Provides information about the configuration and other settings for all the campaigns that are associated with an application.
    /// This member is required.
    public var campaignsResponse: PinpointClientTypes.CampaignsResponse?

    public init (
        campaignsResponse: PinpointClientTypes.CampaignsResponse? = nil
    )
    {
        self.campaignsResponse = campaignsResponse
    }
}

struct GetCampaignVersionsOutputResponseBody: Swift.Equatable {
    let campaignsResponse: PinpointClientTypes.CampaignsResponse?
}

extension GetCampaignVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case campaignsResponse = "CampaignsResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let campaignsResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignsResponse.self, forKey: .campaignsResponse)
        campaignsResponse = campaignsResponseDecoded
    }
}

extension GetCampaignsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "page-size".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            if let token = token {
                let tokenQueryItem = ClientRuntime.URLQueryItem(name: "token".urlPercentEncoding(), value: Swift.String(token).urlPercentEncoding())
                items.append(tokenQueryItem)
            }
            return items
        }
    }
}

extension GetCampaignsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/campaigns"
    }
}

public struct GetCampaignsInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var pageSize: Swift.String?
    /// The NextToken string that specifies which page of results to return in a paginated response.
    public var token: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        pageSize: Swift.String? = nil,
        token: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.pageSize = pageSize
        self.token = token
    }
}

struct GetCampaignsInputBody: Swift.Equatable {
}

extension GetCampaignsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetCampaignsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCampaignsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetCampaignsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCampaignsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.CampaignsResponse = try responseDecoder.decode(responseBody: data)
                self.campaignsResponse = output
            } else {
                self.campaignsResponse = nil
            }
        } else {
            self.campaignsResponse = nil
        }
    }
}

public struct GetCampaignsOutputResponse: Swift.Equatable {
    /// Provides information about the configuration and other settings for all the campaigns that are associated with an application.
    /// This member is required.
    public var campaignsResponse: PinpointClientTypes.CampaignsResponse?

    public init (
        campaignsResponse: PinpointClientTypes.CampaignsResponse? = nil
    )
    {
        self.campaignsResponse = campaignsResponse
    }
}

struct GetCampaignsOutputResponseBody: Swift.Equatable {
    let campaignsResponse: PinpointClientTypes.CampaignsResponse?
}

extension GetCampaignsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case campaignsResponse = "CampaignsResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let campaignsResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignsResponse.self, forKey: .campaignsResponse)
        campaignsResponse = campaignsResponseDecoded
    }
}

extension GetChannelsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels"
    }
}

public struct GetChannelsInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct GetChannelsInputBody: Swift.Equatable {
}

extension GetChannelsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetChannelsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetChannelsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetChannelsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetChannelsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.ChannelsResponse = try responseDecoder.decode(responseBody: data)
                self.channelsResponse = output
            } else {
                self.channelsResponse = nil
            }
        } else {
            self.channelsResponse = nil
        }
    }
}

public struct GetChannelsOutputResponse: Swift.Equatable {
    /// Provides information about the general settings and status of all channels for an application, including channels that aren't enabled for the application.
    /// This member is required.
    public var channelsResponse: PinpointClientTypes.ChannelsResponse?

    public init (
        channelsResponse: PinpointClientTypes.ChannelsResponse? = nil
    )
    {
        self.channelsResponse = channelsResponse
    }
}

struct GetChannelsOutputResponseBody: Swift.Equatable {
    let channelsResponse: PinpointClientTypes.ChannelsResponse?
}

extension GetChannelsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelsResponse = "ChannelsResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelsResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ChannelsResponse.self, forKey: .channelsResponse)
        channelsResponse = channelsResponseDecoded
    }
}

extension GetEmailChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/email"
    }
}

public struct GetEmailChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct GetEmailChannelInputBody: Swift.Equatable {
}

extension GetEmailChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetEmailChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEmailChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetEmailChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEmailChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.EmailChannelResponse = try responseDecoder.decode(responseBody: data)
                self.emailChannelResponse = output
            } else {
                self.emailChannelResponse = nil
            }
        } else {
            self.emailChannelResponse = nil
        }
    }
}

public struct GetEmailChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the email channel for an application.
    /// This member is required.
    public var emailChannelResponse: PinpointClientTypes.EmailChannelResponse?

    public init (
        emailChannelResponse: PinpointClientTypes.EmailChannelResponse? = nil
    )
    {
        self.emailChannelResponse = emailChannelResponse
    }
}

struct GetEmailChannelOutputResponseBody: Swift.Equatable {
    let emailChannelResponse: PinpointClientTypes.EmailChannelResponse?
}

extension GetEmailChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailChannelResponse = "EmailChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EmailChannelResponse.self, forKey: .emailChannelResponse)
        emailChannelResponse = emailChannelResponseDecoded
    }
}

extension GetEmailTemplateInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let version = version {
                let versionQueryItem = ClientRuntime.URLQueryItem(name: "version".urlPercentEncoding(), value: Swift.String(version).urlPercentEncoding())
                items.append(versionQueryItem)
            }
            return items
        }
    }
}

extension GetEmailTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v1/templates/\(templateName.urlPercentEncoding())/email"
    }
}

public struct GetEmailTemplateInput: Swift.Equatable {
    /// The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
    /// This member is required.
    public var templateName: Swift.String?
    /// The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following:
    ///
    /// * For a get operation, retrieves information about the active version of the template.
    ///
    /// * For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.
    ///
    /// * For a delete operation, deletes the template, including all versions of the template.
    public var version: Swift.String?

    public init (
        templateName: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.templateName = templateName
        self.version = version
    }
}

struct GetEmailTemplateInputBody: Swift.Equatable {
}

extension GetEmailTemplateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.EmailTemplateResponse = try responseDecoder.decode(responseBody: data)
                self.emailTemplateResponse = output
            } else {
                self.emailTemplateResponse = nil
            }
        } else {
            self.emailTemplateResponse = nil
        }
    }
}

public struct GetEmailTemplateOutputResponse: Swift.Equatable {
    /// Provides information about the content and settings for a message template that can be used in messages that are sent through the email channel.
    /// This member is required.
    public var emailTemplateResponse: PinpointClientTypes.EmailTemplateResponse?

    public init (
        emailTemplateResponse: PinpointClientTypes.EmailTemplateResponse? = nil
    )
    {
        self.emailTemplateResponse = emailTemplateResponse
    }
}

struct GetEmailTemplateOutputResponseBody: Swift.Equatable {
    let emailTemplateResponse: PinpointClientTypes.EmailTemplateResponse?
}

extension GetEmailTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailTemplateResponse = "EmailTemplateResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailTemplateResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EmailTemplateResponse.self, forKey: .emailTemplateResponse)
        emailTemplateResponse = emailTemplateResponseDecoded
    }
}

extension GetEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let endpointId = endpointId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/endpoints/\(endpointId.urlPercentEncoding())"
    }
}

public struct GetEndpointInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the endpoint.
    /// This member is required.
    public var endpointId: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        endpointId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.endpointId = endpointId
    }
}

struct GetEndpointInputBody: Swift.Equatable {
}

extension GetEndpointInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetEndpointOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.EndpointResponse = try responseDecoder.decode(responseBody: data)
                self.endpointResponse = output
            } else {
                self.endpointResponse = nil
            }
        } else {
            self.endpointResponse = nil
        }
    }
}

public struct GetEndpointOutputResponse: Swift.Equatable {
    /// Provides information about the channel type and other settings for an endpoint.
    /// This member is required.
    public var endpointResponse: PinpointClientTypes.EndpointResponse?

    public init (
        endpointResponse: PinpointClientTypes.EndpointResponse? = nil
    )
    {
        self.endpointResponse = endpointResponse
    }
}

struct GetEndpointOutputResponseBody: Swift.Equatable {
    let endpointResponse: PinpointClientTypes.EndpointResponse?
}

extension GetEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointResponse = "EndpointResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EndpointResponse.self, forKey: .endpointResponse)
        endpointResponse = endpointResponseDecoded
    }
}

extension GetEventStreamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/eventstream"
    }
}

public struct GetEventStreamInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct GetEventStreamInputBody: Swift.Equatable {
}

extension GetEventStreamInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetEventStreamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEventStreamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetEventStreamOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEventStreamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.EventStream = try responseDecoder.decode(responseBody: data)
                self.eventStream = output
            } else {
                self.eventStream = nil
            }
        } else {
            self.eventStream = nil
        }
    }
}

public struct GetEventStreamOutputResponse: Swift.Equatable {
    /// Specifies settings for publishing event data to an Amazon Kinesis data stream or an Amazon Kinesis Data Firehose delivery stream.
    /// This member is required.
    public var eventStream: PinpointClientTypes.EventStream?

    public init (
        eventStream: PinpointClientTypes.EventStream? = nil
    )
    {
        self.eventStream = eventStream
    }
}

struct GetEventStreamOutputResponseBody: Swift.Equatable {
    let eventStream: PinpointClientTypes.EventStream?
}

extension GetEventStreamOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventStream = "EventStream"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventStreamDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EventStream.self, forKey: .eventStream)
        eventStream = eventStreamDecoded
    }
}

extension GetExportJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let jobId = jobId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/jobs/export/\(jobId.urlPercentEncoding())"
    }
}

public struct GetExportJobInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the job.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        jobId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.jobId = jobId
    }
}

struct GetExportJobInputBody: Swift.Equatable {
}

extension GetExportJobInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetExportJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetExportJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetExportJobOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetExportJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.ExportJobResponse = try responseDecoder.decode(responseBody: data)
                self.exportJobResponse = output
            } else {
                self.exportJobResponse = nil
            }
        } else {
            self.exportJobResponse = nil
        }
    }
}

public struct GetExportJobOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of a job that exports endpoint definitions to a file. The file can be added directly to an Amazon Simple Storage Service (Amazon S3) bucket by using the Amazon Pinpoint API or downloaded directly to a computer by using the Amazon Pinpoint console.
    /// This member is required.
    public var exportJobResponse: PinpointClientTypes.ExportJobResponse?

    public init (
        exportJobResponse: PinpointClientTypes.ExportJobResponse? = nil
    )
    {
        self.exportJobResponse = exportJobResponse
    }
}

struct GetExportJobOutputResponseBody: Swift.Equatable {
    let exportJobResponse: PinpointClientTypes.ExportJobResponse?
}

extension GetExportJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportJobResponse = "ExportJobResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportJobResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ExportJobResponse.self, forKey: .exportJobResponse)
        exportJobResponse = exportJobResponseDecoded
    }
}

extension GetExportJobsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "page-size".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            if let token = token {
                let tokenQueryItem = ClientRuntime.URLQueryItem(name: "token".urlPercentEncoding(), value: Swift.String(token).urlPercentEncoding())
                items.append(tokenQueryItem)
            }
            return items
        }
    }
}

extension GetExportJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/jobs/export"
    }
}

public struct GetExportJobsInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var pageSize: Swift.String?
    /// The NextToken string that specifies which page of results to return in a paginated response.
    public var token: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        pageSize: Swift.String? = nil,
        token: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.pageSize = pageSize
        self.token = token
    }
}

struct GetExportJobsInputBody: Swift.Equatable {
}

extension GetExportJobsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetExportJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetExportJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetExportJobsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetExportJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.ExportJobsResponse = try responseDecoder.decode(responseBody: data)
                self.exportJobsResponse = output
            } else {
                self.exportJobsResponse = nil
            }
        } else {
            self.exportJobsResponse = nil
        }
    }
}

public struct GetExportJobsOutputResponse: Swift.Equatable {
    /// Provides information about all the export jobs that are associated with an application or segment. An export job is a job that exports endpoint definitions to a file.
    /// This member is required.
    public var exportJobsResponse: PinpointClientTypes.ExportJobsResponse?

    public init (
        exportJobsResponse: PinpointClientTypes.ExportJobsResponse? = nil
    )
    {
        self.exportJobsResponse = exportJobsResponse
    }
}

struct GetExportJobsOutputResponseBody: Swift.Equatable {
    let exportJobsResponse: PinpointClientTypes.ExportJobsResponse?
}

extension GetExportJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportJobsResponse = "ExportJobsResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportJobsResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ExportJobsResponse.self, forKey: .exportJobsResponse)
        exportJobsResponse = exportJobsResponseDecoded
    }
}

extension GetGcmChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/gcm"
    }
}

public struct GetGcmChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct GetGcmChannelInputBody: Swift.Equatable {
}

extension GetGcmChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetGcmChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetGcmChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetGcmChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetGcmChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.GCMChannelResponse = try responseDecoder.decode(responseBody: data)
                self.gcmChannelResponse = output
            } else {
                self.gcmChannelResponse = nil
            }
        } else {
            self.gcmChannelResponse = nil
        }
    }
}

public struct GetGcmChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the GCM channel for an application. The GCM channel enables Amazon Pinpoint to send push notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service.
    /// This member is required.
    public var gcmChannelResponse: PinpointClientTypes.GCMChannelResponse?

    public init (
        gcmChannelResponse: PinpointClientTypes.GCMChannelResponse? = nil
    )
    {
        self.gcmChannelResponse = gcmChannelResponse
    }
}

struct GetGcmChannelOutputResponseBody: Swift.Equatable {
    let gcmChannelResponse: PinpointClientTypes.GCMChannelResponse?
}

extension GetGcmChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gcmChannelResponse = "GCMChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gcmChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.GCMChannelResponse.self, forKey: .gcmChannelResponse)
        gcmChannelResponse = gcmChannelResponseDecoded
    }
}

extension GetImportJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let jobId = jobId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/jobs/import/\(jobId.urlPercentEncoding())"
    }
}

public struct GetImportJobInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the job.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        jobId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.jobId = jobId
    }
}

struct GetImportJobInputBody: Swift.Equatable {
}

extension GetImportJobInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetImportJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetImportJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetImportJobOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetImportJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.ImportJobResponse = try responseDecoder.decode(responseBody: data)
                self.importJobResponse = output
            } else {
                self.importJobResponse = nil
            }
        } else {
            self.importJobResponse = nil
        }
    }
}

public struct GetImportJobOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of a job that imports endpoint definitions from one or more files. The files can be stored in an Amazon Simple Storage Service (Amazon S3) bucket or uploaded directly from a computer by using the Amazon Pinpoint console.
    /// This member is required.
    public var importJobResponse: PinpointClientTypes.ImportJobResponse?

    public init (
        importJobResponse: PinpointClientTypes.ImportJobResponse? = nil
    )
    {
        self.importJobResponse = importJobResponse
    }
}

struct GetImportJobOutputResponseBody: Swift.Equatable {
    let importJobResponse: PinpointClientTypes.ImportJobResponse?
}

extension GetImportJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importJobResponse = "ImportJobResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importJobResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ImportJobResponse.self, forKey: .importJobResponse)
        importJobResponse = importJobResponseDecoded
    }
}

extension GetImportJobsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "page-size".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            if let token = token {
                let tokenQueryItem = ClientRuntime.URLQueryItem(name: "token".urlPercentEncoding(), value: Swift.String(token).urlPercentEncoding())
                items.append(tokenQueryItem)
            }
            return items
        }
    }
}

extension GetImportJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/jobs/import"
    }
}

public struct GetImportJobsInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var pageSize: Swift.String?
    /// The NextToken string that specifies which page of results to return in a paginated response.
    public var token: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        pageSize: Swift.String? = nil,
        token: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.pageSize = pageSize
        self.token = token
    }
}

struct GetImportJobsInputBody: Swift.Equatable {
}

extension GetImportJobsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetImportJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetImportJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetImportJobsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetImportJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.ImportJobsResponse = try responseDecoder.decode(responseBody: data)
                self.importJobsResponse = output
            } else {
                self.importJobsResponse = nil
            }
        } else {
            self.importJobsResponse = nil
        }
    }
}

public struct GetImportJobsOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of all the import jobs that are associated with an application or segment. An import job is a job that imports endpoint definitions from one or more files.
    /// This member is required.
    public var importJobsResponse: PinpointClientTypes.ImportJobsResponse?

    public init (
        importJobsResponse: PinpointClientTypes.ImportJobsResponse? = nil
    )
    {
        self.importJobsResponse = importJobsResponse
    }
}

struct GetImportJobsOutputResponseBody: Swift.Equatable {
    let importJobsResponse: PinpointClientTypes.ImportJobsResponse?
}

extension GetImportJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importJobsResponse = "ImportJobsResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importJobsResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ImportJobsResponse.self, forKey: .importJobsResponse)
        importJobsResponse = importJobsResponseDecoded
    }
}

extension GetInAppMessagesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let endpointId = endpointId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/endpoints/\(endpointId.urlPercentEncoding())/inappmessages"
    }
}

public struct GetInAppMessagesInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the endpoint.
    /// This member is required.
    public var endpointId: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        endpointId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.endpointId = endpointId
    }
}

struct GetInAppMessagesInputBody: Swift.Equatable {
}

extension GetInAppMessagesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetInAppMessagesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInAppMessagesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetInAppMessagesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInAppMessagesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.InAppMessagesResponse = try responseDecoder.decode(responseBody: data)
                self.inAppMessagesResponse = output
            } else {
                self.inAppMessagesResponse = nil
            }
        } else {
            self.inAppMessagesResponse = nil
        }
    }
}

public struct GetInAppMessagesOutputResponse: Swift.Equatable {
    /// Get in-app messages response object.
    /// This member is required.
    public var inAppMessagesResponse: PinpointClientTypes.InAppMessagesResponse?

    public init (
        inAppMessagesResponse: PinpointClientTypes.InAppMessagesResponse? = nil
    )
    {
        self.inAppMessagesResponse = inAppMessagesResponse
    }
}

struct GetInAppMessagesOutputResponseBody: Swift.Equatable {
    let inAppMessagesResponse: PinpointClientTypes.InAppMessagesResponse?
}

extension GetInAppMessagesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inAppMessagesResponse = "InAppMessagesResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inAppMessagesResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.InAppMessagesResponse.self, forKey: .inAppMessagesResponse)
        inAppMessagesResponse = inAppMessagesResponseDecoded
    }
}

extension GetInAppTemplateInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let version = version {
                let versionQueryItem = ClientRuntime.URLQueryItem(name: "version".urlPercentEncoding(), value: Swift.String(version).urlPercentEncoding())
                items.append(versionQueryItem)
            }
            return items
        }
    }
}

extension GetInAppTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v1/templates/\(templateName.urlPercentEncoding())/inapp"
    }
}

public struct GetInAppTemplateInput: Swift.Equatable {
    /// The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
    /// This member is required.
    public var templateName: Swift.String?
    /// The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following:
    ///
    /// * For a get operation, retrieves information about the active version of the template.
    ///
    /// * For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.
    ///
    /// * For a delete operation, deletes the template, including all versions of the template.
    public var version: Swift.String?

    public init (
        templateName: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.templateName = templateName
        self.version = version
    }
}

struct GetInAppTemplateInputBody: Swift.Equatable {
}

extension GetInAppTemplateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetInAppTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInAppTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetInAppTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInAppTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.InAppTemplateResponse = try responseDecoder.decode(responseBody: data)
                self.inAppTemplateResponse = output
            } else {
                self.inAppTemplateResponse = nil
            }
        } else {
            self.inAppTemplateResponse = nil
        }
    }
}

public struct GetInAppTemplateOutputResponse: Swift.Equatable {
    /// In-App Template Response.
    /// This member is required.
    public var inAppTemplateResponse: PinpointClientTypes.InAppTemplateResponse?

    public init (
        inAppTemplateResponse: PinpointClientTypes.InAppTemplateResponse? = nil
    )
    {
        self.inAppTemplateResponse = inAppTemplateResponse
    }
}

struct GetInAppTemplateOutputResponseBody: Swift.Equatable {
    let inAppTemplateResponse: PinpointClientTypes.InAppTemplateResponse?
}

extension GetInAppTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inAppTemplateResponse = "InAppTemplateResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inAppTemplateResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.InAppTemplateResponse.self, forKey: .inAppTemplateResponse)
        inAppTemplateResponse = inAppTemplateResponseDecoded
    }
}

extension GetJourneyDateRangeKpiInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let endTime = endTime {
                let endTimeQueryItem = ClientRuntime.URLQueryItem(name: "end-time".urlPercentEncoding(), value: Swift.String(TimestampFormatter(format: .dateTime).string(from: endTime)).urlPercentEncoding())
                items.append(endTimeQueryItem)
            }
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "page-size".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            if let startTime = startTime {
                let startTimeQueryItem = ClientRuntime.URLQueryItem(name: "start-time".urlPercentEncoding(), value: Swift.String(TimestampFormatter(format: .dateTime).string(from: startTime)).urlPercentEncoding())
                items.append(startTimeQueryItem)
            }
            return items
        }
    }
}

extension GetJourneyDateRangeKpiInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let journeyId = journeyId else {
            return nil
        }
        guard let kpiName = kpiName else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/journeys/\(journeyId.urlPercentEncoding())/kpis/daterange/\(kpiName.urlPercentEncoding())"
    }
}

public struct GetJourneyDateRangeKpiInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.
    public var endTime: ClientRuntime.Date?
    /// The unique identifier for the journey.
    /// This member is required.
    public var journeyId: Swift.String?
    /// The name of the metric, also referred to as a key performance indicator (KPI), to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the [Amazon Pinpoint Developer Guide](https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html).
    /// This member is required.
    public var kpiName: Swift.String?
    /// The string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var nextToken: Swift.String?
    /// The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var pageSize: Swift.String?
    /// The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.
    public var startTime: ClientRuntime.Date?

    public init (
        applicationId: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        journeyId: Swift.String? = nil,
        kpiName: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        pageSize: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.applicationId = applicationId
        self.endTime = endTime
        self.journeyId = journeyId
        self.kpiName = kpiName
        self.nextToken = nextToken
        self.pageSize = pageSize
        self.startTime = startTime
    }
}

struct GetJourneyDateRangeKpiInputBody: Swift.Equatable {
}

extension GetJourneyDateRangeKpiInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetJourneyDateRangeKpiOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetJourneyDateRangeKpiOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetJourneyDateRangeKpiOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetJourneyDateRangeKpiOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.JourneyDateRangeKpiResponse = try responseDecoder.decode(responseBody: data)
                self.journeyDateRangeKpiResponse = output
            } else {
                self.journeyDateRangeKpiResponse = nil
            }
        } else {
            self.journeyDateRangeKpiResponse = nil
        }
    }
}

public struct GetJourneyDateRangeKpiOutputResponse: Swift.Equatable {
    /// Provides the results of a query that retrieved the data for a standard engagement metric that applies to a journey, and provides information about that query.
    /// This member is required.
    public var journeyDateRangeKpiResponse: PinpointClientTypes.JourneyDateRangeKpiResponse?

    public init (
        journeyDateRangeKpiResponse: PinpointClientTypes.JourneyDateRangeKpiResponse? = nil
    )
    {
        self.journeyDateRangeKpiResponse = journeyDateRangeKpiResponse
    }
}

struct GetJourneyDateRangeKpiOutputResponseBody: Swift.Equatable {
    let journeyDateRangeKpiResponse: PinpointClientTypes.JourneyDateRangeKpiResponse?
}

extension GetJourneyDateRangeKpiOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case journeyDateRangeKpiResponse = "JourneyDateRangeKpiResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let journeyDateRangeKpiResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneyDateRangeKpiResponse.self, forKey: .journeyDateRangeKpiResponse)
        journeyDateRangeKpiResponse = journeyDateRangeKpiResponseDecoded
    }
}

extension GetJourneyExecutionActivityMetricsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "page-size".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            return items
        }
    }
}

extension GetJourneyExecutionActivityMetricsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let journeyId = journeyId else {
            return nil
        }
        guard let journeyActivityId = journeyActivityId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/journeys/\(journeyId.urlPercentEncoding())/activities/\(journeyActivityId.urlPercentEncoding())/execution-metrics"
    }
}

public struct GetJourneyExecutionActivityMetricsInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the journey activity.
    /// This member is required.
    public var journeyActivityId: Swift.String?
    /// The unique identifier for the journey.
    /// This member is required.
    public var journeyId: Swift.String?
    /// The string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var nextToken: Swift.String?
    /// The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var pageSize: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        journeyActivityId: Swift.String? = nil,
        journeyId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        pageSize: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.journeyActivityId = journeyActivityId
        self.journeyId = journeyId
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct GetJourneyExecutionActivityMetricsInputBody: Swift.Equatable {
}

extension GetJourneyExecutionActivityMetricsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetJourneyExecutionActivityMetricsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetJourneyExecutionActivityMetricsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetJourneyExecutionActivityMetricsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetJourneyExecutionActivityMetricsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.JourneyExecutionActivityMetricsResponse = try responseDecoder.decode(responseBody: data)
                self.journeyExecutionActivityMetricsResponse = output
            } else {
                self.journeyExecutionActivityMetricsResponse = nil
            }
        } else {
            self.journeyExecutionActivityMetricsResponse = nil
        }
    }
}

public struct GetJourneyExecutionActivityMetricsOutputResponse: Swift.Equatable {
    /// Provides the results of a query that retrieved the data for a standard execution metric that applies to a journey activity, and provides information about that query.
    /// This member is required.
    public var journeyExecutionActivityMetricsResponse: PinpointClientTypes.JourneyExecutionActivityMetricsResponse?

    public init (
        journeyExecutionActivityMetricsResponse: PinpointClientTypes.JourneyExecutionActivityMetricsResponse? = nil
    )
    {
        self.journeyExecutionActivityMetricsResponse = journeyExecutionActivityMetricsResponse
    }
}

struct GetJourneyExecutionActivityMetricsOutputResponseBody: Swift.Equatable {
    let journeyExecutionActivityMetricsResponse: PinpointClientTypes.JourneyExecutionActivityMetricsResponse?
}

extension GetJourneyExecutionActivityMetricsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case journeyExecutionActivityMetricsResponse = "JourneyExecutionActivityMetricsResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let journeyExecutionActivityMetricsResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneyExecutionActivityMetricsResponse.self, forKey: .journeyExecutionActivityMetricsResponse)
        journeyExecutionActivityMetricsResponse = journeyExecutionActivityMetricsResponseDecoded
    }
}

extension GetJourneyExecutionMetricsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "page-size".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            return items
        }
    }
}

extension GetJourneyExecutionMetricsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let journeyId = journeyId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/journeys/\(journeyId.urlPercentEncoding())/execution-metrics"
    }
}

public struct GetJourneyExecutionMetricsInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the journey.
    /// This member is required.
    public var journeyId: Swift.String?
    /// The string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var nextToken: Swift.String?
    /// The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var pageSize: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        journeyId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        pageSize: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.journeyId = journeyId
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct GetJourneyExecutionMetricsInputBody: Swift.Equatable {
}

extension GetJourneyExecutionMetricsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetJourneyExecutionMetricsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetJourneyExecutionMetricsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetJourneyExecutionMetricsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetJourneyExecutionMetricsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.JourneyExecutionMetricsResponse = try responseDecoder.decode(responseBody: data)
                self.journeyExecutionMetricsResponse = output
            } else {
                self.journeyExecutionMetricsResponse = nil
            }
        } else {
            self.journeyExecutionMetricsResponse = nil
        }
    }
}

public struct GetJourneyExecutionMetricsOutputResponse: Swift.Equatable {
    /// Provides the results of a query that retrieved the data for a standard execution metric that applies to a journey, and provides information about that query.
    /// This member is required.
    public var journeyExecutionMetricsResponse: PinpointClientTypes.JourneyExecutionMetricsResponse?

    public init (
        journeyExecutionMetricsResponse: PinpointClientTypes.JourneyExecutionMetricsResponse? = nil
    )
    {
        self.journeyExecutionMetricsResponse = journeyExecutionMetricsResponse
    }
}

struct GetJourneyExecutionMetricsOutputResponseBody: Swift.Equatable {
    let journeyExecutionMetricsResponse: PinpointClientTypes.JourneyExecutionMetricsResponse?
}

extension GetJourneyExecutionMetricsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case journeyExecutionMetricsResponse = "JourneyExecutionMetricsResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let journeyExecutionMetricsResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneyExecutionMetricsResponse.self, forKey: .journeyExecutionMetricsResponse)
        journeyExecutionMetricsResponse = journeyExecutionMetricsResponseDecoded
    }
}

extension GetJourneyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let journeyId = journeyId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/journeys/\(journeyId.urlPercentEncoding())"
    }
}

public struct GetJourneyInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the journey.
    /// This member is required.
    public var journeyId: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        journeyId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.journeyId = journeyId
    }
}

struct GetJourneyInputBody: Swift.Equatable {
}

extension GetJourneyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetJourneyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetJourneyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetJourneyOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetJourneyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.JourneyResponse = try responseDecoder.decode(responseBody: data)
                self.journeyResponse = output
            } else {
                self.journeyResponse = nil
            }
        } else {
            self.journeyResponse = nil
        }
    }
}

public struct GetJourneyOutputResponse: Swift.Equatable {
    /// Provides information about the status, configuration, and other settings for a journey.
    /// This member is required.
    public var journeyResponse: PinpointClientTypes.JourneyResponse?

    public init (
        journeyResponse: PinpointClientTypes.JourneyResponse? = nil
    )
    {
        self.journeyResponse = journeyResponse
    }
}

struct GetJourneyOutputResponseBody: Swift.Equatable {
    let journeyResponse: PinpointClientTypes.JourneyResponse?
}

extension GetJourneyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case journeyResponse = "JourneyResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let journeyResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneyResponse.self, forKey: .journeyResponse)
        journeyResponse = journeyResponseDecoded
    }
}

extension GetPushTemplateInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let version = version {
                let versionQueryItem = ClientRuntime.URLQueryItem(name: "version".urlPercentEncoding(), value: Swift.String(version).urlPercentEncoding())
                items.append(versionQueryItem)
            }
            return items
        }
    }
}

extension GetPushTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v1/templates/\(templateName.urlPercentEncoding())/push"
    }
}

public struct GetPushTemplateInput: Swift.Equatable {
    /// The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
    /// This member is required.
    public var templateName: Swift.String?
    /// The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following:
    ///
    /// * For a get operation, retrieves information about the active version of the template.
    ///
    /// * For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.
    ///
    /// * For a delete operation, deletes the template, including all versions of the template.
    public var version: Swift.String?

    public init (
        templateName: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.templateName = templateName
        self.version = version
    }
}

struct GetPushTemplateInputBody: Swift.Equatable {
}

extension GetPushTemplateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetPushTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetPushTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetPushTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPushTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.PushNotificationTemplateResponse = try responseDecoder.decode(responseBody: data)
                self.pushNotificationTemplateResponse = output
            } else {
                self.pushNotificationTemplateResponse = nil
            }
        } else {
            self.pushNotificationTemplateResponse = nil
        }
    }
}

public struct GetPushTemplateOutputResponse: Swift.Equatable {
    /// Provides information about the content and settings for a message template that can be used in messages that are sent through a push notification channel.
    /// This member is required.
    public var pushNotificationTemplateResponse: PinpointClientTypes.PushNotificationTemplateResponse?

    public init (
        pushNotificationTemplateResponse: PinpointClientTypes.PushNotificationTemplateResponse? = nil
    )
    {
        self.pushNotificationTemplateResponse = pushNotificationTemplateResponse
    }
}

struct GetPushTemplateOutputResponseBody: Swift.Equatable {
    let pushNotificationTemplateResponse: PinpointClientTypes.PushNotificationTemplateResponse?
}

extension GetPushTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pushNotificationTemplateResponse = "PushNotificationTemplateResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pushNotificationTemplateResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.PushNotificationTemplateResponse.self, forKey: .pushNotificationTemplateResponse)
        pushNotificationTemplateResponse = pushNotificationTemplateResponseDecoded
    }
}

extension GetRecommenderConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let recommenderId = recommenderId else {
            return nil
        }
        return "/v1/recommenders/\(recommenderId.urlPercentEncoding())"
    }
}

public struct GetRecommenderConfigurationInput: Swift.Equatable {
    /// The unique identifier for the recommender model configuration. This identifier is displayed as the Recommender ID on the Amazon Pinpoint console.
    /// This member is required.
    public var recommenderId: Swift.String?

    public init (
        recommenderId: Swift.String? = nil
    )
    {
        self.recommenderId = recommenderId
    }
}

struct GetRecommenderConfigurationInputBody: Swift.Equatable {
}

extension GetRecommenderConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetRecommenderConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRecommenderConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRecommenderConfigurationOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRecommenderConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.RecommenderConfigurationResponse = try responseDecoder.decode(responseBody: data)
                self.recommenderConfigurationResponse = output
            } else {
                self.recommenderConfigurationResponse = nil
            }
        } else {
            self.recommenderConfigurationResponse = nil
        }
    }
}

public struct GetRecommenderConfigurationOutputResponse: Swift.Equatable {
    /// Provides information about Amazon Pinpoint configuration settings for retrieving and processing data from a recommender model.
    /// This member is required.
    public var recommenderConfigurationResponse: PinpointClientTypes.RecommenderConfigurationResponse?

    public init (
        recommenderConfigurationResponse: PinpointClientTypes.RecommenderConfigurationResponse? = nil
    )
    {
        self.recommenderConfigurationResponse = recommenderConfigurationResponse
    }
}

struct GetRecommenderConfigurationOutputResponseBody: Swift.Equatable {
    let recommenderConfigurationResponse: PinpointClientTypes.RecommenderConfigurationResponse?
}

extension GetRecommenderConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recommenderConfigurationResponse = "RecommenderConfigurationResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommenderConfigurationResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.RecommenderConfigurationResponse.self, forKey: .recommenderConfigurationResponse)
        recommenderConfigurationResponse = recommenderConfigurationResponseDecoded
    }
}

extension GetRecommenderConfigurationsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "page-size".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            if let token = token {
                let tokenQueryItem = ClientRuntime.URLQueryItem(name: "token".urlPercentEncoding(), value: Swift.String(token).urlPercentEncoding())
                items.append(tokenQueryItem)
            }
            return items
        }
    }
}

extension GetRecommenderConfigurationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/recommenders"
    }
}

public struct GetRecommenderConfigurationsInput: Swift.Equatable {
    /// The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var pageSize: Swift.String?
    /// The NextToken string that specifies which page of results to return in a paginated response.
    public var token: Swift.String?

    public init (
        pageSize: Swift.String? = nil,
        token: Swift.String? = nil
    )
    {
        self.pageSize = pageSize
        self.token = token
    }
}

struct GetRecommenderConfigurationsInputBody: Swift.Equatable {
}

extension GetRecommenderConfigurationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetRecommenderConfigurationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRecommenderConfigurationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRecommenderConfigurationsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRecommenderConfigurationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.ListRecommenderConfigurationsResponse = try responseDecoder.decode(responseBody: data)
                self.listRecommenderConfigurationsResponse = output
            } else {
                self.listRecommenderConfigurationsResponse = nil
            }
        } else {
            self.listRecommenderConfigurationsResponse = nil
        }
    }
}

public struct GetRecommenderConfigurationsOutputResponse: Swift.Equatable {
    /// Provides information about all the recommender model configurations that are associated with your Amazon Pinpoint account.
    /// This member is required.
    public var listRecommenderConfigurationsResponse: PinpointClientTypes.ListRecommenderConfigurationsResponse?

    public init (
        listRecommenderConfigurationsResponse: PinpointClientTypes.ListRecommenderConfigurationsResponse? = nil
    )
    {
        self.listRecommenderConfigurationsResponse = listRecommenderConfigurationsResponse
    }
}

struct GetRecommenderConfigurationsOutputResponseBody: Swift.Equatable {
    let listRecommenderConfigurationsResponse: PinpointClientTypes.ListRecommenderConfigurationsResponse?
}

extension GetRecommenderConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case listRecommenderConfigurationsResponse = "ListRecommenderConfigurationsResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let listRecommenderConfigurationsResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ListRecommenderConfigurationsResponse.self, forKey: .listRecommenderConfigurationsResponse)
        listRecommenderConfigurationsResponse = listRecommenderConfigurationsResponseDecoded
    }
}

extension GetSegmentExportJobsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "page-size".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            if let token = token {
                let tokenQueryItem = ClientRuntime.URLQueryItem(name: "token".urlPercentEncoding(), value: Swift.String(token).urlPercentEncoding())
                items.append(tokenQueryItem)
            }
            return items
        }
    }
}

extension GetSegmentExportJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let segmentId = segmentId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/segments/\(segmentId.urlPercentEncoding())/jobs/export"
    }
}

public struct GetSegmentExportJobsInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var pageSize: Swift.String?
    /// The unique identifier for the segment.
    /// This member is required.
    public var segmentId: Swift.String?
    /// The NextToken string that specifies which page of results to return in a paginated response.
    public var token: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        pageSize: Swift.String? = nil,
        segmentId: Swift.String? = nil,
        token: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.pageSize = pageSize
        self.segmentId = segmentId
        self.token = token
    }
}

struct GetSegmentExportJobsInputBody: Swift.Equatable {
}

extension GetSegmentExportJobsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetSegmentExportJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSegmentExportJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetSegmentExportJobsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSegmentExportJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.ExportJobsResponse = try responseDecoder.decode(responseBody: data)
                self.exportJobsResponse = output
            } else {
                self.exportJobsResponse = nil
            }
        } else {
            self.exportJobsResponse = nil
        }
    }
}

public struct GetSegmentExportJobsOutputResponse: Swift.Equatable {
    /// Provides information about all the export jobs that are associated with an application or segment. An export job is a job that exports endpoint definitions to a file.
    /// This member is required.
    public var exportJobsResponse: PinpointClientTypes.ExportJobsResponse?

    public init (
        exportJobsResponse: PinpointClientTypes.ExportJobsResponse? = nil
    )
    {
        self.exportJobsResponse = exportJobsResponse
    }
}

struct GetSegmentExportJobsOutputResponseBody: Swift.Equatable {
    let exportJobsResponse: PinpointClientTypes.ExportJobsResponse?
}

extension GetSegmentExportJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportJobsResponse = "ExportJobsResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportJobsResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ExportJobsResponse.self, forKey: .exportJobsResponse)
        exportJobsResponse = exportJobsResponseDecoded
    }
}

extension GetSegmentImportJobsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "page-size".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            if let token = token {
                let tokenQueryItem = ClientRuntime.URLQueryItem(name: "token".urlPercentEncoding(), value: Swift.String(token).urlPercentEncoding())
                items.append(tokenQueryItem)
            }
            return items
        }
    }
}

extension GetSegmentImportJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let segmentId = segmentId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/segments/\(segmentId.urlPercentEncoding())/jobs/import"
    }
}

public struct GetSegmentImportJobsInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var pageSize: Swift.String?
    /// The unique identifier for the segment.
    /// This member is required.
    public var segmentId: Swift.String?
    /// The NextToken string that specifies which page of results to return in a paginated response.
    public var token: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        pageSize: Swift.String? = nil,
        segmentId: Swift.String? = nil,
        token: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.pageSize = pageSize
        self.segmentId = segmentId
        self.token = token
    }
}

struct GetSegmentImportJobsInputBody: Swift.Equatable {
}

extension GetSegmentImportJobsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetSegmentImportJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSegmentImportJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetSegmentImportJobsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSegmentImportJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.ImportJobsResponse = try responseDecoder.decode(responseBody: data)
                self.importJobsResponse = output
            } else {
                self.importJobsResponse = nil
            }
        } else {
            self.importJobsResponse = nil
        }
    }
}

public struct GetSegmentImportJobsOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of all the import jobs that are associated with an application or segment. An import job is a job that imports endpoint definitions from one or more files.
    /// This member is required.
    public var importJobsResponse: PinpointClientTypes.ImportJobsResponse?

    public init (
        importJobsResponse: PinpointClientTypes.ImportJobsResponse? = nil
    )
    {
        self.importJobsResponse = importJobsResponse
    }
}

struct GetSegmentImportJobsOutputResponseBody: Swift.Equatable {
    let importJobsResponse: PinpointClientTypes.ImportJobsResponse?
}

extension GetSegmentImportJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importJobsResponse = "ImportJobsResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importJobsResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ImportJobsResponse.self, forKey: .importJobsResponse)
        importJobsResponse = importJobsResponseDecoded
    }
}

extension GetSegmentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let segmentId = segmentId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/segments/\(segmentId.urlPercentEncoding())"
    }
}

public struct GetSegmentInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the segment.
    /// This member is required.
    public var segmentId: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        segmentId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.segmentId = segmentId
    }
}

struct GetSegmentInputBody: Swift.Equatable {
}

extension GetSegmentInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetSegmentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSegmentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetSegmentOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSegmentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.SegmentResponse = try responseDecoder.decode(responseBody: data)
                self.segmentResponse = output
            } else {
                self.segmentResponse = nil
            }
        } else {
            self.segmentResponse = nil
        }
    }
}

public struct GetSegmentOutputResponse: Swift.Equatable {
    /// Provides information about the configuration, dimension, and other settings for a segment.
    /// This member is required.
    public var segmentResponse: PinpointClientTypes.SegmentResponse?

    public init (
        segmentResponse: PinpointClientTypes.SegmentResponse? = nil
    )
    {
        self.segmentResponse = segmentResponse
    }
}

struct GetSegmentOutputResponseBody: Swift.Equatable {
    let segmentResponse: PinpointClientTypes.SegmentResponse?
}

extension GetSegmentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case segmentResponse = "SegmentResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let segmentResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentResponse.self, forKey: .segmentResponse)
        segmentResponse = segmentResponseDecoded
    }
}

extension GetSegmentVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let segmentId = segmentId else {
            return nil
        }
        guard let version = version else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/segments/\(segmentId.urlPercentEncoding())/versions/\(version.urlPercentEncoding())"
    }
}

public struct GetSegmentVersionInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the segment.
    /// This member is required.
    public var segmentId: Swift.String?
    /// The unique version number (Version property) for the campaign version.
    /// This member is required.
    public var version: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        segmentId: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.segmentId = segmentId
        self.version = version
    }
}

struct GetSegmentVersionInputBody: Swift.Equatable {
}

extension GetSegmentVersionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetSegmentVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSegmentVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetSegmentVersionOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSegmentVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.SegmentResponse = try responseDecoder.decode(responseBody: data)
                self.segmentResponse = output
            } else {
                self.segmentResponse = nil
            }
        } else {
            self.segmentResponse = nil
        }
    }
}

public struct GetSegmentVersionOutputResponse: Swift.Equatable {
    /// Provides information about the configuration, dimension, and other settings for a segment.
    /// This member is required.
    public var segmentResponse: PinpointClientTypes.SegmentResponse?

    public init (
        segmentResponse: PinpointClientTypes.SegmentResponse? = nil
    )
    {
        self.segmentResponse = segmentResponse
    }
}

struct GetSegmentVersionOutputResponseBody: Swift.Equatable {
    let segmentResponse: PinpointClientTypes.SegmentResponse?
}

extension GetSegmentVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case segmentResponse = "SegmentResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let segmentResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentResponse.self, forKey: .segmentResponse)
        segmentResponse = segmentResponseDecoded
    }
}

extension GetSegmentVersionsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "page-size".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            if let token = token {
                let tokenQueryItem = ClientRuntime.URLQueryItem(name: "token".urlPercentEncoding(), value: Swift.String(token).urlPercentEncoding())
                items.append(tokenQueryItem)
            }
            return items
        }
    }
}

extension GetSegmentVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let segmentId = segmentId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/segments/\(segmentId.urlPercentEncoding())/versions"
    }
}

public struct GetSegmentVersionsInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var pageSize: Swift.String?
    /// The unique identifier for the segment.
    /// This member is required.
    public var segmentId: Swift.String?
    /// The NextToken string that specifies which page of results to return in a paginated response.
    public var token: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        pageSize: Swift.String? = nil,
        segmentId: Swift.String? = nil,
        token: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.pageSize = pageSize
        self.segmentId = segmentId
        self.token = token
    }
}

struct GetSegmentVersionsInputBody: Swift.Equatable {
}

extension GetSegmentVersionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetSegmentVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSegmentVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetSegmentVersionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSegmentVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.SegmentsResponse = try responseDecoder.decode(responseBody: data)
                self.segmentsResponse = output
            } else {
                self.segmentsResponse = nil
            }
        } else {
            self.segmentsResponse = nil
        }
    }
}

public struct GetSegmentVersionsOutputResponse: Swift.Equatable {
    /// Provides information about all the segments that are associated with an application.
    /// This member is required.
    public var segmentsResponse: PinpointClientTypes.SegmentsResponse?

    public init (
        segmentsResponse: PinpointClientTypes.SegmentsResponse? = nil
    )
    {
        self.segmentsResponse = segmentsResponse
    }
}

struct GetSegmentVersionsOutputResponseBody: Swift.Equatable {
    let segmentsResponse: PinpointClientTypes.SegmentsResponse?
}

extension GetSegmentVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case segmentsResponse = "SegmentsResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let segmentsResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentsResponse.self, forKey: .segmentsResponse)
        segmentsResponse = segmentsResponseDecoded
    }
}

extension GetSegmentsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "page-size".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            if let token = token {
                let tokenQueryItem = ClientRuntime.URLQueryItem(name: "token".urlPercentEncoding(), value: Swift.String(token).urlPercentEncoding())
                items.append(tokenQueryItem)
            }
            return items
        }
    }
}

extension GetSegmentsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/segments"
    }
}

public struct GetSegmentsInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var pageSize: Swift.String?
    /// The NextToken string that specifies which page of results to return in a paginated response.
    public var token: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        pageSize: Swift.String? = nil,
        token: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.pageSize = pageSize
        self.token = token
    }
}

struct GetSegmentsInputBody: Swift.Equatable {
}

extension GetSegmentsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetSegmentsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSegmentsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetSegmentsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSegmentsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.SegmentsResponse = try responseDecoder.decode(responseBody: data)
                self.segmentsResponse = output
            } else {
                self.segmentsResponse = nil
            }
        } else {
            self.segmentsResponse = nil
        }
    }
}

public struct GetSegmentsOutputResponse: Swift.Equatable {
    /// Provides information about all the segments that are associated with an application.
    /// This member is required.
    public var segmentsResponse: PinpointClientTypes.SegmentsResponse?

    public init (
        segmentsResponse: PinpointClientTypes.SegmentsResponse? = nil
    )
    {
        self.segmentsResponse = segmentsResponse
    }
}

struct GetSegmentsOutputResponseBody: Swift.Equatable {
    let segmentsResponse: PinpointClientTypes.SegmentsResponse?
}

extension GetSegmentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case segmentsResponse = "SegmentsResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let segmentsResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentsResponse.self, forKey: .segmentsResponse)
        segmentsResponse = segmentsResponseDecoded
    }
}

extension GetSmsChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/sms"
    }
}

public struct GetSmsChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct GetSmsChannelInputBody: Swift.Equatable {
}

extension GetSmsChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetSmsChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSmsChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetSmsChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSmsChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.SMSChannelResponse = try responseDecoder.decode(responseBody: data)
                self.smsChannelResponse = output
            } else {
                self.smsChannelResponse = nil
            }
        } else {
            self.smsChannelResponse = nil
        }
    }
}

public struct GetSmsChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the SMS channel for an application.
    /// This member is required.
    public var smsChannelResponse: PinpointClientTypes.SMSChannelResponse?

    public init (
        smsChannelResponse: PinpointClientTypes.SMSChannelResponse? = nil
    )
    {
        self.smsChannelResponse = smsChannelResponse
    }
}

struct GetSmsChannelOutputResponseBody: Swift.Equatable {
    let smsChannelResponse: PinpointClientTypes.SMSChannelResponse?
}

extension GetSmsChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case smsChannelResponse = "SMSChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let smsChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SMSChannelResponse.self, forKey: .smsChannelResponse)
        smsChannelResponse = smsChannelResponseDecoded
    }
}

extension GetSmsTemplateInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let version = version {
                let versionQueryItem = ClientRuntime.URLQueryItem(name: "version".urlPercentEncoding(), value: Swift.String(version).urlPercentEncoding())
                items.append(versionQueryItem)
            }
            return items
        }
    }
}

extension GetSmsTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v1/templates/\(templateName.urlPercentEncoding())/sms"
    }
}

public struct GetSmsTemplateInput: Swift.Equatable {
    /// The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
    /// This member is required.
    public var templateName: Swift.String?
    /// The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following:
    ///
    /// * For a get operation, retrieves information about the active version of the template.
    ///
    /// * For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.
    ///
    /// * For a delete operation, deletes the template, including all versions of the template.
    public var version: Swift.String?

    public init (
        templateName: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.templateName = templateName
        self.version = version
    }
}

struct GetSmsTemplateInputBody: Swift.Equatable {
}

extension GetSmsTemplateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetSmsTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSmsTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetSmsTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSmsTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.SMSTemplateResponse = try responseDecoder.decode(responseBody: data)
                self.smsTemplateResponse = output
            } else {
                self.smsTemplateResponse = nil
            }
        } else {
            self.smsTemplateResponse = nil
        }
    }
}

public struct GetSmsTemplateOutputResponse: Swift.Equatable {
    /// Provides information about the content and settings for a message template that can be used in text messages that are sent through the SMS channel.
    /// This member is required.
    public var smsTemplateResponse: PinpointClientTypes.SMSTemplateResponse?

    public init (
        smsTemplateResponse: PinpointClientTypes.SMSTemplateResponse? = nil
    )
    {
        self.smsTemplateResponse = smsTemplateResponse
    }
}

struct GetSmsTemplateOutputResponseBody: Swift.Equatable {
    let smsTemplateResponse: PinpointClientTypes.SMSTemplateResponse?
}

extension GetSmsTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case smsTemplateResponse = "SMSTemplateResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let smsTemplateResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SMSTemplateResponse.self, forKey: .smsTemplateResponse)
        smsTemplateResponse = smsTemplateResponseDecoded
    }
}

extension GetUserEndpointsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let userId = userId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/users/\(userId.urlPercentEncoding())"
    }
}

public struct GetUserEndpointsInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the user.
    /// This member is required.
    public var userId: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.userId = userId
    }
}

struct GetUserEndpointsInputBody: Swift.Equatable {
}

extension GetUserEndpointsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetUserEndpointsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetUserEndpointsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetUserEndpointsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetUserEndpointsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.EndpointsResponse = try responseDecoder.decode(responseBody: data)
                self.endpointsResponse = output
            } else {
                self.endpointsResponse = nil
            }
        } else {
            self.endpointsResponse = nil
        }
    }
}

public struct GetUserEndpointsOutputResponse: Swift.Equatable {
    /// Provides information about all the endpoints that are associated with a user ID.
    /// This member is required.
    public var endpointsResponse: PinpointClientTypes.EndpointsResponse?

    public init (
        endpointsResponse: PinpointClientTypes.EndpointsResponse? = nil
    )
    {
        self.endpointsResponse = endpointsResponse
    }
}

struct GetUserEndpointsOutputResponseBody: Swift.Equatable {
    let endpointsResponse: PinpointClientTypes.EndpointsResponse?
}

extension GetUserEndpointsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointsResponse = "EndpointsResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointsResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EndpointsResponse.self, forKey: .endpointsResponse)
        endpointsResponse = endpointsResponseDecoded
    }
}

extension GetVoiceChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/voice"
    }
}

public struct GetVoiceChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct GetVoiceChannelInputBody: Swift.Equatable {
}

extension GetVoiceChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetVoiceChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetVoiceChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetVoiceChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetVoiceChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.VoiceChannelResponse = try responseDecoder.decode(responseBody: data)
                self.voiceChannelResponse = output
            } else {
                self.voiceChannelResponse = nil
            }
        } else {
            self.voiceChannelResponse = nil
        }
    }
}

public struct GetVoiceChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the voice channel for an application.
    /// This member is required.
    public var voiceChannelResponse: PinpointClientTypes.VoiceChannelResponse?

    public init (
        voiceChannelResponse: PinpointClientTypes.VoiceChannelResponse? = nil
    )
    {
        self.voiceChannelResponse = voiceChannelResponse
    }
}

struct GetVoiceChannelOutputResponseBody: Swift.Equatable {
    let voiceChannelResponse: PinpointClientTypes.VoiceChannelResponse?
}

extension GetVoiceChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case voiceChannelResponse = "VoiceChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let voiceChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.VoiceChannelResponse.self, forKey: .voiceChannelResponse)
        voiceChannelResponse = voiceChannelResponseDecoded
    }
}

extension GetVoiceTemplateInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let version = version {
                let versionQueryItem = ClientRuntime.URLQueryItem(name: "version".urlPercentEncoding(), value: Swift.String(version).urlPercentEncoding())
                items.append(versionQueryItem)
            }
            return items
        }
    }
}

extension GetVoiceTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v1/templates/\(templateName.urlPercentEncoding())/voice"
    }
}

public struct GetVoiceTemplateInput: Swift.Equatable {
    /// The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
    /// This member is required.
    public var templateName: Swift.String?
    /// The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following:
    ///
    /// * For a get operation, retrieves information about the active version of the template.
    ///
    /// * For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.
    ///
    /// * For a delete operation, deletes the template, including all versions of the template.
    public var version: Swift.String?

    public init (
        templateName: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.templateName = templateName
        self.version = version
    }
}

struct GetVoiceTemplateInputBody: Swift.Equatable {
}

extension GetVoiceTemplateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetVoiceTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetVoiceTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetVoiceTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetVoiceTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.VoiceTemplateResponse = try responseDecoder.decode(responseBody: data)
                self.voiceTemplateResponse = output
            } else {
                self.voiceTemplateResponse = nil
            }
        } else {
            self.voiceTemplateResponse = nil
        }
    }
}

public struct GetVoiceTemplateOutputResponse: Swift.Equatable {
    /// Provides information about the content and settings for a message template that can be used in messages that are sent through the voice channel.
    /// This member is required.
    public var voiceTemplateResponse: PinpointClientTypes.VoiceTemplateResponse?

    public init (
        voiceTemplateResponse: PinpointClientTypes.VoiceTemplateResponse? = nil
    )
    {
        self.voiceTemplateResponse = voiceTemplateResponse
    }
}

struct GetVoiceTemplateOutputResponseBody: Swift.Equatable {
    let voiceTemplateResponse: PinpointClientTypes.VoiceTemplateResponse?
}

extension GetVoiceTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case voiceTemplateResponse = "VoiceTemplateResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let voiceTemplateResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.VoiceTemplateResponse.self, forKey: .voiceTemplateResponse)
        voiceTemplateResponse = voiceTemplateResponseDecoded
    }
}

extension PinpointClientTypes.HoldoutActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextActivity = "NextActivity"
        case percentage = "Percentage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextActivity = self.nextActivity {
            try encodeContainer.encode(nextActivity, forKey: .nextActivity)
        }
        if let percentage = self.percentage {
            try encodeContainer.encode(percentage, forKey: .percentage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextActivityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextActivity)
        nextActivity = nextActivityDecoded
        let percentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .percentage)
        percentage = percentageDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the settings for a holdout activity in a journey. This type of activity stops a journey for a specified percentage of participants.
    public struct HoldoutActivity: Swift.Equatable {
        /// The unique identifier for the next activity to perform, after performing the holdout activity.
        public var nextActivity: Swift.String?
        /// The percentage of participants who shouldn't continue the journey. To determine which participants are held out, Amazon Pinpoint applies a probability-based algorithm to the percentage that you specify. Therefore, the actual percentage of participants who are held out may not be equal to the percentage that you specify.
        /// This member is required.
        public var percentage: Swift.Int?

        public init (
            nextActivity: Swift.String? = nil,
            percentage: Swift.Int? = nil
        )
        {
            self.nextActivity = nextActivity
            self.percentage = percentage
        }
    }

}

extension PinpointClientTypes.ImportJobRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defineSegment = "DefineSegment"
        case externalId = "ExternalId"
        case format = "Format"
        case registerEndpoints = "RegisterEndpoints"
        case roleArn = "RoleArn"
        case s3Url = "S3Url"
        case segmentId = "SegmentId"
        case segmentName = "SegmentName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defineSegment = self.defineSegment {
            try encodeContainer.encode(defineSegment, forKey: .defineSegment)
        }
        if let externalId = self.externalId {
            try encodeContainer.encode(externalId, forKey: .externalId)
        }
        if let format = self.format {
            try encodeContainer.encode(format.rawValue, forKey: .format)
        }
        if let registerEndpoints = self.registerEndpoints {
            try encodeContainer.encode(registerEndpoints, forKey: .registerEndpoints)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let s3Url = self.s3Url {
            try encodeContainer.encode(s3Url, forKey: .s3Url)
        }
        if let segmentId = self.segmentId {
            try encodeContainer.encode(segmentId, forKey: .segmentId)
        }
        if let segmentName = self.segmentName {
            try encodeContainer.encode(segmentName, forKey: .segmentName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defineSegmentDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .defineSegment)
        defineSegment = defineSegmentDecoded
        let externalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalId)
        externalId = externalIdDecoded
        let formatDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Format.self, forKey: .format)
        format = formatDecoded
        let registerEndpointsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .registerEndpoints)
        registerEndpoints = registerEndpointsDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let s3UrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Url)
        s3Url = s3UrlDecoded
        let segmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .segmentId)
        segmentId = segmentIdDecoded
        let segmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .segmentName)
        segmentName = segmentNameDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the settings for a job that imports endpoint definitions from an Amazon Simple Storage Service (Amazon S3) bucket.
    public struct ImportJobRequest: Swift.Equatable {
        /// Specifies whether to create a segment that contains the endpoints, when the endpoint definitions are imported.
        public var defineSegment: Swift.Bool?
        /// (Deprecated) Your AWS account ID, which you assigned to an external ID key in an IAM trust policy. Amazon Pinpoint previously used this value to assume an IAM role when importing endpoint definitions, but we removed this requirement. We don't recommend use of external IDs for IAM roles that are assumed by Amazon Pinpoint.
        public var externalId: Swift.String?
        /// The format of the files that contain the endpoint definitions to import. Valid values are: CSV, for comma-separated values format; and, JSON, for newline-delimited JSON format. If the Amazon S3 location stores multiple files that use different formats, Amazon Pinpoint imports data only from the files that use the specified format.
        /// This member is required.
        public var format: PinpointClientTypes.Format?
        /// Specifies whether to register the endpoints with Amazon Pinpoint, when the endpoint definitions are imported.
        public var registerEndpoints: Swift.Bool?
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon Pinpoint to access the Amazon S3 location to import endpoint definitions from.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The URL of the Amazon Simple Storage Service (Amazon S3) bucket that contains the endpoint definitions to import. This location can be a folder or a single file. If the location is a folder, Amazon Pinpoint imports endpoint definitions from the files in this location, including any subfolders that the folder contains. The URL should be in the following format: s3://bucket-name/folder-name/file-name. The location can end with the key for an individual object or a prefix that qualifies multiple objects.
        /// This member is required.
        public var s3Url: Swift.String?
        /// The identifier for the segment to update or add the imported endpoint definitions to, if the import job is meant to update an existing segment.
        public var segmentId: Swift.String?
        /// A custom name for the segment that's created by the import job, if the value of the DefineSegment property is true.
        public var segmentName: Swift.String?

        public init (
            defineSegment: Swift.Bool? = nil,
            externalId: Swift.String? = nil,
            format: PinpointClientTypes.Format? = nil,
            registerEndpoints: Swift.Bool? = nil,
            roleArn: Swift.String? = nil,
            s3Url: Swift.String? = nil,
            segmentId: Swift.String? = nil,
            segmentName: Swift.String? = nil
        )
        {
            self.defineSegment = defineSegment
            self.externalId = externalId
            self.format = format
            self.registerEndpoints = registerEndpoints
            self.roleArn = roleArn
            self.s3Url = s3Url
            self.segmentId = segmentId
            self.segmentName = segmentName
        }
    }

}

extension PinpointClientTypes.ImportJobResource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defineSegment = "DefineSegment"
        case externalId = "ExternalId"
        case format = "Format"
        case registerEndpoints = "RegisterEndpoints"
        case roleArn = "RoleArn"
        case s3Url = "S3Url"
        case segmentId = "SegmentId"
        case segmentName = "SegmentName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defineSegment = self.defineSegment {
            try encodeContainer.encode(defineSegment, forKey: .defineSegment)
        }
        if let externalId = self.externalId {
            try encodeContainer.encode(externalId, forKey: .externalId)
        }
        if let format = self.format {
            try encodeContainer.encode(format.rawValue, forKey: .format)
        }
        if let registerEndpoints = self.registerEndpoints {
            try encodeContainer.encode(registerEndpoints, forKey: .registerEndpoints)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let s3Url = self.s3Url {
            try encodeContainer.encode(s3Url, forKey: .s3Url)
        }
        if let segmentId = self.segmentId {
            try encodeContainer.encode(segmentId, forKey: .segmentId)
        }
        if let segmentName = self.segmentName {
            try encodeContainer.encode(segmentName, forKey: .segmentName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defineSegmentDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .defineSegment)
        defineSegment = defineSegmentDecoded
        let externalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalId)
        externalId = externalIdDecoded
        let formatDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Format.self, forKey: .format)
        format = formatDecoded
        let registerEndpointsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .registerEndpoints)
        registerEndpoints = registerEndpointsDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let s3UrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Url)
        s3Url = s3UrlDecoded
        let segmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .segmentId)
        segmentId = segmentIdDecoded
        let segmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .segmentName)
        segmentName = segmentNameDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the resource settings for a job that imports endpoint definitions from one or more files. The files can be stored in an Amazon Simple Storage Service (Amazon S3) bucket or uploaded directly from a computer by using the Amazon Pinpoint console.
    public struct ImportJobResource: Swift.Equatable {
        /// Specifies whether the import job creates a segment that contains the endpoints, when the endpoint definitions are imported.
        public var defineSegment: Swift.Bool?
        /// (Deprecated) Your AWS account ID, which you assigned to an external ID key in an IAM trust policy. Amazon Pinpoint previously used this value to assume an IAM role when importing endpoint definitions, but we removed this requirement. We don't recommend use of external IDs for IAM roles that are assumed by Amazon Pinpoint.
        public var externalId: Swift.String?
        /// The format of the files that contain the endpoint definitions to import. Valid values are: CSV, for comma-separated values format; and, JSON, for newline-delimited JSON format. If the files are stored in an Amazon S3 location and that location contains multiple files that use different formats, Amazon Pinpoint imports data only from the files that use the specified format.
        /// This member is required.
        public var format: PinpointClientTypes.Format?
        /// Specifies whether the import job registers the endpoints with Amazon Pinpoint, when the endpoint definitions are imported.
        public var registerEndpoints: Swift.Bool?
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon Pinpoint to access the Amazon S3 location to import endpoint definitions from.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The URL of the Amazon Simple Storage Service (Amazon S3) bucket that contains the endpoint definitions to import. This location can be a folder or a single file. If the location is a folder, Amazon Pinpoint imports endpoint definitions from the files in this location, including any subfolders that the folder contains. The URL should be in the following format: s3://bucket-name/folder-name/file-name. The location can end with the key for an individual object or a prefix that qualifies multiple objects.
        /// This member is required.
        public var s3Url: Swift.String?
        /// The identifier for the segment that the import job updates or adds endpoint definitions to, if the import job updates an existing segment.
        public var segmentId: Swift.String?
        /// The custom name for the segment that's created by the import job, if the value of the DefineSegment property is true.
        public var segmentName: Swift.String?

        public init (
            defineSegment: Swift.Bool? = nil,
            externalId: Swift.String? = nil,
            format: PinpointClientTypes.Format? = nil,
            registerEndpoints: Swift.Bool? = nil,
            roleArn: Swift.String? = nil,
            s3Url: Swift.String? = nil,
            segmentId: Swift.String? = nil,
            segmentName: Swift.String? = nil
        )
        {
            self.defineSegment = defineSegment
            self.externalId = externalId
            self.format = format
            self.registerEndpoints = registerEndpoints
            self.roleArn = roleArn
            self.s3Url = s3Url
            self.segmentId = segmentId
            self.segmentName = segmentName
        }
    }

}

extension PinpointClientTypes.ImportJobResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case completedPieces = "CompletedPieces"
        case completionDate = "CompletionDate"
        case creationDate = "CreationDate"
        case definition = "Definition"
        case failedPieces = "FailedPieces"
        case failures = "Failures"
        case id = "Id"
        case jobStatus = "JobStatus"
        case totalFailures = "TotalFailures"
        case totalPieces = "TotalPieces"
        case totalProcessed = "TotalProcessed"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let completedPieces = self.completedPieces {
            try encodeContainer.encode(completedPieces, forKey: .completedPieces)
        }
        if let completionDate = self.completionDate {
            try encodeContainer.encode(completionDate, forKey: .completionDate)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let definition = self.definition {
            try encodeContainer.encode(definition, forKey: .definition)
        }
        if let failedPieces = self.failedPieces {
            try encodeContainer.encode(failedPieces, forKey: .failedPieces)
        }
        if let failures = failures {
            var failuresContainer = encodeContainer.nestedUnkeyedContainer(forKey: .failures)
            for __string0 in failures {
                try failuresContainer.encode(__string0)
            }
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let jobStatus = self.jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let totalFailures = self.totalFailures {
            try encodeContainer.encode(totalFailures, forKey: .totalFailures)
        }
        if let totalPieces = self.totalPieces {
            try encodeContainer.encode(totalPieces, forKey: .totalPieces)
        }
        if let totalProcessed = self.totalProcessed {
            try encodeContainer.encode(totalProcessed, forKey: .totalProcessed)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let completedPiecesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .completedPieces)
        completedPieces = completedPiecesDecoded
        let completionDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .completionDate)
        completionDate = completionDateDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let definitionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ImportJobResource.self, forKey: .definition)
        definition = definitionDecoded
        let failedPiecesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failedPieces)
        failedPieces = failedPiecesDecoded
        let failuresContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .failures)
        var failuresDecoded0:[Swift.String]? = nil
        if let failuresContainer = failuresContainer {
            failuresDecoded0 = [Swift.String]()
            for string0 in failuresContainer {
                if let string0 = string0 {
                    failuresDecoded0?.append(string0)
                }
            }
        }
        failures = failuresDecoded0
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let totalFailuresDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalFailures)
        totalFailures = totalFailuresDecoded
        let totalPiecesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalPieces)
        totalPieces = totalPiecesDecoded
        let totalProcessedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalProcessed)
        totalProcessed = totalProcessedDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the status and settings of a job that imports endpoint definitions from one or more files. The files can be stored in an Amazon Simple Storage Service (Amazon S3) bucket or uploaded directly from a computer by using the Amazon Pinpoint console.
    public struct ImportJobResponse: Swift.Equatable {
        /// The unique identifier for the application that's associated with the import job.
        /// This member is required.
        public var applicationId: Swift.String?
        /// The number of pieces that were processed successfully (completed) by the import job, as of the time of the request.
        public var completedPieces: Swift.Int?
        /// The date, in ISO 8601 format, when the import job was completed.
        public var completionDate: Swift.String?
        /// The date, in ISO 8601 format, when the import job was created.
        /// This member is required.
        public var creationDate: Swift.String?
        /// The resource settings that apply to the import job.
        /// This member is required.
        public var definition: PinpointClientTypes.ImportJobResource?
        /// The number of pieces that weren't processed successfully (failed) by the import job, as of the time of the request.
        public var failedPieces: Swift.Int?
        /// An array of entries, one for each of the first 100 entries that weren't processed successfully (failed) by the import job, if any.
        public var failures: [Swift.String]?
        /// The unique identifier for the import job.
        /// This member is required.
        public var id: Swift.String?
        /// The status of the import job. The job status is FAILED if Amazon Pinpoint wasn't able to process one or more pieces in the job.
        /// This member is required.
        public var jobStatus: PinpointClientTypes.JobStatus?
        /// The total number of endpoint definitions that weren't processed successfully (failed) by the import job, typically because an error, such as a syntax error, occurred.
        public var totalFailures: Swift.Int?
        /// The total number of pieces that must be processed to complete the import job. Each piece consists of an approximately equal portion of the endpoint definitions that are part of the import job.
        public var totalPieces: Swift.Int?
        /// The total number of endpoint definitions that were processed by the import job.
        public var totalProcessed: Swift.Int?
        /// The job type. This value is IMPORT for import jobs.
        /// This member is required.
        public var type: Swift.String?

        public init (
            applicationId: Swift.String? = nil,
            completedPieces: Swift.Int? = nil,
            completionDate: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            definition: PinpointClientTypes.ImportJobResource? = nil,
            failedPieces: Swift.Int? = nil,
            failures: [Swift.String]? = nil,
            id: Swift.String? = nil,
            jobStatus: PinpointClientTypes.JobStatus? = nil,
            totalFailures: Swift.Int? = nil,
            totalPieces: Swift.Int? = nil,
            totalProcessed: Swift.Int? = nil,
            type: Swift.String? = nil
        )
        {
            self.applicationId = applicationId
            self.completedPieces = completedPieces
            self.completionDate = completionDate
            self.creationDate = creationDate
            self.definition = definition
            self.failedPieces = failedPieces
            self.failures = failures
            self.id = id
            self.jobStatus = jobStatus
            self.totalFailures = totalFailures
            self.totalPieces = totalPieces
            self.totalProcessed = totalProcessed
            self.type = type
        }
    }

}

extension PinpointClientTypes.ImportJobsResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case item = "Item"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let item = item {
            var itemContainer = encodeContainer.nestedUnkeyedContainer(forKey: .item)
            for importjobresponse0 in item {
                try itemContainer.encode(importjobresponse0)
            }
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([PinpointClientTypes.ImportJobResponse?].self, forKey: .item)
        var itemDecoded0:[PinpointClientTypes.ImportJobResponse]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [PinpointClientTypes.ImportJobResponse]()
            for structure0 in itemContainer {
                if let structure0 = structure0 {
                    itemDecoded0?.append(structure0)
                }
            }
        }
        item = itemDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the status and settings of all the import jobs that are associated with an application or segment. An import job is a job that imports endpoint definitions from one or more files.
    public struct ImportJobsResponse: Swift.Equatable {
        /// An array of responses, one for each import job that's associated with the application (Import Jobs resource) or segment (Segment Import Jobs resource).
        /// This member is required.
        public var item: [PinpointClientTypes.ImportJobResponse]?
        /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
        public var nextToken: Swift.String?

        public init (
            item: [PinpointClientTypes.ImportJobResponse]? = nil,
            nextToken: Swift.String? = nil
        )
        {
            self.item = item
            self.nextToken = nextToken
        }
    }

}

extension PinpointClientTypes.InAppCampaignSchedule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endDate = "EndDate"
        case eventFilter = "EventFilter"
        case quietTime = "QuietTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endDate = self.endDate {
            try encodeContainer.encode(endDate, forKey: .endDate)
        }
        if let eventFilter = self.eventFilter {
            try encodeContainer.encode(eventFilter, forKey: .eventFilter)
        }
        if let quietTime = self.quietTime {
            try encodeContainer.encode(quietTime, forKey: .quietTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endDate)
        endDate = endDateDecoded
        let eventFilterDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignEventFilter.self, forKey: .eventFilter)
        eventFilter = eventFilterDecoded
        let quietTimeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.QuietTime.self, forKey: .quietTime)
        quietTime = quietTimeDecoded
    }
}

extension PinpointClientTypes {
    /// Schedule of the campaign.
    public struct InAppCampaignSchedule: Swift.Equatable {
        /// The scheduled time after which the in-app message should not be shown. Timestamp is in ISO 8601 format.
        public var endDate: Swift.String?
        /// The event filter the SDK has to use to show the in-app message in the application.
        public var eventFilter: PinpointClientTypes.CampaignEventFilter?
        /// Time during which the in-app message should not be shown to the user.
        public var quietTime: PinpointClientTypes.QuietTime?

        public init (
            endDate: Swift.String? = nil,
            eventFilter: PinpointClientTypes.CampaignEventFilter? = nil,
            quietTime: PinpointClientTypes.QuietTime? = nil
        )
        {
            self.endDate = endDate
            self.eventFilter = eventFilter
            self.quietTime = quietTime
        }
    }

}

extension PinpointClientTypes.InAppMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case customConfig = "CustomConfig"
        case layout = "Layout"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = content {
            var contentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .content)
            for inappmessagecontent0 in content {
                try contentContainer.encode(inappmessagecontent0)
            }
        }
        if let customConfig = customConfig {
            var customConfigContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customConfig)
            for (dictKey0, mapOf__string0) in customConfig {
                try customConfigContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let layout = self.layout {
            try encodeContainer.encode(layout.rawValue, forKey: .layout)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentContainer = try containerValues.decodeIfPresent([PinpointClientTypes.InAppMessageContent?].self, forKey: .content)
        var contentDecoded0:[PinpointClientTypes.InAppMessageContent]? = nil
        if let contentContainer = contentContainer {
            contentDecoded0 = [PinpointClientTypes.InAppMessageContent]()
            for structure0 in contentContainer {
                if let structure0 = structure0 {
                    contentDecoded0?.append(structure0)
                }
            }
        }
        content = contentDecoded0
        let customConfigContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .customConfig)
        var customConfigDecoded0: [Swift.String:Swift.String]? = nil
        if let customConfigContainer = customConfigContainer {
            customConfigDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in customConfigContainer {
                if let __string0 = __string0 {
                    customConfigDecoded0?[key0] = __string0
                }
            }
        }
        customConfig = customConfigDecoded0
        let layoutDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Layout.self, forKey: .layout)
        layout = layoutDecoded
    }
}

extension PinpointClientTypes {
    /// Provides all fields required for building an in-app message.
    public struct InAppMessage: Swift.Equatable {
        /// In-app message content.
        public var content: [PinpointClientTypes.InAppMessageContent]?
        /// Custom config to be sent to SDK.
        public var customConfig: [Swift.String:Swift.String]?
        /// The layout of the message.
        public var layout: PinpointClientTypes.Layout?

        public init (
            content: [PinpointClientTypes.InAppMessageContent]? = nil,
            customConfig: [Swift.String:Swift.String]? = nil,
            layout: PinpointClientTypes.Layout? = nil
        )
        {
            self.content = content
            self.customConfig = customConfig
            self.layout = layout
        }
    }

}

extension PinpointClientTypes.InAppMessageBodyConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alignment = "Alignment"
        case body = "Body"
        case textColor = "TextColor"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alignment = self.alignment {
            try encodeContainer.encode(alignment.rawValue, forKey: .alignment)
        }
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let textColor = self.textColor {
            try encodeContainer.encode(textColor, forKey: .textColor)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alignmentDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Alignment.self, forKey: .alignment)
        alignment = alignmentDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let textColorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .textColor)
        textColor = textColorDecoded
    }
}

extension PinpointClientTypes {
    /// Text config for Message Body.
    public struct InAppMessageBodyConfig: Swift.Equatable {
        /// The alignment of the text. Valid values: LEFT, CENTER, RIGHT.
        /// This member is required.
        public var alignment: PinpointClientTypes.Alignment?
        /// Message Body.
        /// This member is required.
        public var body: Swift.String?
        /// The text color.
        /// This member is required.
        public var textColor: Swift.String?

        public init (
            alignment: PinpointClientTypes.Alignment? = nil,
            body: Swift.String? = nil,
            textColor: Swift.String? = nil
        )
        {
            self.alignment = alignment
            self.body = body
            self.textColor = textColor
        }
    }

}

extension PinpointClientTypes.InAppMessageButton: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case android = "Android"
        case defaultConfig = "DefaultConfig"
        case ios = "IOS"
        case web = "Web"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let android = self.android {
            try encodeContainer.encode(android, forKey: .android)
        }
        if let defaultConfig = self.defaultConfig {
            try encodeContainer.encode(defaultConfig, forKey: .defaultConfig)
        }
        if let ios = self.ios {
            try encodeContainer.encode(ios, forKey: .ios)
        }
        if let web = self.web {
            try encodeContainer.encode(web, forKey: .web)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let androidDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.OverrideButtonConfiguration.self, forKey: .android)
        android = androidDecoded
        let defaultConfigDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.DefaultButtonConfiguration.self, forKey: .defaultConfig)
        defaultConfig = defaultConfigDecoded
        let iosDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.OverrideButtonConfiguration.self, forKey: .ios)
        ios = iosDecoded
        let webDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.OverrideButtonConfiguration.self, forKey: .web)
        web = webDecoded
    }
}

extension PinpointClientTypes {
    /// Button Config for an in-app message.
    public struct InAppMessageButton: Swift.Equatable {
        /// Default button content.
        public var android: PinpointClientTypes.OverrideButtonConfiguration?
        /// Default button content.
        public var defaultConfig: PinpointClientTypes.DefaultButtonConfiguration?
        /// Default button content.
        public var ios: PinpointClientTypes.OverrideButtonConfiguration?
        /// Default button content.
        public var web: PinpointClientTypes.OverrideButtonConfiguration?

        public init (
            android: PinpointClientTypes.OverrideButtonConfiguration? = nil,
            defaultConfig: PinpointClientTypes.DefaultButtonConfiguration? = nil,
            ios: PinpointClientTypes.OverrideButtonConfiguration? = nil,
            web: PinpointClientTypes.OverrideButtonConfiguration? = nil
        )
        {
            self.android = android
            self.defaultConfig = defaultConfig
            self.ios = ios
            self.web = web
        }
    }

}

extension PinpointClientTypes.InAppMessageCampaign: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case campaignId = "CampaignId"
        case dailyCap = "DailyCap"
        case inAppMessage = "InAppMessage"
        case priority = "Priority"
        case schedule = "Schedule"
        case sessionCap = "SessionCap"
        case totalCap = "TotalCap"
        case treatmentId = "TreatmentId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let campaignId = self.campaignId {
            try encodeContainer.encode(campaignId, forKey: .campaignId)
        }
        if let dailyCap = self.dailyCap {
            try encodeContainer.encode(dailyCap, forKey: .dailyCap)
        }
        if let inAppMessage = self.inAppMessage {
            try encodeContainer.encode(inAppMessage, forKey: .inAppMessage)
        }
        if let priority = self.priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let schedule = self.schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let sessionCap = self.sessionCap {
            try encodeContainer.encode(sessionCap, forKey: .sessionCap)
        }
        if let totalCap = self.totalCap {
            try encodeContainer.encode(totalCap, forKey: .totalCap)
        }
        if let treatmentId = self.treatmentId {
            try encodeContainer.encode(treatmentId, forKey: .treatmentId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let campaignIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .campaignId)
        campaignId = campaignIdDecoded
        let dailyCapDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dailyCap)
        dailyCap = dailyCapDecoded
        let inAppMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.InAppMessage.self, forKey: .inAppMessage)
        inAppMessage = inAppMessageDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.InAppCampaignSchedule.self, forKey: .schedule)
        schedule = scheduleDecoded
        let sessionCapDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sessionCap)
        sessionCap = sessionCapDecoded
        let totalCapDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalCap)
        totalCap = totalCapDecoded
        let treatmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .treatmentId)
        treatmentId = treatmentIdDecoded
    }
}

extension PinpointClientTypes {
    /// Targeted in-app message campaign.
    public struct InAppMessageCampaign: Swift.Equatable {
        /// Campaign id of the corresponding campaign.
        public var campaignId: Swift.String?
        /// Daily cap which controls the number of times any in-app messages can be shown to the endpoint during a day.
        public var dailyCap: Swift.Int?
        /// In-app message content with all fields required for rendering an in-app message.
        public var inAppMessage: PinpointClientTypes.InAppMessage?
        /// Priority of the in-app message.
        public var priority: Swift.Int?
        /// Schedule of the campaign.
        public var schedule: PinpointClientTypes.InAppCampaignSchedule?
        /// Session cap which controls the number of times an in-app message can be shown to the endpoint during an application session.
        public var sessionCap: Swift.Int?
        /// Total cap which controls the number of times an in-app message can be shown to the endpoint.
        public var totalCap: Swift.Int?
        /// Treatment id of the campaign.
        public var treatmentId: Swift.String?

        public init (
            campaignId: Swift.String? = nil,
            dailyCap: Swift.Int? = nil,
            inAppMessage: PinpointClientTypes.InAppMessage? = nil,
            priority: Swift.Int? = nil,
            schedule: PinpointClientTypes.InAppCampaignSchedule? = nil,
            sessionCap: Swift.Int? = nil,
            totalCap: Swift.Int? = nil,
            treatmentId: Swift.String? = nil
        )
        {
            self.campaignId = campaignId
            self.dailyCap = dailyCap
            self.inAppMessage = inAppMessage
            self.priority = priority
            self.schedule = schedule
            self.sessionCap = sessionCap
            self.totalCap = totalCap
            self.treatmentId = treatmentId
        }
    }

}

extension PinpointClientTypes.InAppMessageContent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backgroundColor = "BackgroundColor"
        case bodyConfig = "BodyConfig"
        case headerConfig = "HeaderConfig"
        case imageUrl = "ImageUrl"
        case primaryBtn = "PrimaryBtn"
        case secondaryBtn = "SecondaryBtn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backgroundColor = self.backgroundColor {
            try encodeContainer.encode(backgroundColor, forKey: .backgroundColor)
        }
        if let bodyConfig = self.bodyConfig {
            try encodeContainer.encode(bodyConfig, forKey: .bodyConfig)
        }
        if let headerConfig = self.headerConfig {
            try encodeContainer.encode(headerConfig, forKey: .headerConfig)
        }
        if let imageUrl = self.imageUrl {
            try encodeContainer.encode(imageUrl, forKey: .imageUrl)
        }
        if let primaryBtn = self.primaryBtn {
            try encodeContainer.encode(primaryBtn, forKey: .primaryBtn)
        }
        if let secondaryBtn = self.secondaryBtn {
            try encodeContainer.encode(secondaryBtn, forKey: .secondaryBtn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backgroundColorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backgroundColor)
        backgroundColor = backgroundColorDecoded
        let bodyConfigDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.InAppMessageBodyConfig.self, forKey: .bodyConfig)
        bodyConfig = bodyConfigDecoded
        let headerConfigDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.InAppMessageHeaderConfig.self, forKey: .headerConfig)
        headerConfig = headerConfigDecoded
        let imageUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageUrl)
        imageUrl = imageUrlDecoded
        let primaryBtnDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.InAppMessageButton.self, forKey: .primaryBtn)
        primaryBtn = primaryBtnDecoded
        let secondaryBtnDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.InAppMessageButton.self, forKey: .secondaryBtn)
        secondaryBtn = secondaryBtnDecoded
    }
}

extension PinpointClientTypes {
    /// The configuration for the message content.
    public struct InAppMessageContent: Swift.Equatable {
        /// The background color for the message.
        public var backgroundColor: Swift.String?
        /// The configuration for the message body.
        public var bodyConfig: PinpointClientTypes.InAppMessageBodyConfig?
        /// The configuration for the message header.
        public var headerConfig: PinpointClientTypes.InAppMessageHeaderConfig?
        /// The image url for the background of message.
        public var imageUrl: Swift.String?
        /// The first button inside the message.
        public var primaryBtn: PinpointClientTypes.InAppMessageButton?
        /// The second button inside message.
        public var secondaryBtn: PinpointClientTypes.InAppMessageButton?

        public init (
            backgroundColor: Swift.String? = nil,
            bodyConfig: PinpointClientTypes.InAppMessageBodyConfig? = nil,
            headerConfig: PinpointClientTypes.InAppMessageHeaderConfig? = nil,
            imageUrl: Swift.String? = nil,
            primaryBtn: PinpointClientTypes.InAppMessageButton? = nil,
            secondaryBtn: PinpointClientTypes.InAppMessageButton? = nil
        )
        {
            self.backgroundColor = backgroundColor
            self.bodyConfig = bodyConfig
            self.headerConfig = headerConfig
            self.imageUrl = imageUrl
            self.primaryBtn = primaryBtn
            self.secondaryBtn = secondaryBtn
        }
    }

}

extension PinpointClientTypes.InAppMessageHeaderConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alignment = "Alignment"
        case header = "Header"
        case textColor = "TextColor"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alignment = self.alignment {
            try encodeContainer.encode(alignment.rawValue, forKey: .alignment)
        }
        if let header = self.header {
            try encodeContainer.encode(header, forKey: .header)
        }
        if let textColor = self.textColor {
            try encodeContainer.encode(textColor, forKey: .textColor)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alignmentDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Alignment.self, forKey: .alignment)
        alignment = alignmentDecoded
        let headerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .header)
        header = headerDecoded
        let textColorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .textColor)
        textColor = textColorDecoded
    }
}

extension PinpointClientTypes {
    /// Text config for Message Header.
    public struct InAppMessageHeaderConfig: Swift.Equatable {
        /// The alignment of the text. Valid values: LEFT, CENTER, RIGHT.
        /// This member is required.
        public var alignment: PinpointClientTypes.Alignment?
        /// Message Header.
        /// This member is required.
        public var header: Swift.String?
        /// The text color.
        /// This member is required.
        public var textColor: Swift.String?

        public init (
            alignment: PinpointClientTypes.Alignment? = nil,
            header: Swift.String? = nil,
            textColor: Swift.String? = nil
        )
        {
            self.alignment = alignment
            self.header = header
            self.textColor = textColor
        }
    }

}

extension PinpointClientTypes.InAppMessagesResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inAppMessageCampaigns = "InAppMessageCampaigns"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inAppMessageCampaigns = inAppMessageCampaigns {
            var inAppMessageCampaignsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inAppMessageCampaigns)
            for inappmessagecampaign0 in inAppMessageCampaigns {
                try inAppMessageCampaignsContainer.encode(inappmessagecampaign0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inAppMessageCampaignsContainer = try containerValues.decodeIfPresent([PinpointClientTypes.InAppMessageCampaign?].self, forKey: .inAppMessageCampaigns)
        var inAppMessageCampaignsDecoded0:[PinpointClientTypes.InAppMessageCampaign]? = nil
        if let inAppMessageCampaignsContainer = inAppMessageCampaignsContainer {
            inAppMessageCampaignsDecoded0 = [PinpointClientTypes.InAppMessageCampaign]()
            for structure0 in inAppMessageCampaignsContainer {
                if let structure0 = structure0 {
                    inAppMessageCampaignsDecoded0?.append(structure0)
                }
            }
        }
        inAppMessageCampaigns = inAppMessageCampaignsDecoded0
    }
}

extension PinpointClientTypes {
    /// Get in-app messages response object.
    public struct InAppMessagesResponse: Swift.Equatable {
        /// List of targeted in-app message campaigns.
        public var inAppMessageCampaigns: [PinpointClientTypes.InAppMessageCampaign]?

        public init (
            inAppMessageCampaigns: [PinpointClientTypes.InAppMessageCampaign]? = nil
        )
        {
            self.inAppMessageCampaigns = inAppMessageCampaigns
        }
    }

}

extension PinpointClientTypes.InAppTemplateRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case customConfig = "CustomConfig"
        case layout = "Layout"
        case templateDescription = "TemplateDescription"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = content {
            var contentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .content)
            for inappmessagecontent0 in content {
                try contentContainer.encode(inappmessagecontent0)
            }
        }
        if let customConfig = customConfig {
            var customConfigContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customConfig)
            for (dictKey0, mapOf__string0) in customConfig {
                try customConfigContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let layout = self.layout {
            try encodeContainer.encode(layout.rawValue, forKey: .layout)
        }
        if let templateDescription = self.templateDescription {
            try encodeContainer.encode(templateDescription, forKey: .templateDescription)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapOf__string0) in tags {
                try tagsContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentContainer = try containerValues.decodeIfPresent([PinpointClientTypes.InAppMessageContent?].self, forKey: .content)
        var contentDecoded0:[PinpointClientTypes.InAppMessageContent]? = nil
        if let contentContainer = contentContainer {
            contentDecoded0 = [PinpointClientTypes.InAppMessageContent]()
            for structure0 in contentContainer {
                if let structure0 = structure0 {
                    contentDecoded0?.append(structure0)
                }
            }
        }
        content = contentDecoded0
        let customConfigContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .customConfig)
        var customConfigDecoded0: [Swift.String:Swift.String]? = nil
        if let customConfigContainer = customConfigContainer {
            customConfigDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in customConfigContainer {
                if let __string0 = __string0 {
                    customConfigDecoded0?[key0] = __string0
                }
            }
        }
        customConfig = customConfigDecoded0
        let layoutDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Layout.self, forKey: .layout)
        layout = layoutDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let templateDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateDescription)
        templateDescription = templateDescriptionDecoded
    }
}

extension PinpointClientTypes {
    /// InApp Template Request.
    public struct InAppTemplateRequest: Swift.Equatable {
        /// The content of the message, can include up to 5 modals. Each modal must contain a message, a header, and background color. ImageUrl and buttons are optional.
        public var content: [PinpointClientTypes.InAppMessageContent]?
        /// Custom config to be sent to client.
        public var customConfig: [Swift.String:Swift.String]?
        /// The layout of the message.
        public var layout: PinpointClientTypes.Layout?
        /// A string-to-string map of key-value pairs that defines the tags to associate with the message template. Each tag consists of a required tag key and an associated tag value.
        public var tags: [Swift.String:Swift.String]?
        /// The description of the template.
        public var templateDescription: Swift.String?

        public init (
            content: [PinpointClientTypes.InAppMessageContent]? = nil,
            customConfig: [Swift.String:Swift.String]? = nil,
            layout: PinpointClientTypes.Layout? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            templateDescription: Swift.String? = nil
        )
        {
            self.content = content
            self.customConfig = customConfig
            self.layout = layout
            self.tags = tags
            self.templateDescription = templateDescription
        }
    }

}

extension PinpointClientTypes.InAppTemplateResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case content = "Content"
        case creationDate = "CreationDate"
        case customConfig = "CustomConfig"
        case lastModifiedDate = "LastModifiedDate"
        case layout = "Layout"
        case templateDescription = "TemplateDescription"
        case templateName = "TemplateName"
        case templateType = "TemplateType"
        case version = "Version"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let content = content {
            var contentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .content)
            for inappmessagecontent0 in content {
                try contentContainer.encode(inappmessagecontent0)
            }
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let customConfig = customConfig {
            var customConfigContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customConfig)
            for (dictKey0, mapOf__string0) in customConfig {
                try customConfigContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let layout = self.layout {
            try encodeContainer.encode(layout.rawValue, forKey: .layout)
        }
        if let templateDescription = self.templateDescription {
            try encodeContainer.encode(templateDescription, forKey: .templateDescription)
        }
        if let templateName = self.templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
        if let templateType = self.templateType {
            try encodeContainer.encode(templateType.rawValue, forKey: .templateType)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapOf__string0) in tags {
                try tagsContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let contentContainer = try containerValues.decodeIfPresent([PinpointClientTypes.InAppMessageContent?].self, forKey: .content)
        var contentDecoded0:[PinpointClientTypes.InAppMessageContent]? = nil
        if let contentContainer = contentContainer {
            contentDecoded0 = [PinpointClientTypes.InAppMessageContent]()
            for structure0 in contentContainer {
                if let structure0 = structure0 {
                    contentDecoded0?.append(structure0)
                }
            }
        }
        content = contentDecoded0
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let customConfigContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .customConfig)
        var customConfigDecoded0: [Swift.String:Swift.String]? = nil
        if let customConfigContainer = customConfigContainer {
            customConfigDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in customConfigContainer {
                if let __string0 = __string0 {
                    customConfigDecoded0?[key0] = __string0
                }
            }
        }
        customConfig = customConfigDecoded0
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let layoutDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Layout.self, forKey: .layout)
        layout = layoutDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let templateDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateDescription)
        templateDescription = templateDescriptionDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let templateTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.TemplateType.self, forKey: .templateType)
        templateType = templateTypeDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension PinpointClientTypes {
    /// In-App Template Response.
    public struct InAppTemplateResponse: Swift.Equatable {
        /// The resource arn of the template.
        public var arn: Swift.String?
        /// The content of the message, can include up to 5 modals. Each modal must contain a message, a header, and background color. ImageUrl and buttons are optional.
        public var content: [PinpointClientTypes.InAppMessageContent]?
        /// The creation date of the template.
        /// This member is required.
        public var creationDate: Swift.String?
        /// Custom config to be sent to client.
        public var customConfig: [Swift.String:Swift.String]?
        /// The last modified date of the template.
        /// This member is required.
        public var lastModifiedDate: Swift.String?
        /// The layout of the message.
        public var layout: PinpointClientTypes.Layout?
        /// A string-to-string map of key-value pairs that defines the tags to associate with the message template. Each tag consists of a required tag key and an associated tag value.
        public var tags: [Swift.String:Swift.String]?
        /// The description of the template.
        public var templateDescription: Swift.String?
        /// The name of the template.
        /// This member is required.
        public var templateName: Swift.String?
        /// The type of the template.
        /// This member is required.
        public var templateType: PinpointClientTypes.TemplateType?
        /// The version id of the template.
        public var version: Swift.String?

        public init (
            arn: Swift.String? = nil,
            content: [PinpointClientTypes.InAppMessageContent]? = nil,
            creationDate: Swift.String? = nil,
            customConfig: [Swift.String:Swift.String]? = nil,
            lastModifiedDate: Swift.String? = nil,
            layout: PinpointClientTypes.Layout? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            templateDescription: Swift.String? = nil,
            templateName: Swift.String? = nil,
            templateType: PinpointClientTypes.TemplateType? = nil,
            version: Swift.String? = nil
        )
        {
            self.arn = arn
            self.content = content
            self.creationDate = creationDate
            self.customConfig = customConfig
            self.lastModifiedDate = lastModifiedDate
            self.layout = layout
            self.tags = tags
            self.templateDescription = templateDescription
            self.templateName = templateName
            self.templateType = templateType
            self.version = version
        }
    }

}

extension PinpointClientTypes {
    public enum Include: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case any
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [Include] {
            return [
                .all,
                .any,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .any: return "ANY"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Include(rawValue: rawValue) ?? Include.sdkUnknown(rawValue)
        }
    }
}

extension InternalServerErrorException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalServerErrorExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestID = output.requestID
        } else {
            self.message = nil
            self.requestID = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Provides information about an API request or response.
public struct InternalServerErrorException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// The message that's returned from the API.
    public var message: Swift.String?
    /// The unique identifier for the request or response.
    public var requestID: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestID: Swift.String? = nil
    )
    {
        self.message = message
        self.requestID = requestID
    }
}

struct InternalServerErrorExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let requestID: Swift.String?
}

extension InternalServerErrorExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestID = "RequestID"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestID)
        requestID = requestIDDecoded
    }
}

extension PinpointClientTypes.ItemResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointItemResponse = "EndpointItemResponse"
        case eventsItemResponse = "EventsItemResponse"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointItemResponse = self.endpointItemResponse {
            try encodeContainer.encode(endpointItemResponse, forKey: .endpointItemResponse)
        }
        if let eventsItemResponse = eventsItemResponse {
            var eventsItemResponseContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .eventsItemResponse)
            for (dictKey0, mapOfEventItemResponse0) in eventsItemResponse {
                try eventsItemResponseContainer.encode(mapOfEventItemResponse0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointItemResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EndpointItemResponse.self, forKey: .endpointItemResponse)
        endpointItemResponse = endpointItemResponseDecoded
        let eventsItemResponseContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.EventItemResponse?].self, forKey: .eventsItemResponse)
        var eventsItemResponseDecoded0: [Swift.String:PinpointClientTypes.EventItemResponse]? = nil
        if let eventsItemResponseContainer = eventsItemResponseContainer {
            eventsItemResponseDecoded0 = [Swift.String:PinpointClientTypes.EventItemResponse]()
            for (key0, eventitemresponse0) in eventsItemResponseContainer {
                if let eventitemresponse0 = eventitemresponse0 {
                    eventsItemResponseDecoded0?[key0] = eventitemresponse0
                }
            }
        }
        eventsItemResponse = eventsItemResponseDecoded0
    }
}

extension PinpointClientTypes {
    /// Provides information about the results of a request to create or update an endpoint that's associated with an event.
    public struct ItemResponse: Swift.Equatable {
        /// The response that was received after the endpoint data was accepted.
        public var endpointItemResponse: PinpointClientTypes.EndpointItemResponse?
        /// A multipart response object that contains a key and a value for each event in the request. In each object, the event ID is the key and an EventItemResponse object is the value.
        public var eventsItemResponse: [Swift.String:PinpointClientTypes.EventItemResponse]?

        public init (
            endpointItemResponse: PinpointClientTypes.EndpointItemResponse? = nil,
            eventsItemResponse: [Swift.String:PinpointClientTypes.EventItemResponse]? = nil
        )
        {
            self.endpointItemResponse = endpointItemResponse
            self.eventsItemResponse = eventsItemResponse
        }
    }

}

extension PinpointClientTypes {
    public enum JobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case completing
        case created
        case failed
        case failing
        case initializing
        case pendingJob
        case preparingForInitialization
        case processing
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStatus] {
            return [
                .completed,
                .completing,
                .created,
                .failed,
                .failing,
                .initializing,
                .pendingJob,
                .preparingForInitialization,
                .processing,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .completing: return "COMPLETING"
            case .created: return "CREATED"
            case .failed: return "FAILED"
            case .failing: return "FAILING"
            case .initializing: return "INITIALIZING"
            case .pendingJob: return "PENDING_JOB"
            case .preparingForInitialization: return "PREPARING_FOR_INITIALIZATION"
            case .processing: return "PROCESSING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobStatus(rawValue: rawValue) ?? JobStatus.sdkUnknown(rawValue)
        }
    }
}

extension PinpointClientTypes.JourneyChannelSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectCampaignArn = "ConnectCampaignArn"
        case connectCampaignExecutionRoleArn = "ConnectCampaignExecutionRoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectCampaignArn = self.connectCampaignArn {
            try encodeContainer.encode(connectCampaignArn, forKey: .connectCampaignArn)
        }
        if let connectCampaignExecutionRoleArn = self.connectCampaignExecutionRoleArn {
            try encodeContainer.encode(connectCampaignExecutionRoleArn, forKey: .connectCampaignExecutionRoleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectCampaignArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectCampaignArn)
        connectCampaignArn = connectCampaignArnDecoded
        let connectCampaignExecutionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectCampaignExecutionRoleArn)
        connectCampaignExecutionRoleArn = connectCampaignExecutionRoleArnDecoded
    }
}

extension PinpointClientTypes {
    /// The channel-specific configurations for the journey.
    public struct JourneyChannelSettings: Swift.Equatable {
        /// Amazon Resource Name (ARN) of the Connect Campaign.
        public var connectCampaignArn: Swift.String?
        /// IAM role ARN to be assumed when invoking Connect campaign execution APIs for dialing.
        public var connectCampaignExecutionRoleArn: Swift.String?

        public init (
            connectCampaignArn: Swift.String? = nil,
            connectCampaignExecutionRoleArn: Swift.String? = nil
        )
        {
            self.connectCampaignArn = connectCampaignArn
            self.connectCampaignExecutionRoleArn = connectCampaignExecutionRoleArn
        }
    }

}

extension PinpointClientTypes.JourneyCustomMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case data = "Data"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let data = self.data {
            try encodeContainer.encode(data, forKey: .data)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .data)
        data = dataDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the message content for a custom channel message that's sent to participants in a journey.
    public struct JourneyCustomMessage: Swift.Equatable {
        /// The message content that's passed to an AWS Lambda function or to a web hook.
        public var data: Swift.String?

        public init (
            data: Swift.String? = nil
        )
        {
            self.data = data
        }
    }

}

extension PinpointClientTypes.JourneyDateRangeKpiResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case endTime = "EndTime"
        case journeyId = "JourneyId"
        case kpiName = "KpiName"
        case kpiResult = "KpiResult"
        case nextToken = "NextToken"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .dateTime, forKey: .endTime)
        }
        if let journeyId = self.journeyId {
            try encodeContainer.encode(journeyId, forKey: .journeyId)
        }
        if let kpiName = self.kpiName {
            try encodeContainer.encode(kpiName, forKey: .kpiName)
        }
        if let kpiResult = self.kpiResult {
            try encodeContainer.encode(kpiResult, forKey: .kpiResult)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .dateTime, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
        let journeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .journeyId)
        journeyId = journeyIdDecoded
        let kpiNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kpiName)
        kpiName = kpiNameDecoded
        let kpiResultDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.BaseKpiResult.self, forKey: .kpiResult)
        kpiResult = kpiResultDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
    }
}

extension PinpointClientTypes {
    /// Provides the results of a query that retrieved the data for a standard engagement metric that applies to a journey, and provides information about that query.
    public struct JourneyDateRangeKpiResponse: Swift.Equatable {
        /// The unique identifier for the application that the metric applies to.
        /// This member is required.
        public var applicationId: Swift.String?
        /// The last date and time of the date range that was used to filter the query results, in extended ISO 8601 format. The date range is inclusive.
        /// This member is required.
        public var endTime: ClientRuntime.Date?
        /// The unique identifier for the journey that the metric applies to.
        /// This member is required.
        public var journeyId: Swift.String?
        /// The name of the metric, also referred to as a key performance indicator (KPI), that the data was retrieved for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. For a list of possible values, see the [Amazon Pinpoint Developer Guide](https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html).
        /// This member is required.
        public var kpiName: Swift.String?
        /// An array of objects that contains the results of the query. Each object contains the value for the metric and metadata about that value.
        /// This member is required.
        public var kpiResult: PinpointClientTypes.BaseKpiResult?
        /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null for the Journey Engagement Metrics resource because the resource returns all results in a single page.
        public var nextToken: Swift.String?
        /// The first date and time of the date range that was used to filter the query results, in extended ISO 8601 format. The date range is inclusive.
        /// This member is required.
        public var startTime: ClientRuntime.Date?

        public init (
            applicationId: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            journeyId: Swift.String? = nil,
            kpiName: Swift.String? = nil,
            kpiResult: PinpointClientTypes.BaseKpiResult? = nil,
            nextToken: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.applicationId = applicationId
            self.endTime = endTime
            self.journeyId = journeyId
            self.kpiName = kpiName
            self.kpiResult = kpiResult
            self.nextToken = nextToken
            self.startTime = startTime
        }
    }

}

extension PinpointClientTypes.JourneyEmailMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fromAddress = "FromAddress"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fromAddress = self.fromAddress {
            try encodeContainer.encode(fromAddress, forKey: .fromAddress)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromAddress)
        fromAddress = fromAddressDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the "From" address for an email message that's sent to participants in a journey.
    public struct JourneyEmailMessage: Swift.Equatable {
        /// The verified email address to send the email message from. The default address is the FromAddress specified for the email channel for the application.
        public var fromAddress: Swift.String?

        public init (
            fromAddress: Swift.String? = nil
        )
        {
            self.fromAddress = fromAddress
        }
    }

}

extension PinpointClientTypes.JourneyExecutionActivityMetricsResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityType = "ActivityType"
        case applicationId = "ApplicationId"
        case journeyActivityId = "JourneyActivityId"
        case journeyId = "JourneyId"
        case lastEvaluatedTime = "LastEvaluatedTime"
        case metrics = "Metrics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityType = self.activityType {
            try encodeContainer.encode(activityType, forKey: .activityType)
        }
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let journeyActivityId = self.journeyActivityId {
            try encodeContainer.encode(journeyActivityId, forKey: .journeyActivityId)
        }
        if let journeyId = self.journeyId {
            try encodeContainer.encode(journeyId, forKey: .journeyId)
        }
        if let lastEvaluatedTime = self.lastEvaluatedTime {
            try encodeContainer.encode(lastEvaluatedTime, forKey: .lastEvaluatedTime)
        }
        if let metrics = metrics {
            var metricsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .metrics)
            for (dictKey0, mapOf__string0) in metrics {
                try metricsContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activityType)
        activityType = activityTypeDecoded
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let journeyActivityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .journeyActivityId)
        journeyActivityId = journeyActivityIdDecoded
        let journeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .journeyId)
        journeyId = journeyIdDecoded
        let lastEvaluatedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastEvaluatedTime)
        lastEvaluatedTime = lastEvaluatedTimeDecoded
        let metricsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .metrics)
        var metricsDecoded0: [Swift.String:Swift.String]? = nil
        if let metricsContainer = metricsContainer {
            metricsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in metricsContainer {
                if let __string0 = __string0 {
                    metricsDecoded0?[key0] = __string0
                }
            }
        }
        metrics = metricsDecoded0
    }
}

extension PinpointClientTypes {
    /// Provides the results of a query that retrieved the data for a standard execution metric that applies to a journey activity, and provides information about that query.
    public struct JourneyExecutionActivityMetricsResponse: Swift.Equatable {
        /// The type of activity that the metric applies to. Possible values are:
        ///
        /// * CONDITIONAL_SPLIT - For a yes/no split activity, which is an activity that sends participants down one of two paths in a journey.
        ///
        /// * HOLDOUT - For a holdout activity, which is an activity that stops a journey for a specified percentage of participants.
        ///
        /// * MESSAGE - For an email activity, which is an activity that sends an email message to participants.
        ///
        /// * MULTI_CONDITIONAL_SPLIT - For a multivariate split activity, which is an activity that sends participants down one of as many as five paths in a journey.
        ///
        /// * RANDOM_SPLIT - For a random split activity, which is an activity that sends specified percentages of participants down one of as many as five paths in a journey.
        ///
        /// * WAIT - For a wait activity, which is an activity that waits for a certain amount of time or until a specific date and time before moving participants to the next activity in a journey.
        /// This member is required.
        public var activityType: Swift.String?
        /// The unique identifier for the application that the metric applies to.
        /// This member is required.
        public var applicationId: Swift.String?
        /// The unique identifier for the activity that the metric applies to.
        /// This member is required.
        public var journeyActivityId: Swift.String?
        /// The unique identifier for the journey that the metric applies to.
        /// This member is required.
        public var journeyId: Swift.String?
        /// The date and time, in ISO 8601 format, when Amazon Pinpoint last evaluated the execution status of the activity and updated the data for the metric.
        /// This member is required.
        public var lastEvaluatedTime: Swift.String?
        /// A JSON object that contains the results of the query. The results vary depending on the type of activity (ActivityType). For information about the structure and contents of the results, see the [Amazon Pinpoint Developer Guide](https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html).
        /// This member is required.
        public var metrics: [Swift.String:Swift.String]?

        public init (
            activityType: Swift.String? = nil,
            applicationId: Swift.String? = nil,
            journeyActivityId: Swift.String? = nil,
            journeyId: Swift.String? = nil,
            lastEvaluatedTime: Swift.String? = nil,
            metrics: [Swift.String:Swift.String]? = nil
        )
        {
            self.activityType = activityType
            self.applicationId = applicationId
            self.journeyActivityId = journeyActivityId
            self.journeyId = journeyId
            self.lastEvaluatedTime = lastEvaluatedTime
            self.metrics = metrics
        }
    }

}

extension PinpointClientTypes.JourneyExecutionMetricsResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case journeyId = "JourneyId"
        case lastEvaluatedTime = "LastEvaluatedTime"
        case metrics = "Metrics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let journeyId = self.journeyId {
            try encodeContainer.encode(journeyId, forKey: .journeyId)
        }
        if let lastEvaluatedTime = self.lastEvaluatedTime {
            try encodeContainer.encode(lastEvaluatedTime, forKey: .lastEvaluatedTime)
        }
        if let metrics = metrics {
            var metricsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .metrics)
            for (dictKey0, mapOf__string0) in metrics {
                try metricsContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let journeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .journeyId)
        journeyId = journeyIdDecoded
        let lastEvaluatedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastEvaluatedTime)
        lastEvaluatedTime = lastEvaluatedTimeDecoded
        let metricsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .metrics)
        var metricsDecoded0: [Swift.String:Swift.String]? = nil
        if let metricsContainer = metricsContainer {
            metricsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in metricsContainer {
                if let __string0 = __string0 {
                    metricsDecoded0?[key0] = __string0
                }
            }
        }
        metrics = metricsDecoded0
    }
}

extension PinpointClientTypes {
    /// Provides the results of a query that retrieved the data for a standard execution metric that applies to a journey, and provides information about that query.
    public struct JourneyExecutionMetricsResponse: Swift.Equatable {
        /// The unique identifier for the application that the metric applies to.
        /// This member is required.
        public var applicationId: Swift.String?
        /// The unique identifier for the journey that the metric applies to.
        /// This member is required.
        public var journeyId: Swift.String?
        /// The date and time, in ISO 8601 format, when Amazon Pinpoint last evaluated the journey and updated the data for the metric.
        /// This member is required.
        public var lastEvaluatedTime: Swift.String?
        /// A JSON object that contains the results of the query. For information about the structure and contents of the results, see the [Amazon Pinpoint Developer Guide](https://docs.aws.amazon.com//pinpoint/latest/developerguide/analytics-standard-metrics.html).
        /// This member is required.
        public var metrics: [Swift.String:Swift.String]?

        public init (
            applicationId: Swift.String? = nil,
            journeyId: Swift.String? = nil,
            lastEvaluatedTime: Swift.String? = nil,
            metrics: [Swift.String:Swift.String]? = nil
        )
        {
            self.applicationId = applicationId
            self.journeyId = journeyId
            self.lastEvaluatedTime = lastEvaluatedTime
            self.metrics = metrics
        }
    }

}

extension PinpointClientTypes.JourneyLimits: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dailyCap = "DailyCap"
        case endpointReentryCap = "EndpointReentryCap"
        case endpointReentryInterval = "EndpointReentryInterval"
        case messagesPerSecond = "MessagesPerSecond"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dailyCap = self.dailyCap {
            try encodeContainer.encode(dailyCap, forKey: .dailyCap)
        }
        if let endpointReentryCap = self.endpointReentryCap {
            try encodeContainer.encode(endpointReentryCap, forKey: .endpointReentryCap)
        }
        if let endpointReentryInterval = self.endpointReentryInterval {
            try encodeContainer.encode(endpointReentryInterval, forKey: .endpointReentryInterval)
        }
        if let messagesPerSecond = self.messagesPerSecond {
            try encodeContainer.encode(messagesPerSecond, forKey: .messagesPerSecond)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dailyCapDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dailyCap)
        dailyCap = dailyCapDecoded
        let endpointReentryCapDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endpointReentryCap)
        endpointReentryCap = endpointReentryCapDecoded
        let messagesPerSecondDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .messagesPerSecond)
        messagesPerSecond = messagesPerSecondDecoded
        let endpointReentryIntervalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointReentryInterval)
        endpointReentryInterval = endpointReentryIntervalDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies limits on the messages that a journey can send and the number of times participants can enter a journey.
    public struct JourneyLimits: Swift.Equatable {
        /// The maximum number of messages that the journey can send to a single participant during a 24-hour period. The maximum value is 100.
        public var dailyCap: Swift.Int?
        /// The maximum number of times that a participant can enter the journey. The maximum value is 100. To allow participants to enter the journey an unlimited number of times, set this value to 0.
        public var endpointReentryCap: Swift.Int?
        /// Minimum time that must pass before an endpoint can re-enter a given journey. The duration should use an ISO 8601 format, such as PT1H.
        public var endpointReentryInterval: Swift.String?
        /// The maximum number of messages that the journey can send each second.
        public var messagesPerSecond: Swift.Int?

        public init (
            dailyCap: Swift.Int? = nil,
            endpointReentryCap: Swift.Int? = nil,
            endpointReentryInterval: Swift.String? = nil,
            messagesPerSecond: Swift.Int? = nil
        )
        {
            self.dailyCap = dailyCap
            self.endpointReentryCap = endpointReentryCap
            self.endpointReentryInterval = endpointReentryInterval
            self.messagesPerSecond = messagesPerSecond
        }
    }

}

extension PinpointClientTypes.JourneyPushMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case timeToLive = "TimeToLive"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let timeToLive = self.timeToLive {
            try encodeContainer.encode(timeToLive, forKey: .timeToLive)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeToLiveDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timeToLive)
        timeToLive = timeToLiveDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the message configuration for a push notification that's sent to participants in a journey.
    public struct JourneyPushMessage: Swift.Equatable {
        /// The number of seconds that the push notification service should keep the message, if the service is unable to deliver the notification the first time. This value is converted to an expiration value when it's sent to a push-notification service. If this value is 0, the service treats the notification as if it expires immediately and the service doesn't store or try to deliver the notification again. This value doesn't apply to messages that are sent through the Amazon Device Messaging (ADM) service.
        public var timeToLive: Swift.String?

        public init (
            timeToLive: Swift.String? = nil
        )
        {
            self.timeToLive = timeToLive
        }
    }

}

extension PinpointClientTypes.JourneyResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activities = "Activities"
        case applicationId = "ApplicationId"
        case closedDays = "ClosedDays"
        case creationDate = "CreationDate"
        case id = "Id"
        case journeyChannelSettings = "JourneyChannelSettings"
        case lastModifiedDate = "LastModifiedDate"
        case limits = "Limits"
        case localTime = "LocalTime"
        case name = "Name"
        case openHours = "OpenHours"
        case quietTime = "QuietTime"
        case refreshFrequency = "RefreshFrequency"
        case refreshOnSegmentUpdate = "RefreshOnSegmentUpdate"
        case schedule = "Schedule"
        case sendingSchedule = "SendingSchedule"
        case startActivity = "StartActivity"
        case startCondition = "StartCondition"
        case state = "State"
        case waitForQuietTime = "WaitForQuietTime"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activities = activities {
            var activitiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .activities)
            for (dictKey0, mapOfActivity0) in activities {
                try activitiesContainer.encode(mapOfActivity0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let closedDays = self.closedDays {
            try encodeContainer.encode(closedDays, forKey: .closedDays)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let journeyChannelSettings = self.journeyChannelSettings {
            try encodeContainer.encode(journeyChannelSettings, forKey: .journeyChannelSettings)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let limits = self.limits {
            try encodeContainer.encode(limits, forKey: .limits)
        }
        if let localTime = self.localTime {
            try encodeContainer.encode(localTime, forKey: .localTime)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let openHours = self.openHours {
            try encodeContainer.encode(openHours, forKey: .openHours)
        }
        if let quietTime = self.quietTime {
            try encodeContainer.encode(quietTime, forKey: .quietTime)
        }
        if let refreshFrequency = self.refreshFrequency {
            try encodeContainer.encode(refreshFrequency, forKey: .refreshFrequency)
        }
        if let refreshOnSegmentUpdate = self.refreshOnSegmentUpdate {
            try encodeContainer.encode(refreshOnSegmentUpdate, forKey: .refreshOnSegmentUpdate)
        }
        if let schedule = self.schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let sendingSchedule = self.sendingSchedule {
            try encodeContainer.encode(sendingSchedule, forKey: .sendingSchedule)
        }
        if let startActivity = self.startActivity {
            try encodeContainer.encode(startActivity, forKey: .startActivity)
        }
        if let startCondition = self.startCondition {
            try encodeContainer.encode(startCondition, forKey: .startCondition)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let waitForQuietTime = self.waitForQuietTime {
            try encodeContainer.encode(waitForQuietTime, forKey: .waitForQuietTime)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapOf__string0) in tags {
                try tagsContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activitiesContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.Activity?].self, forKey: .activities)
        var activitiesDecoded0: [Swift.String:PinpointClientTypes.Activity]? = nil
        if let activitiesContainer = activitiesContainer {
            activitiesDecoded0 = [Swift.String:PinpointClientTypes.Activity]()
            for (key0, activity0) in activitiesContainer {
                if let activity0 = activity0 {
                    activitiesDecoded0?[key0] = activity0
                }
            }
        }
        activities = activitiesDecoded0
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let limitsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneyLimits.self, forKey: .limits)
        limits = limitsDecoded
        let localTimeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .localTime)
        localTime = localTimeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let quietTimeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.QuietTime.self, forKey: .quietTime)
        quietTime = quietTimeDecoded
        let refreshFrequencyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .refreshFrequency)
        refreshFrequency = refreshFrequencyDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneySchedule.self, forKey: .schedule)
        schedule = scheduleDecoded
        let startActivityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startActivity)
        startActivity = startActivityDecoded
        let startConditionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.StartCondition.self, forKey: .startCondition)
        startCondition = startConditionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.State.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let waitForQuietTimeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .waitForQuietTime)
        waitForQuietTime = waitForQuietTimeDecoded
        let refreshOnSegmentUpdateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .refreshOnSegmentUpdate)
        refreshOnSegmentUpdate = refreshOnSegmentUpdateDecoded
        let journeyChannelSettingsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneyChannelSettings.self, forKey: .journeyChannelSettings)
        journeyChannelSettings = journeyChannelSettingsDecoded
        let sendingScheduleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sendingSchedule)
        sendingSchedule = sendingScheduleDecoded
        let openHoursDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.OpenHours.self, forKey: .openHours)
        openHours = openHoursDecoded
        let closedDaysDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ClosedDays.self, forKey: .closedDays)
        closedDays = closedDaysDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the status, configuration, and other settings for a journey.
    public struct JourneyResponse: Swift.Equatable {
        /// A map that contains a set of Activity objects, one object for each activity in the journey. For each Activity object, the key is the unique identifier (string) for an activity and the value is the settings for the activity.
        public var activities: [Swift.String:PinpointClientTypes.Activity]?
        /// The unique identifier for the application that the journey applies to.
        /// This member is required.
        public var applicationId: Swift.String?
        /// The time when journey will stop sending messages. QuietTime should be configured first and SendingSchedule should be set to true.
        public var closedDays: PinpointClientTypes.ClosedDays?
        /// The date, in ISO 8601 format, when the journey was created.
        public var creationDate: Swift.String?
        /// The unique identifier for the journey.
        /// This member is required.
        public var id: Swift.String?
        /// The channel-specific configurations for the journey.
        public var journeyChannelSettings: PinpointClientTypes.JourneyChannelSettings?
        /// The date, in ISO 8601 format, when the journey was last modified.
        public var lastModifiedDate: Swift.String?
        /// The messaging and entry limits for the journey.
        public var limits: PinpointClientTypes.JourneyLimits?
        /// Specifies whether the journey's scheduled start and end times use each participant's local time. If this value is true, the schedule uses each participant's local time.
        public var localTime: Swift.Bool?
        /// The name of the journey.
        /// This member is required.
        public var name: Swift.String?
        /// The time when journey allow to send messages. QuietTime should be configured first and SendingSchedule should be set to true.
        public var openHours: PinpointClientTypes.OpenHours?
        /// The quiet time settings for the journey. Quiet time is a specific time range when a journey doesn't send messages to participants, if all the following conditions are met:
        ///
        /// * The EndpointDemographic.Timezone property of the endpoint for the participant is set to a valid value.
        ///
        /// * The current time in the participant's time zone is later than or equal to the time specified by the QuietTime.Start property for the journey.
        ///
        /// * The current time in the participant's time zone is earlier than or equal to the time specified by the QuietTime.End property for the journey.
        ///
        ///
        /// If any of the preceding conditions isn't met, the participant will receive messages from the journey, even if quiet time is enabled.
        public var quietTime: PinpointClientTypes.QuietTime?
        /// The frequency with which Amazon Pinpoint evaluates segment and event data for the journey, as a duration in ISO 8601 format.
        public var refreshFrequency: Swift.String?
        /// Specifies whether a journey should be refreshed on segment update.
        public var refreshOnSegmentUpdate: Swift.Bool?
        /// The schedule settings for the journey.
        public var schedule: PinpointClientTypes.JourneySchedule?
        /// Indicates if journey have Advance Quiet Time (OpenHours and ClosedDays). This flag should be set to true in order to allow (OpenHours and ClosedDays)
        public var sendingSchedule: Swift.Bool?
        /// The unique identifier for the first activity in the journey.
        public var startActivity: Swift.String?
        /// The segment that defines which users are participants in the journey.
        public var startCondition: PinpointClientTypes.StartCondition?
        /// The current status of the journey. Possible values are:
        ///
        /// * DRAFT - The journey is being developed and hasn't been published yet.
        ///
        /// * ACTIVE - The journey has been developed and published. Depending on the journey's schedule, the journey may currently be running or scheduled to start running at a later time. If a journey's status is ACTIVE, you can't add, change, or remove activities from it.
        ///
        /// * COMPLETED - The journey has been published and has finished running. All participants have entered the journey and no participants are waiting to complete the journey or any activities in the journey.
        ///
        /// * CANCELLED - The journey has been stopped. If a journey's status is CANCELLED, you can't add, change, or remove activities or segment settings from the journey.
        ///
        /// * CLOSED - The journey has been published and has started running. It may have also passed its scheduled end time, or passed its scheduled start time and a refresh frequency hasn't been specified for it. If a journey's status is CLOSED, you can't add participants to it, and no existing participants can enter the journey for the first time. However, any existing participants who are currently waiting to start an activity may continue the journey.
        public var state: PinpointClientTypes.State?
        /// This object is not used or supported.
        public var tags: [Swift.String:Swift.String]?
        /// Specifies whether endpoints in quiet hours should enter a wait till the end of their quiet hours.
        public var waitForQuietTime: Swift.Bool?

        public init (
            activities: [Swift.String:PinpointClientTypes.Activity]? = nil,
            applicationId: Swift.String? = nil,
            closedDays: PinpointClientTypes.ClosedDays? = nil,
            creationDate: Swift.String? = nil,
            id: Swift.String? = nil,
            journeyChannelSettings: PinpointClientTypes.JourneyChannelSettings? = nil,
            lastModifiedDate: Swift.String? = nil,
            limits: PinpointClientTypes.JourneyLimits? = nil,
            localTime: Swift.Bool? = nil,
            name: Swift.String? = nil,
            openHours: PinpointClientTypes.OpenHours? = nil,
            quietTime: PinpointClientTypes.QuietTime? = nil,
            refreshFrequency: Swift.String? = nil,
            refreshOnSegmentUpdate: Swift.Bool? = nil,
            schedule: PinpointClientTypes.JourneySchedule? = nil,
            sendingSchedule: Swift.Bool? = nil,
            startActivity: Swift.String? = nil,
            startCondition: PinpointClientTypes.StartCondition? = nil,
            state: PinpointClientTypes.State? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            waitForQuietTime: Swift.Bool? = nil
        )
        {
            self.activities = activities
            self.applicationId = applicationId
            self.closedDays = closedDays
            self.creationDate = creationDate
            self.id = id
            self.journeyChannelSettings = journeyChannelSettings
            self.lastModifiedDate = lastModifiedDate
            self.limits = limits
            self.localTime = localTime
            self.name = name
            self.openHours = openHours
            self.quietTime = quietTime
            self.refreshFrequency = refreshFrequency
            self.refreshOnSegmentUpdate = refreshOnSegmentUpdate
            self.schedule = schedule
            self.sendingSchedule = sendingSchedule
            self.startActivity = startActivity
            self.startCondition = startCondition
            self.state = state
            self.tags = tags
            self.waitForQuietTime = waitForQuietTime
        }
    }

}

extension PinpointClientTypes.JourneySMSMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityId = "EntityId"
        case messageType = "MessageType"
        case originationNumber = "OriginationNumber"
        case senderId = "SenderId"
        case templateId = "TemplateId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entityId = self.entityId {
            try encodeContainer.encode(entityId, forKey: .entityId)
        }
        if let messageType = self.messageType {
            try encodeContainer.encode(messageType.rawValue, forKey: .messageType)
        }
        if let originationNumber = self.originationNumber {
            try encodeContainer.encode(originationNumber, forKey: .originationNumber)
        }
        if let senderId = self.senderId {
            try encodeContainer.encode(senderId, forKey: .senderId)
        }
        if let templateId = self.templateId {
            try encodeContainer.encode(templateId, forKey: .templateId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageType.self, forKey: .messageType)
        messageType = messageTypeDecoded
        let originationNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originationNumber)
        originationNumber = originationNumberDecoded
        let senderIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .senderId)
        senderId = senderIdDecoded
        let entityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityId)
        entityId = entityIdDecoded
        let templateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateId)
        templateId = templateIdDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the sender ID and message type for an SMS message that's sent to participants in a journey.
    public struct JourneySMSMessage: Swift.Equatable {
        /// The entity ID or Principal Entity (PE) id received from the regulatory body for sending SMS in your country.
        public var entityId: Swift.String?
        /// The SMS message type. Valid values are TRANSACTIONAL (for messages that are critical or time-sensitive, such as a one-time passwords) and PROMOTIONAL (for messsages that aren't critical or time-sensitive, such as marketing messages).
        public var messageType: PinpointClientTypes.MessageType?
        /// The long code to send the SMS message from. This value should be one of the dedicated long codes that's assigned to your AWS account. Although it isn't required, we recommend that you specify the long code using an E.164 format to ensure prompt and accurate delivery of the message. For example, +12065550100.
        public var originationNumber: Swift.String?
        /// The sender ID to display as the sender of the message on a recipient's device. Support for sender IDs varies by country or region. For more information, see [Supported Countries and Regions](https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-sms-countries.html) in the Amazon Pinpoint User Guide.
        public var senderId: Swift.String?
        /// The template ID received from the regulatory body for sending SMS in your country.
        public var templateId: Swift.String?

        public init (
            entityId: Swift.String? = nil,
            messageType: PinpointClientTypes.MessageType? = nil,
            originationNumber: Swift.String? = nil,
            senderId: Swift.String? = nil,
            templateId: Swift.String? = nil
        )
        {
            self.entityId = entityId
            self.messageType = messageType
            self.originationNumber = originationNumber
            self.senderId = senderId
            self.templateId = templateId
        }
    }

}

extension PinpointClientTypes.JourneySchedule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case startTime = "StartTime"
        case timezone = "Timezone"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .dateTime, forKey: .endTime)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .dateTime, forKey: .startTime)
        }
        if let timezone = self.timezone {
            try encodeContainer.encode(timezone, forKey: .timezone)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
        let timezoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timezone)
        timezone = timezoneDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the schedule settings for a journey.
    public struct JourneySchedule: Swift.Equatable {
        /// The scheduled time, in ISO 8601 format, when the journey ended or will end.
        public var endTime: ClientRuntime.Date?
        /// The scheduled time, in ISO 8601 format, when the journey began or will begin.
        public var startTime: ClientRuntime.Date?
        /// The starting UTC offset for the journey schedule, if the value of the journey's LocalTime property is true. Valid values are: UTC, UTC+01, UTC+02, UTC+03, UTC+03:30, UTC+04, UTC+04:30, UTC+05, UTC+05:30, UTC+05:45, UTC+06, UTC+06:30, UTC+07, UTC+08, UTC+08:45, UTC+09, UTC+09:30, UTC+10, UTC+10:30, UTC+11, UTC+12, UTC+12:45, UTC+13, UTC+13:45, UTC-02, UTC-02:30, UTC-03, UTC-03:30, UTC-04, UTC-05, UTC-06, UTC-07, UTC-08, UTC-09, UTC-09:30, UTC-10, and UTC-11.
        public var timezone: Swift.String?

        public init (
            endTime: ClientRuntime.Date? = nil,
            startTime: ClientRuntime.Date? = nil,
            timezone: Swift.String? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
            self.timezone = timezone
        }
    }

}

extension PinpointClientTypes.JourneyStateRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.State.self, forKey: .state)
        state = stateDecoded
    }
}

extension PinpointClientTypes {
    /// Changes the status of a journey.
    public struct JourneyStateRequest: Swift.Equatable {
        /// The status of the journey. Currently, Supported values are ACTIVE, PAUSED, and CANCELLED If you cancel a journey, Amazon Pinpoint continues to perform activities that are currently in progress, until those activities are complete. Amazon Pinpoint also continues to collect and aggregate analytics data for those activities, until they are complete, and any activities that were complete when you cancelled the journey. After you cancel a journey, you can't add, change, or remove any activities from the journey. In addition, Amazon Pinpoint stops evaluating the journey and doesn't perform any activities that haven't started. When the journey is paused, Amazon Pinpoint continues to perform activities that are currently in progress, until those activities are complete. Endpoints will stop entering journeys when the journey is paused and will resume entering the journey after the journey is resumed. For wait activities, wait time is paused when the journey is paused. Currently, PAUSED only supports journeys with a segment refresh interval.
        public var state: PinpointClientTypes.State?

        public init (
            state: PinpointClientTypes.State? = nil
        )
        {
            self.state = state
        }
    }

}

extension PinpointClientTypes.JourneysResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case item = "Item"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let item = item {
            var itemContainer = encodeContainer.nestedUnkeyedContainer(forKey: .item)
            for journeyresponse0 in item {
                try itemContainer.encode(journeyresponse0)
            }
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([PinpointClientTypes.JourneyResponse?].self, forKey: .item)
        var itemDecoded0:[PinpointClientTypes.JourneyResponse]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [PinpointClientTypes.JourneyResponse]()
            for structure0 in itemContainer {
                if let structure0 = structure0 {
                    itemDecoded0?.append(structure0)
                }
            }
        }
        item = itemDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the status, configuration, and other settings for all the journeys that are associated with an application.
    public struct JourneysResponse: Swift.Equatable {
        /// An array of responses, one for each journey that's associated with the application.
        /// This member is required.
        public var item: [PinpointClientTypes.JourneyResponse]?
        /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
        public var nextToken: Swift.String?

        public init (
            item: [PinpointClientTypes.JourneyResponse]? = nil,
            nextToken: Swift.String? = nil
        )
        {
            self.item = item
            self.nextToken = nextToken
        }
    }

}

extension PinpointClientTypes {
    public enum Layout: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bottomBanner
        case carousel
        case middleBanner
        case mobileFeed
        case overlays
        case topBanner
        case sdkUnknown(Swift.String)

        public static var allCases: [Layout] {
            return [
                .bottomBanner,
                .carousel,
                .middleBanner,
                .mobileFeed,
                .overlays,
                .topBanner,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bottomBanner: return "BOTTOM_BANNER"
            case .carousel: return "CAROUSEL"
            case .middleBanner: return "MIDDLE_BANNER"
            case .mobileFeed: return "MOBILE_FEED"
            case .overlays: return "OVERLAYS"
            case .topBanner: return "TOP_BANNER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Layout(rawValue: rawValue) ?? Layout.sdkUnknown(rawValue)
        }
    }
}

extension ListJourneysInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "page-size".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            if let token = token {
                let tokenQueryItem = ClientRuntime.URLQueryItem(name: "token".urlPercentEncoding(), value: Swift.String(token).urlPercentEncoding())
                items.append(tokenQueryItem)
            }
            return items
        }
    }
}

extension ListJourneysInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/journeys"
    }
}

public struct ListJourneysInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var pageSize: Swift.String?
    /// The NextToken string that specifies which page of results to return in a paginated response.
    public var token: Swift.String?

    public init (
        applicationId: Swift.String? = nil,
        pageSize: Swift.String? = nil,
        token: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.pageSize = pageSize
        self.token = token
    }
}

struct ListJourneysInputBody: Swift.Equatable {
}

extension ListJourneysInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListJourneysOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListJourneysOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListJourneysOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListJourneysOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.JourneysResponse = try responseDecoder.decode(responseBody: data)
                self.journeysResponse = output
            } else {
                self.journeysResponse = nil
            }
        } else {
            self.journeysResponse = nil
        }
    }
}

public struct ListJourneysOutputResponse: Swift.Equatable {
    /// Provides information about the status, configuration, and other settings for all the journeys that are associated with an application.
    /// This member is required.
    public var journeysResponse: PinpointClientTypes.JourneysResponse?

    public init (
        journeysResponse: PinpointClientTypes.JourneysResponse? = nil
    )
    {
        self.journeysResponse = journeysResponse
    }
}

struct ListJourneysOutputResponseBody: Swift.Equatable {
    let journeysResponse: PinpointClientTypes.JourneysResponse?
}

extension ListJourneysOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case journeysResponse = "JourneysResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let journeysResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneysResponse.self, forKey: .journeysResponse)
        journeysResponse = journeysResponseDecoded
    }
}

extension PinpointClientTypes.ListRecommenderConfigurationsResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case item = "Item"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let item = item {
            var itemContainer = encodeContainer.nestedUnkeyedContainer(forKey: .item)
            for recommenderconfigurationresponse0 in item {
                try itemContainer.encode(recommenderconfigurationresponse0)
            }
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([PinpointClientTypes.RecommenderConfigurationResponse?].self, forKey: .item)
        var itemDecoded0:[PinpointClientTypes.RecommenderConfigurationResponse]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [PinpointClientTypes.RecommenderConfigurationResponse]()
            for structure0 in itemContainer {
                if let structure0 = structure0 {
                    itemDecoded0?.append(structure0)
                }
            }
        }
        item = itemDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about all the recommender model configurations that are associated with your Amazon Pinpoint account.
    public struct ListRecommenderConfigurationsResponse: Swift.Equatable {
        /// An array of responses, one for each recommender model configuration that's associated with your Amazon Pinpoint account.
        /// This member is required.
        public var item: [PinpointClientTypes.RecommenderConfigurationResponse]?
        /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
        public var nextToken: Swift.String?

        public init (
            item: [PinpointClientTypes.RecommenderConfigurationResponse]? = nil,
            nextToken: Swift.String? = nil
        )
        {
            self.item = item
            self.nextToken = nextToken
        }
    }

}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/v1/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
}

extension ListTagsForResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.TagsModel = try responseDecoder.decode(responseBody: data)
                self.tagsModel = output
            } else {
                self.tagsModel = nil
            }
        } else {
            self.tagsModel = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// Specifies the tags (keys and values) for an application, campaign, message template, or segment.
    /// This member is required.
    public var tagsModel: PinpointClientTypes.TagsModel?

    public init (
        tagsModel: PinpointClientTypes.TagsModel? = nil
    )
    {
        self.tagsModel = tagsModel
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tagsModel: PinpointClientTypes.TagsModel?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagsModel = "TagsModel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsModelDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.TagsModel.self, forKey: .tagsModel)
        tagsModel = tagsModelDecoded
    }
}

extension ListTemplateVersionsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "page-size".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            return items
        }
    }
}

extension ListTemplateVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        guard let templateType = templateType else {
            return nil
        }
        return "/v1/templates/\(templateName.urlPercentEncoding())/\(templateType.urlPercentEncoding())/versions"
    }
}

public struct ListTemplateVersionsInput: Swift.Equatable {
    /// The string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var nextToken: Swift.String?
    /// The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var pageSize: Swift.String?
    /// The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
    /// This member is required.
    public var templateName: Swift.String?
    /// The type of channel that the message template is designed for. Valid values are: EMAIL, PUSH, SMS, and VOICE.
    /// This member is required.
    public var templateType: Swift.String?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.String? = nil,
        templateName: Swift.String? = nil,
        templateType: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
        self.templateName = templateName
        self.templateType = templateType
    }
}

struct ListTemplateVersionsInputBody: Swift.Equatable {
}

extension ListTemplateVersionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTemplateVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTemplateVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTemplateVersionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTemplateVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.TemplateVersionsResponse = try responseDecoder.decode(responseBody: data)
                self.templateVersionsResponse = output
            } else {
                self.templateVersionsResponse = nil
            }
        } else {
            self.templateVersionsResponse = nil
        }
    }
}

public struct ListTemplateVersionsOutputResponse: Swift.Equatable {
    /// Provides information about all the versions of a specific message template.
    /// This member is required.
    public var templateVersionsResponse: PinpointClientTypes.TemplateVersionsResponse?

    public init (
        templateVersionsResponse: PinpointClientTypes.TemplateVersionsResponse? = nil
    )
    {
        self.templateVersionsResponse = templateVersionsResponse
    }
}

struct ListTemplateVersionsOutputResponseBody: Swift.Equatable {
    let templateVersionsResponse: PinpointClientTypes.TemplateVersionsResponse?
}

extension ListTemplateVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateVersionsResponse = "TemplateVersionsResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateVersionsResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.TemplateVersionsResponse.self, forKey: .templateVersionsResponse)
        templateVersionsResponse = templateVersionsResponseDecoded
    }
}

extension ListTemplatesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let pageSize = pageSize {
                let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "page-size".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
                items.append(pageSizeQueryItem)
            }
            if let `prefix` = `prefix` {
                let prefixQueryItem = ClientRuntime.URLQueryItem(name: "prefix".urlPercentEncoding(), value: Swift.String(`prefix`).urlPercentEncoding())
                items.append(prefixQueryItem)
            }
            if let templateType = templateType {
                let templateTypeQueryItem = ClientRuntime.URLQueryItem(name: "template-type".urlPercentEncoding(), value: Swift.String(templateType).urlPercentEncoding())
                items.append(templateTypeQueryItem)
            }
            return items
        }
    }
}

extension ListTemplatesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/templates"
    }
}

public struct ListTemplatesInput: Swift.Equatable {
    /// The string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var nextToken: Swift.String?
    /// The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
    public var pageSize: Swift.String?
    /// The substring to match in the names of the message templates to include in the results. If you specify this value, Amazon Pinpoint returns only those templates whose names begin with the value that you specify.
    public var `prefix`: Swift.String?
    /// The type of message template to include in the results. Valid values are: EMAIL, PUSH, SMS, and VOICE. To include all types of templates in the results, don't include this parameter in your request.
    public var templateType: Swift.String?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.String? = nil,
        `prefix`: Swift.String? = nil,
        templateType: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
        self.`prefix` = `prefix`
        self.templateType = templateType
    }
}

struct ListTemplatesInputBody: Swift.Equatable {
}

extension ListTemplatesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTemplatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTemplatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTemplatesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTemplatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.TemplatesResponse = try responseDecoder.decode(responseBody: data)
                self.templatesResponse = output
            } else {
                self.templatesResponse = nil
            }
        } else {
            self.templatesResponse = nil
        }
    }
}

public struct ListTemplatesOutputResponse: Swift.Equatable {
    /// Provides information about all the message templates that are associated with your Amazon Pinpoint account.
    /// This member is required.
    public var templatesResponse: PinpointClientTypes.TemplatesResponse?

    public init (
        templatesResponse: PinpointClientTypes.TemplatesResponse? = nil
    )
    {
        self.templatesResponse = templatesResponse
    }
}

struct ListTemplatesOutputResponseBody: Swift.Equatable {
    let templatesResponse: PinpointClientTypes.TemplatesResponse?
}

extension ListTemplatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templatesResponse = "TemplatesResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templatesResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.TemplatesResponse.self, forKey: .templatesResponse)
        templatesResponse = templatesResponseDecoded
    }
}

extension PinpointClientTypes.Message: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case body = "Body"
        case imageIconUrl = "ImageIconUrl"
        case imageSmallIconUrl = "ImageSmallIconUrl"
        case imageUrl = "ImageUrl"
        case jsonBody = "JsonBody"
        case mediaUrl = "MediaUrl"
        case rawContent = "RawContent"
        case silentPush = "SilentPush"
        case timeToLive = "TimeToLive"
        case title = "Title"
        case url = "Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let imageIconUrl = self.imageIconUrl {
            try encodeContainer.encode(imageIconUrl, forKey: .imageIconUrl)
        }
        if let imageSmallIconUrl = self.imageSmallIconUrl {
            try encodeContainer.encode(imageSmallIconUrl, forKey: .imageSmallIconUrl)
        }
        if let imageUrl = self.imageUrl {
            try encodeContainer.encode(imageUrl, forKey: .imageUrl)
        }
        if let jsonBody = self.jsonBody {
            try encodeContainer.encode(jsonBody, forKey: .jsonBody)
        }
        if let mediaUrl = self.mediaUrl {
            try encodeContainer.encode(mediaUrl, forKey: .mediaUrl)
        }
        if let rawContent = self.rawContent {
            try encodeContainer.encode(rawContent, forKey: .rawContent)
        }
        if let silentPush = self.silentPush {
            try encodeContainer.encode(silentPush, forKey: .silentPush)
        }
        if let timeToLive = self.timeToLive {
            try encodeContainer.encode(timeToLive, forKey: .timeToLive)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Action.self, forKey: .action)
        action = actionDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let imageIconUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageIconUrl)
        imageIconUrl = imageIconUrlDecoded
        let imageSmallIconUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageSmallIconUrl)
        imageSmallIconUrl = imageSmallIconUrlDecoded
        let imageUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageUrl)
        imageUrl = imageUrlDecoded
        let jsonBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jsonBody)
        jsonBody = jsonBodyDecoded
        let mediaUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mediaUrl)
        mediaUrl = mediaUrlDecoded
        let rawContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rawContent)
        rawContent = rawContentDecoded
        let silentPushDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .silentPush)
        silentPush = silentPushDecoded
        let timeToLiveDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeToLive)
        timeToLive = timeToLiveDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the content and settings for a push notification that's sent to recipients of a campaign.
    public struct Message: Swift.Equatable {
        /// The action to occur if a recipient taps the push notification. Valid values are:
        ///
        /// * OPEN_APP - Your app opens or it becomes the foreground app if it was sent to the background. This is the default action.
        ///
        /// * DEEP_LINK - Your app opens and displays a designated user interface in the app. This setting uses the deep-linking features of iOS and Android.
        ///
        /// * URL - The default mobile browser on the recipient's device opens and loads the web page at a URL that you specify.
        public var action: PinpointClientTypes.Action?
        /// The body of the notification message. The maximum number of characters is 200.
        public var body: Swift.String?
        /// The URL of the image to display as the push-notification icon, such as the icon for the app.
        public var imageIconUrl: Swift.String?
        /// The URL of the image to display as the small, push-notification icon, such as a small version of the icon for the app.
        public var imageSmallIconUrl: Swift.String?
        /// The URL of an image to display in the push notification.
        public var imageUrl: Swift.String?
        /// The JSON payload to use for a silent push notification.
        public var jsonBody: Swift.String?
        /// The URL of the image or video to display in the push notification.
        public var mediaUrl: Swift.String?
        /// The raw, JSON-formatted string to use as the payload for the notification message. If specified, this value overrides all other content for the message.
        public var rawContent: Swift.String?
        /// Specifies whether the notification is a silent push notification, which is a push notification that doesn't display on a recipient's device. Silent push notifications can be used for cases such as updating an app's configuration, displaying messages in an in-app message center, or supporting phone home functionality.
        public var silentPush: Swift.Bool?
        /// The number of seconds that the push-notification service should keep the message, if the service is unable to deliver the notification the first time. This value is converted to an expiration value when it's sent to a push-notification service. If this value is 0, the service treats the notification as if it expires immediately and the service doesn't store or try to deliver the notification again. This value doesn't apply to messages that are sent through the Amazon Device Messaging (ADM) service.
        public var timeToLive: Swift.Int?
        /// The title to display above the notification message on a recipient's device.
        public var title: Swift.String?
        /// The URL to open in a recipient's default mobile browser, if a recipient taps the push notification and the value of the Action property is URL.
        public var url: Swift.String?

        public init (
            action: PinpointClientTypes.Action? = nil,
            body: Swift.String? = nil,
            imageIconUrl: Swift.String? = nil,
            imageSmallIconUrl: Swift.String? = nil,
            imageUrl: Swift.String? = nil,
            jsonBody: Swift.String? = nil,
            mediaUrl: Swift.String? = nil,
            rawContent: Swift.String? = nil,
            silentPush: Swift.Bool? = nil,
            timeToLive: Swift.Int? = nil,
            title: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.action = action
            self.body = body
            self.imageIconUrl = imageIconUrl
            self.imageSmallIconUrl = imageSmallIconUrl
            self.imageUrl = imageUrl
            self.jsonBody = jsonBody
            self.mediaUrl = mediaUrl
            self.rawContent = rawContent
            self.silentPush = silentPush
            self.timeToLive = timeToLive
            self.title = title
            self.url = url
        }
    }

}

extension PinpointClientTypes.MessageBody: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestID = "RequestID"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let requestID = self.requestID {
            try encodeContainer.encode(requestID, forKey: .requestID)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestID)
        requestID = requestIDDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about an API request or response.
    public struct MessageBody: Swift.Equatable {
        /// The message that's returned from the API.
        public var message: Swift.String?
        /// The unique identifier for the request or response.
        public var requestID: Swift.String?

        public init (
            message: Swift.String? = nil,
            requestID: Swift.String? = nil
        )
        {
            self.message = message
            self.requestID = requestID
        }
    }

}

extension PinpointClientTypes.MessageConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case admMessage = "ADMMessage"
        case apnsMessage = "APNSMessage"
        case baiduMessage = "BaiduMessage"
        case customMessage = "CustomMessage"
        case defaultMessage = "DefaultMessage"
        case emailMessage = "EmailMessage"
        case gcmMessage = "GCMMessage"
        case inAppMessage = "InAppMessage"
        case smsMessage = "SMSMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let admMessage = self.admMessage {
            try encodeContainer.encode(admMessage, forKey: .admMessage)
        }
        if let apnsMessage = self.apnsMessage {
            try encodeContainer.encode(apnsMessage, forKey: .apnsMessage)
        }
        if let baiduMessage = self.baiduMessage {
            try encodeContainer.encode(baiduMessage, forKey: .baiduMessage)
        }
        if let customMessage = self.customMessage {
            try encodeContainer.encode(customMessage, forKey: .customMessage)
        }
        if let defaultMessage = self.defaultMessage {
            try encodeContainer.encode(defaultMessage, forKey: .defaultMessage)
        }
        if let emailMessage = self.emailMessage {
            try encodeContainer.encode(emailMessage, forKey: .emailMessage)
        }
        if let gcmMessage = self.gcmMessage {
            try encodeContainer.encode(gcmMessage, forKey: .gcmMessage)
        }
        if let inAppMessage = self.inAppMessage {
            try encodeContainer.encode(inAppMessage, forKey: .inAppMessage)
        }
        if let smsMessage = self.smsMessage {
            try encodeContainer.encode(smsMessage, forKey: .smsMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let admMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Message.self, forKey: .admMessage)
        admMessage = admMessageDecoded
        let apnsMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Message.self, forKey: .apnsMessage)
        apnsMessage = apnsMessageDecoded
        let baiduMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Message.self, forKey: .baiduMessage)
        baiduMessage = baiduMessageDecoded
        let customMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignCustomMessage.self, forKey: .customMessage)
        customMessage = customMessageDecoded
        let defaultMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Message.self, forKey: .defaultMessage)
        defaultMessage = defaultMessageDecoded
        let emailMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignEmailMessage.self, forKey: .emailMessage)
        emailMessage = emailMessageDecoded
        let gcmMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Message.self, forKey: .gcmMessage)
        gcmMessage = gcmMessageDecoded
        let smsMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignSmsMessage.self, forKey: .smsMessage)
        smsMessage = smsMessageDecoded
        let inAppMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignInAppMessage.self, forKey: .inAppMessage)
        inAppMessage = inAppMessageDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the message configuration settings for a campaign.
    public struct MessageConfiguration: Swift.Equatable {
        /// The message that the campaign sends through the ADM (Amazon Device Messaging) channel. If specified, this message overrides the default message.
        public var admMessage: PinpointClientTypes.Message?
        /// The message that the campaign sends through the APNs (Apple Push Notification service) channel. If specified, this message overrides the default message.
        public var apnsMessage: PinpointClientTypes.Message?
        /// The message that the campaign sends through the Baidu (Baidu Cloud Push) channel. If specified, this message overrides the default message.
        public var baiduMessage: PinpointClientTypes.Message?
        /// The message that the campaign sends through a custom channel, as specified by the delivery configuration (CustomDeliveryConfiguration) settings for the campaign. If specified, this message overrides the default message.
        public var customMessage: PinpointClientTypes.CampaignCustomMessage?
        /// The default message that the campaign sends through all the channels that are configured for the campaign.
        public var defaultMessage: PinpointClientTypes.Message?
        /// The message that the campaign sends through the email channel. If specified, this message overrides the default message.
        public var emailMessage: PinpointClientTypes.CampaignEmailMessage?
        /// The message that the campaign sends through the GCM channel, which enables Amazon Pinpoint to send push notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service. If specified, this message overrides the default message.
        public var gcmMessage: PinpointClientTypes.Message?
        /// The in-app message configuration.
        public var inAppMessage: PinpointClientTypes.CampaignInAppMessage?
        /// The message that the campaign sends through the SMS channel. If specified, this message overrides the default message.
        public var smsMessage: PinpointClientTypes.CampaignSmsMessage?

        public init (
            admMessage: PinpointClientTypes.Message? = nil,
            apnsMessage: PinpointClientTypes.Message? = nil,
            baiduMessage: PinpointClientTypes.Message? = nil,
            customMessage: PinpointClientTypes.CampaignCustomMessage? = nil,
            defaultMessage: PinpointClientTypes.Message? = nil,
            emailMessage: PinpointClientTypes.CampaignEmailMessage? = nil,
            gcmMessage: PinpointClientTypes.Message? = nil,
            inAppMessage: PinpointClientTypes.CampaignInAppMessage? = nil,
            smsMessage: PinpointClientTypes.CampaignSmsMessage? = nil
        )
        {
            self.admMessage = admMessage
            self.apnsMessage = apnsMessage
            self.baiduMessage = baiduMessage
            self.customMessage = customMessage
            self.defaultMessage = defaultMessage
            self.emailMessage = emailMessage
            self.gcmMessage = gcmMessage
            self.inAppMessage = inAppMessage
            self.smsMessage = smsMessage
        }
    }

}

extension PinpointClientTypes.MessageRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addresses = "Addresses"
        case context = "Context"
        case endpoints = "Endpoints"
        case messageConfiguration = "MessageConfiguration"
        case templateConfiguration = "TemplateConfiguration"
        case traceId = "TraceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addresses = addresses {
            var addressesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .addresses)
            for (dictKey0, mapOfAddressConfiguration0) in addresses {
                try addressesContainer.encode(mapOfAddressConfiguration0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let context = context {
            var contextContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .context)
            for (dictKey0, mapOf__string0) in context {
                try contextContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let endpoints = endpoints {
            var endpointsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .endpoints)
            for (dictKey0, mapOfEndpointSendConfiguration0) in endpoints {
                try endpointsContainer.encode(mapOfEndpointSendConfiguration0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let messageConfiguration = self.messageConfiguration {
            try encodeContainer.encode(messageConfiguration, forKey: .messageConfiguration)
        }
        if let templateConfiguration = self.templateConfiguration {
            try encodeContainer.encode(templateConfiguration, forKey: .templateConfiguration)
        }
        if let traceId = self.traceId {
            try encodeContainer.encode(traceId, forKey: .traceId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressesContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.AddressConfiguration?].self, forKey: .addresses)
        var addressesDecoded0: [Swift.String:PinpointClientTypes.AddressConfiguration]? = nil
        if let addressesContainer = addressesContainer {
            addressesDecoded0 = [Swift.String:PinpointClientTypes.AddressConfiguration]()
            for (key0, addressconfiguration0) in addressesContainer {
                if let addressconfiguration0 = addressconfiguration0 {
                    addressesDecoded0?[key0] = addressconfiguration0
                }
            }
        }
        addresses = addressesDecoded0
        let contextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .context)
        var contextDecoded0: [Swift.String:Swift.String]? = nil
        if let contextContainer = contextContainer {
            contextDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in contextContainer {
                if let __string0 = __string0 {
                    contextDecoded0?[key0] = __string0
                }
            }
        }
        context = contextDecoded0
        let endpointsContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.EndpointSendConfiguration?].self, forKey: .endpoints)
        var endpointsDecoded0: [Swift.String:PinpointClientTypes.EndpointSendConfiguration]? = nil
        if let endpointsContainer = endpointsContainer {
            endpointsDecoded0 = [Swift.String:PinpointClientTypes.EndpointSendConfiguration]()
            for (key0, endpointsendconfiguration0) in endpointsContainer {
                if let endpointsendconfiguration0 = endpointsendconfiguration0 {
                    endpointsDecoded0?[key0] = endpointsendconfiguration0
                }
            }
        }
        endpoints = endpointsDecoded0
        let messageConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.DirectMessageConfiguration.self, forKey: .messageConfiguration)
        messageConfiguration = messageConfigurationDecoded
        let templateConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.TemplateConfiguration.self, forKey: .templateConfiguration)
        templateConfiguration = templateConfigurationDecoded
        let traceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .traceId)
        traceId = traceIdDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the configuration and other settings for a message.
    public struct MessageRequest: Swift.Equatable {
        /// A map of key-value pairs, where each key is an address and each value is an [AddressConfiguration](https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-messages.html#apps-application-id-messages-model-addressconfiguration) object. An address can be a push notification token, a phone number, or an email address. You can use an [AddressConfiguration](https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-messages.html#apps-application-id-messages-model-addressconfiguration) object to tailor the message for an address by specifying settings such as content overrides and message variables.
        public var addresses: [Swift.String:PinpointClientTypes.AddressConfiguration]?
        /// A map of custom attributes to attach to the message. For a push notification, this payload is added to the data.pinpoint object. For an email or text message, this payload is added to email/SMS delivery receipt event attributes.
        public var context: [Swift.String:Swift.String]?
        /// A map of key-value pairs, where each key is an endpoint ID and each value is an [EndpointSendConfiguration](https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-messages.html#apps-application-id-messages-model-endpointsendconfiguration) object. You can use an [EndpointSendConfiguration](https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-messages.html#apps-application-id-messages-model-endpointsendconfiguration) object to tailor the message for an endpoint by specifying settings such as content overrides and message variables.
        public var endpoints: [Swift.String:PinpointClientTypes.EndpointSendConfiguration]?
        /// The settings and content for the default message and any default messages that you defined for specific channels.
        /// This member is required.
        public var messageConfiguration: PinpointClientTypes.DirectMessageConfiguration?
        /// The message template to use for the message.
        public var templateConfiguration: PinpointClientTypes.TemplateConfiguration?
        /// The unique identifier for tracing the message. This identifier is visible to message recipients.
        public var traceId: Swift.String?

        public init (
            addresses: [Swift.String:PinpointClientTypes.AddressConfiguration]? = nil,
            context: [Swift.String:Swift.String]? = nil,
            endpoints: [Swift.String:PinpointClientTypes.EndpointSendConfiguration]? = nil,
            messageConfiguration: PinpointClientTypes.DirectMessageConfiguration? = nil,
            templateConfiguration: PinpointClientTypes.TemplateConfiguration? = nil,
            traceId: Swift.String? = nil
        )
        {
            self.addresses = addresses
            self.context = context
            self.endpoints = endpoints
            self.messageConfiguration = messageConfiguration
            self.templateConfiguration = templateConfiguration
            self.traceId = traceId
        }
    }

}

extension PinpointClientTypes.MessageResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case endpointResult = "EndpointResult"
        case requestId = "RequestId"
        case result = "Result"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let endpointResult = endpointResult {
            var endpointResultContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .endpointResult)
            for (dictKey0, mapOfEndpointMessageResult0) in endpointResult {
                try endpointResultContainer.encode(mapOfEndpointMessageResult0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let requestId = self.requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let result = result {
            var resultContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .result)
            for (dictKey0, mapOfMessageResult0) in result {
                try resultContainer.encode(mapOfMessageResult0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let endpointResultContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.EndpointMessageResult?].self, forKey: .endpointResult)
        var endpointResultDecoded0: [Swift.String:PinpointClientTypes.EndpointMessageResult]? = nil
        if let endpointResultContainer = endpointResultContainer {
            endpointResultDecoded0 = [Swift.String:PinpointClientTypes.EndpointMessageResult]()
            for (key0, endpointmessageresult0) in endpointResultContainer {
                if let endpointmessageresult0 = endpointmessageresult0 {
                    endpointResultDecoded0?[key0] = endpointmessageresult0
                }
            }
        }
        endpointResult = endpointResultDecoded0
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let resultContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.MessageResult?].self, forKey: .result)
        var resultDecoded0: [Swift.String:PinpointClientTypes.MessageResult]? = nil
        if let resultContainer = resultContainer {
            resultDecoded0 = [Swift.String:PinpointClientTypes.MessageResult]()
            for (key0, messageresult0) in resultContainer {
                if let messageresult0 = messageresult0 {
                    resultDecoded0?[key0] = messageresult0
                }
            }
        }
        result = resultDecoded0
    }
}

extension PinpointClientTypes {
    /// Provides information about the results of a request to send a message to an endpoint address.
    public struct MessageResponse: Swift.Equatable {
        /// The unique identifier for the application that was used to send the message.
        /// This member is required.
        public var applicationId: Swift.String?
        /// A map that contains a multipart response for each address that the message was sent to. In the map, the endpoint ID is the key and the result is the value.
        public var endpointResult: [Swift.String:PinpointClientTypes.EndpointMessageResult]?
        /// The identifier for the original request that the message was delivered for.
        public var requestId: Swift.String?
        /// A map that contains a multipart response for each address (email address, phone number, or push notification token) that the message was sent to. In the map, the address is the key and the result is the value.
        public var result: [Swift.String:PinpointClientTypes.MessageResult]?

        public init (
            applicationId: Swift.String? = nil,
            endpointResult: [Swift.String:PinpointClientTypes.EndpointMessageResult]? = nil,
            requestId: Swift.String? = nil,
            result: [Swift.String:PinpointClientTypes.MessageResult]? = nil
        )
        {
            self.applicationId = applicationId
            self.endpointResult = endpointResult
            self.requestId = requestId
            self.result = result
        }
    }

}

extension PinpointClientTypes.MessageResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStatus = "DeliveryStatus"
        case messageId = "MessageId"
        case statusCode = "StatusCode"
        case statusMessage = "StatusMessage"
        case updatedToken = "UpdatedToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryStatus = self.deliveryStatus {
            try encodeContainer.encode(deliveryStatus.rawValue, forKey: .deliveryStatus)
        }
        if let messageId = self.messageId {
            try encodeContainer.encode(messageId, forKey: .messageId)
        }
        if let statusCode = self.statusCode {
            try encodeContainer.encode(statusCode, forKey: .statusCode)
        }
        if let statusMessage = self.statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let updatedToken = self.updatedToken {
            try encodeContainer.encode(updatedToken, forKey: .updatedToken)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryStatusDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.DeliveryStatus.self, forKey: .deliveryStatus)
        deliveryStatus = deliveryStatusDecoded
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
        let statusCodeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let updatedTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updatedToken)
        updatedToken = updatedTokenDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the results of sending a message directly to an endpoint address.
    public struct MessageResult: Swift.Equatable {
        /// The delivery status of the message. Possible values are:
        ///
        /// * DUPLICATE - The endpoint address is a duplicate of another endpoint address. Amazon Pinpoint won't attempt to send the message again.
        ///
        /// * OPT_OUT - The user who's associated with the endpoint address has opted out of receiving messages from you. Amazon Pinpoint won't attempt to send the message again.
        ///
        /// * PERMANENT_FAILURE - An error occurred when delivering the message to the endpoint address. Amazon Pinpoint won't attempt to send the message again.
        ///
        /// * SUCCESSFUL - The message was successfully delivered to the endpoint address.
        ///
        /// * TEMPORARY_FAILURE - A temporary error occurred. Amazon Pinpoint won't attempt to send the message again.
        ///
        /// * THROTTLED - Amazon Pinpoint throttled the operation to send the message to the endpoint address.
        ///
        /// * TIMEOUT - The message couldn't be sent within the timeout period.
        ///
        /// * UNKNOWN_FAILURE - An unknown error occurred.
        /// This member is required.
        public var deliveryStatus: PinpointClientTypes.DeliveryStatus?
        /// The unique identifier for the message that was sent.
        public var messageId: Swift.String?
        /// The downstream service status code for delivering the message.
        /// This member is required.
        public var statusCode: Swift.Int?
        /// The status message for delivering the message.
        public var statusMessage: Swift.String?
        /// For push notifications that are sent through the GCM channel, specifies whether the endpoint's device registration token was updated as part of delivering the message.
        public var updatedToken: Swift.String?

        public init (
            deliveryStatus: PinpointClientTypes.DeliveryStatus? = nil,
            messageId: Swift.String? = nil,
            statusCode: Swift.Int? = nil,
            statusMessage: Swift.String? = nil,
            updatedToken: Swift.String? = nil
        )
        {
            self.deliveryStatus = deliveryStatus
            self.messageId = messageId
            self.statusCode = statusCode
            self.statusMessage = statusMessage
            self.updatedToken = updatedToken
        }
    }

}

extension PinpointClientTypes {
    public enum MessageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case promotional
        case transactional
        case sdkUnknown(Swift.String)

        public static var allCases: [MessageType] {
            return [
                .promotional,
                .transactional,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .promotional: return "PROMOTIONAL"
            case .transactional: return "TRANSACTIONAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MessageType(rawValue: rawValue) ?? MessageType.sdkUnknown(rawValue)
        }
    }
}

extension MethodNotAllowedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: MethodNotAllowedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestID = output.requestID
        } else {
            self.message = nil
            self.requestID = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Provides information about an API request or response.
public struct MethodNotAllowedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that's returned from the API.
    public var message: Swift.String?
    /// The unique identifier for the request or response.
    public var requestID: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestID: Swift.String? = nil
    )
    {
        self.message = message
        self.requestID = requestID
    }
}

struct MethodNotAllowedExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let requestID: Swift.String?
}

extension MethodNotAllowedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestID = "RequestID"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestID)
        requestID = requestIDDecoded
    }
}

extension PinpointClientTypes.MetricDimension: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comparisonOperator = "ComparisonOperator"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparisonOperator = self.comparisonOperator {
            try encodeContainer.encode(comparisonOperator, forKey: .comparisonOperator)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .value)
        value = valueDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies metric-based criteria for including or excluding endpoints from a segment. These criteria derive from custom metrics that you define for endpoints.
    public struct MetricDimension: Swift.Equatable {
        /// The operator to use when comparing metric values. Valid values are: GREATER_THAN, LESS_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN_OR_EQUAL, and EQUAL.
        /// This member is required.
        public var comparisonOperator: Swift.String?
        /// The value to compare.
        /// This member is required.
        public var value: Swift.Double?

        public init (
            comparisonOperator: Swift.String? = nil,
            value: Swift.Double? = nil
        )
        {
            self.comparisonOperator = comparisonOperator
            self.value = value
        }
    }

}

extension PinpointClientTypes {
    public enum Mode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case delivery
        case filter
        case sdkUnknown(Swift.String)

        public static var allCases: [Mode] {
            return [
                .delivery,
                .filter,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .delivery: return "DELIVERY"
            case .filter: return "FILTER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Mode(rawValue: rawValue) ?? Mode.sdkUnknown(rawValue)
        }
    }
}

extension PinpointClientTypes.MultiConditionalBranch: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case condition = "Condition"
        case nextActivity = "NextActivity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let condition = self.condition {
            try encodeContainer.encode(condition, forKey: .condition)
        }
        if let nextActivity = self.nextActivity {
            try encodeContainer.encode(nextActivity, forKey: .nextActivity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conditionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SimpleCondition.self, forKey: .condition)
        condition = conditionDecoded
        let nextActivityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextActivity)
        nextActivity = nextActivityDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies a condition to evaluate for an activity path in a journey.
    public struct MultiConditionalBranch: Swift.Equatable {
        /// The condition to evaluate for the activity path.
        public var condition: PinpointClientTypes.SimpleCondition?
        /// The unique identifier for the next activity to perform, after completing the activity for the path.
        public var nextActivity: Swift.String?

        public init (
            condition: PinpointClientTypes.SimpleCondition? = nil,
            nextActivity: Swift.String? = nil
        )
        {
            self.condition = condition
            self.nextActivity = nextActivity
        }
    }

}

extension PinpointClientTypes.MultiConditionalSplitActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case branches = "Branches"
        case defaultActivity = "DefaultActivity"
        case evaluationWaitTime = "EvaluationWaitTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let branches = branches {
            var branchesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .branches)
            for multiconditionalbranch0 in branches {
                try branchesContainer.encode(multiconditionalbranch0)
            }
        }
        if let defaultActivity = self.defaultActivity {
            try encodeContainer.encode(defaultActivity, forKey: .defaultActivity)
        }
        if let evaluationWaitTime = self.evaluationWaitTime {
            try encodeContainer.encode(evaluationWaitTime, forKey: .evaluationWaitTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let branchesContainer = try containerValues.decodeIfPresent([PinpointClientTypes.MultiConditionalBranch?].self, forKey: .branches)
        var branchesDecoded0:[PinpointClientTypes.MultiConditionalBranch]? = nil
        if let branchesContainer = branchesContainer {
            branchesDecoded0 = [PinpointClientTypes.MultiConditionalBranch]()
            for structure0 in branchesContainer {
                if let structure0 = structure0 {
                    branchesDecoded0?.append(structure0)
                }
            }
        }
        branches = branchesDecoded0
        let defaultActivityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultActivity)
        defaultActivity = defaultActivityDecoded
        let evaluationWaitTimeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.WaitTime.self, forKey: .evaluationWaitTime)
        evaluationWaitTime = evaluationWaitTimeDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the settings for a multivariate split activity in a journey. This type of activity sends participants down one of as many as five paths (including a default Else path) in a journey, based on conditions that you specify. To create multivariate split activities that send participants down different paths based on push notification events (such as Open or Received events), your mobile app has to specify the User ID and Endpoint ID values. For more information, see [Integrating Amazon Pinpoint with your application](https://docs.aws.amazon.com/pinpoint/latest/developerguide/integrate.html) in the Amazon Pinpoint Developer Guide.
    public struct MultiConditionalSplitActivity: Swift.Equatable {
        /// The paths for the activity, including the conditions for entering each path and the activity to perform for each path.
        public var branches: [PinpointClientTypes.MultiConditionalBranch]?
        /// The unique identifier for the activity to perform for participants who don't meet any of the conditions specified for other paths in the activity.
        public var defaultActivity: Swift.String?
        /// The amount of time to wait or the date and time when Amazon Pinpoint determines whether the conditions are met.
        public var evaluationWaitTime: PinpointClientTypes.WaitTime?

        public init (
            branches: [PinpointClientTypes.MultiConditionalBranch]? = nil,
            defaultActivity: Swift.String? = nil,
            evaluationWaitTime: PinpointClientTypes.WaitTime? = nil
        )
        {
            self.branches = branches
            self.defaultActivity = defaultActivity
            self.evaluationWaitTime = evaluationWaitTime
        }
    }

}

extension NotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: NotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestID = output.requestID
        } else {
            self.message = nil
            self.requestID = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Provides information about an API request or response.
public struct NotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that's returned from the API.
    public var message: Swift.String?
    /// The unique identifier for the request or response.
    public var requestID: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestID: Swift.String? = nil
    )
    {
        self.message = message
        self.requestID = requestID
    }
}

struct NotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let requestID: Swift.String?
}

extension NotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestID = "RequestID"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestID)
        requestID = requestIDDecoded
    }
}

extension PinpointClientTypes.NumberValidateRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isoCountryCode = "IsoCountryCode"
        case phoneNumber = "PhoneNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let isoCountryCode = self.isoCountryCode {
            try encodeContainer.encode(isoCountryCode, forKey: .isoCountryCode)
        }
        if let phoneNumber = self.phoneNumber {
            try encodeContainer.encode(phoneNumber, forKey: .phoneNumber)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isoCountryCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .isoCountryCode)
        isoCountryCode = isoCountryCodeDecoded
        let phoneNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .phoneNumber)
        phoneNumber = phoneNumberDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies a phone number to validate and retrieve information about.
    public struct NumberValidateRequest: Swift.Equatable {
        /// The two-character code, in ISO 3166-1 alpha-2 format, for the country or region where the phone number was originally registered.
        public var isoCountryCode: Swift.String?
        /// The phone number to retrieve information about. The phone number that you provide should include a valid numeric country code. Otherwise, the operation might result in an error.
        public var phoneNumber: Swift.String?

        public init (
            isoCountryCode: Swift.String? = nil,
            phoneNumber: Swift.String? = nil
        )
        {
            self.isoCountryCode = isoCountryCode
            self.phoneNumber = phoneNumber
        }
    }

}

extension PinpointClientTypes.NumberValidateResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case carrier = "Carrier"
        case city = "City"
        case cleansedPhoneNumberE164 = "CleansedPhoneNumberE164"
        case cleansedPhoneNumberNational = "CleansedPhoneNumberNational"
        case country = "Country"
        case countryCodeIso2 = "CountryCodeIso2"
        case countryCodeNumeric = "CountryCodeNumeric"
        case county = "County"
        case originalCountryCodeIso2 = "OriginalCountryCodeIso2"
        case originalPhoneNumber = "OriginalPhoneNumber"
        case phoneType = "PhoneType"
        case phoneTypeCode = "PhoneTypeCode"
        case timezone = "Timezone"
        case zipCode = "ZipCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let carrier = self.carrier {
            try encodeContainer.encode(carrier, forKey: .carrier)
        }
        if let city = self.city {
            try encodeContainer.encode(city, forKey: .city)
        }
        if let cleansedPhoneNumberE164 = self.cleansedPhoneNumberE164 {
            try encodeContainer.encode(cleansedPhoneNumberE164, forKey: .cleansedPhoneNumberE164)
        }
        if let cleansedPhoneNumberNational = self.cleansedPhoneNumberNational {
            try encodeContainer.encode(cleansedPhoneNumberNational, forKey: .cleansedPhoneNumberNational)
        }
        if let country = self.country {
            try encodeContainer.encode(country, forKey: .country)
        }
        if let countryCodeIso2 = self.countryCodeIso2 {
            try encodeContainer.encode(countryCodeIso2, forKey: .countryCodeIso2)
        }
        if let countryCodeNumeric = self.countryCodeNumeric {
            try encodeContainer.encode(countryCodeNumeric, forKey: .countryCodeNumeric)
        }
        if let county = self.county {
            try encodeContainer.encode(county, forKey: .county)
        }
        if let originalCountryCodeIso2 = self.originalCountryCodeIso2 {
            try encodeContainer.encode(originalCountryCodeIso2, forKey: .originalCountryCodeIso2)
        }
        if let originalPhoneNumber = self.originalPhoneNumber {
            try encodeContainer.encode(originalPhoneNumber, forKey: .originalPhoneNumber)
        }
        if let phoneType = self.phoneType {
            try encodeContainer.encode(phoneType, forKey: .phoneType)
        }
        if let phoneTypeCode = self.phoneTypeCode {
            try encodeContainer.encode(phoneTypeCode, forKey: .phoneTypeCode)
        }
        if let timezone = self.timezone {
            try encodeContainer.encode(timezone, forKey: .timezone)
        }
        if let zipCode = self.zipCode {
            try encodeContainer.encode(zipCode, forKey: .zipCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let carrierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .carrier)
        carrier = carrierDecoded
        let cityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .city)
        city = cityDecoded
        let cleansedPhoneNumberE164Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cleansedPhoneNumberE164)
        cleansedPhoneNumberE164 = cleansedPhoneNumberE164Decoded
        let cleansedPhoneNumberNationalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cleansedPhoneNumberNational)
        cleansedPhoneNumberNational = cleansedPhoneNumberNationalDecoded
        let countryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .country)
        country = countryDecoded
        let countryCodeIso2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .countryCodeIso2)
        countryCodeIso2 = countryCodeIso2Decoded
        let countryCodeNumericDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .countryCodeNumeric)
        countryCodeNumeric = countryCodeNumericDecoded
        let countyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .county)
        county = countyDecoded
        let originalCountryCodeIso2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originalCountryCodeIso2)
        originalCountryCodeIso2 = originalCountryCodeIso2Decoded
        let originalPhoneNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originalPhoneNumber)
        originalPhoneNumber = originalPhoneNumberDecoded
        let phoneTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .phoneType)
        phoneType = phoneTypeDecoded
        let phoneTypeCodeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .phoneTypeCode)
        phoneTypeCode = phoneTypeCodeDecoded
        let timezoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timezone)
        timezone = timezoneDecoded
        let zipCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .zipCode)
        zipCode = zipCodeDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about a phone number.
    public struct NumberValidateResponse: Swift.Equatable {
        /// The carrier or service provider that the phone number is currently registered with. In some countries and regions, this value may be the carrier or service provider that the phone number was originally registered with.
        public var carrier: Swift.String?
        /// The name of the city where the phone number was originally registered.
        public var city: Swift.String?
        /// The cleansed phone number, in E.164 format, for the location where the phone number was originally registered.
        public var cleansedPhoneNumberE164: Swift.String?
        /// The cleansed phone number, in the format for the location where the phone number was originally registered.
        public var cleansedPhoneNumberNational: Swift.String?
        /// The name of the country or region where the phone number was originally registered.
        public var country: Swift.String?
        /// The two-character code, in ISO 3166-1 alpha-2 format, for the country or region where the phone number was originally registered.
        public var countryCodeIso2: Swift.String?
        /// The numeric code for the country or region where the phone number was originally registered.
        public var countryCodeNumeric: Swift.String?
        /// The name of the county where the phone number was originally registered.
        public var county: Swift.String?
        /// The two-character code, in ISO 3166-1 alpha-2 format, that was sent in the request body.
        public var originalCountryCodeIso2: Swift.String?
        /// The phone number that was sent in the request body.
        public var originalPhoneNumber: Swift.String?
        /// The description of the phone type. Valid values are: MOBILE, LANDLINE, VOIP, INVALID, PREPAID, and OTHER.
        public var phoneType: Swift.String?
        /// The phone type, represented by an integer. Valid values are: 0 (mobile), 1 (landline), 2 (VoIP), 3 (invalid), 4 (other), and 5 (prepaid).
        public var phoneTypeCode: Swift.Int?
        /// The time zone for the location where the phone number was originally registered.
        public var timezone: Swift.String?
        /// The postal or ZIP code for the location where the phone number was originally registered.
        public var zipCode: Swift.String?

        public init (
            carrier: Swift.String? = nil,
            city: Swift.String? = nil,
            cleansedPhoneNumberE164: Swift.String? = nil,
            cleansedPhoneNumberNational: Swift.String? = nil,
            country: Swift.String? = nil,
            countryCodeIso2: Swift.String? = nil,
            countryCodeNumeric: Swift.String? = nil,
            county: Swift.String? = nil,
            originalCountryCodeIso2: Swift.String? = nil,
            originalPhoneNumber: Swift.String? = nil,
            phoneType: Swift.String? = nil,
            phoneTypeCode: Swift.Int? = nil,
            timezone: Swift.String? = nil,
            zipCode: Swift.String? = nil
        )
        {
            self.carrier = carrier
            self.city = city
            self.cleansedPhoneNumberE164 = cleansedPhoneNumberE164
            self.cleansedPhoneNumberNational = cleansedPhoneNumberNational
            self.country = country
            self.countryCodeIso2 = countryCodeIso2
            self.countryCodeNumeric = countryCodeNumeric
            self.county = county
            self.originalCountryCodeIso2 = originalCountryCodeIso2
            self.originalPhoneNumber = originalPhoneNumber
            self.phoneType = phoneType
            self.phoneTypeCode = phoneTypeCode
            self.timezone = timezone
            self.zipCode = zipCode
        }
    }

}

extension PinpointClientTypes.OpenHours: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case custom = "CUSTOM"
        case email = "EMAIL"
        case push = "PUSH"
        case sms = "SMS"
        case voice = "VOICE"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let custom = custom {
            var customContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .custom)
            for (dictKey0, mapOfListOfOpenHoursRules0) in custom {
                var mapOfListOfOpenHoursRules0Container = customContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for openhoursrule1 in mapOfListOfOpenHoursRules0 {
                    try mapOfListOfOpenHoursRules0Container.encode(openhoursrule1)
                }
            }
        }
        if let email = email {
            var emailContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .email)
            for (dictKey0, mapOfListOfOpenHoursRules0) in email {
                var mapOfListOfOpenHoursRules0Container = emailContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for openhoursrule1 in mapOfListOfOpenHoursRules0 {
                    try mapOfListOfOpenHoursRules0Container.encode(openhoursrule1)
                }
            }
        }
        if let push = push {
            var pushContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .push)
            for (dictKey0, mapOfListOfOpenHoursRules0) in push {
                var mapOfListOfOpenHoursRules0Container = pushContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for openhoursrule1 in mapOfListOfOpenHoursRules0 {
                    try mapOfListOfOpenHoursRules0Container.encode(openhoursrule1)
                }
            }
        }
        if let sms = sms {
            var smsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .sms)
            for (dictKey0, mapOfListOfOpenHoursRules0) in sms {
                var mapOfListOfOpenHoursRules0Container = smsContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for openhoursrule1 in mapOfListOfOpenHoursRules0 {
                    try mapOfListOfOpenHoursRules0Container.encode(openhoursrule1)
                }
            }
        }
        if let voice = voice {
            var voiceContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .voice)
            for (dictKey0, mapOfListOfOpenHoursRules0) in voice {
                var mapOfListOfOpenHoursRules0Container = voiceContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for openhoursrule1 in mapOfListOfOpenHoursRules0 {
                    try mapOfListOfOpenHoursRules0Container.encode(openhoursrule1)
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailContainer = try containerValues.decodeIfPresent([Swift.String: [PinpointClientTypes.OpenHoursRule?]?].self, forKey: .email)
        var emailDecoded0: [Swift.String:[PinpointClientTypes.OpenHoursRule]]? = nil
        if let emailContainer = emailContainer {
            emailDecoded0 = [Swift.String:[PinpointClientTypes.OpenHoursRule]]()
            for (key0, listofopenhoursrules0) in emailContainer {
                var listofopenhoursrules0Decoded0: [PinpointClientTypes.OpenHoursRule]? = nil
                if let listofopenhoursrules0 = listofopenhoursrules0 {
                    listofopenhoursrules0Decoded0 = [PinpointClientTypes.OpenHoursRule]()
                    for structure1 in listofopenhoursrules0 {
                        if let structure1 = structure1 {
                            listofopenhoursrules0Decoded0?.append(structure1)
                        }
                    }
                }
                emailDecoded0?[key0] = listofopenhoursrules0Decoded0
            }
        }
        email = emailDecoded0
        let smsContainer = try containerValues.decodeIfPresent([Swift.String: [PinpointClientTypes.OpenHoursRule?]?].self, forKey: .sms)
        var smsDecoded0: [Swift.String:[PinpointClientTypes.OpenHoursRule]]? = nil
        if let smsContainer = smsContainer {
            smsDecoded0 = [Swift.String:[PinpointClientTypes.OpenHoursRule]]()
            for (key0, listofopenhoursrules0) in smsContainer {
                var listofopenhoursrules0Decoded0: [PinpointClientTypes.OpenHoursRule]? = nil
                if let listofopenhoursrules0 = listofopenhoursrules0 {
                    listofopenhoursrules0Decoded0 = [PinpointClientTypes.OpenHoursRule]()
                    for structure1 in listofopenhoursrules0 {
                        if let structure1 = structure1 {
                            listofopenhoursrules0Decoded0?.append(structure1)
                        }
                    }
                }
                smsDecoded0?[key0] = listofopenhoursrules0Decoded0
            }
        }
        sms = smsDecoded0
        let pushContainer = try containerValues.decodeIfPresent([Swift.String: [PinpointClientTypes.OpenHoursRule?]?].self, forKey: .push)
        var pushDecoded0: [Swift.String:[PinpointClientTypes.OpenHoursRule]]? = nil
        if let pushContainer = pushContainer {
            pushDecoded0 = [Swift.String:[PinpointClientTypes.OpenHoursRule]]()
            for (key0, listofopenhoursrules0) in pushContainer {
                var listofopenhoursrules0Decoded0: [PinpointClientTypes.OpenHoursRule]? = nil
                if let listofopenhoursrules0 = listofopenhoursrules0 {
                    listofopenhoursrules0Decoded0 = [PinpointClientTypes.OpenHoursRule]()
                    for structure1 in listofopenhoursrules0 {
                        if let structure1 = structure1 {
                            listofopenhoursrules0Decoded0?.append(structure1)
                        }
                    }
                }
                pushDecoded0?[key0] = listofopenhoursrules0Decoded0
            }
        }
        push = pushDecoded0
        let voiceContainer = try containerValues.decodeIfPresent([Swift.String: [PinpointClientTypes.OpenHoursRule?]?].self, forKey: .voice)
        var voiceDecoded0: [Swift.String:[PinpointClientTypes.OpenHoursRule]]? = nil
        if let voiceContainer = voiceContainer {
            voiceDecoded0 = [Swift.String:[PinpointClientTypes.OpenHoursRule]]()
            for (key0, listofopenhoursrules0) in voiceContainer {
                var listofopenhoursrules0Decoded0: [PinpointClientTypes.OpenHoursRule]? = nil
                if let listofopenhoursrules0 = listofopenhoursrules0 {
                    listofopenhoursrules0Decoded0 = [PinpointClientTypes.OpenHoursRule]()
                    for structure1 in listofopenhoursrules0 {
                        if let structure1 = structure1 {
                            listofopenhoursrules0Decoded0?.append(structure1)
                        }
                    }
                }
                voiceDecoded0?[key0] = listofopenhoursrules0Decoded0
            }
        }
        voice = voiceDecoded0
        let customContainer = try containerValues.decodeIfPresent([Swift.String: [PinpointClientTypes.OpenHoursRule?]?].self, forKey: .custom)
        var customDecoded0: [Swift.String:[PinpointClientTypes.OpenHoursRule]]? = nil
        if let customContainer = customContainer {
            customDecoded0 = [Swift.String:[PinpointClientTypes.OpenHoursRule]]()
            for (key0, listofopenhoursrules0) in customContainer {
                var listofopenhoursrules0Decoded0: [PinpointClientTypes.OpenHoursRule]? = nil
                if let listofopenhoursrules0 = listofopenhoursrules0 {
                    listofopenhoursrules0Decoded0 = [PinpointClientTypes.OpenHoursRule]()
                    for structure1 in listofopenhoursrules0 {
                        if let structure1 = structure1 {
                            listofopenhoursrules0Decoded0?.append(structure1)
                        }
                    }
                }
                customDecoded0?[key0] = listofopenhoursrules0Decoded0
            }
        }
        custom = customDecoded0
    }
}

extension PinpointClientTypes {
    /// The time when journey allow to send messages. QuietTime should be configured first and SendingSchedule should be set to true.
    public struct OpenHours: Swift.Equatable {
        /// Rules for Custom Channel.
        public var custom: [Swift.String:[PinpointClientTypes.OpenHoursRule]]?
        /// Rules for Email Channel.
        public var email: [Swift.String:[PinpointClientTypes.OpenHoursRule]]?
        /// Rules for Push Channel.
        public var push: [Swift.String:[PinpointClientTypes.OpenHoursRule]]?
        /// Rules for SMS Channel.
        public var sms: [Swift.String:[PinpointClientTypes.OpenHoursRule]]?
        /// Rules for Voice Channel.
        public var voice: [Swift.String:[PinpointClientTypes.OpenHoursRule]]?

        public init (
            custom: [Swift.String:[PinpointClientTypes.OpenHoursRule]]? = nil,
            email: [Swift.String:[PinpointClientTypes.OpenHoursRule]]? = nil,
            push: [Swift.String:[PinpointClientTypes.OpenHoursRule]]? = nil,
            sms: [Swift.String:[PinpointClientTypes.OpenHoursRule]]? = nil,
            voice: [Swift.String:[PinpointClientTypes.OpenHoursRule]]? = nil
        )
        {
            self.custom = custom
            self.email = email
            self.push = push
            self.sms = sms
            self.voice = voice
        }
    }

}

extension PinpointClientTypes.OpenHoursRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime, forKey: .endTime)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

extension PinpointClientTypes {
    /// List of OpenHours Rules.
    public struct OpenHoursRule: Swift.Equatable {
        /// Local start time in ISO 8601 format.
        public var endTime: Swift.String?
        /// Local start time in ISO 8601 format.
        public var startTime: Swift.String?

        public init (
            endTime: Swift.String? = nil,
            startTime: Swift.String? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
        }
    }

}

extension PinpointClientTypes {
    public enum Operator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case any
        case sdkUnknown(Swift.String)

        public static var allCases: [Operator] {
            return [
                .all,
                .any,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .any: return "ANY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Operator(rawValue: rawValue) ?? Operator.sdkUnknown(rawValue)
        }
    }
}

extension PinpointClientTypes.OverrideButtonConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buttonAction = "ButtonAction"
        case link = "Link"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let buttonAction = self.buttonAction {
            try encodeContainer.encode(buttonAction.rawValue, forKey: .buttonAction)
        }
        if let link = self.link {
            try encodeContainer.encode(link, forKey: .link)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buttonActionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ButtonAction.self, forKey: .buttonAction)
        buttonAction = buttonActionDecoded
        let linkDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .link)
        link = linkDecoded
    }
}

extension PinpointClientTypes {
    /// Override button configuration.
    public struct OverrideButtonConfiguration: Swift.Equatable {
        /// Action triggered by the button.
        /// This member is required.
        public var buttonAction: PinpointClientTypes.ButtonAction?
        /// Button destination.
        public var link: Swift.String?

        public init (
            buttonAction: PinpointClientTypes.ButtonAction? = nil,
            link: Swift.String? = nil
        )
        {
            self.buttonAction = buttonAction
            self.link = link
        }
    }

}

extension PayloadTooLargeException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PayloadTooLargeExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestID = output.requestID
        } else {
            self.message = nil
            self.requestID = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Provides information about an API request or response.
public struct PayloadTooLargeException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that's returned from the API.
    public var message: Swift.String?
    /// The unique identifier for the request or response.
    public var requestID: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestID: Swift.String? = nil
    )
    {
        self.message = message
        self.requestID = requestID
    }
}

struct PayloadTooLargeExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let requestID: Swift.String?
}

extension PayloadTooLargeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestID = "RequestID"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestID)
        requestID = requestIDDecoded
    }
}

public struct PhoneNumberValidateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PhoneNumberValidateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PhoneNumberValidateInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<PhoneNumberValidateOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let numberValidateRequest = input.operationInput.numberValidateRequest {
                let numberValidateRequestdata = try encoder.encode(numberValidateRequest)
                let numberValidateRequestbody = ClientRuntime.HttpBody.data(numberValidateRequestdata)
                input.builder.withBody(numberValidateRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let numberValidateRequestdata = "{}".data(using: .utf8)!
                    let numberValidateRequestbody = ClientRuntime.HttpBody.data(numberValidateRequestdata)
                    input.builder.withBody(numberValidateRequestbody)
                }
            }
        } catch let err {
            throw SdkError<PhoneNumberValidateOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PhoneNumberValidateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PhoneNumberValidateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension PhoneNumberValidateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case numberValidateRequest = "NumberValidateRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let numberValidateRequest = self.numberValidateRequest {
            try encodeContainer.encode(numberValidateRequest, forKey: .numberValidateRequest)
        }
    }
}

extension PhoneNumberValidateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/v1/phone/number/validate"
    }
}

public struct PhoneNumberValidateInput: Swift.Equatable {
    /// Specifies a phone number to validate and retrieve information about.
    /// This member is required.
    public var numberValidateRequest: PinpointClientTypes.NumberValidateRequest?

    public init (
        numberValidateRequest: PinpointClientTypes.NumberValidateRequest? = nil
    )
    {
        self.numberValidateRequest = numberValidateRequest
    }
}

struct PhoneNumberValidateInputBody: Swift.Equatable {
    let numberValidateRequest: PinpointClientTypes.NumberValidateRequest?
}

extension PhoneNumberValidateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case numberValidateRequest = "NumberValidateRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numberValidateRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.NumberValidateRequest.self, forKey: .numberValidateRequest)
        numberValidateRequest = numberValidateRequestDecoded
    }
}

extension PhoneNumberValidateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PhoneNumberValidateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PhoneNumberValidateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PhoneNumberValidateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.NumberValidateResponse = try responseDecoder.decode(responseBody: data)
                self.numberValidateResponse = output
            } else {
                self.numberValidateResponse = nil
            }
        } else {
            self.numberValidateResponse = nil
        }
    }
}

public struct PhoneNumberValidateOutputResponse: Swift.Equatable {
    /// Provides information about a phone number.
    /// This member is required.
    public var numberValidateResponse: PinpointClientTypes.NumberValidateResponse?

    public init (
        numberValidateResponse: PinpointClientTypes.NumberValidateResponse? = nil
    )
    {
        self.numberValidateResponse = numberValidateResponse
    }
}

struct PhoneNumberValidateOutputResponseBody: Swift.Equatable {
    let numberValidateResponse: PinpointClientTypes.NumberValidateResponse?
}

extension PhoneNumberValidateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case numberValidateResponse = "NumberValidateResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numberValidateResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.NumberValidateResponse.self, forKey: .numberValidateResponse)
        numberValidateResponse = numberValidateResponseDecoded
    }
}

extension PinpointClientTypes.PublicEndpoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address = "Address"
        case attributes = "Attributes"
        case channelType = "ChannelType"
        case demographic = "Demographic"
        case effectiveDate = "EffectiveDate"
        case endpointStatus = "EndpointStatus"
        case location = "Location"
        case metrics = "Metrics"
        case optOut = "OptOut"
        case requestId = "RequestId"
        case user = "User"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let address = self.address {
            try encodeContainer.encode(address, forKey: .address)
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, mapOfListOf__string0) in attributes {
                var mapOfListOf__string0Container = attributesContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for __string1 in mapOfListOf__string0 {
                    try mapOfListOf__string0Container.encode(__string1)
                }
            }
        }
        if let channelType = self.channelType {
            try encodeContainer.encode(channelType.rawValue, forKey: .channelType)
        }
        if let demographic = self.demographic {
            try encodeContainer.encode(demographic, forKey: .demographic)
        }
        if let effectiveDate = self.effectiveDate {
            try encodeContainer.encode(effectiveDate, forKey: .effectiveDate)
        }
        if let endpointStatus = self.endpointStatus {
            try encodeContainer.encode(endpointStatus, forKey: .endpointStatus)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let metrics = metrics {
            var metricsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .metrics)
            for (dictKey0, mapOf__double0) in metrics {
                try metricsContainer.encode(mapOf__double0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let optOut = self.optOut {
            try encodeContainer.encode(optOut, forKey: .optOut)
        }
        if let requestId = self.requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let user = self.user {
            try encodeContainer.encode(user, forKey: .user)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .address)
        address = addressDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:[Swift.String]]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listof__string0) in attributesContainer {
                var listof__string0Decoded0: [Swift.String]? = nil
                if let listof__string0 = listof__string0 {
                    listof__string0Decoded0 = [Swift.String]()
                    for string1 in listof__string0 {
                        if let string1 = string1 {
                            listof__string0Decoded0?.append(string1)
                        }
                    }
                }
                attributesDecoded0?[key0] = listof__string0Decoded0
            }
        }
        attributes = attributesDecoded0
        let channelTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ChannelType.self, forKey: .channelType)
        channelType = channelTypeDecoded
        let demographicDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EndpointDemographic.self, forKey: .demographic)
        demographic = demographicDecoded
        let effectiveDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .effectiveDate)
        effectiveDate = effectiveDateDecoded
        let endpointStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointStatus)
        endpointStatus = endpointStatusDecoded
        let locationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EndpointLocation.self, forKey: .location)
        location = locationDecoded
        let metricsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Double?].self, forKey: .metrics)
        var metricsDecoded0: [Swift.String:Swift.Double]? = nil
        if let metricsContainer = metricsContainer {
            metricsDecoded0 = [Swift.String:Swift.Double]()
            for (key0, __double0) in metricsContainer {
                if let __double0 = __double0 {
                    metricsDecoded0?[key0] = __double0
                }
            }
        }
        metrics = metricsDecoded0
        let optOutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .optOut)
        optOut = optOutDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let userDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EndpointUser.self, forKey: .user)
        user = userDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the properties and attributes of an endpoint that's associated with an event.
    public struct PublicEndpoint: Swift.Equatable {
        /// The unique identifier for the recipient, such as a device token, email address, or mobile phone number.
        public var address: Swift.String?
        /// One or more custom attributes that describe the endpoint by associating a name with an array of values. You can use these attributes as filter criteria when you create segments.
        public var attributes: [Swift.String:[Swift.String]]?
        /// The channel that's used when sending messages or push notifications to the endpoint.
        public var channelType: PinpointClientTypes.ChannelType?
        /// The demographic information for the endpoint, such as the time zone and platform.
        public var demographic: PinpointClientTypes.EndpointDemographic?
        /// The date and time, in ISO 8601 format, when the endpoint was last updated.
        public var effectiveDate: Swift.String?
        /// Specifies whether to send messages or push notifications to the endpoint. Valid values are: ACTIVE, messages are sent to the endpoint; and, INACTIVE, messages aren’t sent to the endpoint. Amazon Pinpoint automatically sets this value to ACTIVE when you create an endpoint or update an existing endpoint. Amazon Pinpoint automatically sets this value to INACTIVE if you update another endpoint that has the same address specified by the Address property.
        public var endpointStatus: Swift.String?
        /// The geographic information for the endpoint.
        public var location: PinpointClientTypes.EndpointLocation?
        /// One or more custom metrics that your app reports to Amazon Pinpoint for the endpoint.
        public var metrics: [Swift.String:Swift.Double]?
        /// Specifies whether the user who's associated with the endpoint has opted out of receiving messages and push notifications from you. Possible values are: ALL, the user has opted out and doesn't want to receive any messages or push notifications; and, NONE, the user hasn't opted out and wants to receive all messages and push notifications.
        public var optOut: Swift.String?
        /// A unique identifier that's generated each time the endpoint is updated.
        public var requestId: Swift.String?
        /// One or more custom user attributes that your app reports to Amazon Pinpoint for the user who's associated with the endpoint.
        public var user: PinpointClientTypes.EndpointUser?

        public init (
            address: Swift.String? = nil,
            attributes: [Swift.String:[Swift.String]]? = nil,
            channelType: PinpointClientTypes.ChannelType? = nil,
            demographic: PinpointClientTypes.EndpointDemographic? = nil,
            effectiveDate: Swift.String? = nil,
            endpointStatus: Swift.String? = nil,
            location: PinpointClientTypes.EndpointLocation? = nil,
            metrics: [Swift.String:Swift.Double]? = nil,
            optOut: Swift.String? = nil,
            requestId: Swift.String? = nil,
            user: PinpointClientTypes.EndpointUser? = nil
        )
        {
            self.address = address
            self.attributes = attributes
            self.channelType = channelType
            self.demographic = demographic
            self.effectiveDate = effectiveDate
            self.endpointStatus = endpointStatus
            self.location = location
            self.metrics = metrics
            self.optOut = optOut
            self.requestId = requestId
            self.user = user
        }
    }

}

extension PinpointClientTypes.PushMessageActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageConfig = "MessageConfig"
        case nextActivity = "NextActivity"
        case templateName = "TemplateName"
        case templateVersion = "TemplateVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let messageConfig = self.messageConfig {
            try encodeContainer.encode(messageConfig, forKey: .messageConfig)
        }
        if let nextActivity = self.nextActivity {
            try encodeContainer.encode(nextActivity, forKey: .nextActivity)
        }
        if let templateName = self.templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
        if let templateVersion = self.templateVersion {
            try encodeContainer.encode(templateVersion, forKey: .templateVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageConfigDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneyPushMessage.self, forKey: .messageConfig)
        messageConfig = messageConfigDecoded
        let nextActivityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextActivity)
        nextActivity = nextActivityDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let templateVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateVersion)
        templateVersion = templateVersionDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the settings for a push notification activity in a journey. This type of activity sends a push notification to participants.
    public struct PushMessageActivity: Swift.Equatable {
        /// Specifies the time to live (TTL) value for push notifications that are sent to participants in a journey.
        public var messageConfig: PinpointClientTypes.JourneyPushMessage?
        /// The unique identifier for the next activity to perform, after the message is sent.
        public var nextActivity: Swift.String?
        /// The name of the push notification template to use for the message. If specified, this value must match the name of an existing message template.
        public var templateName: Swift.String?
        /// The unique identifier for the version of the push notification template to use for the message. If specified, this value must match the identifier for an existing template version. To retrieve a list of versions and version identifiers for a template, use the Template Versions resource. If you don't specify a value for this property, Amazon Pinpoint uses the active version of the template. The active version is typically the version of a template that's been most recently reviewed and approved for use, depending on your workflow. It isn't necessarily the latest version of a template.
        public var templateVersion: Swift.String?

        public init (
            messageConfig: PinpointClientTypes.JourneyPushMessage? = nil,
            nextActivity: Swift.String? = nil,
            templateName: Swift.String? = nil,
            templateVersion: Swift.String? = nil
        )
        {
            self.messageConfig = messageConfig
            self.nextActivity = nextActivity
            self.templateName = templateName
            self.templateVersion = templateVersion
        }
    }

}

extension PinpointClientTypes.PushNotificationTemplateRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adm = "ADM"
        case apns = "APNS"
        case baidu = "Baidu"
        case `default` = "Default"
        case defaultSubstitutions = "DefaultSubstitutions"
        case gcm = "GCM"
        case recommenderId = "RecommenderId"
        case templateDescription = "TemplateDescription"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adm = self.adm {
            try encodeContainer.encode(adm, forKey: .adm)
        }
        if let apns = self.apns {
            try encodeContainer.encode(apns, forKey: .apns)
        }
        if let baidu = self.baidu {
            try encodeContainer.encode(baidu, forKey: .baidu)
        }
        if let `default` = self.`default` {
            try encodeContainer.encode(`default`, forKey: .`default`)
        }
        if let defaultSubstitutions = self.defaultSubstitutions {
            try encodeContainer.encode(defaultSubstitutions, forKey: .defaultSubstitutions)
        }
        if let gcm = self.gcm {
            try encodeContainer.encode(gcm, forKey: .gcm)
        }
        if let recommenderId = self.recommenderId {
            try encodeContainer.encode(recommenderId, forKey: .recommenderId)
        }
        if let templateDescription = self.templateDescription {
            try encodeContainer.encode(templateDescription, forKey: .templateDescription)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapOf__string0) in tags {
                try tagsContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let admDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.AndroidPushNotificationTemplate.self, forKey: .adm)
        adm = admDecoded
        let apnsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.APNSPushNotificationTemplate.self, forKey: .apns)
        apns = apnsDecoded
        let baiduDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.AndroidPushNotificationTemplate.self, forKey: .baidu)
        baidu = baiduDecoded
        let defaultDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.DefaultPushNotificationTemplate.self, forKey: .default)
        `default` = defaultDecoded
        let defaultSubstitutionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultSubstitutions)
        defaultSubstitutions = defaultSubstitutionsDecoded
        let gcmDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.AndroidPushNotificationTemplate.self, forKey: .gcm)
        gcm = gcmDecoded
        let recommenderIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommenderId)
        recommenderId = recommenderIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let templateDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateDescription)
        templateDescription = templateDescriptionDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the content and settings for a message template that can be used in messages that are sent through a push notification channel.
    public struct PushNotificationTemplateRequest: Swift.Equatable {
        /// The message template to use for the ADM (Amazon Device Messaging) channel. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).
        public var adm: PinpointClientTypes.AndroidPushNotificationTemplate?
        /// The message template to use for the APNs (Apple Push Notification service) channel. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).
        public var apns: PinpointClientTypes.APNSPushNotificationTemplate?
        /// The message template to use for the Baidu (Baidu Cloud Push) channel. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).
        public var baidu: PinpointClientTypes.AndroidPushNotificationTemplate?
        /// The default message template to use for push notification channels.
        public var `default`: PinpointClientTypes.DefaultPushNotificationTemplate?
        /// A JSON object that specifies the default values to use for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable. When you create a message that's based on the template, you can override these defaults with message-specific and address-specific variables and values.
        public var defaultSubstitutions: Swift.String?
        /// The message template to use for the GCM channel, which is used to send notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).
        public var gcm: PinpointClientTypes.AndroidPushNotificationTemplate?
        /// The unique identifier for the recommender model to use for the message template. Amazon Pinpoint uses this value to determine how to retrieve and process data from a recommender model when it sends messages that use the template, if the template contains message variables for recommendation data.
        public var recommenderId: Swift.String?
        /// A string-to-string map of key-value pairs that defines the tags to associate with the message template. Each tag consists of a required tag key and an associated tag value.
        public var tags: [Swift.String:Swift.String]?
        /// A custom description of the message template.
        public var templateDescription: Swift.String?

        public init (
            adm: PinpointClientTypes.AndroidPushNotificationTemplate? = nil,
            apns: PinpointClientTypes.APNSPushNotificationTemplate? = nil,
            baidu: PinpointClientTypes.AndroidPushNotificationTemplate? = nil,
            `default`: PinpointClientTypes.DefaultPushNotificationTemplate? = nil,
            defaultSubstitutions: Swift.String? = nil,
            gcm: PinpointClientTypes.AndroidPushNotificationTemplate? = nil,
            recommenderId: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            templateDescription: Swift.String? = nil
        )
        {
            self.adm = adm
            self.apns = apns
            self.baidu = baidu
            self.`default` = `default`
            self.defaultSubstitutions = defaultSubstitutions
            self.gcm = gcm
            self.recommenderId = recommenderId
            self.tags = tags
            self.templateDescription = templateDescription
        }
    }

}

extension PinpointClientTypes.PushNotificationTemplateResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adm = "ADM"
        case apns = "APNS"
        case arn = "Arn"
        case baidu = "Baidu"
        case creationDate = "CreationDate"
        case `default` = "Default"
        case defaultSubstitutions = "DefaultSubstitutions"
        case gcm = "GCM"
        case lastModifiedDate = "LastModifiedDate"
        case recommenderId = "RecommenderId"
        case templateDescription = "TemplateDescription"
        case templateName = "TemplateName"
        case templateType = "TemplateType"
        case version = "Version"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adm = self.adm {
            try encodeContainer.encode(adm, forKey: .adm)
        }
        if let apns = self.apns {
            try encodeContainer.encode(apns, forKey: .apns)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let baidu = self.baidu {
            try encodeContainer.encode(baidu, forKey: .baidu)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let `default` = self.`default` {
            try encodeContainer.encode(`default`, forKey: .`default`)
        }
        if let defaultSubstitutions = self.defaultSubstitutions {
            try encodeContainer.encode(defaultSubstitutions, forKey: .defaultSubstitutions)
        }
        if let gcm = self.gcm {
            try encodeContainer.encode(gcm, forKey: .gcm)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let recommenderId = self.recommenderId {
            try encodeContainer.encode(recommenderId, forKey: .recommenderId)
        }
        if let templateDescription = self.templateDescription {
            try encodeContainer.encode(templateDescription, forKey: .templateDescription)
        }
        if let templateName = self.templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
        if let templateType = self.templateType {
            try encodeContainer.encode(templateType.rawValue, forKey: .templateType)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapOf__string0) in tags {
                try tagsContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let admDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.AndroidPushNotificationTemplate.self, forKey: .adm)
        adm = admDecoded
        let apnsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.APNSPushNotificationTemplate.self, forKey: .apns)
        apns = apnsDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let baiduDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.AndroidPushNotificationTemplate.self, forKey: .baidu)
        baidu = baiduDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let defaultDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.DefaultPushNotificationTemplate.self, forKey: .default)
        `default` = defaultDecoded
        let defaultSubstitutionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultSubstitutions)
        defaultSubstitutions = defaultSubstitutionsDecoded
        let gcmDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.AndroidPushNotificationTemplate.self, forKey: .gcm)
        gcm = gcmDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let recommenderIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommenderId)
        recommenderId = recommenderIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let templateDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateDescription)
        templateDescription = templateDescriptionDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let templateTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.TemplateType.self, forKey: .templateType)
        templateType = templateTypeDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the content and settings for a message template that can be used in messages that are sent through a push notification channel.
    public struct PushNotificationTemplateResponse: Swift.Equatable {
        /// The message template that's used for the ADM (Amazon Device Messaging) channel. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).
        public var adm: PinpointClientTypes.AndroidPushNotificationTemplate?
        /// The message template that's used for the APNs (Apple Push Notification service) channel. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).
        public var apns: PinpointClientTypes.APNSPushNotificationTemplate?
        /// The Amazon Resource Name (ARN) of the message template.
        public var arn: Swift.String?
        /// The message template that's used for the Baidu (Baidu Cloud Push) channel. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).
        public var baidu: PinpointClientTypes.AndroidPushNotificationTemplate?
        /// The date, in ISO 8601 format, when the message template was created.
        /// This member is required.
        public var creationDate: Swift.String?
        /// The default message template that's used for push notification channels.
        public var `default`: PinpointClientTypes.DefaultPushNotificationTemplate?
        /// The JSON object that specifies the default values that are used for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable.
        public var defaultSubstitutions: Swift.String?
        /// The message template that's used for the GCM channel, which is used to send notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).
        public var gcm: PinpointClientTypes.AndroidPushNotificationTemplate?
        /// The date, in ISO 8601 format, when the message template was last modified.
        /// This member is required.
        public var lastModifiedDate: Swift.String?
        /// The unique identifier for the recommender model that's used by the message template.
        public var recommenderId: Swift.String?
        /// A string-to-string map of key-value pairs that identifies the tags that are associated with the message template. Each tag consists of a required tag key and an associated tag value.
        public var tags: [Swift.String:Swift.String]?
        /// The custom description of the message template.
        public var templateDescription: Swift.String?
        /// The name of the message template.
        /// This member is required.
        public var templateName: Swift.String?
        /// The type of channel that the message template is designed for. For a push notification template, this value is PUSH.
        /// This member is required.
        public var templateType: PinpointClientTypes.TemplateType?
        /// The unique identifier, as an integer, for the active version of the message template, or the version of the template that you specified by using the version parameter in your request.
        public var version: Swift.String?

        public init (
            adm: PinpointClientTypes.AndroidPushNotificationTemplate? = nil,
            apns: PinpointClientTypes.APNSPushNotificationTemplate? = nil,
            arn: Swift.String? = nil,
            baidu: PinpointClientTypes.AndroidPushNotificationTemplate? = nil,
            creationDate: Swift.String? = nil,
            `default`: PinpointClientTypes.DefaultPushNotificationTemplate? = nil,
            defaultSubstitutions: Swift.String? = nil,
            gcm: PinpointClientTypes.AndroidPushNotificationTemplate? = nil,
            lastModifiedDate: Swift.String? = nil,
            recommenderId: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            templateDescription: Swift.String? = nil,
            templateName: Swift.String? = nil,
            templateType: PinpointClientTypes.TemplateType? = nil,
            version: Swift.String? = nil
        )
        {
            self.adm = adm
            self.apns = apns
            self.arn = arn
            self.baidu = baidu
            self.creationDate = creationDate
            self.`default` = `default`
            self.defaultSubstitutions = defaultSubstitutions
            self.gcm = gcm
            self.lastModifiedDate = lastModifiedDate
            self.recommenderId = recommenderId
            self.tags = tags
            self.templateDescription = templateDescription
            self.templateName = templateName
            self.templateType = templateType
            self.version = version
        }
    }

}

public struct PutEventStreamInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutEventStreamInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutEventStreamInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<PutEventStreamOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let writeEventStream = input.operationInput.writeEventStream {
                let writeEventStreamdata = try encoder.encode(writeEventStream)
                let writeEventStreambody = ClientRuntime.HttpBody.data(writeEventStreamdata)
                input.builder.withBody(writeEventStreambody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let writeEventStreamdata = "{}".data(using: .utf8)!
                    let writeEventStreambody = ClientRuntime.HttpBody.data(writeEventStreamdata)
                    input.builder.withBody(writeEventStreambody)
                }
            }
        } catch let err {
            throw SdkError<PutEventStreamOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutEventStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutEventStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension PutEventStreamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case writeEventStream = "WriteEventStream"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let writeEventStream = self.writeEventStream {
            try encodeContainer.encode(writeEventStream, forKey: .writeEventStream)
        }
    }
}

extension PutEventStreamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/eventstream"
    }
}

public struct PutEventStreamInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// Specifies the Amazon Resource Name (ARN) of an event stream to publish events to and the AWS Identity and Access Management (IAM) role to use when publishing those events.
    /// This member is required.
    public var writeEventStream: PinpointClientTypes.WriteEventStream?

    public init (
        applicationId: Swift.String? = nil,
        writeEventStream: PinpointClientTypes.WriteEventStream? = nil
    )
    {
        self.applicationId = applicationId
        self.writeEventStream = writeEventStream
    }
}

struct PutEventStreamInputBody: Swift.Equatable {
    let writeEventStream: PinpointClientTypes.WriteEventStream?
}

extension PutEventStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case writeEventStream = "WriteEventStream"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let writeEventStreamDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.WriteEventStream.self, forKey: .writeEventStream)
        writeEventStream = writeEventStreamDecoded
    }
}

extension PutEventStreamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutEventStreamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutEventStreamOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutEventStreamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.EventStream = try responseDecoder.decode(responseBody: data)
                self.eventStream = output
            } else {
                self.eventStream = nil
            }
        } else {
            self.eventStream = nil
        }
    }
}

public struct PutEventStreamOutputResponse: Swift.Equatable {
    /// Specifies settings for publishing event data to an Amazon Kinesis data stream or an Amazon Kinesis Data Firehose delivery stream.
    /// This member is required.
    public var eventStream: PinpointClientTypes.EventStream?

    public init (
        eventStream: PinpointClientTypes.EventStream? = nil
    )
    {
        self.eventStream = eventStream
    }
}

struct PutEventStreamOutputResponseBody: Swift.Equatable {
    let eventStream: PinpointClientTypes.EventStream?
}

extension PutEventStreamOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventStream = "EventStream"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventStreamDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EventStream.self, forKey: .eventStream)
        eventStream = eventStreamDecoded
    }
}

public struct PutEventsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutEventsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutEventsInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<PutEventsOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let eventsRequest = input.operationInput.eventsRequest {
                let eventsRequestdata = try encoder.encode(eventsRequest)
                let eventsRequestbody = ClientRuntime.HttpBody.data(eventsRequestdata)
                input.builder.withBody(eventsRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let eventsRequestdata = "{}".data(using: .utf8)!
                    let eventsRequestbody = ClientRuntime.HttpBody.data(eventsRequestdata)
                    input.builder.withBody(eventsRequestbody)
                }
            }
        } catch let err {
            throw SdkError<PutEventsOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutEventsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension PutEventsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventsRequest = "EventsRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventsRequest = self.eventsRequest {
            try encodeContainer.encode(eventsRequest, forKey: .eventsRequest)
        }
    }
}

extension PutEventsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/events"
    }
}

public struct PutEventsInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// Specifies a batch of events to process.
    /// This member is required.
    public var eventsRequest: PinpointClientTypes.EventsRequest?

    public init (
        applicationId: Swift.String? = nil,
        eventsRequest: PinpointClientTypes.EventsRequest? = nil
    )
    {
        self.applicationId = applicationId
        self.eventsRequest = eventsRequest
    }
}

struct PutEventsInputBody: Swift.Equatable {
    let eventsRequest: PinpointClientTypes.EventsRequest?
}

extension PutEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventsRequest = "EventsRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventsRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EventsRequest.self, forKey: .eventsRequest)
        eventsRequest = eventsRequestDecoded
    }
}

extension PutEventsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutEventsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutEventsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutEventsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.EventsResponse = try responseDecoder.decode(responseBody: data)
                self.eventsResponse = output
            } else {
                self.eventsResponse = nil
            }
        } else {
            self.eventsResponse = nil
        }
    }
}

public struct PutEventsOutputResponse: Swift.Equatable {
    /// Provides information about endpoints and the events that they're associated with.
    /// This member is required.
    public var eventsResponse: PinpointClientTypes.EventsResponse?

    public init (
        eventsResponse: PinpointClientTypes.EventsResponse? = nil
    )
    {
        self.eventsResponse = eventsResponse
    }
}

struct PutEventsOutputResponseBody: Swift.Equatable {
    let eventsResponse: PinpointClientTypes.EventsResponse?
}

extension PutEventsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventsResponse = "EventsResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventsResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EventsResponse.self, forKey: .eventsResponse)
        eventsResponse = eventsResponseDecoded
    }
}

extension PinpointClientTypes.QuietTime: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case end = "End"
        case start = "Start"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let end = self.end {
            try encodeContainer.encode(end, forKey: .end)
        }
        if let start = self.start {
            try encodeContainer.encode(start, forKey: .start)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .end)
        end = endDecoded
        let startDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .start)
        start = startDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the start and end times that define a time range when messages aren't sent to endpoints.
    public struct QuietTime: Swift.Equatable {
        /// The specific time when quiet time ends. This value has to use 24-hour notation and be in HH:MM format, where HH is the hour (with a leading zero, if applicable) and MM is the minutes. For example, use 02:30 to represent 2:30 AM, or 14:30 to represent 2:30 PM.
        public var end: Swift.String?
        /// The specific time when quiet time begins. This value has to use 24-hour notation and be in HH:MM format, where HH is the hour (with a leading zero, if applicable) and MM is the minutes. For example, use 02:30 to represent 2:30 AM, or 14:30 to represent 2:30 PM.
        public var start: Swift.String?

        public init (
            end: Swift.String? = nil,
            start: Swift.String? = nil
        )
        {
            self.end = end
            self.start = start
        }
    }

}

extension PinpointClientTypes.RandomSplitActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case branches = "Branches"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let branches = branches {
            var branchesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .branches)
            for randomsplitentry0 in branches {
                try branchesContainer.encode(randomsplitentry0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let branchesContainer = try containerValues.decodeIfPresent([PinpointClientTypes.RandomSplitEntry?].self, forKey: .branches)
        var branchesDecoded0:[PinpointClientTypes.RandomSplitEntry]? = nil
        if let branchesContainer = branchesContainer {
            branchesDecoded0 = [PinpointClientTypes.RandomSplitEntry]()
            for structure0 in branchesContainer {
                if let structure0 = structure0 {
                    branchesDecoded0?.append(structure0)
                }
            }
        }
        branches = branchesDecoded0
    }
}

extension PinpointClientTypes {
    /// Specifies the settings for a random split activity in a journey. This type of activity randomly sends specified percentages of participants down one of as many as five paths in a journey, based on conditions that you specify.
    public struct RandomSplitActivity: Swift.Equatable {
        /// The paths for the activity, including the percentage of participants to enter each path and the activity to perform for each path.
        public var branches: [PinpointClientTypes.RandomSplitEntry]?

        public init (
            branches: [PinpointClientTypes.RandomSplitEntry]? = nil
        )
        {
            self.branches = branches
        }
    }

}

extension PinpointClientTypes.RandomSplitEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextActivity = "NextActivity"
        case percentage = "Percentage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextActivity = self.nextActivity {
            try encodeContainer.encode(nextActivity, forKey: .nextActivity)
        }
        if let percentage = self.percentage {
            try encodeContainer.encode(percentage, forKey: .percentage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextActivityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextActivity)
        nextActivity = nextActivityDecoded
        let percentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .percentage)
        percentage = percentageDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the settings for a path in a random split activity in a journey.
    public struct RandomSplitEntry: Swift.Equatable {
        /// The unique identifier for the next activity to perform, after completing the activity for the path.
        public var nextActivity: Swift.String?
        /// The percentage of participants to send down the activity path. To determine which participants are sent down each path, Amazon Pinpoint applies a probability-based algorithm to the percentages that you specify for the paths. Therefore, the actual percentage of participants who are sent down a path may not be equal to the percentage that you specify.
        public var percentage: Swift.Int?

        public init (
            nextActivity: Swift.String? = nil,
            percentage: Swift.Int? = nil
        )
        {
            self.nextActivity = nextActivity
            self.percentage = percentage
        }
    }

}

extension PinpointClientTypes.RawEmail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case data = "Data"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let data = self.data {
            try encodeContainer.encode(data.base64EncodedString(), forKey: .data)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .data)
        data = dataDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the contents of an email message, represented as a raw MIME message.
    public struct RawEmail: Swift.Equatable {
        /// The email message, represented as a raw MIME message. The entire message must be base64 encoded.
        public var data: ClientRuntime.Data?

        public init (
            data: ClientRuntime.Data? = nil
        )
        {
            self.data = data
        }
    }

}

extension PinpointClientTypes.RecencyDimension: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case duration = "Duration"
        case recencyType = "RecencyType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let duration = self.duration {
            try encodeContainer.encode(duration.rawValue, forKey: .duration)
        }
        if let recencyType = self.recencyType {
            try encodeContainer.encode(recencyType.rawValue, forKey: .recencyType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let durationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Duration.self, forKey: .duration)
        duration = durationDecoded
        let recencyTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.RecencyType.self, forKey: .recencyType)
        recencyType = recencyTypeDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies criteria for including or excluding endpoints from a segment based on how recently an endpoint was active.
    public struct RecencyDimension: Swift.Equatable {
        /// The duration to use when determining whether an endpoint is active or inactive.
        /// This member is required.
        public var duration: PinpointClientTypes.Duration?
        /// The type of recency dimension to use for the segment. Valid values are: ACTIVE, endpoints that were active within the specified duration are included in the segment; and, INACTIVE, endpoints that weren't active within the specified duration are included in the segment.
        /// This member is required.
        public var recencyType: PinpointClientTypes.RecencyType?

        public init (
            duration: PinpointClientTypes.Duration? = nil,
            recencyType: PinpointClientTypes.RecencyType? = nil
        )
        {
            self.duration = duration
            self.recencyType = recencyType
        }
    }

}

extension PinpointClientTypes {
    public enum RecencyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [RecencyType] {
            return [
                .active,
                .inactive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecencyType(rawValue: rawValue) ?? RecencyType.sdkUnknown(rawValue)
        }
    }
}

extension PinpointClientTypes.RecommenderConfigurationResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case creationDate = "CreationDate"
        case description = "Description"
        case id = "Id"
        case lastModifiedDate = "LastModifiedDate"
        case name = "Name"
        case recommendationProviderIdType = "RecommendationProviderIdType"
        case recommendationProviderRoleArn = "RecommendationProviderRoleArn"
        case recommendationProviderUri = "RecommendationProviderUri"
        case recommendationTransformerUri = "RecommendationTransformerUri"
        case recommendationsDisplayName = "RecommendationsDisplayName"
        case recommendationsPerMessage = "RecommendationsPerMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, mapOf__string0) in attributes {
                try attributesContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let recommendationProviderIdType = self.recommendationProviderIdType {
            try encodeContainer.encode(recommendationProviderIdType, forKey: .recommendationProviderIdType)
        }
        if let recommendationProviderRoleArn = self.recommendationProviderRoleArn {
            try encodeContainer.encode(recommendationProviderRoleArn, forKey: .recommendationProviderRoleArn)
        }
        if let recommendationProviderUri = self.recommendationProviderUri {
            try encodeContainer.encode(recommendationProviderUri, forKey: .recommendationProviderUri)
        }
        if let recommendationTransformerUri = self.recommendationTransformerUri {
            try encodeContainer.encode(recommendationTransformerUri, forKey: .recommendationTransformerUri)
        }
        if let recommendationsDisplayName = self.recommendationsDisplayName {
            try encodeContainer.encode(recommendationsDisplayName, forKey: .recommendationsDisplayName)
        }
        if let recommendationsPerMessage = self.recommendationsPerMessage {
            try encodeContainer.encode(recommendationsPerMessage, forKey: .recommendationsPerMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in attributesContainer {
                if let __string0 = __string0 {
                    attributesDecoded0?[key0] = __string0
                }
            }
        }
        attributes = attributesDecoded0
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let recommendationProviderIdTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationProviderIdType)
        recommendationProviderIdType = recommendationProviderIdTypeDecoded
        let recommendationProviderRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationProviderRoleArn)
        recommendationProviderRoleArn = recommendationProviderRoleArnDecoded
        let recommendationProviderUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationProviderUri)
        recommendationProviderUri = recommendationProviderUriDecoded
        let recommendationTransformerUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationTransformerUri)
        recommendationTransformerUri = recommendationTransformerUriDecoded
        let recommendationsDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationsDisplayName)
        recommendationsDisplayName = recommendationsDisplayNameDecoded
        let recommendationsPerMessageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .recommendationsPerMessage)
        recommendationsPerMessage = recommendationsPerMessageDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about Amazon Pinpoint configuration settings for retrieving and processing data from a recommender model.
    public struct RecommenderConfigurationResponse: Swift.Equatable {
        /// A map that defines 1-10 custom endpoint or user attributes, depending on the value for the RecommendationProviderIdType property. Each of these attributes temporarily stores a recommended item that's retrieved from the recommender model and sent to an AWS Lambda function for additional processing. Each attribute can be used as a message variable in a message template. This value is null if the configuration doesn't invoke an AWS Lambda function (RecommendationTransformerUri) to perform additional processing of recommendation data.
        public var attributes: [Swift.String:Swift.String]?
        /// The date, in extended ISO 8601 format, when the configuration was created for the recommender model.
        /// This member is required.
        public var creationDate: Swift.String?
        /// The custom description of the configuration for the recommender model.
        public var description: Swift.String?
        /// The unique identifier for the recommender model configuration.
        /// This member is required.
        public var id: Swift.String?
        /// The date, in extended ISO 8601 format, when the configuration for the recommender model was last modified.
        /// This member is required.
        public var lastModifiedDate: Swift.String?
        /// The custom name of the configuration for the recommender model.
        public var name: Swift.String?
        /// The type of Amazon Pinpoint ID that's associated with unique user IDs in the recommender model. This value enables the model to use attribute and event data that’s specific to a particular endpoint or user in an Amazon Pinpoint application. Possible values are:
        ///
        /// * PINPOINT_ENDPOINT_ID - Each user in the model is associated with a particular endpoint in Amazon Pinpoint. The data is correlated based on endpoint IDs in Amazon Pinpoint. This is the default value.
        ///
        /// * PINPOINT_USER_ID - Each user in the model is associated with a particular user and endpoint in Amazon Pinpoint. The data is correlated based on user IDs in Amazon Pinpoint. If this value is specified, an endpoint definition in Amazon Pinpoint has to specify both a user ID (UserId) and an endpoint ID. Otherwise, messages won’t be sent to the user's endpoint.
        public var recommendationProviderIdType: Swift.String?
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon Pinpoint to retrieve recommendation data from the recommender model.
        /// This member is required.
        public var recommendationProviderRoleArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the recommender model that Amazon Pinpoint retrieves the recommendation data from. This value is the ARN of an Amazon Personalize campaign.
        /// This member is required.
        public var recommendationProviderUri: Swift.String?
        /// The name or Amazon Resource Name (ARN) of the AWS Lambda function that Amazon Pinpoint invokes to perform additional processing of recommendation data that it retrieves from the recommender model.
        public var recommendationTransformerUri: Swift.String?
        /// The custom display name for the standard endpoint or user attribute (RecommendationItems) that temporarily stores recommended items for each endpoint or user, depending on the value for the RecommendationProviderIdType property. This name appears in the Attribute finder of the template editor on the Amazon Pinpoint console. This value is null if the configuration doesn't invoke an AWS Lambda function (RecommendationTransformerUri) to perform additional processing of recommendation data.
        public var recommendationsDisplayName: Swift.String?
        /// The number of recommended items that are retrieved from the model for each endpoint or user, depending on the value for the RecommendationProviderIdType property. This number determines how many recommended items are available for use in message variables.
        public var recommendationsPerMessage: Swift.Int?

        public init (
            attributes: [Swift.String:Swift.String]? = nil,
            creationDate: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            lastModifiedDate: Swift.String? = nil,
            name: Swift.String? = nil,
            recommendationProviderIdType: Swift.String? = nil,
            recommendationProviderRoleArn: Swift.String? = nil,
            recommendationProviderUri: Swift.String? = nil,
            recommendationTransformerUri: Swift.String? = nil,
            recommendationsDisplayName: Swift.String? = nil,
            recommendationsPerMessage: Swift.Int? = nil
        )
        {
            self.attributes = attributes
            self.creationDate = creationDate
            self.description = description
            self.id = id
            self.lastModifiedDate = lastModifiedDate
            self.name = name
            self.recommendationProviderIdType = recommendationProviderIdType
            self.recommendationProviderRoleArn = recommendationProviderRoleArn
            self.recommendationProviderUri = recommendationProviderUri
            self.recommendationTransformerUri = recommendationTransformerUri
            self.recommendationsDisplayName = recommendationsDisplayName
            self.recommendationsPerMessage = recommendationsPerMessage
        }
    }

}

public struct RemoveAttributesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveAttributesInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<RemoveAttributesOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let updateAttributesRequest = input.operationInput.updateAttributesRequest {
                let updateAttributesRequestdata = try encoder.encode(updateAttributesRequest)
                let updateAttributesRequestbody = ClientRuntime.HttpBody.data(updateAttributesRequestdata)
                input.builder.withBody(updateAttributesRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let updateAttributesRequestdata = "{}".data(using: .utf8)!
                    let updateAttributesRequestbody = ClientRuntime.HttpBody.data(updateAttributesRequestdata)
                    input.builder.withBody(updateAttributesRequestbody)
                }
            }
        } catch let err {
            throw SdkError<RemoveAttributesOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension RemoveAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case updateAttributesRequest = "UpdateAttributesRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let updateAttributesRequest = self.updateAttributesRequest {
            try encodeContainer.encode(updateAttributesRequest, forKey: .updateAttributesRequest)
        }
    }
}

extension RemoveAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let attributeType = attributeType else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/attributes/\(attributeType.urlPercentEncoding())"
    }
}

public struct RemoveAttributesInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The type of attribute or attributes to remove. Valid values are:
    ///
    /// * endpoint-custom-attributes - Custom attributes that describe endpoints, such as the date when an associated user opted in or out of receiving communications from you through a specific type of channel.
    ///
    /// * endpoint-metric-attributes - Custom metrics that your app reports to Amazon Pinpoint for endpoints, such as the number of app sessions or the number of items left in a cart.
    ///
    /// * endpoint-user-attributes - Custom attributes that describe users, such as first name, last name, and age.
    /// This member is required.
    public var attributeType: Swift.String?
    /// Specifies one or more attributes to remove from all the endpoints that are associated with an application.
    /// This member is required.
    public var updateAttributesRequest: PinpointClientTypes.UpdateAttributesRequest?

    public init (
        applicationId: Swift.String? = nil,
        attributeType: Swift.String? = nil,
        updateAttributesRequest: PinpointClientTypes.UpdateAttributesRequest? = nil
    )
    {
        self.applicationId = applicationId
        self.attributeType = attributeType
        self.updateAttributesRequest = updateAttributesRequest
    }
}

struct RemoveAttributesInputBody: Swift.Equatable {
    let updateAttributesRequest: PinpointClientTypes.UpdateAttributesRequest?
}

extension RemoveAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case updateAttributesRequest = "UpdateAttributesRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateAttributesRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.UpdateAttributesRequest.self, forKey: .updateAttributesRequest)
        updateAttributesRequest = updateAttributesRequestDecoded
    }
}

extension RemoveAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RemoveAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.AttributesResource = try responseDecoder.decode(responseBody: data)
                self.attributesResource = output
            } else {
                self.attributesResource = nil
            }
        } else {
            self.attributesResource = nil
        }
    }
}

public struct RemoveAttributesOutputResponse: Swift.Equatable {
    /// Provides information about the type and the names of attributes that were removed from all the endpoints that are associated with an application.
    /// This member is required.
    public var attributesResource: PinpointClientTypes.AttributesResource?

    public init (
        attributesResource: PinpointClientTypes.AttributesResource? = nil
    )
    {
        self.attributesResource = attributesResource
    }
}

struct RemoveAttributesOutputResponseBody: Swift.Equatable {
    let attributesResource: PinpointClientTypes.AttributesResource?
}

extension RemoveAttributesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesResource = "AttributesResource"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributesResourceDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.AttributesResource.self, forKey: .attributesResource)
        attributesResource = attributesResourceDecoded
    }
}

extension PinpointClientTypes.ResultRow: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupedBys = "GroupedBys"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupedBys = groupedBys {
            var groupedBysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groupedBys)
            for resultrowvalue0 in groupedBys {
                try groupedBysContainer.encode(resultrowvalue0)
            }
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for resultrowvalue0 in values {
                try valuesContainer.encode(resultrowvalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupedBysContainer = try containerValues.decodeIfPresent([PinpointClientTypes.ResultRowValue?].self, forKey: .groupedBys)
        var groupedBysDecoded0:[PinpointClientTypes.ResultRowValue]? = nil
        if let groupedBysContainer = groupedBysContainer {
            groupedBysDecoded0 = [PinpointClientTypes.ResultRowValue]()
            for structure0 in groupedBysContainer {
                if let structure0 = structure0 {
                    groupedBysDecoded0?.append(structure0)
                }
            }
        }
        groupedBys = groupedBysDecoded0
        let valuesContainer = try containerValues.decodeIfPresent([PinpointClientTypes.ResultRowValue?].self, forKey: .values)
        var valuesDecoded0:[PinpointClientTypes.ResultRowValue]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [PinpointClientTypes.ResultRowValue]()
            for structure0 in valuesContainer {
                if let structure0 = structure0 {
                    valuesDecoded0?.append(structure0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension PinpointClientTypes {
    /// Provides the results of a query that retrieved the data for a standard metric that applies to an application, campaign, or journey.
    public struct ResultRow: Swift.Equatable {
        /// An array of objects that defines the field and field values that were used to group data in a result set that contains multiple results. This value is null if the data in a result set isn’t grouped.
        /// This member is required.
        public var groupedBys: [PinpointClientTypes.ResultRowValue]?
        /// An array of objects that provides pre-aggregated values for a standard metric that applies to an application, campaign, or journey.
        /// This member is required.
        public var values: [PinpointClientTypes.ResultRowValue]?

        public init (
            groupedBys: [PinpointClientTypes.ResultRowValue]? = nil,
            values: [PinpointClientTypes.ResultRowValue]? = nil
        )
        {
            self.groupedBys = groupedBys
            self.values = values
        }
    }

}

extension PinpointClientTypes.ResultRowValue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case type = "Type"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension PinpointClientTypes {
    /// Provides a single value and metadata about that value as part of an array of query results for a standard metric that applies to an application, campaign, or journey.
    public struct ResultRowValue: Swift.Equatable {
        /// The friendly name of the metric whose value is specified by the Value property.
        /// This member is required.
        public var key: Swift.String?
        /// The data type of the value specified by the Value property.
        /// This member is required.
        public var type: Swift.String?
        /// In a Values object, the value for the metric that the query retrieved data for. In a GroupedBys object, the value for the field that was used to group data in a result set that contains multiple results (Values objects).
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            type: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.type = type
            self.value = value
        }
    }

}

extension PinpointClientTypes.SMSChannelRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case senderId = "SenderId"
        case shortCode = "ShortCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let senderId = self.senderId {
            try encodeContainer.encode(senderId, forKey: .senderId)
        }
        if let shortCode = self.shortCode {
            try encodeContainer.encode(shortCode, forKey: .shortCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let senderIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .senderId)
        senderId = senderIdDecoded
        let shortCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shortCode)
        shortCode = shortCodeDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the status and settings of the SMS channel for an application.
    public struct SMSChannelRequest: Swift.Equatable {
        /// Specifies whether to enable the SMS channel for the application.
        public var enabled: Swift.Bool?
        /// The identity that you want to display on recipients' devices when they receive messages from the SMS channel.
        public var senderId: Swift.String?
        /// The registered short code that you want to use when you send messages through the SMS channel.
        public var shortCode: Swift.String?

        public init (
            enabled: Swift.Bool? = nil,
            senderId: Swift.String? = nil,
            shortCode: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.senderId = senderId
            self.shortCode = shortCode
        }
    }

}

extension PinpointClientTypes.SMSChannelResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case creationDate = "CreationDate"
        case enabled = "Enabled"
        case hasCredential = "HasCredential"
        case id = "Id"
        case isArchived = "IsArchived"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedDate = "LastModifiedDate"
        case platform = "Platform"
        case promotionalMessagesPerSecond = "PromotionalMessagesPerSecond"
        case senderId = "SenderId"
        case shortCode = "ShortCode"
        case transactionalMessagesPerSecond = "TransactionalMessagesPerSecond"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let hasCredential = self.hasCredential {
            try encodeContainer.encode(hasCredential, forKey: .hasCredential)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isArchived = self.isArchived {
            try encodeContainer.encode(isArchived, forKey: .isArchived)
        }
        if let lastModifiedBy = self.lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let platform = self.platform {
            try encodeContainer.encode(platform, forKey: .platform)
        }
        if let promotionalMessagesPerSecond = self.promotionalMessagesPerSecond {
            try encodeContainer.encode(promotionalMessagesPerSecond, forKey: .promotionalMessagesPerSecond)
        }
        if let senderId = self.senderId {
            try encodeContainer.encode(senderId, forKey: .senderId)
        }
        if let shortCode = self.shortCode {
            try encodeContainer.encode(shortCode, forKey: .shortCode)
        }
        if let transactionalMessagesPerSecond = self.transactionalMessagesPerSecond {
            try encodeContainer.encode(transactionalMessagesPerSecond, forKey: .transactionalMessagesPerSecond)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let hasCredentialDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasCredential)
        hasCredential = hasCredentialDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let isArchivedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isArchived)
        isArchived = isArchivedDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let platformDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platform)
        platform = platformDecoded
        let promotionalMessagesPerSecondDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .promotionalMessagesPerSecond)
        promotionalMessagesPerSecond = promotionalMessagesPerSecondDecoded
        let senderIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .senderId)
        senderId = senderIdDecoded
        let shortCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shortCode)
        shortCode = shortCodeDecoded
        let transactionalMessagesPerSecondDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .transactionalMessagesPerSecond)
        transactionalMessagesPerSecond = transactionalMessagesPerSecondDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the status and settings of the SMS channel for an application.
    public struct SMSChannelResponse: Swift.Equatable {
        /// The unique identifier for the application that the SMS channel applies to.
        public var applicationId: Swift.String?
        /// The date and time, in ISO 8601 format, when the SMS channel was enabled.
        public var creationDate: Swift.String?
        /// Specifies whether the SMS channel is enabled for the application.
        public var enabled: Swift.Bool?
        /// (Not used) This property is retained only for backward compatibility.
        public var hasCredential: Swift.Bool?
        /// (Deprecated) An identifier for the SMS channel. This property is retained only for backward compatibility.
        public var id: Swift.String?
        /// Specifies whether the SMS channel is archived.
        public var isArchived: Swift.Bool?
        /// The user who last modified the SMS channel.
        public var lastModifiedBy: Swift.String?
        /// The date and time, in ISO 8601 format, when the SMS channel was last modified.
        public var lastModifiedDate: Swift.String?
        /// The type of messaging or notification platform for the channel. For the SMS channel, this value is SMS.
        /// This member is required.
        public var platform: Swift.String?
        /// The maximum number of promotional messages that you can send through the SMS channel each second.
        public var promotionalMessagesPerSecond: Swift.Int?
        /// The identity that displays on recipients' devices when they receive messages from the SMS channel.
        public var senderId: Swift.String?
        /// The registered short code to use when you send messages through the SMS channel.
        public var shortCode: Swift.String?
        /// The maximum number of transactional messages that you can send through the SMS channel each second.
        public var transactionalMessagesPerSecond: Swift.Int?
        /// The current version of the SMS channel.
        public var version: Swift.Int?

        public init (
            applicationId: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            hasCredential: Swift.Bool? = nil,
            id: Swift.String? = nil,
            isArchived: Swift.Bool? = nil,
            lastModifiedBy: Swift.String? = nil,
            lastModifiedDate: Swift.String? = nil,
            platform: Swift.String? = nil,
            promotionalMessagesPerSecond: Swift.Int? = nil,
            senderId: Swift.String? = nil,
            shortCode: Swift.String? = nil,
            transactionalMessagesPerSecond: Swift.Int? = nil,
            version: Swift.Int? = nil
        )
        {
            self.applicationId = applicationId
            self.creationDate = creationDate
            self.enabled = enabled
            self.hasCredential = hasCredential
            self.id = id
            self.isArchived = isArchived
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedDate = lastModifiedDate
            self.platform = platform
            self.promotionalMessagesPerSecond = promotionalMessagesPerSecond
            self.senderId = senderId
            self.shortCode = shortCode
            self.transactionalMessagesPerSecond = transactionalMessagesPerSecond
            self.version = version
        }
    }

}

extension PinpointClientTypes.SMSMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
        case entityId = "EntityId"
        case keyword = "Keyword"
        case mediaUrl = "MediaUrl"
        case messageType = "MessageType"
        case originationNumber = "OriginationNumber"
        case senderId = "SenderId"
        case substitutions = "Substitutions"
        case templateId = "TemplateId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let entityId = self.entityId {
            try encodeContainer.encode(entityId, forKey: .entityId)
        }
        if let keyword = self.keyword {
            try encodeContainer.encode(keyword, forKey: .keyword)
        }
        if let mediaUrl = self.mediaUrl {
            try encodeContainer.encode(mediaUrl, forKey: .mediaUrl)
        }
        if let messageType = self.messageType {
            try encodeContainer.encode(messageType.rawValue, forKey: .messageType)
        }
        if let originationNumber = self.originationNumber {
            try encodeContainer.encode(originationNumber, forKey: .originationNumber)
        }
        if let senderId = self.senderId {
            try encodeContainer.encode(senderId, forKey: .senderId)
        }
        if let substitutions = substitutions {
            var substitutionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .substitutions)
            for (dictKey0, mapOfListOf__string0) in substitutions {
                var mapOfListOf__string0Container = substitutionsContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for __string1 in mapOfListOf__string0 {
                    try mapOfListOf__string0Container.encode(__string1)
                }
            }
        }
        if let templateId = self.templateId {
            try encodeContainer.encode(templateId, forKey: .templateId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let keywordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyword)
        keyword = keywordDecoded
        let mediaUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mediaUrl)
        mediaUrl = mediaUrlDecoded
        let messageTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageType.self, forKey: .messageType)
        messageType = messageTypeDecoded
        let originationNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originationNumber)
        originationNumber = originationNumberDecoded
        let senderIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .senderId)
        senderId = senderIdDecoded
        let substitutionsContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .substitutions)
        var substitutionsDecoded0: [Swift.String:[Swift.String]]? = nil
        if let substitutionsContainer = substitutionsContainer {
            substitutionsDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listof__string0) in substitutionsContainer {
                var listof__string0Decoded0: [Swift.String]? = nil
                if let listof__string0 = listof__string0 {
                    listof__string0Decoded0 = [Swift.String]()
                    for string1 in listof__string0 {
                        if let string1 = string1 {
                            listof__string0Decoded0?.append(string1)
                        }
                    }
                }
                substitutionsDecoded0?[key0] = listof__string0Decoded0
            }
        }
        substitutions = substitutionsDecoded0
        let entityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityId)
        entityId = entityIdDecoded
        let templateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateId)
        templateId = templateIdDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the default settings for a one-time SMS message that's sent directly to an endpoint.
    public struct SMSMessage: Swift.Equatable {
        /// The body of the SMS message.
        public var body: Swift.String?
        /// The entity ID or Principal Entity (PE) id received from the regulatory body for sending SMS in your country.
        public var entityId: Swift.String?
        /// The SMS program name that you provided to AWS Support when you requested your dedicated number.
        public var keyword: Swift.String?
        /// This field is reserved for future use.
        public var mediaUrl: Swift.String?
        /// The SMS message type. Valid values are TRANSACTIONAL (for messages that are critical or time-sensitive, such as a one-time passwords) and PROMOTIONAL (for messsages that aren't critical or time-sensitive, such as marketing messages).
        public var messageType: PinpointClientTypes.MessageType?
        /// The number to send the SMS message from. This value should be one of the dedicated long or short codes that's assigned to your AWS account. If you don't specify a long or short code, Amazon Pinpoint assigns a random long code to the SMS message and sends the message from that code.
        public var originationNumber: Swift.String?
        /// The sender ID to display as the sender of the message on a recipient's device. Support for sender IDs varies by country or region.
        public var senderId: Swift.String?
        /// The message variables to use in the SMS message. You can override the default variables with individual address variables.
        public var substitutions: [Swift.String:[Swift.String]]?
        /// The template ID received from the regulatory body for sending SMS in your country.
        public var templateId: Swift.String?

        public init (
            body: Swift.String? = nil,
            entityId: Swift.String? = nil,
            keyword: Swift.String? = nil,
            mediaUrl: Swift.String? = nil,
            messageType: PinpointClientTypes.MessageType? = nil,
            originationNumber: Swift.String? = nil,
            senderId: Swift.String? = nil,
            substitutions: [Swift.String:[Swift.String]]? = nil,
            templateId: Swift.String? = nil
        )
        {
            self.body = body
            self.entityId = entityId
            self.keyword = keyword
            self.mediaUrl = mediaUrl
            self.messageType = messageType
            self.originationNumber = originationNumber
            self.senderId = senderId
            self.substitutions = substitutions
            self.templateId = templateId
        }
    }

}

extension PinpointClientTypes.SMSMessageActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageConfig = "MessageConfig"
        case nextActivity = "NextActivity"
        case templateName = "TemplateName"
        case templateVersion = "TemplateVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let messageConfig = self.messageConfig {
            try encodeContainer.encode(messageConfig, forKey: .messageConfig)
        }
        if let nextActivity = self.nextActivity {
            try encodeContainer.encode(nextActivity, forKey: .nextActivity)
        }
        if let templateName = self.templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
        if let templateVersion = self.templateVersion {
            try encodeContainer.encode(templateVersion, forKey: .templateVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageConfigDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneySMSMessage.self, forKey: .messageConfig)
        messageConfig = messageConfigDecoded
        let nextActivityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextActivity)
        nextActivity = nextActivityDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let templateVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateVersion)
        templateVersion = templateVersionDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the settings for an SMS activity in a journey. This type of activity sends a text message to participants.
    public struct SMSMessageActivity: Swift.Equatable {
        /// Specifies the sender ID and message type for an SMS message that's sent to participants in a journey.
        public var messageConfig: PinpointClientTypes.JourneySMSMessage?
        /// The unique identifier for the next activity to perform, after the message is sent.
        public var nextActivity: Swift.String?
        /// The name of the SMS message template to use for the message. If specified, this value must match the name of an existing message template.
        public var templateName: Swift.String?
        /// The unique identifier for the version of the SMS template to use for the message. If specified, this value must match the identifier for an existing template version. To retrieve a list of versions and version identifiers for a template, use the Template Versions resource. If you don't specify a value for this property, Amazon Pinpoint uses the active version of the template. The active version is typically the version of a template that's been most recently reviewed and approved for use, depending on your workflow. It isn't necessarily the latest version of a template.
        public var templateVersion: Swift.String?

        public init (
            messageConfig: PinpointClientTypes.JourneySMSMessage? = nil,
            nextActivity: Swift.String? = nil,
            templateName: Swift.String? = nil,
            templateVersion: Swift.String? = nil
        )
        {
            self.messageConfig = messageConfig
            self.nextActivity = nextActivity
            self.templateName = templateName
            self.templateVersion = templateVersion
        }
    }

}

extension PinpointClientTypes.SMSTemplateRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
        case defaultSubstitutions = "DefaultSubstitutions"
        case recommenderId = "RecommenderId"
        case templateDescription = "TemplateDescription"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let defaultSubstitutions = self.defaultSubstitutions {
            try encodeContainer.encode(defaultSubstitutions, forKey: .defaultSubstitutions)
        }
        if let recommenderId = self.recommenderId {
            try encodeContainer.encode(recommenderId, forKey: .recommenderId)
        }
        if let templateDescription = self.templateDescription {
            try encodeContainer.encode(templateDescription, forKey: .templateDescription)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapOf__string0) in tags {
                try tagsContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let defaultSubstitutionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultSubstitutions)
        defaultSubstitutions = defaultSubstitutionsDecoded
        let recommenderIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommenderId)
        recommenderId = recommenderIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let templateDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateDescription)
        templateDescription = templateDescriptionDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the content and settings for a message template that can be used in text messages that are sent through the SMS channel.
    public struct SMSTemplateRequest: Swift.Equatable {
        /// The message body to use in text messages that are based on the message template.
        public var body: Swift.String?
        /// A JSON object that specifies the default values to use for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable. When you create a message that's based on the template, you can override these defaults with message-specific and address-specific variables and values.
        public var defaultSubstitutions: Swift.String?
        /// The unique identifier for the recommender model to use for the message template. Amazon Pinpoint uses this value to determine how to retrieve and process data from a recommender model when it sends messages that use the template, if the template contains message variables for recommendation data.
        public var recommenderId: Swift.String?
        /// A string-to-string map of key-value pairs that defines the tags to associate with the message template. Each tag consists of a required tag key and an associated tag value.
        public var tags: [Swift.String:Swift.String]?
        /// A custom description of the message template.
        public var templateDescription: Swift.String?

        public init (
            body: Swift.String? = nil,
            defaultSubstitutions: Swift.String? = nil,
            recommenderId: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            templateDescription: Swift.String? = nil
        )
        {
            self.body = body
            self.defaultSubstitutions = defaultSubstitutions
            self.recommenderId = recommenderId
            self.tags = tags
            self.templateDescription = templateDescription
        }
    }

}

extension PinpointClientTypes.SMSTemplateResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case body = "Body"
        case creationDate = "CreationDate"
        case defaultSubstitutions = "DefaultSubstitutions"
        case lastModifiedDate = "LastModifiedDate"
        case recommenderId = "RecommenderId"
        case templateDescription = "TemplateDescription"
        case templateName = "TemplateName"
        case templateType = "TemplateType"
        case version = "Version"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let defaultSubstitutions = self.defaultSubstitutions {
            try encodeContainer.encode(defaultSubstitutions, forKey: .defaultSubstitutions)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let recommenderId = self.recommenderId {
            try encodeContainer.encode(recommenderId, forKey: .recommenderId)
        }
        if let templateDescription = self.templateDescription {
            try encodeContainer.encode(templateDescription, forKey: .templateDescription)
        }
        if let templateName = self.templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
        if let templateType = self.templateType {
            try encodeContainer.encode(templateType.rawValue, forKey: .templateType)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapOf__string0) in tags {
                try tagsContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let defaultSubstitutionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultSubstitutions)
        defaultSubstitutions = defaultSubstitutionsDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let recommenderIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommenderId)
        recommenderId = recommenderIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let templateDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateDescription)
        templateDescription = templateDescriptionDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let templateTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.TemplateType.self, forKey: .templateType)
        templateType = templateTypeDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the content and settings for a message template that can be used in text messages that are sent through the SMS channel.
    public struct SMSTemplateResponse: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the message template.
        public var arn: Swift.String?
        /// The message body that's used in text messages that are based on the message template.
        public var body: Swift.String?
        /// The date, in ISO 8601 format, when the message template was created.
        /// This member is required.
        public var creationDate: Swift.String?
        /// The JSON object that specifies the default values that are used for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable.
        public var defaultSubstitutions: Swift.String?
        /// The date, in ISO 8601 format, when the message template was last modified.
        /// This member is required.
        public var lastModifiedDate: Swift.String?
        /// The unique identifier for the recommender model that's used by the message template.
        public var recommenderId: Swift.String?
        /// A string-to-string map of key-value pairs that identifies the tags that are associated with the message template. Each tag consists of a required tag key and an associated tag value.
        public var tags: [Swift.String:Swift.String]?
        /// The custom description of the message template.
        public var templateDescription: Swift.String?
        /// The name of the message template.
        /// This member is required.
        public var templateName: Swift.String?
        /// The type of channel that the message template is designed for. For an SMS template, this value is SMS.
        /// This member is required.
        public var templateType: PinpointClientTypes.TemplateType?
        /// The unique identifier, as an integer, for the active version of the message template, or the version of the template that you specified by using the version parameter in your request.
        public var version: Swift.String?

        public init (
            arn: Swift.String? = nil,
            body: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            defaultSubstitutions: Swift.String? = nil,
            lastModifiedDate: Swift.String? = nil,
            recommenderId: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            templateDescription: Swift.String? = nil,
            templateName: Swift.String? = nil,
            templateType: PinpointClientTypes.TemplateType? = nil,
            version: Swift.String? = nil
        )
        {
            self.arn = arn
            self.body = body
            self.creationDate = creationDate
            self.defaultSubstitutions = defaultSubstitutions
            self.lastModifiedDate = lastModifiedDate
            self.recommenderId = recommenderId
            self.tags = tags
            self.templateDescription = templateDescription
            self.templateName = templateName
            self.templateType = templateType
            self.version = version
        }
    }

}

extension PinpointClientTypes.Schedule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case eventFilter = "EventFilter"
        case frequency = "Frequency"
        case isLocalTime = "IsLocalTime"
        case quietTime = "QuietTime"
        case startTime = "StartTime"
        case timezone = "Timezone"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime, forKey: .endTime)
        }
        if let eventFilter = self.eventFilter {
            try encodeContainer.encode(eventFilter, forKey: .eventFilter)
        }
        if let frequency = self.frequency {
            try encodeContainer.encode(frequency.rawValue, forKey: .frequency)
        }
        if let isLocalTime = self.isLocalTime {
            try encodeContainer.encode(isLocalTime, forKey: .isLocalTime)
        }
        if let quietTime = self.quietTime {
            try encodeContainer.encode(quietTime, forKey: .quietTime)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
        if let timezone = self.timezone {
            try encodeContainer.encode(timezone, forKey: .timezone)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTime)
        endTime = endTimeDecoded
        let eventFilterDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignEventFilter.self, forKey: .eventFilter)
        eventFilter = eventFilterDecoded
        let frequencyDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Frequency.self, forKey: .frequency)
        frequency = frequencyDecoded
        let isLocalTimeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isLocalTime)
        isLocalTime = isLocalTimeDecoded
        let quietTimeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.QuietTime.self, forKey: .quietTime)
        quietTime = quietTimeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        startTime = startTimeDecoded
        let timezoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timezone)
        timezone = timezoneDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the schedule settings for a campaign.
    public struct Schedule: Swift.Equatable {
        /// The scheduled time, in ISO 8601 format, when the campaign ended or will end.
        public var endTime: Swift.String?
        /// The type of event that causes the campaign to be sent, if the value of the Frequency property is EVENT.
        public var eventFilter: PinpointClientTypes.CampaignEventFilter?
        /// Specifies how often the campaign is sent or whether the campaign is sent in response to a specific event.
        public var frequency: PinpointClientTypes.Frequency?
        /// Specifies whether the start and end times for the campaign schedule use each recipient's local time. To base the schedule on each recipient's local time, set this value to true.
        public var isLocalTime: Swift.Bool?
        /// The default quiet time for the campaign. Quiet time is a specific time range when a campaign doesn't send messages to endpoints, if all the following conditions are met:
        ///
        /// * The EndpointDemographic.Timezone property of the endpoint is set to a valid value.
        ///
        /// * The current time in the endpoint's time zone is later than or equal to the time specified by the QuietTime.Start property for the campaign.
        ///
        /// * The current time in the endpoint's time zone is earlier than or equal to the time specified by the QuietTime.End property for the campaign.
        ///
        ///
        /// If any of the preceding conditions isn't met, the endpoint will receive messages from the campaign, even if quiet time is enabled.
        public var quietTime: PinpointClientTypes.QuietTime?
        /// The scheduled time when the campaign began or will begin. Valid values are: IMMEDIATE, to start the campaign immediately; or, a specific time in ISO 8601 format.
        /// This member is required.
        public var startTime: Swift.String?
        /// The starting UTC offset for the campaign schedule, if the value of the IsLocalTime property is true. Valid values are: UTC, UTC+01, UTC+02, UTC+03, UTC+03:30, UTC+04, UTC+04:30, UTC+05, UTC+05:30, UTC+05:45, UTC+06, UTC+06:30, UTC+07, UTC+08, UTC+09, UTC+09:30, UTC+10, UTC+10:30, UTC+11, UTC+12, UTC+13, UTC-02, UTC-03, UTC-04, UTC-05, UTC-06, UTC-07, UTC-08, UTC-09, UTC-10, and UTC-11.
        public var timezone: Swift.String?

        public init (
            endTime: Swift.String? = nil,
            eventFilter: PinpointClientTypes.CampaignEventFilter? = nil,
            frequency: PinpointClientTypes.Frequency? = nil,
            isLocalTime: Swift.Bool? = nil,
            quietTime: PinpointClientTypes.QuietTime? = nil,
            startTime: Swift.String? = nil,
            timezone: Swift.String? = nil
        )
        {
            self.endTime = endTime
            self.eventFilter = eventFilter
            self.frequency = frequency
            self.isLocalTime = isLocalTime
            self.quietTime = quietTime
            self.startTime = startTime
            self.timezone = timezone
        }
    }

}

extension PinpointClientTypes.SegmentBehaviors: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recency = "Recency"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let recency = self.recency {
            try encodeContainer.encode(recency, forKey: .recency)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recencyDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.RecencyDimension.self, forKey: .recency)
        recency = recencyDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies dimension settings for including or excluding endpoints from a segment based on how recently an endpoint was active.
    public struct SegmentBehaviors: Swift.Equatable {
        /// The dimension settings that are based on how recently an endpoint was active.
        public var recency: PinpointClientTypes.RecencyDimension?

        public init (
            recency: PinpointClientTypes.RecencyDimension? = nil
        )
        {
            self.recency = recency
        }
    }

}

extension PinpointClientTypes.SegmentCondition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case segmentId = "SegmentId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let segmentId = self.segmentId {
            try encodeContainer.encode(segmentId, forKey: .segmentId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let segmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .segmentId)
        segmentId = segmentIdDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies a segment to associate with an activity in a journey.
    public struct SegmentCondition: Swift.Equatable {
        /// The unique identifier for the segment to associate with the activity.
        /// This member is required.
        public var segmentId: Swift.String?

        public init (
            segmentId: Swift.String? = nil
        )
        {
            self.segmentId = segmentId
        }
    }

}

extension PinpointClientTypes.SegmentDemographics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appVersion = "AppVersion"
        case channel = "Channel"
        case deviceType = "DeviceType"
        case make = "Make"
        case model = "Model"
        case platform = "Platform"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appVersion = self.appVersion {
            try encodeContainer.encode(appVersion, forKey: .appVersion)
        }
        if let channel = self.channel {
            try encodeContainer.encode(channel, forKey: .channel)
        }
        if let deviceType = self.deviceType {
            try encodeContainer.encode(deviceType, forKey: .deviceType)
        }
        if let make = self.make {
            try encodeContainer.encode(make, forKey: .make)
        }
        if let model = self.model {
            try encodeContainer.encode(model, forKey: .model)
        }
        if let platform = self.platform {
            try encodeContainer.encode(platform, forKey: .platform)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appVersionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SetDimension.self, forKey: .appVersion)
        appVersion = appVersionDecoded
        let channelDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SetDimension.self, forKey: .channel)
        channel = channelDecoded
        let deviceTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SetDimension.self, forKey: .deviceType)
        deviceType = deviceTypeDecoded
        let makeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SetDimension.self, forKey: .make)
        make = makeDecoded
        let modelDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SetDimension.self, forKey: .model)
        model = modelDecoded
        let platformDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SetDimension.self, forKey: .platform)
        platform = platformDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies demographic-based dimension settings for including or excluding endpoints from a segment. These settings derive from characteristics of endpoint devices, such as platform, make, and model.
    public struct SegmentDemographics: Swift.Equatable {
        /// The app version criteria for the segment.
        public var appVersion: PinpointClientTypes.SetDimension?
        /// The channel criteria for the segment.
        public var channel: PinpointClientTypes.SetDimension?
        /// The device type criteria for the segment.
        public var deviceType: PinpointClientTypes.SetDimension?
        /// The device make criteria for the segment.
        public var make: PinpointClientTypes.SetDimension?
        /// The device model criteria for the segment.
        public var model: PinpointClientTypes.SetDimension?
        /// The device platform criteria for the segment.
        public var platform: PinpointClientTypes.SetDimension?

        public init (
            appVersion: PinpointClientTypes.SetDimension? = nil,
            channel: PinpointClientTypes.SetDimension? = nil,
            deviceType: PinpointClientTypes.SetDimension? = nil,
            make: PinpointClientTypes.SetDimension? = nil,
            model: PinpointClientTypes.SetDimension? = nil,
            platform: PinpointClientTypes.SetDimension? = nil
        )
        {
            self.appVersion = appVersion
            self.channel = channel
            self.deviceType = deviceType
            self.make = make
            self.model = model
            self.platform = platform
        }
    }

}

extension PinpointClientTypes.SegmentDimensions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case behavior = "Behavior"
        case demographic = "Demographic"
        case location = "Location"
        case metrics = "Metrics"
        case userAttributes = "UserAttributes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, mapOfAttributeDimension0) in attributes {
                try attributesContainer.encode(mapOfAttributeDimension0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let behavior = self.behavior {
            try encodeContainer.encode(behavior, forKey: .behavior)
        }
        if let demographic = self.demographic {
            try encodeContainer.encode(demographic, forKey: .demographic)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let metrics = metrics {
            var metricsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .metrics)
            for (dictKey0, mapOfMetricDimension0) in metrics {
                try metricsContainer.encode(mapOfMetricDimension0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let userAttributes = userAttributes {
            var userAttributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .userAttributes)
            for (dictKey0, mapOfAttributeDimension0) in userAttributes {
                try userAttributesContainer.encode(mapOfAttributeDimension0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.AttributeDimension?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:PinpointClientTypes.AttributeDimension]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:PinpointClientTypes.AttributeDimension]()
            for (key0, attributedimension0) in attributesContainer {
                if let attributedimension0 = attributedimension0 {
                    attributesDecoded0?[key0] = attributedimension0
                }
            }
        }
        attributes = attributesDecoded0
        let behaviorDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentBehaviors.self, forKey: .behavior)
        behavior = behaviorDecoded
        let demographicDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentDemographics.self, forKey: .demographic)
        demographic = demographicDecoded
        let locationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentLocation.self, forKey: .location)
        location = locationDecoded
        let metricsContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.MetricDimension?].self, forKey: .metrics)
        var metricsDecoded0: [Swift.String:PinpointClientTypes.MetricDimension]? = nil
        if let metricsContainer = metricsContainer {
            metricsDecoded0 = [Swift.String:PinpointClientTypes.MetricDimension]()
            for (key0, metricdimension0) in metricsContainer {
                if let metricdimension0 = metricdimension0 {
                    metricsDecoded0?[key0] = metricdimension0
                }
            }
        }
        metrics = metricsDecoded0
        let userAttributesContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.AttributeDimension?].self, forKey: .userAttributes)
        var userAttributesDecoded0: [Swift.String:PinpointClientTypes.AttributeDimension]? = nil
        if let userAttributesContainer = userAttributesContainer {
            userAttributesDecoded0 = [Swift.String:PinpointClientTypes.AttributeDimension]()
            for (key0, attributedimension0) in userAttributesContainer {
                if let attributedimension0 = attributedimension0 {
                    userAttributesDecoded0?[key0] = attributedimension0
                }
            }
        }
        userAttributes = userAttributesDecoded0
    }
}

extension PinpointClientTypes {
    /// Specifies the dimension settings for a segment.
    public struct SegmentDimensions: Swift.Equatable {
        /// One or more custom attributes to use as criteria for the segment.
        public var attributes: [Swift.String:PinpointClientTypes.AttributeDimension]?
        /// The behavior-based criteria, such as how recently users have used your app, for the segment.
        public var behavior: PinpointClientTypes.SegmentBehaviors?
        /// The demographic-based criteria, such as device platform, for the segment.
        public var demographic: PinpointClientTypes.SegmentDemographics?
        /// The location-based criteria, such as region or GPS coordinates, for the segment.
        public var location: PinpointClientTypes.SegmentLocation?
        /// One or more custom metrics to use as criteria for the segment.
        public var metrics: [Swift.String:PinpointClientTypes.MetricDimension]?
        /// One or more custom user attributes to use as criteria for the segment.
        public var userAttributes: [Swift.String:PinpointClientTypes.AttributeDimension]?

        public init (
            attributes: [Swift.String:PinpointClientTypes.AttributeDimension]? = nil,
            behavior: PinpointClientTypes.SegmentBehaviors? = nil,
            demographic: PinpointClientTypes.SegmentDemographics? = nil,
            location: PinpointClientTypes.SegmentLocation? = nil,
            metrics: [Swift.String:PinpointClientTypes.MetricDimension]? = nil,
            userAttributes: [Swift.String:PinpointClientTypes.AttributeDimension]? = nil
        )
        {
            self.attributes = attributes
            self.behavior = behavior
            self.demographic = demographic
            self.location = location
            self.metrics = metrics
            self.userAttributes = userAttributes
        }
    }

}

extension PinpointClientTypes.SegmentGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case sourceSegments = "SourceSegments"
        case sourceType = "SourceType"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensions = dimensions {
            var dimensionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensions)
            for segmentdimensions0 in dimensions {
                try dimensionsContainer.encode(segmentdimensions0)
            }
        }
        if let sourceSegments = sourceSegments {
            var sourceSegmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourceSegments)
            for segmentreference0 in sourceSegments {
                try sourceSegmentsContainer.encode(segmentreference0)
            }
        }
        if let sourceType = self.sourceType {
            try encodeContainer.encode(sourceType.rawValue, forKey: .sourceType)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionsContainer = try containerValues.decodeIfPresent([PinpointClientTypes.SegmentDimensions?].self, forKey: .dimensions)
        var dimensionsDecoded0:[PinpointClientTypes.SegmentDimensions]? = nil
        if let dimensionsContainer = dimensionsContainer {
            dimensionsDecoded0 = [PinpointClientTypes.SegmentDimensions]()
            for structure0 in dimensionsContainer {
                if let structure0 = structure0 {
                    dimensionsDecoded0?.append(structure0)
                }
            }
        }
        dimensions = dimensionsDecoded0
        let sourceSegmentsContainer = try containerValues.decodeIfPresent([PinpointClientTypes.SegmentReference?].self, forKey: .sourceSegments)
        var sourceSegmentsDecoded0:[PinpointClientTypes.SegmentReference]? = nil
        if let sourceSegmentsContainer = sourceSegmentsContainer {
            sourceSegmentsDecoded0 = [PinpointClientTypes.SegmentReference]()
            for structure0 in sourceSegmentsContainer {
                if let structure0 = structure0 {
                    sourceSegmentsDecoded0?.append(structure0)
                }
            }
        }
        sourceSegments = sourceSegmentsDecoded0
        let sourceTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SourceType.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let typeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ModelType.self, forKey: .type)
        type = typeDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the base segments and dimensions for a segment, and the relationships between these base segments and dimensions.
    public struct SegmentGroup: Swift.Equatable {
        /// An array that defines the dimensions for the segment.
        public var dimensions: [PinpointClientTypes.SegmentDimensions]?
        /// The base segment to build the segment on. A base segment, also referred to as a source segment, defines the initial population of endpoints for a segment. When you add dimensions to a segment, Amazon Pinpoint filters the base segment by using the dimensions that you specify. You can specify more than one dimensional segment or only one imported segment. If you specify an imported segment, the Amazon Pinpoint console displays a segment size estimate that indicates the size of the imported segment without any filters applied to it.
        public var sourceSegments: [PinpointClientTypes.SegmentReference]?
        /// Specifies how to handle multiple base segments for the segment. For example, if you specify three base segments for the segment, whether the resulting segment is based on all, any, or none of the base segments.
        public var sourceType: PinpointClientTypes.SourceType?
        /// Specifies how to handle multiple dimensions for the segment. For example, if you specify three dimensions for the segment, whether the resulting segment includes endpoints that match all, any, or none of the dimensions.
        public var type: PinpointClientTypes.ModelType?

        public init (
            dimensions: [PinpointClientTypes.SegmentDimensions]? = nil,
            sourceSegments: [PinpointClientTypes.SegmentReference]? = nil,
            sourceType: PinpointClientTypes.SourceType? = nil,
            type: PinpointClientTypes.ModelType? = nil
        )
        {
            self.dimensions = dimensions
            self.sourceSegments = sourceSegments
            self.sourceType = sourceType
            self.type = type
        }
    }

}

extension PinpointClientTypes.SegmentGroupList: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groups = "Groups"
        case include = "Include"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groups = groups {
            var groupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groups)
            for segmentgroup0 in groups {
                try groupsContainer.encode(segmentgroup0)
            }
        }
        if let include = self.include {
            try encodeContainer.encode(include.rawValue, forKey: .include)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupsContainer = try containerValues.decodeIfPresent([PinpointClientTypes.SegmentGroup?].self, forKey: .groups)
        var groupsDecoded0:[PinpointClientTypes.SegmentGroup]? = nil
        if let groupsContainer = groupsContainer {
            groupsDecoded0 = [PinpointClientTypes.SegmentGroup]()
            for structure0 in groupsContainer {
                if let structure0 = structure0 {
                    groupsDecoded0?.append(structure0)
                }
            }
        }
        groups = groupsDecoded0
        let includeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Include.self, forKey: .include)
        include = includeDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the settings that define the relationships between segment groups for a segment.
    public struct SegmentGroupList: Swift.Equatable {
        /// An array that defines the set of segment criteria to evaluate when handling segment groups for the segment.
        public var groups: [PinpointClientTypes.SegmentGroup]?
        /// Specifies how to handle multiple segment groups for the segment. For example, if the segment includes three segment groups, whether the resulting segment includes endpoints that match all, any, or none of the segment groups.
        public var include: PinpointClientTypes.Include?

        public init (
            groups: [PinpointClientTypes.SegmentGroup]? = nil,
            include: PinpointClientTypes.Include? = nil
        )
        {
            self.groups = groups
            self.include = include
        }
    }

}

extension PinpointClientTypes.SegmentImportResource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelCounts = "ChannelCounts"
        case externalId = "ExternalId"
        case format = "Format"
        case roleArn = "RoleArn"
        case s3Url = "S3Url"
        case size = "Size"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelCounts = channelCounts {
            var channelCountsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .channelCounts)
            for (dictKey0, mapOf__integer0) in channelCounts {
                try channelCountsContainer.encode(mapOf__integer0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let externalId = self.externalId {
            try encodeContainer.encode(externalId, forKey: .externalId)
        }
        if let format = self.format {
            try encodeContainer.encode(format.rawValue, forKey: .format)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let s3Url = self.s3Url {
            try encodeContainer.encode(s3Url, forKey: .s3Url)
        }
        if let size = self.size {
            try encodeContainer.encode(size, forKey: .size)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelCountsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Int?].self, forKey: .channelCounts)
        var channelCountsDecoded0: [Swift.String:Swift.Int]? = nil
        if let channelCountsContainer = channelCountsContainer {
            channelCountsDecoded0 = [Swift.String:Swift.Int]()
            for (key0, __integer0) in channelCountsContainer {
                if let __integer0 = __integer0 {
                    channelCountsDecoded0?[key0] = __integer0
                }
            }
        }
        channelCounts = channelCountsDecoded0
        let externalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalId)
        externalId = externalIdDecoded
        let formatDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Format.self, forKey: .format)
        format = formatDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let s3UrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Url)
        s3Url = s3UrlDecoded
        let sizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .size)
        size = sizeDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the import job that created a segment. An import job is a job that creates a user segment by importing endpoint definitions.
    public struct SegmentImportResource: Swift.Equatable {
        /// The number of channel types in the endpoint definitions that were imported to create the segment.
        public var channelCounts: [Swift.String:Swift.Int]?
        /// (Deprecated) Your AWS account ID, which you assigned to an external ID key in an IAM trust policy. Amazon Pinpoint previously used this value to assume an IAM role when importing endpoint definitions, but we removed this requirement. We don't recommend use of external IDs for IAM roles that are assumed by Amazon Pinpoint.
        /// This member is required.
        public var externalId: Swift.String?
        /// The format of the files that were imported to create the segment. Valid values are: CSV, for comma-separated values format; and, JSON, for newline-delimited JSON format.
        /// This member is required.
        public var format: PinpointClientTypes.Format?
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorized Amazon Pinpoint to access the Amazon S3 location to import endpoint definitions from.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The URL of the Amazon Simple Storage Service (Amazon S3) bucket that the endpoint definitions were imported from to create the segment.
        /// This member is required.
        public var s3Url: Swift.String?
        /// The number of endpoint definitions that were imported successfully to create the segment.
        /// This member is required.
        public var size: Swift.Int?

        public init (
            channelCounts: [Swift.String:Swift.Int]? = nil,
            externalId: Swift.String? = nil,
            format: PinpointClientTypes.Format? = nil,
            roleArn: Swift.String? = nil,
            s3Url: Swift.String? = nil,
            size: Swift.Int? = nil
        )
        {
            self.channelCounts = channelCounts
            self.externalId = externalId
            self.format = format
            self.roleArn = roleArn
            self.s3Url = s3Url
            self.size = size
        }
    }

}

extension PinpointClientTypes.SegmentLocation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case country = "Country"
        case gpsPoint = "GPSPoint"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let country = self.country {
            try encodeContainer.encode(country, forKey: .country)
        }
        if let gpsPoint = self.gpsPoint {
            try encodeContainer.encode(gpsPoint, forKey: .gpsPoint)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countryDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SetDimension.self, forKey: .country)
        country = countryDecoded
        let gpsPointDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.GPSPointDimension.self, forKey: .gpsPoint)
        gpsPoint = gpsPointDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies geographical dimension settings for a segment.
    public struct SegmentLocation: Swift.Equatable {
        /// The country or region code, in ISO 3166-1 alpha-2 format, for the segment.
        public var country: PinpointClientTypes.SetDimension?
        /// The GPS location and range for the segment.
        public var gpsPoint: PinpointClientTypes.GPSPointDimension?

        public init (
            country: PinpointClientTypes.SetDimension? = nil,
            gpsPoint: PinpointClientTypes.GPSPointDimension? = nil
        )
        {
            self.country = country
            self.gpsPoint = gpsPoint
        }
    }

}

extension PinpointClientTypes.SegmentReference: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the segment identifier and version of a segment.
    public struct SegmentReference: Swift.Equatable {
        /// The unique identifier for the segment.
        /// This member is required.
        public var id: Swift.String?
        /// The version number of the segment.
        public var version: Swift.Int?

        public init (
            id: Swift.String? = nil,
            version: Swift.Int? = nil
        )
        {
            self.id = id
            self.version = version
        }
    }

}

extension PinpointClientTypes.SegmentResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case arn = "Arn"
        case creationDate = "CreationDate"
        case dimensions = "Dimensions"
        case id = "Id"
        case importDefinition = "ImportDefinition"
        case lastModifiedDate = "LastModifiedDate"
        case name = "Name"
        case segmentGroups = "SegmentGroups"
        case segmentType = "SegmentType"
        case version = "Version"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let dimensions = self.dimensions {
            try encodeContainer.encode(dimensions, forKey: .dimensions)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let importDefinition = self.importDefinition {
            try encodeContainer.encode(importDefinition, forKey: .importDefinition)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let segmentGroups = self.segmentGroups {
            try encodeContainer.encode(segmentGroups, forKey: .segmentGroups)
        }
        if let segmentType = self.segmentType {
            try encodeContainer.encode(segmentType.rawValue, forKey: .segmentType)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapOf__string0) in tags {
                try tagsContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let dimensionsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentDimensions.self, forKey: .dimensions)
        dimensions = dimensionsDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let importDefinitionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentImportResource.self, forKey: .importDefinition)
        importDefinition = importDefinitionDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let segmentGroupsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentGroupList.self, forKey: .segmentGroups)
        segmentGroups = segmentGroupsDecoded
        let segmentTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentType.self, forKey: .segmentType)
        segmentType = segmentTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the configuration, dimension, and other settings for a segment.
    public struct SegmentResponse: Swift.Equatable {
        /// The unique identifier for the application that the segment is associated with.
        /// This member is required.
        public var applicationId: Swift.String?
        /// The Amazon Resource Name (ARN) of the segment.
        /// This member is required.
        public var arn: Swift.String?
        /// The date and time when the segment was created.
        /// This member is required.
        public var creationDate: Swift.String?
        /// The dimension settings for the segment.
        public var dimensions: PinpointClientTypes.SegmentDimensions?
        /// The unique identifier for the segment.
        /// This member is required.
        public var id: Swift.String?
        /// The settings for the import job that's associated with the segment.
        public var importDefinition: PinpointClientTypes.SegmentImportResource?
        /// The date and time when the segment was last modified.
        public var lastModifiedDate: Swift.String?
        /// The name of the segment.
        public var name: Swift.String?
        /// A list of one or more segment groups that apply to the segment. Each segment group consists of zero or more base segments and the dimensions that are applied to those base segments.
        public var segmentGroups: PinpointClientTypes.SegmentGroupList?
        /// The segment type. Valid values are:
        ///
        /// * DIMENSIONAL - A dynamic segment, which is a segment that uses selection criteria that you specify and is based on endpoint data that's reported by your app. Dynamic segments can change over time.
        ///
        /// * IMPORT - A static segment, which is a segment that uses selection criteria that you specify and is based on endpoint definitions that you import from a file. Imported segments are static; they don't change over time.
        /// This member is required.
        public var segmentType: PinpointClientTypes.SegmentType?
        /// A string-to-string map of key-value pairs that identifies the tags that are associated with the segment. Each tag consists of a required tag key and an associated tag value.
        public var tags: [Swift.String:Swift.String]?
        /// The version number of the segment.
        public var version: Swift.Int?

        public init (
            applicationId: Swift.String? = nil,
            arn: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            dimensions: PinpointClientTypes.SegmentDimensions? = nil,
            id: Swift.String? = nil,
            importDefinition: PinpointClientTypes.SegmentImportResource? = nil,
            lastModifiedDate: Swift.String? = nil,
            name: Swift.String? = nil,
            segmentGroups: PinpointClientTypes.SegmentGroupList? = nil,
            segmentType: PinpointClientTypes.SegmentType? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            version: Swift.Int? = nil
        )
        {
            self.applicationId = applicationId
            self.arn = arn
            self.creationDate = creationDate
            self.dimensions = dimensions
            self.id = id
            self.importDefinition = importDefinition
            self.lastModifiedDate = lastModifiedDate
            self.name = name
            self.segmentGroups = segmentGroups
            self.segmentType = segmentType
            self.tags = tags
            self.version = version
        }
    }

}

extension PinpointClientTypes {
    public enum SegmentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case dimensional
        case `import`
        case sdkUnknown(Swift.String)

        public static var allCases: [SegmentType] {
            return [
                .dimensional,
                .import,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dimensional: return "DIMENSIONAL"
            case .import: return "IMPORT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SegmentType(rawValue: rawValue) ?? SegmentType.sdkUnknown(rawValue)
        }
    }
}

extension PinpointClientTypes.SegmentsResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case item = "Item"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let item = item {
            var itemContainer = encodeContainer.nestedUnkeyedContainer(forKey: .item)
            for segmentresponse0 in item {
                try itemContainer.encode(segmentresponse0)
            }
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([PinpointClientTypes.SegmentResponse?].self, forKey: .item)
        var itemDecoded0:[PinpointClientTypes.SegmentResponse]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [PinpointClientTypes.SegmentResponse]()
            for structure0 in itemContainer {
                if let structure0 = structure0 {
                    itemDecoded0?.append(structure0)
                }
            }
        }
        item = itemDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about all the segments that are associated with an application.
    public struct SegmentsResponse: Swift.Equatable {
        /// An array of responses, one for each segment that's associated with the application (Segments resource) or each version of a segment that's associated with the application (Segment Versions resource).
        /// This member is required.
        public var item: [PinpointClientTypes.SegmentResponse]?
        /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
        public var nextToken: Swift.String?

        public init (
            item: [PinpointClientTypes.SegmentResponse]? = nil,
            nextToken: Swift.String? = nil
        )
        {
            self.item = item
            self.nextToken = nextToken
        }
    }

}

public struct SendMessagesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendMessagesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendMessagesInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<SendMessagesOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let messageRequest = input.operationInput.messageRequest {
                let messageRequestdata = try encoder.encode(messageRequest)
                let messageRequestbody = ClientRuntime.HttpBody.data(messageRequestdata)
                input.builder.withBody(messageRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let messageRequestdata = "{}".data(using: .utf8)!
                    let messageRequestbody = ClientRuntime.HttpBody.data(messageRequestdata)
                    input.builder.withBody(messageRequestbody)
                }
            }
        } catch let err {
            throw SdkError<SendMessagesOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendMessagesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendMessagesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension SendMessagesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageRequest = "MessageRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let messageRequest = self.messageRequest {
            try encodeContainer.encode(messageRequest, forKey: .messageRequest)
        }
    }
}

extension SendMessagesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/messages"
    }
}

public struct SendMessagesInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// Specifies the configuration and other settings for a message.
    /// This member is required.
    public var messageRequest: PinpointClientTypes.MessageRequest?

    public init (
        applicationId: Swift.String? = nil,
        messageRequest: PinpointClientTypes.MessageRequest? = nil
    )
    {
        self.applicationId = applicationId
        self.messageRequest = messageRequest
    }
}

struct SendMessagesInputBody: Swift.Equatable {
    let messageRequest: PinpointClientTypes.MessageRequest?
}

extension SendMessagesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageRequest = "MessageRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageRequest.self, forKey: .messageRequest)
        messageRequest = messageRequestDecoded
    }
}

extension SendMessagesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendMessagesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SendMessagesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendMessagesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.MessageResponse = try responseDecoder.decode(responseBody: data)
                self.messageResponse = output
            } else {
                self.messageResponse = nil
            }
        } else {
            self.messageResponse = nil
        }
    }
}

public struct SendMessagesOutputResponse: Swift.Equatable {
    /// Provides information about the results of a request to send a message to an endpoint address.
    /// This member is required.
    public var messageResponse: PinpointClientTypes.MessageResponse?

    public init (
        messageResponse: PinpointClientTypes.MessageResponse? = nil
    )
    {
        self.messageResponse = messageResponse
    }
}

struct SendMessagesOutputResponseBody: Swift.Equatable {
    let messageResponse: PinpointClientTypes.MessageResponse?
}

extension SendMessagesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageResponse = "MessageResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageResponse.self, forKey: .messageResponse)
        messageResponse = messageResponseDecoded
    }
}

public struct SendOTPMessageInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendOTPMessageInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendOTPMessageInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<SendOTPMessageOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let sendOTPMessageRequestParameters = input.operationInput.sendOTPMessageRequestParameters {
                let sendOTPMessageRequestParametersdata = try encoder.encode(sendOTPMessageRequestParameters)
                let sendOTPMessageRequestParametersbody = ClientRuntime.HttpBody.data(sendOTPMessageRequestParametersdata)
                input.builder.withBody(sendOTPMessageRequestParametersbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let sendOTPMessageRequestParametersdata = "{}".data(using: .utf8)!
                    let sendOTPMessageRequestParametersbody = ClientRuntime.HttpBody.data(sendOTPMessageRequestParametersdata)
                    input.builder.withBody(sendOTPMessageRequestParametersbody)
                }
            }
        } catch let err {
            throw SdkError<SendOTPMessageOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendOTPMessageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendOTPMessageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension SendOTPMessageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendOTPMessageRequestParameters = "SendOTPMessageRequestParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sendOTPMessageRequestParameters = self.sendOTPMessageRequestParameters {
            try encodeContainer.encode(sendOTPMessageRequestParameters, forKey: .sendOTPMessageRequestParameters)
        }
    }
}

extension SendOTPMessageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/otp"
    }
}

public struct SendOTPMessageInput: Swift.Equatable {
    /// The unique ID of your Amazon Pinpoint application.
    /// This member is required.
    public var applicationId: Swift.String?
    /// Send OTP message request parameters.
    /// This member is required.
    public var sendOTPMessageRequestParameters: PinpointClientTypes.SendOTPMessageRequestParameters?

    public init (
        applicationId: Swift.String? = nil,
        sendOTPMessageRequestParameters: PinpointClientTypes.SendOTPMessageRequestParameters? = nil
    )
    {
        self.applicationId = applicationId
        self.sendOTPMessageRequestParameters = sendOTPMessageRequestParameters
    }
}

struct SendOTPMessageInputBody: Swift.Equatable {
    let sendOTPMessageRequestParameters: PinpointClientTypes.SendOTPMessageRequestParameters?
}

extension SendOTPMessageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendOTPMessageRequestParameters = "SendOTPMessageRequestParameters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sendOTPMessageRequestParametersDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SendOTPMessageRequestParameters.self, forKey: .sendOTPMessageRequestParameters)
        sendOTPMessageRequestParameters = sendOTPMessageRequestParametersDecoded
    }
}

extension SendOTPMessageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendOTPMessageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SendOTPMessageOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendOTPMessageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.MessageResponse = try responseDecoder.decode(responseBody: data)
                self.messageResponse = output
            } else {
                self.messageResponse = nil
            }
        } else {
            self.messageResponse = nil
        }
    }
}

public struct SendOTPMessageOutputResponse: Swift.Equatable {
    /// Provides information about the results of a request to send a message to an endpoint address.
    /// This member is required.
    public var messageResponse: PinpointClientTypes.MessageResponse?

    public init (
        messageResponse: PinpointClientTypes.MessageResponse? = nil
    )
    {
        self.messageResponse = messageResponse
    }
}

struct SendOTPMessageOutputResponseBody: Swift.Equatable {
    let messageResponse: PinpointClientTypes.MessageResponse?
}

extension SendOTPMessageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageResponse = "MessageResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageResponse.self, forKey: .messageResponse)
        messageResponse = messageResponseDecoded
    }
}

extension PinpointClientTypes.SendOTPMessageRequestParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedAttempts = "AllowedAttempts"
        case brandName = "BrandName"
        case channel = "Channel"
        case codeLength = "CodeLength"
        case destinationIdentity = "DestinationIdentity"
        case entityId = "EntityId"
        case language = "Language"
        case originationIdentity = "OriginationIdentity"
        case referenceId = "ReferenceId"
        case templateId = "TemplateId"
        case validityPeriod = "ValidityPeriod"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedAttempts = self.allowedAttempts {
            try encodeContainer.encode(allowedAttempts, forKey: .allowedAttempts)
        }
        if let brandName = self.brandName {
            try encodeContainer.encode(brandName, forKey: .brandName)
        }
        if let channel = self.channel {
            try encodeContainer.encode(channel, forKey: .channel)
        }
        if let codeLength = self.codeLength {
            try encodeContainer.encode(codeLength, forKey: .codeLength)
        }
        if let destinationIdentity = self.destinationIdentity {
            try encodeContainer.encode(destinationIdentity, forKey: .destinationIdentity)
        }
        if let entityId = self.entityId {
            try encodeContainer.encode(entityId, forKey: .entityId)
        }
        if let language = self.language {
            try encodeContainer.encode(language, forKey: .language)
        }
        if let originationIdentity = self.originationIdentity {
            try encodeContainer.encode(originationIdentity, forKey: .originationIdentity)
        }
        if let referenceId = self.referenceId {
            try encodeContainer.encode(referenceId, forKey: .referenceId)
        }
        if let templateId = self.templateId {
            try encodeContainer.encode(templateId, forKey: .templateId)
        }
        if let validityPeriod = self.validityPeriod {
            try encodeContainer.encode(validityPeriod, forKey: .validityPeriod)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowedAttemptsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .allowedAttempts)
        allowedAttempts = allowedAttemptsDecoded
        let brandNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .brandName)
        brandName = brandNameDecoded
        let channelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channel)
        channel = channelDecoded
        let codeLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .codeLength)
        codeLength = codeLengthDecoded
        let destinationIdentityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationIdentity)
        destinationIdentity = destinationIdentityDecoded
        let entityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityId)
        entityId = entityIdDecoded
        let languageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .language)
        language = languageDecoded
        let originationIdentityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originationIdentity)
        originationIdentity = originationIdentityDecoded
        let referenceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .referenceId)
        referenceId = referenceIdDecoded
        let templateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateId)
        templateId = templateIdDecoded
        let validityPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .validityPeriod)
        validityPeriod = validityPeriodDecoded
    }
}

extension PinpointClientTypes {
    /// Send OTP message request parameters.
    public struct SendOTPMessageRequestParameters: Swift.Equatable {
        /// The attempts allowed to validate an OTP.
        public var allowedAttempts: Swift.Int?
        /// The brand name that will be substituted into the OTP message body. Should be owned by calling AWS account.
        /// This member is required.
        public var brandName: Swift.String?
        /// Channel type for the OTP message. Supported values: [SMS].
        /// This member is required.
        public var channel: Swift.String?
        /// The number of characters in the generated OTP.
        public var codeLength: Swift.Int?
        /// The destination identity to send OTP to.
        /// This member is required.
        public var destinationIdentity: Swift.String?
        /// A unique Entity ID received from DLT after entity registration is approved.
        public var entityId: Swift.String?
        /// The language to be used for the outgoing message body containing the OTP.
        public var language: Swift.String?
        /// The origination identity used to send OTP from.
        /// This member is required.
        public var originationIdentity: Swift.String?
        /// Developer-specified reference identifier. Required to match during OTP verification.
        /// This member is required.
        public var referenceId: Swift.String?
        /// A unique Template ID received from DLT after entity registration is approved.
        public var templateId: Swift.String?
        /// The time in minutes before the OTP is no longer valid.
        public var validityPeriod: Swift.Int?

        public init (
            allowedAttempts: Swift.Int? = nil,
            brandName: Swift.String? = nil,
            channel: Swift.String? = nil,
            codeLength: Swift.Int? = nil,
            destinationIdentity: Swift.String? = nil,
            entityId: Swift.String? = nil,
            language: Swift.String? = nil,
            originationIdentity: Swift.String? = nil,
            referenceId: Swift.String? = nil,
            templateId: Swift.String? = nil,
            validityPeriod: Swift.Int? = nil
        )
        {
            self.allowedAttempts = allowedAttempts
            self.brandName = brandName
            self.channel = channel
            self.codeLength = codeLength
            self.destinationIdentity = destinationIdentity
            self.entityId = entityId
            self.language = language
            self.originationIdentity = originationIdentity
            self.referenceId = referenceId
            self.templateId = templateId
            self.validityPeriod = validityPeriod
        }
    }

}

extension PinpointClientTypes.SendUsersMessageRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case context = "Context"
        case messageConfiguration = "MessageConfiguration"
        case templateConfiguration = "TemplateConfiguration"
        case traceId = "TraceId"
        case users = "Users"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let context = context {
            var contextContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .context)
            for (dictKey0, mapOf__string0) in context {
                try contextContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let messageConfiguration = self.messageConfiguration {
            try encodeContainer.encode(messageConfiguration, forKey: .messageConfiguration)
        }
        if let templateConfiguration = self.templateConfiguration {
            try encodeContainer.encode(templateConfiguration, forKey: .templateConfiguration)
        }
        if let traceId = self.traceId {
            try encodeContainer.encode(traceId, forKey: .traceId)
        }
        if let users = users {
            var usersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .users)
            for (dictKey0, mapOfEndpointSendConfiguration0) in users {
                try usersContainer.encode(mapOfEndpointSendConfiguration0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .context)
        var contextDecoded0: [Swift.String:Swift.String]? = nil
        if let contextContainer = contextContainer {
            contextDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in contextContainer {
                if let __string0 = __string0 {
                    contextDecoded0?[key0] = __string0
                }
            }
        }
        context = contextDecoded0
        let messageConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.DirectMessageConfiguration.self, forKey: .messageConfiguration)
        messageConfiguration = messageConfigurationDecoded
        let templateConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.TemplateConfiguration.self, forKey: .templateConfiguration)
        templateConfiguration = templateConfigurationDecoded
        let traceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .traceId)
        traceId = traceIdDecoded
        let usersContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.EndpointSendConfiguration?].self, forKey: .users)
        var usersDecoded0: [Swift.String:PinpointClientTypes.EndpointSendConfiguration]? = nil
        if let usersContainer = usersContainer {
            usersDecoded0 = [Swift.String:PinpointClientTypes.EndpointSendConfiguration]()
            for (key0, endpointsendconfiguration0) in usersContainer {
                if let endpointsendconfiguration0 = endpointsendconfiguration0 {
                    usersDecoded0?[key0] = endpointsendconfiguration0
                }
            }
        }
        users = usersDecoded0
    }
}

extension PinpointClientTypes {
    /// Specifies the configuration and other settings for a message to send to all the endpoints that are associated with a list of users.
    public struct SendUsersMessageRequest: Swift.Equatable {
        /// A map of custom attribute-value pairs. For a push notification, Amazon Pinpoint adds these attributes to the data.pinpoint object in the body of the notification payload. Amazon Pinpoint also provides these attributes in the events that it generates for users-messages deliveries.
        public var context: [Swift.String:Swift.String]?
        /// The settings and content for the default message and any default messages that you defined for specific channels.
        /// This member is required.
        public var messageConfiguration: PinpointClientTypes.DirectMessageConfiguration?
        /// The message template to use for the message.
        public var templateConfiguration: PinpointClientTypes.TemplateConfiguration?
        /// The unique identifier for tracing the message. This identifier is visible to message recipients.
        public var traceId: Swift.String?
        /// A map that associates user IDs with [EndpointSendConfiguration](https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-messages.html#apps-application-id-messages-model-endpointsendconfiguration) objects. You can use an [EndpointSendConfiguration](https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-messages.html#apps-application-id-messages-model-endpointsendconfiguration) object to tailor the message for a user by specifying settings such as content overrides and message variables.
        /// This member is required.
        public var users: [Swift.String:PinpointClientTypes.EndpointSendConfiguration]?

        public init (
            context: [Swift.String:Swift.String]? = nil,
            messageConfiguration: PinpointClientTypes.DirectMessageConfiguration? = nil,
            templateConfiguration: PinpointClientTypes.TemplateConfiguration? = nil,
            traceId: Swift.String? = nil,
            users: [Swift.String:PinpointClientTypes.EndpointSendConfiguration]? = nil
        )
        {
            self.context = context
            self.messageConfiguration = messageConfiguration
            self.templateConfiguration = templateConfiguration
            self.traceId = traceId
            self.users = users
        }
    }

}

extension PinpointClientTypes.SendUsersMessageResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case requestId = "RequestId"
        case result = "Result"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let requestId = self.requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let result = result {
            var resultContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .result)
            for (dictKey0, mapOfMapOfEndpointMessageResult0) in result {
                var mapOfMapOfEndpointMessageResult0Container = resultContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key(stringValue: dictKey0))
                for (dictKey1, mapOfEndpointMessageResult1) in mapOfMapOfEndpointMessageResult0 {
                    try mapOfMapOfEndpointMessageResult0Container.encode(mapOfEndpointMessageResult1, forKey: ClientRuntime.Key(stringValue: dictKey1))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let resultContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String: PinpointClientTypes.EndpointMessageResult?]?].self, forKey: .result)
        var resultDecoded0: [Swift.String:[Swift.String:PinpointClientTypes.EndpointMessageResult]]? = nil
        if let resultContainer = resultContainer {
            resultDecoded0 = [Swift.String:[Swift.String:PinpointClientTypes.EndpointMessageResult]]()
            for (key0, mapofendpointmessageresult0) in resultContainer {
                var mapofendpointmessageresult0Decoded0: [Swift.String: PinpointClientTypes.EndpointMessageResult]? = nil
                if let mapofendpointmessageresult0 = mapofendpointmessageresult0 {
                    mapofendpointmessageresult0Decoded0 = [Swift.String: PinpointClientTypes.EndpointMessageResult]()
                    for (key1, endpointmessageresult1) in mapofendpointmessageresult0 {
                        if let endpointmessageresult1 = endpointmessageresult1 {
                            mapofendpointmessageresult0Decoded0?[key1] = endpointmessageresult1
                        }
                    }
                }
                resultDecoded0?[key0] = mapofendpointmessageresult0Decoded0
            }
        }
        result = resultDecoded0
    }
}

extension PinpointClientTypes {
    /// Provides information about which users and endpoints a message was sent to.
    public struct SendUsersMessageResponse: Swift.Equatable {
        /// The unique identifier for the application that was used to send the message.
        /// This member is required.
        public var applicationId: Swift.String?
        /// The unique identifier that was assigned to the message request.
        public var requestId: Swift.String?
        /// An object that indicates which endpoints the message was sent to, for each user. The object lists user IDs and, for each user ID, provides the endpoint IDs that the message was sent to. For each endpoint ID, it provides an EndpointMessageResult object.
        public var result: [Swift.String:[Swift.String:PinpointClientTypes.EndpointMessageResult]]?

        public init (
            applicationId: Swift.String? = nil,
            requestId: Swift.String? = nil,
            result: [Swift.String:[Swift.String:PinpointClientTypes.EndpointMessageResult]]? = nil
        )
        {
            self.applicationId = applicationId
            self.requestId = requestId
            self.result = result
        }
    }

}

public struct SendUsersMessagesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendUsersMessagesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendUsersMessagesInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<SendUsersMessagesOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let sendUsersMessageRequest = input.operationInput.sendUsersMessageRequest {
                let sendUsersMessageRequestdata = try encoder.encode(sendUsersMessageRequest)
                let sendUsersMessageRequestbody = ClientRuntime.HttpBody.data(sendUsersMessageRequestdata)
                input.builder.withBody(sendUsersMessageRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let sendUsersMessageRequestdata = "{}".data(using: .utf8)!
                    let sendUsersMessageRequestbody = ClientRuntime.HttpBody.data(sendUsersMessageRequestdata)
                    input.builder.withBody(sendUsersMessageRequestbody)
                }
            }
        } catch let err {
            throw SdkError<SendUsersMessagesOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendUsersMessagesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendUsersMessagesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension SendUsersMessagesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendUsersMessageRequest = "SendUsersMessageRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sendUsersMessageRequest = self.sendUsersMessageRequest {
            try encodeContainer.encode(sendUsersMessageRequest, forKey: .sendUsersMessageRequest)
        }
    }
}

extension SendUsersMessagesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/users-messages"
    }
}

public struct SendUsersMessagesInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// Specifies the configuration and other settings for a message to send to all the endpoints that are associated with a list of users.
    /// This member is required.
    public var sendUsersMessageRequest: PinpointClientTypes.SendUsersMessageRequest?

    public init (
        applicationId: Swift.String? = nil,
        sendUsersMessageRequest: PinpointClientTypes.SendUsersMessageRequest? = nil
    )
    {
        self.applicationId = applicationId
        self.sendUsersMessageRequest = sendUsersMessageRequest
    }
}

struct SendUsersMessagesInputBody: Swift.Equatable {
    let sendUsersMessageRequest: PinpointClientTypes.SendUsersMessageRequest?
}

extension SendUsersMessagesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendUsersMessageRequest = "SendUsersMessageRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sendUsersMessageRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SendUsersMessageRequest.self, forKey: .sendUsersMessageRequest)
        sendUsersMessageRequest = sendUsersMessageRequestDecoded
    }
}

extension SendUsersMessagesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendUsersMessagesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SendUsersMessagesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendUsersMessagesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.SendUsersMessageResponse = try responseDecoder.decode(responseBody: data)
                self.sendUsersMessageResponse = output
            } else {
                self.sendUsersMessageResponse = nil
            }
        } else {
            self.sendUsersMessageResponse = nil
        }
    }
}

public struct SendUsersMessagesOutputResponse: Swift.Equatable {
    /// Provides information about which users and endpoints a message was sent to.
    /// This member is required.
    public var sendUsersMessageResponse: PinpointClientTypes.SendUsersMessageResponse?

    public init (
        sendUsersMessageResponse: PinpointClientTypes.SendUsersMessageResponse? = nil
    )
    {
        self.sendUsersMessageResponse = sendUsersMessageResponse
    }
}

struct SendUsersMessagesOutputResponseBody: Swift.Equatable {
    let sendUsersMessageResponse: PinpointClientTypes.SendUsersMessageResponse?
}

extension SendUsersMessagesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendUsersMessageResponse = "SendUsersMessageResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sendUsersMessageResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SendUsersMessageResponse.self, forKey: .sendUsersMessageResponse)
        sendUsersMessageResponse = sendUsersMessageResponseDecoded
    }
}

extension PinpointClientTypes.Session: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case duration = "Duration"
        case id = "Id"
        case startTimestamp = "StartTimestamp"
        case stopTimestamp = "StopTimestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let duration = self.duration {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let startTimestamp = self.startTimestamp {
            try encodeContainer.encode(startTimestamp, forKey: .startTimestamp)
        }
        if let stopTimestamp = self.stopTimestamp {
            try encodeContainer.encode(stopTimestamp, forKey: .stopTimestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration)
        duration = durationDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let startTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTimestamp)
        startTimestamp = startTimestampDecoded
        let stopTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stopTimestamp)
        stopTimestamp = stopTimestampDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about a session.
    public struct Session: Swift.Equatable {
        /// The duration of the session, in milliseconds.
        public var duration: Swift.Int?
        /// The unique identifier for the session.
        /// This member is required.
        public var id: Swift.String?
        /// The date and time when the session began.
        /// This member is required.
        public var startTimestamp: Swift.String?
        /// The date and time when the session ended.
        public var stopTimestamp: Swift.String?

        public init (
            duration: Swift.Int? = nil,
            id: Swift.String? = nil,
            startTimestamp: Swift.String? = nil,
            stopTimestamp: Swift.String? = nil
        )
        {
            self.duration = duration
            self.id = id
            self.startTimestamp = startTimestamp
            self.stopTimestamp = stopTimestamp
        }
    }

}

extension PinpointClientTypes.SetDimension: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensionType = "DimensionType"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensionType = self.dimensionType {
            try encodeContainer.encode(dimensionType.rawValue, forKey: .dimensionType)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for __string0 in values {
                try valuesContainer.encode(__string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.DimensionType.self, forKey: .dimensionType)
        dimensionType = dimensionTypeDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension PinpointClientTypes {
    /// Specifies the dimension type and values for a segment dimension.
    public struct SetDimension: Swift.Equatable {
        /// The type of segment dimension to use. Valid values are: INCLUSIVE, endpoints that match the criteria are included in the segment; and, EXCLUSIVE, endpoints that match the criteria are excluded from the segment.
        public var dimensionType: PinpointClientTypes.DimensionType?
        /// The criteria values to use for the segment dimension. Depending on the value of the DimensionType property, endpoints are included or excluded from the segment if their values match the criteria values.
        /// This member is required.
        public var values: [Swift.String]?

        public init (
            dimensionType: PinpointClientTypes.DimensionType? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.dimensionType = dimensionType
            self.values = values
        }
    }

}

extension PinpointClientTypes.SimpleCondition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventCondition = "EventCondition"
        case segmentCondition = "SegmentCondition"
        case segmentDimensions = "segmentDimensions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventCondition = self.eventCondition {
            try encodeContainer.encode(eventCondition, forKey: .eventCondition)
        }
        if let segmentCondition = self.segmentCondition {
            try encodeContainer.encode(segmentCondition, forKey: .segmentCondition)
        }
        if let segmentDimensions = self.segmentDimensions {
            try encodeContainer.encode(segmentDimensions, forKey: .segmentDimensions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventConditionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EventCondition.self, forKey: .eventCondition)
        eventCondition = eventConditionDecoded
        let segmentConditionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentCondition.self, forKey: .segmentCondition)
        segmentCondition = segmentConditionDecoded
        let segmentDimensionsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentDimensions.self, forKey: .segmentDimensions)
        segmentDimensions = segmentDimensionsDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies a condition to evaluate for an activity in a journey.
    public struct SimpleCondition: Swift.Equatable {
        /// The dimension settings for the event that's associated with the activity.
        public var eventCondition: PinpointClientTypes.EventCondition?
        /// The segment that's associated with the activity.
        public var segmentCondition: PinpointClientTypes.SegmentCondition?
        /// The dimension settings for the segment that's associated with the activity.
        public var segmentDimensions: PinpointClientTypes.SegmentDimensions?

        public init (
            eventCondition: PinpointClientTypes.EventCondition? = nil,
            segmentCondition: PinpointClientTypes.SegmentCondition? = nil,
            segmentDimensions: PinpointClientTypes.SegmentDimensions? = nil
        )
        {
            self.eventCondition = eventCondition
            self.segmentCondition = segmentCondition
            self.segmentDimensions = segmentDimensions
        }
    }

}

extension PinpointClientTypes.SimpleEmail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case htmlPart = "HtmlPart"
        case subject = "Subject"
        case textPart = "TextPart"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let htmlPart = self.htmlPart {
            try encodeContainer.encode(htmlPart, forKey: .htmlPart)
        }
        if let subject = self.subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
        if let textPart = self.textPart {
            try encodeContainer.encode(textPart, forKey: .textPart)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let htmlPartDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SimpleEmailPart.self, forKey: .htmlPart)
        htmlPart = htmlPartDecoded
        let subjectDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SimpleEmailPart.self, forKey: .subject)
        subject = subjectDecoded
        let textPartDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SimpleEmailPart.self, forKey: .textPart)
        textPart = textPartDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the contents of an email message, composed of a subject, a text part, and an HTML part.
    public struct SimpleEmail: Swift.Equatable {
        /// The body of the email message, in HTML format. We recommend using HTML format for email clients that render HTML content. You can include links, formatted text, and more in an HTML message.
        public var htmlPart: PinpointClientTypes.SimpleEmailPart?
        /// The subject line, or title, of the email.
        public var subject: PinpointClientTypes.SimpleEmailPart?
        /// The body of the email message, in plain text format. We recommend using plain text format for email clients that don't render HTML content and clients that are connected to high-latency networks, such as mobile devices.
        public var textPart: PinpointClientTypes.SimpleEmailPart?

        public init (
            htmlPart: PinpointClientTypes.SimpleEmailPart? = nil,
            subject: PinpointClientTypes.SimpleEmailPart? = nil,
            textPart: PinpointClientTypes.SimpleEmailPart? = nil
        )
        {
            self.htmlPart = htmlPart
            self.subject = subject
            self.textPart = textPart
        }
    }

}

extension PinpointClientTypes.SimpleEmailPart: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case charset = "Charset"
        case data = "Data"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let charset = self.charset {
            try encodeContainer.encode(charset, forKey: .charset)
        }
        if let data = self.data {
            try encodeContainer.encode(data, forKey: .data)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let charsetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .charset)
        charset = charsetDecoded
        let dataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .data)
        data = dataDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the subject or body of an email message, represented as textual email data and the applicable character set.
    public struct SimpleEmailPart: Swift.Equatable {
        /// The applicable character set for the message content.
        public var charset: Swift.String?
        /// The textual data of the message content.
        public var data: Swift.String?

        public init (
            charset: Swift.String? = nil,
            data: Swift.String? = nil
        )
        {
            self.charset = charset
            self.data = data
        }
    }

}

extension PinpointClientTypes {
    public enum SourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case any
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [SourceType] {
            return [
                .all,
                .any,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .any: return "ANY"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SourceType(rawValue: rawValue) ?? SourceType.sdkUnknown(rawValue)
        }
    }
}

extension PinpointClientTypes.StartCondition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case eventStartCondition = "EventStartCondition"
        case segmentStartCondition = "SegmentStartCondition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let eventStartCondition = self.eventStartCondition {
            try encodeContainer.encode(eventStartCondition, forKey: .eventStartCondition)
        }
        if let segmentStartCondition = self.segmentStartCondition {
            try encodeContainer.encode(segmentStartCondition, forKey: .segmentStartCondition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let eventStartConditionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EventStartCondition.self, forKey: .eventStartCondition)
        eventStartCondition = eventStartConditionDecoded
        let segmentStartConditionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentCondition.self, forKey: .segmentStartCondition)
        segmentStartCondition = segmentStartConditionDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the conditions for the first activity in a journey. This activity and its conditions determine which users are participants in a journey.
    public struct StartCondition: Swift.Equatable {
        /// The custom description of the condition.
        public var description: Swift.String?
        /// Specifies the settings for an event that causes a journey activity to start.
        public var eventStartCondition: PinpointClientTypes.EventStartCondition?
        /// The segment that's associated with the first activity in the journey. This segment determines which users are participants in the journey.
        public var segmentStartCondition: PinpointClientTypes.SegmentCondition?

        public init (
            description: Swift.String? = nil,
            eventStartCondition: PinpointClientTypes.EventStartCondition? = nil,
            segmentStartCondition: PinpointClientTypes.SegmentCondition? = nil
        )
        {
            self.description = description
            self.eventStartCondition = eventStartCondition
            self.segmentStartCondition = segmentStartCondition
        }
    }

}

extension PinpointClientTypes {
    public enum State: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case cancelled
        case closed
        case completed
        case draft
        case paused
        case sdkUnknown(Swift.String)

        public static var allCases: [State] {
            return [
                .active,
                .cancelled,
                .closed,
                .completed,
                .draft,
                .paused,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .cancelled: return "CANCELLED"
            case .closed: return "CLOSED"
            case .completed: return "COMPLETED"
            case .draft: return "DRAFT"
            case .paused: return "PAUSED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = State(rawValue: rawValue) ?? State.sdkUnknown(rawValue)
        }
    }
}

public struct TagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<TagResourceOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let tagsModel = input.operationInput.tagsModel {
                let tagsModeldata = try encoder.encode(tagsModel)
                let tagsModelbody = ClientRuntime.HttpBody.data(tagsModeldata)
                input.builder.withBody(tagsModelbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let tagsModeldata = "{}".data(using: .utf8)!
                    let tagsModelbody = ClientRuntime.HttpBody.data(tagsModeldata)
                    input.builder.withBody(tagsModelbody)
                }
            }
        } catch let err {
            throw SdkError<TagResourceOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagsModel = "TagsModel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tagsModel = self.tagsModel {
            try encodeContainer.encode(tagsModel, forKey: .tagsModel)
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/v1/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Specifies the tags (keys and values) for an application, campaign, message template, or segment.
    /// This member is required.
    public var tagsModel: PinpointClientTypes.TagsModel?

    public init (
        resourceArn: Swift.String? = nil,
        tagsModel: PinpointClientTypes.TagsModel? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagsModel = tagsModel
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let tagsModel: PinpointClientTypes.TagsModel?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagsModel = "TagsModel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsModelDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.TagsModel.self, forKey: .tagsModel)
        tagsModel = tagsModelDecoded
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension PinpointClientTypes.TagsModel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapOf__string0) in tags {
                try tagsContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PinpointClientTypes {
    /// Specifies the tags (keys and values) for an application, campaign, message template, or segment.
    public struct TagsModel: Swift.Equatable {
        /// A string-to-string map of key-value pairs that defines the tags for an application, campaign, message template, or segment. Each of these resources can have a maximum of 50 tags. Each tag consists of a required tag key and an associated tag value. The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.
        /// This member is required.
        public var tags: [Swift.String:Swift.String]?

        public init (
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.tags = tags
        }
    }

}

extension PinpointClientTypes.Template: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the name and version of the message template to use for the message.
    public struct Template: Swift.Equatable {
        /// The name of the message template to use for the message. If specified, this value must match the name of an existing message template.
        public var name: Swift.String?
        /// The unique identifier for the version of the message template to use for the message. If specified, this value must match the identifier for an existing template version. To retrieve a list of versions and version identifiers for a template, use the Template Versions resource. If you don't specify a value for this property, Amazon Pinpoint uses the active version of the template. The active version is typically the version of a template that's been most recently reviewed and approved for use, depending on your workflow. It isn't necessarily the latest version of a template.
        public var version: Swift.String?

        public init (
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.name = name
            self.version = version
        }
    }

}

extension PinpointClientTypes.TemplateActiveVersionRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies which version of a message template to use as the active version of the template.
    public struct TemplateActiveVersionRequest: Swift.Equatable {
        /// The version of the message template to use as the active version of the template. Valid values are: latest, for the most recent version of the template; or, the unique identifier for any existing version of the template. If you specify an identifier, the value must match the identifier for an existing template version. To retrieve a list of versions and version identifiers for a template, use the Template Versions resource.
        public var version: Swift.String?

        public init (
            version: Swift.String? = nil
        )
        {
            self.version = version
        }
    }

}

extension PinpointClientTypes.TemplateConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailTemplate = "EmailTemplate"
        case pushTemplate = "PushTemplate"
        case smsTemplate = "SMSTemplate"
        case voiceTemplate = "VoiceTemplate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let emailTemplate = self.emailTemplate {
            try encodeContainer.encode(emailTemplate, forKey: .emailTemplate)
        }
        if let pushTemplate = self.pushTemplate {
            try encodeContainer.encode(pushTemplate, forKey: .pushTemplate)
        }
        if let smsTemplate = self.smsTemplate {
            try encodeContainer.encode(smsTemplate, forKey: .smsTemplate)
        }
        if let voiceTemplate = self.voiceTemplate {
            try encodeContainer.encode(voiceTemplate, forKey: .voiceTemplate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailTemplateDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Template.self, forKey: .emailTemplate)
        emailTemplate = emailTemplateDecoded
        let pushTemplateDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Template.self, forKey: .pushTemplate)
        pushTemplate = pushTemplateDecoded
        let smsTemplateDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Template.self, forKey: .smsTemplate)
        smsTemplate = smsTemplateDecoded
        let voiceTemplateDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Template.self, forKey: .voiceTemplate)
        voiceTemplate = voiceTemplateDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the message template to use for the message, for each type of channel.
    public struct TemplateConfiguration: Swift.Equatable {
        /// The email template to use for the message.
        public var emailTemplate: PinpointClientTypes.Template?
        /// The push notification template to use for the message.
        public var pushTemplate: PinpointClientTypes.Template?
        /// The SMS template to use for the message.
        public var smsTemplate: PinpointClientTypes.Template?
        /// The voice template to use for the message. This object isn't supported for campaigns.
        public var voiceTemplate: PinpointClientTypes.Template?

        public init (
            emailTemplate: PinpointClientTypes.Template? = nil,
            pushTemplate: PinpointClientTypes.Template? = nil,
            smsTemplate: PinpointClientTypes.Template? = nil,
            voiceTemplate: PinpointClientTypes.Template? = nil
        )
        {
            self.emailTemplate = emailTemplate
            self.pushTemplate = pushTemplate
            self.smsTemplate = smsTemplate
            self.voiceTemplate = voiceTemplate
        }
    }

}

extension PinpointClientTypes.TemplateCreateMessageBody: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case message = "Message"
        case requestID = "RequestID"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let requestID = self.requestID {
            try encodeContainer.encode(requestID, forKey: .requestID)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestID)
        requestID = requestIDDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about a request to create a message template.
    public struct TemplateCreateMessageBody: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the message template that was created.
        public var arn: Swift.String?
        /// The message that's returned from the API for the request to create the message template.
        public var message: Swift.String?
        /// The unique identifier for the request to create the message template.
        public var requestID: Swift.String?

        public init (
            arn: Swift.String? = nil,
            message: Swift.String? = nil,
            requestID: Swift.String? = nil
        )
        {
            self.arn = arn
            self.message = message
            self.requestID = requestID
        }
    }

}

extension PinpointClientTypes.TemplateResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case defaultSubstitutions = "DefaultSubstitutions"
        case lastModifiedDate = "LastModifiedDate"
        case templateDescription = "TemplateDescription"
        case templateName = "TemplateName"
        case templateType = "TemplateType"
        case version = "Version"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let defaultSubstitutions = self.defaultSubstitutions {
            try encodeContainer.encode(defaultSubstitutions, forKey: .defaultSubstitutions)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let templateDescription = self.templateDescription {
            try encodeContainer.encode(templateDescription, forKey: .templateDescription)
        }
        if let templateName = self.templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
        if let templateType = self.templateType {
            try encodeContainer.encode(templateType.rawValue, forKey: .templateType)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapOf__string0) in tags {
                try tagsContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let defaultSubstitutionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultSubstitutions)
        defaultSubstitutions = defaultSubstitutionsDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let templateDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateDescription)
        templateDescription = templateDescriptionDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let templateTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.TemplateType.self, forKey: .templateType)
        templateType = templateTypeDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about a message template that's associated with your Amazon Pinpoint account.
    public struct TemplateResponse: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the message template. This value isn't included in a TemplateResponse object. To retrieve the ARN of a template, use the GetEmailTemplate, GetPushTemplate, GetSmsTemplate, or GetVoiceTemplate operation, depending on the type of template that you want to retrieve the ARN for.
        public var arn: Swift.String?
        /// The date, in ISO 8601 format, when the message template was created.
        /// This member is required.
        public var creationDate: Swift.String?
        /// The JSON object that specifies the default values that are used for message variables in the message template. This object isn't included in a TemplateResponse object. To retrieve this object for a template, use the GetEmailTemplate, GetPushTemplate, GetSmsTemplate, or GetVoiceTemplate operation, depending on the type of template that you want to retrieve the object for.
        public var defaultSubstitutions: Swift.String?
        /// The date, in ISO 8601 format, when the message template was last modified.
        /// This member is required.
        public var lastModifiedDate: Swift.String?
        /// A map of key-value pairs that identifies the tags that are associated with the message template. This object isn't included in a TemplateResponse object. To retrieve this object for a template, use the GetEmailTemplate, GetPushTemplate, GetSmsTemplate, or GetVoiceTemplate operation, depending on the type of template that you want to retrieve the object for.
        public var tags: [Swift.String:Swift.String]?
        /// The custom description of the message template. This value isn't included in a TemplateResponse object. To retrieve the description of a template, use the GetEmailTemplate, GetPushTemplate, GetSmsTemplate, or GetVoiceTemplate operation, depending on the type of template that you want to retrieve the description for.
        public var templateDescription: Swift.String?
        /// The name of the message template.
        /// This member is required.
        public var templateName: Swift.String?
        /// The type of channel that the message template is designed for. Possible values are: EMAIL, PUSH, SMS, and VOICE.
        /// This member is required.
        public var templateType: PinpointClientTypes.TemplateType?
        /// The unique identifier, as an integer, for the active version of the message template.
        public var version: Swift.String?

        public init (
            arn: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            defaultSubstitutions: Swift.String? = nil,
            lastModifiedDate: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            templateDescription: Swift.String? = nil,
            templateName: Swift.String? = nil,
            templateType: PinpointClientTypes.TemplateType? = nil,
            version: Swift.String? = nil
        )
        {
            self.arn = arn
            self.creationDate = creationDate
            self.defaultSubstitutions = defaultSubstitutions
            self.lastModifiedDate = lastModifiedDate
            self.tags = tags
            self.templateDescription = templateDescription
            self.templateName = templateName
            self.templateType = templateType
            self.version = version
        }
    }

}

extension PinpointClientTypes {
    public enum TemplateType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case email
        case inapp
        case push
        case sms
        case voice
        case sdkUnknown(Swift.String)

        public static var allCases: [TemplateType] {
            return [
                .email,
                .inapp,
                .push,
                .sms,
                .voice,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .email: return "EMAIL"
            case .inapp: return "INAPP"
            case .push: return "PUSH"
            case .sms: return "SMS"
            case .voice: return "VOICE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TemplateType(rawValue: rawValue) ?? TemplateType.sdkUnknown(rawValue)
        }
    }
}

extension PinpointClientTypes.TemplateVersionResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate = "CreationDate"
        case defaultSubstitutions = "DefaultSubstitutions"
        case lastModifiedDate = "LastModifiedDate"
        case templateDescription = "TemplateDescription"
        case templateName = "TemplateName"
        case templateType = "TemplateType"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let defaultSubstitutions = self.defaultSubstitutions {
            try encodeContainer.encode(defaultSubstitutions, forKey: .defaultSubstitutions)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let templateDescription = self.templateDescription {
            try encodeContainer.encode(templateDescription, forKey: .templateDescription)
        }
        if let templateName = self.templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
        if let templateType = self.templateType {
            try encodeContainer.encode(templateType, forKey: .templateType)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let defaultSubstitutionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultSubstitutions)
        defaultSubstitutions = defaultSubstitutionsDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let templateDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateDescription)
        templateDescription = templateDescriptionDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let templateTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateType)
        templateType = templateTypeDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about a specific version of a message template.
    public struct TemplateVersionResponse: Swift.Equatable {
        /// The date, in ISO 8601 format, when the version of the message template was created.
        /// This member is required.
        public var creationDate: Swift.String?
        /// A JSON object that specifies the default values that are used for message variables in the version of the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable.
        public var defaultSubstitutions: Swift.String?
        /// The date, in ISO 8601 format, when the version of the message template was last modified.
        /// This member is required.
        public var lastModifiedDate: Swift.String?
        /// The custom description of the version of the message template.
        public var templateDescription: Swift.String?
        /// The name of the message template.
        /// This member is required.
        public var templateName: Swift.String?
        /// The type of channel that the message template is designed for. Possible values are: EMAIL, PUSH, SMS, and VOICE.
        /// This member is required.
        public var templateType: Swift.String?
        /// The unique identifier for the version of the message template. This value is an integer that Amazon Pinpoint automatically increments and assigns to each new version of a template.
        public var version: Swift.String?

        public init (
            creationDate: Swift.String? = nil,
            defaultSubstitutions: Swift.String? = nil,
            lastModifiedDate: Swift.String? = nil,
            templateDescription: Swift.String? = nil,
            templateName: Swift.String? = nil,
            templateType: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.creationDate = creationDate
            self.defaultSubstitutions = defaultSubstitutions
            self.lastModifiedDate = lastModifiedDate
            self.templateDescription = templateDescription
            self.templateName = templateName
            self.templateType = templateType
            self.version = version
        }
    }

}

extension PinpointClientTypes.TemplateVersionsResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case item = "Item"
        case message = "Message"
        case nextToken = "NextToken"
        case requestID = "RequestID"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let item = item {
            var itemContainer = encodeContainer.nestedUnkeyedContainer(forKey: .item)
            for templateversionresponse0 in item {
                try itemContainer.encode(templateversionresponse0)
            }
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let requestID = self.requestID {
            try encodeContainer.encode(requestID, forKey: .requestID)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([PinpointClientTypes.TemplateVersionResponse?].self, forKey: .item)
        var itemDecoded0:[PinpointClientTypes.TemplateVersionResponse]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [PinpointClientTypes.TemplateVersionResponse]()
            for structure0 in itemContainer {
                if let structure0 = structure0 {
                    itemDecoded0?.append(structure0)
                }
            }
        }
        item = itemDecoded0
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let requestIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestID)
        requestID = requestIDDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about all the versions of a specific message template.
    public struct TemplateVersionsResponse: Swift.Equatable {
        /// An array of responses, one for each version of the message template.
        /// This member is required.
        public var item: [PinpointClientTypes.TemplateVersionResponse]?
        /// The message that's returned from the API for the request to retrieve information about all the versions of the message template.
        public var message: Swift.String?
        /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
        public var nextToken: Swift.String?
        /// The unique identifier for the request to retrieve information about all the versions of the message template.
        public var requestID: Swift.String?

        public init (
            item: [PinpointClientTypes.TemplateVersionResponse]? = nil,
            message: Swift.String? = nil,
            nextToken: Swift.String? = nil,
            requestID: Swift.String? = nil
        )
        {
            self.item = item
            self.message = message
            self.nextToken = nextToken
            self.requestID = requestID
        }
    }

}

extension PinpointClientTypes.TemplatesResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case item = "Item"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let item = item {
            var itemContainer = encodeContainer.nestedUnkeyedContainer(forKey: .item)
            for templateresponse0 in item {
                try itemContainer.encode(templateresponse0)
            }
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([PinpointClientTypes.TemplateResponse?].self, forKey: .item)
        var itemDecoded0:[PinpointClientTypes.TemplateResponse]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [PinpointClientTypes.TemplateResponse]()
            for structure0 in itemContainer {
                if let structure0 = structure0 {
                    itemDecoded0?.append(structure0)
                }
            }
        }
        item = itemDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about all the message templates that are associated with your Amazon Pinpoint account.
    public struct TemplatesResponse: Swift.Equatable {
        /// An array of responses, one for each message template that's associated with your Amazon Pinpoint account and meets any filter criteria that you specified in the request.
        /// This member is required.
        public var item: [PinpointClientTypes.TemplateResponse]?
        /// The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.
        public var nextToken: Swift.String?

        public init (
            item: [PinpointClientTypes.TemplateResponse]? = nil,
            nextToken: Swift.String? = nil
        )
        {
            self.item = item
            self.nextToken = nextToken
        }
    }

}

extension TooManyRequestsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TooManyRequestsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestID = output.requestID
        } else {
            self.message = nil
            self.requestID = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Provides information about an API request or response.
public struct TooManyRequestsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that's returned from the API.
    public var message: Swift.String?
    /// The unique identifier for the request or response.
    public var requestID: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestID: Swift.String? = nil
    )
    {
        self.message = message
        self.requestID = requestID
    }
}

struct TooManyRequestsExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let requestID: Swift.String?
}

extension TooManyRequestsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestID = "RequestID"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestID)
        requestID = requestIDDecoded
    }
}

extension PinpointClientTypes.TreatmentResource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customDeliveryConfiguration = "CustomDeliveryConfiguration"
        case id = "Id"
        case messageConfiguration = "MessageConfiguration"
        case schedule = "Schedule"
        case sizePercent = "SizePercent"
        case state = "State"
        case templateConfiguration = "TemplateConfiguration"
        case treatmentDescription = "TreatmentDescription"
        case treatmentName = "TreatmentName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customDeliveryConfiguration = self.customDeliveryConfiguration {
            try encodeContainer.encode(customDeliveryConfiguration, forKey: .customDeliveryConfiguration)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let messageConfiguration = self.messageConfiguration {
            try encodeContainer.encode(messageConfiguration, forKey: .messageConfiguration)
        }
        if let schedule = self.schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let sizePercent = self.sizePercent {
            try encodeContainer.encode(sizePercent, forKey: .sizePercent)
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let templateConfiguration = self.templateConfiguration {
            try encodeContainer.encode(templateConfiguration, forKey: .templateConfiguration)
        }
        if let treatmentDescription = self.treatmentDescription {
            try encodeContainer.encode(treatmentDescription, forKey: .treatmentDescription)
        }
        if let treatmentName = self.treatmentName {
            try encodeContainer.encode(treatmentName, forKey: .treatmentName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customDeliveryConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CustomDeliveryConfiguration.self, forKey: .customDeliveryConfiguration)
        customDeliveryConfiguration = customDeliveryConfigurationDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let messageConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageConfiguration.self, forKey: .messageConfiguration)
        messageConfiguration = messageConfigurationDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Schedule.self, forKey: .schedule)
        schedule = scheduleDecoded
        let sizePercentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizePercent)
        sizePercent = sizePercentDecoded
        let stateDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignState.self, forKey: .state)
        state = stateDecoded
        let templateConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.TemplateConfiguration.self, forKey: .templateConfiguration)
        templateConfiguration = templateConfigurationDecoded
        let treatmentDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .treatmentDescription)
        treatmentDescription = treatmentDescriptionDecoded
        let treatmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .treatmentName)
        treatmentName = treatmentNameDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the settings for a campaign treatment. A treatment is a variation of a campaign that's used for A/B testing of a campaign.
    public struct TreatmentResource: Swift.Equatable {
        /// The delivery configuration settings for sending the treatment through a custom channel. This object is required if the MessageConfiguration object for the treatment specifies a CustomMessage object.
        public var customDeliveryConfiguration: PinpointClientTypes.CustomDeliveryConfiguration?
        /// The unique identifier for the treatment.
        /// This member is required.
        public var id: Swift.String?
        /// The message configuration settings for the treatment.
        public var messageConfiguration: PinpointClientTypes.MessageConfiguration?
        /// The schedule settings for the treatment.
        public var schedule: PinpointClientTypes.Schedule?
        /// The allocated percentage of users (segment members) that the treatment is sent to.
        /// This member is required.
        public var sizePercent: Swift.Int?
        /// The current status of the treatment.
        public var state: PinpointClientTypes.CampaignState?
        /// The message template to use for the treatment.
        public var templateConfiguration: PinpointClientTypes.TemplateConfiguration?
        /// The custom description of the treatment.
        public var treatmentDescription: Swift.String?
        /// The custom name of the treatment.
        public var treatmentName: Swift.String?

        public init (
            customDeliveryConfiguration: PinpointClientTypes.CustomDeliveryConfiguration? = nil,
            id: Swift.String? = nil,
            messageConfiguration: PinpointClientTypes.MessageConfiguration? = nil,
            schedule: PinpointClientTypes.Schedule? = nil,
            sizePercent: Swift.Int? = nil,
            state: PinpointClientTypes.CampaignState? = nil,
            templateConfiguration: PinpointClientTypes.TemplateConfiguration? = nil,
            treatmentDescription: Swift.String? = nil,
            treatmentName: Swift.String? = nil
        )
        {
            self.customDeliveryConfiguration = customDeliveryConfiguration
            self.id = id
            self.messageConfiguration = messageConfiguration
            self.schedule = schedule
            self.sizePercent = sizePercent
            self.state = state
            self.templateConfiguration = templateConfiguration
            self.treatmentDescription = treatmentDescription
            self.treatmentName = treatmentName
        }
    }

}

extension PinpointClientTypes {
    public enum ModelType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case any
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelType] {
            return [
                .all,
                .any,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .any: return "ANY"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelType(rawValue: rawValue) ?? ModelType.sdkUnknown(rawValue)
        }
    }
}

extension UntagResourceInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let tagKeys = tagKeys else {
                let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            tagKeys.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                items.append(queryItem)
            }
            return items
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/v1/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The key of the tag to remove from the resource. To remove multiple tags, append the tagKeys parameter and argument for each additional tag to remove, separated by an ampersand (&).
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
}

extension UntagResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

public struct UpdateAdmChannelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAdmChannelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateAdmChannelInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateAdmChannelOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let admChannelRequest = input.operationInput.admChannelRequest {
                let admChannelRequestdata = try encoder.encode(admChannelRequest)
                let admChannelRequestbody = ClientRuntime.HttpBody.data(admChannelRequestdata)
                input.builder.withBody(admChannelRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let admChannelRequestdata = "{}".data(using: .utf8)!
                    let admChannelRequestbody = ClientRuntime.HttpBody.data(admChannelRequestdata)
                    input.builder.withBody(admChannelRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateAdmChannelOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateAdmChannelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAdmChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateAdmChannelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case admChannelRequest = "ADMChannelRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let admChannelRequest = self.admChannelRequest {
            try encodeContainer.encode(admChannelRequest, forKey: .admChannelRequest)
        }
    }
}

extension UpdateAdmChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/adm"
    }
}

public struct UpdateAdmChannelInput: Swift.Equatable {
    /// Specifies the status and settings of the ADM (Amazon Device Messaging) channel for an application.
    /// This member is required.
    public var admChannelRequest: PinpointClientTypes.ADMChannelRequest?
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        admChannelRequest: PinpointClientTypes.ADMChannelRequest? = nil,
        applicationId: Swift.String? = nil
    )
    {
        self.admChannelRequest = admChannelRequest
        self.applicationId = applicationId
    }
}

struct UpdateAdmChannelInputBody: Swift.Equatable {
    let admChannelRequest: PinpointClientTypes.ADMChannelRequest?
}

extension UpdateAdmChannelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case admChannelRequest = "ADMChannelRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let admChannelRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ADMChannelRequest.self, forKey: .admChannelRequest)
        admChannelRequest = admChannelRequestDecoded
    }
}

extension UpdateAdmChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateAdmChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateAdmChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateAdmChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.ADMChannelResponse = try responseDecoder.decode(responseBody: data)
                self.admChannelResponse = output
            } else {
                self.admChannelResponse = nil
            }
        } else {
            self.admChannelResponse = nil
        }
    }
}

public struct UpdateAdmChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the ADM (Amazon Device Messaging) channel for an application.
    /// This member is required.
    public var admChannelResponse: PinpointClientTypes.ADMChannelResponse?

    public init (
        admChannelResponse: PinpointClientTypes.ADMChannelResponse? = nil
    )
    {
        self.admChannelResponse = admChannelResponse
    }
}

struct UpdateAdmChannelOutputResponseBody: Swift.Equatable {
    let admChannelResponse: PinpointClientTypes.ADMChannelResponse?
}

extension UpdateAdmChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case admChannelResponse = "ADMChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let admChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ADMChannelResponse.self, forKey: .admChannelResponse)
        admChannelResponse = admChannelResponseDecoded
    }
}

public struct UpdateApnsChannelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateApnsChannelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateApnsChannelInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateApnsChannelOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let apnsChannelRequest = input.operationInput.apnsChannelRequest {
                let apnsChannelRequestdata = try encoder.encode(apnsChannelRequest)
                let apnsChannelRequestbody = ClientRuntime.HttpBody.data(apnsChannelRequestdata)
                input.builder.withBody(apnsChannelRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let apnsChannelRequestdata = "{}".data(using: .utf8)!
                    let apnsChannelRequestbody = ClientRuntime.HttpBody.data(apnsChannelRequestdata)
                    input.builder.withBody(apnsChannelRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateApnsChannelOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateApnsChannelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateApnsChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateApnsChannelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apnsChannelRequest = "APNSChannelRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let apnsChannelRequest = self.apnsChannelRequest {
            try encodeContainer.encode(apnsChannelRequest, forKey: .apnsChannelRequest)
        }
    }
}

extension UpdateApnsChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/apns"
    }
}

public struct UpdateApnsChannelInput: Swift.Equatable {
    /// Specifies the status and settings of the APNs (Apple Push Notification service) channel for an application.
    /// This member is required.
    public var apnsChannelRequest: PinpointClientTypes.APNSChannelRequest?
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        apnsChannelRequest: PinpointClientTypes.APNSChannelRequest? = nil,
        applicationId: Swift.String? = nil
    )
    {
        self.apnsChannelRequest = apnsChannelRequest
        self.applicationId = applicationId
    }
}

struct UpdateApnsChannelInputBody: Swift.Equatable {
    let apnsChannelRequest: PinpointClientTypes.APNSChannelRequest?
}

extension UpdateApnsChannelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apnsChannelRequest = "APNSChannelRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apnsChannelRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.APNSChannelRequest.self, forKey: .apnsChannelRequest)
        apnsChannelRequest = apnsChannelRequestDecoded
    }
}

extension UpdateApnsChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateApnsChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateApnsChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateApnsChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.APNSChannelResponse = try responseDecoder.decode(responseBody: data)
                self.apnsChannelResponse = output
            } else {
                self.apnsChannelResponse = nil
            }
        } else {
            self.apnsChannelResponse = nil
        }
    }
}

public struct UpdateApnsChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the APNs (Apple Push Notification service) channel for an application.
    /// This member is required.
    public var apnsChannelResponse: PinpointClientTypes.APNSChannelResponse?

    public init (
        apnsChannelResponse: PinpointClientTypes.APNSChannelResponse? = nil
    )
    {
        self.apnsChannelResponse = apnsChannelResponse
    }
}

struct UpdateApnsChannelOutputResponseBody: Swift.Equatable {
    let apnsChannelResponse: PinpointClientTypes.APNSChannelResponse?
}

extension UpdateApnsChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apnsChannelResponse = "APNSChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apnsChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.APNSChannelResponse.self, forKey: .apnsChannelResponse)
        apnsChannelResponse = apnsChannelResponseDecoded
    }
}

public struct UpdateApnsSandboxChannelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateApnsSandboxChannelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateApnsSandboxChannelInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateApnsSandboxChannelOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let apnsSandboxChannelRequest = input.operationInput.apnsSandboxChannelRequest {
                let apnsSandboxChannelRequestdata = try encoder.encode(apnsSandboxChannelRequest)
                let apnsSandboxChannelRequestbody = ClientRuntime.HttpBody.data(apnsSandboxChannelRequestdata)
                input.builder.withBody(apnsSandboxChannelRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let apnsSandboxChannelRequestdata = "{}".data(using: .utf8)!
                    let apnsSandboxChannelRequestbody = ClientRuntime.HttpBody.data(apnsSandboxChannelRequestdata)
                    input.builder.withBody(apnsSandboxChannelRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateApnsSandboxChannelOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateApnsSandboxChannelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateApnsSandboxChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateApnsSandboxChannelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apnsSandboxChannelRequest = "APNSSandboxChannelRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let apnsSandboxChannelRequest = self.apnsSandboxChannelRequest {
            try encodeContainer.encode(apnsSandboxChannelRequest, forKey: .apnsSandboxChannelRequest)
        }
    }
}

extension UpdateApnsSandboxChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/apns_sandbox"
    }
}

public struct UpdateApnsSandboxChannelInput: Swift.Equatable {
    /// Specifies the status and settings of the APNs (Apple Push Notification service) sandbox channel for an application.
    /// This member is required.
    public var apnsSandboxChannelRequest: PinpointClientTypes.APNSSandboxChannelRequest?
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        apnsSandboxChannelRequest: PinpointClientTypes.APNSSandboxChannelRequest? = nil,
        applicationId: Swift.String? = nil
    )
    {
        self.apnsSandboxChannelRequest = apnsSandboxChannelRequest
        self.applicationId = applicationId
    }
}

struct UpdateApnsSandboxChannelInputBody: Swift.Equatable {
    let apnsSandboxChannelRequest: PinpointClientTypes.APNSSandboxChannelRequest?
}

extension UpdateApnsSandboxChannelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apnsSandboxChannelRequest = "APNSSandboxChannelRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apnsSandboxChannelRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.APNSSandboxChannelRequest.self, forKey: .apnsSandboxChannelRequest)
        apnsSandboxChannelRequest = apnsSandboxChannelRequestDecoded
    }
}

extension UpdateApnsSandboxChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateApnsSandboxChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateApnsSandboxChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateApnsSandboxChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.APNSSandboxChannelResponse = try responseDecoder.decode(responseBody: data)
                self.apnsSandboxChannelResponse = output
            } else {
                self.apnsSandboxChannelResponse = nil
            }
        } else {
            self.apnsSandboxChannelResponse = nil
        }
    }
}

public struct UpdateApnsSandboxChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the APNs (Apple Push Notification service) sandbox channel for an application.
    /// This member is required.
    public var apnsSandboxChannelResponse: PinpointClientTypes.APNSSandboxChannelResponse?

    public init (
        apnsSandboxChannelResponse: PinpointClientTypes.APNSSandboxChannelResponse? = nil
    )
    {
        self.apnsSandboxChannelResponse = apnsSandboxChannelResponse
    }
}

struct UpdateApnsSandboxChannelOutputResponseBody: Swift.Equatable {
    let apnsSandboxChannelResponse: PinpointClientTypes.APNSSandboxChannelResponse?
}

extension UpdateApnsSandboxChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apnsSandboxChannelResponse = "APNSSandboxChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apnsSandboxChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.APNSSandboxChannelResponse.self, forKey: .apnsSandboxChannelResponse)
        apnsSandboxChannelResponse = apnsSandboxChannelResponseDecoded
    }
}

public struct UpdateApnsVoipChannelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateApnsVoipChannelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateApnsVoipChannelInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateApnsVoipChannelOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let apnsVoipChannelRequest = input.operationInput.apnsVoipChannelRequest {
                let apnsVoipChannelRequestdata = try encoder.encode(apnsVoipChannelRequest)
                let apnsVoipChannelRequestbody = ClientRuntime.HttpBody.data(apnsVoipChannelRequestdata)
                input.builder.withBody(apnsVoipChannelRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let apnsVoipChannelRequestdata = "{}".data(using: .utf8)!
                    let apnsVoipChannelRequestbody = ClientRuntime.HttpBody.data(apnsVoipChannelRequestdata)
                    input.builder.withBody(apnsVoipChannelRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateApnsVoipChannelOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateApnsVoipChannelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateApnsVoipChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateApnsVoipChannelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apnsVoipChannelRequest = "APNSVoipChannelRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let apnsVoipChannelRequest = self.apnsVoipChannelRequest {
            try encodeContainer.encode(apnsVoipChannelRequest, forKey: .apnsVoipChannelRequest)
        }
    }
}

extension UpdateApnsVoipChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/apns_voip"
    }
}

public struct UpdateApnsVoipChannelInput: Swift.Equatable {
    /// Specifies the status and settings of the APNs (Apple Push Notification service) VoIP channel for an application.
    /// This member is required.
    public var apnsVoipChannelRequest: PinpointClientTypes.APNSVoipChannelRequest?
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        apnsVoipChannelRequest: PinpointClientTypes.APNSVoipChannelRequest? = nil,
        applicationId: Swift.String? = nil
    )
    {
        self.apnsVoipChannelRequest = apnsVoipChannelRequest
        self.applicationId = applicationId
    }
}

struct UpdateApnsVoipChannelInputBody: Swift.Equatable {
    let apnsVoipChannelRequest: PinpointClientTypes.APNSVoipChannelRequest?
}

extension UpdateApnsVoipChannelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apnsVoipChannelRequest = "APNSVoipChannelRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apnsVoipChannelRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.APNSVoipChannelRequest.self, forKey: .apnsVoipChannelRequest)
        apnsVoipChannelRequest = apnsVoipChannelRequestDecoded
    }
}

extension UpdateApnsVoipChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateApnsVoipChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateApnsVoipChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateApnsVoipChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.APNSVoipChannelResponse = try responseDecoder.decode(responseBody: data)
                self.apnsVoipChannelResponse = output
            } else {
                self.apnsVoipChannelResponse = nil
            }
        } else {
            self.apnsVoipChannelResponse = nil
        }
    }
}

public struct UpdateApnsVoipChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the APNs (Apple Push Notification service) VoIP channel for an application.
    /// This member is required.
    public var apnsVoipChannelResponse: PinpointClientTypes.APNSVoipChannelResponse?

    public init (
        apnsVoipChannelResponse: PinpointClientTypes.APNSVoipChannelResponse? = nil
    )
    {
        self.apnsVoipChannelResponse = apnsVoipChannelResponse
    }
}

struct UpdateApnsVoipChannelOutputResponseBody: Swift.Equatable {
    let apnsVoipChannelResponse: PinpointClientTypes.APNSVoipChannelResponse?
}

extension UpdateApnsVoipChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apnsVoipChannelResponse = "APNSVoipChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apnsVoipChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.APNSVoipChannelResponse.self, forKey: .apnsVoipChannelResponse)
        apnsVoipChannelResponse = apnsVoipChannelResponseDecoded
    }
}

public struct UpdateApnsVoipSandboxChannelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateApnsVoipSandboxChannelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateApnsVoipSandboxChannelInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateApnsVoipSandboxChannelOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let apnsVoipSandboxChannelRequest = input.operationInput.apnsVoipSandboxChannelRequest {
                let apnsVoipSandboxChannelRequestdata = try encoder.encode(apnsVoipSandboxChannelRequest)
                let apnsVoipSandboxChannelRequestbody = ClientRuntime.HttpBody.data(apnsVoipSandboxChannelRequestdata)
                input.builder.withBody(apnsVoipSandboxChannelRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let apnsVoipSandboxChannelRequestdata = "{}".data(using: .utf8)!
                    let apnsVoipSandboxChannelRequestbody = ClientRuntime.HttpBody.data(apnsVoipSandboxChannelRequestdata)
                    input.builder.withBody(apnsVoipSandboxChannelRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateApnsVoipSandboxChannelOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateApnsVoipSandboxChannelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateApnsVoipSandboxChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateApnsVoipSandboxChannelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apnsVoipSandboxChannelRequest = "APNSVoipSandboxChannelRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let apnsVoipSandboxChannelRequest = self.apnsVoipSandboxChannelRequest {
            try encodeContainer.encode(apnsVoipSandboxChannelRequest, forKey: .apnsVoipSandboxChannelRequest)
        }
    }
}

extension UpdateApnsVoipSandboxChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/apns_voip_sandbox"
    }
}

public struct UpdateApnsVoipSandboxChannelInput: Swift.Equatable {
    /// Specifies the status and settings of the APNs (Apple Push Notification service) VoIP sandbox channel for an application.
    /// This member is required.
    public var apnsVoipSandboxChannelRequest: PinpointClientTypes.APNSVoipSandboxChannelRequest?
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?

    public init (
        apnsVoipSandboxChannelRequest: PinpointClientTypes.APNSVoipSandboxChannelRequest? = nil,
        applicationId: Swift.String? = nil
    )
    {
        self.apnsVoipSandboxChannelRequest = apnsVoipSandboxChannelRequest
        self.applicationId = applicationId
    }
}

struct UpdateApnsVoipSandboxChannelInputBody: Swift.Equatable {
    let apnsVoipSandboxChannelRequest: PinpointClientTypes.APNSVoipSandboxChannelRequest?
}

extension UpdateApnsVoipSandboxChannelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apnsVoipSandboxChannelRequest = "APNSVoipSandboxChannelRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apnsVoipSandboxChannelRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.APNSVoipSandboxChannelRequest.self, forKey: .apnsVoipSandboxChannelRequest)
        apnsVoipSandboxChannelRequest = apnsVoipSandboxChannelRequestDecoded
    }
}

extension UpdateApnsVoipSandboxChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateApnsVoipSandboxChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateApnsVoipSandboxChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateApnsVoipSandboxChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.APNSVoipSandboxChannelResponse = try responseDecoder.decode(responseBody: data)
                self.apnsVoipSandboxChannelResponse = output
            } else {
                self.apnsVoipSandboxChannelResponse = nil
            }
        } else {
            self.apnsVoipSandboxChannelResponse = nil
        }
    }
}

public struct UpdateApnsVoipSandboxChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the APNs (Apple Push Notification service) VoIP sandbox channel for an application.
    /// This member is required.
    public var apnsVoipSandboxChannelResponse: PinpointClientTypes.APNSVoipSandboxChannelResponse?

    public init (
        apnsVoipSandboxChannelResponse: PinpointClientTypes.APNSVoipSandboxChannelResponse? = nil
    )
    {
        self.apnsVoipSandboxChannelResponse = apnsVoipSandboxChannelResponse
    }
}

struct UpdateApnsVoipSandboxChannelOutputResponseBody: Swift.Equatable {
    let apnsVoipSandboxChannelResponse: PinpointClientTypes.APNSVoipSandboxChannelResponse?
}

extension UpdateApnsVoipSandboxChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apnsVoipSandboxChannelResponse = "APNSVoipSandboxChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apnsVoipSandboxChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.APNSVoipSandboxChannelResponse.self, forKey: .apnsVoipSandboxChannelResponse)
        apnsVoipSandboxChannelResponse = apnsVoipSandboxChannelResponseDecoded
    }
}

public struct UpdateApplicationSettingsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateApplicationSettingsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateApplicationSettingsInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateApplicationSettingsOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let writeApplicationSettingsRequest = input.operationInput.writeApplicationSettingsRequest {
                let writeApplicationSettingsRequestdata = try encoder.encode(writeApplicationSettingsRequest)
                let writeApplicationSettingsRequestbody = ClientRuntime.HttpBody.data(writeApplicationSettingsRequestdata)
                input.builder.withBody(writeApplicationSettingsRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let writeApplicationSettingsRequestdata = "{}".data(using: .utf8)!
                    let writeApplicationSettingsRequestbody = ClientRuntime.HttpBody.data(writeApplicationSettingsRequestdata)
                    input.builder.withBody(writeApplicationSettingsRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateApplicationSettingsOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateApplicationSettingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateApplicationSettingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateApplicationSettingsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case writeApplicationSettingsRequest = "WriteApplicationSettingsRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let writeApplicationSettingsRequest = self.writeApplicationSettingsRequest {
            try encodeContainer.encode(writeApplicationSettingsRequest, forKey: .writeApplicationSettingsRequest)
        }
    }
}

extension UpdateApplicationSettingsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/settings"
    }
}

public struct UpdateApplicationSettingsInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// Specifies the default settings for an application.
    /// This member is required.
    public var writeApplicationSettingsRequest: PinpointClientTypes.WriteApplicationSettingsRequest?

    public init (
        applicationId: Swift.String? = nil,
        writeApplicationSettingsRequest: PinpointClientTypes.WriteApplicationSettingsRequest? = nil
    )
    {
        self.applicationId = applicationId
        self.writeApplicationSettingsRequest = writeApplicationSettingsRequest
    }
}

struct UpdateApplicationSettingsInputBody: Swift.Equatable {
    let writeApplicationSettingsRequest: PinpointClientTypes.WriteApplicationSettingsRequest?
}

extension UpdateApplicationSettingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case writeApplicationSettingsRequest = "WriteApplicationSettingsRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let writeApplicationSettingsRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.WriteApplicationSettingsRequest.self, forKey: .writeApplicationSettingsRequest)
        writeApplicationSettingsRequest = writeApplicationSettingsRequestDecoded
    }
}

extension UpdateApplicationSettingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateApplicationSettingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateApplicationSettingsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateApplicationSettingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.ApplicationSettingsResource = try responseDecoder.decode(responseBody: data)
                self.applicationSettingsResource = output
            } else {
                self.applicationSettingsResource = nil
            }
        } else {
            self.applicationSettingsResource = nil
        }
    }
}

public struct UpdateApplicationSettingsOutputResponse: Swift.Equatable {
    /// Provides information about an application, including the default settings for an application.
    /// This member is required.
    public var applicationSettingsResource: PinpointClientTypes.ApplicationSettingsResource?

    public init (
        applicationSettingsResource: PinpointClientTypes.ApplicationSettingsResource? = nil
    )
    {
        self.applicationSettingsResource = applicationSettingsResource
    }
}

struct UpdateApplicationSettingsOutputResponseBody: Swift.Equatable {
    let applicationSettingsResource: PinpointClientTypes.ApplicationSettingsResource?
}

extension UpdateApplicationSettingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationSettingsResource = "ApplicationSettingsResource"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationSettingsResourceDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ApplicationSettingsResource.self, forKey: .applicationSettingsResource)
        applicationSettingsResource = applicationSettingsResourceDecoded
    }
}

extension PinpointClientTypes.UpdateAttributesRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blacklist = "Blacklist"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blacklist = blacklist {
            var blacklistContainer = encodeContainer.nestedUnkeyedContainer(forKey: .blacklist)
            for __string0 in blacklist {
                try blacklistContainer.encode(__string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blacklistContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .blacklist)
        var blacklistDecoded0:[Swift.String]? = nil
        if let blacklistContainer = blacklistContainer {
            blacklistDecoded0 = [Swift.String]()
            for string0 in blacklistContainer {
                if let string0 = string0 {
                    blacklistDecoded0?.append(string0)
                }
            }
        }
        blacklist = blacklistDecoded0
    }
}

extension PinpointClientTypes {
    /// Specifies one or more attributes to remove from all the endpoints that are associated with an application.
    public struct UpdateAttributesRequest: Swift.Equatable {
        /// An array of the attributes to remove from all the endpoints that are associated with the application. The array can specify the complete, exact name of each attribute to remove or it can specify a glob pattern that an attribute name must match in order for the attribute to be removed.
        public var blacklist: [Swift.String]?

        public init (
            blacklist: [Swift.String]? = nil
        )
        {
            self.blacklist = blacklist
        }
    }

}

public struct UpdateBaiduChannelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateBaiduChannelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateBaiduChannelInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateBaiduChannelOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let baiduChannelRequest = input.operationInput.baiduChannelRequest {
                let baiduChannelRequestdata = try encoder.encode(baiduChannelRequest)
                let baiduChannelRequestbody = ClientRuntime.HttpBody.data(baiduChannelRequestdata)
                input.builder.withBody(baiduChannelRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let baiduChannelRequestdata = "{}".data(using: .utf8)!
                    let baiduChannelRequestbody = ClientRuntime.HttpBody.data(baiduChannelRequestdata)
                    input.builder.withBody(baiduChannelRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateBaiduChannelOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateBaiduChannelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateBaiduChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateBaiduChannelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baiduChannelRequest = "BaiduChannelRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baiduChannelRequest = self.baiduChannelRequest {
            try encodeContainer.encode(baiduChannelRequest, forKey: .baiduChannelRequest)
        }
    }
}

extension UpdateBaiduChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/baidu"
    }
}

public struct UpdateBaiduChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// Specifies the status and settings of the Baidu (Baidu Cloud Push) channel for an application.
    /// This member is required.
    public var baiduChannelRequest: PinpointClientTypes.BaiduChannelRequest?

    public init (
        applicationId: Swift.String? = nil,
        baiduChannelRequest: PinpointClientTypes.BaiduChannelRequest? = nil
    )
    {
        self.applicationId = applicationId
        self.baiduChannelRequest = baiduChannelRequest
    }
}

struct UpdateBaiduChannelInputBody: Swift.Equatable {
    let baiduChannelRequest: PinpointClientTypes.BaiduChannelRequest?
}

extension UpdateBaiduChannelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baiduChannelRequest = "BaiduChannelRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let baiduChannelRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.BaiduChannelRequest.self, forKey: .baiduChannelRequest)
        baiduChannelRequest = baiduChannelRequestDecoded
    }
}

extension UpdateBaiduChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateBaiduChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateBaiduChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateBaiduChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.BaiduChannelResponse = try responseDecoder.decode(responseBody: data)
                self.baiduChannelResponse = output
            } else {
                self.baiduChannelResponse = nil
            }
        } else {
            self.baiduChannelResponse = nil
        }
    }
}

public struct UpdateBaiduChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the Baidu (Baidu Cloud Push) channel for an application.
    /// This member is required.
    public var baiduChannelResponse: PinpointClientTypes.BaiduChannelResponse?

    public init (
        baiduChannelResponse: PinpointClientTypes.BaiduChannelResponse? = nil
    )
    {
        self.baiduChannelResponse = baiduChannelResponse
    }
}

struct UpdateBaiduChannelOutputResponseBody: Swift.Equatable {
    let baiduChannelResponse: PinpointClientTypes.BaiduChannelResponse?
}

extension UpdateBaiduChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baiduChannelResponse = "BaiduChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let baiduChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.BaiduChannelResponse.self, forKey: .baiduChannelResponse)
        baiduChannelResponse = baiduChannelResponseDecoded
    }
}

public struct UpdateCampaignInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCampaignInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateCampaignInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateCampaignOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let writeCampaignRequest = input.operationInput.writeCampaignRequest {
                let writeCampaignRequestdata = try encoder.encode(writeCampaignRequest)
                let writeCampaignRequestbody = ClientRuntime.HttpBody.data(writeCampaignRequestdata)
                input.builder.withBody(writeCampaignRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let writeCampaignRequestdata = "{}".data(using: .utf8)!
                    let writeCampaignRequestbody = ClientRuntime.HttpBody.data(writeCampaignRequestdata)
                    input.builder.withBody(writeCampaignRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateCampaignOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateCampaignInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCampaignOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateCampaignInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case writeCampaignRequest = "WriteCampaignRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let writeCampaignRequest = self.writeCampaignRequest {
            try encodeContainer.encode(writeCampaignRequest, forKey: .writeCampaignRequest)
        }
    }
}

extension UpdateCampaignInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let campaignId = campaignId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/campaigns/\(campaignId.urlPercentEncoding())"
    }
}

public struct UpdateCampaignInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the campaign.
    /// This member is required.
    public var campaignId: Swift.String?
    /// Specifies the configuration and other settings for a campaign.
    /// This member is required.
    public var writeCampaignRequest: PinpointClientTypes.WriteCampaignRequest?

    public init (
        applicationId: Swift.String? = nil,
        campaignId: Swift.String? = nil,
        writeCampaignRequest: PinpointClientTypes.WriteCampaignRequest? = nil
    )
    {
        self.applicationId = applicationId
        self.campaignId = campaignId
        self.writeCampaignRequest = writeCampaignRequest
    }
}

struct UpdateCampaignInputBody: Swift.Equatable {
    let writeCampaignRequest: PinpointClientTypes.WriteCampaignRequest?
}

extension UpdateCampaignInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case writeCampaignRequest = "WriteCampaignRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let writeCampaignRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.WriteCampaignRequest.self, forKey: .writeCampaignRequest)
        writeCampaignRequest = writeCampaignRequestDecoded
    }
}

extension UpdateCampaignOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateCampaignOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateCampaignOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateCampaignOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.CampaignResponse = try responseDecoder.decode(responseBody: data)
                self.campaignResponse = output
            } else {
                self.campaignResponse = nil
            }
        } else {
            self.campaignResponse = nil
        }
    }
}

public struct UpdateCampaignOutputResponse: Swift.Equatable {
    /// Provides information about the status, configuration, and other settings for a campaign.
    /// This member is required.
    public var campaignResponse: PinpointClientTypes.CampaignResponse?

    public init (
        campaignResponse: PinpointClientTypes.CampaignResponse? = nil
    )
    {
        self.campaignResponse = campaignResponse
    }
}

struct UpdateCampaignOutputResponseBody: Swift.Equatable {
    let campaignResponse: PinpointClientTypes.CampaignResponse?
}

extension UpdateCampaignOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case campaignResponse = "CampaignResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let campaignResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignResponse.self, forKey: .campaignResponse)
        campaignResponse = campaignResponseDecoded
    }
}

public struct UpdateEmailChannelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateEmailChannelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateEmailChannelInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateEmailChannelOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let emailChannelRequest = input.operationInput.emailChannelRequest {
                let emailChannelRequestdata = try encoder.encode(emailChannelRequest)
                let emailChannelRequestbody = ClientRuntime.HttpBody.data(emailChannelRequestdata)
                input.builder.withBody(emailChannelRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let emailChannelRequestdata = "{}".data(using: .utf8)!
                    let emailChannelRequestbody = ClientRuntime.HttpBody.data(emailChannelRequestdata)
                    input.builder.withBody(emailChannelRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateEmailChannelOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateEmailChannelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateEmailChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateEmailChannelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailChannelRequest = "EmailChannelRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let emailChannelRequest = self.emailChannelRequest {
            try encodeContainer.encode(emailChannelRequest, forKey: .emailChannelRequest)
        }
    }
}

extension UpdateEmailChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/email"
    }
}

public struct UpdateEmailChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// Specifies the status and settings of the email channel for an application.
    /// This member is required.
    public var emailChannelRequest: PinpointClientTypes.EmailChannelRequest?

    public init (
        applicationId: Swift.String? = nil,
        emailChannelRequest: PinpointClientTypes.EmailChannelRequest? = nil
    )
    {
        self.applicationId = applicationId
        self.emailChannelRequest = emailChannelRequest
    }
}

struct UpdateEmailChannelInputBody: Swift.Equatable {
    let emailChannelRequest: PinpointClientTypes.EmailChannelRequest?
}

extension UpdateEmailChannelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailChannelRequest = "EmailChannelRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailChannelRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EmailChannelRequest.self, forKey: .emailChannelRequest)
        emailChannelRequest = emailChannelRequestDecoded
    }
}

extension UpdateEmailChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateEmailChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateEmailChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateEmailChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.EmailChannelResponse = try responseDecoder.decode(responseBody: data)
                self.emailChannelResponse = output
            } else {
                self.emailChannelResponse = nil
            }
        } else {
            self.emailChannelResponse = nil
        }
    }
}

public struct UpdateEmailChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the email channel for an application.
    /// This member is required.
    public var emailChannelResponse: PinpointClientTypes.EmailChannelResponse?

    public init (
        emailChannelResponse: PinpointClientTypes.EmailChannelResponse? = nil
    )
    {
        self.emailChannelResponse = emailChannelResponse
    }
}

struct UpdateEmailChannelOutputResponseBody: Swift.Equatable {
    let emailChannelResponse: PinpointClientTypes.EmailChannelResponse?
}

extension UpdateEmailChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailChannelResponse = "EmailChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EmailChannelResponse.self, forKey: .emailChannelResponse)
        emailChannelResponse = emailChannelResponseDecoded
    }
}

public struct UpdateEmailTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateEmailTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateEmailTemplateInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateEmailTemplateOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let emailTemplateRequest = input.operationInput.emailTemplateRequest {
                let emailTemplateRequestdata = try encoder.encode(emailTemplateRequest)
                let emailTemplateRequestbody = ClientRuntime.HttpBody.data(emailTemplateRequestdata)
                input.builder.withBody(emailTemplateRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let emailTemplateRequestdata = "{}".data(using: .utf8)!
                    let emailTemplateRequestbody = ClientRuntime.HttpBody.data(emailTemplateRequestdata)
                    input.builder.withBody(emailTemplateRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateEmailTemplateOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateEmailTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailTemplateRequest = "EmailTemplateRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let emailTemplateRequest = self.emailTemplateRequest {
            try encodeContainer.encode(emailTemplateRequest, forKey: .emailTemplateRequest)
        }
    }
}

extension UpdateEmailTemplateInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let version = version {
                let versionQueryItem = ClientRuntime.URLQueryItem(name: "version".urlPercentEncoding(), value: Swift.String(version).urlPercentEncoding())
                items.append(versionQueryItem)
            }
            if let createNewVersion = createNewVersion {
                let createNewVersionQueryItem = ClientRuntime.URLQueryItem(name: "create-new-version".urlPercentEncoding(), value: Swift.String(createNewVersion).urlPercentEncoding())
                items.append(createNewVersionQueryItem)
            }
            return items
        }
    }
}

extension UpdateEmailTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v1/templates/\(templateName.urlPercentEncoding())/email"
    }
}

public struct UpdateEmailTemplateInput: Swift.Equatable {
    /// Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template. If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.
    public var createNewVersion: Swift.Bool?
    /// Specifies the content and settings for a message template that can be used in messages that are sent through the email channel.
    /// This member is required.
    public var emailTemplateRequest: PinpointClientTypes.EmailTemplateRequest?
    /// The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
    /// This member is required.
    public var templateName: Swift.String?
    /// The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following:
    ///
    /// * For a get operation, retrieves information about the active version of the template.
    ///
    /// * For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.
    ///
    /// * For a delete operation, deletes the template, including all versions of the template.
    public var version: Swift.String?

    public init (
        createNewVersion: Swift.Bool? = nil,
        emailTemplateRequest: PinpointClientTypes.EmailTemplateRequest? = nil,
        templateName: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.createNewVersion = createNewVersion
        self.emailTemplateRequest = emailTemplateRequest
        self.templateName = templateName
        self.version = version
    }
}

struct UpdateEmailTemplateInputBody: Swift.Equatable {
    let emailTemplateRequest: PinpointClientTypes.EmailTemplateRequest?
}

extension UpdateEmailTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailTemplateRequest = "EmailTemplateRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailTemplateRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EmailTemplateRequest.self, forKey: .emailTemplateRequest)
        emailTemplateRequest = emailTemplateRequestDecoded
    }
}

extension UpdateEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.MessageBody = try responseDecoder.decode(responseBody: data)
                self.messageBody = output
            } else {
                self.messageBody = nil
            }
        } else {
            self.messageBody = nil
        }
    }
}

public struct UpdateEmailTemplateOutputResponse: Swift.Equatable {
    /// Provides information about an API request or response.
    /// This member is required.
    public var messageBody: PinpointClientTypes.MessageBody?

    public init (
        messageBody: PinpointClientTypes.MessageBody? = nil
    )
    {
        self.messageBody = messageBody
    }
}

struct UpdateEmailTemplateOutputResponseBody: Swift.Equatable {
    let messageBody: PinpointClientTypes.MessageBody?
}

extension UpdateEmailTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageBody = "MessageBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageBodyDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageBody.self, forKey: .messageBody)
        messageBody = messageBodyDecoded
    }
}

public struct UpdateEndpointInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateEndpointInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateEndpointInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateEndpointOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let endpointRequest = input.operationInput.endpointRequest {
                let endpointRequestdata = try encoder.encode(endpointRequest)
                let endpointRequestbody = ClientRuntime.HttpBody.data(endpointRequestdata)
                input.builder.withBody(endpointRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let endpointRequestdata = "{}".data(using: .utf8)!
                    let endpointRequestbody = ClientRuntime.HttpBody.data(endpointRequestdata)
                    input.builder.withBody(endpointRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateEndpointOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateEndpointInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateEndpointOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointRequest = "EndpointRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointRequest = self.endpointRequest {
            try encodeContainer.encode(endpointRequest, forKey: .endpointRequest)
        }
    }
}

extension UpdateEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let endpointId = endpointId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/endpoints/\(endpointId.urlPercentEncoding())"
    }
}

public struct UpdateEndpointInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the endpoint.
    /// This member is required.
    public var endpointId: Swift.String?
    /// Specifies the channel type and other settings for an endpoint.
    /// This member is required.
    public var endpointRequest: PinpointClientTypes.EndpointRequest?

    public init (
        applicationId: Swift.String? = nil,
        endpointId: Swift.String? = nil,
        endpointRequest: PinpointClientTypes.EndpointRequest? = nil
    )
    {
        self.applicationId = applicationId
        self.endpointId = endpointId
        self.endpointRequest = endpointRequest
    }
}

struct UpdateEndpointInputBody: Swift.Equatable {
    let endpointRequest: PinpointClientTypes.EndpointRequest?
}

extension UpdateEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointRequest = "EndpointRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EndpointRequest.self, forKey: .endpointRequest)
        endpointRequest = endpointRequestDecoded
    }
}

extension UpdateEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateEndpointOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.MessageBody = try responseDecoder.decode(responseBody: data)
                self.messageBody = output
            } else {
                self.messageBody = nil
            }
        } else {
            self.messageBody = nil
        }
    }
}

public struct UpdateEndpointOutputResponse: Swift.Equatable {
    /// Provides information about an API request or response.
    /// This member is required.
    public var messageBody: PinpointClientTypes.MessageBody?

    public init (
        messageBody: PinpointClientTypes.MessageBody? = nil
    )
    {
        self.messageBody = messageBody
    }
}

struct UpdateEndpointOutputResponseBody: Swift.Equatable {
    let messageBody: PinpointClientTypes.MessageBody?
}

extension UpdateEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageBody = "MessageBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageBodyDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageBody.self, forKey: .messageBody)
        messageBody = messageBodyDecoded
    }
}

public struct UpdateEndpointsBatchInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateEndpointsBatchInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateEndpointsBatchInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateEndpointsBatchOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let endpointBatchRequest = input.operationInput.endpointBatchRequest {
                let endpointBatchRequestdata = try encoder.encode(endpointBatchRequest)
                let endpointBatchRequestbody = ClientRuntime.HttpBody.data(endpointBatchRequestdata)
                input.builder.withBody(endpointBatchRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let endpointBatchRequestdata = "{}".data(using: .utf8)!
                    let endpointBatchRequestbody = ClientRuntime.HttpBody.data(endpointBatchRequestdata)
                    input.builder.withBody(endpointBatchRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateEndpointsBatchOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateEndpointsBatchInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateEndpointsBatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateEndpointsBatchInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointBatchRequest = "EndpointBatchRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointBatchRequest = self.endpointBatchRequest {
            try encodeContainer.encode(endpointBatchRequest, forKey: .endpointBatchRequest)
        }
    }
}

extension UpdateEndpointsBatchInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/endpoints"
    }
}

public struct UpdateEndpointsBatchInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// Specifies a batch of endpoints to create or update and the settings and attributes to set or change for each endpoint.
    /// This member is required.
    public var endpointBatchRequest: PinpointClientTypes.EndpointBatchRequest?

    public init (
        applicationId: Swift.String? = nil,
        endpointBatchRequest: PinpointClientTypes.EndpointBatchRequest? = nil
    )
    {
        self.applicationId = applicationId
        self.endpointBatchRequest = endpointBatchRequest
    }
}

struct UpdateEndpointsBatchInputBody: Swift.Equatable {
    let endpointBatchRequest: PinpointClientTypes.EndpointBatchRequest?
}

extension UpdateEndpointsBatchInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointBatchRequest = "EndpointBatchRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointBatchRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EndpointBatchRequest.self, forKey: .endpointBatchRequest)
        endpointBatchRequest = endpointBatchRequestDecoded
    }
}

extension UpdateEndpointsBatchOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateEndpointsBatchOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateEndpointsBatchOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateEndpointsBatchOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.MessageBody = try responseDecoder.decode(responseBody: data)
                self.messageBody = output
            } else {
                self.messageBody = nil
            }
        } else {
            self.messageBody = nil
        }
    }
}

public struct UpdateEndpointsBatchOutputResponse: Swift.Equatable {
    /// Provides information about an API request or response.
    /// This member is required.
    public var messageBody: PinpointClientTypes.MessageBody?

    public init (
        messageBody: PinpointClientTypes.MessageBody? = nil
    )
    {
        self.messageBody = messageBody
    }
}

struct UpdateEndpointsBatchOutputResponseBody: Swift.Equatable {
    let messageBody: PinpointClientTypes.MessageBody?
}

extension UpdateEndpointsBatchOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageBody = "MessageBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageBodyDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageBody.self, forKey: .messageBody)
        messageBody = messageBodyDecoded
    }
}

public struct UpdateGcmChannelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateGcmChannelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateGcmChannelInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateGcmChannelOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let gcmChannelRequest = input.operationInput.gcmChannelRequest {
                let gcmChannelRequestdata = try encoder.encode(gcmChannelRequest)
                let gcmChannelRequestbody = ClientRuntime.HttpBody.data(gcmChannelRequestdata)
                input.builder.withBody(gcmChannelRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let gcmChannelRequestdata = "{}".data(using: .utf8)!
                    let gcmChannelRequestbody = ClientRuntime.HttpBody.data(gcmChannelRequestdata)
                    input.builder.withBody(gcmChannelRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateGcmChannelOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateGcmChannelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateGcmChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateGcmChannelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gcmChannelRequest = "GCMChannelRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gcmChannelRequest = self.gcmChannelRequest {
            try encodeContainer.encode(gcmChannelRequest, forKey: .gcmChannelRequest)
        }
    }
}

extension UpdateGcmChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/gcm"
    }
}

public struct UpdateGcmChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// Specifies the status and settings of the GCM channel for an application. This channel enables Amazon Pinpoint to send push notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service.
    /// This member is required.
    public var gcmChannelRequest: PinpointClientTypes.GCMChannelRequest?

    public init (
        applicationId: Swift.String? = nil,
        gcmChannelRequest: PinpointClientTypes.GCMChannelRequest? = nil
    )
    {
        self.applicationId = applicationId
        self.gcmChannelRequest = gcmChannelRequest
    }
}

struct UpdateGcmChannelInputBody: Swift.Equatable {
    let gcmChannelRequest: PinpointClientTypes.GCMChannelRequest?
}

extension UpdateGcmChannelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gcmChannelRequest = "GCMChannelRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gcmChannelRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.GCMChannelRequest.self, forKey: .gcmChannelRequest)
        gcmChannelRequest = gcmChannelRequestDecoded
    }
}

extension UpdateGcmChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateGcmChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateGcmChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateGcmChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.GCMChannelResponse = try responseDecoder.decode(responseBody: data)
                self.gcmChannelResponse = output
            } else {
                self.gcmChannelResponse = nil
            }
        } else {
            self.gcmChannelResponse = nil
        }
    }
}

public struct UpdateGcmChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the GCM channel for an application. The GCM channel enables Amazon Pinpoint to send push notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service.
    /// This member is required.
    public var gcmChannelResponse: PinpointClientTypes.GCMChannelResponse?

    public init (
        gcmChannelResponse: PinpointClientTypes.GCMChannelResponse? = nil
    )
    {
        self.gcmChannelResponse = gcmChannelResponse
    }
}

struct UpdateGcmChannelOutputResponseBody: Swift.Equatable {
    let gcmChannelResponse: PinpointClientTypes.GCMChannelResponse?
}

extension UpdateGcmChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gcmChannelResponse = "GCMChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gcmChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.GCMChannelResponse.self, forKey: .gcmChannelResponse)
        gcmChannelResponse = gcmChannelResponseDecoded
    }
}

public struct UpdateInAppTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateInAppTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateInAppTemplateInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateInAppTemplateOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let inAppTemplateRequest = input.operationInput.inAppTemplateRequest {
                let inAppTemplateRequestdata = try encoder.encode(inAppTemplateRequest)
                let inAppTemplateRequestbody = ClientRuntime.HttpBody.data(inAppTemplateRequestdata)
                input.builder.withBody(inAppTemplateRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let inAppTemplateRequestdata = "{}".data(using: .utf8)!
                    let inAppTemplateRequestbody = ClientRuntime.HttpBody.data(inAppTemplateRequestdata)
                    input.builder.withBody(inAppTemplateRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateInAppTemplateOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateInAppTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateInAppTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateInAppTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inAppTemplateRequest = "InAppTemplateRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inAppTemplateRequest = self.inAppTemplateRequest {
            try encodeContainer.encode(inAppTemplateRequest, forKey: .inAppTemplateRequest)
        }
    }
}

extension UpdateInAppTemplateInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let version = version {
                let versionQueryItem = ClientRuntime.URLQueryItem(name: "version".urlPercentEncoding(), value: Swift.String(version).urlPercentEncoding())
                items.append(versionQueryItem)
            }
            if let createNewVersion = createNewVersion {
                let createNewVersionQueryItem = ClientRuntime.URLQueryItem(name: "create-new-version".urlPercentEncoding(), value: Swift.String(createNewVersion).urlPercentEncoding())
                items.append(createNewVersionQueryItem)
            }
            return items
        }
    }
}

extension UpdateInAppTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v1/templates/\(templateName.urlPercentEncoding())/inapp"
    }
}

public struct UpdateInAppTemplateInput: Swift.Equatable {
    /// Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template. If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.
    public var createNewVersion: Swift.Bool?
    /// InApp Template Request.
    /// This member is required.
    public var inAppTemplateRequest: PinpointClientTypes.InAppTemplateRequest?
    /// The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
    /// This member is required.
    public var templateName: Swift.String?
    /// The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following:
    ///
    /// * For a get operation, retrieves information about the active version of the template.
    ///
    /// * For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.
    ///
    /// * For a delete operation, deletes the template, including all versions of the template.
    public var version: Swift.String?

    public init (
        createNewVersion: Swift.Bool? = nil,
        inAppTemplateRequest: PinpointClientTypes.InAppTemplateRequest? = nil,
        templateName: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.createNewVersion = createNewVersion
        self.inAppTemplateRequest = inAppTemplateRequest
        self.templateName = templateName
        self.version = version
    }
}

struct UpdateInAppTemplateInputBody: Swift.Equatable {
    let inAppTemplateRequest: PinpointClientTypes.InAppTemplateRequest?
}

extension UpdateInAppTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inAppTemplateRequest = "InAppTemplateRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inAppTemplateRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.InAppTemplateRequest.self, forKey: .inAppTemplateRequest)
        inAppTemplateRequest = inAppTemplateRequestDecoded
    }
}

extension UpdateInAppTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateInAppTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateInAppTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateInAppTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.MessageBody = try responseDecoder.decode(responseBody: data)
                self.messageBody = output
            } else {
                self.messageBody = nil
            }
        } else {
            self.messageBody = nil
        }
    }
}

public struct UpdateInAppTemplateOutputResponse: Swift.Equatable {
    /// Provides information about an API request or response.
    /// This member is required.
    public var messageBody: PinpointClientTypes.MessageBody?

    public init (
        messageBody: PinpointClientTypes.MessageBody? = nil
    )
    {
        self.messageBody = messageBody
    }
}

struct UpdateInAppTemplateOutputResponseBody: Swift.Equatable {
    let messageBody: PinpointClientTypes.MessageBody?
}

extension UpdateInAppTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageBody = "MessageBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageBodyDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageBody.self, forKey: .messageBody)
        messageBody = messageBodyDecoded
    }
}

public struct UpdateJourneyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateJourneyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateJourneyInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateJourneyOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let writeJourneyRequest = input.operationInput.writeJourneyRequest {
                let writeJourneyRequestdata = try encoder.encode(writeJourneyRequest)
                let writeJourneyRequestbody = ClientRuntime.HttpBody.data(writeJourneyRequestdata)
                input.builder.withBody(writeJourneyRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let writeJourneyRequestdata = "{}".data(using: .utf8)!
                    let writeJourneyRequestbody = ClientRuntime.HttpBody.data(writeJourneyRequestdata)
                    input.builder.withBody(writeJourneyRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateJourneyOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateJourneyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateJourneyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateJourneyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case writeJourneyRequest = "WriteJourneyRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let writeJourneyRequest = self.writeJourneyRequest {
            try encodeContainer.encode(writeJourneyRequest, forKey: .writeJourneyRequest)
        }
    }
}

extension UpdateJourneyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let journeyId = journeyId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/journeys/\(journeyId.urlPercentEncoding())"
    }
}

public struct UpdateJourneyInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the journey.
    /// This member is required.
    public var journeyId: Swift.String?
    /// Specifies the configuration and other settings for a journey.
    /// This member is required.
    public var writeJourneyRequest: PinpointClientTypes.WriteJourneyRequest?

    public init (
        applicationId: Swift.String? = nil,
        journeyId: Swift.String? = nil,
        writeJourneyRequest: PinpointClientTypes.WriteJourneyRequest? = nil
    )
    {
        self.applicationId = applicationId
        self.journeyId = journeyId
        self.writeJourneyRequest = writeJourneyRequest
    }
}

struct UpdateJourneyInputBody: Swift.Equatable {
    let writeJourneyRequest: PinpointClientTypes.WriteJourneyRequest?
}

extension UpdateJourneyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case writeJourneyRequest = "WriteJourneyRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let writeJourneyRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.WriteJourneyRequest.self, forKey: .writeJourneyRequest)
        writeJourneyRequest = writeJourneyRequestDecoded
    }
}

extension UpdateJourneyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateJourneyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateJourneyOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateJourneyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.JourneyResponse = try responseDecoder.decode(responseBody: data)
                self.journeyResponse = output
            } else {
                self.journeyResponse = nil
            }
        } else {
            self.journeyResponse = nil
        }
    }
}

public struct UpdateJourneyOutputResponse: Swift.Equatable {
    /// Provides information about the status, configuration, and other settings for a journey.
    /// This member is required.
    public var journeyResponse: PinpointClientTypes.JourneyResponse?

    public init (
        journeyResponse: PinpointClientTypes.JourneyResponse? = nil
    )
    {
        self.journeyResponse = journeyResponse
    }
}

struct UpdateJourneyOutputResponseBody: Swift.Equatable {
    let journeyResponse: PinpointClientTypes.JourneyResponse?
}

extension UpdateJourneyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case journeyResponse = "JourneyResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let journeyResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneyResponse.self, forKey: .journeyResponse)
        journeyResponse = journeyResponseDecoded
    }
}

public struct UpdateJourneyStateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateJourneyStateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateJourneyStateInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateJourneyStateOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let journeyStateRequest = input.operationInput.journeyStateRequest {
                let journeyStateRequestdata = try encoder.encode(journeyStateRequest)
                let journeyStateRequestbody = ClientRuntime.HttpBody.data(journeyStateRequestdata)
                input.builder.withBody(journeyStateRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let journeyStateRequestdata = "{}".data(using: .utf8)!
                    let journeyStateRequestbody = ClientRuntime.HttpBody.data(journeyStateRequestdata)
                    input.builder.withBody(journeyStateRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateJourneyStateOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateJourneyStateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateJourneyStateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateJourneyStateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case journeyStateRequest = "JourneyStateRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let journeyStateRequest = self.journeyStateRequest {
            try encodeContainer.encode(journeyStateRequest, forKey: .journeyStateRequest)
        }
    }
}

extension UpdateJourneyStateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let journeyId = journeyId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/journeys/\(journeyId.urlPercentEncoding())/state"
    }
}

public struct UpdateJourneyStateInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the journey.
    /// This member is required.
    public var journeyId: Swift.String?
    /// Changes the status of a journey.
    /// This member is required.
    public var journeyStateRequest: PinpointClientTypes.JourneyStateRequest?

    public init (
        applicationId: Swift.String? = nil,
        journeyId: Swift.String? = nil,
        journeyStateRequest: PinpointClientTypes.JourneyStateRequest? = nil
    )
    {
        self.applicationId = applicationId
        self.journeyId = journeyId
        self.journeyStateRequest = journeyStateRequest
    }
}

struct UpdateJourneyStateInputBody: Swift.Equatable {
    let journeyStateRequest: PinpointClientTypes.JourneyStateRequest?
}

extension UpdateJourneyStateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case journeyStateRequest = "JourneyStateRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let journeyStateRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneyStateRequest.self, forKey: .journeyStateRequest)
        journeyStateRequest = journeyStateRequestDecoded
    }
}

extension UpdateJourneyStateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateJourneyStateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateJourneyStateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateJourneyStateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.JourneyResponse = try responseDecoder.decode(responseBody: data)
                self.journeyResponse = output
            } else {
                self.journeyResponse = nil
            }
        } else {
            self.journeyResponse = nil
        }
    }
}

public struct UpdateJourneyStateOutputResponse: Swift.Equatable {
    /// Provides information about the status, configuration, and other settings for a journey.
    /// This member is required.
    public var journeyResponse: PinpointClientTypes.JourneyResponse?

    public init (
        journeyResponse: PinpointClientTypes.JourneyResponse? = nil
    )
    {
        self.journeyResponse = journeyResponse
    }
}

struct UpdateJourneyStateOutputResponseBody: Swift.Equatable {
    let journeyResponse: PinpointClientTypes.JourneyResponse?
}

extension UpdateJourneyStateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case journeyResponse = "JourneyResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let journeyResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneyResponse.self, forKey: .journeyResponse)
        journeyResponse = journeyResponseDecoded
    }
}

public struct UpdatePushTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdatePushTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdatePushTemplateInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdatePushTemplateOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let pushNotificationTemplateRequest = input.operationInput.pushNotificationTemplateRequest {
                let pushNotificationTemplateRequestdata = try encoder.encode(pushNotificationTemplateRequest)
                let pushNotificationTemplateRequestbody = ClientRuntime.HttpBody.data(pushNotificationTemplateRequestdata)
                input.builder.withBody(pushNotificationTemplateRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let pushNotificationTemplateRequestdata = "{}".data(using: .utf8)!
                    let pushNotificationTemplateRequestbody = ClientRuntime.HttpBody.data(pushNotificationTemplateRequestdata)
                    input.builder.withBody(pushNotificationTemplateRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdatePushTemplateOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdatePushTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdatePushTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdatePushTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pushNotificationTemplateRequest = "PushNotificationTemplateRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pushNotificationTemplateRequest = self.pushNotificationTemplateRequest {
            try encodeContainer.encode(pushNotificationTemplateRequest, forKey: .pushNotificationTemplateRequest)
        }
    }
}

extension UpdatePushTemplateInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let version = version {
                let versionQueryItem = ClientRuntime.URLQueryItem(name: "version".urlPercentEncoding(), value: Swift.String(version).urlPercentEncoding())
                items.append(versionQueryItem)
            }
            if let createNewVersion = createNewVersion {
                let createNewVersionQueryItem = ClientRuntime.URLQueryItem(name: "create-new-version".urlPercentEncoding(), value: Swift.String(createNewVersion).urlPercentEncoding())
                items.append(createNewVersionQueryItem)
            }
            return items
        }
    }
}

extension UpdatePushTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v1/templates/\(templateName.urlPercentEncoding())/push"
    }
}

public struct UpdatePushTemplateInput: Swift.Equatable {
    /// Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template. If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.
    public var createNewVersion: Swift.Bool?
    /// Specifies the content and settings for a message template that can be used in messages that are sent through a push notification channel.
    /// This member is required.
    public var pushNotificationTemplateRequest: PinpointClientTypes.PushNotificationTemplateRequest?
    /// The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
    /// This member is required.
    public var templateName: Swift.String?
    /// The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following:
    ///
    /// * For a get operation, retrieves information about the active version of the template.
    ///
    /// * For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.
    ///
    /// * For a delete operation, deletes the template, including all versions of the template.
    public var version: Swift.String?

    public init (
        createNewVersion: Swift.Bool? = nil,
        pushNotificationTemplateRequest: PinpointClientTypes.PushNotificationTemplateRequest? = nil,
        templateName: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.createNewVersion = createNewVersion
        self.pushNotificationTemplateRequest = pushNotificationTemplateRequest
        self.templateName = templateName
        self.version = version
    }
}

struct UpdatePushTemplateInputBody: Swift.Equatable {
    let pushNotificationTemplateRequest: PinpointClientTypes.PushNotificationTemplateRequest?
}

extension UpdatePushTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pushNotificationTemplateRequest = "PushNotificationTemplateRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pushNotificationTemplateRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.PushNotificationTemplateRequest.self, forKey: .pushNotificationTemplateRequest)
        pushNotificationTemplateRequest = pushNotificationTemplateRequestDecoded
    }
}

extension UpdatePushTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdatePushTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdatePushTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdatePushTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.MessageBody = try responseDecoder.decode(responseBody: data)
                self.messageBody = output
            } else {
                self.messageBody = nil
            }
        } else {
            self.messageBody = nil
        }
    }
}

public struct UpdatePushTemplateOutputResponse: Swift.Equatable {
    /// Provides information about an API request or response.
    /// This member is required.
    public var messageBody: PinpointClientTypes.MessageBody?

    public init (
        messageBody: PinpointClientTypes.MessageBody? = nil
    )
    {
        self.messageBody = messageBody
    }
}

struct UpdatePushTemplateOutputResponseBody: Swift.Equatable {
    let messageBody: PinpointClientTypes.MessageBody?
}

extension UpdatePushTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageBody = "MessageBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageBodyDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageBody.self, forKey: .messageBody)
        messageBody = messageBodyDecoded
    }
}

public struct UpdateRecommenderConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRecommenderConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRecommenderConfigurationInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateRecommenderConfigurationOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let updateRecommenderConfiguration = input.operationInput.updateRecommenderConfiguration {
                let updateRecommenderConfigurationdata = try encoder.encode(updateRecommenderConfiguration)
                let updateRecommenderConfigurationbody = ClientRuntime.HttpBody.data(updateRecommenderConfigurationdata)
                input.builder.withBody(updateRecommenderConfigurationbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let updateRecommenderConfigurationdata = "{}".data(using: .utf8)!
                    let updateRecommenderConfigurationbody = ClientRuntime.HttpBody.data(updateRecommenderConfigurationdata)
                    input.builder.withBody(updateRecommenderConfigurationbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateRecommenderConfigurationOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRecommenderConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRecommenderConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateRecommenderConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case updateRecommenderConfiguration = "UpdateRecommenderConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let updateRecommenderConfiguration = self.updateRecommenderConfiguration {
            try encodeContainer.encode(updateRecommenderConfiguration, forKey: .updateRecommenderConfiguration)
        }
    }
}

extension UpdateRecommenderConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let recommenderId = recommenderId else {
            return nil
        }
        return "/v1/recommenders/\(recommenderId.urlPercentEncoding())"
    }
}

public struct UpdateRecommenderConfigurationInput: Swift.Equatable {
    /// The unique identifier for the recommender model configuration. This identifier is displayed as the Recommender ID on the Amazon Pinpoint console.
    /// This member is required.
    public var recommenderId: Swift.String?
    /// Specifies Amazon Pinpoint configuration settings for retrieving and processing recommendation data from a recommender model.
    /// This member is required.
    public var updateRecommenderConfiguration: PinpointClientTypes.UpdateRecommenderConfigurationShape?

    public init (
        recommenderId: Swift.String? = nil,
        updateRecommenderConfiguration: PinpointClientTypes.UpdateRecommenderConfigurationShape? = nil
    )
    {
        self.recommenderId = recommenderId
        self.updateRecommenderConfiguration = updateRecommenderConfiguration
    }
}

struct UpdateRecommenderConfigurationInputBody: Swift.Equatable {
    let updateRecommenderConfiguration: PinpointClientTypes.UpdateRecommenderConfigurationShape?
}

extension UpdateRecommenderConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case updateRecommenderConfiguration = "UpdateRecommenderConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateRecommenderConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.UpdateRecommenderConfigurationShape.self, forKey: .updateRecommenderConfiguration)
        updateRecommenderConfiguration = updateRecommenderConfigurationDecoded
    }
}

extension UpdateRecommenderConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRecommenderConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateRecommenderConfigurationOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRecommenderConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.RecommenderConfigurationResponse = try responseDecoder.decode(responseBody: data)
                self.recommenderConfigurationResponse = output
            } else {
                self.recommenderConfigurationResponse = nil
            }
        } else {
            self.recommenderConfigurationResponse = nil
        }
    }
}

public struct UpdateRecommenderConfigurationOutputResponse: Swift.Equatable {
    /// Provides information about Amazon Pinpoint configuration settings for retrieving and processing data from a recommender model.
    /// This member is required.
    public var recommenderConfigurationResponse: PinpointClientTypes.RecommenderConfigurationResponse?

    public init (
        recommenderConfigurationResponse: PinpointClientTypes.RecommenderConfigurationResponse? = nil
    )
    {
        self.recommenderConfigurationResponse = recommenderConfigurationResponse
    }
}

struct UpdateRecommenderConfigurationOutputResponseBody: Swift.Equatable {
    let recommenderConfigurationResponse: PinpointClientTypes.RecommenderConfigurationResponse?
}

extension UpdateRecommenderConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recommenderConfigurationResponse = "RecommenderConfigurationResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommenderConfigurationResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.RecommenderConfigurationResponse.self, forKey: .recommenderConfigurationResponse)
        recommenderConfigurationResponse = recommenderConfigurationResponseDecoded
    }
}

extension PinpointClientTypes.UpdateRecommenderConfigurationShape: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case description = "Description"
        case name = "Name"
        case recommendationProviderIdType = "RecommendationProviderIdType"
        case recommendationProviderRoleArn = "RecommendationProviderRoleArn"
        case recommendationProviderUri = "RecommendationProviderUri"
        case recommendationTransformerUri = "RecommendationTransformerUri"
        case recommendationsDisplayName = "RecommendationsDisplayName"
        case recommendationsPerMessage = "RecommendationsPerMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, mapOf__string0) in attributes {
                try attributesContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let recommendationProviderIdType = self.recommendationProviderIdType {
            try encodeContainer.encode(recommendationProviderIdType, forKey: .recommendationProviderIdType)
        }
        if let recommendationProviderRoleArn = self.recommendationProviderRoleArn {
            try encodeContainer.encode(recommendationProviderRoleArn, forKey: .recommendationProviderRoleArn)
        }
        if let recommendationProviderUri = self.recommendationProviderUri {
            try encodeContainer.encode(recommendationProviderUri, forKey: .recommendationProviderUri)
        }
        if let recommendationTransformerUri = self.recommendationTransformerUri {
            try encodeContainer.encode(recommendationTransformerUri, forKey: .recommendationTransformerUri)
        }
        if let recommendationsDisplayName = self.recommendationsDisplayName {
            try encodeContainer.encode(recommendationsDisplayName, forKey: .recommendationsDisplayName)
        }
        if let recommendationsPerMessage = self.recommendationsPerMessage {
            try encodeContainer.encode(recommendationsPerMessage, forKey: .recommendationsPerMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in attributesContainer {
                if let __string0 = __string0 {
                    attributesDecoded0?[key0] = __string0
                }
            }
        }
        attributes = attributesDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let recommendationProviderIdTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationProviderIdType)
        recommendationProviderIdType = recommendationProviderIdTypeDecoded
        let recommendationProviderRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationProviderRoleArn)
        recommendationProviderRoleArn = recommendationProviderRoleArnDecoded
        let recommendationProviderUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationProviderUri)
        recommendationProviderUri = recommendationProviderUriDecoded
        let recommendationTransformerUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationTransformerUri)
        recommendationTransformerUri = recommendationTransformerUriDecoded
        let recommendationsDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationsDisplayName)
        recommendationsDisplayName = recommendationsDisplayNameDecoded
        let recommendationsPerMessageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .recommendationsPerMessage)
        recommendationsPerMessage = recommendationsPerMessageDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies Amazon Pinpoint configuration settings for retrieving and processing recommendation data from a recommender model.
    public struct UpdateRecommenderConfigurationShape: Swift.Equatable {
        /// A map of key-value pairs that defines 1-10 custom endpoint or user attributes, depending on the value for the RecommendationProviderIdType property. Each of these attributes temporarily stores a recommended item that's retrieved from the recommender model and sent to an AWS Lambda function for additional processing. Each attribute can be used as a message variable in a message template. In the map, the key is the name of a custom attribute and the value is a custom display name for that attribute. The display name appears in the Attribute finder of the template editor on the Amazon Pinpoint console. The following restrictions apply to these names:
        ///
        /// * An attribute name must start with a letter or number and it can contain up to 50 characters. The characters can be letters, numbers, underscores (_), or hyphens (-). Attribute names are case sensitive and must be unique.
        ///
        /// * An attribute display name must start with a letter or number and it can contain up to 25 characters. The characters can be letters, numbers, spaces, underscores (_), or hyphens (-).
        ///
        ///
        /// This object is required if the configuration invokes an AWS Lambda function (RecommendationTransformerUri) to process recommendation data. Otherwise, don't include this object in your request.
        public var attributes: [Swift.String:Swift.String]?
        /// A custom description of the configuration for the recommender model. The description can contain up to 128 characters. The characters can be letters, numbers, spaces, or the following symbols: _ ; () , ‐.
        public var description: Swift.String?
        /// A custom name of the configuration for the recommender model. The name must start with a letter or number and it can contain up to 128 characters. The characters can be letters, numbers, spaces, underscores (_), or hyphens (-).
        public var name: Swift.String?
        /// The type of Amazon Pinpoint ID to associate with unique user IDs in the recommender model. This value enables the model to use attribute and event data that’s specific to a particular endpoint or user in an Amazon Pinpoint application. Valid values are:
        ///
        /// * PINPOINT_ENDPOINT_ID - Associate each user in the model with a particular endpoint in Amazon Pinpoint. The data is correlated based on endpoint IDs in Amazon Pinpoint. This is the default value.
        ///
        /// * PINPOINT_USER_ID - Associate each user in the model with a particular user and endpoint in Amazon Pinpoint. The data is correlated based on user IDs in Amazon Pinpoint. If you specify this value, an endpoint definition in Amazon Pinpoint has to specify both a user ID (UserId) and an endpoint ID. Otherwise, messages won’t be sent to the user's endpoint.
        public var recommendationProviderIdType: Swift.String?
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon Pinpoint to retrieve recommendation data from the recommender model.
        /// This member is required.
        public var recommendationProviderRoleArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the recommender model to retrieve recommendation data from. This value must match the ARN of an Amazon Personalize campaign.
        /// This member is required.
        public var recommendationProviderUri: Swift.String?
        /// The name or Amazon Resource Name (ARN) of the AWS Lambda function to invoke for additional processing of recommendation data that's retrieved from the recommender model.
        public var recommendationTransformerUri: Swift.String?
        /// A custom display name for the standard endpoint or user attribute (RecommendationItems) that temporarily stores recommended items for each endpoint or user, depending on the value for the RecommendationProviderIdType property. This value is required if the configuration doesn't invoke an AWS Lambda function (RecommendationTransformerUri) to perform additional processing of recommendation data. This name appears in the Attribute finder of the template editor on the Amazon Pinpoint console. The name can contain up to 25 characters. The characters can be letters, numbers, spaces, underscores (_), or hyphens (-). These restrictions don't apply to attribute values.
        public var recommendationsDisplayName: Swift.String?
        /// The number of recommended items to retrieve from the model for each endpoint or user, depending on the value for the RecommendationProviderIdType property. This number determines how many recommended items are available for use in message variables. The minimum value is 1. The maximum value is 5. The default value is 5. To use multiple recommended items and custom attributes with message variables, you have to use an AWS Lambda function (RecommendationTransformerUri) to perform additional processing of recommendation data.
        public var recommendationsPerMessage: Swift.Int?

        public init (
            attributes: [Swift.String:Swift.String]? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            recommendationProviderIdType: Swift.String? = nil,
            recommendationProviderRoleArn: Swift.String? = nil,
            recommendationProviderUri: Swift.String? = nil,
            recommendationTransformerUri: Swift.String? = nil,
            recommendationsDisplayName: Swift.String? = nil,
            recommendationsPerMessage: Swift.Int? = nil
        )
        {
            self.attributes = attributes
            self.description = description
            self.name = name
            self.recommendationProviderIdType = recommendationProviderIdType
            self.recommendationProviderRoleArn = recommendationProviderRoleArn
            self.recommendationProviderUri = recommendationProviderUri
            self.recommendationTransformerUri = recommendationTransformerUri
            self.recommendationsDisplayName = recommendationsDisplayName
            self.recommendationsPerMessage = recommendationsPerMessage
        }
    }

}

public struct UpdateSegmentInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateSegmentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateSegmentInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateSegmentOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let writeSegmentRequest = input.operationInput.writeSegmentRequest {
                let writeSegmentRequestdata = try encoder.encode(writeSegmentRequest)
                let writeSegmentRequestbody = ClientRuntime.HttpBody.data(writeSegmentRequestdata)
                input.builder.withBody(writeSegmentRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let writeSegmentRequestdata = "{}".data(using: .utf8)!
                    let writeSegmentRequestbody = ClientRuntime.HttpBody.data(writeSegmentRequestdata)
                    input.builder.withBody(writeSegmentRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateSegmentOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateSegmentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateSegmentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateSegmentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case writeSegmentRequest = "WriteSegmentRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let writeSegmentRequest = self.writeSegmentRequest {
            try encodeContainer.encode(writeSegmentRequest, forKey: .writeSegmentRequest)
        }
    }
}

extension UpdateSegmentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        guard let segmentId = segmentId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/segments/\(segmentId.urlPercentEncoding())"
    }
}

public struct UpdateSegmentInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// The unique identifier for the segment.
    /// This member is required.
    public var segmentId: Swift.String?
    /// Specifies the configuration, dimension, and other settings for a segment. A WriteSegmentRequest object can include a Dimensions object or a SegmentGroups object, but not both.
    /// This member is required.
    public var writeSegmentRequest: PinpointClientTypes.WriteSegmentRequest?

    public init (
        applicationId: Swift.String? = nil,
        segmentId: Swift.String? = nil,
        writeSegmentRequest: PinpointClientTypes.WriteSegmentRequest? = nil
    )
    {
        self.applicationId = applicationId
        self.segmentId = segmentId
        self.writeSegmentRequest = writeSegmentRequest
    }
}

struct UpdateSegmentInputBody: Swift.Equatable {
    let writeSegmentRequest: PinpointClientTypes.WriteSegmentRequest?
}

extension UpdateSegmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case writeSegmentRequest = "WriteSegmentRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let writeSegmentRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.WriteSegmentRequest.self, forKey: .writeSegmentRequest)
        writeSegmentRequest = writeSegmentRequestDecoded
    }
}

extension UpdateSegmentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateSegmentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateSegmentOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateSegmentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.SegmentResponse = try responseDecoder.decode(responseBody: data)
                self.segmentResponse = output
            } else {
                self.segmentResponse = nil
            }
        } else {
            self.segmentResponse = nil
        }
    }
}

public struct UpdateSegmentOutputResponse: Swift.Equatable {
    /// Provides information about the configuration, dimension, and other settings for a segment.
    /// This member is required.
    public var segmentResponse: PinpointClientTypes.SegmentResponse?

    public init (
        segmentResponse: PinpointClientTypes.SegmentResponse? = nil
    )
    {
        self.segmentResponse = segmentResponse
    }
}

struct UpdateSegmentOutputResponseBody: Swift.Equatable {
    let segmentResponse: PinpointClientTypes.SegmentResponse?
}

extension UpdateSegmentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case segmentResponse = "SegmentResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let segmentResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentResponse.self, forKey: .segmentResponse)
        segmentResponse = segmentResponseDecoded
    }
}

public struct UpdateSmsChannelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateSmsChannelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateSmsChannelInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateSmsChannelOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let smsChannelRequest = input.operationInput.smsChannelRequest {
                let smsChannelRequestdata = try encoder.encode(smsChannelRequest)
                let smsChannelRequestbody = ClientRuntime.HttpBody.data(smsChannelRequestdata)
                input.builder.withBody(smsChannelRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let smsChannelRequestdata = "{}".data(using: .utf8)!
                    let smsChannelRequestbody = ClientRuntime.HttpBody.data(smsChannelRequestdata)
                    input.builder.withBody(smsChannelRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateSmsChannelOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateSmsChannelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateSmsChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateSmsChannelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case smsChannelRequest = "SMSChannelRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let smsChannelRequest = self.smsChannelRequest {
            try encodeContainer.encode(smsChannelRequest, forKey: .smsChannelRequest)
        }
    }
}

extension UpdateSmsChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/sms"
    }
}

public struct UpdateSmsChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// Specifies the status and settings of the SMS channel for an application.
    /// This member is required.
    public var smsChannelRequest: PinpointClientTypes.SMSChannelRequest?

    public init (
        applicationId: Swift.String? = nil,
        smsChannelRequest: PinpointClientTypes.SMSChannelRequest? = nil
    )
    {
        self.applicationId = applicationId
        self.smsChannelRequest = smsChannelRequest
    }
}

struct UpdateSmsChannelInputBody: Swift.Equatable {
    let smsChannelRequest: PinpointClientTypes.SMSChannelRequest?
}

extension UpdateSmsChannelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case smsChannelRequest = "SMSChannelRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let smsChannelRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SMSChannelRequest.self, forKey: .smsChannelRequest)
        smsChannelRequest = smsChannelRequestDecoded
    }
}

extension UpdateSmsChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateSmsChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateSmsChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateSmsChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.SMSChannelResponse = try responseDecoder.decode(responseBody: data)
                self.smsChannelResponse = output
            } else {
                self.smsChannelResponse = nil
            }
        } else {
            self.smsChannelResponse = nil
        }
    }
}

public struct UpdateSmsChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the SMS channel for an application.
    /// This member is required.
    public var smsChannelResponse: PinpointClientTypes.SMSChannelResponse?

    public init (
        smsChannelResponse: PinpointClientTypes.SMSChannelResponse? = nil
    )
    {
        self.smsChannelResponse = smsChannelResponse
    }
}

struct UpdateSmsChannelOutputResponseBody: Swift.Equatable {
    let smsChannelResponse: PinpointClientTypes.SMSChannelResponse?
}

extension UpdateSmsChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case smsChannelResponse = "SMSChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let smsChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SMSChannelResponse.self, forKey: .smsChannelResponse)
        smsChannelResponse = smsChannelResponseDecoded
    }
}

public struct UpdateSmsTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateSmsTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateSmsTemplateInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateSmsTemplateOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let smsTemplateRequest = input.operationInput.smsTemplateRequest {
                let smsTemplateRequestdata = try encoder.encode(smsTemplateRequest)
                let smsTemplateRequestbody = ClientRuntime.HttpBody.data(smsTemplateRequestdata)
                input.builder.withBody(smsTemplateRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let smsTemplateRequestdata = "{}".data(using: .utf8)!
                    let smsTemplateRequestbody = ClientRuntime.HttpBody.data(smsTemplateRequestdata)
                    input.builder.withBody(smsTemplateRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateSmsTemplateOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateSmsTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateSmsTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateSmsTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case smsTemplateRequest = "SMSTemplateRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let smsTemplateRequest = self.smsTemplateRequest {
            try encodeContainer.encode(smsTemplateRequest, forKey: .smsTemplateRequest)
        }
    }
}

extension UpdateSmsTemplateInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let version = version {
                let versionQueryItem = ClientRuntime.URLQueryItem(name: "version".urlPercentEncoding(), value: Swift.String(version).urlPercentEncoding())
                items.append(versionQueryItem)
            }
            if let createNewVersion = createNewVersion {
                let createNewVersionQueryItem = ClientRuntime.URLQueryItem(name: "create-new-version".urlPercentEncoding(), value: Swift.String(createNewVersion).urlPercentEncoding())
                items.append(createNewVersionQueryItem)
            }
            return items
        }
    }
}

extension UpdateSmsTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v1/templates/\(templateName.urlPercentEncoding())/sms"
    }
}

public struct UpdateSmsTemplateInput: Swift.Equatable {
    /// Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template. If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.
    public var createNewVersion: Swift.Bool?
    /// Specifies the content and settings for a message template that can be used in text messages that are sent through the SMS channel.
    /// This member is required.
    public var smsTemplateRequest: PinpointClientTypes.SMSTemplateRequest?
    /// The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
    /// This member is required.
    public var templateName: Swift.String?
    /// The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following:
    ///
    /// * For a get operation, retrieves information about the active version of the template.
    ///
    /// * For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.
    ///
    /// * For a delete operation, deletes the template, including all versions of the template.
    public var version: Swift.String?

    public init (
        createNewVersion: Swift.Bool? = nil,
        smsTemplateRequest: PinpointClientTypes.SMSTemplateRequest? = nil,
        templateName: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.createNewVersion = createNewVersion
        self.smsTemplateRequest = smsTemplateRequest
        self.templateName = templateName
        self.version = version
    }
}

struct UpdateSmsTemplateInputBody: Swift.Equatable {
    let smsTemplateRequest: PinpointClientTypes.SMSTemplateRequest?
}

extension UpdateSmsTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case smsTemplateRequest = "SMSTemplateRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let smsTemplateRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SMSTemplateRequest.self, forKey: .smsTemplateRequest)
        smsTemplateRequest = smsTemplateRequestDecoded
    }
}

extension UpdateSmsTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateSmsTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateSmsTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateSmsTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.MessageBody = try responseDecoder.decode(responseBody: data)
                self.messageBody = output
            } else {
                self.messageBody = nil
            }
        } else {
            self.messageBody = nil
        }
    }
}

public struct UpdateSmsTemplateOutputResponse: Swift.Equatable {
    /// Provides information about an API request or response.
    /// This member is required.
    public var messageBody: PinpointClientTypes.MessageBody?

    public init (
        messageBody: PinpointClientTypes.MessageBody? = nil
    )
    {
        self.messageBody = messageBody
    }
}

struct UpdateSmsTemplateOutputResponseBody: Swift.Equatable {
    let messageBody: PinpointClientTypes.MessageBody?
}

extension UpdateSmsTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageBody = "MessageBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageBodyDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageBody.self, forKey: .messageBody)
        messageBody = messageBodyDecoded
    }
}

public struct UpdateTemplateActiveVersionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTemplateActiveVersionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTemplateActiveVersionInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateTemplateActiveVersionOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let templateActiveVersionRequest = input.operationInput.templateActiveVersionRequest {
                let templateActiveVersionRequestdata = try encoder.encode(templateActiveVersionRequest)
                let templateActiveVersionRequestbody = ClientRuntime.HttpBody.data(templateActiveVersionRequestdata)
                input.builder.withBody(templateActiveVersionRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let templateActiveVersionRequestdata = "{}".data(using: .utf8)!
                    let templateActiveVersionRequestbody = ClientRuntime.HttpBody.data(templateActiveVersionRequestdata)
                    input.builder.withBody(templateActiveVersionRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateTemplateActiveVersionOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTemplateActiveVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTemplateActiveVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateTemplateActiveVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateActiveVersionRequest = "TemplateActiveVersionRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let templateActiveVersionRequest = self.templateActiveVersionRequest {
            try encodeContainer.encode(templateActiveVersionRequest, forKey: .templateActiveVersionRequest)
        }
    }
}

extension UpdateTemplateActiveVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        guard let templateType = templateType else {
            return nil
        }
        return "/v1/templates/\(templateName.urlPercentEncoding())/\(templateType.urlPercentEncoding())/active-version"
    }
}

public struct UpdateTemplateActiveVersionInput: Swift.Equatable {
    /// Specifies which version of a message template to use as the active version of the template.
    /// This member is required.
    public var templateActiveVersionRequest: PinpointClientTypes.TemplateActiveVersionRequest?
    /// The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
    /// This member is required.
    public var templateName: Swift.String?
    /// The type of channel that the message template is designed for. Valid values are: EMAIL, PUSH, SMS, and VOICE.
    /// This member is required.
    public var templateType: Swift.String?

    public init (
        templateActiveVersionRequest: PinpointClientTypes.TemplateActiveVersionRequest? = nil,
        templateName: Swift.String? = nil,
        templateType: Swift.String? = nil
    )
    {
        self.templateActiveVersionRequest = templateActiveVersionRequest
        self.templateName = templateName
        self.templateType = templateType
    }
}

struct UpdateTemplateActiveVersionInputBody: Swift.Equatable {
    let templateActiveVersionRequest: PinpointClientTypes.TemplateActiveVersionRequest?
}

extension UpdateTemplateActiveVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateActiveVersionRequest = "TemplateActiveVersionRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateActiveVersionRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.TemplateActiveVersionRequest.self, forKey: .templateActiveVersionRequest)
        templateActiveVersionRequest = templateActiveVersionRequestDecoded
    }
}

extension UpdateTemplateActiveVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateTemplateActiveVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateTemplateActiveVersionOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTemplateActiveVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.MessageBody = try responseDecoder.decode(responseBody: data)
                self.messageBody = output
            } else {
                self.messageBody = nil
            }
        } else {
            self.messageBody = nil
        }
    }
}

public struct UpdateTemplateActiveVersionOutputResponse: Swift.Equatable {
    /// Provides information about an API request or response.
    /// This member is required.
    public var messageBody: PinpointClientTypes.MessageBody?

    public init (
        messageBody: PinpointClientTypes.MessageBody? = nil
    )
    {
        self.messageBody = messageBody
    }
}

struct UpdateTemplateActiveVersionOutputResponseBody: Swift.Equatable {
    let messageBody: PinpointClientTypes.MessageBody?
}

extension UpdateTemplateActiveVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageBody = "MessageBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageBodyDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageBody.self, forKey: .messageBody)
        messageBody = messageBodyDecoded
    }
}

public struct UpdateVoiceChannelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVoiceChannelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVoiceChannelInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateVoiceChannelOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let voiceChannelRequest = input.operationInput.voiceChannelRequest {
                let voiceChannelRequestdata = try encoder.encode(voiceChannelRequest)
                let voiceChannelRequestbody = ClientRuntime.HttpBody.data(voiceChannelRequestdata)
                input.builder.withBody(voiceChannelRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let voiceChannelRequestdata = "{}".data(using: .utf8)!
                    let voiceChannelRequestbody = ClientRuntime.HttpBody.data(voiceChannelRequestdata)
                    input.builder.withBody(voiceChannelRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateVoiceChannelOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVoiceChannelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVoiceChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateVoiceChannelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case voiceChannelRequest = "VoiceChannelRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let voiceChannelRequest = self.voiceChannelRequest {
            try encodeContainer.encode(voiceChannelRequest, forKey: .voiceChannelRequest)
        }
    }
}

extension UpdateVoiceChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/channels/voice"
    }
}

public struct UpdateVoiceChannelInput: Swift.Equatable {
    /// The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
    /// This member is required.
    public var applicationId: Swift.String?
    /// Specifies the status and settings of the voice channel for an application.
    /// This member is required.
    public var voiceChannelRequest: PinpointClientTypes.VoiceChannelRequest?

    public init (
        applicationId: Swift.String? = nil,
        voiceChannelRequest: PinpointClientTypes.VoiceChannelRequest? = nil
    )
    {
        self.applicationId = applicationId
        self.voiceChannelRequest = voiceChannelRequest
    }
}

struct UpdateVoiceChannelInputBody: Swift.Equatable {
    let voiceChannelRequest: PinpointClientTypes.VoiceChannelRequest?
}

extension UpdateVoiceChannelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case voiceChannelRequest = "VoiceChannelRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let voiceChannelRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.VoiceChannelRequest.self, forKey: .voiceChannelRequest)
        voiceChannelRequest = voiceChannelRequestDecoded
    }
}

extension UpdateVoiceChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateVoiceChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateVoiceChannelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateVoiceChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.VoiceChannelResponse = try responseDecoder.decode(responseBody: data)
                self.voiceChannelResponse = output
            } else {
                self.voiceChannelResponse = nil
            }
        } else {
            self.voiceChannelResponse = nil
        }
    }
}

public struct UpdateVoiceChannelOutputResponse: Swift.Equatable {
    /// Provides information about the status and settings of the voice channel for an application.
    /// This member is required.
    public var voiceChannelResponse: PinpointClientTypes.VoiceChannelResponse?

    public init (
        voiceChannelResponse: PinpointClientTypes.VoiceChannelResponse? = nil
    )
    {
        self.voiceChannelResponse = voiceChannelResponse
    }
}

struct UpdateVoiceChannelOutputResponseBody: Swift.Equatable {
    let voiceChannelResponse: PinpointClientTypes.VoiceChannelResponse?
}

extension UpdateVoiceChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case voiceChannelResponse = "VoiceChannelResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let voiceChannelResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.VoiceChannelResponse.self, forKey: .voiceChannelResponse)
        voiceChannelResponse = voiceChannelResponseDecoded
    }
}

public struct UpdateVoiceTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVoiceTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVoiceTemplateInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UpdateVoiceTemplateOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let voiceTemplateRequest = input.operationInput.voiceTemplateRequest {
                let voiceTemplateRequestdata = try encoder.encode(voiceTemplateRequest)
                let voiceTemplateRequestbody = ClientRuntime.HttpBody.data(voiceTemplateRequestdata)
                input.builder.withBody(voiceTemplateRequestbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let voiceTemplateRequestdata = "{}".data(using: .utf8)!
                    let voiceTemplateRequestbody = ClientRuntime.HttpBody.data(voiceTemplateRequestdata)
                    input.builder.withBody(voiceTemplateRequestbody)
                }
            }
        } catch let err {
            throw SdkError<UpdateVoiceTemplateOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVoiceTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVoiceTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UpdateVoiceTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case voiceTemplateRequest = "VoiceTemplateRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let voiceTemplateRequest = self.voiceTemplateRequest {
            try encodeContainer.encode(voiceTemplateRequest, forKey: .voiceTemplateRequest)
        }
    }
}

extension UpdateVoiceTemplateInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let version = version {
                let versionQueryItem = ClientRuntime.URLQueryItem(name: "version".urlPercentEncoding(), value: Swift.String(version).urlPercentEncoding())
                items.append(versionQueryItem)
            }
            if let createNewVersion = createNewVersion {
                let createNewVersionQueryItem = ClientRuntime.URLQueryItem(name: "create-new-version".urlPercentEncoding(), value: Swift.String(createNewVersion).urlPercentEncoding())
                items.append(createNewVersionQueryItem)
            }
            return items
        }
    }
}

extension UpdateVoiceTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateName = templateName else {
            return nil
        }
        return "/v1/templates/\(templateName.urlPercentEncoding())/voice"
    }
}

public struct UpdateVoiceTemplateInput: Swift.Equatable {
    /// Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template. If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.
    public var createNewVersion: Swift.Bool?
    /// The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
    /// This member is required.
    public var templateName: Swift.String?
    /// The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following:
    ///
    /// * For a get operation, retrieves information about the active version of the template.
    ///
    /// * For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.
    ///
    /// * For a delete operation, deletes the template, including all versions of the template.
    public var version: Swift.String?
    /// Specifies the content and settings for a message template that can be used in messages that are sent through the voice channel.
    /// This member is required.
    public var voiceTemplateRequest: PinpointClientTypes.VoiceTemplateRequest?

    public init (
        createNewVersion: Swift.Bool? = nil,
        templateName: Swift.String? = nil,
        version: Swift.String? = nil,
        voiceTemplateRequest: PinpointClientTypes.VoiceTemplateRequest? = nil
    )
    {
        self.createNewVersion = createNewVersion
        self.templateName = templateName
        self.version = version
        self.voiceTemplateRequest = voiceTemplateRequest
    }
}

struct UpdateVoiceTemplateInputBody: Swift.Equatable {
    let voiceTemplateRequest: PinpointClientTypes.VoiceTemplateRequest?
}

extension UpdateVoiceTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case voiceTemplateRequest = "VoiceTemplateRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let voiceTemplateRequestDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.VoiceTemplateRequest.self, forKey: .voiceTemplateRequest)
        voiceTemplateRequest = voiceTemplateRequestDecoded
    }
}

extension UpdateVoiceTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateVoiceTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateVoiceTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateVoiceTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.MessageBody = try responseDecoder.decode(responseBody: data)
                self.messageBody = output
            } else {
                self.messageBody = nil
            }
        } else {
            self.messageBody = nil
        }
    }
}

public struct UpdateVoiceTemplateOutputResponse: Swift.Equatable {
    /// Provides information about an API request or response.
    /// This member is required.
    public var messageBody: PinpointClientTypes.MessageBody?

    public init (
        messageBody: PinpointClientTypes.MessageBody? = nil
    )
    {
        self.messageBody = messageBody
    }
}

struct UpdateVoiceTemplateOutputResponseBody: Swift.Equatable {
    let messageBody: PinpointClientTypes.MessageBody?
}

extension UpdateVoiceTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageBody = "MessageBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageBodyDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageBody.self, forKey: .messageBody)
        messageBody = messageBodyDecoded
    }
}

extension PinpointClientTypes.VerificationResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case valid = "Valid"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let valid = self.valid {
            try encodeContainer.encode(valid, forKey: .valid)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let validDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .valid)
        valid = validDecoded
    }
}

extension PinpointClientTypes {
    /// Verify OTP Message Response.
    public struct VerificationResponse: Swift.Equatable {
        /// Specifies whether the OTP is valid or not.
        public var valid: Swift.Bool?

        public init (
            valid: Swift.Bool? = nil
        )
        {
            self.valid = valid
        }
    }

}

public struct VerifyOTPMessageInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "VerifyOTPMessageInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<VerifyOTPMessageInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<VerifyOTPMessageOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let verifyOTPMessageRequestParameters = input.operationInput.verifyOTPMessageRequestParameters {
                let verifyOTPMessageRequestParametersdata = try encoder.encode(verifyOTPMessageRequestParameters)
                let verifyOTPMessageRequestParametersbody = ClientRuntime.HttpBody.data(verifyOTPMessageRequestParametersdata)
                input.builder.withBody(verifyOTPMessageRequestParametersbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let verifyOTPMessageRequestParametersdata = "{}".data(using: .utf8)!
                    let verifyOTPMessageRequestParametersbody = ClientRuntime.HttpBody.data(verifyOTPMessageRequestParametersdata)
                    input.builder.withBody(verifyOTPMessageRequestParametersbody)
                }
            }
        } catch let err {
            throw SdkError<VerifyOTPMessageOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<VerifyOTPMessageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<VerifyOTPMessageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension VerifyOTPMessageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case verifyOTPMessageRequestParameters = "VerifyOTPMessageRequestParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let verifyOTPMessageRequestParameters = self.verifyOTPMessageRequestParameters {
            try encodeContainer.encode(verifyOTPMessageRequestParameters, forKey: .verifyOTPMessageRequestParameters)
        }
    }
}

extension VerifyOTPMessageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let applicationId = applicationId else {
            return nil
        }
        return "/v1/apps/\(applicationId.urlPercentEncoding())/verify-otp"
    }
}

public struct VerifyOTPMessageInput: Swift.Equatable {
    /// The unique ID of your Amazon Pinpoint application.
    /// This member is required.
    public var applicationId: Swift.String?
    /// Verify OTP message request.
    /// This member is required.
    public var verifyOTPMessageRequestParameters: PinpointClientTypes.VerifyOTPMessageRequestParameters?

    public init (
        applicationId: Swift.String? = nil,
        verifyOTPMessageRequestParameters: PinpointClientTypes.VerifyOTPMessageRequestParameters? = nil
    )
    {
        self.applicationId = applicationId
        self.verifyOTPMessageRequestParameters = verifyOTPMessageRequestParameters
    }
}

struct VerifyOTPMessageInputBody: Swift.Equatable {
    let verifyOTPMessageRequestParameters: PinpointClientTypes.VerifyOTPMessageRequestParameters?
}

extension VerifyOTPMessageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case verifyOTPMessageRequestParameters = "VerifyOTPMessageRequestParameters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let verifyOTPMessageRequestParametersDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.VerifyOTPMessageRequestParameters.self, forKey: .verifyOTPMessageRequestParameters)
        verifyOTPMessageRequestParameters = verifyOTPMessageRequestParametersDecoded
    }
}

extension VerifyOTPMessageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension VerifyOTPMessageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PayloadTooLargeException" : self = .payloadTooLargeException(try PayloadTooLargeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum VerifyOTPMessageOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case payloadTooLargeException(PayloadTooLargeException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension VerifyOTPMessageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData() {
            if let responseDecoder = decoder {
                let output: PinpointClientTypes.VerificationResponse = try responseDecoder.decode(responseBody: data)
                self.verificationResponse = output
            } else {
                self.verificationResponse = nil
            }
        } else {
            self.verificationResponse = nil
        }
    }
}

public struct VerifyOTPMessageOutputResponse: Swift.Equatable {
    /// Verify OTP Message Response.
    /// This member is required.
    public var verificationResponse: PinpointClientTypes.VerificationResponse?

    public init (
        verificationResponse: PinpointClientTypes.VerificationResponse? = nil
    )
    {
        self.verificationResponse = verificationResponse
    }
}

struct VerifyOTPMessageOutputResponseBody: Swift.Equatable {
    let verificationResponse: PinpointClientTypes.VerificationResponse?
}

extension VerifyOTPMessageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case verificationResponse = "VerificationResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let verificationResponseDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.VerificationResponse.self, forKey: .verificationResponse)
        verificationResponse = verificationResponseDecoded
    }
}

extension PinpointClientTypes.VerifyOTPMessageRequestParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationIdentity = "DestinationIdentity"
        case otp = "Otp"
        case referenceId = "ReferenceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationIdentity = self.destinationIdentity {
            try encodeContainer.encode(destinationIdentity, forKey: .destinationIdentity)
        }
        if let otp = self.otp {
            try encodeContainer.encode(otp, forKey: .otp)
        }
        if let referenceId = self.referenceId {
            try encodeContainer.encode(referenceId, forKey: .referenceId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationIdentityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationIdentity)
        destinationIdentity = destinationIdentityDecoded
        let otpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .otp)
        otp = otpDecoded
        let referenceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .referenceId)
        referenceId = referenceIdDecoded
    }
}

extension PinpointClientTypes {
    /// Verify OTP message request.
    public struct VerifyOTPMessageRequestParameters: Swift.Equatable {
        /// The destination identity to send OTP to.
        /// This member is required.
        public var destinationIdentity: Swift.String?
        /// The OTP the end user provided for verification.
        /// This member is required.
        public var otp: Swift.String?
        /// The reference identifier provided when the OTP was previously sent.
        /// This member is required.
        public var referenceId: Swift.String?

        public init (
            destinationIdentity: Swift.String? = nil,
            otp: Swift.String? = nil,
            referenceId: Swift.String? = nil
        )
        {
            self.destinationIdentity = destinationIdentity
            self.otp = otp
            self.referenceId = referenceId
        }
    }

}

extension PinpointClientTypes.VoiceChannelRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the status and settings of the voice channel for an application.
    public struct VoiceChannelRequest: Swift.Equatable {
        /// Specifies whether to enable the voice channel for the application.
        public var enabled: Swift.Bool?

        public init (
            enabled: Swift.Bool? = nil
        )
        {
            self.enabled = enabled
        }
    }

}

extension PinpointClientTypes.VoiceChannelResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case creationDate = "CreationDate"
        case enabled = "Enabled"
        case hasCredential = "HasCredential"
        case id = "Id"
        case isArchived = "IsArchived"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedDate = "LastModifiedDate"
        case platform = "Platform"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let hasCredential = self.hasCredential {
            try encodeContainer.encode(hasCredential, forKey: .hasCredential)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isArchived = self.isArchived {
            try encodeContainer.encode(isArchived, forKey: .isArchived)
        }
        if let lastModifiedBy = self.lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let platform = self.platform {
            try encodeContainer.encode(platform, forKey: .platform)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let hasCredentialDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasCredential)
        hasCredential = hasCredentialDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let isArchivedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isArchived)
        isArchived = isArchivedDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let platformDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platform)
        platform = platformDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the status and settings of the voice channel for an application.
    public struct VoiceChannelResponse: Swift.Equatable {
        /// The unique identifier for the application that the voice channel applies to.
        public var applicationId: Swift.String?
        /// The date and time, in ISO 8601 format, when the voice channel was enabled.
        public var creationDate: Swift.String?
        /// Specifies whether the voice channel is enabled for the application.
        public var enabled: Swift.Bool?
        /// (Not used) This property is retained only for backward compatibility.
        public var hasCredential: Swift.Bool?
        /// (Deprecated) An identifier for the voice channel. This property is retained only for backward compatibility.
        public var id: Swift.String?
        /// Specifies whether the voice channel is archived.
        public var isArchived: Swift.Bool?
        /// The user who last modified the voice channel.
        public var lastModifiedBy: Swift.String?
        /// The date and time, in ISO 8601 format, when the voice channel was last modified.
        public var lastModifiedDate: Swift.String?
        /// The type of messaging or notification platform for the channel. For the voice channel, this value is VOICE.
        /// This member is required.
        public var platform: Swift.String?
        /// The current version of the voice channel.
        public var version: Swift.Int?

        public init (
            applicationId: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            hasCredential: Swift.Bool? = nil,
            id: Swift.String? = nil,
            isArchived: Swift.Bool? = nil,
            lastModifiedBy: Swift.String? = nil,
            lastModifiedDate: Swift.String? = nil,
            platform: Swift.String? = nil,
            version: Swift.Int? = nil
        )
        {
            self.applicationId = applicationId
            self.creationDate = creationDate
            self.enabled = enabled
            self.hasCredential = hasCredential
            self.id = id
            self.isArchived = isArchived
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedDate = lastModifiedDate
            self.platform = platform
            self.version = version
        }
    }

}

extension PinpointClientTypes.VoiceMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
        case languageCode = "LanguageCode"
        case originationNumber = "OriginationNumber"
        case substitutions = "Substitutions"
        case voiceId = "VoiceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode, forKey: .languageCode)
        }
        if let originationNumber = self.originationNumber {
            try encodeContainer.encode(originationNumber, forKey: .originationNumber)
        }
        if let substitutions = substitutions {
            var substitutionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .substitutions)
            for (dictKey0, mapOfListOf__string0) in substitutions {
                var mapOfListOf__string0Container = substitutionsContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for __string1 in mapOfListOf__string0 {
                    try mapOfListOf__string0Container.encode(__string1)
                }
            }
        }
        if let voiceId = self.voiceId {
            try encodeContainer.encode(voiceId, forKey: .voiceId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let originationNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originationNumber)
        originationNumber = originationNumberDecoded
        let substitutionsContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .substitutions)
        var substitutionsDecoded0: [Swift.String:[Swift.String]]? = nil
        if let substitutionsContainer = substitutionsContainer {
            substitutionsDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listof__string0) in substitutionsContainer {
                var listof__string0Decoded0: [Swift.String]? = nil
                if let listof__string0 = listof__string0 {
                    listof__string0Decoded0 = [Swift.String]()
                    for string1 in listof__string0 {
                        if let string1 = string1 {
                            listof__string0Decoded0?.append(string1)
                        }
                    }
                }
                substitutionsDecoded0?[key0] = listof__string0Decoded0
            }
        }
        substitutions = substitutionsDecoded0
        let voiceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .voiceId)
        voiceId = voiceIdDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the settings for a one-time voice message that's sent directly to an endpoint through the voice channel.
    public struct VoiceMessage: Swift.Equatable {
        /// The text of the script to use for the voice message.
        public var body: Swift.String?
        /// The code for the language to use when synthesizing the text of the message script. For a list of supported languages and the code for each one, see the [Amazon Polly Developer Guide](https://docs.aws.amazon.com/polly/latest/dg/what-is.html).
        public var languageCode: Swift.String?
        /// The long code to send the voice message from. This value should be one of the dedicated long codes that's assigned to your AWS account. Although it isn't required, we recommend that you specify the long code in E.164 format, for example +12065550100, to ensure prompt and accurate delivery of the message.
        public var originationNumber: Swift.String?
        /// The default message variables to use in the voice message. You can override the default variables with individual address variables.
        public var substitutions: [Swift.String:[Swift.String]]?
        /// The name of the voice to use when delivering the message. For a list of supported voices, see the [Amazon Polly Developer Guide](https://docs.aws.amazon.com/polly/latest/dg/what-is.html).
        public var voiceId: Swift.String?

        public init (
            body: Swift.String? = nil,
            languageCode: Swift.String? = nil,
            originationNumber: Swift.String? = nil,
            substitutions: [Swift.String:[Swift.String]]? = nil,
            voiceId: Swift.String? = nil
        )
        {
            self.body = body
            self.languageCode = languageCode
            self.originationNumber = originationNumber
            self.substitutions = substitutions
            self.voiceId = voiceId
        }
    }

}

extension PinpointClientTypes.VoiceTemplateRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
        case defaultSubstitutions = "DefaultSubstitutions"
        case languageCode = "LanguageCode"
        case templateDescription = "TemplateDescription"
        case voiceId = "VoiceId"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let defaultSubstitutions = self.defaultSubstitutions {
            try encodeContainer.encode(defaultSubstitutions, forKey: .defaultSubstitutions)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode, forKey: .languageCode)
        }
        if let templateDescription = self.templateDescription {
            try encodeContainer.encode(templateDescription, forKey: .templateDescription)
        }
        if let voiceId = self.voiceId {
            try encodeContainer.encode(voiceId, forKey: .voiceId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapOf__string0) in tags {
                try tagsContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let defaultSubstitutionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultSubstitutions)
        defaultSubstitutions = defaultSubstitutionsDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let templateDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateDescription)
        templateDescription = templateDescriptionDecoded
        let voiceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .voiceId)
        voiceId = voiceIdDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the content and settings for a message template that can be used in messages that are sent through the voice channel.
    public struct VoiceTemplateRequest: Swift.Equatable {
        /// The text of the script to use in messages that are based on the message template, in plain text format.
        public var body: Swift.String?
        /// A JSON object that specifies the default values to use for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable. When you create a message that's based on the template, you can override these defaults with message-specific and address-specific variables and values.
        public var defaultSubstitutions: Swift.String?
        /// The code for the language to use when synthesizing the text of the script in messages that are based on the message template. For a list of supported languages and the code for each one, see the [Amazon Polly Developer Guide](https://docs.aws.amazon.com/polly/latest/dg/what-is.html).
        public var languageCode: Swift.String?
        /// A string-to-string map of key-value pairs that defines the tags to associate with the message template. Each tag consists of a required tag key and an associated tag value.
        public var tags: [Swift.String:Swift.String]?
        /// A custom description of the message template.
        public var templateDescription: Swift.String?
        /// The name of the voice to use when delivering messages that are based on the message template. For a list of supported voices, see the [Amazon Polly Developer Guide](https://docs.aws.amazon.com/polly/latest/dg/what-is.html).
        public var voiceId: Swift.String?

        public init (
            body: Swift.String? = nil,
            defaultSubstitutions: Swift.String? = nil,
            languageCode: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            templateDescription: Swift.String? = nil,
            voiceId: Swift.String? = nil
        )
        {
            self.body = body
            self.defaultSubstitutions = defaultSubstitutions
            self.languageCode = languageCode
            self.tags = tags
            self.templateDescription = templateDescription
            self.voiceId = voiceId
        }
    }

}

extension PinpointClientTypes.VoiceTemplateResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case body = "Body"
        case creationDate = "CreationDate"
        case defaultSubstitutions = "DefaultSubstitutions"
        case languageCode = "LanguageCode"
        case lastModifiedDate = "LastModifiedDate"
        case templateDescription = "TemplateDescription"
        case templateName = "TemplateName"
        case templateType = "TemplateType"
        case version = "Version"
        case voiceId = "VoiceId"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let defaultSubstitutions = self.defaultSubstitutions {
            try encodeContainer.encode(defaultSubstitutions, forKey: .defaultSubstitutions)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode, forKey: .languageCode)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let templateDescription = self.templateDescription {
            try encodeContainer.encode(templateDescription, forKey: .templateDescription)
        }
        if let templateName = self.templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
        if let templateType = self.templateType {
            try encodeContainer.encode(templateType.rawValue, forKey: .templateType)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let voiceId = self.voiceId {
            try encodeContainer.encode(voiceId, forKey: .voiceId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapOf__string0) in tags {
                try tagsContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let defaultSubstitutionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultSubstitutions)
        defaultSubstitutions = defaultSubstitutionsDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let templateDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateDescription)
        templateDescription = templateDescriptionDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let templateTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.TemplateType.self, forKey: .templateType)
        templateType = templateTypeDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let voiceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .voiceId)
        voiceId = voiceIdDecoded
    }
}

extension PinpointClientTypes {
    /// Provides information about the content and settings for a message template that can be used in messages that are sent through the voice channel.
    public struct VoiceTemplateResponse: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the message template.
        public var arn: Swift.String?
        /// The text of the script that's used in messages that are based on the message template, in plain text format.
        public var body: Swift.String?
        /// The date, in ISO 8601 format, when the message template was created.
        /// This member is required.
        public var creationDate: Swift.String?
        /// The JSON object that specifies the default values that are used for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable.
        public var defaultSubstitutions: Swift.String?
        /// The code for the language that's used when synthesizing the text of the script in messages that are based on the message template. For a list of supported languages and the code for each one, see the [Amazon Polly Developer Guide](https://docs.aws.amazon.com/polly/latest/dg/what-is.html).
        public var languageCode: Swift.String?
        /// The date, in ISO 8601 format, when the message template was last modified.
        /// This member is required.
        public var lastModifiedDate: Swift.String?
        /// A string-to-string map of key-value pairs that identifies the tags that are associated with the message template. Each tag consists of a required tag key and an associated tag value.
        public var tags: [Swift.String:Swift.String]?
        /// The custom description of the message template.
        public var templateDescription: Swift.String?
        /// The name of the message template.
        /// This member is required.
        public var templateName: Swift.String?
        /// The type of channel that the message template is designed for. For a voice template, this value is VOICE.
        /// This member is required.
        public var templateType: PinpointClientTypes.TemplateType?
        /// The unique identifier, as an integer, for the active version of the message template, or the version of the template that you specified by using the version parameter in your request.
        public var version: Swift.String?
        /// The name of the voice that's used when delivering messages that are based on the message template. For a list of supported voices, see the [Amazon Polly Developer Guide](https://docs.aws.amazon.com/polly/latest/dg/what-is.html).
        public var voiceId: Swift.String?

        public init (
            arn: Swift.String? = nil,
            body: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            defaultSubstitutions: Swift.String? = nil,
            languageCode: Swift.String? = nil,
            lastModifiedDate: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            templateDescription: Swift.String? = nil,
            templateName: Swift.String? = nil,
            templateType: PinpointClientTypes.TemplateType? = nil,
            version: Swift.String? = nil,
            voiceId: Swift.String? = nil
        )
        {
            self.arn = arn
            self.body = body
            self.creationDate = creationDate
            self.defaultSubstitutions = defaultSubstitutions
            self.languageCode = languageCode
            self.lastModifiedDate = lastModifiedDate
            self.tags = tags
            self.templateDescription = templateDescription
            self.templateName = templateName
            self.templateType = templateType
            self.version = version
            self.voiceId = voiceId
        }
    }

}

extension PinpointClientTypes.WaitActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextActivity = "NextActivity"
        case waitTime = "WaitTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextActivity = self.nextActivity {
            try encodeContainer.encode(nextActivity, forKey: .nextActivity)
        }
        if let waitTime = self.waitTime {
            try encodeContainer.encode(waitTime, forKey: .waitTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextActivityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextActivity)
        nextActivity = nextActivityDecoded
        let waitTimeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.WaitTime.self, forKey: .waitTime)
        waitTime = waitTimeDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the settings for a wait activity in a journey. This type of activity waits for a certain amount of time or until a specific date and time before moving participants to the next activity in a journey.
    public struct WaitActivity: Swift.Equatable {
        /// The unique identifier for the next activity to perform, after performing the wait activity.
        public var nextActivity: Swift.String?
        /// The amount of time to wait or the date and time when the activity moves participants to the next activity in the journey.
        public var waitTime: PinpointClientTypes.WaitTime?

        public init (
            nextActivity: Swift.String? = nil,
            waitTime: PinpointClientTypes.WaitTime? = nil
        )
        {
            self.nextActivity = nextActivity
            self.waitTime = waitTime
        }
    }

}

extension PinpointClientTypes.WaitTime: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case waitFor = "WaitFor"
        case waitUntil = "WaitUntil"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let waitFor = self.waitFor {
            try encodeContainer.encode(waitFor, forKey: .waitFor)
        }
        if let waitUntil = self.waitUntil {
            try encodeContainer.encode(waitUntil, forKey: .waitUntil)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let waitForDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .waitFor)
        waitFor = waitForDecoded
        let waitUntilDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .waitUntil)
        waitUntil = waitUntilDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies a duration or a date and time that indicates when Amazon Pinpoint determines whether an activity's conditions have been met or an activity moves participants to the next activity in a journey.
    public struct WaitTime: Swift.Equatable {
        /// The amount of time to wait, as a duration in ISO 8601 format, before determining whether the activity's conditions have been met or moving participants to the next activity in the journey.
        public var waitFor: Swift.String?
        /// The date and time, in ISO 8601 format, when Amazon Pinpoint determines whether the activity's conditions have been met or the activity moves participants to the next activity in the journey.
        public var waitUntil: Swift.String?

        public init (
            waitFor: Swift.String? = nil,
            waitUntil: Swift.String? = nil
        )
        {
            self.waitFor = waitFor
            self.waitUntil = waitUntil
        }
    }

}

extension PinpointClientTypes.WriteApplicationSettingsRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case campaignHook = "CampaignHook"
        case cloudWatchMetricsEnabled = "CloudWatchMetricsEnabled"
        case eventTaggingEnabled = "EventTaggingEnabled"
        case limits = "Limits"
        case quietTime = "QuietTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let campaignHook = self.campaignHook {
            try encodeContainer.encode(campaignHook, forKey: .campaignHook)
        }
        if let cloudWatchMetricsEnabled = self.cloudWatchMetricsEnabled {
            try encodeContainer.encode(cloudWatchMetricsEnabled, forKey: .cloudWatchMetricsEnabled)
        }
        if let eventTaggingEnabled = self.eventTaggingEnabled {
            try encodeContainer.encode(eventTaggingEnabled, forKey: .eventTaggingEnabled)
        }
        if let limits = self.limits {
            try encodeContainer.encode(limits, forKey: .limits)
        }
        if let quietTime = self.quietTime {
            try encodeContainer.encode(quietTime, forKey: .quietTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let campaignHookDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignHook.self, forKey: .campaignHook)
        campaignHook = campaignHookDecoded
        let cloudWatchMetricsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .cloudWatchMetricsEnabled)
        cloudWatchMetricsEnabled = cloudWatchMetricsEnabledDecoded
        let eventTaggingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .eventTaggingEnabled)
        eventTaggingEnabled = eventTaggingEnabledDecoded
        let limitsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignLimits.self, forKey: .limits)
        limits = limitsDecoded
        let quietTimeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.QuietTime.self, forKey: .quietTime)
        quietTime = quietTimeDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the default settings for an application.
    public struct WriteApplicationSettingsRequest: Swift.Equatable {
        /// The settings for the AWS Lambda function to invoke by default as a code hook for campaigns in the application. You can use this hook to customize segments that are used by campaigns in the application. To override these settings and define custom settings for a specific campaign, use the CampaignHook object of the Campaign resource.
        public var campaignHook: PinpointClientTypes.CampaignHook?
        /// Specifies whether to enable application-related alarms in Amazon CloudWatch.
        public var cloudWatchMetricsEnabled: Swift.Bool?
        public var eventTaggingEnabled: Swift.Bool?
        /// The default sending limits for campaigns in the application. To override these limits and define custom limits for a specific campaign or journey, use the Campaign resource or the Journey resource, respectively.
        public var limits: PinpointClientTypes.CampaignLimits?
        /// The default quiet time for campaigns in the application. Quiet time is a specific time range when messages aren't sent to endpoints, if all the following conditions are met:
        ///
        /// * The EndpointDemographic.Timezone property of the endpoint is set to a valid value.
        ///
        /// * The current time in the endpoint's time zone is later than or equal to the time specified by the QuietTime.Start property for the application (or a campaign or journey that has custom quiet time settings).
        ///
        /// * The current time in the endpoint's time zone is earlier than or equal to the time specified by the QuietTime.End property for the application (or a campaign or journey that has custom quiet time settings).
        ///
        ///
        /// If any of the preceding conditions isn't met, the endpoint will receive messages from a campaign or journey, even if quiet time is enabled. To override the default quiet time settings for a specific campaign or journey, use the Campaign resource or the Journey resource to define a custom quiet time for the campaign or journey.
        public var quietTime: PinpointClientTypes.QuietTime?

        public init (
            campaignHook: PinpointClientTypes.CampaignHook? = nil,
            cloudWatchMetricsEnabled: Swift.Bool? = nil,
            eventTaggingEnabled: Swift.Bool? = nil,
            limits: PinpointClientTypes.CampaignLimits? = nil,
            quietTime: PinpointClientTypes.QuietTime? = nil
        )
        {
            self.campaignHook = campaignHook
            self.cloudWatchMetricsEnabled = cloudWatchMetricsEnabled
            self.eventTaggingEnabled = eventTaggingEnabled
            self.limits = limits
            self.quietTime = quietTime
        }
    }

}

extension PinpointClientTypes.WriteCampaignRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalTreatments = "AdditionalTreatments"
        case customDeliveryConfiguration = "CustomDeliveryConfiguration"
        case description = "Description"
        case holdoutPercent = "HoldoutPercent"
        case hook = "Hook"
        case isPaused = "IsPaused"
        case limits = "Limits"
        case messageConfiguration = "MessageConfiguration"
        case name = "Name"
        case priority = "Priority"
        case schedule = "Schedule"
        case segmentId = "SegmentId"
        case segmentVersion = "SegmentVersion"
        case templateConfiguration = "TemplateConfiguration"
        case treatmentDescription = "TreatmentDescription"
        case treatmentName = "TreatmentName"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalTreatments = additionalTreatments {
            var additionalTreatmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalTreatments)
            for writetreatmentresource0 in additionalTreatments {
                try additionalTreatmentsContainer.encode(writetreatmentresource0)
            }
        }
        if let customDeliveryConfiguration = self.customDeliveryConfiguration {
            try encodeContainer.encode(customDeliveryConfiguration, forKey: .customDeliveryConfiguration)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let holdoutPercent = self.holdoutPercent {
            try encodeContainer.encode(holdoutPercent, forKey: .holdoutPercent)
        }
        if let hook = self.hook {
            try encodeContainer.encode(hook, forKey: .hook)
        }
        if let isPaused = self.isPaused {
            try encodeContainer.encode(isPaused, forKey: .isPaused)
        }
        if let limits = self.limits {
            try encodeContainer.encode(limits, forKey: .limits)
        }
        if let messageConfiguration = self.messageConfiguration {
            try encodeContainer.encode(messageConfiguration, forKey: .messageConfiguration)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let priority = self.priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let schedule = self.schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let segmentId = self.segmentId {
            try encodeContainer.encode(segmentId, forKey: .segmentId)
        }
        if let segmentVersion = self.segmentVersion {
            try encodeContainer.encode(segmentVersion, forKey: .segmentVersion)
        }
        if let templateConfiguration = self.templateConfiguration {
            try encodeContainer.encode(templateConfiguration, forKey: .templateConfiguration)
        }
        if let treatmentDescription = self.treatmentDescription {
            try encodeContainer.encode(treatmentDescription, forKey: .treatmentDescription)
        }
        if let treatmentName = self.treatmentName {
            try encodeContainer.encode(treatmentName, forKey: .treatmentName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapOf__string0) in tags {
                try tagsContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let additionalTreatmentsContainer = try containerValues.decodeIfPresent([PinpointClientTypes.WriteTreatmentResource?].self, forKey: .additionalTreatments)
        var additionalTreatmentsDecoded0:[PinpointClientTypes.WriteTreatmentResource]? = nil
        if let additionalTreatmentsContainer = additionalTreatmentsContainer {
            additionalTreatmentsDecoded0 = [PinpointClientTypes.WriteTreatmentResource]()
            for structure0 in additionalTreatmentsContainer {
                if let structure0 = structure0 {
                    additionalTreatmentsDecoded0?.append(structure0)
                }
            }
        }
        additionalTreatments = additionalTreatmentsDecoded0
        let customDeliveryConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CustomDeliveryConfiguration.self, forKey: .customDeliveryConfiguration)
        customDeliveryConfiguration = customDeliveryConfigurationDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let holdoutPercentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .holdoutPercent)
        holdoutPercent = holdoutPercentDecoded
        let hookDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignHook.self, forKey: .hook)
        hook = hookDecoded
        let isPausedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isPaused)
        isPaused = isPausedDecoded
        let limitsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignLimits.self, forKey: .limits)
        limits = limitsDecoded
        let messageConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageConfiguration.self, forKey: .messageConfiguration)
        messageConfiguration = messageConfigurationDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Schedule.self, forKey: .schedule)
        schedule = scheduleDecoded
        let segmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .segmentId)
        segmentId = segmentIdDecoded
        let segmentVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentVersion)
        segmentVersion = segmentVersionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let templateConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.TemplateConfiguration.self, forKey: .templateConfiguration)
        templateConfiguration = templateConfigurationDecoded
        let treatmentDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .treatmentDescription)
        treatmentDescription = treatmentDescriptionDecoded
        let treatmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .treatmentName)
        treatmentName = treatmentNameDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the configuration and other settings for a campaign.
    public struct WriteCampaignRequest: Swift.Equatable {
        /// An array of requests that defines additional treatments for the campaign, in addition to the default treatment for the campaign.
        public var additionalTreatments: [PinpointClientTypes.WriteTreatmentResource]?
        /// The delivery configuration settings for sending the campaign through a custom channel. This object is required if the MessageConfiguration object for the campaign specifies a CustomMessage object.
        public var customDeliveryConfiguration: PinpointClientTypes.CustomDeliveryConfiguration?
        /// A custom description of the campaign.
        public var description: Swift.String?
        /// The allocated percentage of users (segment members) who shouldn't receive messages from the campaign.
        public var holdoutPercent: Swift.Int?
        /// The settings for the AWS Lambda function to invoke as a code hook for the campaign. You can use this hook to customize the segment that's used by the campaign.
        public var hook: PinpointClientTypes.CampaignHook?
        /// Specifies whether to pause the campaign. A paused campaign doesn't run unless you resume it by changing this value to false.
        public var isPaused: Swift.Bool?
        /// The messaging limits for the campaign.
        public var limits: PinpointClientTypes.CampaignLimits?
        /// The message configuration settings for the campaign.
        public var messageConfiguration: PinpointClientTypes.MessageConfiguration?
        /// A custom name for the campaign.
        public var name: Swift.String?
        /// Defines the priority of the campaign, used to decide the order of messages displayed to user if there are multiple messages scheduled to be displayed at the same moment.
        public var priority: Swift.Int?
        /// The schedule settings for the campaign.
        public var schedule: PinpointClientTypes.Schedule?
        /// The unique identifier for the segment to associate with the campaign.
        public var segmentId: Swift.String?
        /// The version of the segment to associate with the campaign.
        public var segmentVersion: Swift.Int?
        /// A string-to-string map of key-value pairs that defines the tags to associate with the campaign. Each tag consists of a required tag key and an associated tag value.
        public var tags: [Swift.String:Swift.String]?
        /// The message template to use for the campaign.
        public var templateConfiguration: PinpointClientTypes.TemplateConfiguration?
        /// A custom description of the default treatment for the campaign.
        public var treatmentDescription: Swift.String?
        /// A custom name of the default treatment for the campaign, if the campaign has multiple treatments. A treatment is a variation of a campaign that's used for A/B testing.
        public var treatmentName: Swift.String?

        public init (
            additionalTreatments: [PinpointClientTypes.WriteTreatmentResource]? = nil,
            customDeliveryConfiguration: PinpointClientTypes.CustomDeliveryConfiguration? = nil,
            description: Swift.String? = nil,
            holdoutPercent: Swift.Int? = nil,
            hook: PinpointClientTypes.CampaignHook? = nil,
            isPaused: Swift.Bool? = nil,
            limits: PinpointClientTypes.CampaignLimits? = nil,
            messageConfiguration: PinpointClientTypes.MessageConfiguration? = nil,
            name: Swift.String? = nil,
            priority: Swift.Int? = nil,
            schedule: PinpointClientTypes.Schedule? = nil,
            segmentId: Swift.String? = nil,
            segmentVersion: Swift.Int? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            templateConfiguration: PinpointClientTypes.TemplateConfiguration? = nil,
            treatmentDescription: Swift.String? = nil,
            treatmentName: Swift.String? = nil
        )
        {
            self.additionalTreatments = additionalTreatments
            self.customDeliveryConfiguration = customDeliveryConfiguration
            self.description = description
            self.holdoutPercent = holdoutPercent
            self.hook = hook
            self.isPaused = isPaused
            self.limits = limits
            self.messageConfiguration = messageConfiguration
            self.name = name
            self.priority = priority
            self.schedule = schedule
            self.segmentId = segmentId
            self.segmentVersion = segmentVersion
            self.tags = tags
            self.templateConfiguration = templateConfiguration
            self.treatmentDescription = treatmentDescription
            self.treatmentName = treatmentName
        }
    }

}

extension PinpointClientTypes.WriteEventStream: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationStreamArn = "DestinationStreamArn"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationStreamArn = self.destinationStreamArn {
            try encodeContainer.encode(destinationStreamArn, forKey: .destinationStreamArn)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationStreamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationStreamArn)
        destinationStreamArn = destinationStreamArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the Amazon Resource Name (ARN) of an event stream to publish events to and the AWS Identity and Access Management (IAM) role to use when publishing those events.
    public struct WriteEventStream: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Amazon Kinesis data stream or Amazon Kinesis Data Firehose delivery stream that you want to publish event data to. For a Kinesis data stream, the ARN format is: arn:aws:kinesis:region:account-id:stream/stream_name For a Kinesis Data Firehose delivery stream, the ARN format is: arn:aws:firehose:region:account-id:deliverystream/stream_name
        /// This member is required.
        public var destinationStreamArn: Swift.String?
        /// The AWS Identity and Access Management (IAM) role that authorizes Amazon Pinpoint to publish event data to the stream in your AWS account.
        /// This member is required.
        public var roleArn: Swift.String?

        public init (
            destinationStreamArn: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.destinationStreamArn = destinationStreamArn
            self.roleArn = roleArn
        }
    }

}

extension PinpointClientTypes.WriteJourneyRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activities = "Activities"
        case closedDays = "ClosedDays"
        case creationDate = "CreationDate"
        case journeyChannelSettings = "JourneyChannelSettings"
        case lastModifiedDate = "LastModifiedDate"
        case limits = "Limits"
        case localTime = "LocalTime"
        case name = "Name"
        case openHours = "OpenHours"
        case quietTime = "QuietTime"
        case refreshFrequency = "RefreshFrequency"
        case refreshOnSegmentUpdate = "RefreshOnSegmentUpdate"
        case schedule = "Schedule"
        case sendingSchedule = "SendingSchedule"
        case startActivity = "StartActivity"
        case startCondition = "StartCondition"
        case state = "State"
        case waitForQuietTime = "WaitForQuietTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activities = activities {
            var activitiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .activities)
            for (dictKey0, mapOfActivity0) in activities {
                try activitiesContainer.encode(mapOfActivity0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let closedDays = self.closedDays {
            try encodeContainer.encode(closedDays, forKey: .closedDays)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let journeyChannelSettings = self.journeyChannelSettings {
            try encodeContainer.encode(journeyChannelSettings, forKey: .journeyChannelSettings)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let limits = self.limits {
            try encodeContainer.encode(limits, forKey: .limits)
        }
        if let localTime = self.localTime {
            try encodeContainer.encode(localTime, forKey: .localTime)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let openHours = self.openHours {
            try encodeContainer.encode(openHours, forKey: .openHours)
        }
        if let quietTime = self.quietTime {
            try encodeContainer.encode(quietTime, forKey: .quietTime)
        }
        if let refreshFrequency = self.refreshFrequency {
            try encodeContainer.encode(refreshFrequency, forKey: .refreshFrequency)
        }
        if let refreshOnSegmentUpdate = self.refreshOnSegmentUpdate {
            try encodeContainer.encode(refreshOnSegmentUpdate, forKey: .refreshOnSegmentUpdate)
        }
        if let schedule = self.schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let sendingSchedule = self.sendingSchedule {
            try encodeContainer.encode(sendingSchedule, forKey: .sendingSchedule)
        }
        if let startActivity = self.startActivity {
            try encodeContainer.encode(startActivity, forKey: .startActivity)
        }
        if let startCondition = self.startCondition {
            try encodeContainer.encode(startCondition, forKey: .startCondition)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let waitForQuietTime = self.waitForQuietTime {
            try encodeContainer.encode(waitForQuietTime, forKey: .waitForQuietTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activitiesContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.Activity?].self, forKey: .activities)
        var activitiesDecoded0: [Swift.String:PinpointClientTypes.Activity]? = nil
        if let activitiesContainer = activitiesContainer {
            activitiesDecoded0 = [Swift.String:PinpointClientTypes.Activity]()
            for (key0, activity0) in activitiesContainer {
                if let activity0 = activity0 {
                    activitiesDecoded0?[key0] = activity0
                }
            }
        }
        activities = activitiesDecoded0
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let limitsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneyLimits.self, forKey: .limits)
        limits = limitsDecoded
        let localTimeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .localTime)
        localTime = localTimeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let quietTimeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.QuietTime.self, forKey: .quietTime)
        quietTime = quietTimeDecoded
        let refreshFrequencyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .refreshFrequency)
        refreshFrequency = refreshFrequencyDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneySchedule.self, forKey: .schedule)
        schedule = scheduleDecoded
        let startActivityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startActivity)
        startActivity = startActivityDecoded
        let startConditionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.StartCondition.self, forKey: .startCondition)
        startCondition = startConditionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.State.self, forKey: .state)
        state = stateDecoded
        let waitForQuietTimeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .waitForQuietTime)
        waitForQuietTime = waitForQuietTimeDecoded
        let refreshOnSegmentUpdateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .refreshOnSegmentUpdate)
        refreshOnSegmentUpdate = refreshOnSegmentUpdateDecoded
        let journeyChannelSettingsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneyChannelSettings.self, forKey: .journeyChannelSettings)
        journeyChannelSettings = journeyChannelSettingsDecoded
        let sendingScheduleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sendingSchedule)
        sendingSchedule = sendingScheduleDecoded
        let openHoursDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.OpenHours.self, forKey: .openHours)
        openHours = openHoursDecoded
        let closedDaysDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ClosedDays.self, forKey: .closedDays)
        closedDays = closedDaysDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the configuration and other settings for a journey.
    public struct WriteJourneyRequest: Swift.Equatable {
        /// A map that contains a set of Activity objects, one object for each activity in the journey. For each Activity object, the key is the unique identifier (string) for an activity and the value is the settings for the activity. An activity identifier can contain a maximum of 100 characters. The characters must be alphanumeric characters.
        public var activities: [Swift.String:PinpointClientTypes.Activity]?
        /// The time when journey will stop sending messages. QuietTime should be configured first and SendingSchedule should be set to true.
        public var closedDays: PinpointClientTypes.ClosedDays?
        /// The date, in ISO 8601 format, when the journey was created.
        public var creationDate: Swift.String?
        /// The channel-specific configurations for the journey.
        public var journeyChannelSettings: PinpointClientTypes.JourneyChannelSettings?
        /// The date, in ISO 8601 format, when the journey was last modified.
        public var lastModifiedDate: Swift.String?
        /// The messaging and entry limits for the journey.
        public var limits: PinpointClientTypes.JourneyLimits?
        /// Specifies whether the journey's scheduled start and end times use each participant's local time. To base the schedule on each participant's local time, set this value to true.
        public var localTime: Swift.Bool?
        /// The name of the journey. A journey name can contain a maximum of 150 characters. The characters can be alphanumeric characters or symbols, such as underscores (_) or hyphens (-). A journey name can't contain any spaces.
        /// This member is required.
        public var name: Swift.String?
        /// The time when journey allow to send messages. QuietTime should be configured first and SendingSchedule should be set to true.
        public var openHours: PinpointClientTypes.OpenHours?
        /// The quiet time settings for the journey. Quiet time is a specific time range when a journey doesn't send messages to participants, if all the following conditions are met:
        ///
        /// * The EndpointDemographic.Timezone property of the endpoint for the participant is set to a valid value.
        ///
        /// * The current time in the participant's time zone is later than or equal to the time specified by the QuietTime.Start property for the journey.
        ///
        /// * The current time in the participant's time zone is earlier than or equal to the time specified by the QuietTime.End property for the journey.
        ///
        ///
        /// If any of the preceding conditions isn't met, the participant will receive messages from the journey, even if quiet time is enabled.
        public var quietTime: PinpointClientTypes.QuietTime?
        /// The frequency with which Amazon Pinpoint evaluates segment and event data for the journey, as a duration in ISO 8601 format.
        public var refreshFrequency: Swift.String?
        /// Specifies whether a journey should be refreshed on segment update.
        public var refreshOnSegmentUpdate: Swift.Bool?
        /// The schedule settings for the journey.
        public var schedule: PinpointClientTypes.JourneySchedule?
        /// Indicates if journey have Advance Quiet Time (OpenHours and ClosedDays). This flag should be set to true in order to allow (OpenHours and ClosedDays)
        public var sendingSchedule: Swift.Bool?
        /// The unique identifier for the first activity in the journey. The identifier for this activity can contain a maximum of 128 characters. The characters must be alphanumeric characters.
        public var startActivity: Swift.String?
        /// The segment that defines which users are participants in the journey.
        public var startCondition: PinpointClientTypes.StartCondition?
        /// The status of the journey. Valid values are:
        ///
        /// * DRAFT - Saves the journey and doesn't publish it.
        ///
        /// * ACTIVE - Saves and publishes the journey. Depending on the journey's schedule, the journey starts running immediately or at the scheduled start time. If a journey's status is ACTIVE, you can't add, change, or remove activities from it.
        ///
        ///
        /// PAUSED, CANCELLED, COMPLETED, and CLOSED states are not supported in requests to create or update a journey. To cancel, pause, or resume a journey, use the Journey State resource.
        public var state: PinpointClientTypes.State?
        /// Specifies whether endpoints in quiet hours should enter a wait till the end of their quiet hours.
        public var waitForQuietTime: Swift.Bool?

        public init (
            activities: [Swift.String:PinpointClientTypes.Activity]? = nil,
            closedDays: PinpointClientTypes.ClosedDays? = nil,
            creationDate: Swift.String? = nil,
            journeyChannelSettings: PinpointClientTypes.JourneyChannelSettings? = nil,
            lastModifiedDate: Swift.String? = nil,
            limits: PinpointClientTypes.JourneyLimits? = nil,
            localTime: Swift.Bool? = nil,
            name: Swift.String? = nil,
            openHours: PinpointClientTypes.OpenHours? = nil,
            quietTime: PinpointClientTypes.QuietTime? = nil,
            refreshFrequency: Swift.String? = nil,
            refreshOnSegmentUpdate: Swift.Bool? = nil,
            schedule: PinpointClientTypes.JourneySchedule? = nil,
            sendingSchedule: Swift.Bool? = nil,
            startActivity: Swift.String? = nil,
            startCondition: PinpointClientTypes.StartCondition? = nil,
            state: PinpointClientTypes.State? = nil,
            waitForQuietTime: Swift.Bool? = nil
        )
        {
            self.activities = activities
            self.closedDays = closedDays
            self.creationDate = creationDate
            self.journeyChannelSettings = journeyChannelSettings
            self.lastModifiedDate = lastModifiedDate
            self.limits = limits
            self.localTime = localTime
            self.name = name
            self.openHours = openHours
            self.quietTime = quietTime
            self.refreshFrequency = refreshFrequency
            self.refreshOnSegmentUpdate = refreshOnSegmentUpdate
            self.schedule = schedule
            self.sendingSchedule = sendingSchedule
            self.startActivity = startActivity
            self.startCondition = startCondition
            self.state = state
            self.waitForQuietTime = waitForQuietTime
        }
    }

}

extension PinpointClientTypes.WriteSegmentRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case name = "Name"
        case segmentGroups = "SegmentGroups"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensions = self.dimensions {
            try encodeContainer.encode(dimensions, forKey: .dimensions)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let segmentGroups = self.segmentGroups {
            try encodeContainer.encode(segmentGroups, forKey: .segmentGroups)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapOf__string0) in tags {
                try tagsContainer.encode(mapOf__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentDimensions.self, forKey: .dimensions)
        dimensions = dimensionsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let segmentGroupsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentGroupList.self, forKey: .segmentGroups)
        segmentGroups = segmentGroupsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PinpointClientTypes {
    /// Specifies the configuration, dimension, and other settings for a segment. A WriteSegmentRequest object can include a Dimensions object or a SegmentGroups object, but not both.
    public struct WriteSegmentRequest: Swift.Equatable {
        /// The criteria that define the dimensions for the segment.
        public var dimensions: PinpointClientTypes.SegmentDimensions?
        /// The name of the segment.
        public var name: Swift.String?
        /// The segment group to use and the dimensions to apply to the group's base segments in order to build the segment. A segment group can consist of zero or more base segments. Your request can include only one segment group.
        public var segmentGroups: PinpointClientTypes.SegmentGroupList?
        /// A string-to-string map of key-value pairs that defines the tags to associate with the segment. Each tag consists of a required tag key and an associated tag value.
        public var tags: [Swift.String:Swift.String]?

        public init (
            dimensions: PinpointClientTypes.SegmentDimensions? = nil,
            name: Swift.String? = nil,
            segmentGroups: PinpointClientTypes.SegmentGroupList? = nil,
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.dimensions = dimensions
            self.name = name
            self.segmentGroups = segmentGroups
            self.tags = tags
        }
    }

}

extension PinpointClientTypes.WriteTreatmentResource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customDeliveryConfiguration = "CustomDeliveryConfiguration"
        case messageConfiguration = "MessageConfiguration"
        case schedule = "Schedule"
        case sizePercent = "SizePercent"
        case templateConfiguration = "TemplateConfiguration"
        case treatmentDescription = "TreatmentDescription"
        case treatmentName = "TreatmentName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customDeliveryConfiguration = self.customDeliveryConfiguration {
            try encodeContainer.encode(customDeliveryConfiguration, forKey: .customDeliveryConfiguration)
        }
        if let messageConfiguration = self.messageConfiguration {
            try encodeContainer.encode(messageConfiguration, forKey: .messageConfiguration)
        }
        if let schedule = self.schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let sizePercent = self.sizePercent {
            try encodeContainer.encode(sizePercent, forKey: .sizePercent)
        }
        if let templateConfiguration = self.templateConfiguration {
            try encodeContainer.encode(templateConfiguration, forKey: .templateConfiguration)
        }
        if let treatmentDescription = self.treatmentDescription {
            try encodeContainer.encode(treatmentDescription, forKey: .treatmentDescription)
        }
        if let treatmentName = self.treatmentName {
            try encodeContainer.encode(treatmentName, forKey: .treatmentName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customDeliveryConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CustomDeliveryConfiguration.self, forKey: .customDeliveryConfiguration)
        customDeliveryConfiguration = customDeliveryConfigurationDecoded
        let messageConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageConfiguration.self, forKey: .messageConfiguration)
        messageConfiguration = messageConfigurationDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Schedule.self, forKey: .schedule)
        schedule = scheduleDecoded
        let sizePercentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizePercent)
        sizePercent = sizePercentDecoded
        let templateConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.TemplateConfiguration.self, forKey: .templateConfiguration)
        templateConfiguration = templateConfigurationDecoded
        let treatmentDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .treatmentDescription)
        treatmentDescription = treatmentDescriptionDecoded
        let treatmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .treatmentName)
        treatmentName = treatmentNameDecoded
    }
}

extension PinpointClientTypes {
    /// Specifies the settings for a campaign treatment. A treatment is a variation of a campaign that's used for A/B testing of a campaign.
    public struct WriteTreatmentResource: Swift.Equatable {
        /// The delivery configuration settings for sending the treatment through a custom channel. This object is required if the MessageConfiguration object for the treatment specifies a CustomMessage object.
        public var customDeliveryConfiguration: PinpointClientTypes.CustomDeliveryConfiguration?
        /// The message configuration settings for the treatment.
        public var messageConfiguration: PinpointClientTypes.MessageConfiguration?
        /// The schedule settings for the treatment.
        public var schedule: PinpointClientTypes.Schedule?
        /// The allocated percentage of users (segment members) to send the treatment to.
        /// This member is required.
        public var sizePercent: Swift.Int?
        /// The message template to use for the treatment.
        public var templateConfiguration: PinpointClientTypes.TemplateConfiguration?
        /// A custom description of the treatment.
        public var treatmentDescription: Swift.String?
        /// A custom name for the treatment.
        public var treatmentName: Swift.String?

        public init (
            customDeliveryConfiguration: PinpointClientTypes.CustomDeliveryConfiguration? = nil,
            messageConfiguration: PinpointClientTypes.MessageConfiguration? = nil,
            schedule: PinpointClientTypes.Schedule? = nil,
            sizePercent: Swift.Int? = nil,
            templateConfiguration: PinpointClientTypes.TemplateConfiguration? = nil,
            treatmentDescription: Swift.String? = nil,
            treatmentName: Swift.String? = nil
        )
        {
            self.customDeliveryConfiguration = customDeliveryConfiguration
            self.messageConfiguration = messageConfiguration
            self.schedule = schedule
            self.sizePercent = sizePercent
            self.templateConfiguration = templateConfiguration
            self.treatmentDescription = treatmentDescription
            self.treatmentName = treatmentName
        }
    }

}

extension PinpointClientTypes {
    public enum __EndpointTypesElement: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case adm
        case apns
        case apnsSandbox
        case apnsVoip
        case apnsVoipSandbox
        case baidu
        case custom
        case email
        case gcm
        case inApp
        case push
        case sms
        case voice
        case sdkUnknown(Swift.String)

        public static var allCases: [__EndpointTypesElement] {
            return [
                .adm,
                .apns,
                .apnsSandbox,
                .apnsVoip,
                .apnsVoipSandbox,
                .baidu,
                .custom,
                .email,
                .gcm,
                .inApp,
                .push,
                .sms,
                .voice,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .adm: return "ADM"
            case .apns: return "APNS"
            case .apnsSandbox: return "APNS_SANDBOX"
            case .apnsVoip: return "APNS_VOIP"
            case .apnsVoipSandbox: return "APNS_VOIP_SANDBOX"
            case .baidu: return "BAIDU"
            case .custom: return "CUSTOM"
            case .email: return "EMAIL"
            case .gcm: return "GCM"
            case .inApp: return "IN_APP"
            case .push: return "PUSH"
            case .sms: return "SMS"
            case .voice: return "VOICE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = __EndpointTypesElement(rawValue: rawValue) ?? __EndpointTypesElement.sdkUnknown(rawValue)
        }
    }
}
