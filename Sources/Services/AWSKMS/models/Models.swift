// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension KMSClientTypes {
    public enum AlgorithmSpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rsaesOaepSha1
        case rsaesOaepSha256
        case rsaesPkcs1V15
        case sdkUnknown(Swift.String)

        public static var allCases: [AlgorithmSpec] {
            return [
                .rsaesOaepSha1,
                .rsaesOaepSha256,
                .rsaesPkcs1V15,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rsaesOaepSha1: return "RSAES_OAEP_SHA_1"
            case .rsaesOaepSha256: return "RSAES_OAEP_SHA_256"
            case .rsaesPkcs1V15: return "RSAES_PKCS1_V1_5"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AlgorithmSpec(rawValue: rawValue) ?? AlgorithmSpec.sdkUnknown(rawValue)
        }
    }
}

extension KMSClientTypes.AliasListEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasArn = "AliasArn"
        case aliasName = "AliasName"
        case creationDate = "CreationDate"
        case lastUpdatedDate = "LastUpdatedDate"
        case targetKeyId = "TargetKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasArn = self.aliasArn {
            try encodeContainer.encode(aliasArn, forKey: .aliasArn)
        }
        if let aliasName = self.aliasName {
            try encodeContainer.encode(aliasName, forKey: .aliasName)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encodeTimestamp(creationDate, format: .epochSeconds, forKey: .creationDate)
        }
        if let lastUpdatedDate = self.lastUpdatedDate {
            try encodeContainer.encodeTimestamp(lastUpdatedDate, format: .epochSeconds, forKey: .lastUpdatedDate)
        }
        if let targetKeyId = self.targetKeyId {
            try encodeContainer.encode(targetKeyId, forKey: .targetKeyId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasName)
        aliasName = aliasNameDecoded
        let aliasArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasArn)
        aliasArn = aliasArnDecoded
        let targetKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetKeyId)
        targetKeyId = targetKeyIdDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
    }
}

extension KMSClientTypes {
    /// Contains information about an alias.
    public struct AliasListEntry: Swift.Equatable {
        /// String that contains the key ARN.
        public var aliasArn: Swift.String?
        /// String that contains the alias. This value begins with alias/.
        public var aliasName: Swift.String?
        /// Date and time that the alias was most recently created in the account and Region. Formatted as Unix time.
        public var creationDate: ClientRuntime.Date?
        /// Date and time that the alias was most recently associated with a KMS key in the account and Region. Formatted as Unix time.
        public var lastUpdatedDate: ClientRuntime.Date?
        /// String that contains the key identifier of the KMS key associated with the alias.
        public var targetKeyId: Swift.String?

        public init (
            aliasArn: Swift.String? = nil,
            aliasName: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            lastUpdatedDate: ClientRuntime.Date? = nil,
            targetKeyId: Swift.String? = nil
        )
        {
            self.aliasArn = aliasArn
            self.aliasName = aliasName
            self.creationDate = creationDate
            self.lastUpdatedDate = lastUpdatedDate
            self.targetKeyId = targetKeyId
        }
    }

}

extension AlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because it attempted to create a resource that already exists.
public struct AlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AlreadyExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CancelKeyDeletionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
    }
}

extension CancelKeyDeletionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CancelKeyDeletionInput: Swift.Equatable {
    /// Identifies the KMS key whose deletion is being canceled. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?

    public init (
        keyId: Swift.String? = nil
    )
    {
        self.keyId = keyId
    }
}

struct CancelKeyDeletionInputBody: Swift.Equatable {
    let keyId: Swift.String?
}

extension CancelKeyDeletionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
    }
}

extension CancelKeyDeletionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelKeyDeletionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CancelKeyDeletionOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case invalidArnException(InvalidArnException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelKeyDeletionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CancelKeyDeletionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keyId = output.keyId
        } else {
            self.keyId = nil
        }
    }
}

public struct CancelKeyDeletionOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the KMS key whose deletion is canceled.
    public var keyId: Swift.String?

    public init (
        keyId: Swift.String? = nil
    )
    {
        self.keyId = keyId
    }
}

struct CancelKeyDeletionOutputResponseBody: Swift.Equatable {
    let keyId: Swift.String?
}

extension CancelKeyDeletionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
    }
}

extension CloudHsmClusterInUseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CloudHsmClusterInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the specified CloudHSM cluster is already associated with an CloudHSM key store in the account, or it shares a backup history with an CloudHSM key store in the account. Each CloudHSM key store in the account must be associated with a different CloudHSM cluster. CloudHSM clusters that share a backup history have the same cluster certificate. To view the cluster certificate of an CloudHSM cluster, use the [DescribeClusters](https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html) operation.
public struct CloudHsmClusterInUseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CloudHsmClusterInUseExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension CloudHsmClusterInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudHsmClusterInvalidConfigurationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CloudHsmClusterInvalidConfigurationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the associated CloudHSM cluster did not meet the configuration requirements for an CloudHSM key store.
///
/// * The CloudHSM cluster must be configured with private subnets in at least two different Availability Zones in the Region.
///
/// * The [security group for the cluster](https://docs.aws.amazon.com/cloudhsm/latest/userguide/configure-sg.html) (cloudhsm-cluster--sg) must include inbound rules and outbound rules that allow TCP traffic on ports 2223-2225. The Source in the inbound rules and the Destination in the outbound rules must match the security group ID. These rules are set by default when you create the CloudHSM cluster. Do not delete or change them. To get information about a particular security group, use the [DescribeSecurityGroups](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroups.html) operation.
///
/// * The CloudHSM cluster must contain at least as many HSMs as the operation requires. To add HSMs, use the CloudHSM [CreateHsm](https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_CreateHsm.html) operation. For the [CreateCustomKeyStore], [UpdateCustomKeyStore], and [CreateKey] operations, the CloudHSM cluster must have at least two active HSMs, each in a different Availability Zone. For the [ConnectCustomKeyStore] operation, the CloudHSM must contain at least one active HSM.
///
///
/// For information about the requirements for an CloudHSM cluster that is associated with an CloudHSM key store, see [Assemble the Prerequisites](https://docs.aws.amazon.com/kms/latest/developerguide/create-keystore.html#before-keystore) in the Key Management Service Developer Guide. For information about creating a private subnet for an CloudHSM cluster, see [Create a Private Subnet](https://docs.aws.amazon.com/cloudhsm/latest/userguide/create-subnets.html) in the CloudHSM User Guide. For information about cluster security groups, see [Configure a Default Security Group](https://docs.aws.amazon.com/cloudhsm/latest/userguide/configure-sg.html) in the CloudHSM User Guide .
public struct CloudHsmClusterInvalidConfigurationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CloudHsmClusterInvalidConfigurationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension CloudHsmClusterInvalidConfigurationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudHsmClusterNotActiveException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CloudHsmClusterNotActiveExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the CloudHSM cluster associated with the CloudHSM key store is not active. Initialize and activate the cluster and try the command again. For detailed instructions, see [Getting Started](https://docs.aws.amazon.com/cloudhsm/latest/userguide/getting-started.html) in the CloudHSM User Guide.
public struct CloudHsmClusterNotActiveException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CloudHsmClusterNotActiveExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension CloudHsmClusterNotActiveExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudHsmClusterNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CloudHsmClusterNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because KMS cannot find the CloudHSM cluster with the specified cluster ID. Retry the request with a different cluster ID.
public struct CloudHsmClusterNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CloudHsmClusterNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension CloudHsmClusterNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudHsmClusterNotRelatedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CloudHsmClusterNotRelatedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the specified CloudHSM cluster has a different cluster certificate than the original cluster. You cannot use the operation to specify an unrelated cluster for an CloudHSM key store. Specify an CloudHSM cluster that shares a backup history with the original cluster. This includes clusters that were created from a backup of the current cluster, and clusters that were created from the same backup that produced the current cluster. CloudHSM clusters that share a backup history have the same cluster certificate. To view the cluster certificate of an CloudHSM cluster, use the [DescribeClusters](https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html) operation.
public struct CloudHsmClusterNotRelatedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CloudHsmClusterNotRelatedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension CloudHsmClusterNotRelatedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConnectCustomKeyStoreInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customKeyStoreId = "CustomKeyStoreId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customKeyStoreId = self.customKeyStoreId {
            try encodeContainer.encode(customKeyStoreId, forKey: .customKeyStoreId)
        }
    }
}

extension ConnectCustomKeyStoreInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ConnectCustomKeyStoreInput: Swift.Equatable {
    /// Enter the key store ID of the custom key store that you want to connect. To find the ID of a custom key store, use the [DescribeCustomKeyStores] operation.
    /// This member is required.
    public var customKeyStoreId: Swift.String?

    public init (
        customKeyStoreId: Swift.String? = nil
    )
    {
        self.customKeyStoreId = customKeyStoreId
    }
}

struct ConnectCustomKeyStoreInputBody: Swift.Equatable {
    let customKeyStoreId: Swift.String?
}

extension ConnectCustomKeyStoreInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customKeyStoreId = "CustomKeyStoreId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customKeyStoreIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customKeyStoreId)
        customKeyStoreId = customKeyStoreIdDecoded
    }
}

extension ConnectCustomKeyStoreOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ConnectCustomKeyStoreOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CloudHsmClusterInvalidConfigurationException" : self = .cloudHsmClusterInvalidConfigurationException(try CloudHsmClusterInvalidConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CloudHsmClusterNotActiveException" : self = .cloudHsmClusterNotActiveException(try CloudHsmClusterNotActiveException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CustomKeyStoreInvalidStateException" : self = .customKeyStoreInvalidStateException(try CustomKeyStoreInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CustomKeyStoreNotFoundException" : self = .customKeyStoreNotFoundException(try CustomKeyStoreNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ConnectCustomKeyStoreOutputError: Swift.Error, Swift.Equatable {
    case cloudHsmClusterInvalidConfigurationException(CloudHsmClusterInvalidConfigurationException)
    case cloudHsmClusterNotActiveException(CloudHsmClusterNotActiveException)
    case customKeyStoreInvalidStateException(CustomKeyStoreInvalidStateException)
    case customKeyStoreNotFoundException(CustomKeyStoreNotFoundException)
    case kMSInternalException(KMSInternalException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ConnectCustomKeyStoreOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct ConnectCustomKeyStoreOutputResponse: Swift.Equatable {

    public init () { }
}

extension KMSClientTypes {
    public enum ConnectionErrorCodeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case clusterNotFound
        case insufficientCloudhsmHsms
        case insufficientFreeAddressesInSubnet
        case internalError
        case invalidCredentials
        case networkErrors
        case subnetNotFound
        case userLockedOut
        case userLoggedIn
        case userNotFound
        case xksProxyAccessDenied
        case xksProxyInvalidConfiguration
        case xksProxyInvalidResponse
        case xksProxyInvalidTlsConfiguration
        case xksProxyNotReachable
        case xksProxyTimedOut
        case xksVpcEndpointServiceInvalidConfiguration
        case xksVpcEndpointServiceNotFound
        case sdkUnknown(Swift.String)

        public static var allCases: [ConnectionErrorCodeType] {
            return [
                .clusterNotFound,
                .insufficientCloudhsmHsms,
                .insufficientFreeAddressesInSubnet,
                .internalError,
                .invalidCredentials,
                .networkErrors,
                .subnetNotFound,
                .userLockedOut,
                .userLoggedIn,
                .userNotFound,
                .xksProxyAccessDenied,
                .xksProxyInvalidConfiguration,
                .xksProxyInvalidResponse,
                .xksProxyInvalidTlsConfiguration,
                .xksProxyNotReachable,
                .xksProxyTimedOut,
                .xksVpcEndpointServiceInvalidConfiguration,
                .xksVpcEndpointServiceNotFound,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .clusterNotFound: return "CLUSTER_NOT_FOUND"
            case .insufficientCloudhsmHsms: return "INSUFFICIENT_CLOUDHSM_HSMS"
            case .insufficientFreeAddressesInSubnet: return "INSUFFICIENT_FREE_ADDRESSES_IN_SUBNET"
            case .internalError: return "INTERNAL_ERROR"
            case .invalidCredentials: return "INVALID_CREDENTIALS"
            case .networkErrors: return "NETWORK_ERRORS"
            case .subnetNotFound: return "SUBNET_NOT_FOUND"
            case .userLockedOut: return "USER_LOCKED_OUT"
            case .userLoggedIn: return "USER_LOGGED_IN"
            case .userNotFound: return "USER_NOT_FOUND"
            case .xksProxyAccessDenied: return "XKS_PROXY_ACCESS_DENIED"
            case .xksProxyInvalidConfiguration: return "XKS_PROXY_INVALID_CONFIGURATION"
            case .xksProxyInvalidResponse: return "XKS_PROXY_INVALID_RESPONSE"
            case .xksProxyInvalidTlsConfiguration: return "XKS_PROXY_INVALID_TLS_CONFIGURATION"
            case .xksProxyNotReachable: return "XKS_PROXY_NOT_REACHABLE"
            case .xksProxyTimedOut: return "XKS_PROXY_TIMED_OUT"
            case .xksVpcEndpointServiceInvalidConfiguration: return "XKS_VPC_ENDPOINT_SERVICE_INVALID_CONFIGURATION"
            case .xksVpcEndpointServiceNotFound: return "XKS_VPC_ENDPOINT_SERVICE_NOT_FOUND"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConnectionErrorCodeType(rawValue: rawValue) ?? ConnectionErrorCodeType.sdkUnknown(rawValue)
        }
    }
}

extension KMSClientTypes {
    public enum ConnectionStateType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case connected
        case connecting
        case disconnected
        case disconnecting
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [ConnectionStateType] {
            return [
                .connected,
                .connecting,
                .disconnected,
                .disconnecting,
                .failed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .connected: return "CONNECTED"
            case .connecting: return "CONNECTING"
            case .disconnected: return "DISCONNECTED"
            case .disconnecting: return "DISCONNECTING"
            case .failed: return "FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConnectionStateType(rawValue: rawValue) ?? ConnectionStateType.sdkUnknown(rawValue)
        }
    }
}

extension CreateAliasInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
        case targetKeyId = "TargetKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasName = self.aliasName {
            try encodeContainer.encode(aliasName, forKey: .aliasName)
        }
        if let targetKeyId = self.targetKeyId {
            try encodeContainer.encode(targetKeyId, forKey: .targetKeyId)
        }
    }
}

extension CreateAliasInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateAliasInput: Swift.Equatable {
    /// Specifies the alias name. This value must begin with alias/ followed by a name, such as alias/ExampleAlias. The AliasName value must be string of 1-256 characters. It can contain only alphanumeric characters, forward slashes (/), underscores (_), and dashes (-). The alias name cannot begin with alias/aws/. The alias/aws/ prefix is reserved for [Amazon Web Services managed keys](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk).
    /// This member is required.
    public var aliasName: Swift.String?
    /// Associates the alias with the specified [customer managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk). The KMS key must be in the same Amazon Web Services Region. A valid key ID is required. If you supply a null or empty string value, this operation returns an error. For help finding the key ID and ARN, see [Finding the Key ID and ARN](https://docs.aws.amazon.com/kms/latest/developerguide/viewing-keys.html#find-cmk-id-arn) in the Key Management Service Developer Guide . Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var targetKeyId: Swift.String?

    public init (
        aliasName: Swift.String? = nil,
        targetKeyId: Swift.String? = nil
    )
    {
        self.aliasName = aliasName
        self.targetKeyId = targetKeyId
    }
}

struct CreateAliasInputBody: Swift.Equatable {
    let aliasName: Swift.String?
    let targetKeyId: Swift.String?
}

extension CreateAliasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
        case targetKeyId = "TargetKeyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasName)
        aliasName = aliasNameDecoded
        let targetKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetKeyId)
        targetKeyId = targetKeyIdDecoded
    }
}

extension CreateAliasOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateAliasOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExists" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAliasName" : self = .invalidAliasNameException(try InvalidAliasNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateAliasOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case dependencyTimeoutException(DependencyTimeoutException)
    case invalidAliasNameException(InvalidAliasNameException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAliasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateAliasOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateCustomKeyStoreInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateCustomKeyStoreInput(cloudHsmClusterId: \(Swift.String(describing: cloudHsmClusterId)), customKeyStoreName: \(Swift.String(describing: customKeyStoreName)), customKeyStoreType: \(Swift.String(describing: customKeyStoreType)), trustAnchorCertificate: \(Swift.String(describing: trustAnchorCertificate)), xksProxyAuthenticationCredential: \(Swift.String(describing: xksProxyAuthenticationCredential)), xksProxyConnectivity: \(Swift.String(describing: xksProxyConnectivity)), xksProxyUriEndpoint: \(Swift.String(describing: xksProxyUriEndpoint)), xksProxyUriPath: \(Swift.String(describing: xksProxyUriPath)), xksProxyVpcEndpointServiceName: \(Swift.String(describing: xksProxyVpcEndpointServiceName)), keyStorePassword: \"CONTENT_REDACTED\")"}
}

extension CreateCustomKeyStoreInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudHsmClusterId = "CloudHsmClusterId"
        case customKeyStoreName = "CustomKeyStoreName"
        case customKeyStoreType = "CustomKeyStoreType"
        case keyStorePassword = "KeyStorePassword"
        case trustAnchorCertificate = "TrustAnchorCertificate"
        case xksProxyAuthenticationCredential = "XksProxyAuthenticationCredential"
        case xksProxyConnectivity = "XksProxyConnectivity"
        case xksProxyUriEndpoint = "XksProxyUriEndpoint"
        case xksProxyUriPath = "XksProxyUriPath"
        case xksProxyVpcEndpointServiceName = "XksProxyVpcEndpointServiceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudHsmClusterId = self.cloudHsmClusterId {
            try encodeContainer.encode(cloudHsmClusterId, forKey: .cloudHsmClusterId)
        }
        if let customKeyStoreName = self.customKeyStoreName {
            try encodeContainer.encode(customKeyStoreName, forKey: .customKeyStoreName)
        }
        if let customKeyStoreType = self.customKeyStoreType {
            try encodeContainer.encode(customKeyStoreType.rawValue, forKey: .customKeyStoreType)
        }
        if let keyStorePassword = self.keyStorePassword {
            try encodeContainer.encode(keyStorePassword, forKey: .keyStorePassword)
        }
        if let trustAnchorCertificate = self.trustAnchorCertificate {
            try encodeContainer.encode(trustAnchorCertificate, forKey: .trustAnchorCertificate)
        }
        if let xksProxyAuthenticationCredential = self.xksProxyAuthenticationCredential {
            try encodeContainer.encode(xksProxyAuthenticationCredential, forKey: .xksProxyAuthenticationCredential)
        }
        if let xksProxyConnectivity = self.xksProxyConnectivity {
            try encodeContainer.encode(xksProxyConnectivity.rawValue, forKey: .xksProxyConnectivity)
        }
        if let xksProxyUriEndpoint = self.xksProxyUriEndpoint {
            try encodeContainer.encode(xksProxyUriEndpoint, forKey: .xksProxyUriEndpoint)
        }
        if let xksProxyUriPath = self.xksProxyUriPath {
            try encodeContainer.encode(xksProxyUriPath, forKey: .xksProxyUriPath)
        }
        if let xksProxyVpcEndpointServiceName = self.xksProxyVpcEndpointServiceName {
            try encodeContainer.encode(xksProxyVpcEndpointServiceName, forKey: .xksProxyVpcEndpointServiceName)
        }
    }
}

extension CreateCustomKeyStoreInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateCustomKeyStoreInput: Swift.Equatable {
    /// Identifies the CloudHSM cluster for an CloudHSM key store. This parameter is required for custom key stores with CustomKeyStoreType of AWS_CLOUDHSM. Enter the cluster ID of any active CloudHSM cluster that is not already associated with a custom key store. To find the cluster ID, use the [DescribeClusters](https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html) operation.
    public var cloudHsmClusterId: Swift.String?
    /// Specifies a friendly name for the custom key store. The name must be unique in your Amazon Web Services account and Region. This parameter is required for all custom key stores.
    /// This member is required.
    public var customKeyStoreName: Swift.String?
    /// Specifies the type of custom key store. The default value is AWS_CLOUDHSM. For a custom key store backed by an CloudHSM cluster, omit the parameter or enter AWS_CLOUDHSM. For a custom key store backed by an external key manager outside of Amazon Web Services, enter EXTERNAL_KEY_STORE. You cannot change this property after the key store is created.
    public var customKeyStoreType: KMSClientTypes.CustomKeyStoreType?
    /// Specifies the kmsuser password for an CloudHSM key store. This parameter is required for custom key stores with a CustomKeyStoreType of AWS_CLOUDHSM. Enter the password of the [kmsuser] crypto user (CU) account(https://docs.aws.amazon.com/kms/latest/developerguide/key-store-concepts.html#concept-kmsuser) in the specified CloudHSM cluster. KMS logs into the cluster as this user to manage key material on your behalf. The password must be a string of 7 to 32 characters. Its value is case sensitive. This parameter tells KMS the kmsuser account password; it does not change the password in the CloudHSM cluster.
    public var keyStorePassword: Swift.String?
    /// Specifies the certificate for an CloudHSM key store. This parameter is required for custom key stores with a CustomKeyStoreType of AWS_CLOUDHSM. Enter the content of the trust anchor certificate for the CloudHSM cluster. This is the content of the customerCA.crt file that you created when you [initialized the cluster](https://docs.aws.amazon.com/cloudhsm/latest/userguide/initialize-cluster.html).
    public var trustAnchorCertificate: Swift.String?
    /// Specifies an authentication credential for the external key store proxy (XKS proxy). This parameter is required for all custom key stores with a CustomKeyStoreType of EXTERNAL_KEY_STORE. The XksProxyAuthenticationCredential has two required elements: RawSecretAccessKey, a secret key, and AccessKeyId, a unique identifier for the RawSecretAccessKey. For character requirements, see [XksProxyAuthenticationCredentialType]. KMS uses this authentication credential to sign requests to the external key store proxy on your behalf. This credential is unrelated to Identity and Access Management (IAM) and Amazon Web Services credentials. This parameter doesn't set or change the authentication credentials on the XKS proxy. It just tells KMS the credential that you established on your external key store proxy. If you rotate your proxy authentication credential, use the [UpdateCustomKeyStore] operation to provide the new credential to KMS.
    public var xksProxyAuthenticationCredential: KMSClientTypes.XksProxyAuthenticationCredentialType?
    /// Indicates how KMS communicates with the external key store proxy. This parameter is required for custom key stores with a CustomKeyStoreType of EXTERNAL_KEY_STORE. If the external key store proxy uses a public endpoint, specify PUBLIC_ENDPOINT. If the external key store proxy uses a Amazon VPC endpoint service for communication with KMS, specify VPC_ENDPOINT_SERVICE. For help making this choice, see [Choosing a connectivity option](https://docs.aws.amazon.com/kms/latest/developerguide/plan-xks-keystore.html#choose-xks-connectivity) in the Key Management Service Developer Guide. An Amazon VPC endpoint service keeps your communication with KMS in a private address space entirely within Amazon Web Services, but it requires more configuration, including establishing a Amazon VPC with multiple subnets, a VPC endpoint service, a network load balancer, and a verified private DNS name. A public endpoint is simpler to set up, but it might be slower and might not fulfill your security requirements. You might consider testing with a public endpoint, and then establishing a VPC endpoint service for production tasks. Note that this choice does not determine the location of the external key store proxy. Even if you choose a VPC endpoint service, the proxy can be hosted within the VPC or outside of Amazon Web Services such as in your corporate data center.
    public var xksProxyConnectivity: KMSClientTypes.XksProxyConnectivityType?
    /// Specifies the endpoint that KMS uses to send requests to the external key store proxy (XKS proxy). This parameter is required for custom key stores with a CustomKeyStoreType of EXTERNAL_KEY_STORE. The protocol must be HTTPS. KMS communicates on port 443. Do not specify the port in the XksProxyUriEndpoint value. For external key stores with XksProxyConnectivity value of VPC_ENDPOINT_SERVICE, specify https:// followed by the private DNS name of the VPC endpoint service. For external key stores with PUBLIC_ENDPOINT connectivity, this endpoint must be reachable before you create the custom key store. KMS connects to the external key store proxy while creating the custom key store. For external key stores with VPC_ENDPOINT_SERVICE connectivity, KMS connects when you call the [ConnectCustomKeyStore] operation. The value of this parameter must begin with https://. The remainder can contain upper and lower case letters (A-Z and a-z), numbers (0-9), dots (.), and hyphens (-). Additional slashes (/ and \) are not permitted. Uniqueness requirements:
    ///
    /// * The combined XksProxyUriEndpoint and XksProxyUriPath values must be unique in the Amazon Web Services account and Region.
    ///
    /// * An external key store with PUBLIC_ENDPOINT connectivity cannot use the same XksProxyUriEndpoint value as an external key store with VPC_ENDPOINT_SERVICE connectivity in the same Amazon Web Services Region.
    ///
    /// * Each external key store with VPC_ENDPOINT_SERVICE connectivity must have its own private DNS name. The XksProxyUriEndpoint value for external key stores with VPC_ENDPOINT_SERVICE connectivity (private DNS name) must be unique in the Amazon Web Services account and Region.
    public var xksProxyUriEndpoint: Swift.String?
    /// Specifies the base path to the proxy APIs for this external key store. To find this value, see the documentation for your external key store proxy. This parameter is required for all custom key stores with a CustomKeyStoreType of EXTERNAL_KEY_STORE. The value must start with / and must end with /kms/xks/v1 where v1 represents the version of the KMS external key store proxy API. This path can include an optional prefix between the required elements such as /prefix/kms/xks/v1. Uniqueness requirements:
    ///
    /// * The combined XksProxyUriEndpoint and XksProxyUriPath values must be unique in the Amazon Web Services account and Region.
    public var xksProxyUriPath: Swift.String?
    /// Specifies the name of the Amazon VPC endpoint service for interface endpoints that is used to communicate with your external key store proxy (XKS proxy). This parameter is required when the value of CustomKeyStoreType is EXTERNAL_KEY_STORE and the value of XksProxyConnectivity is VPC_ENDPOINT_SERVICE. The Amazon VPC endpoint service must [fulfill all requirements](https://docs.aws.amazon.com/kms/latest/developerguide/create-xks-keystore.html#xks-requirements) for use with an external key store. Uniqueness requirements:
    ///
    /// * External key stores with VPC_ENDPOINT_SERVICE connectivity can share an Amazon VPC, but each external key store must have its own VPC endpoint service and private DNS name.
    public var xksProxyVpcEndpointServiceName: Swift.String?

    public init (
        cloudHsmClusterId: Swift.String? = nil,
        customKeyStoreName: Swift.String? = nil,
        customKeyStoreType: KMSClientTypes.CustomKeyStoreType? = nil,
        keyStorePassword: Swift.String? = nil,
        trustAnchorCertificate: Swift.String? = nil,
        xksProxyAuthenticationCredential: KMSClientTypes.XksProxyAuthenticationCredentialType? = nil,
        xksProxyConnectivity: KMSClientTypes.XksProxyConnectivityType? = nil,
        xksProxyUriEndpoint: Swift.String? = nil,
        xksProxyUriPath: Swift.String? = nil,
        xksProxyVpcEndpointServiceName: Swift.String? = nil
    )
    {
        self.cloudHsmClusterId = cloudHsmClusterId
        self.customKeyStoreName = customKeyStoreName
        self.customKeyStoreType = customKeyStoreType
        self.keyStorePassword = keyStorePassword
        self.trustAnchorCertificate = trustAnchorCertificate
        self.xksProxyAuthenticationCredential = xksProxyAuthenticationCredential
        self.xksProxyConnectivity = xksProxyConnectivity
        self.xksProxyUriEndpoint = xksProxyUriEndpoint
        self.xksProxyUriPath = xksProxyUriPath
        self.xksProxyVpcEndpointServiceName = xksProxyVpcEndpointServiceName
    }
}

struct CreateCustomKeyStoreInputBody: Swift.Equatable {
    let customKeyStoreName: Swift.String?
    let cloudHsmClusterId: Swift.String?
    let trustAnchorCertificate: Swift.String?
    let keyStorePassword: Swift.String?
    let customKeyStoreType: KMSClientTypes.CustomKeyStoreType?
    let xksProxyUriEndpoint: Swift.String?
    let xksProxyUriPath: Swift.String?
    let xksProxyVpcEndpointServiceName: Swift.String?
    let xksProxyAuthenticationCredential: KMSClientTypes.XksProxyAuthenticationCredentialType?
    let xksProxyConnectivity: KMSClientTypes.XksProxyConnectivityType?
}

extension CreateCustomKeyStoreInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudHsmClusterId = "CloudHsmClusterId"
        case customKeyStoreName = "CustomKeyStoreName"
        case customKeyStoreType = "CustomKeyStoreType"
        case keyStorePassword = "KeyStorePassword"
        case trustAnchorCertificate = "TrustAnchorCertificate"
        case xksProxyAuthenticationCredential = "XksProxyAuthenticationCredential"
        case xksProxyConnectivity = "XksProxyConnectivity"
        case xksProxyUriEndpoint = "XksProxyUriEndpoint"
        case xksProxyUriPath = "XksProxyUriPath"
        case xksProxyVpcEndpointServiceName = "XksProxyVpcEndpointServiceName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customKeyStoreNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customKeyStoreName)
        customKeyStoreName = customKeyStoreNameDecoded
        let cloudHsmClusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudHsmClusterId)
        cloudHsmClusterId = cloudHsmClusterIdDecoded
        let trustAnchorCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trustAnchorCertificate)
        trustAnchorCertificate = trustAnchorCertificateDecoded
        let keyStorePasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyStorePassword)
        keyStorePassword = keyStorePasswordDecoded
        let customKeyStoreTypeDecoded = try containerValues.decodeIfPresent(KMSClientTypes.CustomKeyStoreType.self, forKey: .customKeyStoreType)
        customKeyStoreType = customKeyStoreTypeDecoded
        let xksProxyUriEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .xksProxyUriEndpoint)
        xksProxyUriEndpoint = xksProxyUriEndpointDecoded
        let xksProxyUriPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .xksProxyUriPath)
        xksProxyUriPath = xksProxyUriPathDecoded
        let xksProxyVpcEndpointServiceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .xksProxyVpcEndpointServiceName)
        xksProxyVpcEndpointServiceName = xksProxyVpcEndpointServiceNameDecoded
        let xksProxyAuthenticationCredentialDecoded = try containerValues.decodeIfPresent(KMSClientTypes.XksProxyAuthenticationCredentialType.self, forKey: .xksProxyAuthenticationCredential)
        xksProxyAuthenticationCredential = xksProxyAuthenticationCredentialDecoded
        let xksProxyConnectivityDecoded = try containerValues.decodeIfPresent(KMSClientTypes.XksProxyConnectivityType.self, forKey: .xksProxyConnectivity)
        xksProxyConnectivity = xksProxyConnectivityDecoded
    }
}

extension CreateCustomKeyStoreOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateCustomKeyStoreOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CloudHsmClusterInUseException" : self = .cloudHsmClusterInUseException(try CloudHsmClusterInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CloudHsmClusterInvalidConfigurationException" : self = .cloudHsmClusterInvalidConfigurationException(try CloudHsmClusterInvalidConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CloudHsmClusterNotActiveException" : self = .cloudHsmClusterNotActiveException(try CloudHsmClusterNotActiveException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CloudHsmClusterNotFoundException" : self = .cloudHsmClusterNotFoundException(try CloudHsmClusterNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CustomKeyStoreNameInUseException" : self = .customKeyStoreNameInUseException(try CustomKeyStoreNameInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncorrectTrustAnchorException" : self = .incorrectTrustAnchorException(try IncorrectTrustAnchorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "XksProxyIncorrectAuthenticationCredentialException" : self = .xksProxyIncorrectAuthenticationCredentialException(try XksProxyIncorrectAuthenticationCredentialException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "XksProxyInvalidConfigurationException" : self = .xksProxyInvalidConfigurationException(try XksProxyInvalidConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "XksProxyInvalidResponseException" : self = .xksProxyInvalidResponseException(try XksProxyInvalidResponseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "XksProxyUriEndpointInUseException" : self = .xksProxyUriEndpointInUseException(try XksProxyUriEndpointInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "XksProxyUriInUseException" : self = .xksProxyUriInUseException(try XksProxyUriInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "XksProxyUriUnreachableException" : self = .xksProxyUriUnreachableException(try XksProxyUriUnreachableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "XksProxyVpcEndpointServiceInUseException" : self = .xksProxyVpcEndpointServiceInUseException(try XksProxyVpcEndpointServiceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "XksProxyVpcEndpointServiceInvalidConfigurationException" : self = .xksProxyVpcEndpointServiceInvalidConfigurationException(try XksProxyVpcEndpointServiceInvalidConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "XksProxyVpcEndpointServiceNotFoundException" : self = .xksProxyVpcEndpointServiceNotFoundException(try XksProxyVpcEndpointServiceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateCustomKeyStoreOutputError: Swift.Error, Swift.Equatable {
    case cloudHsmClusterInUseException(CloudHsmClusterInUseException)
    case cloudHsmClusterInvalidConfigurationException(CloudHsmClusterInvalidConfigurationException)
    case cloudHsmClusterNotActiveException(CloudHsmClusterNotActiveException)
    case cloudHsmClusterNotFoundException(CloudHsmClusterNotFoundException)
    case customKeyStoreNameInUseException(CustomKeyStoreNameInUseException)
    case incorrectTrustAnchorException(IncorrectTrustAnchorException)
    case kMSInternalException(KMSInternalException)
    case limitExceededException(LimitExceededException)
    case xksProxyIncorrectAuthenticationCredentialException(XksProxyIncorrectAuthenticationCredentialException)
    case xksProxyInvalidConfigurationException(XksProxyInvalidConfigurationException)
    case xksProxyInvalidResponseException(XksProxyInvalidResponseException)
    case xksProxyUriEndpointInUseException(XksProxyUriEndpointInUseException)
    case xksProxyUriInUseException(XksProxyUriInUseException)
    case xksProxyUriUnreachableException(XksProxyUriUnreachableException)
    case xksProxyVpcEndpointServiceInUseException(XksProxyVpcEndpointServiceInUseException)
    case xksProxyVpcEndpointServiceInvalidConfigurationException(XksProxyVpcEndpointServiceInvalidConfigurationException)
    case xksProxyVpcEndpointServiceNotFoundException(XksProxyVpcEndpointServiceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCustomKeyStoreOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateCustomKeyStoreOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.customKeyStoreId = output.customKeyStoreId
        } else {
            self.customKeyStoreId = nil
        }
    }
}

public struct CreateCustomKeyStoreOutputResponse: Swift.Equatable {
    /// A unique identifier for the new custom key store.
    public var customKeyStoreId: Swift.String?

    public init (
        customKeyStoreId: Swift.String? = nil
    )
    {
        self.customKeyStoreId = customKeyStoreId
    }
}

struct CreateCustomKeyStoreOutputResponseBody: Swift.Equatable {
    let customKeyStoreId: Swift.String?
}

extension CreateCustomKeyStoreOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customKeyStoreId = "CustomKeyStoreId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customKeyStoreIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customKeyStoreId)
        customKeyStoreId = customKeyStoreIdDecoded
    }
}

extension CreateGrantInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case constraints = "Constraints"
        case grantTokens = "GrantTokens"
        case granteePrincipal = "GranteePrincipal"
        case keyId = "KeyId"
        case name = "Name"
        case operations = "Operations"
        case retiringPrincipal = "RetiringPrincipal"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let constraints = self.constraints {
            try encodeContainer.encode(constraints, forKey: .constraints)
        }
        if let grantTokens = grantTokens {
            var grantTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grantTokens)
            for granttokentype0 in grantTokens {
                try grantTokensContainer.encode(granttokentype0)
            }
        }
        if let granteePrincipal = self.granteePrincipal {
            try encodeContainer.encode(granteePrincipal, forKey: .granteePrincipal)
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let operations = operations {
            var operationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .operations)
            for grantoperation0 in operations {
                try operationsContainer.encode(grantoperation0.rawValue)
            }
        }
        if let retiringPrincipal = self.retiringPrincipal {
            try encodeContainer.encode(retiringPrincipal, forKey: .retiringPrincipal)
        }
    }
}

extension CreateGrantInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateGrantInput: Swift.Equatable {
    /// Specifies a grant constraint. KMS supports the EncryptionContextEquals and EncryptionContextSubset grant constraints. Each constraint value can include up to 8 encryption context pairs. The encryption context value in each constraint cannot exceed 384 characters. For information about grant constraints, see [Using grant constraints](https://docs.aws.amazon.com/kms/latest/developerguide/create-grant-overview.html#grant-constraints) in the Key Management Service Developer Guide. For more information about encryption context, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Key Management Service Developer Guide . The encryption context grant constraints allow the permissions in the grant only when the encryption context in the request matches (EncryptionContextEquals) or includes (EncryptionContextSubset) the encryption context specified in this structure. The encryption context grant constraints are supported only on [grant operations](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#terms-grant-operations) that include an EncryptionContext parameter, such as cryptographic operations on symmetric encryption KMS keys. Grants with grant constraints can include the [DescribeKey] and [RetireGrant] operations, but the constraint doesn't apply to these operations. If a grant with a grant constraint includes the CreateGrant operation, the constraint requires that any grants created with the CreateGrant permission have an equally strict or stricter encryption context constraint. You cannot use an encryption context grant constraint for cryptographic operations with asymmetric KMS keys or HMAC KMS keys. These keys don't support an encryption context.
    public var constraints: KMSClientTypes.GrantConstraints?
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// The identity that gets the permissions specified in the grant. To specify the principal, use the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of an Amazon Web Services principal. Valid Amazon Web Services principals include Amazon Web Services accounts (root), IAM users, IAM roles, federated users, and assumed role users. For examples of the ARN syntax to use for specifying a principal, see [Amazon Web Services Identity and Access Management (IAM)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam) in the Example ARNs section of the Amazon Web Services General Reference.
    /// This member is required.
    public var granteePrincipal: Swift.String?
    /// Identifies the KMS key for the grant. The grant gives principals permission to use this KMS key. Specify the key ID or key ARN of the KMS key. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// A friendly name for the grant. Use this value to prevent the unintended creation of duplicate grants when retrying this request. When this value is absent, all CreateGrant requests result in a new grant with a unique GrantId even if all the supplied parameters are identical. This can result in unintended duplicates when you retry the CreateGrant request. When this value is present, you can retry a CreateGrant request with identical parameters; if the grant already exists, the original GrantId is returned without creating a new grant. Note that the returned grant token is unique with every CreateGrant request, even when a duplicate GrantId is returned. All grant tokens for the same grant ID can be used interchangeably.
    public var name: Swift.String?
    /// A list of operations that the grant permits. This list must include only operations that are permitted in a grant. Also, the operation must be supported on the KMS key. For example, you cannot create a grant for a symmetric encryption KMS key that allows the [Sign] operation, or a grant for an asymmetric KMS key that allows the [GenerateDataKey] operation. If you try, KMS returns a ValidationError exception. For details, see [Grant operations](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#terms-grant-operations) in the Key Management Service Developer Guide.
    /// This member is required.
    public var operations: [KMSClientTypes.GrantOperation]?
    /// The principal that has permission to use the [RetireGrant] operation to retire the grant. To specify the principal, use the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of an Amazon Web Services principal. Valid Amazon Web Services principals include Amazon Web Services accounts (root), IAM users, federated users, and assumed role users. For examples of the ARN syntax to use for specifying a principal, see [Amazon Web Services Identity and Access Management (IAM)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam) in the Example ARNs section of the Amazon Web Services General Reference. The grant determines the retiring principal. Other principals might have permission to retire the grant or revoke the grant. For details, see [RevokeGrant] and [Retiring and revoking grants](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#grant-delete) in the Key Management Service Developer Guide.
    public var retiringPrincipal: Swift.String?

    public init (
        constraints: KMSClientTypes.GrantConstraints? = nil,
        grantTokens: [Swift.String]? = nil,
        granteePrincipal: Swift.String? = nil,
        keyId: Swift.String? = nil,
        name: Swift.String? = nil,
        operations: [KMSClientTypes.GrantOperation]? = nil,
        retiringPrincipal: Swift.String? = nil
    )
    {
        self.constraints = constraints
        self.grantTokens = grantTokens
        self.granteePrincipal = granteePrincipal
        self.keyId = keyId
        self.name = name
        self.operations = operations
        self.retiringPrincipal = retiringPrincipal
    }
}

struct CreateGrantInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let granteePrincipal: Swift.String?
    let retiringPrincipal: Swift.String?
    let operations: [KMSClientTypes.GrantOperation]?
    let constraints: KMSClientTypes.GrantConstraints?
    let grantTokens: [Swift.String]?
    let name: Swift.String?
}

extension CreateGrantInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case constraints = "Constraints"
        case grantTokens = "GrantTokens"
        case granteePrincipal = "GranteePrincipal"
        case keyId = "KeyId"
        case name = "Name"
        case operations = "Operations"
        case retiringPrincipal = "RetiringPrincipal"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let granteePrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .granteePrincipal)
        granteePrincipal = granteePrincipalDecoded
        let retiringPrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .retiringPrincipal)
        retiringPrincipal = retiringPrincipalDecoded
        let operationsContainer = try containerValues.decodeIfPresent([KMSClientTypes.GrantOperation?].self, forKey: .operations)
        var operationsDecoded0:[KMSClientTypes.GrantOperation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [KMSClientTypes.GrantOperation]()
            for enum0 in operationsContainer {
                if let enum0 = enum0 {
                    operationsDecoded0?.append(enum0)
                }
            }
        }
        operations = operationsDecoded0
        let constraintsDecoded = try containerValues.decodeIfPresent(KMSClientTypes.GrantConstraints.self, forKey: .constraints)
        constraints = constraintsDecoded
        let grantTokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .grantTokens)
        var grantTokensDecoded0:[Swift.String]? = nil
        if let grantTokensContainer = grantTokensContainer {
            grantTokensDecoded0 = [Swift.String]()
            for string0 in grantTokensContainer {
                if let string0 = string0 {
                    grantTokensDecoded0?.append(string0)
                }
            }
        }
        grantTokens = grantTokensDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension CreateGrantOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateGrantOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "Disabled" : self = .disabledException(try DisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGrantToken" : self = .invalidGrantTokenException(try InvalidGrantTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateGrantOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case disabledException(DisabledException)
    case invalidArnException(InvalidArnException)
    case invalidGrantTokenException(InvalidGrantTokenException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateGrantOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateGrantOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.grantId = output.grantId
            self.grantToken = output.grantToken
        } else {
            self.grantId = nil
            self.grantToken = nil
        }
    }
}

public struct CreateGrantOutputResponse: Swift.Equatable {
    /// The unique identifier for the grant. You can use the GrantId in a [ListGrants], [RetireGrant], or [RevokeGrant] operation.
    public var grantId: Swift.String?
    /// The grant token. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantToken: Swift.String?

    public init (
        grantId: Swift.String? = nil,
        grantToken: Swift.String? = nil
    )
    {
        self.grantId = grantId
        self.grantToken = grantToken
    }
}

struct CreateGrantOutputResponseBody: Swift.Equatable {
    let grantToken: Swift.String?
    let grantId: Swift.String?
}

extension CreateGrantOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantId = "GrantId"
        case grantToken = "GrantToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let grantTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .grantToken)
        grantToken = grantTokenDecoded
        let grantIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .grantId)
        grantId = grantIdDecoded
    }
}

extension CreateKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bypassPolicyLockoutSafetyCheck = "BypassPolicyLockoutSafetyCheck"
        case customKeyStoreId = "CustomKeyStoreId"
        case customerMasterKeySpec = "CustomerMasterKeySpec"
        case description = "Description"
        case keySpec = "KeySpec"
        case keyUsage = "KeyUsage"
        case multiRegion = "MultiRegion"
        case origin = "Origin"
        case policy = "Policy"
        case tags = "Tags"
        case xksKeyId = "XksKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bypassPolicyLockoutSafetyCheck != false {
            try encodeContainer.encode(bypassPolicyLockoutSafetyCheck, forKey: .bypassPolicyLockoutSafetyCheck)
        }
        if let customKeyStoreId = self.customKeyStoreId {
            try encodeContainer.encode(customKeyStoreId, forKey: .customKeyStoreId)
        }
        if let customerMasterKeySpec = self.customerMasterKeySpec {
            try encodeContainer.encode(customerMasterKeySpec.rawValue, forKey: .customerMasterKeySpec)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let keySpec = self.keySpec {
            try encodeContainer.encode(keySpec.rawValue, forKey: .keySpec)
        }
        if let keyUsage = self.keyUsage {
            try encodeContainer.encode(keyUsage.rawValue, forKey: .keyUsage)
        }
        if let multiRegion = self.multiRegion {
            try encodeContainer.encode(multiRegion, forKey: .multiRegion)
        }
        if let origin = self.origin {
            try encodeContainer.encode(origin.rawValue, forKey: .origin)
        }
        if let policy = self.policy {
            try encodeContainer.encode(policy, forKey: .policy)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let xksKeyId = self.xksKeyId {
            try encodeContainer.encode(xksKeyId, forKey: .xksKeyId)
        }
    }
}

extension CreateKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateKeyInput: Swift.Equatable {
    /// A flag to indicate whether to bypass the key policy lockout safety check. Setting this value to true increases the risk that the KMS key becomes unmanageable. Do not set this value to true indiscriminately. For more information, refer to the scenario in the [Default Key Policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam) section in the Key Management Service Developer Guide . Use this parameter only when you include a policy in the request and you intend to prevent the principal that is making the request from making a subsequent [PutKeyPolicy] request on the KMS key. The default value is false.
    public var bypassPolicyLockoutSafetyCheck: Swift.Bool
    /// Creates the KMS key in the specified [custom key store](https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html). The ConnectionState of the custom key store must be CONNECTED. To find the CustomKeyStoreID and ConnectionState use the [DescribeCustomKeyStores] operation. This parameter is valid only for symmetric encryption KMS keys in a single Region. You cannot create any other type of KMS key in a custom key store. When you create a KMS key in an CloudHSM key store, KMS generates a non-exportable 256-bit symmetric key in its associated CloudHSM cluster and associates it with the KMS key. When you create a KMS key in an external key store, you must use the XksKeyId parameter to specify an external key that serves as key material for the KMS key.
    public var customKeyStoreId: Swift.String?
    /// Instead, use the KeySpec parameter. The KeySpec and CustomerMasterKeySpec parameters work the same way. Only the names differ. We recommend that you use KeySpec parameter in your code. However, to avoid breaking changes, KMS supports both parameters.
    @available(*, deprecated, message: "This parameter has been deprecated. Instead, use the KeySpec parameter.")
    public var customerMasterKeySpec: KMSClientTypes.CustomerMasterKeySpec?
    /// A description of the KMS key. Use a description that helps you decide whether the KMS key is appropriate for a task. The default value is an empty string (no description). To set or change the description after the key is created, use [UpdateKeyDescription].
    public var description: Swift.String?
    /// Specifies the type of KMS key to create. The default value, SYMMETRIC_DEFAULT, creates a KMS key with a 256-bit AES-GCM key that is used for encryption and decryption, except in China Regions, where it creates a 128-bit symmetric key that uses SM4 encryption. For help choosing a key spec for your KMS key, see [Choosing a KMS key type](https://docs.aws.amazon.com/kms/latest/developerguide/key-types.html#symm-asymm-choose) in the Key Management Service Developer Guide . The KeySpec determines whether the KMS key contains a symmetric key or an asymmetric key pair. It also determines the algorithms that the KMS key supports. You can't change the KeySpec after the KMS key is created. To further restrict the algorithms that can be used with the KMS key, use a condition key in its key policy or IAM policy. For more information, see [kms:EncryptionAlgorithm](https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-encryption-algorithm), [kms:MacAlgorithm](https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-mac-algorithm) or [kms:Signing Algorithm](https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-signing-algorithm) in the Key Management Service Developer Guide . [Amazon Web Services services that are integrated with KMS](http://aws.amazon.com/kms/features/#AWS_Service_Integration) use symmetric encryption KMS keys to protect your data. These services do not support asymmetric KMS keys or HMAC KMS keys. KMS supports the following key specs for KMS keys:
    ///
    /// * Symmetric encryption key (default)
    ///
    /// * SYMMETRIC_DEFAULT
    ///
    ///
    ///
    ///
    /// * HMAC keys (symmetric)
    ///
    /// * HMAC_224
    ///
    /// * HMAC_256
    ///
    /// * HMAC_384
    ///
    /// * HMAC_512
    ///
    ///
    ///
    ///
    /// * Asymmetric RSA key pairs
    ///
    /// * RSA_2048
    ///
    /// * RSA_3072
    ///
    /// * RSA_4096
    ///
    ///
    ///
    ///
    /// * Asymmetric NIST-recommended elliptic curve key pairs
    ///
    /// * ECC_NIST_P256 (secp256r1)
    ///
    /// * ECC_NIST_P384 (secp384r1)
    ///
    /// * ECC_NIST_P521 (secp521r1)
    ///
    ///
    ///
    ///
    /// * Other asymmetric elliptic curve key pairs
    ///
    /// * ECC_SECG_P256K1 (secp256k1), commonly used for cryptocurrencies.
    ///
    ///
    ///
    ///
    /// * SM2 key pairs (China Regions only)
    ///
    /// * SM2
    public var keySpec: KMSClientTypes.KeySpec?
    /// Determines the [cryptographic operations](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations) for which you can use the KMS key. The default value is ENCRYPT_DECRYPT. This parameter is optional when you are creating a symmetric encryption KMS key; otherwise, it is required. You can't change the KeyUsage value after the KMS key is created. Select only one valid value.
    ///
    /// * For symmetric encryption KMS keys, omit the parameter or specify ENCRYPT_DECRYPT.
    ///
    /// * For HMAC KMS keys (symmetric), specify GENERATE_VERIFY_MAC.
    ///
    /// * For asymmetric KMS keys with RSA key material, specify ENCRYPT_DECRYPT or SIGN_VERIFY.
    ///
    /// * For asymmetric KMS keys with ECC key material, specify SIGN_VERIFY.
    ///
    /// * For asymmetric KMS keys with SM2 key material (China Regions only), specify ENCRYPT_DECRYPT or SIGN_VERIFY.
    public var keyUsage: KMSClientTypes.KeyUsageType?
    /// Creates a multi-Region primary key that you can replicate into other Amazon Web Services Regions. You cannot change this value after you create the KMS key. For a multi-Region key, set this parameter to True. For a single-Region KMS key, omit this parameter or set it to False. The default value is False. This operation supports multi-Region keys, an KMS feature that lets you create multiple interoperable KMS keys in different Amazon Web Services Regions. Because these KMS keys have the same key ID, key material, and other metadata, you can use them interchangeably to encrypt data in one Amazon Web Services Region and decrypt it in a different Amazon Web Services Region without re-encrypting the data or making a cross-Region call. For more information about multi-Region keys, see [Multi-Region keys in KMS](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html) in the Key Management Service Developer Guide. This value creates a primary key, not a replica. To create a replica key, use the [ReplicateKey] operation. You can create a symmetric or asymmetric multi-Region key, and you can create a multi-Region key with imported key material. However, you cannot create a multi-Region key in a custom key store.
    public var multiRegion: Swift.Bool?
    /// The source of the key material for the KMS key. You cannot change the origin after you create the KMS key. The default is AWS_KMS, which means that KMS creates the key material. To [create a KMS key with no key material](https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys-create-cmk.html) (for imported key material), set this value to EXTERNAL. For more information about importing key material into KMS, see [Importing Key Material](https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html) in the Key Management Service Developer Guide. The EXTERNAL origin value is valid only for symmetric KMS keys. To [create a KMS key in an CloudHSM key store](https://docs.aws.amazon.com/kms/latest/developerguide/create-cmk-keystore.html) and create its key material in the associated CloudHSM cluster, set this value to AWS_CLOUDHSM. You must also use the CustomKeyStoreId parameter to identify the CloudHSM key store. The KeySpec value must be SYMMETRIC_DEFAULT. To [create a KMS key in an external key store](https://docs.aws.amazon.com/kms/latest/developerguide/create-xks-keys.html), set this value to EXTERNAL_KEY_STORE. You must also use the CustomKeyStoreId parameter to identify the external key store and the XksKeyId parameter to identify the associated external key. The KeySpec value must be SYMMETRIC_DEFAULT.
    public var origin: KMSClientTypes.OriginType?
    /// The key policy to attach to the KMS key. If you provide a key policy, it must meet the following criteria:
    ///
    /// * If you don't set BypassPolicyLockoutSafetyCheck to true, the key policy must allow the principal that is making the CreateKey request to make a subsequent [PutKeyPolicy] request on the KMS key. This reduces the risk that the KMS key becomes unmanageable. For more information, refer to the scenario in the [Default Key Policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam) section of the Key Management Service Developer Guide .
    ///
    /// * Each statement in the key policy must contain one or more principals. The principals in the key policy must exist and be visible to KMS. When you create a new Amazon Web Services principal (for example, an IAM user or role), you might need to enforce a delay before including the new principal in a key policy because the new principal might not be immediately visible to KMS. For more information, see [Changes that I make are not always immediately visible](https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency) in the Amazon Web Services Identity and Access Management User Guide.
    ///
    ///
    /// If you do not provide a key policy, KMS attaches a default key policy to the KMS key. For more information, see [Default Key Policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default) in the Key Management Service Developer Guide. The key policy size quota is 32 kilobytes (32768 bytes). For help writing and formatting a JSON policy document, see the [IAM JSON Policy Reference](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html) in the Identity and Access Management User Guide .
    public var policy: Swift.String?
    /// Assigns one or more tags to the KMS key. Use this parameter to tag the KMS key when it is created. To tag an existing KMS key, use the [TagResource] operation. Tagging or untagging a KMS key can allow or deny permission to the KMS key. For details, see [ABAC for KMS](https://docs.aws.amazon.com/kms/latest/developerguide/abac.html) in the Key Management Service Developer Guide. To use this parameter, you must have [kms:TagResource](https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html) permission in an IAM policy. Each tag consists of a tag key and a tag value. Both the tag key and the tag value are required, but the tag value can be an empty (null) string. You cannot have more than one tag on a KMS key with the same tag key. If you specify an existing tag key with a different tag value, KMS replaces the current tag value with the specified one. When you add tags to an Amazon Web Services resource, Amazon Web Services generates a cost allocation report with usage and costs aggregated by tags. Tags can also be used to control access to a KMS key. For details, see [Tagging Keys](https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html).
    public var tags: [KMSClientTypes.Tag]?
    /// Identifies the [external key](https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html#concept-external-key) that serves as key material for the KMS key in an [external key store](https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html). Specify the ID that the [external key store proxy](https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html#concept-xks-proxy) uses to refer to the external key. For help, see the documentation for your external key store proxy. This parameter is required for a KMS key with an Origin value of EXTERNAL_KEY_STORE. It is not valid for KMS keys with any other Origin value. The external key must be an existing 256-bit AES symmetric encryption key hosted outside of Amazon Web Services in an external key manager associated with the external key store specified by the CustomKeyStoreId parameter. This key must be enabled and configured to perform encryption and decryption. Each KMS key in an external key store must use a different external key. For details, see [Requirements for a KMS key in an external key store](https://docs.aws.amazon.com/create-xks-keys.html#xks-key-requirements) in the Key Management Service Developer Guide. Each KMS key in an external key store is associated two backing keys. One is key material that KMS generates. The other is the external key specified by this parameter. When you use the KMS key in an external key store to encrypt data, the encryption operation is performed first by KMS using the KMS key material, and then by the external key manager using the specified external key, a process known as double encryption. For details, see [Double encryption](https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html#concept-double-encryption) in the Key Management Service Developer Guide.
    public var xksKeyId: Swift.String?

    public init (
        bypassPolicyLockoutSafetyCheck: Swift.Bool = false,
        customKeyStoreId: Swift.String? = nil,
        customerMasterKeySpec: KMSClientTypes.CustomerMasterKeySpec? = nil,
        description: Swift.String? = nil,
        keySpec: KMSClientTypes.KeySpec? = nil,
        keyUsage: KMSClientTypes.KeyUsageType? = nil,
        multiRegion: Swift.Bool? = nil,
        origin: KMSClientTypes.OriginType? = nil,
        policy: Swift.String? = nil,
        tags: [KMSClientTypes.Tag]? = nil,
        xksKeyId: Swift.String? = nil
    )
    {
        self.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck
        self.customKeyStoreId = customKeyStoreId
        self.customerMasterKeySpec = customerMasterKeySpec
        self.description = description
        self.keySpec = keySpec
        self.keyUsage = keyUsage
        self.multiRegion = multiRegion
        self.origin = origin
        self.policy = policy
        self.tags = tags
        self.xksKeyId = xksKeyId
    }
}

struct CreateKeyInputBody: Swift.Equatable {
    let policy: Swift.String?
    let description: Swift.String?
    let keyUsage: KMSClientTypes.KeyUsageType?
    let customerMasterKeySpec: KMSClientTypes.CustomerMasterKeySpec?
    let keySpec: KMSClientTypes.KeySpec?
    let origin: KMSClientTypes.OriginType?
    let customKeyStoreId: Swift.String?
    let bypassPolicyLockoutSafetyCheck: Swift.Bool
    let tags: [KMSClientTypes.Tag]?
    let multiRegion: Swift.Bool?
    let xksKeyId: Swift.String?
}

extension CreateKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bypassPolicyLockoutSafetyCheck = "BypassPolicyLockoutSafetyCheck"
        case customKeyStoreId = "CustomKeyStoreId"
        case customerMasterKeySpec = "CustomerMasterKeySpec"
        case description = "Description"
        case keySpec = "KeySpec"
        case keyUsage = "KeyUsage"
        case multiRegion = "MultiRegion"
        case origin = "Origin"
        case policy = "Policy"
        case tags = "Tags"
        case xksKeyId = "XksKeyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let keyUsageDecoded = try containerValues.decodeIfPresent(KMSClientTypes.KeyUsageType.self, forKey: .keyUsage)
        keyUsage = keyUsageDecoded
        let customerMasterKeySpecDecoded = try containerValues.decodeIfPresent(KMSClientTypes.CustomerMasterKeySpec.self, forKey: .customerMasterKeySpec)
        customerMasterKeySpec = customerMasterKeySpecDecoded
        let keySpecDecoded = try containerValues.decodeIfPresent(KMSClientTypes.KeySpec.self, forKey: .keySpec)
        keySpec = keySpecDecoded
        let originDecoded = try containerValues.decodeIfPresent(KMSClientTypes.OriginType.self, forKey: .origin)
        origin = originDecoded
        let customKeyStoreIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customKeyStoreId)
        customKeyStoreId = customKeyStoreIdDecoded
        let bypassPolicyLockoutSafetyCheckDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .bypassPolicyLockoutSafetyCheck) ?? false
        bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheckDecoded
        let tagsContainer = try containerValues.decodeIfPresent([KMSClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[KMSClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [KMSClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let multiRegionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .multiRegion)
        multiRegion = multiRegionDecoded
        let xksKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .xksKeyId)
        xksKeyId = xksKeyIdDecoded
    }
}

extension CreateKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CloudHsmClusterInvalidConfigurationException" : self = .cloudHsmClusterInvalidConfigurationException(try CloudHsmClusterInvalidConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CustomKeyStoreInvalidStateException" : self = .customKeyStoreInvalidStateException(try CustomKeyStoreInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CustomKeyStoreNotFoundException" : self = .customKeyStoreNotFoundException(try CustomKeyStoreNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MalformedPolicyDocument" : self = .malformedPolicyDocumentException(try MalformedPolicyDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagException" : self = .tagException(try TagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "XksKeyAlreadyInUse" : self = .xksKeyAlreadyInUseException(try XksKeyAlreadyInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "XksKeyInvalidConfiguration" : self = .xksKeyInvalidConfigurationException(try XksKeyInvalidConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "XksKeyNotFoundException" : self = .xksKeyNotFoundException(try XksKeyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateKeyOutputError: Swift.Error, Swift.Equatable {
    case cloudHsmClusterInvalidConfigurationException(CloudHsmClusterInvalidConfigurationException)
    case customKeyStoreInvalidStateException(CustomKeyStoreInvalidStateException)
    case customKeyStoreNotFoundException(CustomKeyStoreNotFoundException)
    case dependencyTimeoutException(DependencyTimeoutException)
    case invalidArnException(InvalidArnException)
    case kMSInternalException(KMSInternalException)
    case limitExceededException(LimitExceededException)
    case malformedPolicyDocumentException(MalformedPolicyDocumentException)
    case tagException(TagException)
    case unsupportedOperationException(UnsupportedOperationException)
    case xksKeyAlreadyInUseException(XksKeyAlreadyInUseException)
    case xksKeyInvalidConfigurationException(XksKeyInvalidConfigurationException)
    case xksKeyNotFoundException(XksKeyNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keyMetadata = output.keyMetadata
        } else {
            self.keyMetadata = nil
        }
    }
}

public struct CreateKeyOutputResponse: Swift.Equatable {
    /// Metadata associated with the KMS key.
    public var keyMetadata: KMSClientTypes.KeyMetadata?

    public init (
        keyMetadata: KMSClientTypes.KeyMetadata? = nil
    )
    {
        self.keyMetadata = keyMetadata
    }
}

struct CreateKeyOutputResponseBody: Swift.Equatable {
    let keyMetadata: KMSClientTypes.KeyMetadata?
}

extension CreateKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyMetadata = "KeyMetadata"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyMetadataDecoded = try containerValues.decodeIfPresent(KMSClientTypes.KeyMetadata.self, forKey: .keyMetadata)
        keyMetadata = keyMetadataDecoded
    }
}

extension CustomKeyStoreHasCMKsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CustomKeyStoreHasCMKsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the custom key store contains KMS keys. After verifying that you do not need to use the KMS keys, use the [ScheduleKeyDeletion] operation to delete the KMS keys. After they are deleted, you can delete the custom key store.
public struct CustomKeyStoreHasCMKsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CustomKeyStoreHasCMKsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension CustomKeyStoreHasCMKsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CustomKeyStoreInvalidStateException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CustomKeyStoreInvalidStateExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because of the ConnectionState of the custom key store. To get the ConnectionState of a custom key store, use the [DescribeCustomKeyStores] operation. This exception is thrown under the following conditions:
///
/// * You requested the [ConnectCustomKeyStore] operation on a custom key store with a ConnectionState of DISCONNECTING or FAILED. This operation is valid for all other ConnectionState values. To reconnect a custom key store in a FAILED state, disconnect it ([DisconnectCustomKeyStore]), then connect it (ConnectCustomKeyStore).
///
/// * You requested the [CreateKey] operation in a custom key store that is not connected. This operations is valid only when the custom key store ConnectionState is CONNECTED.
///
/// * You requested the [DisconnectCustomKeyStore] operation on a custom key store with a ConnectionState of DISCONNECTING or DISCONNECTED. This operation is valid for all other ConnectionState values.
///
/// * You requested the [UpdateCustomKeyStore] or [DeleteCustomKeyStore] operation on a custom key store that is not disconnected. This operation is valid only when the custom key store ConnectionState is DISCONNECTED.
///
/// * You requested the [GenerateRandom] operation in an CloudHSM key store that is not connected. This operation is valid only when the CloudHSM key store ConnectionState is CONNECTED.
public struct CustomKeyStoreInvalidStateException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CustomKeyStoreInvalidStateExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension CustomKeyStoreInvalidStateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CustomKeyStoreNameInUseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CustomKeyStoreNameInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the specified custom key store name is already assigned to another custom key store in the account. Try again with a custom key store name that is unique in the account.
public struct CustomKeyStoreNameInUseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CustomKeyStoreNameInUseExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension CustomKeyStoreNameInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CustomKeyStoreNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CustomKeyStoreNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because KMS cannot find a custom key store with the specified key store name or ID.
public struct CustomKeyStoreNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CustomKeyStoreNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension CustomKeyStoreNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KMSClientTypes {
    public enum CustomKeyStoreType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsCloudhsm
        case externalKeyStore
        case sdkUnknown(Swift.String)

        public static var allCases: [CustomKeyStoreType] {
            return [
                .awsCloudhsm,
                .externalKeyStore,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsCloudhsm: return "AWS_CLOUDHSM"
            case .externalKeyStore: return "EXTERNAL_KEY_STORE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CustomKeyStoreType(rawValue: rawValue) ?? CustomKeyStoreType.sdkUnknown(rawValue)
        }
    }
}

extension KMSClientTypes.CustomKeyStoresListEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudHsmClusterId = "CloudHsmClusterId"
        case connectionErrorCode = "ConnectionErrorCode"
        case connectionState = "ConnectionState"
        case creationDate = "CreationDate"
        case customKeyStoreId = "CustomKeyStoreId"
        case customKeyStoreName = "CustomKeyStoreName"
        case customKeyStoreType = "CustomKeyStoreType"
        case trustAnchorCertificate = "TrustAnchorCertificate"
        case xksProxyConfiguration = "XksProxyConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudHsmClusterId = self.cloudHsmClusterId {
            try encodeContainer.encode(cloudHsmClusterId, forKey: .cloudHsmClusterId)
        }
        if let connectionErrorCode = self.connectionErrorCode {
            try encodeContainer.encode(connectionErrorCode.rawValue, forKey: .connectionErrorCode)
        }
        if let connectionState = self.connectionState {
            try encodeContainer.encode(connectionState.rawValue, forKey: .connectionState)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encodeTimestamp(creationDate, format: .epochSeconds, forKey: .creationDate)
        }
        if let customKeyStoreId = self.customKeyStoreId {
            try encodeContainer.encode(customKeyStoreId, forKey: .customKeyStoreId)
        }
        if let customKeyStoreName = self.customKeyStoreName {
            try encodeContainer.encode(customKeyStoreName, forKey: .customKeyStoreName)
        }
        if let customKeyStoreType = self.customKeyStoreType {
            try encodeContainer.encode(customKeyStoreType.rawValue, forKey: .customKeyStoreType)
        }
        if let trustAnchorCertificate = self.trustAnchorCertificate {
            try encodeContainer.encode(trustAnchorCertificate, forKey: .trustAnchorCertificate)
        }
        if let xksProxyConfiguration = self.xksProxyConfiguration {
            try encodeContainer.encode(xksProxyConfiguration, forKey: .xksProxyConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customKeyStoreIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customKeyStoreId)
        customKeyStoreId = customKeyStoreIdDecoded
        let customKeyStoreNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customKeyStoreName)
        customKeyStoreName = customKeyStoreNameDecoded
        let cloudHsmClusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudHsmClusterId)
        cloudHsmClusterId = cloudHsmClusterIdDecoded
        let trustAnchorCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trustAnchorCertificate)
        trustAnchorCertificate = trustAnchorCertificateDecoded
        let connectionStateDecoded = try containerValues.decodeIfPresent(KMSClientTypes.ConnectionStateType.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
        let connectionErrorCodeDecoded = try containerValues.decodeIfPresent(KMSClientTypes.ConnectionErrorCodeType.self, forKey: .connectionErrorCode)
        connectionErrorCode = connectionErrorCodeDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
        let customKeyStoreTypeDecoded = try containerValues.decodeIfPresent(KMSClientTypes.CustomKeyStoreType.self, forKey: .customKeyStoreType)
        customKeyStoreType = customKeyStoreTypeDecoded
        let xksProxyConfigurationDecoded = try containerValues.decodeIfPresent(KMSClientTypes.XksProxyConfigurationType.self, forKey: .xksProxyConfiguration)
        xksProxyConfiguration = xksProxyConfigurationDecoded
    }
}

extension KMSClientTypes {
    /// Contains information about each custom key store in the custom key store list.
    public struct CustomKeyStoresListEntry: Swift.Equatable {
        /// A unique identifier for the CloudHSM cluster that is associated with an CloudHSM key store. This field appears only when the CustomKeyStoreType is AWS_CLOUDHSM.
        public var cloudHsmClusterId: Swift.String?
        /// Describes the connection error. This field appears in the response only when the ConnectionState is FAILED. Many failures can be resolved by updating the properties of the custom key store. To update a custom key store, disconnect it ([DisconnectCustomKeyStore]), correct the errors ([UpdateCustomKeyStore]), and try to connect again ([ConnectCustomKeyStore]). For additional help resolving these errors, see [How to Fix a Connection Failure](https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#fix-keystore-failed) in Key Management Service Developer Guide. All custom key stores:
        ///
        /// * INTERNAL_ERROR — KMS could not complete the request due to an internal error. Retry the request. For ConnectCustomKeyStore requests, disconnect the custom key store before trying to connect again.
        ///
        /// * NETWORK_ERRORS — Network errors are preventing KMS from connecting the custom key store to its backing key store.
        ///
        ///
        /// CloudHSM key stores:
        ///
        /// * CLUSTER_NOT_FOUND — KMS cannot find the CloudHSM cluster with the specified cluster ID.
        ///
        /// * INSUFFICIENT_CLOUDHSM_HSMS — The associated CloudHSM cluster does not contain any active HSMs. To connect a custom key store to its CloudHSM cluster, the cluster must contain at least one active HSM.
        ///
        /// * INSUFFICIENT_FREE_ADDRESSES_IN_SUBNET — At least one private subnet associated with the CloudHSM cluster doesn't have any available IP addresses. A CloudHSM key store connection requires one free IP address in each of the associated private subnets, although two are preferable. For details, see [How to Fix a Connection Failure](https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#fix-keystore-failed) in the Key Management Service Developer Guide.
        ///
        /// * INVALID_CREDENTIALS — The KeyStorePassword for the custom key store doesn't match the current password of the kmsuser crypto user in the CloudHSM cluster. Before you can connect your custom key store to its CloudHSM cluster, you must change the kmsuser account password and update the KeyStorePassword value for the custom key store.
        ///
        /// * SUBNET_NOT_FOUND — A subnet in the CloudHSM cluster configuration was deleted. If KMS cannot find all of the subnets in the cluster configuration, attempts to connect the custom key store to the CloudHSM cluster fail. To fix this error, create a cluster from a recent backup and associate it with your custom key store. (This process creates a new cluster configuration with a VPC and private subnets.) For details, see [How to Fix a Connection Failure](https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#fix-keystore-failed) in the Key Management Service Developer Guide.
        ///
        /// * USER_LOCKED_OUT — The kmsuser CU account is locked out of the associated CloudHSM cluster due to too many failed password attempts. Before you can connect your custom key store to its CloudHSM cluster, you must change the kmsuser account password and update the key store password value for the custom key store.
        ///
        /// * USER_LOGGED_IN — The kmsuser CU account is logged into the associated CloudHSM cluster. This prevents KMS from rotating the kmsuser account password and logging into the cluster. Before you can connect your custom key store to its CloudHSM cluster, you must log the kmsuser CU out of the cluster. If you changed the kmsuser password to log into the cluster, you must also and update the key store password value for the custom key store. For help, see [How to Log Out and Reconnect](https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#login-kmsuser-2) in the Key Management Service Developer Guide.
        ///
        /// * USER_NOT_FOUND — KMS cannot find a kmsuser CU account in the associated CloudHSM cluster. Before you can connect your custom key store to its CloudHSM cluster, you must create a kmsuser CU account in the cluster, and then update the key store password value for the custom key store.
        ///
        ///
        /// External key stores:
        ///
        /// * INVALID_CREDENTIALS — One or both of the XksProxyAuthenticationCredential values is not valid on the specified external key store proxy.
        ///
        /// * XKS_PROXY_ACCESS_DENIED — KMS requests are denied access to the external key store proxy. If the external key store proxy has authorization rules, verify that they permit KMS to communicate with the proxy on your behalf.
        ///
        /// * XKS_PROXY_INVALID_CONFIGURATION — A configuration error is preventing the external key store from connecting to its proxy. Verify the value of the XksProxyUriPath.
        ///
        /// * XKS_PROXY_INVALID_RESPONSE — KMS cannot interpret the response from the external key store proxy. If you see this connection error code repeatedly, notify your external key store proxy vendor.
        ///
        /// * XKS_PROXY_INVALID_TLS_CONFIGURATION — KMS cannot connect to the external key store proxy because the TLS configuration is invalid. Verify that the XKS proxy supports TLS 1.2 or 1.3. Also, verify that the TLS certificate is not expired, and that it matches the hostname in the XksProxyUriEndpoint value, and that it is signed by a certificate authority included in the [Trusted Certificate Authorities](https://github.com/aws/aws-kms-xksproxy-api-spec/blob/main/TrustedCertificateAuthorities) list.
        ///
        /// * XKS_PROXY_NOT_REACHABLE — KMS can't communicate with your external key store proxy. Verify that the XksProxyUriEndpoint and XksProxyUriPath are correct. Use the tools for your external key store proxy to verify that the proxy is active and available on its network. Also, verify that your external key manager instances are operating properly. Connection attempts fail with this connection error code if the proxy reports that all external key manager instances are unavailable.
        ///
        /// * XKS_PROXY_TIMED_OUT — KMS can connect to the external key store proxy, but the proxy does not respond to KMS in the time allotted. If you see this connection error code repeatedly, notify your external key store proxy vendor.
        ///
        /// * XKS_VPC_ENDPOINT_SERVICE_INVALID_CONFIGURATION — The Amazon VPC endpoint service configuration doesn't conform to the requirements for an KMS external key store.
        ///
        /// * The VPC endpoint service must be an endpoint service for interface endpoints in the caller's Amazon Web Services account.
        ///
        /// * It must have a network load balancer (NLB) connected to at least two subnets, each in a different Availability Zone.
        ///
        /// * The Allow principals list must include the KMS service principal for the Region, cks.kms..amazonaws.com,
        ///
        ///
        /// such as cks.kms.us-east-1.amazonaws.com.
        ///
        /// * It must not require [acceptance](https://docs.aws.amazon.com/vpc/latest/privatelink/create-endpoint-service.html) of connection requests.
        ///
        /// * It must have a private DNS name. The private DNS name for an external key store with VPC_ENDPOINT_SERVICE connectivity must be unique in its Amazon Web Services Region.
        ///
        /// * The domain of the private DNS name must have a [verification status](https://docs.aws.amazon.com/vpc/latest/privatelink/verify-domains.html) of verified.
        ///
        /// * The [TLS certificate](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html) specifies the private DNS hostname at which the endpoint is reachable.
        ///
        ///
        ///
        ///
        /// * XKS_VPC_ENDPOINT_SERVICE_NOT_FOUND — KMS can't find the VPC endpoint service that it uses to communicate with the external key store proxy. Verify that the XksProxyVpcEndpointServiceName is correct and the KMS service principal has service consumer permissions on the Amazon VPC endpoint service.
        public var connectionErrorCode: KMSClientTypes.ConnectionErrorCodeType?
        /// Indicates whether the custom key store is connected to its backing key store. For an CloudHSM key store, the ConnectionState indicates whether it is connected to its CloudHSM cluster. For an external key store, the ConnectionState indicates whether it is connected to the external key store proxy that communicates with your external key manager. You can create and use KMS keys in your custom key stores only when its ConnectionState is CONNECTED. The ConnectionState value is DISCONNECTED only if the key store has never been connected or you use the [DisconnectCustomKeyStore] operation to disconnect it. If the value is CONNECTED but you are having trouble using the custom key store, make sure that the backing key store is reachable and active. For an CloudHSM key store, verify that its associated CloudHSM cluster is active and contains at least one active HSM. For an external key store, verify that the external key store proxy and external key manager are connected and enabled. A value of FAILED indicates that an attempt to connect was unsuccessful. The ConnectionErrorCode field in the response indicates the cause of the failure. For help resolving a connection failure, see [Troubleshooting a custom key store](https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html) in the Key Management Service Developer Guide.
        public var connectionState: KMSClientTypes.ConnectionStateType?
        /// The date and time when the custom key store was created.
        public var creationDate: ClientRuntime.Date?
        /// A unique identifier for the custom key store.
        public var customKeyStoreId: Swift.String?
        /// The user-specified friendly name for the custom key store.
        public var customKeyStoreName: Swift.String?
        /// Indicates the type of the custom key store. AWS_CLOUDHSM indicates a custom key store backed by an CloudHSM cluster. EXTERNAL_KEY_STORE indicates a custom key store backed by an external key store proxy and external key manager outside of Amazon Web Services.
        public var customKeyStoreType: KMSClientTypes.CustomKeyStoreType?
        /// The trust anchor certificate of the CloudHSM cluster associated with an CloudHSM key store. When you [initialize the cluster](https://docs.aws.amazon.com/cloudhsm/latest/userguide/initialize-cluster.html#sign-csr), you create this certificate and save it in the customerCA.crt file. This field appears only when the CustomKeyStoreType is AWS_CLOUDHSM.
        public var trustAnchorCertificate: Swift.String?
        /// Configuration settings for the external key store proxy (XKS proxy). The external key store proxy translates KMS requests into a format that your external key manager can understand. The proxy configuration includes connection information that KMS requires. This field appears only when the CustomKeyStoreType is EXTERNAL_KEY_STORE.
        public var xksProxyConfiguration: KMSClientTypes.XksProxyConfigurationType?

        public init (
            cloudHsmClusterId: Swift.String? = nil,
            connectionErrorCode: KMSClientTypes.ConnectionErrorCodeType? = nil,
            connectionState: KMSClientTypes.ConnectionStateType? = nil,
            creationDate: ClientRuntime.Date? = nil,
            customKeyStoreId: Swift.String? = nil,
            customKeyStoreName: Swift.String? = nil,
            customKeyStoreType: KMSClientTypes.CustomKeyStoreType? = nil,
            trustAnchorCertificate: Swift.String? = nil,
            xksProxyConfiguration: KMSClientTypes.XksProxyConfigurationType? = nil
        )
        {
            self.cloudHsmClusterId = cloudHsmClusterId
            self.connectionErrorCode = connectionErrorCode
            self.connectionState = connectionState
            self.creationDate = creationDate
            self.customKeyStoreId = customKeyStoreId
            self.customKeyStoreName = customKeyStoreName
            self.customKeyStoreType = customKeyStoreType
            self.trustAnchorCertificate = trustAnchorCertificate
            self.xksProxyConfiguration = xksProxyConfiguration
        }
    }

}

extension KMSClientTypes {
    @available(*, deprecated, message: "This enum has been deprecated. Instead, use the KeySpec enum.")
    public enum CustomerMasterKeySpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case eccNistP256
        case eccNistP384
        case eccNistP521
        case eccSecgP256k1
        case hmac224
        case hmac256
        case hmac384
        case hmac512
        case rsa2048
        case rsa3072
        case rsa4096
        case sm2
        case symmetricDefault
        case sdkUnknown(Swift.String)

        public static var allCases: [CustomerMasterKeySpec] {
            return [
                .eccNistP256,
                .eccNistP384,
                .eccNistP521,
                .eccSecgP256k1,
                .hmac224,
                .hmac256,
                .hmac384,
                .hmac512,
                .rsa2048,
                .rsa3072,
                .rsa4096,
                .sm2,
                .symmetricDefault,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .eccNistP256: return "ECC_NIST_P256"
            case .eccNistP384: return "ECC_NIST_P384"
            case .eccNistP521: return "ECC_NIST_P521"
            case .eccSecgP256k1: return "ECC_SECG_P256K1"
            case .hmac224: return "HMAC_224"
            case .hmac256: return "HMAC_256"
            case .hmac384: return "HMAC_384"
            case .hmac512: return "HMAC_512"
            case .rsa2048: return "RSA_2048"
            case .rsa3072: return "RSA_3072"
            case .rsa4096: return "RSA_4096"
            case .sm2: return "SM2"
            case .symmetricDefault: return "SYMMETRIC_DEFAULT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CustomerMasterKeySpec(rawValue: rawValue) ?? CustomerMasterKeySpec.sdkUnknown(rawValue)
        }
    }
}

extension KMSClientTypes {
    public enum DataKeyPairSpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case eccNistP256
        case eccNistP384
        case eccNistP521
        case eccSecgP256k1
        case rsa2048
        case rsa3072
        case rsa4096
        case sm2
        case sdkUnknown(Swift.String)

        public static var allCases: [DataKeyPairSpec] {
            return [
                .eccNistP256,
                .eccNistP384,
                .eccNistP521,
                .eccSecgP256k1,
                .rsa2048,
                .rsa3072,
                .rsa4096,
                .sm2,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .eccNistP256: return "ECC_NIST_P256"
            case .eccNistP384: return "ECC_NIST_P384"
            case .eccNistP521: return "ECC_NIST_P521"
            case .eccSecgP256k1: return "ECC_SECG_P256K1"
            case .rsa2048: return "RSA_2048"
            case .rsa3072: return "RSA_3072"
            case .rsa4096: return "RSA_4096"
            case .sm2: return "SM2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataKeyPairSpec(rawValue: rawValue) ?? DataKeyPairSpec.sdkUnknown(rawValue)
        }
    }
}

extension KMSClientTypes {
    public enum DataKeySpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aes128
        case aes256
        case sdkUnknown(Swift.String)

        public static var allCases: [DataKeySpec] {
            return [
                .aes128,
                .aes256,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aes128: return "AES_128"
            case .aes256: return "AES_256"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataKeySpec(rawValue: rawValue) ?? DataKeySpec.sdkUnknown(rawValue)
        }
    }
}

extension DecryptInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ciphertextBlob = "CiphertextBlob"
        case encryptionAlgorithm = "EncryptionAlgorithm"
        case encryptionContext = "EncryptionContext"
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ciphertextBlob = self.ciphertextBlob {
            try encodeContainer.encode(ciphertextBlob.base64EncodedString(), forKey: .ciphertextBlob)
        }
        if let encryptionAlgorithm = self.encryptionAlgorithm {
            try encodeContainer.encode(encryptionAlgorithm.rawValue, forKey: .encryptionAlgorithm)
        }
        if let encryptionContext = encryptionContext {
            var encryptionContextContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .encryptionContext)
            for (dictKey0, encryptionContextType0) in encryptionContext {
                try encryptionContextContainer.encode(encryptionContextType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let grantTokens = grantTokens {
            var grantTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grantTokens)
            for granttokentype0 in grantTokens {
                try grantTokensContainer.encode(granttokentype0)
            }
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
    }
}

extension DecryptInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DecryptInput: Swift.Equatable {
    /// Ciphertext to be decrypted. The blob includes metadata.
    /// This member is required.
    public var ciphertextBlob: ClientRuntime.Data?
    /// Specifies the encryption algorithm that will be used to decrypt the ciphertext. Specify the same algorithm that was used to encrypt the data. If you specify a different algorithm, the Decrypt operation fails. This parameter is required only when the ciphertext was encrypted under an asymmetric KMS key. The default value, SYMMETRIC_DEFAULT, represents the only supported algorithm that is valid for symmetric encryption KMS keys.
    public var encryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
    /// Specifies the encryption context to use when decrypting the data. An encryption context is valid only for [cryptographic operations](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations) with a symmetric encryption KMS key. The standard asymmetric encryption algorithms and HMAC algorithms that KMS uses do not support an encryption context. An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Key Management Service Developer Guide.
    public var encryptionContext: [Swift.String:Swift.String]?
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Specifies the KMS key that KMS uses to decrypt the ciphertext. Enter a key ID of the KMS key that was used to encrypt the ciphertext. If you identify a different KMS key, the Decrypt operation throws an IncorrectKeyException. This parameter is required only when the ciphertext was encrypted under an asymmetric KMS key. If you used a symmetric encryption KMS key, KMS can get the KMS key from metadata that it adds to the symmetric ciphertext blob. However, it is always recommended as a best practice. This practice ensures that you use the KMS key that you intend. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    public var keyId: Swift.String?

    public init (
        ciphertextBlob: ClientRuntime.Data? = nil,
        encryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec? = nil,
        encryptionContext: [Swift.String:Swift.String]? = nil,
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil
    )
    {
        self.ciphertextBlob = ciphertextBlob
        self.encryptionAlgorithm = encryptionAlgorithm
        self.encryptionContext = encryptionContext
        self.grantTokens = grantTokens
        self.keyId = keyId
    }
}

struct DecryptInputBody: Swift.Equatable {
    let ciphertextBlob: ClientRuntime.Data?
    let encryptionContext: [Swift.String:Swift.String]?
    let grantTokens: [Swift.String]?
    let keyId: Swift.String?
    let encryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
}

extension DecryptInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ciphertextBlob = "CiphertextBlob"
        case encryptionAlgorithm = "EncryptionAlgorithm"
        case encryptionContext = "EncryptionContext"
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ciphertextBlobDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .ciphertextBlob)
        ciphertextBlob = ciphertextBlobDecoded
        let encryptionContextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .encryptionContext)
        var encryptionContextDecoded0: [Swift.String:Swift.String]? = nil
        if let encryptionContextContainer = encryptionContextContainer {
            encryptionContextDecoded0 = [Swift.String:Swift.String]()
            for (key0, encryptioncontextvalue0) in encryptionContextContainer {
                if let encryptioncontextvalue0 = encryptioncontextvalue0 {
                    encryptionContextDecoded0?[key0] = encryptioncontextvalue0
                }
            }
        }
        encryptionContext = encryptionContextDecoded0
        let grantTokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .grantTokens)
        var grantTokensDecoded0:[Swift.String]? = nil
        if let grantTokensContainer = grantTokensContainer {
            grantTokensDecoded0 = [Swift.String]()
            for string0 in grantTokensContainer {
                if let string0 = string0 {
                    grantTokensDecoded0?.append(string0)
                }
            }
        }
        grantTokens = grantTokensDecoded0
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let encryptionAlgorithmDecoded = try containerValues.decodeIfPresent(KMSClientTypes.EncryptionAlgorithmSpec.self, forKey: .encryptionAlgorithm)
        encryptionAlgorithm = encryptionAlgorithmDecoded
    }
}

extension DecryptOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DecryptOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "Disabled" : self = .disabledException(try DisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncorrectKeyException" : self = .incorrectKeyException(try IncorrectKeyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCiphertext" : self = .invalidCiphertextException(try InvalidCiphertextException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGrantToken" : self = .invalidGrantTokenException(try InvalidGrantTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeyUsage" : self = .invalidKeyUsageException(try InvalidKeyUsageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KeyUnavailable" : self = .keyUnavailableException(try KeyUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DecryptOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case disabledException(DisabledException)
    case incorrectKeyException(IncorrectKeyException)
    case invalidCiphertextException(InvalidCiphertextException)
    case invalidGrantTokenException(InvalidGrantTokenException)
    case invalidKeyUsageException(InvalidKeyUsageException)
    case keyUnavailableException(KeyUnavailableException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DecryptOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DecryptOutputResponse(encryptionAlgorithm: \(Swift.String(describing: encryptionAlgorithm)), keyId: \(Swift.String(describing: keyId)), plaintext: \"CONTENT_REDACTED\")"}
}

extension DecryptOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DecryptOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.encryptionAlgorithm = output.encryptionAlgorithm
            self.keyId = output.keyId
            self.plaintext = output.plaintext
        } else {
            self.encryptionAlgorithm = nil
            self.keyId = nil
            self.plaintext = nil
        }
    }
}

public struct DecryptOutputResponse: Swift.Equatable {
    /// The encryption algorithm that was used to decrypt the ciphertext.
    public var encryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the KMS key that was used to decrypt the ciphertext.
    public var keyId: Swift.String?
    /// Decrypted plaintext data. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var plaintext: ClientRuntime.Data?

    public init (
        encryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec? = nil,
        keyId: Swift.String? = nil,
        plaintext: ClientRuntime.Data? = nil
    )
    {
        self.encryptionAlgorithm = encryptionAlgorithm
        self.keyId = keyId
        self.plaintext = plaintext
    }
}

struct DecryptOutputResponseBody: Swift.Equatable {
    let keyId: Swift.String?
    let plaintext: ClientRuntime.Data?
    let encryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
}

extension DecryptOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionAlgorithm = "EncryptionAlgorithm"
        case keyId = "KeyId"
        case plaintext = "Plaintext"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let plaintextDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .plaintext)
        plaintext = plaintextDecoded
        let encryptionAlgorithmDecoded = try containerValues.decodeIfPresent(KMSClientTypes.EncryptionAlgorithmSpec.self, forKey: .encryptionAlgorithm)
        encryptionAlgorithm = encryptionAlgorithmDecoded
    }
}

extension DeleteAliasInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasName = self.aliasName {
            try encodeContainer.encode(aliasName, forKey: .aliasName)
        }
    }
}

extension DeleteAliasInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteAliasInput: Swift.Equatable {
    /// The alias to be deleted. The alias name must begin with alias/ followed by the alias name, such as alias/ExampleAlias.
    /// This member is required.
    public var aliasName: Swift.String?

    public init (
        aliasName: Swift.String? = nil
    )
    {
        self.aliasName = aliasName
    }
}

struct DeleteAliasInputBody: Swift.Equatable {
    let aliasName: Swift.String?
}

extension DeleteAliasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasName)
        aliasName = aliasNameDecoded
    }
}

extension DeleteAliasOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteAliasOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteAliasOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAliasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteAliasOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteCustomKeyStoreInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customKeyStoreId = "CustomKeyStoreId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customKeyStoreId = self.customKeyStoreId {
            try encodeContainer.encode(customKeyStoreId, forKey: .customKeyStoreId)
        }
    }
}

extension DeleteCustomKeyStoreInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteCustomKeyStoreInput: Swift.Equatable {
    /// Enter the ID of the custom key store you want to delete. To find the ID of a custom key store, use the [DescribeCustomKeyStores] operation.
    /// This member is required.
    public var customKeyStoreId: Swift.String?

    public init (
        customKeyStoreId: Swift.String? = nil
    )
    {
        self.customKeyStoreId = customKeyStoreId
    }
}

struct DeleteCustomKeyStoreInputBody: Swift.Equatable {
    let customKeyStoreId: Swift.String?
}

extension DeleteCustomKeyStoreInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customKeyStoreId = "CustomKeyStoreId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customKeyStoreIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customKeyStoreId)
        customKeyStoreId = customKeyStoreIdDecoded
    }
}

extension DeleteCustomKeyStoreOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteCustomKeyStoreOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CustomKeyStoreHasCMKsException" : self = .customKeyStoreHasCMKsException(try CustomKeyStoreHasCMKsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CustomKeyStoreInvalidStateException" : self = .customKeyStoreInvalidStateException(try CustomKeyStoreInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CustomKeyStoreNotFoundException" : self = .customKeyStoreNotFoundException(try CustomKeyStoreNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteCustomKeyStoreOutputError: Swift.Error, Swift.Equatable {
    case customKeyStoreHasCMKsException(CustomKeyStoreHasCMKsException)
    case customKeyStoreInvalidStateException(CustomKeyStoreInvalidStateException)
    case customKeyStoreNotFoundException(CustomKeyStoreNotFoundException)
    case kMSInternalException(KMSInternalException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCustomKeyStoreOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteCustomKeyStoreOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteImportedKeyMaterialInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
    }
}

extension DeleteImportedKeyMaterialInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteImportedKeyMaterialInput: Swift.Equatable {
    /// Identifies the KMS key from which you are deleting imported key material. The Origin of the KMS key must be EXTERNAL. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?

    public init (
        keyId: Swift.String? = nil
    )
    {
        self.keyId = keyId
    }
}

struct DeleteImportedKeyMaterialInputBody: Swift.Equatable {
    let keyId: Swift.String?
}

extension DeleteImportedKeyMaterialInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
    }
}

extension DeleteImportedKeyMaterialOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteImportedKeyMaterialOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteImportedKeyMaterialOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case invalidArnException(InvalidArnException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteImportedKeyMaterialOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteImportedKeyMaterialOutputResponse: Swift.Equatable {

    public init () { }
}

extension DependencyTimeoutException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DependencyTimeoutExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The system timed out while trying to fulfill the request. You can retry the request.
public struct DependencyTimeoutException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DependencyTimeoutExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DependencyTimeoutExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DescribeCustomKeyStoresInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customKeyStoreId = "CustomKeyStoreId"
        case customKeyStoreName = "CustomKeyStoreName"
        case limit = "Limit"
        case marker = "Marker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customKeyStoreId = self.customKeyStoreId {
            try encodeContainer.encode(customKeyStoreId, forKey: .customKeyStoreId)
        }
        if let customKeyStoreName = self.customKeyStoreName {
            try encodeContainer.encode(customKeyStoreName, forKey: .customKeyStoreName)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let marker = self.marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
    }
}

extension DescribeCustomKeyStoresInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeCustomKeyStoresInput: Swift.Equatable {
    /// Gets only information about the specified custom key store. Enter the key store ID. By default, this operation gets information about all custom key stores in the account and Region. To limit the output to a particular custom key store, provide either the CustomKeyStoreId or CustomKeyStoreName parameter, but not both.
    public var customKeyStoreId: Swift.String?
    /// Gets only information about the specified custom key store. Enter the friendly name of the custom key store. By default, this operation gets information about all custom key stores in the account and Region. To limit the output to a particular custom key store, provide either the CustomKeyStoreId or CustomKeyStoreName parameter, but not both.
    public var customKeyStoreName: Swift.String?
    /// Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer.
    public var limit: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
    public var marker: Swift.String?

    public init (
        customKeyStoreId: Swift.String? = nil,
        customKeyStoreName: Swift.String? = nil,
        limit: Swift.Int? = nil,
        marker: Swift.String? = nil
    )
    {
        self.customKeyStoreId = customKeyStoreId
        self.customKeyStoreName = customKeyStoreName
        self.limit = limit
        self.marker = marker
    }
}

struct DescribeCustomKeyStoresInputBody: Swift.Equatable {
    let customKeyStoreId: Swift.String?
    let customKeyStoreName: Swift.String?
    let limit: Swift.Int?
    let marker: Swift.String?
}

extension DescribeCustomKeyStoresInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customKeyStoreId = "CustomKeyStoreId"
        case customKeyStoreName = "CustomKeyStoreName"
        case limit = "Limit"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customKeyStoreIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customKeyStoreId)
        customKeyStoreId = customKeyStoreIdDecoded
        let customKeyStoreNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customKeyStoreName)
        customKeyStoreName = customKeyStoreNameDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DescribeCustomKeyStoresOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeCustomKeyStoresOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CustomKeyStoreNotFoundException" : self = .customKeyStoreNotFoundException(try CustomKeyStoreNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidMarker" : self = .invalidMarkerException(try InvalidMarkerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeCustomKeyStoresOutputError: Swift.Error, Swift.Equatable {
    case customKeyStoreNotFoundException(CustomKeyStoreNotFoundException)
    case invalidMarkerException(InvalidMarkerException)
    case kMSInternalException(KMSInternalException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCustomKeyStoresOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeCustomKeyStoresOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.customKeyStores = output.customKeyStores
            self.nextMarker = output.nextMarker
            self.truncated = output.truncated
        } else {
            self.customKeyStores = nil
            self.nextMarker = nil
            self.truncated = false
        }
    }
}

public struct DescribeCustomKeyStoresOutputResponse: Swift.Equatable {
    /// Contains metadata about each custom key store.
    public var customKeyStores: [KMSClientTypes.CustomKeyStoresListEntry]?
    /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
    public var nextMarker: Swift.String?
    /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in thisresponse to the Marker parameter in a subsequent request.
    public var truncated: Swift.Bool

    public init (
        customKeyStores: [KMSClientTypes.CustomKeyStoresListEntry]? = nil,
        nextMarker: Swift.String? = nil,
        truncated: Swift.Bool = false
    )
    {
        self.customKeyStores = customKeyStores
        self.nextMarker = nextMarker
        self.truncated = truncated
    }
}

struct DescribeCustomKeyStoresOutputResponseBody: Swift.Equatable {
    let customKeyStores: [KMSClientTypes.CustomKeyStoresListEntry]?
    let nextMarker: Swift.String?
    let truncated: Swift.Bool
}

extension DescribeCustomKeyStoresOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customKeyStores = "CustomKeyStores"
        case nextMarker = "NextMarker"
        case truncated = "Truncated"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customKeyStoresContainer = try containerValues.decodeIfPresent([KMSClientTypes.CustomKeyStoresListEntry?].self, forKey: .customKeyStores)
        var customKeyStoresDecoded0:[KMSClientTypes.CustomKeyStoresListEntry]? = nil
        if let customKeyStoresContainer = customKeyStoresContainer {
            customKeyStoresDecoded0 = [KMSClientTypes.CustomKeyStoresListEntry]()
            for structure0 in customKeyStoresContainer {
                if let structure0 = structure0 {
                    customKeyStoresDecoded0?.append(structure0)
                }
            }
        }
        customKeyStores = customKeyStoresDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let truncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .truncated) ?? false
        truncated = truncatedDecoded
    }
}

extension DescribeKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let grantTokens = grantTokens {
            var grantTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grantTokens)
            for granttokentype0 in grantTokens {
                try grantTokensContainer.encode(granttokentype0)
            }
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
    }
}

extension DescribeKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeKeyInput: Swift.Equatable {
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Describes the specified KMS key. If you specify a predefined Amazon Web Services alias (an Amazon Web Services alias with no key ID), KMS associates the alias with an [Amazon Web Services managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html##aws-managed-cmk) and returns its KeyId and Arn in the response. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    /// This member is required.
    public var keyId: Swift.String?

    public init (
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil
    )
    {
        self.grantTokens = grantTokens
        self.keyId = keyId
    }
}

struct DescribeKeyInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let grantTokens: [Swift.String]?
}

extension DescribeKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let grantTokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .grantTokens)
        var grantTokensDecoded0:[Swift.String]? = nil
        if let grantTokensContainer = grantTokensContainer {
            grantTokensDecoded0 = [Swift.String]()
            for string0 in grantTokensContainer {
                if let string0 = string0 {
                    grantTokensDecoded0?.append(string0)
                }
            }
        }
        grantTokens = grantTokensDecoded0
    }
}

extension DescribeKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeKeyOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case invalidArnException(InvalidArnException)
    case kMSInternalException(KMSInternalException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keyMetadata = output.keyMetadata
        } else {
            self.keyMetadata = nil
        }
    }
}

public struct DescribeKeyOutputResponse: Swift.Equatable {
    /// Metadata associated with the key.
    public var keyMetadata: KMSClientTypes.KeyMetadata?

    public init (
        keyMetadata: KMSClientTypes.KeyMetadata? = nil
    )
    {
        self.keyMetadata = keyMetadata
    }
}

struct DescribeKeyOutputResponseBody: Swift.Equatable {
    let keyMetadata: KMSClientTypes.KeyMetadata?
}

extension DescribeKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyMetadata = "KeyMetadata"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyMetadataDecoded = try containerValues.decodeIfPresent(KMSClientTypes.KeyMetadata.self, forKey: .keyMetadata)
        keyMetadata = keyMetadataDecoded
    }
}

extension DisableKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
    }
}

extension DisableKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DisableKeyInput: Swift.Equatable {
    /// Identifies the KMS key to disable. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?

    public init (
        keyId: Swift.String? = nil
    )
    {
        self.keyId = keyId
    }
}

struct DisableKeyInputBody: Swift.Equatable {
    let keyId: Swift.String?
}

extension DisableKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
    }
}

extension DisableKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisableKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DisableKeyOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case invalidArnException(InvalidArnException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisableKeyOutputResponse: Swift.Equatable {

    public init () { }
}

extension DisableKeyRotationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
    }
}

extension DisableKeyRotationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DisableKeyRotationInput: Swift.Equatable {
    /// Identifies a symmetric encryption KMS key. You cannot enable or disable automatic rotation of [asymmetric KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html#asymmetric-cmks), [HMAC KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html), KMS keys with [imported key material](https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html), or KMS keys in a [custom key store](https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html). Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?

    public init (
        keyId: Swift.String? = nil
    )
    {
        self.keyId = keyId
    }
}

struct DisableKeyRotationInputBody: Swift.Equatable {
    let keyId: Swift.String?
}

extension DisableKeyRotationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
    }
}

extension DisableKeyRotationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisableKeyRotationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "Disabled" : self = .disabledException(try DisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DisableKeyRotationOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case disabledException(DisabledException)
    case invalidArnException(InvalidArnException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableKeyRotationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisableKeyRotationOutputResponse: Swift.Equatable {

    public init () { }
}

extension DisabledException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DisabledExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the specified KMS key is not enabled.
public struct DisabledException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DisabledExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DisabledExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DisconnectCustomKeyStoreInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customKeyStoreId = "CustomKeyStoreId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customKeyStoreId = self.customKeyStoreId {
            try encodeContainer.encode(customKeyStoreId, forKey: .customKeyStoreId)
        }
    }
}

extension DisconnectCustomKeyStoreInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DisconnectCustomKeyStoreInput: Swift.Equatable {
    /// Enter the ID of the custom key store you want to disconnect. To find the ID of a custom key store, use the [DescribeCustomKeyStores] operation.
    /// This member is required.
    public var customKeyStoreId: Swift.String?

    public init (
        customKeyStoreId: Swift.String? = nil
    )
    {
        self.customKeyStoreId = customKeyStoreId
    }
}

struct DisconnectCustomKeyStoreInputBody: Swift.Equatable {
    let customKeyStoreId: Swift.String?
}

extension DisconnectCustomKeyStoreInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customKeyStoreId = "CustomKeyStoreId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customKeyStoreIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customKeyStoreId)
        customKeyStoreId = customKeyStoreIdDecoded
    }
}

extension DisconnectCustomKeyStoreOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisconnectCustomKeyStoreOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CustomKeyStoreInvalidStateException" : self = .customKeyStoreInvalidStateException(try CustomKeyStoreInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CustomKeyStoreNotFoundException" : self = .customKeyStoreNotFoundException(try CustomKeyStoreNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DisconnectCustomKeyStoreOutputError: Swift.Error, Swift.Equatable {
    case customKeyStoreInvalidStateException(CustomKeyStoreInvalidStateException)
    case customKeyStoreNotFoundException(CustomKeyStoreNotFoundException)
    case kMSInternalException(KMSInternalException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisconnectCustomKeyStoreOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisconnectCustomKeyStoreOutputResponse: Swift.Equatable {

    public init () { }
}

extension EnableKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
    }
}

extension EnableKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct EnableKeyInput: Swift.Equatable {
    /// Identifies the KMS key to enable. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?

    public init (
        keyId: Swift.String? = nil
    )
    {
        self.keyId = keyId
    }
}

struct EnableKeyInputBody: Swift.Equatable {
    let keyId: Swift.String?
}

extension EnableKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
    }
}

extension EnableKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EnableKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum EnableKeyOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case invalidArnException(InvalidArnException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct EnableKeyOutputResponse: Swift.Equatable {

    public init () { }
}

extension EnableKeyRotationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
    }
}

extension EnableKeyRotationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct EnableKeyRotationInput: Swift.Equatable {
    /// Identifies a symmetric encryption KMS key. You cannot enable automatic rotation of [asymmetric KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html), [HMAC KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html), KMS keys with [imported key material](https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html), or KMS keys in a [custom key store](https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html). To enable or disable automatic rotation of a set of related [multi-Region keys](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate), set the property on the primary key. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?

    public init (
        keyId: Swift.String? = nil
    )
    {
        self.keyId = keyId
    }
}

struct EnableKeyRotationInputBody: Swift.Equatable {
    let keyId: Swift.String?
}

extension EnableKeyRotationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
    }
}

extension EnableKeyRotationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EnableKeyRotationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "Disabled" : self = .disabledException(try DisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum EnableKeyRotationOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case disabledException(DisabledException)
    case invalidArnException(InvalidArnException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableKeyRotationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct EnableKeyRotationOutputResponse: Swift.Equatable {

    public init () { }
}

extension EncryptInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EncryptInput(encryptionAlgorithm: \(Swift.String(describing: encryptionAlgorithm)), encryptionContext: \(Swift.String(describing: encryptionContext)), grantTokens: \(Swift.String(describing: grantTokens)), keyId: \(Swift.String(describing: keyId)), plaintext: \"CONTENT_REDACTED\")"}
}

extension EncryptInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionAlgorithm = "EncryptionAlgorithm"
        case encryptionContext = "EncryptionContext"
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case plaintext = "Plaintext"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionAlgorithm = self.encryptionAlgorithm {
            try encodeContainer.encode(encryptionAlgorithm.rawValue, forKey: .encryptionAlgorithm)
        }
        if let encryptionContext = encryptionContext {
            var encryptionContextContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .encryptionContext)
            for (dictKey0, encryptionContextType0) in encryptionContext {
                try encryptionContextContainer.encode(encryptionContextType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let grantTokens = grantTokens {
            var grantTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grantTokens)
            for granttokentype0 in grantTokens {
                try grantTokensContainer.encode(granttokentype0)
            }
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let plaintext = self.plaintext {
            try encodeContainer.encode(plaintext.base64EncodedString(), forKey: .plaintext)
        }
    }
}

extension EncryptInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct EncryptInput: Swift.Equatable {
    /// Specifies the encryption algorithm that KMS will use to encrypt the plaintext message. The algorithm must be compatible with the KMS key that you specify. This parameter is required only for asymmetric KMS keys. The default value, SYMMETRIC_DEFAULT, is the algorithm used for symmetric encryption KMS keys. If you are using an asymmetric KMS key, we recommend RSAES_OAEP_SHA_256. The SM2PKE algorithm is only available in China Regions.
    public var encryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
    /// Specifies the encryption context that will be used to encrypt the data. An encryption context is valid only for [cryptographic operations](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations) with a symmetric encryption KMS key. The standard asymmetric encryption algorithms and HMAC algorithms that KMS uses do not support an encryption context. An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Key Management Service Developer Guide.
    public var encryptionContext: [Swift.String:Swift.String]?
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Identifies the KMS key to use in the encryption operation. The KMS key must have a KeyUsage of ENCRYPT_DECRYPT. To find the KeyUsage of a KMS key, use the [DescribeKey] operation. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    /// This member is required.
    public var keyId: Swift.String?
    /// Data to be encrypted.
    /// This member is required.
    public var plaintext: ClientRuntime.Data?

    public init (
        encryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec? = nil,
        encryptionContext: [Swift.String:Swift.String]? = nil,
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil,
        plaintext: ClientRuntime.Data? = nil
    )
    {
        self.encryptionAlgorithm = encryptionAlgorithm
        self.encryptionContext = encryptionContext
        self.grantTokens = grantTokens
        self.keyId = keyId
        self.plaintext = plaintext
    }
}

struct EncryptInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let plaintext: ClientRuntime.Data?
    let encryptionContext: [Swift.String:Swift.String]?
    let grantTokens: [Swift.String]?
    let encryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
}

extension EncryptInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionAlgorithm = "EncryptionAlgorithm"
        case encryptionContext = "EncryptionContext"
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case plaintext = "Plaintext"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let plaintextDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .plaintext)
        plaintext = plaintextDecoded
        let encryptionContextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .encryptionContext)
        var encryptionContextDecoded0: [Swift.String:Swift.String]? = nil
        if let encryptionContextContainer = encryptionContextContainer {
            encryptionContextDecoded0 = [Swift.String:Swift.String]()
            for (key0, encryptioncontextvalue0) in encryptionContextContainer {
                if let encryptioncontextvalue0 = encryptioncontextvalue0 {
                    encryptionContextDecoded0?[key0] = encryptioncontextvalue0
                }
            }
        }
        encryptionContext = encryptionContextDecoded0
        let grantTokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .grantTokens)
        var grantTokensDecoded0:[Swift.String]? = nil
        if let grantTokensContainer = grantTokensContainer {
            grantTokensDecoded0 = [Swift.String]()
            for string0 in grantTokensContainer {
                if let string0 = string0 {
                    grantTokensDecoded0?.append(string0)
                }
            }
        }
        grantTokens = grantTokensDecoded0
        let encryptionAlgorithmDecoded = try containerValues.decodeIfPresent(KMSClientTypes.EncryptionAlgorithmSpec.self, forKey: .encryptionAlgorithm)
        encryptionAlgorithm = encryptionAlgorithmDecoded
    }
}

extension EncryptOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EncryptOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "Disabled" : self = .disabledException(try DisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGrantToken" : self = .invalidGrantTokenException(try InvalidGrantTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeyUsage" : self = .invalidKeyUsageException(try InvalidKeyUsageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KeyUnavailable" : self = .keyUnavailableException(try KeyUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum EncryptOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case disabledException(DisabledException)
    case invalidGrantTokenException(InvalidGrantTokenException)
    case invalidKeyUsageException(InvalidKeyUsageException)
    case keyUnavailableException(KeyUnavailableException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EncryptOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: EncryptOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.ciphertextBlob = output.ciphertextBlob
            self.encryptionAlgorithm = output.encryptionAlgorithm
            self.keyId = output.keyId
        } else {
            self.ciphertextBlob = nil
            self.encryptionAlgorithm = nil
            self.keyId = nil
        }
    }
}

public struct EncryptOutputResponse: Swift.Equatable {
    /// The encrypted plaintext. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var ciphertextBlob: ClientRuntime.Data?
    /// The encryption algorithm that was used to encrypt the plaintext.
    public var encryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the KMS key that was used to encrypt the plaintext.
    public var keyId: Swift.String?

    public init (
        ciphertextBlob: ClientRuntime.Data? = nil,
        encryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec? = nil,
        keyId: Swift.String? = nil
    )
    {
        self.ciphertextBlob = ciphertextBlob
        self.encryptionAlgorithm = encryptionAlgorithm
        self.keyId = keyId
    }
}

struct EncryptOutputResponseBody: Swift.Equatable {
    let ciphertextBlob: ClientRuntime.Data?
    let keyId: Swift.String?
    let encryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
}

extension EncryptOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ciphertextBlob = "CiphertextBlob"
        case encryptionAlgorithm = "EncryptionAlgorithm"
        case keyId = "KeyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ciphertextBlobDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .ciphertextBlob)
        ciphertextBlob = ciphertextBlobDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let encryptionAlgorithmDecoded = try containerValues.decodeIfPresent(KMSClientTypes.EncryptionAlgorithmSpec.self, forKey: .encryptionAlgorithm)
        encryptionAlgorithm = encryptionAlgorithmDecoded
    }
}

extension KMSClientTypes {
    public enum EncryptionAlgorithmSpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rsaesOaepSha1
        case rsaesOaepSha256
        case sm2pke
        case symmetricDefault
        case sdkUnknown(Swift.String)

        public static var allCases: [EncryptionAlgorithmSpec] {
            return [
                .rsaesOaepSha1,
                .rsaesOaepSha256,
                .sm2pke,
                .symmetricDefault,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rsaesOaepSha1: return "RSAES_OAEP_SHA_1"
            case .rsaesOaepSha256: return "RSAES_OAEP_SHA_256"
            case .sm2pke: return "SM2PKE"
            case .symmetricDefault: return "SYMMETRIC_DEFAULT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EncryptionAlgorithmSpec(rawValue: rawValue) ?? EncryptionAlgorithmSpec.sdkUnknown(rawValue)
        }
    }
}

extension KMSClientTypes {
    public enum ExpirationModelType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case keyMaterialDoesNotExpire
        case keyMaterialExpires
        case sdkUnknown(Swift.String)

        public static var allCases: [ExpirationModelType] {
            return [
                .keyMaterialDoesNotExpire,
                .keyMaterialExpires,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .keyMaterialDoesNotExpire: return "KEY_MATERIAL_DOES_NOT_EXPIRE"
            case .keyMaterialExpires: return "KEY_MATERIAL_EXPIRES"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExpirationModelType(rawValue: rawValue) ?? ExpirationModelType.sdkUnknown(rawValue)
        }
    }
}

extension ExpiredImportTokenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ExpiredImportTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the specified import token is expired. Use [GetParametersForImport] to get a new import token and public key, use the new public key to encrypt the key material, and then try the request again.
public struct ExpiredImportTokenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ExpiredImportTokenExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ExpiredImportTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GenerateDataKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionContext = "EncryptionContext"
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case keySpec = "KeySpec"
        case numberOfBytes = "NumberOfBytes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionContext = encryptionContext {
            var encryptionContextContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .encryptionContext)
            for (dictKey0, encryptionContextType0) in encryptionContext {
                try encryptionContextContainer.encode(encryptionContextType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let grantTokens = grantTokens {
            var grantTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grantTokens)
            for granttokentype0 in grantTokens {
                try grantTokensContainer.encode(granttokentype0)
            }
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let keySpec = self.keySpec {
            try encodeContainer.encode(keySpec.rawValue, forKey: .keySpec)
        }
        if let numberOfBytes = self.numberOfBytes {
            try encodeContainer.encode(numberOfBytes, forKey: .numberOfBytes)
        }
    }
}

extension GenerateDataKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GenerateDataKeyInput: Swift.Equatable {
    /// Specifies the encryption context that will be used when encrypting the data key. An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Key Management Service Developer Guide.
    public var encryptionContext: [Swift.String:Swift.String]?
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Specifies the symmetric encryption KMS key that encrypts the data key. You cannot specify an asymmetric KMS key or a KMS key in a custom key store. To get the type and origin of your KMS key, use the [DescribeKey] operation. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    /// This member is required.
    public var keyId: Swift.String?
    /// Specifies the length of the data key. Use AES_128 to generate a 128-bit symmetric key, or AES_256 to generate a 256-bit symmetric key. You must specify either the KeySpec or the NumberOfBytes parameter (but not both) in every GenerateDataKey request.
    public var keySpec: KMSClientTypes.DataKeySpec?
    /// Specifies the length of the data key in bytes. For example, use the value 64 to generate a 512-bit data key (64 bytes is 512 bits). For 128-bit (16-byte) and 256-bit (32-byte) data keys, use the KeySpec parameter. You must specify either the KeySpec or the NumberOfBytes parameter (but not both) in every GenerateDataKey request.
    public var numberOfBytes: Swift.Int?

    public init (
        encryptionContext: [Swift.String:Swift.String]? = nil,
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil,
        keySpec: KMSClientTypes.DataKeySpec? = nil,
        numberOfBytes: Swift.Int? = nil
    )
    {
        self.encryptionContext = encryptionContext
        self.grantTokens = grantTokens
        self.keyId = keyId
        self.keySpec = keySpec
        self.numberOfBytes = numberOfBytes
    }
}

struct GenerateDataKeyInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let encryptionContext: [Swift.String:Swift.String]?
    let numberOfBytes: Swift.Int?
    let keySpec: KMSClientTypes.DataKeySpec?
    let grantTokens: [Swift.String]?
}

extension GenerateDataKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionContext = "EncryptionContext"
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case keySpec = "KeySpec"
        case numberOfBytes = "NumberOfBytes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let encryptionContextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .encryptionContext)
        var encryptionContextDecoded0: [Swift.String:Swift.String]? = nil
        if let encryptionContextContainer = encryptionContextContainer {
            encryptionContextDecoded0 = [Swift.String:Swift.String]()
            for (key0, encryptioncontextvalue0) in encryptionContextContainer {
                if let encryptioncontextvalue0 = encryptioncontextvalue0 {
                    encryptionContextDecoded0?[key0] = encryptioncontextvalue0
                }
            }
        }
        encryptionContext = encryptionContextDecoded0
        let numberOfBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfBytes)
        numberOfBytes = numberOfBytesDecoded
        let keySpecDecoded = try containerValues.decodeIfPresent(KMSClientTypes.DataKeySpec.self, forKey: .keySpec)
        keySpec = keySpecDecoded
        let grantTokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .grantTokens)
        var grantTokensDecoded0:[Swift.String]? = nil
        if let grantTokensContainer = grantTokensContainer {
            grantTokensDecoded0 = [Swift.String]()
            for string0 in grantTokensContainer {
                if let string0 = string0 {
                    grantTokensDecoded0?.append(string0)
                }
            }
        }
        grantTokens = grantTokensDecoded0
    }
}

extension GenerateDataKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GenerateDataKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "Disabled" : self = .disabledException(try DisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGrantToken" : self = .invalidGrantTokenException(try InvalidGrantTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeyUsage" : self = .invalidKeyUsageException(try InvalidKeyUsageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KeyUnavailable" : self = .keyUnavailableException(try KeyUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GenerateDataKeyOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case disabledException(DisabledException)
    case invalidGrantTokenException(InvalidGrantTokenException)
    case invalidKeyUsageException(InvalidKeyUsageException)
    case keyUnavailableException(KeyUnavailableException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GenerateDataKeyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GenerateDataKeyOutputResponse(ciphertextBlob: \(Swift.String(describing: ciphertextBlob)), keyId: \(Swift.String(describing: keyId)), plaintext: \"CONTENT_REDACTED\")"}
}

extension GenerateDataKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GenerateDataKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.ciphertextBlob = output.ciphertextBlob
            self.keyId = output.keyId
            self.plaintext = output.plaintext
        } else {
            self.ciphertextBlob = nil
            self.keyId = nil
            self.plaintext = nil
        }
    }
}

public struct GenerateDataKeyOutputResponse: Swift.Equatable {
    /// The encrypted copy of the data key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var ciphertextBlob: ClientRuntime.Data?
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the KMS key that encrypted the data key.
    public var keyId: Swift.String?
    /// The plaintext data key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded. Use this data key to encrypt your data outside of KMS. Then, remove it from memory as soon as possible.
    public var plaintext: ClientRuntime.Data?

    public init (
        ciphertextBlob: ClientRuntime.Data? = nil,
        keyId: Swift.String? = nil,
        plaintext: ClientRuntime.Data? = nil
    )
    {
        self.ciphertextBlob = ciphertextBlob
        self.keyId = keyId
        self.plaintext = plaintext
    }
}

struct GenerateDataKeyOutputResponseBody: Swift.Equatable {
    let ciphertextBlob: ClientRuntime.Data?
    let plaintext: ClientRuntime.Data?
    let keyId: Swift.String?
}

extension GenerateDataKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ciphertextBlob = "CiphertextBlob"
        case keyId = "KeyId"
        case plaintext = "Plaintext"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ciphertextBlobDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .ciphertextBlob)
        ciphertextBlob = ciphertextBlobDecoded
        let plaintextDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .plaintext)
        plaintext = plaintextDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
    }
}

extension GenerateDataKeyPairInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionContext = "EncryptionContext"
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case keyPairSpec = "KeyPairSpec"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionContext = encryptionContext {
            var encryptionContextContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .encryptionContext)
            for (dictKey0, encryptionContextType0) in encryptionContext {
                try encryptionContextContainer.encode(encryptionContextType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let grantTokens = grantTokens {
            var grantTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grantTokens)
            for granttokentype0 in grantTokens {
                try grantTokensContainer.encode(granttokentype0)
            }
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let keyPairSpec = self.keyPairSpec {
            try encodeContainer.encode(keyPairSpec.rawValue, forKey: .keyPairSpec)
        }
    }
}

extension GenerateDataKeyPairInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GenerateDataKeyPairInput: Swift.Equatable {
    /// Specifies the encryption context that will be used when encrypting the private key in the data key pair. An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Key Management Service Developer Guide.
    public var encryptionContext: [Swift.String:Swift.String]?
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Specifies the symmetric encryption KMS key that encrypts the private key in the data key pair. You cannot specify an asymmetric KMS key or a KMS key in a custom key store. To get the type and origin of your KMS key, use the [DescribeKey] operation. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    /// This member is required.
    public var keyId: Swift.String?
    /// Determines the type of data key pair that is generated. The KMS rule that restricts the use of asymmetric RSA and SM2 KMS keys to encrypt and decrypt or to sign and verify (but not both), and the rule that permits you to use ECC KMS keys only to sign and verify, are not effective on data key pairs, which are used outside of KMS. The SM2 key spec is only available in China Regions.
    /// This member is required.
    public var keyPairSpec: KMSClientTypes.DataKeyPairSpec?

    public init (
        encryptionContext: [Swift.String:Swift.String]? = nil,
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil,
        keyPairSpec: KMSClientTypes.DataKeyPairSpec? = nil
    )
    {
        self.encryptionContext = encryptionContext
        self.grantTokens = grantTokens
        self.keyId = keyId
        self.keyPairSpec = keyPairSpec
    }
}

struct GenerateDataKeyPairInputBody: Swift.Equatable {
    let encryptionContext: [Swift.String:Swift.String]?
    let keyId: Swift.String?
    let keyPairSpec: KMSClientTypes.DataKeyPairSpec?
    let grantTokens: [Swift.String]?
}

extension GenerateDataKeyPairInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionContext = "EncryptionContext"
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case keyPairSpec = "KeyPairSpec"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let encryptionContextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .encryptionContext)
        var encryptionContextDecoded0: [Swift.String:Swift.String]? = nil
        if let encryptionContextContainer = encryptionContextContainer {
            encryptionContextDecoded0 = [Swift.String:Swift.String]()
            for (key0, encryptioncontextvalue0) in encryptionContextContainer {
                if let encryptioncontextvalue0 = encryptioncontextvalue0 {
                    encryptionContextDecoded0?[key0] = encryptioncontextvalue0
                }
            }
        }
        encryptionContext = encryptionContextDecoded0
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let keyPairSpecDecoded = try containerValues.decodeIfPresent(KMSClientTypes.DataKeyPairSpec.self, forKey: .keyPairSpec)
        keyPairSpec = keyPairSpecDecoded
        let grantTokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .grantTokens)
        var grantTokensDecoded0:[Swift.String]? = nil
        if let grantTokensContainer = grantTokensContainer {
            grantTokensDecoded0 = [Swift.String]()
            for string0 in grantTokensContainer {
                if let string0 = string0 {
                    grantTokensDecoded0?.append(string0)
                }
            }
        }
        grantTokens = grantTokensDecoded0
    }
}

extension GenerateDataKeyPairOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GenerateDataKeyPairOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "Disabled" : self = .disabledException(try DisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGrantToken" : self = .invalidGrantTokenException(try InvalidGrantTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeyUsage" : self = .invalidKeyUsageException(try InvalidKeyUsageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KeyUnavailable" : self = .keyUnavailableException(try KeyUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GenerateDataKeyPairOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case disabledException(DisabledException)
    case invalidGrantTokenException(InvalidGrantTokenException)
    case invalidKeyUsageException(InvalidKeyUsageException)
    case keyUnavailableException(KeyUnavailableException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GenerateDataKeyPairOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GenerateDataKeyPairOutputResponse(keyId: \(Swift.String(describing: keyId)), keyPairSpec: \(Swift.String(describing: keyPairSpec)), privateKeyCiphertextBlob: \(Swift.String(describing: privateKeyCiphertextBlob)), publicKey: \(Swift.String(describing: publicKey)), privateKeyPlaintext: \"CONTENT_REDACTED\")"}
}

extension GenerateDataKeyPairOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GenerateDataKeyPairOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keyId = output.keyId
            self.keyPairSpec = output.keyPairSpec
            self.privateKeyCiphertextBlob = output.privateKeyCiphertextBlob
            self.privateKeyPlaintext = output.privateKeyPlaintext
            self.publicKey = output.publicKey
        } else {
            self.keyId = nil
            self.keyPairSpec = nil
            self.privateKeyCiphertextBlob = nil
            self.privateKeyPlaintext = nil
            self.publicKey = nil
        }
    }
}

public struct GenerateDataKeyPairOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the KMS key that encrypted the private key.
    public var keyId: Swift.String?
    /// The type of data key pair that was generated.
    public var keyPairSpec: KMSClientTypes.DataKeyPairSpec?
    /// The encrypted copy of the private key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var privateKeyCiphertextBlob: ClientRuntime.Data?
    /// The plaintext copy of the private key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var privateKeyPlaintext: ClientRuntime.Data?
    /// The public key (in plaintext). When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var publicKey: ClientRuntime.Data?

    public init (
        keyId: Swift.String? = nil,
        keyPairSpec: KMSClientTypes.DataKeyPairSpec? = nil,
        privateKeyCiphertextBlob: ClientRuntime.Data? = nil,
        privateKeyPlaintext: ClientRuntime.Data? = nil,
        publicKey: ClientRuntime.Data? = nil
    )
    {
        self.keyId = keyId
        self.keyPairSpec = keyPairSpec
        self.privateKeyCiphertextBlob = privateKeyCiphertextBlob
        self.privateKeyPlaintext = privateKeyPlaintext
        self.publicKey = publicKey
    }
}

struct GenerateDataKeyPairOutputResponseBody: Swift.Equatable {
    let privateKeyCiphertextBlob: ClientRuntime.Data?
    let privateKeyPlaintext: ClientRuntime.Data?
    let publicKey: ClientRuntime.Data?
    let keyId: Swift.String?
    let keyPairSpec: KMSClientTypes.DataKeyPairSpec?
}

extension GenerateDataKeyPairOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case keyPairSpec = "KeyPairSpec"
        case privateKeyCiphertextBlob = "PrivateKeyCiphertextBlob"
        case privateKeyPlaintext = "PrivateKeyPlaintext"
        case publicKey = "PublicKey"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let privateKeyCiphertextBlobDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .privateKeyCiphertextBlob)
        privateKeyCiphertextBlob = privateKeyCiphertextBlobDecoded
        let privateKeyPlaintextDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .privateKeyPlaintext)
        privateKeyPlaintext = privateKeyPlaintextDecoded
        let publicKeyDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .publicKey)
        publicKey = publicKeyDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let keyPairSpecDecoded = try containerValues.decodeIfPresent(KMSClientTypes.DataKeyPairSpec.self, forKey: .keyPairSpec)
        keyPairSpec = keyPairSpecDecoded
    }
}

extension GenerateDataKeyPairWithoutPlaintextInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionContext = "EncryptionContext"
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case keyPairSpec = "KeyPairSpec"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionContext = encryptionContext {
            var encryptionContextContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .encryptionContext)
            for (dictKey0, encryptionContextType0) in encryptionContext {
                try encryptionContextContainer.encode(encryptionContextType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let grantTokens = grantTokens {
            var grantTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grantTokens)
            for granttokentype0 in grantTokens {
                try grantTokensContainer.encode(granttokentype0)
            }
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let keyPairSpec = self.keyPairSpec {
            try encodeContainer.encode(keyPairSpec.rawValue, forKey: .keyPairSpec)
        }
    }
}

extension GenerateDataKeyPairWithoutPlaintextInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GenerateDataKeyPairWithoutPlaintextInput: Swift.Equatable {
    /// Specifies the encryption context that will be used when encrypting the private key in the data key pair. An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Key Management Service Developer Guide.
    public var encryptionContext: [Swift.String:Swift.String]?
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Specifies the symmetric encryption KMS key that encrypts the private key in the data key pair. You cannot specify an asymmetric KMS key or a KMS key in a custom key store. To get the type and origin of your KMS key, use the [DescribeKey] operation. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    /// This member is required.
    public var keyId: Swift.String?
    /// Determines the type of data key pair that is generated. The KMS rule that restricts the use of asymmetric RSA and SM2 KMS keys to encrypt and decrypt or to sign and verify (but not both), and the rule that permits you to use ECC KMS keys only to sign and verify, are not effective on data key pairs, which are used outside of KMS. The SM2 key spec is only available in China Regions.
    /// This member is required.
    public var keyPairSpec: KMSClientTypes.DataKeyPairSpec?

    public init (
        encryptionContext: [Swift.String:Swift.String]? = nil,
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil,
        keyPairSpec: KMSClientTypes.DataKeyPairSpec? = nil
    )
    {
        self.encryptionContext = encryptionContext
        self.grantTokens = grantTokens
        self.keyId = keyId
        self.keyPairSpec = keyPairSpec
    }
}

struct GenerateDataKeyPairWithoutPlaintextInputBody: Swift.Equatable {
    let encryptionContext: [Swift.String:Swift.String]?
    let keyId: Swift.String?
    let keyPairSpec: KMSClientTypes.DataKeyPairSpec?
    let grantTokens: [Swift.String]?
}

extension GenerateDataKeyPairWithoutPlaintextInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionContext = "EncryptionContext"
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case keyPairSpec = "KeyPairSpec"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let encryptionContextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .encryptionContext)
        var encryptionContextDecoded0: [Swift.String:Swift.String]? = nil
        if let encryptionContextContainer = encryptionContextContainer {
            encryptionContextDecoded0 = [Swift.String:Swift.String]()
            for (key0, encryptioncontextvalue0) in encryptionContextContainer {
                if let encryptioncontextvalue0 = encryptioncontextvalue0 {
                    encryptionContextDecoded0?[key0] = encryptioncontextvalue0
                }
            }
        }
        encryptionContext = encryptionContextDecoded0
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let keyPairSpecDecoded = try containerValues.decodeIfPresent(KMSClientTypes.DataKeyPairSpec.self, forKey: .keyPairSpec)
        keyPairSpec = keyPairSpecDecoded
        let grantTokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .grantTokens)
        var grantTokensDecoded0:[Swift.String]? = nil
        if let grantTokensContainer = grantTokensContainer {
            grantTokensDecoded0 = [Swift.String]()
            for string0 in grantTokensContainer {
                if let string0 = string0 {
                    grantTokensDecoded0?.append(string0)
                }
            }
        }
        grantTokens = grantTokensDecoded0
    }
}

extension GenerateDataKeyPairWithoutPlaintextOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GenerateDataKeyPairWithoutPlaintextOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "Disabled" : self = .disabledException(try DisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGrantToken" : self = .invalidGrantTokenException(try InvalidGrantTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeyUsage" : self = .invalidKeyUsageException(try InvalidKeyUsageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KeyUnavailable" : self = .keyUnavailableException(try KeyUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GenerateDataKeyPairWithoutPlaintextOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case disabledException(DisabledException)
    case invalidGrantTokenException(InvalidGrantTokenException)
    case invalidKeyUsageException(InvalidKeyUsageException)
    case keyUnavailableException(KeyUnavailableException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GenerateDataKeyPairWithoutPlaintextOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GenerateDataKeyPairWithoutPlaintextOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keyId = output.keyId
            self.keyPairSpec = output.keyPairSpec
            self.privateKeyCiphertextBlob = output.privateKeyCiphertextBlob
            self.publicKey = output.publicKey
        } else {
            self.keyId = nil
            self.keyPairSpec = nil
            self.privateKeyCiphertextBlob = nil
            self.publicKey = nil
        }
    }
}

public struct GenerateDataKeyPairWithoutPlaintextOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the KMS key that encrypted the private key.
    public var keyId: Swift.String?
    /// The type of data key pair that was generated.
    public var keyPairSpec: KMSClientTypes.DataKeyPairSpec?
    /// The encrypted copy of the private key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var privateKeyCiphertextBlob: ClientRuntime.Data?
    /// The public key (in plaintext). When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var publicKey: ClientRuntime.Data?

    public init (
        keyId: Swift.String? = nil,
        keyPairSpec: KMSClientTypes.DataKeyPairSpec? = nil,
        privateKeyCiphertextBlob: ClientRuntime.Data? = nil,
        publicKey: ClientRuntime.Data? = nil
    )
    {
        self.keyId = keyId
        self.keyPairSpec = keyPairSpec
        self.privateKeyCiphertextBlob = privateKeyCiphertextBlob
        self.publicKey = publicKey
    }
}

struct GenerateDataKeyPairWithoutPlaintextOutputResponseBody: Swift.Equatable {
    let privateKeyCiphertextBlob: ClientRuntime.Data?
    let publicKey: ClientRuntime.Data?
    let keyId: Swift.String?
    let keyPairSpec: KMSClientTypes.DataKeyPairSpec?
}

extension GenerateDataKeyPairWithoutPlaintextOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case keyPairSpec = "KeyPairSpec"
        case privateKeyCiphertextBlob = "PrivateKeyCiphertextBlob"
        case publicKey = "PublicKey"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let privateKeyCiphertextBlobDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .privateKeyCiphertextBlob)
        privateKeyCiphertextBlob = privateKeyCiphertextBlobDecoded
        let publicKeyDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .publicKey)
        publicKey = publicKeyDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let keyPairSpecDecoded = try containerValues.decodeIfPresent(KMSClientTypes.DataKeyPairSpec.self, forKey: .keyPairSpec)
        keyPairSpec = keyPairSpecDecoded
    }
}

extension GenerateDataKeyWithoutPlaintextInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionContext = "EncryptionContext"
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case keySpec = "KeySpec"
        case numberOfBytes = "NumberOfBytes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionContext = encryptionContext {
            var encryptionContextContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .encryptionContext)
            for (dictKey0, encryptionContextType0) in encryptionContext {
                try encryptionContextContainer.encode(encryptionContextType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let grantTokens = grantTokens {
            var grantTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grantTokens)
            for granttokentype0 in grantTokens {
                try grantTokensContainer.encode(granttokentype0)
            }
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let keySpec = self.keySpec {
            try encodeContainer.encode(keySpec.rawValue, forKey: .keySpec)
        }
        if let numberOfBytes = self.numberOfBytes {
            try encodeContainer.encode(numberOfBytes, forKey: .numberOfBytes)
        }
    }
}

extension GenerateDataKeyWithoutPlaintextInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GenerateDataKeyWithoutPlaintextInput: Swift.Equatable {
    /// Specifies the encryption context that will be used when encrypting the data key. An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Key Management Service Developer Guide.
    public var encryptionContext: [Swift.String:Swift.String]?
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Specifies the symmetric encryption KMS key that encrypts the data key. You cannot specify an asymmetric KMS key or a KMS key in a custom key store. To get the type and origin of your KMS key, use the [DescribeKey] operation. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    /// This member is required.
    public var keyId: Swift.String?
    /// The length of the data key. Use AES_128 to generate a 128-bit symmetric key, or AES_256 to generate a 256-bit symmetric key.
    public var keySpec: KMSClientTypes.DataKeySpec?
    /// The length of the data key in bytes. For example, use the value 64 to generate a 512-bit data key (64 bytes is 512 bits). For common key lengths (128-bit and 256-bit symmetric keys), we recommend that you use the KeySpec field instead of this one.
    public var numberOfBytes: Swift.Int?

    public init (
        encryptionContext: [Swift.String:Swift.String]? = nil,
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil,
        keySpec: KMSClientTypes.DataKeySpec? = nil,
        numberOfBytes: Swift.Int? = nil
    )
    {
        self.encryptionContext = encryptionContext
        self.grantTokens = grantTokens
        self.keyId = keyId
        self.keySpec = keySpec
        self.numberOfBytes = numberOfBytes
    }
}

struct GenerateDataKeyWithoutPlaintextInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let encryptionContext: [Swift.String:Swift.String]?
    let keySpec: KMSClientTypes.DataKeySpec?
    let numberOfBytes: Swift.Int?
    let grantTokens: [Swift.String]?
}

extension GenerateDataKeyWithoutPlaintextInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionContext = "EncryptionContext"
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case keySpec = "KeySpec"
        case numberOfBytes = "NumberOfBytes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let encryptionContextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .encryptionContext)
        var encryptionContextDecoded0: [Swift.String:Swift.String]? = nil
        if let encryptionContextContainer = encryptionContextContainer {
            encryptionContextDecoded0 = [Swift.String:Swift.String]()
            for (key0, encryptioncontextvalue0) in encryptionContextContainer {
                if let encryptioncontextvalue0 = encryptioncontextvalue0 {
                    encryptionContextDecoded0?[key0] = encryptioncontextvalue0
                }
            }
        }
        encryptionContext = encryptionContextDecoded0
        let keySpecDecoded = try containerValues.decodeIfPresent(KMSClientTypes.DataKeySpec.self, forKey: .keySpec)
        keySpec = keySpecDecoded
        let numberOfBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfBytes)
        numberOfBytes = numberOfBytesDecoded
        let grantTokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .grantTokens)
        var grantTokensDecoded0:[Swift.String]? = nil
        if let grantTokensContainer = grantTokensContainer {
            grantTokensDecoded0 = [Swift.String]()
            for string0 in grantTokensContainer {
                if let string0 = string0 {
                    grantTokensDecoded0?.append(string0)
                }
            }
        }
        grantTokens = grantTokensDecoded0
    }
}

extension GenerateDataKeyWithoutPlaintextOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GenerateDataKeyWithoutPlaintextOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "Disabled" : self = .disabledException(try DisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGrantToken" : self = .invalidGrantTokenException(try InvalidGrantTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeyUsage" : self = .invalidKeyUsageException(try InvalidKeyUsageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KeyUnavailable" : self = .keyUnavailableException(try KeyUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GenerateDataKeyWithoutPlaintextOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case disabledException(DisabledException)
    case invalidGrantTokenException(InvalidGrantTokenException)
    case invalidKeyUsageException(InvalidKeyUsageException)
    case keyUnavailableException(KeyUnavailableException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GenerateDataKeyWithoutPlaintextOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GenerateDataKeyWithoutPlaintextOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.ciphertextBlob = output.ciphertextBlob
            self.keyId = output.keyId
        } else {
            self.ciphertextBlob = nil
            self.keyId = nil
        }
    }
}

public struct GenerateDataKeyWithoutPlaintextOutputResponse: Swift.Equatable {
    /// The encrypted data key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var ciphertextBlob: ClientRuntime.Data?
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the KMS key that encrypted the data key.
    public var keyId: Swift.String?

    public init (
        ciphertextBlob: ClientRuntime.Data? = nil,
        keyId: Swift.String? = nil
    )
    {
        self.ciphertextBlob = ciphertextBlob
        self.keyId = keyId
    }
}

struct GenerateDataKeyWithoutPlaintextOutputResponseBody: Swift.Equatable {
    let ciphertextBlob: ClientRuntime.Data?
    let keyId: Swift.String?
}

extension GenerateDataKeyWithoutPlaintextOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ciphertextBlob = "CiphertextBlob"
        case keyId = "KeyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ciphertextBlobDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .ciphertextBlob)
        ciphertextBlob = ciphertextBlobDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
    }
}

extension GenerateMacInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GenerateMacInput(grantTokens: \(Swift.String(describing: grantTokens)), keyId: \(Swift.String(describing: keyId)), macAlgorithm: \(Swift.String(describing: macAlgorithm)), message: \"CONTENT_REDACTED\")"}
}

extension GenerateMacInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case macAlgorithm = "MacAlgorithm"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let grantTokens = grantTokens {
            var grantTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grantTokens)
            for granttokentype0 in grantTokens {
                try grantTokensContainer.encode(granttokentype0)
            }
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let macAlgorithm = self.macAlgorithm {
            try encodeContainer.encode(macAlgorithm.rawValue, forKey: .macAlgorithm)
        }
        if let message = self.message {
            try encodeContainer.encode(message.base64EncodedString(), forKey: .message)
        }
    }
}

extension GenerateMacInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GenerateMacInput: Swift.Equatable {
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// The HMAC KMS key to use in the operation. The MAC algorithm computes the HMAC for the message and the key as described in [RFC 2104](https://datatracker.ietf.org/doc/html/rfc2104). To identify an HMAC KMS key, use the [DescribeKey] operation and see the KeySpec field in the response.
    /// This member is required.
    public var keyId: Swift.String?
    /// The MAC algorithm used in the operation. The algorithm must be compatible with the HMAC KMS key that you specify. To find the MAC algorithms that your HMAC KMS key supports, use the [DescribeKey] operation and see the MacAlgorithms field in the DescribeKey response.
    /// This member is required.
    public var macAlgorithm: KMSClientTypes.MacAlgorithmSpec?
    /// The message to be hashed. Specify a message of up to 4,096 bytes. GenerateMac and [VerifyMac] do not provide special handling for message digests. If you generate an HMAC for a hash digest of a message, you must verify the HMAC of the same hash digest.
    /// This member is required.
    public var message: ClientRuntime.Data?

    public init (
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil,
        macAlgorithm: KMSClientTypes.MacAlgorithmSpec? = nil,
        message: ClientRuntime.Data? = nil
    )
    {
        self.grantTokens = grantTokens
        self.keyId = keyId
        self.macAlgorithm = macAlgorithm
        self.message = message
    }
}

struct GenerateMacInputBody: Swift.Equatable {
    let message: ClientRuntime.Data?
    let keyId: Swift.String?
    let macAlgorithm: KMSClientTypes.MacAlgorithmSpec?
    let grantTokens: [Swift.String]?
}

extension GenerateMacInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case macAlgorithm = "MacAlgorithm"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .message)
        message = messageDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let macAlgorithmDecoded = try containerValues.decodeIfPresent(KMSClientTypes.MacAlgorithmSpec.self, forKey: .macAlgorithm)
        macAlgorithm = macAlgorithmDecoded
        let grantTokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .grantTokens)
        var grantTokensDecoded0:[Swift.String]? = nil
        if let grantTokensContainer = grantTokensContainer {
            grantTokensDecoded0 = [Swift.String]()
            for string0 in grantTokensContainer {
                if let string0 = string0 {
                    grantTokensDecoded0?.append(string0)
                }
            }
        }
        grantTokens = grantTokensDecoded0
    }
}

extension GenerateMacOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GenerateMacOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "Disabled" : self = .disabledException(try DisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGrantToken" : self = .invalidGrantTokenException(try InvalidGrantTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeyUsage" : self = .invalidKeyUsageException(try InvalidKeyUsageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KeyUnavailable" : self = .keyUnavailableException(try KeyUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GenerateMacOutputError: Swift.Error, Swift.Equatable {
    case disabledException(DisabledException)
    case invalidGrantTokenException(InvalidGrantTokenException)
    case invalidKeyUsageException(InvalidKeyUsageException)
    case keyUnavailableException(KeyUnavailableException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GenerateMacOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GenerateMacOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keyId = output.keyId
            self.mac = output.mac
            self.macAlgorithm = output.macAlgorithm
        } else {
            self.keyId = nil
            self.mac = nil
            self.macAlgorithm = nil
        }
    }
}

public struct GenerateMacOutputResponse: Swift.Equatable {
    /// The HMAC KMS key used in the operation.
    public var keyId: Swift.String?
    /// The hash-based message authentication code (HMAC) that was generated for the specified message, HMAC KMS key, and MAC algorithm. This is the standard, raw HMAC defined in [RFC 2104](https://datatracker.ietf.org/doc/html/rfc2104).
    public var mac: ClientRuntime.Data?
    /// The MAC algorithm that was used to generate the HMAC.
    public var macAlgorithm: KMSClientTypes.MacAlgorithmSpec?

    public init (
        keyId: Swift.String? = nil,
        mac: ClientRuntime.Data? = nil,
        macAlgorithm: KMSClientTypes.MacAlgorithmSpec? = nil
    )
    {
        self.keyId = keyId
        self.mac = mac
        self.macAlgorithm = macAlgorithm
    }
}

struct GenerateMacOutputResponseBody: Swift.Equatable {
    let mac: ClientRuntime.Data?
    let macAlgorithm: KMSClientTypes.MacAlgorithmSpec?
    let keyId: Swift.String?
}

extension GenerateMacOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case mac = "Mac"
        case macAlgorithm = "MacAlgorithm"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let macDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .mac)
        mac = macDecoded
        let macAlgorithmDecoded = try containerValues.decodeIfPresent(KMSClientTypes.MacAlgorithmSpec.self, forKey: .macAlgorithm)
        macAlgorithm = macAlgorithmDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
    }
}

extension GenerateRandomInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customKeyStoreId = "CustomKeyStoreId"
        case numberOfBytes = "NumberOfBytes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customKeyStoreId = self.customKeyStoreId {
            try encodeContainer.encode(customKeyStoreId, forKey: .customKeyStoreId)
        }
        if let numberOfBytes = self.numberOfBytes {
            try encodeContainer.encode(numberOfBytes, forKey: .numberOfBytes)
        }
    }
}

extension GenerateRandomInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GenerateRandomInput: Swift.Equatable {
    /// Generates the random byte string in the CloudHSM cluster that is associated with the specified CloudHSM key store. To find the ID of a custom key store, use the [DescribeCustomKeyStores] operation. External key store IDs are not valid for this parameter. If you specify the ID of an external key store, GenerateRandom throws an UnsupportedOperationException.
    public var customKeyStoreId: Swift.String?
    /// The length of the random byte string. This parameter is required.
    public var numberOfBytes: Swift.Int?

    public init (
        customKeyStoreId: Swift.String? = nil,
        numberOfBytes: Swift.Int? = nil
    )
    {
        self.customKeyStoreId = customKeyStoreId
        self.numberOfBytes = numberOfBytes
    }
}

struct GenerateRandomInputBody: Swift.Equatable {
    let numberOfBytes: Swift.Int?
    let customKeyStoreId: Swift.String?
}

extension GenerateRandomInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customKeyStoreId = "CustomKeyStoreId"
        case numberOfBytes = "NumberOfBytes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numberOfBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfBytes)
        numberOfBytes = numberOfBytesDecoded
        let customKeyStoreIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customKeyStoreId)
        customKeyStoreId = customKeyStoreIdDecoded
    }
}

extension GenerateRandomOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GenerateRandomOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CustomKeyStoreInvalidStateException" : self = .customKeyStoreInvalidStateException(try CustomKeyStoreInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CustomKeyStoreNotFoundException" : self = .customKeyStoreNotFoundException(try CustomKeyStoreNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GenerateRandomOutputError: Swift.Error, Swift.Equatable {
    case customKeyStoreInvalidStateException(CustomKeyStoreInvalidStateException)
    case customKeyStoreNotFoundException(CustomKeyStoreNotFoundException)
    case dependencyTimeoutException(DependencyTimeoutException)
    case kMSInternalException(KMSInternalException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GenerateRandomOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GenerateRandomOutputResponse(plaintext: \"CONTENT_REDACTED\")"}
}

extension GenerateRandomOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GenerateRandomOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.plaintext = output.plaintext
        } else {
            self.plaintext = nil
        }
    }
}

public struct GenerateRandomOutputResponse: Swift.Equatable {
    /// The random byte string. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var plaintext: ClientRuntime.Data?

    public init (
        plaintext: ClientRuntime.Data? = nil
    )
    {
        self.plaintext = plaintext
    }
}

struct GenerateRandomOutputResponseBody: Swift.Equatable {
    let plaintext: ClientRuntime.Data?
}

extension GenerateRandomOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case plaintext = "Plaintext"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let plaintextDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .plaintext)
        plaintext = plaintextDecoded
    }
}

extension GetKeyPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case policyName = "PolicyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
    }
}

extension GetKeyPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetKeyPolicyInput: Swift.Equatable {
    /// Gets the key policy for the specified KMS key. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// Specifies the name of the key policy. The only valid name is default. To get the names of key policies, use [ListKeyPolicies].
    /// This member is required.
    public var policyName: Swift.String?

    public init (
        keyId: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.keyId = keyId
        self.policyName = policyName
    }
}

struct GetKeyPolicyInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let policyName: Swift.String?
}

extension GetKeyPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case policyName = "PolicyName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
    }
}

extension GetKeyPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetKeyPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetKeyPolicyOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case invalidArnException(InvalidArnException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetKeyPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetKeyPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policy = output.policy
        } else {
            self.policy = nil
        }
    }
}

public struct GetKeyPolicyOutputResponse: Swift.Equatable {
    /// A key policy document in JSON format.
    public var policy: Swift.String?

    public init (
        policy: Swift.String? = nil
    )
    {
        self.policy = policy
    }
}

struct GetKeyPolicyOutputResponseBody: Swift.Equatable {
    let policy: Swift.String?
}

extension GetKeyPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension GetKeyRotationStatusInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
    }
}

extension GetKeyRotationStatusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetKeyRotationStatusInput: Swift.Equatable {
    /// Gets the rotation status for the specified KMS key. Specify the key ID or key ARN of the KMS key. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?

    public init (
        keyId: Swift.String? = nil
    )
    {
        self.keyId = keyId
    }
}

struct GetKeyRotationStatusInputBody: Swift.Equatable {
    let keyId: Swift.String?
}

extension GetKeyRotationStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
    }
}

extension GetKeyRotationStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetKeyRotationStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetKeyRotationStatusOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case invalidArnException(InvalidArnException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetKeyRotationStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetKeyRotationStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keyRotationEnabled = output.keyRotationEnabled
        } else {
            self.keyRotationEnabled = false
        }
    }
}

public struct GetKeyRotationStatusOutputResponse: Swift.Equatable {
    /// A Boolean value that specifies whether key rotation is enabled.
    public var keyRotationEnabled: Swift.Bool

    public init (
        keyRotationEnabled: Swift.Bool = false
    )
    {
        self.keyRotationEnabled = keyRotationEnabled
    }
}

struct GetKeyRotationStatusOutputResponseBody: Swift.Equatable {
    let keyRotationEnabled: Swift.Bool
}

extension GetKeyRotationStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyRotationEnabled = "KeyRotationEnabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyRotationEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .keyRotationEnabled) ?? false
        keyRotationEnabled = keyRotationEnabledDecoded
    }
}

extension GetParametersForImportInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case wrappingAlgorithm = "WrappingAlgorithm"
        case wrappingKeySpec = "WrappingKeySpec"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let wrappingAlgorithm = self.wrappingAlgorithm {
            try encodeContainer.encode(wrappingAlgorithm.rawValue, forKey: .wrappingAlgorithm)
        }
        if let wrappingKeySpec = self.wrappingKeySpec {
            try encodeContainer.encode(wrappingKeySpec.rawValue, forKey: .wrappingKeySpec)
        }
    }
}

extension GetParametersForImportInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetParametersForImportInput: Swift.Equatable {
    /// The identifier of the symmetric encryption KMS key into which you will import key material. The Origin of the KMS key must be EXTERNAL. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// The algorithm you will use to encrypt the key material before importing it with [ImportKeyMaterial]. For more information, see [Encrypt the Key Material](https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys-encrypt-key-material.html) in the Key Management Service Developer Guide.
    /// This member is required.
    public var wrappingAlgorithm: KMSClientTypes.AlgorithmSpec?
    /// The type of wrapping key (public key) to return in the response. Only 2048-bit RSA public keys are supported.
    /// This member is required.
    public var wrappingKeySpec: KMSClientTypes.WrappingKeySpec?

    public init (
        keyId: Swift.String? = nil,
        wrappingAlgorithm: KMSClientTypes.AlgorithmSpec? = nil,
        wrappingKeySpec: KMSClientTypes.WrappingKeySpec? = nil
    )
    {
        self.keyId = keyId
        self.wrappingAlgorithm = wrappingAlgorithm
        self.wrappingKeySpec = wrappingKeySpec
    }
}

struct GetParametersForImportInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let wrappingAlgorithm: KMSClientTypes.AlgorithmSpec?
    let wrappingKeySpec: KMSClientTypes.WrappingKeySpec?
}

extension GetParametersForImportInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case wrappingAlgorithm = "WrappingAlgorithm"
        case wrappingKeySpec = "WrappingKeySpec"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let wrappingAlgorithmDecoded = try containerValues.decodeIfPresent(KMSClientTypes.AlgorithmSpec.self, forKey: .wrappingAlgorithm)
        wrappingAlgorithm = wrappingAlgorithmDecoded
        let wrappingKeySpecDecoded = try containerValues.decodeIfPresent(KMSClientTypes.WrappingKeySpec.self, forKey: .wrappingKeySpec)
        wrappingKeySpec = wrappingKeySpecDecoded
    }
}

extension GetParametersForImportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetParametersForImportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetParametersForImportOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case invalidArnException(InvalidArnException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetParametersForImportOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetParametersForImportOutputResponse(importToken: \(Swift.String(describing: importToken)), keyId: \(Swift.String(describing: keyId)), parametersValidTo: \(Swift.String(describing: parametersValidTo)), publicKey: \"CONTENT_REDACTED\")"}
}

extension GetParametersForImportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetParametersForImportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.importToken = output.importToken
            self.keyId = output.keyId
            self.parametersValidTo = output.parametersValidTo
            self.publicKey = output.publicKey
        } else {
            self.importToken = nil
            self.keyId = nil
            self.parametersValidTo = nil
            self.publicKey = nil
        }
    }
}

public struct GetParametersForImportOutputResponse: Swift.Equatable {
    /// The import token to send in a subsequent [ImportKeyMaterial] request.
    public var importToken: ClientRuntime.Data?
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the KMS key to use in a subsequent [ImportKeyMaterial] request. This is the same KMS key specified in the GetParametersForImport request.
    public var keyId: Swift.String?
    /// The time at which the import token and public key are no longer valid. After this time, you cannot use them to make an [ImportKeyMaterial] request and you must send another GetParametersForImport request to get new ones.
    public var parametersValidTo: ClientRuntime.Date?
    /// The public key to use to encrypt the key material before importing it with [ImportKeyMaterial].
    public var publicKey: ClientRuntime.Data?

    public init (
        importToken: ClientRuntime.Data? = nil,
        keyId: Swift.String? = nil,
        parametersValidTo: ClientRuntime.Date? = nil,
        publicKey: ClientRuntime.Data? = nil
    )
    {
        self.importToken = importToken
        self.keyId = keyId
        self.parametersValidTo = parametersValidTo
        self.publicKey = publicKey
    }
}

struct GetParametersForImportOutputResponseBody: Swift.Equatable {
    let keyId: Swift.String?
    let importToken: ClientRuntime.Data?
    let publicKey: ClientRuntime.Data?
    let parametersValidTo: ClientRuntime.Date?
}

extension GetParametersForImportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importToken = "ImportToken"
        case keyId = "KeyId"
        case parametersValidTo = "ParametersValidTo"
        case publicKey = "PublicKey"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let importTokenDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .importToken)
        importToken = importTokenDecoded
        let publicKeyDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .publicKey)
        publicKey = publicKeyDecoded
        let parametersValidToDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .parametersValidTo)
        parametersValidTo = parametersValidToDecoded
    }
}

extension GetPublicKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let grantTokens = grantTokens {
            var grantTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grantTokens)
            for granttokentype0 in grantTokens {
                try grantTokensContainer.encode(granttokentype0)
            }
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
    }
}

extension GetPublicKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetPublicKeyInput: Swift.Equatable {
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Identifies the asymmetric KMS key that includes the public key. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    /// This member is required.
    public var keyId: Swift.String?

    public init (
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil
    )
    {
        self.grantTokens = grantTokens
        self.keyId = keyId
    }
}

struct GetPublicKeyInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let grantTokens: [Swift.String]?
}

extension GetPublicKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let grantTokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .grantTokens)
        var grantTokensDecoded0:[Swift.String]? = nil
        if let grantTokensContainer = grantTokensContainer {
            grantTokensDecoded0 = [Swift.String]()
            for string0 in grantTokensContainer {
                if let string0 = string0 {
                    grantTokensDecoded0?.append(string0)
                }
            }
        }
        grantTokens = grantTokensDecoded0
    }
}

extension GetPublicKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetPublicKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "Disabled" : self = .disabledException(try DisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGrantToken" : self = .invalidGrantTokenException(try InvalidGrantTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeyUsage" : self = .invalidKeyUsageException(try InvalidKeyUsageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KeyUnavailable" : self = .keyUnavailableException(try KeyUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetPublicKeyOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case disabledException(DisabledException)
    case invalidArnException(InvalidArnException)
    case invalidGrantTokenException(InvalidGrantTokenException)
    case invalidKeyUsageException(InvalidKeyUsageException)
    case keyUnavailableException(KeyUnavailableException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPublicKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetPublicKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.customerMasterKeySpec = output.customerMasterKeySpec
            self.encryptionAlgorithms = output.encryptionAlgorithms
            self.keyId = output.keyId
            self.keySpec = output.keySpec
            self.keyUsage = output.keyUsage
            self.publicKey = output.publicKey
            self.signingAlgorithms = output.signingAlgorithms
        } else {
            self.customerMasterKeySpec = nil
            self.encryptionAlgorithms = nil
            self.keyId = nil
            self.keySpec = nil
            self.keyUsage = nil
            self.publicKey = nil
            self.signingAlgorithms = nil
        }
    }
}

public struct GetPublicKeyOutputResponse: Swift.Equatable {
    /// Instead, use the KeySpec field in the GetPublicKey response. The KeySpec and CustomerMasterKeySpec fields have the same value. We recommend that you use the KeySpec field in your code. However, to avoid breaking changes, KMS supports both fields.
    @available(*, deprecated, message: "This field has been deprecated. Instead, use the KeySpec field.")
    public var customerMasterKeySpec: KMSClientTypes.CustomerMasterKeySpec?
    /// The encryption algorithms that KMS supports for this key. This information is critical. If a public key encrypts data outside of KMS by using an unsupported encryption algorithm, the ciphertext cannot be decrypted. This field appears in the response only when the KeyUsage of the public key is ENCRYPT_DECRYPT.
    public var encryptionAlgorithms: [KMSClientTypes.EncryptionAlgorithmSpec]?
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the asymmetric KMS key from which the public key was downloaded.
    public var keyId: Swift.String?
    /// The type of the of the public key that was downloaded.
    public var keySpec: KMSClientTypes.KeySpec?
    /// The permitted use of the public key. Valid values are ENCRYPT_DECRYPT or SIGN_VERIFY. This information is critical. If a public key with SIGN_VERIFY key usage encrypts data outside of KMS, the ciphertext cannot be decrypted.
    public var keyUsage: KMSClientTypes.KeyUsageType?
    /// The exported public key. The value is a DER-encoded X.509 public key, also known as SubjectPublicKeyInfo (SPKI), as defined in [RFC 5280](https://tools.ietf.org/html/rfc5280). When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var publicKey: ClientRuntime.Data?
    /// The signing algorithms that KMS supports for this key. This field appears in the response only when the KeyUsage of the public key is SIGN_VERIFY.
    public var signingAlgorithms: [KMSClientTypes.SigningAlgorithmSpec]?

    public init (
        customerMasterKeySpec: KMSClientTypes.CustomerMasterKeySpec? = nil,
        encryptionAlgorithms: [KMSClientTypes.EncryptionAlgorithmSpec]? = nil,
        keyId: Swift.String? = nil,
        keySpec: KMSClientTypes.KeySpec? = nil,
        keyUsage: KMSClientTypes.KeyUsageType? = nil,
        publicKey: ClientRuntime.Data? = nil,
        signingAlgorithms: [KMSClientTypes.SigningAlgorithmSpec]? = nil
    )
    {
        self.customerMasterKeySpec = customerMasterKeySpec
        self.encryptionAlgorithms = encryptionAlgorithms
        self.keyId = keyId
        self.keySpec = keySpec
        self.keyUsage = keyUsage
        self.publicKey = publicKey
        self.signingAlgorithms = signingAlgorithms
    }
}

struct GetPublicKeyOutputResponseBody: Swift.Equatable {
    let keyId: Swift.String?
    let publicKey: ClientRuntime.Data?
    let customerMasterKeySpec: KMSClientTypes.CustomerMasterKeySpec?
    let keySpec: KMSClientTypes.KeySpec?
    let keyUsage: KMSClientTypes.KeyUsageType?
    let encryptionAlgorithms: [KMSClientTypes.EncryptionAlgorithmSpec]?
    let signingAlgorithms: [KMSClientTypes.SigningAlgorithmSpec]?
}

extension GetPublicKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customerMasterKeySpec = "CustomerMasterKeySpec"
        case encryptionAlgorithms = "EncryptionAlgorithms"
        case keyId = "KeyId"
        case keySpec = "KeySpec"
        case keyUsage = "KeyUsage"
        case publicKey = "PublicKey"
        case signingAlgorithms = "SigningAlgorithms"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let publicKeyDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .publicKey)
        publicKey = publicKeyDecoded
        let customerMasterKeySpecDecoded = try containerValues.decodeIfPresent(KMSClientTypes.CustomerMasterKeySpec.self, forKey: .customerMasterKeySpec)
        customerMasterKeySpec = customerMasterKeySpecDecoded
        let keySpecDecoded = try containerValues.decodeIfPresent(KMSClientTypes.KeySpec.self, forKey: .keySpec)
        keySpec = keySpecDecoded
        let keyUsageDecoded = try containerValues.decodeIfPresent(KMSClientTypes.KeyUsageType.self, forKey: .keyUsage)
        keyUsage = keyUsageDecoded
        let encryptionAlgorithmsContainer = try containerValues.decodeIfPresent([KMSClientTypes.EncryptionAlgorithmSpec?].self, forKey: .encryptionAlgorithms)
        var encryptionAlgorithmsDecoded0:[KMSClientTypes.EncryptionAlgorithmSpec]? = nil
        if let encryptionAlgorithmsContainer = encryptionAlgorithmsContainer {
            encryptionAlgorithmsDecoded0 = [KMSClientTypes.EncryptionAlgorithmSpec]()
            for enum0 in encryptionAlgorithmsContainer {
                if let enum0 = enum0 {
                    encryptionAlgorithmsDecoded0?.append(enum0)
                }
            }
        }
        encryptionAlgorithms = encryptionAlgorithmsDecoded0
        let signingAlgorithmsContainer = try containerValues.decodeIfPresent([KMSClientTypes.SigningAlgorithmSpec?].self, forKey: .signingAlgorithms)
        var signingAlgorithmsDecoded0:[KMSClientTypes.SigningAlgorithmSpec]? = nil
        if let signingAlgorithmsContainer = signingAlgorithmsContainer {
            signingAlgorithmsDecoded0 = [KMSClientTypes.SigningAlgorithmSpec]()
            for enum0 in signingAlgorithmsContainer {
                if let enum0 = enum0 {
                    signingAlgorithmsDecoded0?.append(enum0)
                }
            }
        }
        signingAlgorithms = signingAlgorithmsDecoded0
    }
}

extension KMSClientTypes.GrantConstraints: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionContextEquals = "EncryptionContextEquals"
        case encryptionContextSubset = "EncryptionContextSubset"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionContextEquals = encryptionContextEquals {
            var encryptionContextEqualsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .encryptionContextEquals)
            for (dictKey0, encryptionContextType0) in encryptionContextEquals {
                try encryptionContextEqualsContainer.encode(encryptionContextType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let encryptionContextSubset = encryptionContextSubset {
            var encryptionContextSubsetContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .encryptionContextSubset)
            for (dictKey0, encryptionContextType0) in encryptionContextSubset {
                try encryptionContextSubsetContainer.encode(encryptionContextType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let encryptionContextSubsetContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .encryptionContextSubset)
        var encryptionContextSubsetDecoded0: [Swift.String:Swift.String]? = nil
        if let encryptionContextSubsetContainer = encryptionContextSubsetContainer {
            encryptionContextSubsetDecoded0 = [Swift.String:Swift.String]()
            for (key0, encryptioncontextvalue0) in encryptionContextSubsetContainer {
                if let encryptioncontextvalue0 = encryptioncontextvalue0 {
                    encryptionContextSubsetDecoded0?[key0] = encryptioncontextvalue0
                }
            }
        }
        encryptionContextSubset = encryptionContextSubsetDecoded0
        let encryptionContextEqualsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .encryptionContextEquals)
        var encryptionContextEqualsDecoded0: [Swift.String:Swift.String]? = nil
        if let encryptionContextEqualsContainer = encryptionContextEqualsContainer {
            encryptionContextEqualsDecoded0 = [Swift.String:Swift.String]()
            for (key0, encryptioncontextvalue0) in encryptionContextEqualsContainer {
                if let encryptioncontextvalue0 = encryptioncontextvalue0 {
                    encryptionContextEqualsDecoded0?[key0] = encryptioncontextvalue0
                }
            }
        }
        encryptionContextEquals = encryptionContextEqualsDecoded0
    }
}

extension KMSClientTypes {
    /// Use this structure to allow [cryptographic operations](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations) in the grant only when the operation request includes the specified [encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context). KMS applies the grant constraints only to cryptographic operations that support an encryption context, that is, all cryptographic operations with a [symmetric KMS key](https://docs.aws.amazon.com/kms/latest/developerguide/symm-asymm-concepts.html#symmetric-cmks). Grant constraints are not applied to operations that do not support an encryption context, such as cryptographic operations with asymmetric KMS keys and management operations, such as [DescribeKey] or [RetireGrant]. In a cryptographic operation, the encryption context in the decryption operation must be an exact, case-sensitive match for the keys and values in the encryption context of the encryption operation. Only the order of the pairs can vary. However, in a grant constraint, the key in each key-value pair is not case sensitive, but the value is case sensitive. To avoid confusion, do not use multiple encryption context pairs that differ only by case. To require a fully case-sensitive encryption context, use the kms:EncryptionContext: and kms:EncryptionContextKeys conditions in an IAM or key policy. For details, see [kms:EncryptionContext:](https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-encryption-context) in the Key Management Service Developer Guide .
    public struct GrantConstraints: Swift.Equatable {
        /// A list of key-value pairs that must match the encryption context in the [cryptographic operation](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations) request. The grant allows the operation only when the encryption context in the request is the same as the encryption context specified in this constraint.
        public var encryptionContextEquals: [Swift.String:Swift.String]?
        /// A list of key-value pairs that must be included in the encryption context of the [cryptographic operation](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations) request. The grant allows the cryptographic operation only when the encryption context in the request includes the key-value pairs specified in this constraint, although it can include additional key-value pairs.
        public var encryptionContextSubset: [Swift.String:Swift.String]?

        public init (
            encryptionContextEquals: [Swift.String:Swift.String]? = nil,
            encryptionContextSubset: [Swift.String:Swift.String]? = nil
        )
        {
            self.encryptionContextEquals = encryptionContextEquals
            self.encryptionContextSubset = encryptionContextSubset
        }
    }

}

extension KMSClientTypes.GrantListEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case constraints = "Constraints"
        case creationDate = "CreationDate"
        case grantId = "GrantId"
        case granteePrincipal = "GranteePrincipal"
        case issuingAccount = "IssuingAccount"
        case keyId = "KeyId"
        case name = "Name"
        case operations = "Operations"
        case retiringPrincipal = "RetiringPrincipal"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let constraints = self.constraints {
            try encodeContainer.encode(constraints, forKey: .constraints)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encodeTimestamp(creationDate, format: .epochSeconds, forKey: .creationDate)
        }
        if let grantId = self.grantId {
            try encodeContainer.encode(grantId, forKey: .grantId)
        }
        if let granteePrincipal = self.granteePrincipal {
            try encodeContainer.encode(granteePrincipal, forKey: .granteePrincipal)
        }
        if let issuingAccount = self.issuingAccount {
            try encodeContainer.encode(issuingAccount, forKey: .issuingAccount)
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let operations = operations {
            var operationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .operations)
            for grantoperation0 in operations {
                try operationsContainer.encode(grantoperation0.rawValue)
            }
        }
        if let retiringPrincipal = self.retiringPrincipal {
            try encodeContainer.encode(retiringPrincipal, forKey: .retiringPrincipal)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let grantIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .grantId)
        grantId = grantIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
        let granteePrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .granteePrincipal)
        granteePrincipal = granteePrincipalDecoded
        let retiringPrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .retiringPrincipal)
        retiringPrincipal = retiringPrincipalDecoded
        let issuingAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .issuingAccount)
        issuingAccount = issuingAccountDecoded
        let operationsContainer = try containerValues.decodeIfPresent([KMSClientTypes.GrantOperation?].self, forKey: .operations)
        var operationsDecoded0:[KMSClientTypes.GrantOperation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [KMSClientTypes.GrantOperation]()
            for enum0 in operationsContainer {
                if let enum0 = enum0 {
                    operationsDecoded0?.append(enum0)
                }
            }
        }
        operations = operationsDecoded0
        let constraintsDecoded = try containerValues.decodeIfPresent(KMSClientTypes.GrantConstraints.self, forKey: .constraints)
        constraints = constraintsDecoded
    }
}

extension KMSClientTypes {
    /// Contains information about a grant.
    public struct GrantListEntry: Swift.Equatable {
        /// A list of key-value pairs that must be present in the encryption context of certain subsequent operations that the grant allows.
        public var constraints: KMSClientTypes.GrantConstraints?
        /// The date and time when the grant was created.
        public var creationDate: ClientRuntime.Date?
        /// The unique identifier for the grant.
        public var grantId: Swift.String?
        /// The identity that gets the permissions in the grant. The GranteePrincipal field in the ListGrants response usually contains the user or role designated as the grantee principal in the grant. However, when the grantee principal in the grant is an Amazon Web Services service, the GranteePrincipal field contains the [service principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#principal-services), which might represent several different grantee principals.
        public var granteePrincipal: Swift.String?
        /// The Amazon Web Services account under which the grant was issued.
        public var issuingAccount: Swift.String?
        /// The unique identifier for the KMS key to which the grant applies.
        public var keyId: Swift.String?
        /// The friendly name that identifies the grant. If a name was provided in the [CreateGrant] request, that name is returned. Otherwise this value is null.
        public var name: Swift.String?
        /// The list of operations permitted by the grant.
        public var operations: [KMSClientTypes.GrantOperation]?
        /// The principal that can retire the grant.
        public var retiringPrincipal: Swift.String?

        public init (
            constraints: KMSClientTypes.GrantConstraints? = nil,
            creationDate: ClientRuntime.Date? = nil,
            grantId: Swift.String? = nil,
            granteePrincipal: Swift.String? = nil,
            issuingAccount: Swift.String? = nil,
            keyId: Swift.String? = nil,
            name: Swift.String? = nil,
            operations: [KMSClientTypes.GrantOperation]? = nil,
            retiringPrincipal: Swift.String? = nil
        )
        {
            self.constraints = constraints
            self.creationDate = creationDate
            self.grantId = grantId
            self.granteePrincipal = granteePrincipal
            self.issuingAccount = issuingAccount
            self.keyId = keyId
            self.name = name
            self.operations = operations
            self.retiringPrincipal = retiringPrincipal
        }
    }

}

extension KMSClientTypes {
    public enum GrantOperation: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creategrant
        case decrypt
        case describekey
        case encrypt
        case generatedatakey
        case generatedatakeypair
        case generatedatakeypairwithoutplaintext
        case generatedatakeywithoutplaintext
        case generatemac
        case getpublickey
        case reencryptfrom
        case reencryptto
        case retiregrant
        case sign
        case verify
        case verifymac
        case sdkUnknown(Swift.String)

        public static var allCases: [GrantOperation] {
            return [
                .creategrant,
                .decrypt,
                .describekey,
                .encrypt,
                .generatedatakey,
                .generatedatakeypair,
                .generatedatakeypairwithoutplaintext,
                .generatedatakeywithoutplaintext,
                .generatemac,
                .getpublickey,
                .reencryptfrom,
                .reencryptto,
                .retiregrant,
                .sign,
                .verify,
                .verifymac,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creategrant: return "CreateGrant"
            case .decrypt: return "Decrypt"
            case .describekey: return "DescribeKey"
            case .encrypt: return "Encrypt"
            case .generatedatakey: return "GenerateDataKey"
            case .generatedatakeypair: return "GenerateDataKeyPair"
            case .generatedatakeypairwithoutplaintext: return "GenerateDataKeyPairWithoutPlaintext"
            case .generatedatakeywithoutplaintext: return "GenerateDataKeyWithoutPlaintext"
            case .generatemac: return "GenerateMac"
            case .getpublickey: return "GetPublicKey"
            case .reencryptfrom: return "ReEncryptFrom"
            case .reencryptto: return "ReEncryptTo"
            case .retiregrant: return "RetireGrant"
            case .sign: return "Sign"
            case .verify: return "Verify"
            case .verifymac: return "VerifyMac"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GrantOperation(rawValue: rawValue) ?? GrantOperation.sdkUnknown(rawValue)
        }
    }
}

extension ImportKeyMaterialInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptedKeyMaterial = "EncryptedKeyMaterial"
        case expirationModel = "ExpirationModel"
        case importToken = "ImportToken"
        case keyId = "KeyId"
        case validTo = "ValidTo"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptedKeyMaterial = self.encryptedKeyMaterial {
            try encodeContainer.encode(encryptedKeyMaterial.base64EncodedString(), forKey: .encryptedKeyMaterial)
        }
        if let expirationModel = self.expirationModel {
            try encodeContainer.encode(expirationModel.rawValue, forKey: .expirationModel)
        }
        if let importToken = self.importToken {
            try encodeContainer.encode(importToken.base64EncodedString(), forKey: .importToken)
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let validTo = self.validTo {
            try encodeContainer.encodeTimestamp(validTo, format: .epochSeconds, forKey: .validTo)
        }
    }
}

extension ImportKeyMaterialInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ImportKeyMaterialInput: Swift.Equatable {
    /// The encrypted key material to import. The key material must be encrypted with the public wrapping key that [GetParametersForImport] returned, using the wrapping algorithm that you specified in the same GetParametersForImport request.
    /// This member is required.
    public var encryptedKeyMaterial: ClientRuntime.Data?
    /// Specifies whether the key material expires. The default is KEY_MATERIAL_EXPIRES. When the value of ExpirationModel is KEY_MATERIAL_EXPIRES, you must specify a value for the ValidTo parameter. When value is KEY_MATERIAL_DOES_NOT_EXPIRE, you must omit the ValidTo parameter. You cannot change the ExpirationModel or ValidTo values for the current import after the request completes. To change either value, you must delete ([DeleteImportedKeyMaterial]) and reimport the key material.
    public var expirationModel: KMSClientTypes.ExpirationModelType?
    /// The import token that you received in the response to a previous [GetParametersForImport] request. It must be from the same response that contained the public key that you used to encrypt the key material.
    /// This member is required.
    public var importToken: ClientRuntime.Data?
    /// The identifier of the symmetric encryption KMS key that receives the imported key material. This must be the same KMS key specified in the KeyID parameter of the corresponding [GetParametersForImport] request. The Origin of the KMS key must be EXTERNAL. You cannot perform this operation on an asymmetric KMS key, an HMAC KMS key, a KMS key in a custom key store, or on a KMS key in a different Amazon Web Services account Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// The date and time when the imported key material expires. This parameter is required when the value of the ExpirationModel parameter is KEY_MATERIAL_EXPIRES. Otherwise it is not valid. The value of this parameter must be a future date and time. The maximum value is 365 days from the request date. When the key material expires, KMS deletes the key material from the KMS key. Without its key material, the KMS key is unusable. To use the KMS key in cryptographic operations, you must reimport the same key material. You cannot change the ExpirationModel or ValidTo values for the current import after the request completes. To change either value, you must delete ([DeleteImportedKeyMaterial]) and reimport the key material.
    public var validTo: ClientRuntime.Date?

    public init (
        encryptedKeyMaterial: ClientRuntime.Data? = nil,
        expirationModel: KMSClientTypes.ExpirationModelType? = nil,
        importToken: ClientRuntime.Data? = nil,
        keyId: Swift.String? = nil,
        validTo: ClientRuntime.Date? = nil
    )
    {
        self.encryptedKeyMaterial = encryptedKeyMaterial
        self.expirationModel = expirationModel
        self.importToken = importToken
        self.keyId = keyId
        self.validTo = validTo
    }
}

struct ImportKeyMaterialInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let importToken: ClientRuntime.Data?
    let encryptedKeyMaterial: ClientRuntime.Data?
    let validTo: ClientRuntime.Date?
    let expirationModel: KMSClientTypes.ExpirationModelType?
}

extension ImportKeyMaterialInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptedKeyMaterial = "EncryptedKeyMaterial"
        case expirationModel = "ExpirationModel"
        case importToken = "ImportToken"
        case keyId = "KeyId"
        case validTo = "ValidTo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let importTokenDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .importToken)
        importToken = importTokenDecoded
        let encryptedKeyMaterialDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .encryptedKeyMaterial)
        encryptedKeyMaterial = encryptedKeyMaterialDecoded
        let validToDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .validTo)
        validTo = validToDecoded
        let expirationModelDecoded = try containerValues.decodeIfPresent(KMSClientTypes.ExpirationModelType.self, forKey: .expirationModel)
        expirationModel = expirationModelDecoded
    }
}

extension ImportKeyMaterialOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ImportKeyMaterialOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ExpiredImportTokenException" : self = .expiredImportTokenException(try ExpiredImportTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncorrectKeyMaterialException" : self = .incorrectKeyMaterialException(try IncorrectKeyMaterialException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCiphertext" : self = .invalidCiphertextException(try InvalidCiphertextException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidImportTokenException" : self = .invalidImportTokenException(try InvalidImportTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ImportKeyMaterialOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case expiredImportTokenException(ExpiredImportTokenException)
    case incorrectKeyMaterialException(IncorrectKeyMaterialException)
    case invalidArnException(InvalidArnException)
    case invalidCiphertextException(InvalidCiphertextException)
    case invalidImportTokenException(InvalidImportTokenException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ImportKeyMaterialOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct ImportKeyMaterialOutputResponse: Swift.Equatable {

    public init () { }
}

extension IncorrectKeyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: IncorrectKeyExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the specified KMS key cannot decrypt the data. The KeyId in a [Decrypt] request and the SourceKeyId in a [ReEncrypt] request must identify the same KMS key that was used to encrypt the ciphertext.
public struct IncorrectKeyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct IncorrectKeyExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension IncorrectKeyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IncorrectKeyMaterialException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: IncorrectKeyMaterialExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the key material in the request is, expired, invalid, or is not the same key material that was previously imported into this KMS key.
public struct IncorrectKeyMaterialException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct IncorrectKeyMaterialExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension IncorrectKeyMaterialExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IncorrectTrustAnchorException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: IncorrectTrustAnchorExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the trust anchor certificate in the request to create an CloudHSM key store is not the trust anchor certificate for the specified CloudHSM cluster. When you [initialize the CloudHSM cluster](https://docs.aws.amazon.com/cloudhsm/latest/userguide/initialize-cluster.html#sign-csr), you create the trust anchor certificate and save it in the customerCA.crt file.
public struct IncorrectTrustAnchorException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct IncorrectTrustAnchorExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension IncorrectTrustAnchorExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidAliasNameException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidAliasNameExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the specified alias name is not valid.
public struct InvalidAliasNameException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidAliasNameExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidAliasNameExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidArnException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidArnExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because a specified ARN, or an ARN in a key policy, is not valid.
public struct InvalidArnException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidArnExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidArnExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidCiphertextException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidCiphertextExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// From the [Decrypt] or [ReEncrypt] operation, the request was rejected because the specified ciphertext, or additional authenticated data incorporated into the ciphertext, such as the encryption context, is corrupted, missing, or otherwise invalid. From the [ImportKeyMaterial] operation, the request was rejected because KMS could not decrypt the encrypted (wrapped) key material.
public struct InvalidCiphertextException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidCiphertextExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidCiphertextExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidGrantIdException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidGrantIdExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the specified GrantId is not valid.
public struct InvalidGrantIdException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidGrantIdExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidGrantIdExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidGrantTokenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidGrantTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the specified grant token is not valid.
public struct InvalidGrantTokenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidGrantTokenExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidGrantTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidImportTokenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidImportTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the provided import token is invalid or is associated with a different KMS key.
public struct InvalidImportTokenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidImportTokenExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidImportTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidKeyUsageException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidKeyUsageExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected for one of the following reasons:
///
/// * The KeyUsage value of the KMS key is incompatible with the API operation.
///
/// * The encryption algorithm or signing algorithm specified for the operation is incompatible with the type of key material in the KMS key (KeySpec).
///
///
/// For encrypting, decrypting, re-encrypting, and generating data keys, the KeyUsage must be ENCRYPT_DECRYPT. For signing and verifying messages, the KeyUsage must be SIGN_VERIFY. For generating and verifying message authentication codes (MACs), the KeyUsage must be GENERATE_VERIFY_MAC. To find the KeyUsage of a KMS key, use the [DescribeKey] operation. To find the encryption or signing algorithms supported for a particular KMS key, use the [DescribeKey] operation.
public struct InvalidKeyUsageException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidKeyUsageExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidKeyUsageExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidMarkerException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidMarkerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the marker that specifies where pagination should next begin is not valid.
public struct InvalidMarkerException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidMarkerExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidMarkerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KMSInternalException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: KMSInternalExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because an internal exception occurred. The request can be retried.
public struct KMSInternalException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct KMSInternalExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension KMSInternalExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KMSInvalidMacException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: KMSInvalidMacExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the HMAC verification failed. HMAC verification fails when the HMAC computed by using the specified message, HMAC KMS key, and MAC algorithm does not match the HMAC specified in the request.
public struct KMSInvalidMacException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct KMSInvalidMacExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension KMSInvalidMacExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KMSInvalidSignatureException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: KMSInvalidSignatureExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the signature verification failed. Signature verification fails when it cannot confirm that signature was produced by signing the specified message with the specified KMS key and signing algorithm.
public struct KMSInvalidSignatureException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct KMSInvalidSignatureExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension KMSInvalidSignatureExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KMSInvalidStateException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: KMSInvalidStateExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the state of the specified resource is not valid for this request. This exceptions means one of the following:
///
/// * The key state of the KMS key is not compatible with the operation. To find the key state, use the [DescribeKey] operation. For more information about which key states are compatible with each KMS operation, see [Key states of KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the Key Management Service Developer Guide .
///
/// * For cryptographic operations on KMS keys in custom key stores, this exception represents a general failure with many possible causes. To identify the cause, see the error message that accompanies the exception.
public struct KMSInvalidStateException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct KMSInvalidStateExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension KMSInvalidStateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KMSClientTypes.KeyListEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyArn = "KeyArn"
        case keyId = "KeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyArn = self.keyArn {
            try encodeContainer.encode(keyArn, forKey: .keyArn)
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let keyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyArn)
        keyArn = keyArnDecoded
    }
}

extension KMSClientTypes {
    /// Contains information about each entry in the key list.
    public struct KeyListEntry: Swift.Equatable {
        /// ARN of the key.
        public var keyArn: Swift.String?
        /// Unique identifier of the key.
        public var keyId: Swift.String?

        public init (
            keyArn: Swift.String? = nil,
            keyId: Swift.String? = nil
        )
        {
            self.keyArn = keyArn
            self.keyId = keyId
        }
    }

}

extension KMSClientTypes {
    public enum KeyManagerType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aws
        case customer
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyManagerType] {
            return [
                .aws,
                .customer,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aws: return "AWS"
            case .customer: return "CUSTOMER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyManagerType(rawValue: rawValue) ?? KeyManagerType.sdkUnknown(rawValue)
        }
    }
}

extension KMSClientTypes.KeyMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsAccountId = "AWSAccountId"
        case arn = "Arn"
        case cloudHsmClusterId = "CloudHsmClusterId"
        case creationDate = "CreationDate"
        case customKeyStoreId = "CustomKeyStoreId"
        case customerMasterKeySpec = "CustomerMasterKeySpec"
        case deletionDate = "DeletionDate"
        case description = "Description"
        case enabled = "Enabled"
        case encryptionAlgorithms = "EncryptionAlgorithms"
        case expirationModel = "ExpirationModel"
        case keyId = "KeyId"
        case keyManager = "KeyManager"
        case keySpec = "KeySpec"
        case keyState = "KeyState"
        case keyUsage = "KeyUsage"
        case macAlgorithms = "MacAlgorithms"
        case multiRegion = "MultiRegion"
        case multiRegionConfiguration = "MultiRegionConfiguration"
        case origin = "Origin"
        case pendingDeletionWindowInDays = "PendingDeletionWindowInDays"
        case signingAlgorithms = "SigningAlgorithms"
        case validTo = "ValidTo"
        case xksKeyConfiguration = "XksKeyConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsAccountId = self.awsAccountId {
            try encodeContainer.encode(awsAccountId, forKey: .awsAccountId)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let cloudHsmClusterId = self.cloudHsmClusterId {
            try encodeContainer.encode(cloudHsmClusterId, forKey: .cloudHsmClusterId)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encodeTimestamp(creationDate, format: .epochSeconds, forKey: .creationDate)
        }
        if let customKeyStoreId = self.customKeyStoreId {
            try encodeContainer.encode(customKeyStoreId, forKey: .customKeyStoreId)
        }
        if let customerMasterKeySpec = self.customerMasterKeySpec {
            try encodeContainer.encode(customerMasterKeySpec.rawValue, forKey: .customerMasterKeySpec)
        }
        if let deletionDate = self.deletionDate {
            try encodeContainer.encodeTimestamp(deletionDate, format: .epochSeconds, forKey: .deletionDate)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let encryptionAlgorithms = encryptionAlgorithms {
            var encryptionAlgorithmsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .encryptionAlgorithms)
            for encryptionalgorithmspec0 in encryptionAlgorithms {
                try encryptionAlgorithmsContainer.encode(encryptionalgorithmspec0.rawValue)
            }
        }
        if let expirationModel = self.expirationModel {
            try encodeContainer.encode(expirationModel.rawValue, forKey: .expirationModel)
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let keyManager = self.keyManager {
            try encodeContainer.encode(keyManager.rawValue, forKey: .keyManager)
        }
        if let keySpec = self.keySpec {
            try encodeContainer.encode(keySpec.rawValue, forKey: .keySpec)
        }
        if let keyState = self.keyState {
            try encodeContainer.encode(keyState.rawValue, forKey: .keyState)
        }
        if let keyUsage = self.keyUsage {
            try encodeContainer.encode(keyUsage.rawValue, forKey: .keyUsage)
        }
        if let macAlgorithms = macAlgorithms {
            var macAlgorithmsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .macAlgorithms)
            for macalgorithmspec0 in macAlgorithms {
                try macAlgorithmsContainer.encode(macalgorithmspec0.rawValue)
            }
        }
        if let multiRegion = self.multiRegion {
            try encodeContainer.encode(multiRegion, forKey: .multiRegion)
        }
        if let multiRegionConfiguration = self.multiRegionConfiguration {
            try encodeContainer.encode(multiRegionConfiguration, forKey: .multiRegionConfiguration)
        }
        if let origin = self.origin {
            try encodeContainer.encode(origin.rawValue, forKey: .origin)
        }
        if let pendingDeletionWindowInDays = self.pendingDeletionWindowInDays {
            try encodeContainer.encode(pendingDeletionWindowInDays, forKey: .pendingDeletionWindowInDays)
        }
        if let signingAlgorithms = signingAlgorithms {
            var signingAlgorithmsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .signingAlgorithms)
            for signingalgorithmspec0 in signingAlgorithms {
                try signingAlgorithmsContainer.encode(signingalgorithmspec0.rawValue)
            }
        }
        if let validTo = self.validTo {
            try encodeContainer.encodeTimestamp(validTo, format: .epochSeconds, forKey: .validTo)
        }
        if let xksKeyConfiguration = self.xksKeyConfiguration {
            try encodeContainer.encode(xksKeyConfiguration, forKey: .xksKeyConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let awsAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsAccountId)
        awsAccountId = awsAccountIdDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled) ?? false
        enabled = enabledDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let keyUsageDecoded = try containerValues.decodeIfPresent(KMSClientTypes.KeyUsageType.self, forKey: .keyUsage)
        keyUsage = keyUsageDecoded
        let keyStateDecoded = try containerValues.decodeIfPresent(KMSClientTypes.KeyState.self, forKey: .keyState)
        keyState = keyStateDecoded
        let deletionDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .deletionDate)
        deletionDate = deletionDateDecoded
        let validToDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .validTo)
        validTo = validToDecoded
        let originDecoded = try containerValues.decodeIfPresent(KMSClientTypes.OriginType.self, forKey: .origin)
        origin = originDecoded
        let customKeyStoreIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customKeyStoreId)
        customKeyStoreId = customKeyStoreIdDecoded
        let cloudHsmClusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudHsmClusterId)
        cloudHsmClusterId = cloudHsmClusterIdDecoded
        let expirationModelDecoded = try containerValues.decodeIfPresent(KMSClientTypes.ExpirationModelType.self, forKey: .expirationModel)
        expirationModel = expirationModelDecoded
        let keyManagerDecoded = try containerValues.decodeIfPresent(KMSClientTypes.KeyManagerType.self, forKey: .keyManager)
        keyManager = keyManagerDecoded
        let customerMasterKeySpecDecoded = try containerValues.decodeIfPresent(KMSClientTypes.CustomerMasterKeySpec.self, forKey: .customerMasterKeySpec)
        customerMasterKeySpec = customerMasterKeySpecDecoded
        let keySpecDecoded = try containerValues.decodeIfPresent(KMSClientTypes.KeySpec.self, forKey: .keySpec)
        keySpec = keySpecDecoded
        let encryptionAlgorithmsContainer = try containerValues.decodeIfPresent([KMSClientTypes.EncryptionAlgorithmSpec?].self, forKey: .encryptionAlgorithms)
        var encryptionAlgorithmsDecoded0:[KMSClientTypes.EncryptionAlgorithmSpec]? = nil
        if let encryptionAlgorithmsContainer = encryptionAlgorithmsContainer {
            encryptionAlgorithmsDecoded0 = [KMSClientTypes.EncryptionAlgorithmSpec]()
            for enum0 in encryptionAlgorithmsContainer {
                if let enum0 = enum0 {
                    encryptionAlgorithmsDecoded0?.append(enum0)
                }
            }
        }
        encryptionAlgorithms = encryptionAlgorithmsDecoded0
        let signingAlgorithmsContainer = try containerValues.decodeIfPresent([KMSClientTypes.SigningAlgorithmSpec?].self, forKey: .signingAlgorithms)
        var signingAlgorithmsDecoded0:[KMSClientTypes.SigningAlgorithmSpec]? = nil
        if let signingAlgorithmsContainer = signingAlgorithmsContainer {
            signingAlgorithmsDecoded0 = [KMSClientTypes.SigningAlgorithmSpec]()
            for enum0 in signingAlgorithmsContainer {
                if let enum0 = enum0 {
                    signingAlgorithmsDecoded0?.append(enum0)
                }
            }
        }
        signingAlgorithms = signingAlgorithmsDecoded0
        let multiRegionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .multiRegion)
        multiRegion = multiRegionDecoded
        let multiRegionConfigurationDecoded = try containerValues.decodeIfPresent(KMSClientTypes.MultiRegionConfiguration.self, forKey: .multiRegionConfiguration)
        multiRegionConfiguration = multiRegionConfigurationDecoded
        let pendingDeletionWindowInDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pendingDeletionWindowInDays)
        pendingDeletionWindowInDays = pendingDeletionWindowInDaysDecoded
        let macAlgorithmsContainer = try containerValues.decodeIfPresent([KMSClientTypes.MacAlgorithmSpec?].self, forKey: .macAlgorithms)
        var macAlgorithmsDecoded0:[KMSClientTypes.MacAlgorithmSpec]? = nil
        if let macAlgorithmsContainer = macAlgorithmsContainer {
            macAlgorithmsDecoded0 = [KMSClientTypes.MacAlgorithmSpec]()
            for enum0 in macAlgorithmsContainer {
                if let enum0 = enum0 {
                    macAlgorithmsDecoded0?.append(enum0)
                }
            }
        }
        macAlgorithms = macAlgorithmsDecoded0
        let xksKeyConfigurationDecoded = try containerValues.decodeIfPresent(KMSClientTypes.XksKeyConfigurationType.self, forKey: .xksKeyConfiguration)
        xksKeyConfiguration = xksKeyConfigurationDecoded
    }
}

extension KMSClientTypes {
    /// Contains metadata about a KMS key. This data type is used as a response element for the [CreateKey], [DescribeKey], and [ReplicateKey] operations.
    public struct KeyMetadata: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the KMS key. For examples, see [Key Management Service (KMS)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms) in the Example ARNs section of the Amazon Web Services General Reference.
        public var arn: Swift.String?
        /// The twelve-digit account ID of the Amazon Web Services account that owns the KMS key.
        public var awsAccountId: Swift.String?
        /// The cluster ID of the CloudHSM cluster that contains the key material for the KMS key. When you create a KMS key in an CloudHSM [custom key store](https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html), KMS creates the key material for the KMS key in the associated CloudHSM cluster. This field is present only when the KMS key is created in an CloudHSM key store.
        public var cloudHsmClusterId: Swift.String?
        /// The date and time when the KMS key was created.
        public var creationDate: ClientRuntime.Date?
        /// A unique identifier for the [custom key store](https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html) that contains the KMS key. This field is present only when the KMS key is created in a custom key store.
        public var customKeyStoreId: Swift.String?
        /// Instead, use the KeySpec field. The KeySpec and CustomerMasterKeySpec fields have the same value. We recommend that you use the KeySpec field in your code. However, to avoid breaking changes, KMS supports both fields.
        @available(*, deprecated, message: "This field has been deprecated. Instead, use the KeySpec field.")
        public var customerMasterKeySpec: KMSClientTypes.CustomerMasterKeySpec?
        /// The date and time after which KMS deletes this KMS key. This value is present only when the KMS key is scheduled for deletion, that is, when its KeyState is PendingDeletion. When the primary key in a multi-Region key is scheduled for deletion but still has replica keys, its key state is PendingReplicaDeletion and the length of its waiting period is displayed in the PendingDeletionWindowInDays field.
        public var deletionDate: ClientRuntime.Date?
        /// The description of the KMS key.
        public var description: Swift.String?
        /// Specifies whether the KMS key is enabled. When KeyState is Enabled this value is true, otherwise it is false.
        public var enabled: Swift.Bool
        /// The encryption algorithms that the KMS key supports. You cannot use the KMS key with other encryption algorithms within KMS. This value is present only when the KeyUsage of the KMS key is ENCRYPT_DECRYPT.
        public var encryptionAlgorithms: [KMSClientTypes.EncryptionAlgorithmSpec]?
        /// Specifies whether the KMS key's key material expires. This value is present only when Origin is EXTERNAL, otherwise this value is omitted.
        public var expirationModel: KMSClientTypes.ExpirationModelType?
        /// The globally unique identifier for the KMS key.
        /// This member is required.
        public var keyId: Swift.String?
        /// The manager of the KMS key. KMS keys in your Amazon Web Services account are either customer managed or Amazon Web Services managed. For more information about the difference, see [KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#kms_keys) in the Key Management Service Developer Guide.
        public var keyManager: KMSClientTypes.KeyManagerType?
        /// Describes the type of key material in the KMS key.
        public var keySpec: KMSClientTypes.KeySpec?
        /// The current status of the KMS key. For more information about how key state affects the use of a KMS key, see [Key states of KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the Key Management Service Developer Guide.
        public var keyState: KMSClientTypes.KeyState?
        /// The [cryptographic operations](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations) for which you can use the KMS key.
        public var keyUsage: KMSClientTypes.KeyUsageType?
        /// The message authentication code (MAC) algorithm that the HMAC KMS key supports. This value is present only when the KeyUsage of the KMS key is GENERATE_VERIFY_MAC.
        public var macAlgorithms: [KMSClientTypes.MacAlgorithmSpec]?
        /// Indicates whether the KMS key is a multi-Region (True) or regional (False) key. This value is True for multi-Region primary and replica keys and False for regional KMS keys. For more information about multi-Region keys, see [Multi-Region keys in KMS](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html) in the Key Management Service Developer Guide.
        public var multiRegion: Swift.Bool?
        /// Lists the primary and replica keys in same multi-Region key. This field is present only when the value of the MultiRegion field is True. For more information about any listed KMS key, use the [DescribeKey] operation.
        ///
        /// * MultiRegionKeyType indicates whether the KMS key is a PRIMARY or REPLICA key.
        ///
        /// * PrimaryKey displays the key ARN and Region of the primary key. This field displays the current KMS key if it is the primary key.
        ///
        /// * ReplicaKeys displays the key ARNs and Regions of all replica keys. This field includes the current KMS key if it is a replica key.
        public var multiRegionConfiguration: KMSClientTypes.MultiRegionConfiguration?
        /// The source of the key material for the KMS key. When this value is AWS_KMS, KMS created the key material. When this value is EXTERNAL, the key material was imported or the KMS key doesn't have any key material. When this value is AWS_CLOUDHSM, the key material was created in the CloudHSM cluster associated with a custom key store.
        public var origin: KMSClientTypes.OriginType?
        /// The waiting period before the primary key in a multi-Region key is deleted. This waiting period begins when the last of its replica keys is deleted. This value is present only when the KeyState of the KMS key is PendingReplicaDeletion. That indicates that the KMS key is the primary key in a multi-Region key, it is scheduled for deletion, and it still has existing replica keys. When a single-Region KMS key or a multi-Region replica key is scheduled for deletion, its deletion date is displayed in the DeletionDate field. However, when the primary key in a multi-Region key is scheduled for deletion, its waiting period doesn't begin until all of its replica keys are deleted. This value displays that waiting period. When the last replica key in the multi-Region key is deleted, the KeyState of the scheduled primary key changes from PendingReplicaDeletion to PendingDeletion and the deletion date appears in the DeletionDate field.
        public var pendingDeletionWindowInDays: Swift.Int?
        /// The signing algorithms that the KMS key supports. You cannot use the KMS key with other signing algorithms within KMS. This field appears only when the KeyUsage of the KMS key is SIGN_VERIFY.
        public var signingAlgorithms: [KMSClientTypes.SigningAlgorithmSpec]?
        /// The time at which the imported key material expires. When the key material expires, KMS deletes the key material and the KMS key becomes unusable. This value is present only for KMS keys whose Origin is EXTERNAL and whose ExpirationModel is KEY_MATERIAL_EXPIRES, otherwise this value is omitted.
        public var validTo: ClientRuntime.Date?
        /// Information about the external key that is associated with a KMS key in an external key store. For more information, see [External key](https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html#concept-external-key) in the Key Management Service Developer Guide.
        public var xksKeyConfiguration: KMSClientTypes.XksKeyConfigurationType?

        public init (
            arn: Swift.String? = nil,
            awsAccountId: Swift.String? = nil,
            cloudHsmClusterId: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            customKeyStoreId: Swift.String? = nil,
            customerMasterKeySpec: KMSClientTypes.CustomerMasterKeySpec? = nil,
            deletionDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            enabled: Swift.Bool = false,
            encryptionAlgorithms: [KMSClientTypes.EncryptionAlgorithmSpec]? = nil,
            expirationModel: KMSClientTypes.ExpirationModelType? = nil,
            keyId: Swift.String? = nil,
            keyManager: KMSClientTypes.KeyManagerType? = nil,
            keySpec: KMSClientTypes.KeySpec? = nil,
            keyState: KMSClientTypes.KeyState? = nil,
            keyUsage: KMSClientTypes.KeyUsageType? = nil,
            macAlgorithms: [KMSClientTypes.MacAlgorithmSpec]? = nil,
            multiRegion: Swift.Bool? = nil,
            multiRegionConfiguration: KMSClientTypes.MultiRegionConfiguration? = nil,
            origin: KMSClientTypes.OriginType? = nil,
            pendingDeletionWindowInDays: Swift.Int? = nil,
            signingAlgorithms: [KMSClientTypes.SigningAlgorithmSpec]? = nil,
            validTo: ClientRuntime.Date? = nil,
            xksKeyConfiguration: KMSClientTypes.XksKeyConfigurationType? = nil
        )
        {
            self.arn = arn
            self.awsAccountId = awsAccountId
            self.cloudHsmClusterId = cloudHsmClusterId
            self.creationDate = creationDate
            self.customKeyStoreId = customKeyStoreId
            self.customerMasterKeySpec = customerMasterKeySpec
            self.deletionDate = deletionDate
            self.description = description
            self.enabled = enabled
            self.encryptionAlgorithms = encryptionAlgorithms
            self.expirationModel = expirationModel
            self.keyId = keyId
            self.keyManager = keyManager
            self.keySpec = keySpec
            self.keyState = keyState
            self.keyUsage = keyUsage
            self.macAlgorithms = macAlgorithms
            self.multiRegion = multiRegion
            self.multiRegionConfiguration = multiRegionConfiguration
            self.origin = origin
            self.pendingDeletionWindowInDays = pendingDeletionWindowInDays
            self.signingAlgorithms = signingAlgorithms
            self.validTo = validTo
            self.xksKeyConfiguration = xksKeyConfiguration
        }
    }

}

extension KMSClientTypes {
    public enum KeySpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case eccNistP256
        case eccNistP384
        case eccNistP521
        case eccSecgP256k1
        case hmac224
        case hmac256
        case hmac384
        case hmac512
        case rsa2048
        case rsa3072
        case rsa4096
        case sm2
        case symmetricDefault
        case sdkUnknown(Swift.String)

        public static var allCases: [KeySpec] {
            return [
                .eccNistP256,
                .eccNistP384,
                .eccNistP521,
                .eccSecgP256k1,
                .hmac224,
                .hmac256,
                .hmac384,
                .hmac512,
                .rsa2048,
                .rsa3072,
                .rsa4096,
                .sm2,
                .symmetricDefault,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .eccNistP256: return "ECC_NIST_P256"
            case .eccNistP384: return "ECC_NIST_P384"
            case .eccNistP521: return "ECC_NIST_P521"
            case .eccSecgP256k1: return "ECC_SECG_P256K1"
            case .hmac224: return "HMAC_224"
            case .hmac256: return "HMAC_256"
            case .hmac384: return "HMAC_384"
            case .hmac512: return "HMAC_512"
            case .rsa2048: return "RSA_2048"
            case .rsa3072: return "RSA_3072"
            case .rsa4096: return "RSA_4096"
            case .sm2: return "SM2"
            case .symmetricDefault: return "SYMMETRIC_DEFAULT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeySpec(rawValue: rawValue) ?? KeySpec.sdkUnknown(rawValue)
        }
    }
}

extension KMSClientTypes {
    public enum KeyState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creating
        case disabled
        case enabled
        case pendingdeletion
        case pendingimport
        case pendingreplicadeletion
        case unavailable
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyState] {
            return [
                .creating,
                .disabled,
                .enabled,
                .pendingdeletion,
                .pendingimport,
                .pendingreplicadeletion,
                .unavailable,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creating: return "Creating"
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case .pendingdeletion: return "PendingDeletion"
            case .pendingimport: return "PendingImport"
            case .pendingreplicadeletion: return "PendingReplicaDeletion"
            case .unavailable: return "Unavailable"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyState(rawValue: rawValue) ?? KeyState.sdkUnknown(rawValue)
        }
    }
}

extension KeyUnavailableException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: KeyUnavailableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the specified KMS key was not available. You can retry the request.
public struct KeyUnavailableException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct KeyUnavailableExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension KeyUnavailableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KMSClientTypes {
    public enum KeyUsageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case encryptDecrypt
        case generateVerifyMac
        case signVerify
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyUsageType] {
            return [
                .encryptDecrypt,
                .generateVerifyMac,
                .signVerify,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .encryptDecrypt: return "ENCRYPT_DECRYPT"
            case .generateVerifyMac: return "GENERATE_VERIFY_MAC"
            case .signVerify: return "SIGN_VERIFY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyUsageType(rawValue: rawValue) ?? KeyUsageType.sdkUnknown(rawValue)
        }
    }
}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because a quota was exceeded. For more information, see [Quotas](https://docs.aws.amazon.com/kms/latest/developerguide/limits.html) in the Key Management Service Developer Guide.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListAliasesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case limit = "Limit"
        case marker = "Marker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let marker = self.marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
    }
}

extension ListAliasesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListAliasesInput: Swift.Equatable {
    /// Lists only aliases that are associated with the specified KMS key. Enter a KMS key in your Amazon Web Services account. This parameter is optional. If you omit it, ListAliases returns all aliases in the account and Region. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    public var keyId: Swift.String?
    /// Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.
    public var limit: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
    public var marker: Swift.String?

    public init (
        keyId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        marker: Swift.String? = nil
    )
    {
        self.keyId = keyId
        self.limit = limit
        self.marker = marker
    }
}

struct ListAliasesInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let limit: Swift.Int?
    let marker: Swift.String?
}

extension ListAliasesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case limit = "Limit"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListAliasesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAliasesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidMarker" : self = .invalidMarkerException(try InvalidMarkerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListAliasesOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case invalidArnException(InvalidArnException)
    case invalidMarkerException(InvalidMarkerException)
    case kMSInternalException(KMSInternalException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAliasesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListAliasesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.aliases = output.aliases
            self.nextMarker = output.nextMarker
            self.truncated = output.truncated
        } else {
            self.aliases = nil
            self.nextMarker = nil
            self.truncated = false
        }
    }
}

public struct ListAliasesOutputResponse: Swift.Equatable {
    /// A list of aliases.
    public var aliases: [KMSClientTypes.AliasListEntry]?
    /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
    public var nextMarker: Swift.String?
    /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in thisresponse to the Marker parameter in a subsequent request.
    public var truncated: Swift.Bool

    public init (
        aliases: [KMSClientTypes.AliasListEntry]? = nil,
        nextMarker: Swift.String? = nil,
        truncated: Swift.Bool = false
    )
    {
        self.aliases = aliases
        self.nextMarker = nextMarker
        self.truncated = truncated
    }
}

struct ListAliasesOutputResponseBody: Swift.Equatable {
    let aliases: [KMSClientTypes.AliasListEntry]?
    let nextMarker: Swift.String?
    let truncated: Swift.Bool
}

extension ListAliasesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliases = "Aliases"
        case nextMarker = "NextMarker"
        case truncated = "Truncated"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasesContainer = try containerValues.decodeIfPresent([KMSClientTypes.AliasListEntry?].self, forKey: .aliases)
        var aliasesDecoded0:[KMSClientTypes.AliasListEntry]? = nil
        if let aliasesContainer = aliasesContainer {
            aliasesDecoded0 = [KMSClientTypes.AliasListEntry]()
            for structure0 in aliasesContainer {
                if let structure0 = structure0 {
                    aliasesDecoded0?.append(structure0)
                }
            }
        }
        aliases = aliasesDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let truncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .truncated) ?? false
        truncated = truncatedDecoded
    }
}

extension ListGrantsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantId = "GrantId"
        case granteePrincipal = "GranteePrincipal"
        case keyId = "KeyId"
        case limit = "Limit"
        case marker = "Marker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let grantId = self.grantId {
            try encodeContainer.encode(grantId, forKey: .grantId)
        }
        if let granteePrincipal = self.granteePrincipal {
            try encodeContainer.encode(granteePrincipal, forKey: .granteePrincipal)
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let marker = self.marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
    }
}

extension ListGrantsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListGrantsInput: Swift.Equatable {
    /// Returns only the grant with the specified grant ID. The grant ID uniquely identifies the grant.
    public var grantId: Swift.String?
    /// Returns only grants where the specified principal is the grantee principal for the grant.
    public var granteePrincipal: Swift.String?
    /// Returns only grants for the specified KMS key. This parameter is required. Specify the key ID or key ARN of the KMS key. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.
    public var limit: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
    public var marker: Swift.String?

    public init (
        grantId: Swift.String? = nil,
        granteePrincipal: Swift.String? = nil,
        keyId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        marker: Swift.String? = nil
    )
    {
        self.grantId = grantId
        self.granteePrincipal = granteePrincipal
        self.keyId = keyId
        self.limit = limit
        self.marker = marker
    }
}

struct ListGrantsInputBody: Swift.Equatable {
    let limit: Swift.Int?
    let marker: Swift.String?
    let keyId: Swift.String?
    let grantId: Swift.String?
    let granteePrincipal: Swift.String?
}

extension ListGrantsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantId = "GrantId"
        case granteePrincipal = "GranteePrincipal"
        case keyId = "KeyId"
        case limit = "Limit"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let grantIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .grantId)
        grantId = grantIdDecoded
        let granteePrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .granteePrincipal)
        granteePrincipal = granteePrincipalDecoded
    }
}

extension ListGrantsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListGrantsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGrantId" : self = .invalidGrantIdException(try InvalidGrantIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidMarker" : self = .invalidMarkerException(try InvalidMarkerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListGrantsOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case invalidArnException(InvalidArnException)
    case invalidGrantIdException(InvalidGrantIdException)
    case invalidMarkerException(InvalidMarkerException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListGrantsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListGrantsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.grants = output.grants
            self.nextMarker = output.nextMarker
            self.truncated = output.truncated
        } else {
            self.grants = nil
            self.nextMarker = nil
            self.truncated = false
        }
    }
}

public struct ListGrantsOutputResponse: Swift.Equatable {
    /// A list of grants.
    public var grants: [KMSClientTypes.GrantListEntry]?
    /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
    public var nextMarker: Swift.String?
    /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in thisresponse to the Marker parameter in a subsequent request.
    public var truncated: Swift.Bool

    public init (
        grants: [KMSClientTypes.GrantListEntry]? = nil,
        nextMarker: Swift.String? = nil,
        truncated: Swift.Bool = false
    )
    {
        self.grants = grants
        self.nextMarker = nextMarker
        self.truncated = truncated
    }
}

struct ListGrantsOutputResponseBody: Swift.Equatable {
    let grants: [KMSClientTypes.GrantListEntry]?
    let nextMarker: Swift.String?
    let truncated: Swift.Bool
}

extension ListGrantsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grants = "Grants"
        case nextMarker = "NextMarker"
        case truncated = "Truncated"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let grantsContainer = try containerValues.decodeIfPresent([KMSClientTypes.GrantListEntry?].self, forKey: .grants)
        var grantsDecoded0:[KMSClientTypes.GrantListEntry]? = nil
        if let grantsContainer = grantsContainer {
            grantsDecoded0 = [KMSClientTypes.GrantListEntry]()
            for structure0 in grantsContainer {
                if let structure0 = structure0 {
                    grantsDecoded0?.append(structure0)
                }
            }
        }
        grants = grantsDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let truncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .truncated) ?? false
        truncated = truncatedDecoded
    }
}

extension ListKeyPoliciesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case limit = "Limit"
        case marker = "Marker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let marker = self.marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
    }
}

extension ListKeyPoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListKeyPoliciesInput: Swift.Equatable {
    /// Gets the names of key policies for the specified KMS key. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 1000, inclusive. If you do not include a value, it defaults to 100. Only one policy can be attached to a key.
    public var limit: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
    public var marker: Swift.String?

    public init (
        keyId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        marker: Swift.String? = nil
    )
    {
        self.keyId = keyId
        self.limit = limit
        self.marker = marker
    }
}

struct ListKeyPoliciesInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let limit: Swift.Int?
    let marker: Swift.String?
}

extension ListKeyPoliciesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case limit = "Limit"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListKeyPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListKeyPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListKeyPoliciesOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case invalidArnException(InvalidArnException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListKeyPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListKeyPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.policyNames = output.policyNames
            self.truncated = output.truncated
        } else {
            self.nextMarker = nil
            self.policyNames = nil
            self.truncated = false
        }
    }
}

public struct ListKeyPoliciesOutputResponse: Swift.Equatable {
    /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
    public var nextMarker: Swift.String?
    /// A list of key policy names. The only valid value is default.
    public var policyNames: [Swift.String]?
    /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in thisresponse to the Marker parameter in a subsequent request.
    public var truncated: Swift.Bool

    public init (
        nextMarker: Swift.String? = nil,
        policyNames: [Swift.String]? = nil,
        truncated: Swift.Bool = false
    )
    {
        self.nextMarker = nextMarker
        self.policyNames = policyNames
        self.truncated = truncated
    }
}

struct ListKeyPoliciesOutputResponseBody: Swift.Equatable {
    let policyNames: [Swift.String]?
    let nextMarker: Swift.String?
    let truncated: Swift.Bool
}

extension ListKeyPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case policyNames = "PolicyNames"
        case truncated = "Truncated"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .policyNames)
        var policyNamesDecoded0:[Swift.String]? = nil
        if let policyNamesContainer = policyNamesContainer {
            policyNamesDecoded0 = [Swift.String]()
            for string0 in policyNamesContainer {
                if let string0 = string0 {
                    policyNamesDecoded0?.append(string0)
                }
            }
        }
        policyNames = policyNamesDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let truncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .truncated) ?? false
        truncated = truncatedDecoded
    }
}

extension ListKeysInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case marker = "Marker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let marker = self.marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
    }
}

extension ListKeysInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListKeysInput: Swift.Equatable {
    /// Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 1000, inclusive. If you do not include a value, it defaults to 100.
    public var limit: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
    public var marker: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        marker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.marker = marker
    }
}

struct ListKeysInputBody: Swift.Equatable {
    let limit: Swift.Int?
    let marker: Swift.String?
}

extension ListKeysInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListKeysOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListKeysOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidMarker" : self = .invalidMarkerException(try InvalidMarkerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListKeysOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case invalidMarkerException(InvalidMarkerException)
    case kMSInternalException(KMSInternalException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListKeysOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListKeysOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keys = output.keys
            self.nextMarker = output.nextMarker
            self.truncated = output.truncated
        } else {
            self.keys = nil
            self.nextMarker = nil
            self.truncated = false
        }
    }
}

public struct ListKeysOutputResponse: Swift.Equatable {
    /// A list of KMS keys.
    public var keys: [KMSClientTypes.KeyListEntry]?
    /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
    public var nextMarker: Swift.String?
    /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in thisresponse to the Marker parameter in a subsequent request.
    public var truncated: Swift.Bool

    public init (
        keys: [KMSClientTypes.KeyListEntry]? = nil,
        nextMarker: Swift.String? = nil,
        truncated: Swift.Bool = false
    )
    {
        self.keys = keys
        self.nextMarker = nextMarker
        self.truncated = truncated
    }
}

struct ListKeysOutputResponseBody: Swift.Equatable {
    let keys: [KMSClientTypes.KeyListEntry]?
    let nextMarker: Swift.String?
    let truncated: Swift.Bool
}

extension ListKeysOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keys = "Keys"
        case nextMarker = "NextMarker"
        case truncated = "Truncated"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keysContainer = try containerValues.decodeIfPresent([KMSClientTypes.KeyListEntry?].self, forKey: .keys)
        var keysDecoded0:[KMSClientTypes.KeyListEntry]? = nil
        if let keysContainer = keysContainer {
            keysDecoded0 = [KMSClientTypes.KeyListEntry]()
            for structure0 in keysContainer {
                if let structure0 = structure0 {
                    keysDecoded0?.append(structure0)
                }
            }
        }
        keys = keysDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let truncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .truncated) ?? false
        truncated = truncatedDecoded
    }
}

extension ListResourceTagsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case limit = "Limit"
        case marker = "Marker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let marker = self.marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
    }
}

extension ListResourceTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListResourceTagsInput: Swift.Equatable {
    /// Gets tags on the specified KMS key. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 50, inclusive. If you do not include a value, it defaults to 50.
    public var limit: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received. Do not attempt to construct this value. Use only the value of NextMarker from the truncated response you just received.
    public var marker: Swift.String?

    public init (
        keyId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        marker: Swift.String? = nil
    )
    {
        self.keyId = keyId
        self.limit = limit
        self.marker = marker
    }
}

struct ListResourceTagsInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let limit: Swift.Int?
    let marker: Swift.String?
}

extension ListResourceTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case limit = "Limit"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListResourceTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListResourceTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidMarker" : self = .invalidMarkerException(try InvalidMarkerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListResourceTagsOutputError: Swift.Error, Swift.Equatable {
    case invalidArnException(InvalidArnException)
    case invalidMarkerException(InvalidMarkerException)
    case kMSInternalException(KMSInternalException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListResourceTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListResourceTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.tags = output.tags
            self.truncated = output.truncated
        } else {
            self.nextMarker = nil
            self.tags = nil
            self.truncated = false
        }
    }
}

public struct ListResourceTagsOutputResponse: Swift.Equatable {
    /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request. Do not assume or infer any information from this value.
    public var nextMarker: Swift.String?
    /// A list of tags. Each tag consists of a tag key and a tag value. Tagging or untagging a KMS key can allow or deny permission to the KMS key. For details, see [ABAC for KMS](https://docs.aws.amazon.com/kms/latest/developerguide/abac.html) in the Key Management Service Developer Guide.
    public var tags: [KMSClientTypes.Tag]?
    /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in thisresponse to the Marker parameter in a subsequent request.
    public var truncated: Swift.Bool

    public init (
        nextMarker: Swift.String? = nil,
        tags: [KMSClientTypes.Tag]? = nil,
        truncated: Swift.Bool = false
    )
    {
        self.nextMarker = nextMarker
        self.tags = tags
        self.truncated = truncated
    }
}

struct ListResourceTagsOutputResponseBody: Swift.Equatable {
    let tags: [KMSClientTypes.Tag]?
    let nextMarker: Swift.String?
    let truncated: Swift.Bool
}

extension ListResourceTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case tags = "Tags"
        case truncated = "Truncated"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([KMSClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[KMSClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [KMSClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let truncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .truncated) ?? false
        truncated = truncatedDecoded
    }
}

extension ListRetirableGrantsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case marker = "Marker"
        case retiringPrincipal = "RetiringPrincipal"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let marker = self.marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
        if let retiringPrincipal = self.retiringPrincipal {
            try encodeContainer.encode(retiringPrincipal, forKey: .retiringPrincipal)
        }
    }
}

extension ListRetirableGrantsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListRetirableGrantsInput: Swift.Equatable {
    /// Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.
    public var limit: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
    public var marker: Swift.String?
    /// The retiring principal for which to list grants. Enter a principal in your Amazon Web Services account. To specify the retiring principal, use the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of an Amazon Web Services principal. Valid Amazon Web Services principals include Amazon Web Services accounts (root), IAM users, federated users, and assumed role users. For examples of the ARN syntax for specifying a principal, see [Amazon Web Services Identity and Access Management (IAM)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam) in the Example ARNs section of the Amazon Web Services General Reference.
    /// This member is required.
    public var retiringPrincipal: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        marker: Swift.String? = nil,
        retiringPrincipal: Swift.String? = nil
    )
    {
        self.limit = limit
        self.marker = marker
        self.retiringPrincipal = retiringPrincipal
    }
}

struct ListRetirableGrantsInputBody: Swift.Equatable {
    let limit: Swift.Int?
    let marker: Swift.String?
    let retiringPrincipal: Swift.String?
}

extension ListRetirableGrantsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case marker = "Marker"
        case retiringPrincipal = "RetiringPrincipal"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let retiringPrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .retiringPrincipal)
        retiringPrincipal = retiringPrincipalDecoded
    }
}

extension ListRetirableGrantsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRetirableGrantsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidMarker" : self = .invalidMarkerException(try InvalidMarkerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListRetirableGrantsOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case invalidArnException(InvalidArnException)
    case invalidMarkerException(InvalidMarkerException)
    case kMSInternalException(KMSInternalException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRetirableGrantsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListRetirableGrantsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.grants = output.grants
            self.nextMarker = output.nextMarker
            self.truncated = output.truncated
        } else {
            self.grants = nil
            self.nextMarker = nil
            self.truncated = false
        }
    }
}

public struct ListRetirableGrantsOutputResponse: Swift.Equatable {
    /// A list of grants.
    public var grants: [KMSClientTypes.GrantListEntry]?
    /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
    public var nextMarker: Swift.String?
    /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in thisresponse to the Marker parameter in a subsequent request.
    public var truncated: Swift.Bool

    public init (
        grants: [KMSClientTypes.GrantListEntry]? = nil,
        nextMarker: Swift.String? = nil,
        truncated: Swift.Bool = false
    )
    {
        self.grants = grants
        self.nextMarker = nextMarker
        self.truncated = truncated
    }
}

struct ListRetirableGrantsOutputResponseBody: Swift.Equatable {
    let grants: [KMSClientTypes.GrantListEntry]?
    let nextMarker: Swift.String?
    let truncated: Swift.Bool
}

extension ListRetirableGrantsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grants = "Grants"
        case nextMarker = "NextMarker"
        case truncated = "Truncated"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let grantsContainer = try containerValues.decodeIfPresent([KMSClientTypes.GrantListEntry?].self, forKey: .grants)
        var grantsDecoded0:[KMSClientTypes.GrantListEntry]? = nil
        if let grantsContainer = grantsContainer {
            grantsDecoded0 = [KMSClientTypes.GrantListEntry]()
            for structure0 in grantsContainer {
                if let structure0 = structure0 {
                    grantsDecoded0?.append(structure0)
                }
            }
        }
        grants = grantsDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let truncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .truncated) ?? false
        truncated = truncatedDecoded
    }
}

extension KMSClientTypes {
    public enum MacAlgorithmSpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hmacSha224
        case hmacSha256
        case hmacSha384
        case hmacSha512
        case sdkUnknown(Swift.String)

        public static var allCases: [MacAlgorithmSpec] {
            return [
                .hmacSha224,
                .hmacSha256,
                .hmacSha384,
                .hmacSha512,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hmacSha224: return "HMAC_SHA_224"
            case .hmacSha256: return "HMAC_SHA_256"
            case .hmacSha384: return "HMAC_SHA_384"
            case .hmacSha512: return "HMAC_SHA_512"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MacAlgorithmSpec(rawValue: rawValue) ?? MacAlgorithmSpec.sdkUnknown(rawValue)
        }
    }
}

extension MalformedPolicyDocumentException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: MalformedPolicyDocumentExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the specified policy is not syntactically or semantically correct.
public struct MalformedPolicyDocumentException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MalformedPolicyDocumentExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension MalformedPolicyDocumentExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KMSClientTypes {
    public enum MessageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case digest
        case raw
        case sdkUnknown(Swift.String)

        public static var allCases: [MessageType] {
            return [
                .digest,
                .raw,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .digest: return "DIGEST"
            case .raw: return "RAW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MessageType(rawValue: rawValue) ?? MessageType.sdkUnknown(rawValue)
        }
    }
}

extension KMSClientTypes.MultiRegionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case multiRegionKeyType = "MultiRegionKeyType"
        case primaryKey = "PrimaryKey"
        case replicaKeys = "ReplicaKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let multiRegionKeyType = self.multiRegionKeyType {
            try encodeContainer.encode(multiRegionKeyType.rawValue, forKey: .multiRegionKeyType)
        }
        if let primaryKey = self.primaryKey {
            try encodeContainer.encode(primaryKey, forKey: .primaryKey)
        }
        if let replicaKeys = replicaKeys {
            var replicaKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicaKeys)
            for multiregionkey0 in replicaKeys {
                try replicaKeysContainer.encode(multiregionkey0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multiRegionKeyTypeDecoded = try containerValues.decodeIfPresent(KMSClientTypes.MultiRegionKeyType.self, forKey: .multiRegionKeyType)
        multiRegionKeyType = multiRegionKeyTypeDecoded
        let primaryKeyDecoded = try containerValues.decodeIfPresent(KMSClientTypes.MultiRegionKey.self, forKey: .primaryKey)
        primaryKey = primaryKeyDecoded
        let replicaKeysContainer = try containerValues.decodeIfPresent([KMSClientTypes.MultiRegionKey?].self, forKey: .replicaKeys)
        var replicaKeysDecoded0:[KMSClientTypes.MultiRegionKey]? = nil
        if let replicaKeysContainer = replicaKeysContainer {
            replicaKeysDecoded0 = [KMSClientTypes.MultiRegionKey]()
            for structure0 in replicaKeysContainer {
                if let structure0 = structure0 {
                    replicaKeysDecoded0?.append(structure0)
                }
            }
        }
        replicaKeys = replicaKeysDecoded0
    }
}

extension KMSClientTypes {
    /// Describes the configuration of this multi-Region key. This field appears only when the KMS key is a primary or replica of a multi-Region key. For more information about any listed KMS key, use the [DescribeKey] operation.
    public struct MultiRegionConfiguration: Swift.Equatable {
        /// Indicates whether the KMS key is a PRIMARY or REPLICA key.
        public var multiRegionKeyType: KMSClientTypes.MultiRegionKeyType?
        /// Displays the key ARN and Region of the primary key. This field includes the current KMS key if it is the primary key.
        public var primaryKey: KMSClientTypes.MultiRegionKey?
        /// displays the key ARNs and Regions of all replica keys. This field includes the current KMS key if it is a replica key.
        public var replicaKeys: [KMSClientTypes.MultiRegionKey]?

        public init (
            multiRegionKeyType: KMSClientTypes.MultiRegionKeyType? = nil,
            primaryKey: KMSClientTypes.MultiRegionKey? = nil,
            replicaKeys: [KMSClientTypes.MultiRegionKey]? = nil
        )
        {
            self.multiRegionKeyType = multiRegionKeyType
            self.primaryKey = primaryKey
            self.replicaKeys = replicaKeys
        }
    }

}

extension KMSClientTypes.MultiRegionKey: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case region = "Region"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
    }
}

extension KMSClientTypes {
    /// Describes the primary or replica key in a multi-Region key.
    public struct MultiRegionKey: Swift.Equatable {
        /// Displays the key ARN of a primary or replica key of a multi-Region key.
        public var arn: Swift.String?
        /// Displays the Amazon Web Services Region of a primary or replica key in a multi-Region key.
        public var region: Swift.String?

        public init (
            arn: Swift.String? = nil,
            region: Swift.String? = nil
        )
        {
            self.arn = arn
            self.region = region
        }
    }

}

extension KMSClientTypes {
    public enum MultiRegionKeyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case primary
        case replica
        case sdkUnknown(Swift.String)

        public static var allCases: [MultiRegionKeyType] {
            return [
                .primary,
                .replica,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .primary: return "PRIMARY"
            case .replica: return "REPLICA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MultiRegionKeyType(rawValue: rawValue) ?? MultiRegionKeyType.sdkUnknown(rawValue)
        }
    }
}

extension NotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: NotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the specified entity or resource could not be found.
public struct NotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension NotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KMSClientTypes {
    public enum OriginType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsCloudhsm
        case awsKms
        case external
        case externalKeyStore
        case sdkUnknown(Swift.String)

        public static var allCases: [OriginType] {
            return [
                .awsCloudhsm,
                .awsKms,
                .external,
                .externalKeyStore,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsCloudhsm: return "AWS_CLOUDHSM"
            case .awsKms: return "AWS_KMS"
            case .external: return "EXTERNAL"
            case .externalKeyStore: return "EXTERNAL_KEY_STORE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OriginType(rawValue: rawValue) ?? OriginType.sdkUnknown(rawValue)
        }
    }
}

extension PutKeyPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bypassPolicyLockoutSafetyCheck = "BypassPolicyLockoutSafetyCheck"
        case keyId = "KeyId"
        case policy = "Policy"
        case policyName = "PolicyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bypassPolicyLockoutSafetyCheck != false {
            try encodeContainer.encode(bypassPolicyLockoutSafetyCheck, forKey: .bypassPolicyLockoutSafetyCheck)
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let policy = self.policy {
            try encodeContainer.encode(policy, forKey: .policy)
        }
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
    }
}

extension PutKeyPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutKeyPolicyInput: Swift.Equatable {
    /// A flag to indicate whether to bypass the key policy lockout safety check. Setting this value to true increases the risk that the KMS key becomes unmanageable. Do not set this value to true indiscriminately. For more information, refer to the scenario in the [Default Key Policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam) section in the Key Management Service Developer Guide. Use this parameter only when you intend to prevent the principal that is making the request from making a subsequent PutKeyPolicy request on the KMS key. The default value is false.
    public var bypassPolicyLockoutSafetyCheck: Swift.Bool
    /// Sets the key policy on the specified KMS key. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// The key policy to attach to the KMS key. The key policy must meet the following criteria:
    ///
    /// * If you don't set BypassPolicyLockoutSafetyCheck to true, the key policy must allow the principal that is making the PutKeyPolicy request to make a subsequent PutKeyPolicy request on the KMS key. This reduces the risk that the KMS key becomes unmanageable. For more information, refer to the scenario in the [Default Key Policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam) section of the Key Management Service Developer Guide.
    ///
    /// * Each statement in the key policy must contain one or more principals. The principals in the key policy must exist and be visible to KMS. When you create a new Amazon Web Services principal (for example, an IAM user or role), you might need to enforce a delay before including the new principal in a key policy because the new principal might not be immediately visible to KMS. For more information, see [Changes that I make are not always immediately visible](https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency) in the Amazon Web Services Identity and Access Management User Guide.
    ///
    ///
    /// A key policy document can include only the following characters:
    ///
    /// * Printable ASCII characters from the space character (\u0020) through the end of the ASCII character range.
    ///
    /// * Printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF).
    ///
    /// * The tab (\u0009), line feed (\u000A), and carriage return (\u000D) special characters
    ///
    ///
    /// For information about key policies, see [Key policies in KMS](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html) in the Key Management Service Developer Guide.For help writing and formatting a JSON policy document, see the [IAM JSON Policy Reference](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html) in the Identity and Access Management User Guide .
    /// This member is required.
    public var policy: Swift.String?
    /// The name of the key policy. The only valid value is default.
    /// This member is required.
    public var policyName: Swift.String?

    public init (
        bypassPolicyLockoutSafetyCheck: Swift.Bool = false,
        keyId: Swift.String? = nil,
        policy: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck
        self.keyId = keyId
        self.policy = policy
        self.policyName = policyName
    }
}

struct PutKeyPolicyInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let policyName: Swift.String?
    let policy: Swift.String?
    let bypassPolicyLockoutSafetyCheck: Swift.Bool
}

extension PutKeyPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bypassPolicyLockoutSafetyCheck = "BypassPolicyLockoutSafetyCheck"
        case keyId = "KeyId"
        case policy = "Policy"
        case policyName = "PolicyName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
        let bypassPolicyLockoutSafetyCheckDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .bypassPolicyLockoutSafetyCheck) ?? false
        bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheckDecoded
    }
}

extension PutKeyPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutKeyPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MalformedPolicyDocument" : self = .malformedPolicyDocumentException(try MalformedPolicyDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutKeyPolicyOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case invalidArnException(InvalidArnException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case limitExceededException(LimitExceededException)
    case malformedPolicyDocumentException(MalformedPolicyDocumentException)
    case notFoundException(NotFoundException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutKeyPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutKeyPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension ReEncryptInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ciphertextBlob = "CiphertextBlob"
        case destinationEncryptionAlgorithm = "DestinationEncryptionAlgorithm"
        case destinationEncryptionContext = "DestinationEncryptionContext"
        case destinationKeyId = "DestinationKeyId"
        case grantTokens = "GrantTokens"
        case sourceEncryptionAlgorithm = "SourceEncryptionAlgorithm"
        case sourceEncryptionContext = "SourceEncryptionContext"
        case sourceKeyId = "SourceKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ciphertextBlob = self.ciphertextBlob {
            try encodeContainer.encode(ciphertextBlob.base64EncodedString(), forKey: .ciphertextBlob)
        }
        if let destinationEncryptionAlgorithm = self.destinationEncryptionAlgorithm {
            try encodeContainer.encode(destinationEncryptionAlgorithm.rawValue, forKey: .destinationEncryptionAlgorithm)
        }
        if let destinationEncryptionContext = destinationEncryptionContext {
            var destinationEncryptionContextContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .destinationEncryptionContext)
            for (dictKey0, encryptionContextType0) in destinationEncryptionContext {
                try destinationEncryptionContextContainer.encode(encryptionContextType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let destinationKeyId = self.destinationKeyId {
            try encodeContainer.encode(destinationKeyId, forKey: .destinationKeyId)
        }
        if let grantTokens = grantTokens {
            var grantTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grantTokens)
            for granttokentype0 in grantTokens {
                try grantTokensContainer.encode(granttokentype0)
            }
        }
        if let sourceEncryptionAlgorithm = self.sourceEncryptionAlgorithm {
            try encodeContainer.encode(sourceEncryptionAlgorithm.rawValue, forKey: .sourceEncryptionAlgorithm)
        }
        if let sourceEncryptionContext = sourceEncryptionContext {
            var sourceEncryptionContextContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .sourceEncryptionContext)
            for (dictKey0, encryptionContextType0) in sourceEncryptionContext {
                try sourceEncryptionContextContainer.encode(encryptionContextType0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let sourceKeyId = self.sourceKeyId {
            try encodeContainer.encode(sourceKeyId, forKey: .sourceKeyId)
        }
    }
}

extension ReEncryptInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ReEncryptInput: Swift.Equatable {
    /// Ciphertext of the data to reencrypt.
    /// This member is required.
    public var ciphertextBlob: ClientRuntime.Data?
    /// Specifies the encryption algorithm that KMS will use to reecrypt the data after it has decrypted it. The default value, SYMMETRIC_DEFAULT, represents the encryption algorithm used for symmetric encryption KMS keys. This parameter is required only when the destination KMS key is an asymmetric KMS key.
    public var destinationEncryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
    /// Specifies that encryption context to use when the reencrypting the data. A destination encryption context is valid only when the destination KMS key is a symmetric encryption KMS key. The standard ciphertext format for asymmetric KMS keys does not include fields for metadata. An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Key Management Service Developer Guide.
    public var destinationEncryptionContext: [Swift.String:Swift.String]?
    /// A unique identifier for the KMS key that is used to reencrypt the data. Specify a symmetric encryption KMS key or an asymmetric KMS key with a KeyUsage value of ENCRYPT_DECRYPT. To find the KeyUsage value of a KMS key, use the [DescribeKey] operation. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    /// This member is required.
    public var destinationKeyId: Swift.String?
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Specifies the encryption algorithm that KMS will use to decrypt the ciphertext before it is reencrypted. The default value, SYMMETRIC_DEFAULT, represents the algorithm used for symmetric encryption KMS keys. Specify the same algorithm that was used to encrypt the ciphertext. If you specify a different algorithm, the decrypt attempt fails. This parameter is required only when the ciphertext was encrypted under an asymmetric KMS key.
    public var sourceEncryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
    /// Specifies the encryption context to use to decrypt the ciphertext. Enter the same encryption context that was used to encrypt the ciphertext. An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Key Management Service Developer Guide.
    public var sourceEncryptionContext: [Swift.String:Swift.String]?
    /// Specifies the KMS key that KMS will use to decrypt the ciphertext before it is re-encrypted. Enter a key ID of the KMS key that was used to encrypt the ciphertext. If you identify a different KMS key, the ReEncrypt operation throws an IncorrectKeyException. This parameter is required only when the ciphertext was encrypted under an asymmetric KMS key. If you used a symmetric encryption KMS key, KMS can get the KMS key from metadata that it adds to the symmetric ciphertext blob. However, it is always recommended as a best practice. This practice ensures that you use the KMS key that you intend. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    public var sourceKeyId: Swift.String?

    public init (
        ciphertextBlob: ClientRuntime.Data? = nil,
        destinationEncryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec? = nil,
        destinationEncryptionContext: [Swift.String:Swift.String]? = nil,
        destinationKeyId: Swift.String? = nil,
        grantTokens: [Swift.String]? = nil,
        sourceEncryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec? = nil,
        sourceEncryptionContext: [Swift.String:Swift.String]? = nil,
        sourceKeyId: Swift.String? = nil
    )
    {
        self.ciphertextBlob = ciphertextBlob
        self.destinationEncryptionAlgorithm = destinationEncryptionAlgorithm
        self.destinationEncryptionContext = destinationEncryptionContext
        self.destinationKeyId = destinationKeyId
        self.grantTokens = grantTokens
        self.sourceEncryptionAlgorithm = sourceEncryptionAlgorithm
        self.sourceEncryptionContext = sourceEncryptionContext
        self.sourceKeyId = sourceKeyId
    }
}

struct ReEncryptInputBody: Swift.Equatable {
    let ciphertextBlob: ClientRuntime.Data?
    let sourceEncryptionContext: [Swift.String:Swift.String]?
    let sourceKeyId: Swift.String?
    let destinationKeyId: Swift.String?
    let destinationEncryptionContext: [Swift.String:Swift.String]?
    let sourceEncryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
    let destinationEncryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
    let grantTokens: [Swift.String]?
}

extension ReEncryptInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ciphertextBlob = "CiphertextBlob"
        case destinationEncryptionAlgorithm = "DestinationEncryptionAlgorithm"
        case destinationEncryptionContext = "DestinationEncryptionContext"
        case destinationKeyId = "DestinationKeyId"
        case grantTokens = "GrantTokens"
        case sourceEncryptionAlgorithm = "SourceEncryptionAlgorithm"
        case sourceEncryptionContext = "SourceEncryptionContext"
        case sourceKeyId = "SourceKeyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ciphertextBlobDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .ciphertextBlob)
        ciphertextBlob = ciphertextBlobDecoded
        let sourceEncryptionContextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .sourceEncryptionContext)
        var sourceEncryptionContextDecoded0: [Swift.String:Swift.String]? = nil
        if let sourceEncryptionContextContainer = sourceEncryptionContextContainer {
            sourceEncryptionContextDecoded0 = [Swift.String:Swift.String]()
            for (key0, encryptioncontextvalue0) in sourceEncryptionContextContainer {
                if let encryptioncontextvalue0 = encryptioncontextvalue0 {
                    sourceEncryptionContextDecoded0?[key0] = encryptioncontextvalue0
                }
            }
        }
        sourceEncryptionContext = sourceEncryptionContextDecoded0
        let sourceKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceKeyId)
        sourceKeyId = sourceKeyIdDecoded
        let destinationKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationKeyId)
        destinationKeyId = destinationKeyIdDecoded
        let destinationEncryptionContextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .destinationEncryptionContext)
        var destinationEncryptionContextDecoded0: [Swift.String:Swift.String]? = nil
        if let destinationEncryptionContextContainer = destinationEncryptionContextContainer {
            destinationEncryptionContextDecoded0 = [Swift.String:Swift.String]()
            for (key0, encryptioncontextvalue0) in destinationEncryptionContextContainer {
                if let encryptioncontextvalue0 = encryptioncontextvalue0 {
                    destinationEncryptionContextDecoded0?[key0] = encryptioncontextvalue0
                }
            }
        }
        destinationEncryptionContext = destinationEncryptionContextDecoded0
        let sourceEncryptionAlgorithmDecoded = try containerValues.decodeIfPresent(KMSClientTypes.EncryptionAlgorithmSpec.self, forKey: .sourceEncryptionAlgorithm)
        sourceEncryptionAlgorithm = sourceEncryptionAlgorithmDecoded
        let destinationEncryptionAlgorithmDecoded = try containerValues.decodeIfPresent(KMSClientTypes.EncryptionAlgorithmSpec.self, forKey: .destinationEncryptionAlgorithm)
        destinationEncryptionAlgorithm = destinationEncryptionAlgorithmDecoded
        let grantTokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .grantTokens)
        var grantTokensDecoded0:[Swift.String]? = nil
        if let grantTokensContainer = grantTokensContainer {
            grantTokensDecoded0 = [Swift.String]()
            for string0 in grantTokensContainer {
                if let string0 = string0 {
                    grantTokensDecoded0?.append(string0)
                }
            }
        }
        grantTokens = grantTokensDecoded0
    }
}

extension ReEncryptOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ReEncryptOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "Disabled" : self = .disabledException(try DisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncorrectKeyException" : self = .incorrectKeyException(try IncorrectKeyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCiphertext" : self = .invalidCiphertextException(try InvalidCiphertextException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGrantToken" : self = .invalidGrantTokenException(try InvalidGrantTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeyUsage" : self = .invalidKeyUsageException(try InvalidKeyUsageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KeyUnavailable" : self = .keyUnavailableException(try KeyUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ReEncryptOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case disabledException(DisabledException)
    case incorrectKeyException(IncorrectKeyException)
    case invalidCiphertextException(InvalidCiphertextException)
    case invalidGrantTokenException(InvalidGrantTokenException)
    case invalidKeyUsageException(InvalidKeyUsageException)
    case keyUnavailableException(KeyUnavailableException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ReEncryptOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ReEncryptOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.ciphertextBlob = output.ciphertextBlob
            self.destinationEncryptionAlgorithm = output.destinationEncryptionAlgorithm
            self.keyId = output.keyId
            self.sourceEncryptionAlgorithm = output.sourceEncryptionAlgorithm
            self.sourceKeyId = output.sourceKeyId
        } else {
            self.ciphertextBlob = nil
            self.destinationEncryptionAlgorithm = nil
            self.keyId = nil
            self.sourceEncryptionAlgorithm = nil
            self.sourceKeyId = nil
        }
    }
}

public struct ReEncryptOutputResponse: Swift.Equatable {
    /// The reencrypted data. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var ciphertextBlob: ClientRuntime.Data?
    /// The encryption algorithm that was used to reencrypt the data.
    public var destinationEncryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the KMS key that was used to reencrypt the data.
    public var keyId: Swift.String?
    /// The encryption algorithm that was used to decrypt the ciphertext before it was reencrypted.
    public var sourceEncryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
    /// Unique identifier of the KMS key used to originally encrypt the data.
    public var sourceKeyId: Swift.String?

    public init (
        ciphertextBlob: ClientRuntime.Data? = nil,
        destinationEncryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec? = nil,
        keyId: Swift.String? = nil,
        sourceEncryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec? = nil,
        sourceKeyId: Swift.String? = nil
    )
    {
        self.ciphertextBlob = ciphertextBlob
        self.destinationEncryptionAlgorithm = destinationEncryptionAlgorithm
        self.keyId = keyId
        self.sourceEncryptionAlgorithm = sourceEncryptionAlgorithm
        self.sourceKeyId = sourceKeyId
    }
}

struct ReEncryptOutputResponseBody: Swift.Equatable {
    let ciphertextBlob: ClientRuntime.Data?
    let sourceKeyId: Swift.String?
    let keyId: Swift.String?
    let sourceEncryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
    let destinationEncryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
}

extension ReEncryptOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ciphertextBlob = "CiphertextBlob"
        case destinationEncryptionAlgorithm = "DestinationEncryptionAlgorithm"
        case keyId = "KeyId"
        case sourceEncryptionAlgorithm = "SourceEncryptionAlgorithm"
        case sourceKeyId = "SourceKeyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ciphertextBlobDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .ciphertextBlob)
        ciphertextBlob = ciphertextBlobDecoded
        let sourceKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceKeyId)
        sourceKeyId = sourceKeyIdDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let sourceEncryptionAlgorithmDecoded = try containerValues.decodeIfPresent(KMSClientTypes.EncryptionAlgorithmSpec.self, forKey: .sourceEncryptionAlgorithm)
        sourceEncryptionAlgorithm = sourceEncryptionAlgorithmDecoded
        let destinationEncryptionAlgorithmDecoded = try containerValues.decodeIfPresent(KMSClientTypes.EncryptionAlgorithmSpec.self, forKey: .destinationEncryptionAlgorithm)
        destinationEncryptionAlgorithm = destinationEncryptionAlgorithmDecoded
    }
}

extension ReplicateKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bypassPolicyLockoutSafetyCheck = "BypassPolicyLockoutSafetyCheck"
        case description = "Description"
        case keyId = "KeyId"
        case policy = "Policy"
        case replicaRegion = "ReplicaRegion"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bypassPolicyLockoutSafetyCheck != false {
            try encodeContainer.encode(bypassPolicyLockoutSafetyCheck, forKey: .bypassPolicyLockoutSafetyCheck)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let policy = self.policy {
            try encodeContainer.encode(policy, forKey: .policy)
        }
        if let replicaRegion = self.replicaRegion {
            try encodeContainer.encode(replicaRegion, forKey: .replicaRegion)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension ReplicateKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ReplicateKeyInput: Swift.Equatable {
    /// A flag to indicate whether to bypass the key policy lockout safety check. Setting this value to true increases the risk that the KMS key becomes unmanageable. Do not set this value to true indiscriminately. For more information, refer to the scenario in the [Default Key Policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam) section in the Key Management Service Developer Guide. Use this parameter only when you intend to prevent the principal that is making the request from making a subsequent PutKeyPolicy request on the KMS key. The default value is false.
    public var bypassPolicyLockoutSafetyCheck: Swift.Bool
    /// A description of the KMS key. The default value is an empty string (no description). The description is not a shared property of multi-Region keys. You can specify the same description or a different description for each key in a set of related multi-Region keys. KMS does not synchronize this property.
    public var description: Swift.String?
    /// Identifies the multi-Region primary key that is being replicated. To determine whether a KMS key is a multi-Region primary key, use the [DescribeKey] operation to check the value of the MultiRegionKeyType property. Specify the key ID or key ARN of a multi-Region primary key. For example:
    ///
    /// * Key ID: mrk-1234abcd12ab34cd56ef1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// The key policy to attach to the KMS key. This parameter is optional. If you do not provide a key policy, KMS attaches the [default key policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default) to the KMS key. The key policy is not a shared property of multi-Region keys. You can specify the same key policy or a different key policy for each key in a set of related multi-Region keys. KMS does not synchronize this property. If you provide a key policy, it must meet the following criteria:
    ///
    /// * If you don't set BypassPolicyLockoutSafetyCheck to true, the key policy must give the caller kms:PutKeyPolicy permission on the replica key. This reduces the risk that the KMS key becomes unmanageable. For more information, refer to the scenario in the [Default Key Policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam) section of the Key Management Service Developer Guide .
    ///
    /// * Each statement in the key policy must contain one or more principals. The principals in the key policy must exist and be visible to KMS. When you create a new Amazon Web Services principal (for example, an IAM user or role), you might need to enforce a delay before including the new principal in a key policy because the new principal might not be immediately visible to KMS. For more information, see [Changes that I make are not always immediately visible](https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency) in the Identity and Access Management User Guide .
    ///
    ///
    /// A key policy document can include only the following characters:
    ///
    /// * Printable ASCII characters from the space character (\u0020) through the end of the ASCII character range.
    ///
    /// * Printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF).
    ///
    /// * The tab (\u0009), line feed (\u000A), and carriage return (\u000D) special characters
    ///
    ///
    /// For information about key policies, see [Key policies in KMS](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html) in the Key Management Service Developer Guide. For help writing and formatting a JSON policy document, see the [IAM JSON Policy Reference](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html) in the Identity and Access Management User Guide .
    public var policy: Swift.String?
    /// The Region ID of the Amazon Web Services Region for this replica key. Enter the Region ID, such as us-east-1 or ap-southeast-2. For a list of Amazon Web Services Regions in which KMS is supported, see [KMS service endpoints](https://docs.aws.amazon.com/general/latest/gr/kms.html#kms_region) in the Amazon Web Services General Reference. HMAC KMS keys are not supported in all Amazon Web Services Regions. If you try to replicate an HMAC KMS key in an Amazon Web Services Region in which HMAC keys are not supported, the ReplicateKey operation returns an UnsupportedOperationException. For a list of Regions in which HMAC KMS keys are supported, see [HMAC keys in KMS](https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html) in the Key Management Service Developer Guide. The replica must be in a different Amazon Web Services Region than its primary key and other replicas of that primary key, but in the same Amazon Web Services partition. KMS must be available in the replica Region. If the Region is not enabled by default, the Amazon Web Services account must be enabled in the Region. For information about Amazon Web Services partitions, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference. For information about enabling and disabling Regions, see [Enabling a Region](https://docs.aws.amazon.com/general/latest/gr/rande-manage.html#rande-manage-enable) and [Disabling a Region](https://docs.aws.amazon.com/general/latest/gr/rande-manage.html#rande-manage-disable) in the Amazon Web Services General Reference.
    /// This member is required.
    public var replicaRegion: Swift.String?
    /// Assigns one or more tags to the replica key. Use this parameter to tag the KMS key when it is created. To tag an existing KMS key, use the [TagResource] operation. Tagging or untagging a KMS key can allow or deny permission to the KMS key. For details, see [ABAC for KMS](https://docs.aws.amazon.com/kms/latest/developerguide/abac.html) in the Key Management Service Developer Guide. To use this parameter, you must have [kms:TagResource](https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html) permission in an IAM policy. Tags are not a shared property of multi-Region keys. You can specify the same tags or different tags for each key in a set of related multi-Region keys. KMS does not synchronize this property. Each tag consists of a tag key and a tag value. Both the tag key and the tag value are required, but the tag value can be an empty (null) string. You cannot have more than one tag on a KMS key with the same tag key. If you specify an existing tag key with a different tag value, KMS replaces the current tag value with the specified one. When you add tags to an Amazon Web Services resource, Amazon Web Services generates a cost allocation report with usage and costs aggregated by tags. Tags can also be used to control access to a KMS key. For details, see [Tagging Keys](https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html).
    public var tags: [KMSClientTypes.Tag]?

    public init (
        bypassPolicyLockoutSafetyCheck: Swift.Bool = false,
        description: Swift.String? = nil,
        keyId: Swift.String? = nil,
        policy: Swift.String? = nil,
        replicaRegion: Swift.String? = nil,
        tags: [KMSClientTypes.Tag]? = nil
    )
    {
        self.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck
        self.description = description
        self.keyId = keyId
        self.policy = policy
        self.replicaRegion = replicaRegion
        self.tags = tags
    }
}

struct ReplicateKeyInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let replicaRegion: Swift.String?
    let policy: Swift.String?
    let bypassPolicyLockoutSafetyCheck: Swift.Bool
    let description: Swift.String?
    let tags: [KMSClientTypes.Tag]?
}

extension ReplicateKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bypassPolicyLockoutSafetyCheck = "BypassPolicyLockoutSafetyCheck"
        case description = "Description"
        case keyId = "KeyId"
        case policy = "Policy"
        case replicaRegion = "ReplicaRegion"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let replicaRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicaRegion)
        replicaRegion = replicaRegionDecoded
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
        let bypassPolicyLockoutSafetyCheckDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .bypassPolicyLockoutSafetyCheck) ?? false
        bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheckDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([KMSClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[KMSClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [KMSClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ReplicateKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ReplicateKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExists" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "Disabled" : self = .disabledException(try DisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MalformedPolicyDocument" : self = .malformedPolicyDocumentException(try MalformedPolicyDocumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagException" : self = .tagException(try TagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ReplicateKeyOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case disabledException(DisabledException)
    case invalidArnException(InvalidArnException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case limitExceededException(LimitExceededException)
    case malformedPolicyDocumentException(MalformedPolicyDocumentException)
    case notFoundException(NotFoundException)
    case tagException(TagException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ReplicateKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ReplicateKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.replicaKeyMetadata = output.replicaKeyMetadata
            self.replicaPolicy = output.replicaPolicy
            self.replicaTags = output.replicaTags
        } else {
            self.replicaKeyMetadata = nil
            self.replicaPolicy = nil
            self.replicaTags = nil
        }
    }
}

public struct ReplicateKeyOutputResponse: Swift.Equatable {
    /// Displays details about the new replica key, including its Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) and [Key states of KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html). It also includes the ARN and Amazon Web Services Region of its primary key and other replica keys.
    public var replicaKeyMetadata: KMSClientTypes.KeyMetadata?
    /// The key policy of the new replica key. The value is a key policy document in JSON format.
    public var replicaPolicy: Swift.String?
    /// The tags on the new replica key. The value is a list of tag key and tag value pairs.
    public var replicaTags: [KMSClientTypes.Tag]?

    public init (
        replicaKeyMetadata: KMSClientTypes.KeyMetadata? = nil,
        replicaPolicy: Swift.String? = nil,
        replicaTags: [KMSClientTypes.Tag]? = nil
    )
    {
        self.replicaKeyMetadata = replicaKeyMetadata
        self.replicaPolicy = replicaPolicy
        self.replicaTags = replicaTags
    }
}

struct ReplicateKeyOutputResponseBody: Swift.Equatable {
    let replicaKeyMetadata: KMSClientTypes.KeyMetadata?
    let replicaPolicy: Swift.String?
    let replicaTags: [KMSClientTypes.Tag]?
}

extension ReplicateKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicaKeyMetadata = "ReplicaKeyMetadata"
        case replicaPolicy = "ReplicaPolicy"
        case replicaTags = "ReplicaTags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicaKeyMetadataDecoded = try containerValues.decodeIfPresent(KMSClientTypes.KeyMetadata.self, forKey: .replicaKeyMetadata)
        replicaKeyMetadata = replicaKeyMetadataDecoded
        let replicaPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicaPolicy)
        replicaPolicy = replicaPolicyDecoded
        let replicaTagsContainer = try containerValues.decodeIfPresent([KMSClientTypes.Tag?].self, forKey: .replicaTags)
        var replicaTagsDecoded0:[KMSClientTypes.Tag]? = nil
        if let replicaTagsContainer = replicaTagsContainer {
            replicaTagsDecoded0 = [KMSClientTypes.Tag]()
            for structure0 in replicaTagsContainer {
                if let structure0 = structure0 {
                    replicaTagsDecoded0?.append(structure0)
                }
            }
        }
        replicaTags = replicaTagsDecoded0
    }
}

extension RetireGrantInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantId = "GrantId"
        case grantToken = "GrantToken"
        case keyId = "KeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let grantId = self.grantId {
            try encodeContainer.encode(grantId, forKey: .grantId)
        }
        if let grantToken = self.grantToken {
            try encodeContainer.encode(grantToken, forKey: .grantToken)
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
    }
}

extension RetireGrantInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RetireGrantInput: Swift.Equatable {
    /// Identifies the grant to retire. To get the grant ID, use [CreateGrant], [ListGrants], or [ListRetirableGrants].
    ///
    /// * Grant ID Example - 0123456789012345678901234567890123456789012345678901234567890123
    public var grantId: Swift.String?
    /// Identifies the grant to be retired. You can use a grant token to identify a new grant even before it has achieved eventual consistency. Only the [CreateGrant] operation returns a grant token. For details, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Eventual consistency](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#terms-eventual-consistency) in the Key Management Service Developer Guide.
    public var grantToken: Swift.String?
    /// The key ARN KMS key associated with the grant. To find the key ARN, use the [ListKeys] operation. For example: arn:aws:kms:us-east-2:444455556666:key/1234abcd-12ab-34cd-56ef-1234567890ab
    public var keyId: Swift.String?

    public init (
        grantId: Swift.String? = nil,
        grantToken: Swift.String? = nil,
        keyId: Swift.String? = nil
    )
    {
        self.grantId = grantId
        self.grantToken = grantToken
        self.keyId = keyId
    }
}

struct RetireGrantInputBody: Swift.Equatable {
    let grantToken: Swift.String?
    let keyId: Swift.String?
    let grantId: Swift.String?
}

extension RetireGrantInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantId = "GrantId"
        case grantToken = "GrantToken"
        case keyId = "KeyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let grantTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .grantToken)
        grantToken = grantTokenDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let grantIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .grantId)
        grantId = grantIdDecoded
    }
}

extension RetireGrantOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RetireGrantOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGrantId" : self = .invalidGrantIdException(try InvalidGrantIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGrantToken" : self = .invalidGrantTokenException(try InvalidGrantTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RetireGrantOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case invalidArnException(InvalidArnException)
    case invalidGrantIdException(InvalidGrantIdException)
    case invalidGrantTokenException(InvalidGrantTokenException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RetireGrantOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RetireGrantOutputResponse: Swift.Equatable {

    public init () { }
}

extension RevokeGrantInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantId = "GrantId"
        case keyId = "KeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let grantId = self.grantId {
            try encodeContainer.encode(grantId, forKey: .grantId)
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
    }
}

extension RevokeGrantInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RevokeGrantInput: Swift.Equatable {
    /// Identifies the grant to revoke. To get the grant ID, use [CreateGrant], [ListGrants], or [ListRetirableGrants].
    /// This member is required.
    public var grantId: Swift.String?
    /// A unique identifier for the KMS key associated with the grant. To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. Specify the key ID or key ARN of the KMS key. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?

    public init (
        grantId: Swift.String? = nil,
        keyId: Swift.String? = nil
    )
    {
        self.grantId = grantId
        self.keyId = keyId
    }
}

struct RevokeGrantInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let grantId: Swift.String?
}

extension RevokeGrantInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantId = "GrantId"
        case keyId = "KeyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let grantIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .grantId)
        grantId = grantIdDecoded
    }
}

extension RevokeGrantOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RevokeGrantOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGrantId" : self = .invalidGrantIdException(try InvalidGrantIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RevokeGrantOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case invalidArnException(InvalidArnException)
    case invalidGrantIdException(InvalidGrantIdException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RevokeGrantOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RevokeGrantOutputResponse: Swift.Equatable {

    public init () { }
}

extension ScheduleKeyDeletionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case pendingWindowInDays = "PendingWindowInDays"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let pendingWindowInDays = self.pendingWindowInDays {
            try encodeContainer.encode(pendingWindowInDays, forKey: .pendingWindowInDays)
        }
    }
}

extension ScheduleKeyDeletionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ScheduleKeyDeletionInput: Swift.Equatable {
    /// The unique identifier of the KMS key to delete. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// The waiting period, specified in number of days. After the waiting period ends, KMS deletes the KMS key. If the KMS key is a multi-Region primary key with replica keys, the waiting period begins when the last of its replica keys is deleted. Otherwise, the waiting period begins immediately. This value is optional. If you include a value, it must be between 7 and 30, inclusive. If you do not include a value, it defaults to 30.
    public var pendingWindowInDays: Swift.Int?

    public init (
        keyId: Swift.String? = nil,
        pendingWindowInDays: Swift.Int? = nil
    )
    {
        self.keyId = keyId
        self.pendingWindowInDays = pendingWindowInDays
    }
}

struct ScheduleKeyDeletionInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let pendingWindowInDays: Swift.Int?
}

extension ScheduleKeyDeletionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case pendingWindowInDays = "PendingWindowInDays"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let pendingWindowInDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pendingWindowInDays)
        pendingWindowInDays = pendingWindowInDaysDecoded
    }
}

extension ScheduleKeyDeletionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ScheduleKeyDeletionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ScheduleKeyDeletionOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case invalidArnException(InvalidArnException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ScheduleKeyDeletionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ScheduleKeyDeletionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deletionDate = output.deletionDate
            self.keyId = output.keyId
            self.keyState = output.keyState
            self.pendingWindowInDays = output.pendingWindowInDays
        } else {
            self.deletionDate = nil
            self.keyId = nil
            self.keyState = nil
            self.pendingWindowInDays = nil
        }
    }
}

public struct ScheduleKeyDeletionOutputResponse: Swift.Equatable {
    /// The date and time after which KMS deletes the KMS key. If the KMS key is a multi-Region primary key with replica keys, this field does not appear. The deletion date for the primary key isn't known until its last replica key is deleted.
    public var deletionDate: ClientRuntime.Date?
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the KMS key whose deletion is scheduled.
    public var keyId: Swift.String?
    /// The current status of the KMS key. For more information about how key state affects the use of a KMS key, see [Key states of KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the Key Management Service Developer Guide.
    public var keyState: KMSClientTypes.KeyState?
    /// The waiting period before the KMS key is deleted. If the KMS key is a multi-Region primary key with replicas, the waiting period begins when the last of its replica keys is deleted. Otherwise, the waiting period begins immediately.
    public var pendingWindowInDays: Swift.Int?

    public init (
        deletionDate: ClientRuntime.Date? = nil,
        keyId: Swift.String? = nil,
        keyState: KMSClientTypes.KeyState? = nil,
        pendingWindowInDays: Swift.Int? = nil
    )
    {
        self.deletionDate = deletionDate
        self.keyId = keyId
        self.keyState = keyState
        self.pendingWindowInDays = pendingWindowInDays
    }
}

struct ScheduleKeyDeletionOutputResponseBody: Swift.Equatable {
    let keyId: Swift.String?
    let deletionDate: ClientRuntime.Date?
    let keyState: KMSClientTypes.KeyState?
    let pendingWindowInDays: Swift.Int?
}

extension ScheduleKeyDeletionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deletionDate = "DeletionDate"
        case keyId = "KeyId"
        case keyState = "KeyState"
        case pendingWindowInDays = "PendingWindowInDays"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let deletionDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .deletionDate)
        deletionDate = deletionDateDecoded
        let keyStateDecoded = try containerValues.decodeIfPresent(KMSClientTypes.KeyState.self, forKey: .keyState)
        keyState = keyStateDecoded
        let pendingWindowInDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pendingWindowInDays)
        pendingWindowInDays = pendingWindowInDaysDecoded
    }
}

extension SignInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SignInput(grantTokens: \(Swift.String(describing: grantTokens)), keyId: \(Swift.String(describing: keyId)), messageType: \(Swift.String(describing: messageType)), signingAlgorithm: \(Swift.String(describing: signingAlgorithm)), message: \"CONTENT_REDACTED\")"}
}

extension SignInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case message = "Message"
        case messageType = "MessageType"
        case signingAlgorithm = "SigningAlgorithm"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let grantTokens = grantTokens {
            var grantTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grantTokens)
            for granttokentype0 in grantTokens {
                try grantTokensContainer.encode(granttokentype0)
            }
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let message = self.message {
            try encodeContainer.encode(message.base64EncodedString(), forKey: .message)
        }
        if let messageType = self.messageType {
            try encodeContainer.encode(messageType.rawValue, forKey: .messageType)
        }
        if let signingAlgorithm = self.signingAlgorithm {
            try encodeContainer.encode(signingAlgorithm.rawValue, forKey: .signingAlgorithm)
        }
    }
}

extension SignInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SignInput: Swift.Equatable {
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Identifies an asymmetric KMS key. KMS uses the private key in the asymmetric KMS key to sign the message. The KeyUsage type of the KMS key must be SIGN_VERIFY. To find the KeyUsage of a KMS key, use the [DescribeKey] operation. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    /// This member is required.
    public var keyId: Swift.String?
    /// Specifies the message or message digest to sign. Messages can be 0-4096 bytes. To sign a larger message, provide the message digest. If you provide a message, KMS generates a hash digest of the message and then signs it.
    /// This member is required.
    public var message: ClientRuntime.Data?
    /// Tells KMS whether the value of the Message parameter is a message or message digest. The default value, RAW, indicates a message. To indicate a message digest, enter DIGEST.
    public var messageType: KMSClientTypes.MessageType?
    /// Specifies the signing algorithm to use when signing the message. Choose an algorithm that is compatible with the type and size of the specified asymmetric KMS key.
    /// This member is required.
    public var signingAlgorithm: KMSClientTypes.SigningAlgorithmSpec?

    public init (
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil,
        message: ClientRuntime.Data? = nil,
        messageType: KMSClientTypes.MessageType? = nil,
        signingAlgorithm: KMSClientTypes.SigningAlgorithmSpec? = nil
    )
    {
        self.grantTokens = grantTokens
        self.keyId = keyId
        self.message = message
        self.messageType = messageType
        self.signingAlgorithm = signingAlgorithm
    }
}

struct SignInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let message: ClientRuntime.Data?
    let messageType: KMSClientTypes.MessageType?
    let grantTokens: [Swift.String]?
    let signingAlgorithm: KMSClientTypes.SigningAlgorithmSpec?
}

extension SignInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case message = "Message"
        case messageType = "MessageType"
        case signingAlgorithm = "SigningAlgorithm"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let messageDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .message)
        message = messageDecoded
        let messageTypeDecoded = try containerValues.decodeIfPresent(KMSClientTypes.MessageType.self, forKey: .messageType)
        messageType = messageTypeDecoded
        let grantTokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .grantTokens)
        var grantTokensDecoded0:[Swift.String]? = nil
        if let grantTokensContainer = grantTokensContainer {
            grantTokensDecoded0 = [Swift.String]()
            for string0 in grantTokensContainer {
                if let string0 = string0 {
                    grantTokensDecoded0?.append(string0)
                }
            }
        }
        grantTokens = grantTokensDecoded0
        let signingAlgorithmDecoded = try containerValues.decodeIfPresent(KMSClientTypes.SigningAlgorithmSpec.self, forKey: .signingAlgorithm)
        signingAlgorithm = signingAlgorithmDecoded
    }
}

extension SignOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SignOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "Disabled" : self = .disabledException(try DisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGrantToken" : self = .invalidGrantTokenException(try InvalidGrantTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeyUsage" : self = .invalidKeyUsageException(try InvalidKeyUsageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KeyUnavailable" : self = .keyUnavailableException(try KeyUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SignOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case disabledException(DisabledException)
    case invalidGrantTokenException(InvalidGrantTokenException)
    case invalidKeyUsageException(InvalidKeyUsageException)
    case keyUnavailableException(KeyUnavailableException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SignOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SignOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keyId = output.keyId
            self.signature = output.signature
            self.signingAlgorithm = output.signingAlgorithm
        } else {
            self.keyId = nil
            self.signature = nil
            self.signingAlgorithm = nil
        }
    }
}

public struct SignOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the asymmetric KMS key that was used to sign the message.
    public var keyId: Swift.String?
    /// The cryptographic signature that was generated for the message.
    ///
    /// * When used with the supported RSA signing algorithms, the encoding of this value is defined by [PKCS #1 in RFC 8017](https://tools.ietf.org/html/rfc8017).
    ///
    /// * When used with the ECDSA_SHA_256, ECDSA_SHA_384, or ECDSA_SHA_512 signing algorithms, this value is a DER-encoded object as defined by ANS X9.62–2005 and [RFC 3279 Section 2.2.3](https://tools.ietf.org/html/rfc3279#section-2.2.3). This is the most commonly used signature format and is appropriate for most uses.
    ///
    ///
    /// When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var signature: ClientRuntime.Data?
    /// The signing algorithm that was used to sign the message.
    public var signingAlgorithm: KMSClientTypes.SigningAlgorithmSpec?

    public init (
        keyId: Swift.String? = nil,
        signature: ClientRuntime.Data? = nil,
        signingAlgorithm: KMSClientTypes.SigningAlgorithmSpec? = nil
    )
    {
        self.keyId = keyId
        self.signature = signature
        self.signingAlgorithm = signingAlgorithm
    }
}

struct SignOutputResponseBody: Swift.Equatable {
    let keyId: Swift.String?
    let signature: ClientRuntime.Data?
    let signingAlgorithm: KMSClientTypes.SigningAlgorithmSpec?
}

extension SignOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case signature = "Signature"
        case signingAlgorithm = "SigningAlgorithm"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let signatureDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .signature)
        signature = signatureDecoded
        let signingAlgorithmDecoded = try containerValues.decodeIfPresent(KMSClientTypes.SigningAlgorithmSpec.self, forKey: .signingAlgorithm)
        signingAlgorithm = signingAlgorithmDecoded
    }
}

extension KMSClientTypes {
    public enum SigningAlgorithmSpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ecdsaSha256
        case ecdsaSha384
        case ecdsaSha512
        case rsassaPkcs1V15Sha256
        case rsassaPkcs1V15Sha384
        case rsassaPkcs1V15Sha512
        case rsassaPssSha256
        case rsassaPssSha384
        case rsassaPssSha512
        case sm2dsa
        case sdkUnknown(Swift.String)

        public static var allCases: [SigningAlgorithmSpec] {
            return [
                .ecdsaSha256,
                .ecdsaSha384,
                .ecdsaSha512,
                .rsassaPkcs1V15Sha256,
                .rsassaPkcs1V15Sha384,
                .rsassaPkcs1V15Sha512,
                .rsassaPssSha256,
                .rsassaPssSha384,
                .rsassaPssSha512,
                .sm2dsa,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ecdsaSha256: return "ECDSA_SHA_256"
            case .ecdsaSha384: return "ECDSA_SHA_384"
            case .ecdsaSha512: return "ECDSA_SHA_512"
            case .rsassaPkcs1V15Sha256: return "RSASSA_PKCS1_V1_5_SHA_256"
            case .rsassaPkcs1V15Sha384: return "RSASSA_PKCS1_V1_5_SHA_384"
            case .rsassaPkcs1V15Sha512: return "RSASSA_PKCS1_V1_5_SHA_512"
            case .rsassaPssSha256: return "RSASSA_PSS_SHA_256"
            case .rsassaPssSha384: return "RSASSA_PSS_SHA_384"
            case .rsassaPssSha512: return "RSASSA_PSS_SHA_512"
            case .sm2dsa: return "SM2DSA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SigningAlgorithmSpec(rawValue: rawValue) ?? SigningAlgorithmSpec.sdkUnknown(rawValue)
        }
    }
}

extension KMSClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagKey = "TagKey"
        case tagValue = "TagValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tagKey = self.tagKey {
            try encodeContainer.encode(tagKey, forKey: .tagKey)
        }
        if let tagValue = self.tagValue {
            try encodeContainer.encode(tagValue, forKey: .tagValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tagKey)
        tagKey = tagKeyDecoded
        let tagValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tagValue)
        tagValue = tagValueDecoded
    }
}

extension KMSClientTypes {
    /// A key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings. For information about the rules that apply to tag keys and tag values, see [User-Defined Tag Restrictions](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/allocation-tag-restrictions.html) in the Amazon Web Services Billing and Cost Management User Guide.
    public struct Tag: Swift.Equatable {
        /// The key of the tag.
        /// This member is required.
        public var tagKey: Swift.String?
        /// The value of the tag.
        /// This member is required.
        public var tagValue: Swift.String?

        public init (
            tagKey: Swift.String? = nil,
            tagValue: Swift.String? = nil
        )
        {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }
    }

}

extension TagException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TagExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because one or more tags are not valid.
public struct TagException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TagExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TagExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// Identifies a customer managed key in the account and Region. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// One or more tags. Each tag consists of a tag key and a tag value. The tag value can be an empty (null) string. You cannot have more than one tag on a KMS key with the same tag key. If you specify an existing tag key with a different tag value, KMS replaces the current tag value with the specified one.
    /// This member is required.
    public var tags: [KMSClientTypes.Tag]?

    public init (
        keyId: Swift.String? = nil,
        tags: [KMSClientTypes.Tag]? = nil
    )
    {
        self.keyId = keyId
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let tags: [KMSClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([KMSClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[KMSClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [KMSClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagException" : self = .tagException(try TagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case invalidArnException(InvalidArnException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case tagException(TagException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UnsupportedOperationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UnsupportedOperationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because a specified parameter is not supported or a specified resource is not valid for this operation.
public struct UnsupportedOperationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UnsupportedOperationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnsupportedOperationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkeytype0 in tagKeys {
                try tagKeysContainer.encode(tagkeytype0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// Identifies the KMS key from which you are removing tags. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// One or more tag keys. Specify only the tag keys, not the tag values.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        keyId: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.keyId = keyId
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagException" : self = .tagException(try TagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case invalidArnException(InvalidArnException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case tagException(TagException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateAliasInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
        case targetKeyId = "TargetKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasName = self.aliasName {
            try encodeContainer.encode(aliasName, forKey: .aliasName)
        }
        if let targetKeyId = self.targetKeyId {
            try encodeContainer.encode(targetKeyId, forKey: .targetKeyId)
        }
    }
}

extension UpdateAliasInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateAliasInput: Swift.Equatable {
    /// Identifies the alias that is changing its KMS key. This value must begin with alias/ followed by the alias name, such as alias/ExampleAlias. You cannot use UpdateAlias to change the alias name.
    /// This member is required.
    public var aliasName: Swift.String?
    /// Identifies the [customer managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk) to associate with the alias. You don't have permission to associate an alias with an [Amazon Web Services managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk). The KMS key must be in the same Amazon Web Services account and Region as the alias. Also, the new target KMS key must be the same type as the current target KMS key (both symmetric or both asymmetric or both HMAC) and they must have the same key usage. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To verify that the alias is mapped to the correct KMS key, use [ListAliases].
    /// This member is required.
    public var targetKeyId: Swift.String?

    public init (
        aliasName: Swift.String? = nil,
        targetKeyId: Swift.String? = nil
    )
    {
        self.aliasName = aliasName
        self.targetKeyId = targetKeyId
    }
}

struct UpdateAliasInputBody: Swift.Equatable {
    let aliasName: Swift.String?
    let targetKeyId: Swift.String?
}

extension UpdateAliasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasName = "AliasName"
        case targetKeyId = "TargetKeyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasName)
        aliasName = aliasNameDecoded
        let targetKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetKeyId)
        targetKeyId = targetKeyIdDecoded
    }
}

extension UpdateAliasOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateAliasOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateAliasOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateAliasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateAliasOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateCustomKeyStoreInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateCustomKeyStoreInput(cloudHsmClusterId: \(Swift.String(describing: cloudHsmClusterId)), customKeyStoreId: \(Swift.String(describing: customKeyStoreId)), newCustomKeyStoreName: \(Swift.String(describing: newCustomKeyStoreName)), xksProxyAuthenticationCredential: \(Swift.String(describing: xksProxyAuthenticationCredential)), xksProxyConnectivity: \(Swift.String(describing: xksProxyConnectivity)), xksProxyUriEndpoint: \(Swift.String(describing: xksProxyUriEndpoint)), xksProxyUriPath: \(Swift.String(describing: xksProxyUriPath)), xksProxyVpcEndpointServiceName: \(Swift.String(describing: xksProxyVpcEndpointServiceName)), keyStorePassword: \"CONTENT_REDACTED\")"}
}

extension UpdateCustomKeyStoreInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudHsmClusterId = "CloudHsmClusterId"
        case customKeyStoreId = "CustomKeyStoreId"
        case keyStorePassword = "KeyStorePassword"
        case newCustomKeyStoreName = "NewCustomKeyStoreName"
        case xksProxyAuthenticationCredential = "XksProxyAuthenticationCredential"
        case xksProxyConnectivity = "XksProxyConnectivity"
        case xksProxyUriEndpoint = "XksProxyUriEndpoint"
        case xksProxyUriPath = "XksProxyUriPath"
        case xksProxyVpcEndpointServiceName = "XksProxyVpcEndpointServiceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudHsmClusterId = self.cloudHsmClusterId {
            try encodeContainer.encode(cloudHsmClusterId, forKey: .cloudHsmClusterId)
        }
        if let customKeyStoreId = self.customKeyStoreId {
            try encodeContainer.encode(customKeyStoreId, forKey: .customKeyStoreId)
        }
        if let keyStorePassword = self.keyStorePassword {
            try encodeContainer.encode(keyStorePassword, forKey: .keyStorePassword)
        }
        if let newCustomKeyStoreName = self.newCustomKeyStoreName {
            try encodeContainer.encode(newCustomKeyStoreName, forKey: .newCustomKeyStoreName)
        }
        if let xksProxyAuthenticationCredential = self.xksProxyAuthenticationCredential {
            try encodeContainer.encode(xksProxyAuthenticationCredential, forKey: .xksProxyAuthenticationCredential)
        }
        if let xksProxyConnectivity = self.xksProxyConnectivity {
            try encodeContainer.encode(xksProxyConnectivity.rawValue, forKey: .xksProxyConnectivity)
        }
        if let xksProxyUriEndpoint = self.xksProxyUriEndpoint {
            try encodeContainer.encode(xksProxyUriEndpoint, forKey: .xksProxyUriEndpoint)
        }
        if let xksProxyUriPath = self.xksProxyUriPath {
            try encodeContainer.encode(xksProxyUriPath, forKey: .xksProxyUriPath)
        }
        if let xksProxyVpcEndpointServiceName = self.xksProxyVpcEndpointServiceName {
            try encodeContainer.encode(xksProxyVpcEndpointServiceName, forKey: .xksProxyVpcEndpointServiceName)
        }
    }
}

extension UpdateCustomKeyStoreInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateCustomKeyStoreInput: Swift.Equatable {
    /// Associates the custom key store with a related CloudHSM cluster. This parameter is valid only for custom key stores with a CustomKeyStoreType of AWS_CLOUDHSM. Enter the cluster ID of the cluster that you used to create the custom key store or a cluster that shares a backup history and has the same cluster certificate as the original cluster. You cannot use this parameter to associate a custom key store with an unrelated cluster. In addition, the replacement cluster must [fulfill the requirements](https://docs.aws.amazon.com/kms/latest/developerguide/create-keystore.html#before-keystore) for a cluster associated with a custom key store. To view the cluster certificate of a cluster, use the [DescribeClusters](https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html) operation. To change this value, the CloudHSM key store must be disconnected.
    public var cloudHsmClusterId: Swift.String?
    /// Identifies the custom key store that you want to update. Enter the ID of the custom key store. To find the ID of a custom key store, use the [DescribeCustomKeyStores] operation.
    /// This member is required.
    public var customKeyStoreId: Swift.String?
    /// Enter the current password of the kmsuser crypto user (CU) in the CloudHSM cluster that is associated with the custom key store. This parameter is valid only for custom key stores with a CustomKeyStoreType of AWS_CLOUDHSM. This parameter tells KMS the current password of the kmsuser crypto user (CU). It does not set or change the password of any users in the CloudHSM cluster. To change this value, the CloudHSM key store must be disconnected.
    public var keyStorePassword: Swift.String?
    /// Changes the friendly name of the custom key store to the value that you specify. The custom key store name must be unique in the Amazon Web Services account. To change this value, an CloudHSM key store must be disconnected. An external key store can be connected or disconnected.
    public var newCustomKeyStoreName: Swift.String?
    /// Changes the credentials that KMS uses to sign requests to the external key store proxy (XKS proxy). This parameter is valid only for custom key stores with a CustomKeyStoreType of EXTERNAL_KEY_STORE. You must specify both the AccessKeyId and SecretAccessKey value in the authentication credential, even if you are only updating one value. This parameter doesn't establish or change your authentication credentials on the proxy. It just tells KMS the credential that you established with your external key store proxy. For example, if you rotate the credential on your external key store proxy, you can use this parameter to update the credential in KMS. You can change this value when the external key store is connected or disconnected.
    public var xksProxyAuthenticationCredential: KMSClientTypes.XksProxyAuthenticationCredentialType?
    /// Changes the connectivity setting for the external key store. To indicate that the external key store proxy uses a Amazon VPC endpoint service to communicate with KMS, specify VPC_ENDPOINT_SERVICE. Otherwise, specify PUBLIC_ENDPOINT. If you change the XksProxyConnectivity to VPC_ENDPOINT_SERVICE, you must also change the XksProxyUriEndpoint and add an XksProxyVpcEndpointServiceName value. If you change the XksProxyConnectivity to PUBLIC_ENDPOINT, you must also change the XksProxyUriEndpoint and specify a null or empty string for the XksProxyVpcEndpointServiceName value. To change this value, the external key store must be disconnected.
    public var xksProxyConnectivity: KMSClientTypes.XksProxyConnectivityType?
    /// Changes the URI endpoint that KMS uses to connect to your external key store proxy (XKS proxy). This parameter is valid only for custom key stores with a CustomKeyStoreType of EXTERNAL_KEY_STORE. For external key stores with an XksProxyConnectivity value of PUBLIC_ENDPOINT, the protocol must be HTTPS. For external key stores with an XksProxyConnectivity value of VPC_ENDPOINT_SERVICE, specify https:// followed by the private DNS name associated with the VPC endpoint service. Each external key store must use a different private DNS name. The combined XksProxyUriEndpoint and XksProxyUriPath values must be unique in the Amazon Web Services account and Region. To change this value, the external key store must be disconnected.
    public var xksProxyUriEndpoint: Swift.String?
    /// Changes the base path to the proxy APIs for this external key store. To find this value, see the documentation for your external key manager and external key store proxy (XKS proxy). This parameter is valid only for custom key stores with a CustomKeyStoreType of EXTERNAL_KEY_STORE. The value must start with / and must end with /kms/xks/v1, where v1 represents the version of the KMS external key store proxy API. You can include an optional prefix between the required elements such as /example/kms/xks/v1. The combined XksProxyUriEndpoint and XksProxyUriPath values must be unique in the Amazon Web Services account and Region. You can change this value when the external key store is connected or disconnected.
    public var xksProxyUriPath: Swift.String?
    /// Changes the name that KMS uses to identify the Amazon VPC endpoint service for your external key store proxy (XKS proxy). This parameter is valid when the CustomKeyStoreType is EXTERNAL_KEY_STORE and the XksProxyConnectivity is VPC_ENDPOINT_SERVICE. To change this value, the external key store must be disconnected.
    public var xksProxyVpcEndpointServiceName: Swift.String?

    public init (
        cloudHsmClusterId: Swift.String? = nil,
        customKeyStoreId: Swift.String? = nil,
        keyStorePassword: Swift.String? = nil,
        newCustomKeyStoreName: Swift.String? = nil,
        xksProxyAuthenticationCredential: KMSClientTypes.XksProxyAuthenticationCredentialType? = nil,
        xksProxyConnectivity: KMSClientTypes.XksProxyConnectivityType? = nil,
        xksProxyUriEndpoint: Swift.String? = nil,
        xksProxyUriPath: Swift.String? = nil,
        xksProxyVpcEndpointServiceName: Swift.String? = nil
    )
    {
        self.cloudHsmClusterId = cloudHsmClusterId
        self.customKeyStoreId = customKeyStoreId
        self.keyStorePassword = keyStorePassword
        self.newCustomKeyStoreName = newCustomKeyStoreName
        self.xksProxyAuthenticationCredential = xksProxyAuthenticationCredential
        self.xksProxyConnectivity = xksProxyConnectivity
        self.xksProxyUriEndpoint = xksProxyUriEndpoint
        self.xksProxyUriPath = xksProxyUriPath
        self.xksProxyVpcEndpointServiceName = xksProxyVpcEndpointServiceName
    }
}

struct UpdateCustomKeyStoreInputBody: Swift.Equatable {
    let customKeyStoreId: Swift.String?
    let newCustomKeyStoreName: Swift.String?
    let keyStorePassword: Swift.String?
    let cloudHsmClusterId: Swift.String?
    let xksProxyUriEndpoint: Swift.String?
    let xksProxyUriPath: Swift.String?
    let xksProxyVpcEndpointServiceName: Swift.String?
    let xksProxyAuthenticationCredential: KMSClientTypes.XksProxyAuthenticationCredentialType?
    let xksProxyConnectivity: KMSClientTypes.XksProxyConnectivityType?
}

extension UpdateCustomKeyStoreInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudHsmClusterId = "CloudHsmClusterId"
        case customKeyStoreId = "CustomKeyStoreId"
        case keyStorePassword = "KeyStorePassword"
        case newCustomKeyStoreName = "NewCustomKeyStoreName"
        case xksProxyAuthenticationCredential = "XksProxyAuthenticationCredential"
        case xksProxyConnectivity = "XksProxyConnectivity"
        case xksProxyUriEndpoint = "XksProxyUriEndpoint"
        case xksProxyUriPath = "XksProxyUriPath"
        case xksProxyVpcEndpointServiceName = "XksProxyVpcEndpointServiceName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customKeyStoreIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customKeyStoreId)
        customKeyStoreId = customKeyStoreIdDecoded
        let newCustomKeyStoreNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .newCustomKeyStoreName)
        newCustomKeyStoreName = newCustomKeyStoreNameDecoded
        let keyStorePasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyStorePassword)
        keyStorePassword = keyStorePasswordDecoded
        let cloudHsmClusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudHsmClusterId)
        cloudHsmClusterId = cloudHsmClusterIdDecoded
        let xksProxyUriEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .xksProxyUriEndpoint)
        xksProxyUriEndpoint = xksProxyUriEndpointDecoded
        let xksProxyUriPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .xksProxyUriPath)
        xksProxyUriPath = xksProxyUriPathDecoded
        let xksProxyVpcEndpointServiceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .xksProxyVpcEndpointServiceName)
        xksProxyVpcEndpointServiceName = xksProxyVpcEndpointServiceNameDecoded
        let xksProxyAuthenticationCredentialDecoded = try containerValues.decodeIfPresent(KMSClientTypes.XksProxyAuthenticationCredentialType.self, forKey: .xksProxyAuthenticationCredential)
        xksProxyAuthenticationCredential = xksProxyAuthenticationCredentialDecoded
        let xksProxyConnectivityDecoded = try containerValues.decodeIfPresent(KMSClientTypes.XksProxyConnectivityType.self, forKey: .xksProxyConnectivity)
        xksProxyConnectivity = xksProxyConnectivityDecoded
    }
}

extension UpdateCustomKeyStoreOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateCustomKeyStoreOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CloudHsmClusterInvalidConfigurationException" : self = .cloudHsmClusterInvalidConfigurationException(try CloudHsmClusterInvalidConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CloudHsmClusterNotActiveException" : self = .cloudHsmClusterNotActiveException(try CloudHsmClusterNotActiveException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CloudHsmClusterNotFoundException" : self = .cloudHsmClusterNotFoundException(try CloudHsmClusterNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CloudHsmClusterNotRelatedException" : self = .cloudHsmClusterNotRelatedException(try CloudHsmClusterNotRelatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CustomKeyStoreInvalidStateException" : self = .customKeyStoreInvalidStateException(try CustomKeyStoreInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CustomKeyStoreNameInUseException" : self = .customKeyStoreNameInUseException(try CustomKeyStoreNameInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CustomKeyStoreNotFoundException" : self = .customKeyStoreNotFoundException(try CustomKeyStoreNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "XksProxyIncorrectAuthenticationCredentialException" : self = .xksProxyIncorrectAuthenticationCredentialException(try XksProxyIncorrectAuthenticationCredentialException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "XksProxyInvalidConfigurationException" : self = .xksProxyInvalidConfigurationException(try XksProxyInvalidConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "XksProxyInvalidResponseException" : self = .xksProxyInvalidResponseException(try XksProxyInvalidResponseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "XksProxyUriEndpointInUseException" : self = .xksProxyUriEndpointInUseException(try XksProxyUriEndpointInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "XksProxyUriInUseException" : self = .xksProxyUriInUseException(try XksProxyUriInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "XksProxyUriUnreachableException" : self = .xksProxyUriUnreachableException(try XksProxyUriUnreachableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "XksProxyVpcEndpointServiceInUseException" : self = .xksProxyVpcEndpointServiceInUseException(try XksProxyVpcEndpointServiceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "XksProxyVpcEndpointServiceInvalidConfigurationException" : self = .xksProxyVpcEndpointServiceInvalidConfigurationException(try XksProxyVpcEndpointServiceInvalidConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "XksProxyVpcEndpointServiceNotFoundException" : self = .xksProxyVpcEndpointServiceNotFoundException(try XksProxyVpcEndpointServiceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateCustomKeyStoreOutputError: Swift.Error, Swift.Equatable {
    case cloudHsmClusterInvalidConfigurationException(CloudHsmClusterInvalidConfigurationException)
    case cloudHsmClusterNotActiveException(CloudHsmClusterNotActiveException)
    case cloudHsmClusterNotFoundException(CloudHsmClusterNotFoundException)
    case cloudHsmClusterNotRelatedException(CloudHsmClusterNotRelatedException)
    case customKeyStoreInvalidStateException(CustomKeyStoreInvalidStateException)
    case customKeyStoreNameInUseException(CustomKeyStoreNameInUseException)
    case customKeyStoreNotFoundException(CustomKeyStoreNotFoundException)
    case kMSInternalException(KMSInternalException)
    case xksProxyIncorrectAuthenticationCredentialException(XksProxyIncorrectAuthenticationCredentialException)
    case xksProxyInvalidConfigurationException(XksProxyInvalidConfigurationException)
    case xksProxyInvalidResponseException(XksProxyInvalidResponseException)
    case xksProxyUriEndpointInUseException(XksProxyUriEndpointInUseException)
    case xksProxyUriInUseException(XksProxyUriInUseException)
    case xksProxyUriUnreachableException(XksProxyUriUnreachableException)
    case xksProxyVpcEndpointServiceInUseException(XksProxyVpcEndpointServiceInUseException)
    case xksProxyVpcEndpointServiceInvalidConfigurationException(XksProxyVpcEndpointServiceInvalidConfigurationException)
    case xksProxyVpcEndpointServiceNotFoundException(XksProxyVpcEndpointServiceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateCustomKeyStoreOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateCustomKeyStoreOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateKeyDescriptionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case keyId = "KeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
    }
}

extension UpdateKeyDescriptionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateKeyDescriptionInput: Swift.Equatable {
    /// New description for the KMS key.
    /// This member is required.
    public var description: Swift.String?
    /// Updates the description of the specified KMS key. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?

    public init (
        description: Swift.String? = nil,
        keyId: Swift.String? = nil
    )
    {
        self.description = description
        self.keyId = keyId
    }
}

struct UpdateKeyDescriptionInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let description: Swift.String?
}

extension UpdateKeyDescriptionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case keyId = "KeyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension UpdateKeyDescriptionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateKeyDescriptionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateKeyDescriptionOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case invalidArnException(InvalidArnException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateKeyDescriptionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateKeyDescriptionOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdatePrimaryRegionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case primaryRegion = "PrimaryRegion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let primaryRegion = self.primaryRegion {
            try encodeContainer.encode(primaryRegion, forKey: .primaryRegion)
        }
    }
}

extension UpdatePrimaryRegionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdatePrimaryRegionInput: Swift.Equatable {
    /// Identifies the current primary key. When the operation completes, this KMS key will be a replica key. Specify the key ID or key ARN of a multi-Region primary key. For example:
    ///
    /// * Key ID: mrk-1234abcd12ab34cd56ef1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab
    ///
    ///
    ///
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// The Amazon Web Services Region of the new primary key. Enter the Region ID, such as us-east-1 or ap-southeast-2. There must be an existing replica key in this Region. When the operation completes, the multi-Region key in this Region will be the primary key.
    /// This member is required.
    public var primaryRegion: Swift.String?

    public init (
        keyId: Swift.String? = nil,
        primaryRegion: Swift.String? = nil
    )
    {
        self.keyId = keyId
        self.primaryRegion = primaryRegion
    }
}

struct UpdatePrimaryRegionInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let primaryRegion: Swift.String?
}

extension UpdatePrimaryRegionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case primaryRegion = "PrimaryRegion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let primaryRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .primaryRegion)
        primaryRegion = primaryRegionDecoded
    }
}

extension UpdatePrimaryRegionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdatePrimaryRegionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "Disabled" : self = .disabledException(try DisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperation" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdatePrimaryRegionOutputError: Swift.Error, Swift.Equatable {
    case disabledException(DisabledException)
    case invalidArnException(InvalidArnException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdatePrimaryRegionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdatePrimaryRegionOutputResponse: Swift.Equatable {

    public init () { }
}

extension VerifyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VerifyInput(grantTokens: \(Swift.String(describing: grantTokens)), keyId: \(Swift.String(describing: keyId)), messageType: \(Swift.String(describing: messageType)), signature: \(Swift.String(describing: signature)), signingAlgorithm: \(Swift.String(describing: signingAlgorithm)), message: \"CONTENT_REDACTED\")"}
}

extension VerifyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case message = "Message"
        case messageType = "MessageType"
        case signature = "Signature"
        case signingAlgorithm = "SigningAlgorithm"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let grantTokens = grantTokens {
            var grantTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grantTokens)
            for granttokentype0 in grantTokens {
                try grantTokensContainer.encode(granttokentype0)
            }
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let message = self.message {
            try encodeContainer.encode(message.base64EncodedString(), forKey: .message)
        }
        if let messageType = self.messageType {
            try encodeContainer.encode(messageType.rawValue, forKey: .messageType)
        }
        if let signature = self.signature {
            try encodeContainer.encode(signature.base64EncodedString(), forKey: .signature)
        }
        if let signingAlgorithm = self.signingAlgorithm {
            try encodeContainer.encode(signingAlgorithm.rawValue, forKey: .signingAlgorithm)
        }
    }
}

extension VerifyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct VerifyInput: Swift.Equatable {
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Identifies the asymmetric KMS key that will be used to verify the signature. This must be the same KMS key that was used to generate the signature. If you specify a different KMS key, the signature verification fails. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    ///
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    /// This member is required.
    public var keyId: Swift.String?
    /// Specifies the message that was signed. You can submit a raw message of up to 4096 bytes, or a hash digest of the message. If you submit a digest, use the MessageType parameter with a value of DIGEST. If the message specified here is different from the message that was signed, the signature verification fails. A message and its hash digest are considered to be the same message.
    /// This member is required.
    public var message: ClientRuntime.Data?
    /// Tells KMS whether the value of the Message parameter is a message or message digest. The default value, RAW, indicates a message. To indicate a message digest, enter DIGEST. Use the DIGEST value only when the value of the Message parameter is a message digest. If you use the DIGEST value with a raw message, the security of the verification operation can be compromised.
    public var messageType: KMSClientTypes.MessageType?
    /// The signature that the Sign operation generated.
    /// This member is required.
    public var signature: ClientRuntime.Data?
    /// The signing algorithm that was used to sign the message. If you submit a different algorithm, the signature verification fails.
    /// This member is required.
    public var signingAlgorithm: KMSClientTypes.SigningAlgorithmSpec?

    public init (
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil,
        message: ClientRuntime.Data? = nil,
        messageType: KMSClientTypes.MessageType? = nil,
        signature: ClientRuntime.Data? = nil,
        signingAlgorithm: KMSClientTypes.SigningAlgorithmSpec? = nil
    )
    {
        self.grantTokens = grantTokens
        self.keyId = keyId
        self.message = message
        self.messageType = messageType
        self.signature = signature
        self.signingAlgorithm = signingAlgorithm
    }
}

struct VerifyInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let message: ClientRuntime.Data?
    let messageType: KMSClientTypes.MessageType?
    let signature: ClientRuntime.Data?
    let signingAlgorithm: KMSClientTypes.SigningAlgorithmSpec?
    let grantTokens: [Swift.String]?
}

extension VerifyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case message = "Message"
        case messageType = "MessageType"
        case signature = "Signature"
        case signingAlgorithm = "SigningAlgorithm"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let messageDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .message)
        message = messageDecoded
        let messageTypeDecoded = try containerValues.decodeIfPresent(KMSClientTypes.MessageType.self, forKey: .messageType)
        messageType = messageTypeDecoded
        let signatureDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .signature)
        signature = signatureDecoded
        let signingAlgorithmDecoded = try containerValues.decodeIfPresent(KMSClientTypes.SigningAlgorithmSpec.self, forKey: .signingAlgorithm)
        signingAlgorithm = signingAlgorithmDecoded
        let grantTokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .grantTokens)
        var grantTokensDecoded0:[Swift.String]? = nil
        if let grantTokensContainer = grantTokensContainer {
            grantTokensDecoded0 = [Swift.String]()
            for string0 in grantTokensContainer {
                if let string0 = string0 {
                    grantTokensDecoded0?.append(string0)
                }
            }
        }
        grantTokens = grantTokensDecoded0
    }
}

extension VerifyMacInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VerifyMacInput(grantTokens: \(Swift.String(describing: grantTokens)), keyId: \(Swift.String(describing: keyId)), mac: \(Swift.String(describing: mac)), macAlgorithm: \(Swift.String(describing: macAlgorithm)), message: \"CONTENT_REDACTED\")"}
}

extension VerifyMacInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case mac = "Mac"
        case macAlgorithm = "MacAlgorithm"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let grantTokens = grantTokens {
            var grantTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grantTokens)
            for granttokentype0 in grantTokens {
                try grantTokensContainer.encode(granttokentype0)
            }
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let mac = self.mac {
            try encodeContainer.encode(mac.base64EncodedString(), forKey: .mac)
        }
        if let macAlgorithm = self.macAlgorithm {
            try encodeContainer.encode(macAlgorithm.rawValue, forKey: .macAlgorithm)
        }
        if let message = self.message {
            try encodeContainer.encode(message.base64EncodedString(), forKey: .message)
        }
    }
}

extension VerifyMacInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct VerifyMacInput: Swift.Equatable {
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// The KMS key that will be used in the verification. Enter a key ID of the KMS key that was used to generate the HMAC. If you identify a different KMS key, the VerifyMac operation fails.
    /// This member is required.
    public var keyId: Swift.String?
    /// The HMAC to verify. Enter the HMAC that was generated by the [GenerateMac] operation when you specified the same message, HMAC KMS key, and MAC algorithm as the values specified in this request.
    /// This member is required.
    public var mac: ClientRuntime.Data?
    /// The MAC algorithm that will be used in the verification. Enter the same MAC algorithm that was used to compute the HMAC. This algorithm must be supported by the HMAC KMS key identified by the KeyId parameter.
    /// This member is required.
    public var macAlgorithm: KMSClientTypes.MacAlgorithmSpec?
    /// The message that will be used in the verification. Enter the same message that was used to generate the HMAC. [GenerateMac] and VerifyMac do not provide special handling for message digests. If you generated an HMAC for a hash digest of a message, you must verify the HMAC for the same hash digest.
    /// This member is required.
    public var message: ClientRuntime.Data?

    public init (
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil,
        mac: ClientRuntime.Data? = nil,
        macAlgorithm: KMSClientTypes.MacAlgorithmSpec? = nil,
        message: ClientRuntime.Data? = nil
    )
    {
        self.grantTokens = grantTokens
        self.keyId = keyId
        self.mac = mac
        self.macAlgorithm = macAlgorithm
        self.message = message
    }
}

struct VerifyMacInputBody: Swift.Equatable {
    let message: ClientRuntime.Data?
    let keyId: Swift.String?
    let macAlgorithm: KMSClientTypes.MacAlgorithmSpec?
    let mac: ClientRuntime.Data?
    let grantTokens: [Swift.String]?
}

extension VerifyMacInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case mac = "Mac"
        case macAlgorithm = "MacAlgorithm"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .message)
        message = messageDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let macAlgorithmDecoded = try containerValues.decodeIfPresent(KMSClientTypes.MacAlgorithmSpec.self, forKey: .macAlgorithm)
        macAlgorithm = macAlgorithmDecoded
        let macDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .mac)
        mac = macDecoded
        let grantTokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .grantTokens)
        var grantTokensDecoded0:[Swift.String]? = nil
        if let grantTokensContainer = grantTokensContainer {
            grantTokensDecoded0 = [Swift.String]()
            for string0 in grantTokensContainer {
                if let string0 = string0 {
                    grantTokensDecoded0?.append(string0)
                }
            }
        }
        grantTokens = grantTokensDecoded0
    }
}

extension VerifyMacOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension VerifyMacOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "Disabled" : self = .disabledException(try DisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGrantToken" : self = .invalidGrantTokenException(try InvalidGrantTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeyUsage" : self = .invalidKeyUsageException(try InvalidKeyUsageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KeyUnavailable" : self = .keyUnavailableException(try KeyUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidMac" : self = .kMSInvalidMacException(try KMSInvalidMacException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum VerifyMacOutputError: Swift.Error, Swift.Equatable {
    case disabledException(DisabledException)
    case invalidGrantTokenException(InvalidGrantTokenException)
    case invalidKeyUsageException(InvalidKeyUsageException)
    case keyUnavailableException(KeyUnavailableException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidMacException(KMSInvalidMacException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension VerifyMacOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: VerifyMacOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keyId = output.keyId
            self.macAlgorithm = output.macAlgorithm
            self.macValid = output.macValid
        } else {
            self.keyId = nil
            self.macAlgorithm = nil
            self.macValid = false
        }
    }
}

public struct VerifyMacOutputResponse: Swift.Equatable {
    /// The HMAC KMS key used in the verification.
    public var keyId: Swift.String?
    /// The MAC algorithm used in the verification.
    public var macAlgorithm: KMSClientTypes.MacAlgorithmSpec?
    /// A Boolean value that indicates whether the HMAC was verified. A value of True indicates that the HMAC (Mac) was generated with the specified Message, HMAC KMS key (KeyID) and MacAlgorithm.. If the HMAC is not verified, the VerifyMac operation fails with a KMSInvalidMacException exception. This exception indicates that one or more of the inputs changed since the HMAC was computed.
    public var macValid: Swift.Bool

    public init (
        keyId: Swift.String? = nil,
        macAlgorithm: KMSClientTypes.MacAlgorithmSpec? = nil,
        macValid: Swift.Bool = false
    )
    {
        self.keyId = keyId
        self.macAlgorithm = macAlgorithm
        self.macValid = macValid
    }
}

struct VerifyMacOutputResponseBody: Swift.Equatable {
    let keyId: Swift.String?
    let macValid: Swift.Bool
    let macAlgorithm: KMSClientTypes.MacAlgorithmSpec?
}

extension VerifyMacOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case macAlgorithm = "MacAlgorithm"
        case macValid = "MacValid"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let macValidDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .macValid) ?? false
        macValid = macValidDecoded
        let macAlgorithmDecoded = try containerValues.decodeIfPresent(KMSClientTypes.MacAlgorithmSpec.self, forKey: .macAlgorithm)
        macAlgorithm = macAlgorithmDecoded
    }
}

extension VerifyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension VerifyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DependencyTimeout" : self = .dependencyTimeoutException(try DependencyTimeoutException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "Disabled" : self = .disabledException(try DisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGrantToken" : self = .invalidGrantTokenException(try InvalidGrantTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeyUsage" : self = .invalidKeyUsageException(try InvalidKeyUsageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KeyUnavailable" : self = .keyUnavailableException(try KeyUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInternal" : self = .kMSInternalException(try KMSInternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidSignature" : self = .kMSInvalidSignatureException(try KMSInvalidSignatureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KMSInvalidStateException" : self = .kMSInvalidStateException(try KMSInvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFound" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum VerifyOutputError: Swift.Error, Swift.Equatable {
    case dependencyTimeoutException(DependencyTimeoutException)
    case disabledException(DisabledException)
    case invalidGrantTokenException(InvalidGrantTokenException)
    case invalidKeyUsageException(InvalidKeyUsageException)
    case keyUnavailableException(KeyUnavailableException)
    case kMSInternalException(KMSInternalException)
    case kMSInvalidSignatureException(KMSInvalidSignatureException)
    case kMSInvalidStateException(KMSInvalidStateException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension VerifyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: VerifyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keyId = output.keyId
            self.signatureValid = output.signatureValid
            self.signingAlgorithm = output.signingAlgorithm
        } else {
            self.keyId = nil
            self.signatureValid = false
            self.signingAlgorithm = nil
        }
    }
}

public struct VerifyOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the asymmetric KMS key that was used to verify the signature.
    public var keyId: Swift.String?
    /// A Boolean value that indicates whether the signature was verified. A value of True indicates that the Signature was produced by signing the Message with the specified KeyID and SigningAlgorithm. If the signature is not verified, the Verify operation fails with a KMSInvalidSignatureException exception.
    public var signatureValid: Swift.Bool
    /// The signing algorithm that was used to verify the signature.
    public var signingAlgorithm: KMSClientTypes.SigningAlgorithmSpec?

    public init (
        keyId: Swift.String? = nil,
        signatureValid: Swift.Bool = false,
        signingAlgorithm: KMSClientTypes.SigningAlgorithmSpec? = nil
    )
    {
        self.keyId = keyId
        self.signatureValid = signatureValid
        self.signingAlgorithm = signingAlgorithm
    }
}

struct VerifyOutputResponseBody: Swift.Equatable {
    let keyId: Swift.String?
    let signatureValid: Swift.Bool
    let signingAlgorithm: KMSClientTypes.SigningAlgorithmSpec?
}

extension VerifyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case signatureValid = "SignatureValid"
        case signingAlgorithm = "SigningAlgorithm"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let signatureValidDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .signatureValid) ?? false
        signatureValid = signatureValidDecoded
        let signingAlgorithmDecoded = try containerValues.decodeIfPresent(KMSClientTypes.SigningAlgorithmSpec.self, forKey: .signingAlgorithm)
        signingAlgorithm = signingAlgorithmDecoded
    }
}

extension KMSClientTypes {
    public enum WrappingKeySpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rsa2048
        case sdkUnknown(Swift.String)

        public static var allCases: [WrappingKeySpec] {
            return [
                .rsa2048,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rsa2048: return "RSA_2048"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WrappingKeySpec(rawValue: rawValue) ?? WrappingKeySpec.sdkUnknown(rawValue)
        }
    }
}

extension XksKeyAlreadyInUseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: XksKeyAlreadyInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the (XksKeyId) is already associated with a KMS key in this external key store. Each KMS key in an external key store must be associated with a different external key.
public struct XksKeyAlreadyInUseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct XksKeyAlreadyInUseExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension XksKeyAlreadyInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KMSClientTypes.XksKeyConfigurationType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension KMSClientTypes {
    /// Information about the [external key ](https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html#concept-external-key)that is associated with a KMS key in an external key store. This element appears in a [CreateKey] or [DescribeKey] response only for a KMS key in an external key store. The external key is a symmetric encryption key that is hosted by an external key manager outside of Amazon Web Services. When you use the KMS key in an external key store in a cryptographic operation, the cryptographic operation is performed in the external key manager using the specified external key. For more information, see [External key](https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html#concept-external-key) in the Key Management Service Developer Guide.
    public struct XksKeyConfigurationType: Swift.Equatable {
        /// The ID of the external key in its external key manager. This is the ID that the external key store proxy uses to identify the external key.
        public var id: Swift.String?

        public init (
            id: Swift.String? = nil
        )
        {
            self.id = id
        }
    }

}

extension XksKeyInvalidConfigurationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: XksKeyInvalidConfigurationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the external key specified by the XksKeyId parameter did not meet the configuration requirements for an external key store. The external key must be an AES-256 symmetric key that is enabled and performs encryption and decryption.
public struct XksKeyInvalidConfigurationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct XksKeyInvalidConfigurationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension XksKeyInvalidConfigurationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension XksKeyNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: XksKeyNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the external key store proxy could not find the external key. This exception is thrown when the value of the XksKeyId parameter doesn't identify a key in the external key manager associated with the external key proxy. Verify that the XksKeyId represents an existing key in the external key manager. Use the key identifier that the external key store proxy uses to identify the key. For details, see the documentation provided with your external key store proxy or key manager.
public struct XksKeyNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct XksKeyNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension XksKeyNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KMSClientTypes.XksProxyAuthenticationCredentialType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKeyId = "AccessKeyId"
        case rawSecretAccessKey = "RawSecretAccessKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessKeyId = self.accessKeyId {
            try encodeContainer.encode(accessKeyId, forKey: .accessKeyId)
        }
        if let rawSecretAccessKey = self.rawSecretAccessKey {
            try encodeContainer.encode(rawSecretAccessKey, forKey: .rawSecretAccessKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessKeyId)
        accessKeyId = accessKeyIdDecoded
        let rawSecretAccessKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rawSecretAccessKey)
        rawSecretAccessKey = rawSecretAccessKeyDecoded
    }
}

extension KMSClientTypes.XksProxyAuthenticationCredentialType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "XksProxyAuthenticationCredentialType(accessKeyId: \"CONTENT_REDACTED\", rawSecretAccessKey: \"CONTENT_REDACTED\")"}
}

extension KMSClientTypes {
    /// KMS uses the authentication credential to sign requests that it sends to the external key store proxy (XKS proxy) on your behalf. You establish these credentials on your external key store proxy and report them to KMS. The XksProxyAuthenticationCredential includes two required elements.
    public struct XksProxyAuthenticationCredentialType: Swift.Equatable {
        /// A unique identifier for the raw secret access key.
        /// This member is required.
        public var accessKeyId: Swift.String?
        /// A secret string of 43-64 characters. Valid characters are a-z, A-Z, 0-9, /, +, and =.
        /// This member is required.
        public var rawSecretAccessKey: Swift.String?

        public init (
            accessKeyId: Swift.String? = nil,
            rawSecretAccessKey: Swift.String? = nil
        )
        {
            self.accessKeyId = accessKeyId
            self.rawSecretAccessKey = rawSecretAccessKey
        }
    }

}

extension KMSClientTypes.XksProxyConfigurationType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKeyId = "AccessKeyId"
        case connectivity = "Connectivity"
        case uriEndpoint = "UriEndpoint"
        case uriPath = "UriPath"
        case vpcEndpointServiceName = "VpcEndpointServiceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessKeyId = self.accessKeyId {
            try encodeContainer.encode(accessKeyId, forKey: .accessKeyId)
        }
        if let connectivity = self.connectivity {
            try encodeContainer.encode(connectivity.rawValue, forKey: .connectivity)
        }
        if let uriEndpoint = self.uriEndpoint {
            try encodeContainer.encode(uriEndpoint, forKey: .uriEndpoint)
        }
        if let uriPath = self.uriPath {
            try encodeContainer.encode(uriPath, forKey: .uriPath)
        }
        if let vpcEndpointServiceName = self.vpcEndpointServiceName {
            try encodeContainer.encode(vpcEndpointServiceName, forKey: .vpcEndpointServiceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectivityDecoded = try containerValues.decodeIfPresent(KMSClientTypes.XksProxyConnectivityType.self, forKey: .connectivity)
        connectivity = connectivityDecoded
        let accessKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessKeyId)
        accessKeyId = accessKeyIdDecoded
        let uriEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uriEndpoint)
        uriEndpoint = uriEndpointDecoded
        let uriPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uriPath)
        uriPath = uriPathDecoded
        let vpcEndpointServiceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointServiceName)
        vpcEndpointServiceName = vpcEndpointServiceNameDecoded
    }
}

extension KMSClientTypes.XksProxyConfigurationType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "XksProxyConfigurationType(connectivity: \(Swift.String(describing: connectivity)), uriEndpoint: \(Swift.String(describing: uriEndpoint)), uriPath: \(Swift.String(describing: uriPath)), vpcEndpointServiceName: \(Swift.String(describing: vpcEndpointServiceName)), accessKeyId: \"CONTENT_REDACTED\")"}
}

extension KMSClientTypes {
    /// Detailed information about the external key store proxy (XKS proxy). Your external key store proxy translates KMS requests into a format that your external key manager can understand. These fields appear in a [DescribeCustomKeyStores] response only when the CustomKeyStoreType is EXTERNAL_KEY_STORE.
    public struct XksProxyConfigurationType: Swift.Equatable {
        /// The part of the external key store [proxy authentication credential](https://docs.aws.amazon.com/kms/latest/APIReference/API_CreateCustomKeyStore.html#KMS-CreateCustomKeyStore-request-XksProxyAuthenticationCredential) that uniquely identifies the secret access key.
        public var accessKeyId: Swift.String?
        /// Indicates whether the external key store proxy uses a public endpoint or an Amazon VPC endpoint service to communicate with KMS.
        public var connectivity: KMSClientTypes.XksProxyConnectivityType?
        /// The URI endpoint for the external key store proxy. If the external key store proxy has a public endpoint, it is displayed here. If the external key store proxy uses an Amazon VPC endpoint service name, this field displays the private DNS name associated with the VPC endpoint service.
        public var uriEndpoint: Swift.String?
        /// The path to the external key store proxy APIs.
        public var uriPath: Swift.String?
        /// The Amazon VPC endpoint service used to communicate with the external key store proxy. This field appears only when the external key store proxy uses an Amazon VPC endpoint service to communicate with KMS.
        public var vpcEndpointServiceName: Swift.String?

        public init (
            accessKeyId: Swift.String? = nil,
            connectivity: KMSClientTypes.XksProxyConnectivityType? = nil,
            uriEndpoint: Swift.String? = nil,
            uriPath: Swift.String? = nil,
            vpcEndpointServiceName: Swift.String? = nil
        )
        {
            self.accessKeyId = accessKeyId
            self.connectivity = connectivity
            self.uriEndpoint = uriEndpoint
            self.uriPath = uriPath
            self.vpcEndpointServiceName = vpcEndpointServiceName
        }
    }

}

extension KMSClientTypes {
    public enum XksProxyConnectivityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case publicEndpoint
        case vpcEndpointService
        case sdkUnknown(Swift.String)

        public static var allCases: [XksProxyConnectivityType] {
            return [
                .publicEndpoint,
                .vpcEndpointService,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .publicEndpoint: return "PUBLIC_ENDPOINT"
            case .vpcEndpointService: return "VPC_ENDPOINT_SERVICE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = XksProxyConnectivityType(rawValue: rawValue) ?? XksProxyConnectivityType.sdkUnknown(rawValue)
        }
    }
}

extension XksProxyIncorrectAuthenticationCredentialException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: XksProxyIncorrectAuthenticationCredentialExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the proxy credentials failed to authenticate to the specified external key store proxy. The specified external key store proxy rejected a status request from KMS due to invalid credentials. This can indicate an error in the credentials or in the identification of the external key store proxy.
public struct XksProxyIncorrectAuthenticationCredentialException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct XksProxyIncorrectAuthenticationCredentialExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension XksProxyIncorrectAuthenticationCredentialExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension XksProxyInvalidConfigurationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: XksProxyInvalidConfigurationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the Amazon VPC endpoint service configuration does not fulfill the requirements for an external key store proxy. For details, see the exception message.
public struct XksProxyInvalidConfigurationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct XksProxyInvalidConfigurationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension XksProxyInvalidConfigurationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension XksProxyInvalidResponseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: XksProxyInvalidResponseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// KMS cannot interpret the response it received from the external key store proxy. The problem might be a poorly constructed response, but it could also be a transient network issue. If you see this error repeatedly, report it to the proxy vendor.
public struct XksProxyInvalidResponseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct XksProxyInvalidResponseExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension XksProxyInvalidResponseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension XksProxyUriEndpointInUseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: XksProxyUriEndpointInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the concatenation of the XksProxyUriEndpoint is already associated with an external key store in the Amazon Web Services account and Region. Each external key store in an account and Region must use a unique external key store proxy address.
public struct XksProxyUriEndpointInUseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct XksProxyUriEndpointInUseExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension XksProxyUriEndpointInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension XksProxyUriInUseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: XksProxyUriInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the concatenation of the XksProxyUriEndpoint and XksProxyUriPath is already associated with an external key store in the Amazon Web Services account and Region. Each external key store in an account and Region must use a unique external key store proxy API address.
public struct XksProxyUriInUseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct XksProxyUriInUseExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension XksProxyUriInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension XksProxyUriUnreachableException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: XksProxyUriUnreachableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// KMS was unable to reach the specified XksProxyUriPath. The path must be reachable before you create the external key store or update its settings. This exception is also thrown when the external key store proxy response to a GetHealthStatus request indicates that all external key manager instances are unavailable.
public struct XksProxyUriUnreachableException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct XksProxyUriUnreachableExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension XksProxyUriUnreachableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension XksProxyVpcEndpointServiceInUseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: XksProxyVpcEndpointServiceInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the specified Amazon VPC endpoint service is already associated with an external key store in the Amazon Web Services account and Region. Each external key store in an Amazon Web Services account and Region must use a different Amazon VPC endpoint service.
public struct XksProxyVpcEndpointServiceInUseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct XksProxyVpcEndpointServiceInUseExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension XksProxyVpcEndpointServiceInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension XksProxyVpcEndpointServiceInvalidConfigurationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: XksProxyVpcEndpointServiceInvalidConfigurationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because the Amazon VPC endpoint service configuration does not fulfill the requirements for an external key store proxy. For details, see the exception message and [review the requirements] for Amazon VPC endpoint service connectivity for an external key store.
public struct XksProxyVpcEndpointServiceInvalidConfigurationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct XksProxyVpcEndpointServiceInvalidConfigurationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension XksProxyVpcEndpointServiceInvalidConfigurationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension XksProxyVpcEndpointServiceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: XksProxyVpcEndpointServiceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because KMS could not find the specified VPC endpoint service. Use [DescribeCustomKeyStores] to verify the VPC endpoint service name for the external key store. Also, confirm that the Allow principals list for the VPC endpoint service includes the KMS service principal for the Region, such as cks.kms.us-east-1.amazonaws.com.
public struct XksProxyVpcEndpointServiceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct XksProxyVpcEndpointServiceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension XksProxyVpcEndpointServiceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}
