//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

public struct CreateAliasOutput {

    public init() { }
}

public struct DeleteAliasOutput {

    public init() { }
}

public struct DeleteImportedKeyMaterialOutput {

    public init() { }
}

public struct DisableKeyOutput {

    public init() { }
}

public struct DisableKeyRotationOutput {

    public init() { }
}

public struct EnableKeyOutput {

    public init() { }
}

public struct EnableKeyRotationOutput {

    public init() { }
}

public struct PutKeyPolicyOutput {

    public init() { }
}

public struct RetireGrantOutput {

    public init() { }
}

public struct RevokeGrantOutput {

    public init() { }
}

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceOutput {

    public init() { }
}

public struct UpdateAliasOutput {

    public init() { }
}

public struct UpdateKeyDescriptionOutput {

    public init() { }
}

public struct UpdatePrimaryRegionOutput {

    public init() { }
}

extension KMSClientTypes {

    public enum AlgorithmSpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case rsaesOaepSha1
        case rsaesOaepSha256
        case rsaesPkcs1V15
        case rsaAesKeyWrapSha1
        case rsaAesKeyWrapSha256
        case sm2pke
        case sdkUnknown(Swift.String)

        public static var allCases: [AlgorithmSpec] {
            return [
                .rsaesOaepSha1,
                .rsaesOaepSha256,
                .rsaesPkcs1V15,
                .rsaAesKeyWrapSha1,
                .rsaAesKeyWrapSha256,
                .sm2pke
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .rsaesOaepSha1: return "RSAES_OAEP_SHA_1"
            case .rsaesOaepSha256: return "RSAES_OAEP_SHA_256"
            case .rsaesPkcs1V15: return "RSAES_PKCS1_V1_5"
            case .rsaAesKeyWrapSha1: return "RSA_AES_KEY_WRAP_SHA_1"
            case .rsaAesKeyWrapSha256: return "RSA_AES_KEY_WRAP_SHA_256"
            case .sm2pke: return "SM2PKE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KMSClientTypes {
    /// Contains information about an alias.
    public struct AliasListEntry {
        /// String that contains the key ARN.
        public var aliasArn: Swift.String?
        /// String that contains the alias. This value begins with alias/.
        public var aliasName: Swift.String?
        /// Date and time that the alias was most recently created in the account and Region. Formatted as Unix time.
        public var creationDate: Foundation.Date?
        /// Date and time that the alias was most recently associated with a KMS key in the account and Region. Formatted as Unix time.
        public var lastUpdatedDate: Foundation.Date?
        /// String that contains the key identifier of the KMS key associated with the alias.
        public var targetKeyId: Swift.String?

        public init(
            aliasArn: Swift.String? = nil,
            aliasName: Swift.String? = nil,
            creationDate: Foundation.Date? = nil,
            lastUpdatedDate: Foundation.Date? = nil,
            targetKeyId: Swift.String? = nil
        )
        {
            self.aliasArn = aliasArn
            self.aliasName = aliasName
            self.creationDate = creationDate
            self.lastUpdatedDate = lastUpdatedDate
            self.targetKeyId = targetKeyId
        }
    }

}

/// The request was rejected because it attempted to create a resource that already exists.
public struct AlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The system timed out while trying to fulfill the request. You can retry the request.
public struct DependencyTimeoutException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DependencyTimeout" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because a specified ARN, or an ARN in a key policy, is not valid.
public struct InvalidArnException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidArn" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because an internal exception occurred. The request can be retried.
public struct KMSInternalException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMSInternal" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the state of the specified resource is not valid for this request. This exceptions means one of the following:
///
/// * The key state of the KMS key is not compatible with the operation. To find the key state, use the [DescribeKey] operation. For more information about which key states are compatible with each KMS operation, see [Key states of KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the Key Management Service Developer Guide .
///
/// * For cryptographic operations on KMS keys in custom key stores, this exception represents a general failure with many possible causes. To identify the cause, see the error message that accompanies the exception.
public struct KMSInvalidStateException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMSInvalidStateException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the specified entity or resource could not be found.
public struct NotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CancelKeyDeletionInput {
    /// Identifies the KMS key whose deletion is being canceled. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?

    public init(
        keyId: Swift.String? = nil
    )
    {
        self.keyId = keyId
    }
}

public struct CancelKeyDeletionOutput {
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the KMS key whose deletion is canceled.
    public var keyId: Swift.String?

    public init(
        keyId: Swift.String? = nil
    )
    {
        self.keyId = keyId
    }
}

/// The request was rejected because the specified CloudHSM cluster is already associated with an CloudHSM key store in the account, or it shares a backup history with an CloudHSM key store in the account. Each CloudHSM key store in the account must be associated with a different CloudHSM cluster. CloudHSM clusters that share a backup history have the same cluster certificate. To view the cluster certificate of an CloudHSM cluster, use the [DescribeClusters](https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html) operation.
public struct CloudHsmClusterInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CloudHsmClusterInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the associated CloudHSM cluster did not meet the configuration requirements for an CloudHSM key store.
///
/// * The CloudHSM cluster must be configured with private subnets in at least two different Availability Zones in the Region.
///
/// * The [security group for the cluster](https://docs.aws.amazon.com/cloudhsm/latest/userguide/configure-sg.html) (cloudhsm-cluster--sg) must include inbound rules and outbound rules that allow TCP traffic on ports 2223-2225. The Source in the inbound rules and the Destination in the outbound rules must match the security group ID. These rules are set by default when you create the CloudHSM cluster. Do not delete or change them. To get information about a particular security group, use the [DescribeSecurityGroups](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroups.html) operation.
///
/// * The CloudHSM cluster must contain at least as many HSMs as the operation requires. To add HSMs, use the CloudHSM [CreateHsm](https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_CreateHsm.html) operation. For the [CreateCustomKeyStore], [UpdateCustomKeyStore], and [CreateKey] operations, the CloudHSM cluster must have at least two active HSMs, each in a different Availability Zone. For the [ConnectCustomKeyStore] operation, the CloudHSM must contain at least one active HSM.
///
///
/// For information about the requirements for an CloudHSM cluster that is associated with an CloudHSM key store, see [Assemble the Prerequisites](https://docs.aws.amazon.com/kms/latest/developerguide/create-keystore.html#before-keystore) in the Key Management Service Developer Guide. For information about creating a private subnet for an CloudHSM cluster, see [Create a Private Subnet](https://docs.aws.amazon.com/cloudhsm/latest/userguide/create-subnets.html) in the CloudHSM User Guide. For information about cluster security groups, see [Configure a Default Security Group](https://docs.aws.amazon.com/cloudhsm/latest/userguide/configure-sg.html) in the CloudHSM User Guide .
public struct CloudHsmClusterInvalidConfigurationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CloudHsmClusterInvalidConfigurationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the CloudHSM cluster associated with the CloudHSM key store is not active. Initialize and activate the cluster and try the command again. For detailed instructions, see [Getting Started](https://docs.aws.amazon.com/cloudhsm/latest/userguide/getting-started.html) in the CloudHSM User Guide.
public struct CloudHsmClusterNotActiveException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CloudHsmClusterNotActiveException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because KMS cannot find the CloudHSM cluster with the specified cluster ID. Retry the request with a different cluster ID.
public struct CloudHsmClusterNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CloudHsmClusterNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the specified CloudHSM cluster has a different cluster certificate than the original cluster. You cannot use the operation to specify an unrelated cluster for an CloudHSM key store. Specify an CloudHSM cluster that shares a backup history with the original cluster. This includes clusters that were created from a backup of the current cluster, and clusters that were created from the same backup that produced the current cluster. CloudHSM clusters that share a backup history have the same cluster certificate. To view the cluster certificate of an CloudHSM cluster, use the [DescribeClusters](https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html) operation.
public struct CloudHsmClusterNotRelatedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CloudHsmClusterNotRelatedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because an automatic rotation of this key is currently in progress or scheduled to begin within the next 20 minutes.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because of the ConnectionState of the custom key store. To get the ConnectionState of a custom key store, use the [DescribeCustomKeyStores] operation. This exception is thrown under the following conditions:
///
/// * You requested the [ConnectCustomKeyStore] operation on a custom key store with a ConnectionState of DISCONNECTING or FAILED. This operation is valid for all other ConnectionState values. To reconnect a custom key store in a FAILED state, disconnect it ([DisconnectCustomKeyStore]), then connect it (ConnectCustomKeyStore).
///
/// * You requested the [CreateKey] operation in a custom key store that is not connected. This operations is valid only when the custom key store ConnectionState is CONNECTED.
///
/// * You requested the [DisconnectCustomKeyStore] operation on a custom key store with a ConnectionState of DISCONNECTING or DISCONNECTED. This operation is valid for all other ConnectionState values.
///
/// * You requested the [UpdateCustomKeyStore] or [DeleteCustomKeyStore] operation on a custom key store that is not disconnected. This operation is valid only when the custom key store ConnectionState is DISCONNECTED.
///
/// * You requested the [GenerateRandom] operation in an CloudHSM key store that is not connected. This operation is valid only when the CloudHSM key store ConnectionState is CONNECTED.
public struct CustomKeyStoreInvalidStateException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CustomKeyStoreInvalidStateException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because KMS cannot find a custom key store with the specified key store name or ID.
public struct CustomKeyStoreNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CustomKeyStoreNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ConnectCustomKeyStoreInput {
    /// Enter the key store ID of the custom key store that you want to connect. To find the ID of a custom key store, use the [DescribeCustomKeyStores] operation.
    /// This member is required.
    public var customKeyStoreId: Swift.String?

    public init(
        customKeyStoreId: Swift.String? = nil
    )
    {
        self.customKeyStoreId = customKeyStoreId
    }
}

public struct ConnectCustomKeyStoreOutput {

    public init() { }
}

extension KMSClientTypes {

    public enum ConnectionErrorCodeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case clusterNotFound
        case insufficientCloudhsmHsms
        case insufficientFreeAddressesInSubnet
        case internalError
        case invalidCredentials
        case networkErrors
        case subnetNotFound
        case userLockedOut
        case userLoggedIn
        case userNotFound
        case xksProxyAccessDenied
        case xksProxyInvalidConfiguration
        case xksProxyInvalidResponse
        case xksProxyInvalidTlsConfiguration
        case xksProxyNotReachable
        case xksProxyTimedOut
        case xksVpcEndpointServiceInvalidConfiguration
        case xksVpcEndpointServiceNotFound
        case sdkUnknown(Swift.String)

        public static var allCases: [ConnectionErrorCodeType] {
            return [
                .clusterNotFound,
                .insufficientCloudhsmHsms,
                .insufficientFreeAddressesInSubnet,
                .internalError,
                .invalidCredentials,
                .networkErrors,
                .subnetNotFound,
                .userLockedOut,
                .userLoggedIn,
                .userNotFound,
                .xksProxyAccessDenied,
                .xksProxyInvalidConfiguration,
                .xksProxyInvalidResponse,
                .xksProxyInvalidTlsConfiguration,
                .xksProxyNotReachable,
                .xksProxyTimedOut,
                .xksVpcEndpointServiceInvalidConfiguration,
                .xksVpcEndpointServiceNotFound
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .clusterNotFound: return "CLUSTER_NOT_FOUND"
            case .insufficientCloudhsmHsms: return "INSUFFICIENT_CLOUDHSM_HSMS"
            case .insufficientFreeAddressesInSubnet: return "INSUFFICIENT_FREE_ADDRESSES_IN_SUBNET"
            case .internalError: return "INTERNAL_ERROR"
            case .invalidCredentials: return "INVALID_CREDENTIALS"
            case .networkErrors: return "NETWORK_ERRORS"
            case .subnetNotFound: return "SUBNET_NOT_FOUND"
            case .userLockedOut: return "USER_LOCKED_OUT"
            case .userLoggedIn: return "USER_LOGGED_IN"
            case .userNotFound: return "USER_NOT_FOUND"
            case .xksProxyAccessDenied: return "XKS_PROXY_ACCESS_DENIED"
            case .xksProxyInvalidConfiguration: return "XKS_PROXY_INVALID_CONFIGURATION"
            case .xksProxyInvalidResponse: return "XKS_PROXY_INVALID_RESPONSE"
            case .xksProxyInvalidTlsConfiguration: return "XKS_PROXY_INVALID_TLS_CONFIGURATION"
            case .xksProxyNotReachable: return "XKS_PROXY_NOT_REACHABLE"
            case .xksProxyTimedOut: return "XKS_PROXY_TIMED_OUT"
            case .xksVpcEndpointServiceInvalidConfiguration: return "XKS_VPC_ENDPOINT_SERVICE_INVALID_CONFIGURATION"
            case .xksVpcEndpointServiceNotFound: return "XKS_VPC_ENDPOINT_SERVICE_NOT_FOUND"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KMSClientTypes {

    public enum ConnectionStateType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case connected
        case connecting
        case disconnected
        case disconnecting
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [ConnectionStateType] {
            return [
                .connected,
                .connecting,
                .disconnected,
                .disconnecting,
                .failed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .connected: return "CONNECTED"
            case .connecting: return "CONNECTING"
            case .disconnected: return "DISCONNECTED"
            case .disconnecting: return "DISCONNECTING"
            case .failed: return "FAILED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The request was rejected because the specified alias name is not valid.
public struct InvalidAliasNameException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidAliasName" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because a quota was exceeded. For more information, see [Quotas](https://docs.aws.amazon.com/kms/latest/developerguide/limits.html) in the Key Management Service Developer Guide.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateAliasInput {
    /// Specifies the alias name. This value must begin with alias/ followed by a name, such as alias/ExampleAlias. Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. The AliasName value must be string of 1-256 characters. It can contain only alphanumeric characters, forward slashes (/), underscores (_), and dashes (-). The alias name cannot begin with alias/aws/. The alias/aws/ prefix is reserved for [Amazon Web Services managed keys](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk).
    /// This member is required.
    public var aliasName: Swift.String?
    /// Associates the alias with the specified [customer managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk). The KMS key must be in the same Amazon Web Services Region. A valid key ID is required. If you supply a null or empty string value, this operation returns an error. For help finding the key ID and ARN, see [Finding the Key ID and ARN](https://docs.aws.amazon.com/kms/latest/developerguide/viewing-keys.html#find-cmk-id-arn) in the Key Management Service Developer Guide . Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var targetKeyId: Swift.String?

    public init(
        aliasName: Swift.String? = nil,
        targetKeyId: Swift.String? = nil
    )
    {
        self.aliasName = aliasName
        self.targetKeyId = targetKeyId
    }
}

/// The request was rejected because the specified custom key store name is already assigned to another custom key store in the account. Try again with a custom key store name that is unique in the account.
public struct CustomKeyStoreNameInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CustomKeyStoreNameInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the trust anchor certificate in the request to create an CloudHSM key store is not the trust anchor certificate for the specified CloudHSM cluster. When you [initialize the CloudHSM cluster](https://docs.aws.amazon.com/cloudhsm/latest/userguide/initialize-cluster.html#sign-csr), you create the trust anchor certificate and save it in the customerCA.crt file.
public struct IncorrectTrustAnchorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IncorrectTrustAnchorException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the proxy credentials failed to authenticate to the specified external key store proxy. The specified external key store proxy rejected a status request from KMS due to invalid credentials. This can indicate an error in the credentials or in the identification of the external key store proxy.
public struct XksProxyIncorrectAuthenticationCredentialException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "XksProxyIncorrectAuthenticationCredentialException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the external key store proxy is not configured correctly. To identify the cause, see the error message that accompanies the exception.
public struct XksProxyInvalidConfigurationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "XksProxyInvalidConfigurationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// KMS cannot interpret the response it received from the external key store proxy. The problem might be a poorly constructed response, but it could also be a transient network issue. If you see this error repeatedly, report it to the proxy vendor.
public struct XksProxyInvalidResponseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "XksProxyInvalidResponseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the XksProxyUriEndpoint is already associated with another external key store in this Amazon Web Services Region. To identify the cause, see the error message that accompanies the exception.
public struct XksProxyUriEndpointInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "XksProxyUriEndpointInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the concatenation of the XksProxyUriEndpoint and XksProxyUriPath is already associated with another external key store in this Amazon Web Services Region. Each external key store in a Region must use a unique external key store proxy API address.
public struct XksProxyUriInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "XksProxyUriInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// KMS was unable to reach the specified XksProxyUriPath. The path must be reachable before you create the external key store or update its settings. This exception is also thrown when the external key store proxy response to a GetHealthStatus request indicates that all external key manager instances are unavailable.
public struct XksProxyUriUnreachableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "XksProxyUriUnreachableException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the specified Amazon VPC endpoint service is already associated with another external key store in this Amazon Web Services Region. Each external key store in a Region must use a different Amazon VPC endpoint service.
public struct XksProxyVpcEndpointServiceInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "XksProxyVpcEndpointServiceInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the Amazon VPC endpoint service configuration does not fulfill the requirements for an external key store. To identify the cause, see the error message that accompanies the exception and [review the requirements](https://docs.aws.amazon.com/kms/latest/developerguide/vpc-connectivity.html#xks-vpc-requirements) for Amazon VPC endpoint service connectivity for an external key store.
public struct XksProxyVpcEndpointServiceInvalidConfigurationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "XksProxyVpcEndpointServiceInvalidConfigurationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because KMS could not find the specified VPC endpoint service. Use [DescribeCustomKeyStores] to verify the VPC endpoint service name for the external key store. Also, confirm that the Allow principals list for the VPC endpoint service includes the KMS service principal for the Region, such as cks.kms.us-east-1.amazonaws.com.
public struct XksProxyVpcEndpointServiceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "XksProxyVpcEndpointServiceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension KMSClientTypes {

    public enum CustomKeyStoreType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsCloudhsm
        case externalKeyStore
        case sdkUnknown(Swift.String)

        public static var allCases: [CustomKeyStoreType] {
            return [
                .awsCloudhsm,
                .externalKeyStore
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsCloudhsm: return "AWS_CLOUDHSM"
            case .externalKeyStore: return "EXTERNAL_KEY_STORE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KMSClientTypes {
    /// KMS uses the authentication credential to sign requests that it sends to the external key store proxy (XKS proxy) on your behalf. You establish these credentials on your external key store proxy and report them to KMS. The XksProxyAuthenticationCredential includes two required elements.
    public struct XksProxyAuthenticationCredentialType {
        /// A unique identifier for the raw secret access key.
        /// This member is required.
        public var accessKeyId: Swift.String?
        /// A secret string of 43-64 characters. Valid characters are a-z, A-Z, 0-9, /, +, and =.
        /// This member is required.
        public var rawSecretAccessKey: Swift.String?

        public init(
            accessKeyId: Swift.String? = nil,
            rawSecretAccessKey: Swift.String? = nil
        )
        {
            self.accessKeyId = accessKeyId
            self.rawSecretAccessKey = rawSecretAccessKey
        }
    }

}

extension KMSClientTypes.XksProxyAuthenticationCredentialType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "XksProxyAuthenticationCredentialType(accessKeyId: \"CONTENT_REDACTED\", rawSecretAccessKey: \"CONTENT_REDACTED\")"}
}

extension KMSClientTypes {

    public enum XksProxyConnectivityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case publicEndpoint
        case vpcEndpointService
        case sdkUnknown(Swift.String)

        public static var allCases: [XksProxyConnectivityType] {
            return [
                .publicEndpoint,
                .vpcEndpointService
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .publicEndpoint: return "PUBLIC_ENDPOINT"
            case .vpcEndpointService: return "VPC_ENDPOINT_SERVICE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateCustomKeyStoreInput {
    /// Identifies the CloudHSM cluster for an CloudHSM key store. This parameter is required for custom key stores with CustomKeyStoreType of AWS_CLOUDHSM. Enter the cluster ID of any active CloudHSM cluster that is not already associated with a custom key store. To find the cluster ID, use the [DescribeClusters](https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html) operation.
    public var cloudHsmClusterId: Swift.String?
    /// Specifies a friendly name for the custom key store. The name must be unique in your Amazon Web Services account and Region. This parameter is required for all custom key stores. Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.
    /// This member is required.
    public var customKeyStoreName: Swift.String?
    /// Specifies the type of custom key store. The default value is AWS_CLOUDHSM. For a custom key store backed by an CloudHSM cluster, omit the parameter or enter AWS_CLOUDHSM. For a custom key store backed by an external key manager outside of Amazon Web Services, enter EXTERNAL_KEY_STORE. You cannot change this property after the key store is created.
    public var customKeyStoreType: KMSClientTypes.CustomKeyStoreType?
    /// Specifies the kmsuser password for an CloudHSM key store. This parameter is required for custom key stores with a CustomKeyStoreType of AWS_CLOUDHSM. Enter the password of the [kmsuser] crypto user (CU) account(https://docs.aws.amazon.com/kms/latest/developerguide/key-store-concepts.html#concept-kmsuser) in the specified CloudHSM cluster. KMS logs into the cluster as this user to manage key material on your behalf. The password must be a string of 7 to 32 characters. Its value is case sensitive. This parameter tells KMS the kmsuser account password; it does not change the password in the CloudHSM cluster.
    public var keyStorePassword: Swift.String?
    /// Specifies the certificate for an CloudHSM key store. This parameter is required for custom key stores with a CustomKeyStoreType of AWS_CLOUDHSM. Enter the content of the trust anchor certificate for the CloudHSM cluster. This is the content of the customerCA.crt file that you created when you [initialized the cluster](https://docs.aws.amazon.com/cloudhsm/latest/userguide/initialize-cluster.html).
    public var trustAnchorCertificate: Swift.String?
    /// Specifies an authentication credential for the external key store proxy (XKS proxy). This parameter is required for all custom key stores with a CustomKeyStoreType of EXTERNAL_KEY_STORE. The XksProxyAuthenticationCredential has two required elements: RawSecretAccessKey, a secret key, and AccessKeyId, a unique identifier for the RawSecretAccessKey. For character requirements, see [XksProxyAuthenticationCredentialType]. KMS uses this authentication credential to sign requests to the external key store proxy on your behalf. This credential is unrelated to Identity and Access Management (IAM) and Amazon Web Services credentials. This parameter doesn't set or change the authentication credentials on the XKS proxy. It just tells KMS the credential that you established on your external key store proxy. If you rotate your proxy authentication credential, use the [UpdateCustomKeyStore] operation to provide the new credential to KMS.
    public var xksProxyAuthenticationCredential: KMSClientTypes.XksProxyAuthenticationCredentialType?
    /// Indicates how KMS communicates with the external key store proxy. This parameter is required for custom key stores with a CustomKeyStoreType of EXTERNAL_KEY_STORE. If the external key store proxy uses a public endpoint, specify PUBLIC_ENDPOINT. If the external key store proxy uses a Amazon VPC endpoint service for communication with KMS, specify VPC_ENDPOINT_SERVICE. For help making this choice, see [Choosing a connectivity option](https://docs.aws.amazon.com/kms/latest/developerguide/plan-xks-keystore.html#choose-xks-connectivity) in the Key Management Service Developer Guide. An Amazon VPC endpoint service keeps your communication with KMS in a private address space entirely within Amazon Web Services, but it requires more configuration, including establishing a Amazon VPC with multiple subnets, a VPC endpoint service, a network load balancer, and a verified private DNS name. A public endpoint is simpler to set up, but it might be slower and might not fulfill your security requirements. You might consider testing with a public endpoint, and then establishing a VPC endpoint service for production tasks. Note that this choice does not determine the location of the external key store proxy. Even if you choose a VPC endpoint service, the proxy can be hosted within the VPC or outside of Amazon Web Services such as in your corporate data center.
    public var xksProxyConnectivity: KMSClientTypes.XksProxyConnectivityType?
    /// Specifies the endpoint that KMS uses to send requests to the external key store proxy (XKS proxy). This parameter is required for custom key stores with a CustomKeyStoreType of EXTERNAL_KEY_STORE. The protocol must be HTTPS. KMS communicates on port 443. Do not specify the port in the XksProxyUriEndpoint value. For external key stores with XksProxyConnectivity value of VPC_ENDPOINT_SERVICE, specify https:// followed by the private DNS name of the VPC endpoint service. For external key stores with PUBLIC_ENDPOINT connectivity, this endpoint must be reachable before you create the custom key store. KMS connects to the external key store proxy while creating the custom key store. For external key stores with VPC_ENDPOINT_SERVICE connectivity, KMS connects when you call the [ConnectCustomKeyStore] operation. The value of this parameter must begin with https://. The remainder can contain upper and lower case letters (A-Z and a-z), numbers (0-9), dots (.), and hyphens (-). Additional slashes (/ and \) are not permitted. Uniqueness requirements:
    ///
    /// * The combined XksProxyUriEndpoint and XksProxyUriPath values must be unique in the Amazon Web Services account and Region.
    ///
    /// * An external key store with PUBLIC_ENDPOINT connectivity cannot use the same XksProxyUriEndpoint value as an external key store with VPC_ENDPOINT_SERVICE connectivity in this Amazon Web Services Region.
    ///
    /// * Each external key store with VPC_ENDPOINT_SERVICE connectivity must have its own private DNS name. The XksProxyUriEndpoint value for external key stores with VPC_ENDPOINT_SERVICE connectivity (private DNS name) must be unique in the Amazon Web Services account and Region.
    public var xksProxyUriEndpoint: Swift.String?
    /// Specifies the base path to the proxy APIs for this external key store. To find this value, see the documentation for your external key store proxy. This parameter is required for all custom key stores with a CustomKeyStoreType of EXTERNAL_KEY_STORE. The value must start with / and must end with /kms/xks/v1 where v1 represents the version of the KMS external key store proxy API. This path can include an optional prefix between the required elements such as /prefix/kms/xks/v1. Uniqueness requirements:
    ///
    /// * The combined XksProxyUriEndpoint and XksProxyUriPath values must be unique in the Amazon Web Services account and Region.
    public var xksProxyUriPath: Swift.String?
    /// Specifies the name of the Amazon VPC endpoint service for interface endpoints that is used to communicate with your external key store proxy (XKS proxy). This parameter is required when the value of CustomKeyStoreType is EXTERNAL_KEY_STORE and the value of XksProxyConnectivity is VPC_ENDPOINT_SERVICE. The Amazon VPC endpoint service must [fulfill all requirements](https://docs.aws.amazon.com/kms/latest/developerguide/create-xks-keystore.html#xks-requirements) for use with an external key store. Uniqueness requirements:
    ///
    /// * External key stores with VPC_ENDPOINT_SERVICE connectivity can share an Amazon VPC, but each external key store must have its own VPC endpoint service and private DNS name.
    public var xksProxyVpcEndpointServiceName: Swift.String?

    public init(
        cloudHsmClusterId: Swift.String? = nil,
        customKeyStoreName: Swift.String? = nil,
        customKeyStoreType: KMSClientTypes.CustomKeyStoreType? = nil,
        keyStorePassword: Swift.String? = nil,
        trustAnchorCertificate: Swift.String? = nil,
        xksProxyAuthenticationCredential: KMSClientTypes.XksProxyAuthenticationCredentialType? = nil,
        xksProxyConnectivity: KMSClientTypes.XksProxyConnectivityType? = nil,
        xksProxyUriEndpoint: Swift.String? = nil,
        xksProxyUriPath: Swift.String? = nil,
        xksProxyVpcEndpointServiceName: Swift.String? = nil
    )
    {
        self.cloudHsmClusterId = cloudHsmClusterId
        self.customKeyStoreName = customKeyStoreName
        self.customKeyStoreType = customKeyStoreType
        self.keyStorePassword = keyStorePassword
        self.trustAnchorCertificate = trustAnchorCertificate
        self.xksProxyAuthenticationCredential = xksProxyAuthenticationCredential
        self.xksProxyConnectivity = xksProxyConnectivity
        self.xksProxyUriEndpoint = xksProxyUriEndpoint
        self.xksProxyUriPath = xksProxyUriPath
        self.xksProxyVpcEndpointServiceName = xksProxyVpcEndpointServiceName
    }
}

extension CreateCustomKeyStoreInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateCustomKeyStoreInput(cloudHsmClusterId: \(Swift.String(describing: cloudHsmClusterId)), customKeyStoreName: \(Swift.String(describing: customKeyStoreName)), customKeyStoreType: \(Swift.String(describing: customKeyStoreType)), trustAnchorCertificate: \(Swift.String(describing: trustAnchorCertificate)), xksProxyAuthenticationCredential: \(Swift.String(describing: xksProxyAuthenticationCredential)), xksProxyConnectivity: \(Swift.String(describing: xksProxyConnectivity)), xksProxyUriEndpoint: \(Swift.String(describing: xksProxyUriEndpoint)), xksProxyUriPath: \(Swift.String(describing: xksProxyUriPath)), xksProxyVpcEndpointServiceName: \(Swift.String(describing: xksProxyVpcEndpointServiceName)), keyStorePassword: \"CONTENT_REDACTED\")"}
}

public struct CreateCustomKeyStoreOutput {
    /// A unique identifier for the new custom key store.
    public var customKeyStoreId: Swift.String?

    public init(
        customKeyStoreId: Swift.String? = nil
    )
    {
        self.customKeyStoreId = customKeyStoreId
    }
}

/// The request was rejected because the specified KMS key is not enabled.
public struct DisabledException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "Disabled" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the DryRun parameter was specified.
public struct DryRunOperationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DryRunOperation" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the specified grant token is not valid.
public struct InvalidGrantTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidGrantToken" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension KMSClientTypes {
    /// Use this structure to allow [cryptographic operations](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations) in the grant only when the operation request includes the specified [encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context). KMS applies the grant constraints only to cryptographic operations that support an encryption context, that is, all cryptographic operations with a [symmetric KMS key](https://docs.aws.amazon.com/kms/latest/developerguide/symm-asymm-concepts.html#symmetric-cmks). Grant constraints are not applied to operations that do not support an encryption context, such as cryptographic operations with asymmetric KMS keys and management operations, such as [DescribeKey] or [RetireGrant]. In a cryptographic operation, the encryption context in the decryption operation must be an exact, case-sensitive match for the keys and values in the encryption context of the encryption operation. Only the order of the pairs can vary. However, in a grant constraint, the key in each key-value pair is not case sensitive, but the value is case sensitive. To avoid confusion, do not use multiple encryption context pairs that differ only by case. To require a fully case-sensitive encryption context, use the kms:EncryptionContext: and kms:EncryptionContextKeys conditions in an IAM or key policy. For details, see [kms:EncryptionContext:](https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-encryption-context) in the Key Management Service Developer Guide .
    public struct GrantConstraints {
        /// A list of key-value pairs that must match the encryption context in the [cryptographic operation](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations) request. The grant allows the operation only when the encryption context in the request is the same as the encryption context specified in this constraint.
        public var encryptionContextEquals: [Swift.String: Swift.String]?
        /// A list of key-value pairs that must be included in the encryption context of the [cryptographic operation](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations) request. The grant allows the cryptographic operation only when the encryption context in the request includes the key-value pairs specified in this constraint, although it can include additional key-value pairs.
        public var encryptionContextSubset: [Swift.String: Swift.String]?

        public init(
            encryptionContextEquals: [Swift.String: Swift.String]? = nil,
            encryptionContextSubset: [Swift.String: Swift.String]? = nil
        )
        {
            self.encryptionContextEquals = encryptionContextEquals
            self.encryptionContextSubset = encryptionContextSubset
        }
    }

}

extension KMSClientTypes {

    public enum GrantOperation: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creategrant
        case decrypt
        case derivesharedsecret
        case describekey
        case encrypt
        case generatedatakey
        case generatedatakeypair
        case generatedatakeypairwithoutplaintext
        case generatedatakeywithoutplaintext
        case generatemac
        case getpublickey
        case reencryptfrom
        case reencryptto
        case retiregrant
        case sign
        case verify
        case verifymac
        case sdkUnknown(Swift.String)

        public static var allCases: [GrantOperation] {
            return [
                .creategrant,
                .decrypt,
                .derivesharedsecret,
                .describekey,
                .encrypt,
                .generatedatakey,
                .generatedatakeypair,
                .generatedatakeypairwithoutplaintext,
                .generatedatakeywithoutplaintext,
                .generatemac,
                .getpublickey,
                .reencryptfrom,
                .reencryptto,
                .retiregrant,
                .sign,
                .verify,
                .verifymac
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creategrant: return "CreateGrant"
            case .decrypt: return "Decrypt"
            case .derivesharedsecret: return "DeriveSharedSecret"
            case .describekey: return "DescribeKey"
            case .encrypt: return "Encrypt"
            case .generatedatakey: return "GenerateDataKey"
            case .generatedatakeypair: return "GenerateDataKeyPair"
            case .generatedatakeypairwithoutplaintext: return "GenerateDataKeyPairWithoutPlaintext"
            case .generatedatakeywithoutplaintext: return "GenerateDataKeyWithoutPlaintext"
            case .generatemac: return "GenerateMac"
            case .getpublickey: return "GetPublicKey"
            case .reencryptfrom: return "ReEncryptFrom"
            case .reencryptto: return "ReEncryptTo"
            case .retiregrant: return "RetireGrant"
            case .sign: return "Sign"
            case .verify: return "Verify"
            case .verifymac: return "VerifyMac"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateGrantInput {
    /// Specifies a grant constraint. Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. KMS supports the EncryptionContextEquals and EncryptionContextSubset grant constraints, which allow the permissions in the grant only when the encryption context in the request matches (EncryptionContextEquals) or includes (EncryptionContextSubset) the encryption context specified in the constraint. The encryption context grant constraints are supported only on [grant operations](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#terms-grant-operations) that include an EncryptionContext parameter, such as cryptographic operations on symmetric encryption KMS keys. Grants with grant constraints can include the [DescribeKey] and [RetireGrant] operations, but the constraint doesn't apply to these operations. If a grant with a grant constraint includes the CreateGrant operation, the constraint requires that any grants created with the CreateGrant permission have an equally strict or stricter encryption context constraint. You cannot use an encryption context grant constraint for cryptographic operations with asymmetric KMS keys or HMAC KMS keys. Operations with these keys don't support an encryption context. Each constraint value can include up to 8 encryption context pairs. The encryption context value in each constraint cannot exceed 384 characters. For information about grant constraints, see [Using grant constraints](https://docs.aws.amazon.com/kms/latest/developerguide/create-grant-overview.html#grant-constraints) in the Key Management Service Developer Guide. For more information about encryption context, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Key Management Service Developer Guide .
    public var constraints: KMSClientTypes.GrantConstraints?
    /// Checks if your request will succeed. DryRun is an optional parameter. To learn more about how to use this parameter, see [Testing your KMS API calls](https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html) in the Key Management Service Developer Guide.
    public var dryRun: Swift.Bool?
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// The identity that gets the permissions specified in the grant. To specify the grantee principal, use the Amazon Resource Name (ARN) of an Amazon Web Services principal. Valid principals include Amazon Web Services accounts, IAM users, IAM roles, federated users, and assumed role users. For help with the ARN syntax for a principal, see [IAM ARNs](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns) in the Identity and Access Management User Guide .
    /// This member is required.
    public var granteePrincipal: Swift.String?
    /// Identifies the KMS key for the grant. The grant gives principals permission to use this KMS key. Specify the key ID or key ARN of the KMS key. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// A friendly name for the grant. Use this value to prevent the unintended creation of duplicate grants when retrying this request. Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. When this value is absent, all CreateGrant requests result in a new grant with a unique GrantId even if all the supplied parameters are identical. This can result in unintended duplicates when you retry the CreateGrant request. When this value is present, you can retry a CreateGrant request with identical parameters; if the grant already exists, the original GrantId is returned without creating a new grant. Note that the returned grant token is unique with every CreateGrant request, even when a duplicate GrantId is returned. All grant tokens for the same grant ID can be used interchangeably.
    public var name: Swift.String?
    /// A list of operations that the grant permits. This list must include only operations that are permitted in a grant. Also, the operation must be supported on the KMS key. For example, you cannot create a grant for a symmetric encryption KMS key that allows the [Sign] operation, or a grant for an asymmetric KMS key that allows the [GenerateDataKey] operation. If you try, KMS returns a ValidationError exception. For details, see [Grant operations](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#terms-grant-operations) in the Key Management Service Developer Guide.
    /// This member is required.
    public var operations: [KMSClientTypes.GrantOperation]?
    /// The principal that has permission to use the [RetireGrant] operation to retire the grant. To specify the principal, use the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of an Amazon Web Services principal. Valid principals include Amazon Web Services accounts, IAM users, IAM roles, federated users, and assumed role users. For help with the ARN syntax for a principal, see [IAM ARNs](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns) in the Identity and Access Management User Guide . The grant determines the retiring principal. Other principals might have permission to retire the grant or revoke the grant. For details, see [RevokeGrant] and [Retiring and revoking grants](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#grant-delete) in the Key Management Service Developer Guide.
    public var retiringPrincipal: Swift.String?

    public init(
        constraints: KMSClientTypes.GrantConstraints? = nil,
        dryRun: Swift.Bool? = nil,
        grantTokens: [Swift.String]? = nil,
        granteePrincipal: Swift.String? = nil,
        keyId: Swift.String? = nil,
        name: Swift.String? = nil,
        operations: [KMSClientTypes.GrantOperation]? = nil,
        retiringPrincipal: Swift.String? = nil
    )
    {
        self.constraints = constraints
        self.dryRun = dryRun
        self.grantTokens = grantTokens
        self.granteePrincipal = granteePrincipal
        self.keyId = keyId
        self.name = name
        self.operations = operations
        self.retiringPrincipal = retiringPrincipal
    }
}

public struct CreateGrantOutput {
    /// The unique identifier for the grant. You can use the GrantId in a [ListGrants], [RetireGrant], or [RevokeGrant] operation.
    public var grantId: Swift.String?
    /// The grant token. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantToken: Swift.String?

    public init(
        grantId: Swift.String? = nil,
        grantToken: Swift.String? = nil
    )
    {
        self.grantId = grantId
        self.grantToken = grantToken
    }
}

/// The request was rejected because the specified policy is not syntactically or semantically correct.
public struct MalformedPolicyDocumentException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MalformedPolicyDocument" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because one or more tags are not valid.
public struct TagException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TagException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because a specified parameter is not supported or a specified resource is not valid for this operation.
public struct UnsupportedOperationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedOperation" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the (XksKeyId) is already associated with another KMS key in this external key store. Each KMS key in an external key store must be associated with a different external key.
public struct XksKeyAlreadyInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "XksKeyAlreadyInUse" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the external key specified by the XksKeyId parameter did not meet the configuration requirements for an external key store. The external key must be an AES-256 symmetric key that is enabled and performs encryption and decryption.
public struct XksKeyInvalidConfigurationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "XksKeyInvalidConfiguration" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the external key store proxy could not find the external key. This exception is thrown when the value of the XksKeyId parameter doesn't identify a key in the external key manager associated with the external key proxy. Verify that the XksKeyId represents an existing key in the external key manager. Use the key identifier that the external key store proxy uses to identify the key. For details, see the documentation provided with your external key store proxy or key manager.
public struct XksKeyNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "XksKeyNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension KMSClientTypes {

    @available(*, deprecated, message: "This enum has been deprecated. Instead, use the KeySpec enum.")
    public enum CustomerMasterKeySpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case eccNistP256
        case eccNistP384
        case eccNistP521
        case eccSecgP256k1
        case hmac224
        case hmac256
        case hmac384
        case hmac512
        case rsa2048
        case rsa3072
        case rsa4096
        case sm2
        case symmetricDefault
        case sdkUnknown(Swift.String)

        public static var allCases: [CustomerMasterKeySpec] {
            return [
                .eccNistP256,
                .eccNistP384,
                .eccNistP521,
                .eccSecgP256k1,
                .hmac224,
                .hmac256,
                .hmac384,
                .hmac512,
                .rsa2048,
                .rsa3072,
                .rsa4096,
                .sm2,
                .symmetricDefault
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .eccNistP256: return "ECC_NIST_P256"
            case .eccNistP384: return "ECC_NIST_P384"
            case .eccNistP521: return "ECC_NIST_P521"
            case .eccSecgP256k1: return "ECC_SECG_P256K1"
            case .hmac224: return "HMAC_224"
            case .hmac256: return "HMAC_256"
            case .hmac384: return "HMAC_384"
            case .hmac512: return "HMAC_512"
            case .rsa2048: return "RSA_2048"
            case .rsa3072: return "RSA_3072"
            case .rsa4096: return "RSA_4096"
            case .sm2: return "SM2"
            case .symmetricDefault: return "SYMMETRIC_DEFAULT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KMSClientTypes {

    public enum KeySpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case eccNistP256
        case eccNistP384
        case eccNistP521
        case eccSecgP256k1
        case hmac224
        case hmac256
        case hmac384
        case hmac512
        case rsa2048
        case rsa3072
        case rsa4096
        case sm2
        case symmetricDefault
        case sdkUnknown(Swift.String)

        public static var allCases: [KeySpec] {
            return [
                .eccNistP256,
                .eccNistP384,
                .eccNistP521,
                .eccSecgP256k1,
                .hmac224,
                .hmac256,
                .hmac384,
                .hmac512,
                .rsa2048,
                .rsa3072,
                .rsa4096,
                .sm2,
                .symmetricDefault
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .eccNistP256: return "ECC_NIST_P256"
            case .eccNistP384: return "ECC_NIST_P384"
            case .eccNistP521: return "ECC_NIST_P521"
            case .eccSecgP256k1: return "ECC_SECG_P256K1"
            case .hmac224: return "HMAC_224"
            case .hmac256: return "HMAC_256"
            case .hmac384: return "HMAC_384"
            case .hmac512: return "HMAC_512"
            case .rsa2048: return "RSA_2048"
            case .rsa3072: return "RSA_3072"
            case .rsa4096: return "RSA_4096"
            case .sm2: return "SM2"
            case .symmetricDefault: return "SYMMETRIC_DEFAULT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KMSClientTypes {

    public enum KeyUsageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case encryptDecrypt
        case generateVerifyMac
        case keyAgreement
        case signVerify
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyUsageType] {
            return [
                .encryptDecrypt,
                .generateVerifyMac,
                .keyAgreement,
                .signVerify
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .encryptDecrypt: return "ENCRYPT_DECRYPT"
            case .generateVerifyMac: return "GENERATE_VERIFY_MAC"
            case .keyAgreement: return "KEY_AGREEMENT"
            case .signVerify: return "SIGN_VERIFY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KMSClientTypes {

    public enum OriginType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsCloudhsm
        case awsKms
        case external
        case externalKeyStore
        case sdkUnknown(Swift.String)

        public static var allCases: [OriginType] {
            return [
                .awsCloudhsm,
                .awsKms,
                .external,
                .externalKeyStore
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsCloudhsm: return "AWS_CLOUDHSM"
            case .awsKms: return "AWS_KMS"
            case .external: return "EXTERNAL"
            case .externalKeyStore: return "EXTERNAL_KEY_STORE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KMSClientTypes {
    /// A key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings. Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. For information about the rules that apply to tag keys and tag values, see [User-Defined Tag Restrictions](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/allocation-tag-restrictions.html) in the Amazon Web Services Billing and Cost Management User Guide.
    public struct Tag {
        /// The key of the tag.
        /// This member is required.
        public var tagKey: Swift.String?
        /// The value of the tag.
        /// This member is required.
        public var tagValue: Swift.String?

        public init(
            tagKey: Swift.String? = nil,
            tagValue: Swift.String? = nil
        )
        {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }
    }

}

public struct CreateKeyInput {
    /// Skips ("bypasses") the key policy lockout safety check. The default value is false. Setting this value to true increases the risk that the KMS key becomes unmanageable. Do not set this value to true indiscriminately. For more information, see [Default key policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#prevent-unmanageable-key) in the Key Management Service Developer Guide. Use this parameter only when you intend to prevent the principal that is making the request from making a subsequent [PutKeyPolicy](https://docs.aws.amazon.com/kms/latest/APIReference/API_PutKeyPolicy.html) request on the KMS key.
    public var bypassPolicyLockoutSafetyCheck: Swift.Bool?
    /// Creates the KMS key in the specified [custom key store](https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html). The ConnectionState of the custom key store must be CONNECTED. To find the CustomKeyStoreID and ConnectionState use the [DescribeCustomKeyStores] operation. This parameter is valid only for symmetric encryption KMS keys in a single Region. You cannot create any other type of KMS key in a custom key store. When you create a KMS key in an CloudHSM key store, KMS generates a non-exportable 256-bit symmetric key in its associated CloudHSM cluster and associates it with the KMS key. When you create a KMS key in an external key store, you must use the XksKeyId parameter to specify an external key that serves as key material for the KMS key.
    public var customKeyStoreId: Swift.String?
    /// Instead, use the KeySpec parameter. The KeySpec and CustomerMasterKeySpec parameters work the same way. Only the names differ. We recommend that you use KeySpec parameter in your code. However, to avoid breaking changes, KMS supports both parameters.
    @available(*, deprecated, message: "This parameter has been deprecated. Instead, use the KeySpec parameter.")
    public var customerMasterKeySpec: KMSClientTypes.CustomerMasterKeySpec?
    /// A description of the KMS key. Use a description that helps you decide whether the KMS key is appropriate for a task. The default value is an empty string (no description). Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. To set or change the description after the key is created, use [UpdateKeyDescription].
    public var description: Swift.String?
    /// Specifies the type of KMS key to create. The default value, SYMMETRIC_DEFAULT, creates a KMS key with a 256-bit AES-GCM key that is used for encryption and decryption, except in China Regions, where it creates a 128-bit symmetric key that uses SM4 encryption. For help choosing a key spec for your KMS key, see [Choosing a KMS key type](https://docs.aws.amazon.com/kms/latest/developerguide/key-types.html#symm-asymm-choose) in the Key Management Service Developer Guide . The KeySpec determines whether the KMS key contains a symmetric key or an asymmetric key pair. It also determines the algorithms that the KMS key supports. You can't change the KeySpec after the KMS key is created. To further restrict the algorithms that can be used with the KMS key, use a condition key in its key policy or IAM policy. For more information, see [kms:EncryptionAlgorithm](https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-encryption-algorithm), [kms:MacAlgorithm](https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-mac-algorithm) or [kms:Signing Algorithm](https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-signing-algorithm) in the Key Management Service Developer Guide . [Amazon Web Services services that are integrated with KMS](http://aws.amazon.com/kms/features/#AWS_Service_Integration) use symmetric encryption KMS keys to protect your data. These services do not support asymmetric KMS keys or HMAC KMS keys. KMS supports the following key specs for KMS keys:
    ///
    /// * Symmetric encryption key (default)
    ///
    /// * SYMMETRIC_DEFAULT
    ///
    ///
    ///
    ///
    /// * HMAC keys (symmetric)
    ///
    /// * HMAC_224
    ///
    /// * HMAC_256
    ///
    /// * HMAC_384
    ///
    /// * HMAC_512
    ///
    ///
    ///
    ///
    /// * Asymmetric RSA key pairs (encryption and decryption -or- signing and verification)
    ///
    /// * RSA_2048
    ///
    /// * RSA_3072
    ///
    /// * RSA_4096
    ///
    ///
    ///
    ///
    /// * Asymmetric NIST-recommended elliptic curve key pairs (signing and verification -or- deriving shared secrets)
    ///
    /// * ECC_NIST_P256 (secp256r1)
    ///
    /// * ECC_NIST_P384 (secp384r1)
    ///
    /// * ECC_NIST_P521 (secp521r1)
    ///
    ///
    ///
    ///
    /// * Other asymmetric elliptic curve key pairs (signing and verification)
    ///
    /// * ECC_SECG_P256K1 (secp256k1), commonly used for cryptocurrencies.
    ///
    ///
    ///
    ///
    /// * SM2 key pairs (encryption and decryption -or- signing and verification -or- deriving shared secrets)
    ///
    /// * SM2 (China Regions only)
    public var keySpec: KMSClientTypes.KeySpec?
    /// Determines the [cryptographic operations](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations) for which you can use the KMS key. The default value is ENCRYPT_DECRYPT. This parameter is optional when you are creating a symmetric encryption KMS key; otherwise, it is required. You can't change the KeyUsage value after the KMS key is created. Select only one valid value.
    ///
    /// * For symmetric encryption KMS keys, omit the parameter or specify ENCRYPT_DECRYPT.
    ///
    /// * For HMAC KMS keys (symmetric), specify GENERATE_VERIFY_MAC.
    ///
    /// * For asymmetric KMS keys with RSA key pairs, specify ENCRYPT_DECRYPT or SIGN_VERIFY.
    ///
    /// * For asymmetric KMS keys with NIST-recommended elliptic curve key pairs, specify SIGN_VERIFY or KEY_AGREEMENT.
    ///
    /// * For asymmetric KMS keys with ECC_SECG_P256K1 key pairs specify SIGN_VERIFY.
    ///
    /// * For asymmetric KMS keys with SM2 key pairs (China Regions only), specify ENCRYPT_DECRYPT, SIGN_VERIFY, or KEY_AGREEMENT.
    public var keyUsage: KMSClientTypes.KeyUsageType?
    /// Creates a multi-Region primary key that you can replicate into other Amazon Web Services Regions. You cannot change this value after you create the KMS key. For a multi-Region key, set this parameter to True. For a single-Region KMS key, omit this parameter or set it to False. The default value is False. This operation supports multi-Region keys, an KMS feature that lets you create multiple interoperable KMS keys in different Amazon Web Services Regions. Because these KMS keys have the same key ID, key material, and other metadata, you can use them interchangeably to encrypt data in one Amazon Web Services Region and decrypt it in a different Amazon Web Services Region without re-encrypting the data or making a cross-Region call. For more information about multi-Region keys, see [Multi-Region keys in KMS](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html) in the Key Management Service Developer Guide. This value creates a primary key, not a replica. To create a replica key, use the [ReplicateKey] operation. You can create a symmetric or asymmetric multi-Region key, and you can create a multi-Region key with imported key material. However, you cannot create a multi-Region key in a custom key store.
    public var multiRegion: Swift.Bool?
    /// The source of the key material for the KMS key. You cannot change the origin after you create the KMS key. The default is AWS_KMS, which means that KMS creates the key material. To [create a KMS key with no key material](https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys-create-cmk.html) (for imported key material), set this value to EXTERNAL. For more information about importing key material into KMS, see [Importing Key Material](https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html) in the Key Management Service Developer Guide. The EXTERNAL origin value is valid only for symmetric KMS keys. To [create a KMS key in an CloudHSM key store](https://docs.aws.amazon.com/kms/latest/developerguide/create-cmk-keystore.html) and create its key material in the associated CloudHSM cluster, set this value to AWS_CLOUDHSM. You must also use the CustomKeyStoreId parameter to identify the CloudHSM key store. The KeySpec value must be SYMMETRIC_DEFAULT. To [create a KMS key in an external key store](https://docs.aws.amazon.com/kms/latest/developerguide/create-xks-keys.html), set this value to EXTERNAL_KEY_STORE. You must also use the CustomKeyStoreId parameter to identify the external key store and the XksKeyId parameter to identify the associated external key. The KeySpec value must be SYMMETRIC_DEFAULT.
    public var origin: KMSClientTypes.OriginType?
    /// The key policy to attach to the KMS key. If you provide a key policy, it must meet the following criteria:
    ///
    /// * The key policy must allow the calling principal to make a subsequent PutKeyPolicy request on the KMS key. This reduces the risk that the KMS key becomes unmanageable. For more information, see [Default key policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#prevent-unmanageable-key) in the Key Management Service Developer Guide. (To omit this condition, set BypassPolicyLockoutSafetyCheck to true.)
    ///
    /// * Each statement in the key policy must contain one or more principals. The principals in the key policy must exist and be visible to KMS. When you create a new Amazon Web Services principal, you might need to enforce a delay before including the new principal in a key policy because the new principal might not be immediately visible to KMS. For more information, see [Changes that I make are not always immediately visible](https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency) in the Amazon Web Services Identity and Access Management User Guide.
    ///
    ///
    /// If you do not provide a key policy, KMS attaches a default key policy to the KMS key. For more information, see [Default key policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default) in the Key Management Service Developer Guide. The key policy size quota is 32 kilobytes (32768 bytes). For help writing and formatting a JSON policy document, see the [IAM JSON Policy Reference](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html) in the Identity and Access Management User Guide .
    public var policy: Swift.String?
    /// Assigns one or more tags to the KMS key. Use this parameter to tag the KMS key when it is created. To tag an existing KMS key, use the [TagResource] operation. Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. Tagging or untagging a KMS key can allow or deny permission to the KMS key. For details, see [ABAC for KMS](https://docs.aws.amazon.com/kms/latest/developerguide/abac.html) in the Key Management Service Developer Guide. To use this parameter, you must have [kms:TagResource](https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html) permission in an IAM policy. Each tag consists of a tag key and a tag value. Both the tag key and the tag value are required, but the tag value can be an empty (null) string. You cannot have more than one tag on a KMS key with the same tag key. If you specify an existing tag key with a different tag value, KMS replaces the current tag value with the specified one. When you add tags to an Amazon Web Services resource, Amazon Web Services generates a cost allocation report with usage and costs aggregated by tags. Tags can also be used to control access to a KMS key. For details, see [Tagging Keys](https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html).
    public var tags: [KMSClientTypes.Tag]?
    /// Identifies the [external key](https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html#concept-external-key) that serves as key material for the KMS key in an [external key store](https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html). Specify the ID that the [external key store proxy](https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html#concept-xks-proxy) uses to refer to the external key. For help, see the documentation for your external key store proxy. This parameter is required for a KMS key with an Origin value of EXTERNAL_KEY_STORE. It is not valid for KMS keys with any other Origin value. The external key must be an existing 256-bit AES symmetric encryption key hosted outside of Amazon Web Services in an external key manager associated with the external key store specified by the CustomKeyStoreId parameter. This key must be enabled and configured to perform encryption and decryption. Each KMS key in an external key store must use a different external key. For details, see [Requirements for a KMS key in an external key store](https://docs.aws.amazon.com/create-xks-keys.html#xks-key-requirements) in the Key Management Service Developer Guide. Each KMS key in an external key store is associated two backing keys. One is key material that KMS generates. The other is the external key specified by this parameter. When you use the KMS key in an external key store to encrypt data, the encryption operation is performed first by KMS using the KMS key material, and then by the external key manager using the specified external key, a process known as double encryption. For details, see [Double encryption](https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html#concept-double-encryption) in the Key Management Service Developer Guide.
    public var xksKeyId: Swift.String?

    public init(
        bypassPolicyLockoutSafetyCheck: Swift.Bool? = false,
        customKeyStoreId: Swift.String? = nil,
        customerMasterKeySpec: KMSClientTypes.CustomerMasterKeySpec? = nil,
        description: Swift.String? = nil,
        keySpec: KMSClientTypes.KeySpec? = nil,
        keyUsage: KMSClientTypes.KeyUsageType? = nil,
        multiRegion: Swift.Bool? = nil,
        origin: KMSClientTypes.OriginType? = nil,
        policy: Swift.String? = nil,
        tags: [KMSClientTypes.Tag]? = nil,
        xksKeyId: Swift.String? = nil
    )
    {
        self.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck
        self.customKeyStoreId = customKeyStoreId
        self.customerMasterKeySpec = customerMasterKeySpec
        self.description = description
        self.keySpec = keySpec
        self.keyUsage = keyUsage
        self.multiRegion = multiRegion
        self.origin = origin
        self.policy = policy
        self.tags = tags
        self.xksKeyId = xksKeyId
    }
}

extension KMSClientTypes {

    public enum EncryptionAlgorithmSpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case rsaesOaepSha1
        case rsaesOaepSha256
        case sm2pke
        case symmetricDefault
        case sdkUnknown(Swift.String)

        public static var allCases: [EncryptionAlgorithmSpec] {
            return [
                .rsaesOaepSha1,
                .rsaesOaepSha256,
                .sm2pke,
                .symmetricDefault
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .rsaesOaepSha1: return "RSAES_OAEP_SHA_1"
            case .rsaesOaepSha256: return "RSAES_OAEP_SHA_256"
            case .sm2pke: return "SM2PKE"
            case .symmetricDefault: return "SYMMETRIC_DEFAULT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KMSClientTypes {

    public enum ExpirationModelType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case keyMaterialDoesNotExpire
        case keyMaterialExpires
        case sdkUnknown(Swift.String)

        public static var allCases: [ExpirationModelType] {
            return [
                .keyMaterialDoesNotExpire,
                .keyMaterialExpires
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .keyMaterialDoesNotExpire: return "KEY_MATERIAL_DOES_NOT_EXPIRE"
            case .keyMaterialExpires: return "KEY_MATERIAL_EXPIRES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KMSClientTypes {

    public enum KeyAgreementAlgorithmSpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ecdh
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyAgreementAlgorithmSpec] {
            return [
                .ecdh
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ecdh: return "ECDH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KMSClientTypes {

    public enum KeyManagerType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aws
        case customer
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyManagerType] {
            return [
                .aws,
                .customer
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aws: return "AWS"
            case .customer: return "CUSTOMER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KMSClientTypes {

    public enum KeyState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creating
        case disabled
        case enabled
        case pendingdeletion
        case pendingimport
        case pendingreplicadeletion
        case unavailable
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyState] {
            return [
                .creating,
                .disabled,
                .enabled,
                .pendingdeletion,
                .pendingimport,
                .pendingreplicadeletion,
                .unavailable,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creating: return "Creating"
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case .pendingdeletion: return "PendingDeletion"
            case .pendingimport: return "PendingImport"
            case .pendingreplicadeletion: return "PendingReplicaDeletion"
            case .unavailable: return "Unavailable"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KMSClientTypes {

    public enum MacAlgorithmSpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hmacSha224
        case hmacSha256
        case hmacSha384
        case hmacSha512
        case sdkUnknown(Swift.String)

        public static var allCases: [MacAlgorithmSpec] {
            return [
                .hmacSha224,
                .hmacSha256,
                .hmacSha384,
                .hmacSha512
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hmacSha224: return "HMAC_SHA_224"
            case .hmacSha256: return "HMAC_SHA_256"
            case .hmacSha384: return "HMAC_SHA_384"
            case .hmacSha512: return "HMAC_SHA_512"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KMSClientTypes {

    public enum MultiRegionKeyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case primary
        case replica
        case sdkUnknown(Swift.String)

        public static var allCases: [MultiRegionKeyType] {
            return [
                .primary,
                .replica
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .primary: return "PRIMARY"
            case .replica: return "REPLICA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KMSClientTypes {
    /// Describes the primary or replica key in a multi-Region key.
    public struct MultiRegionKey {
        /// Displays the key ARN of a primary or replica key of a multi-Region key.
        public var arn: Swift.String?
        /// Displays the Amazon Web Services Region of a primary or replica key in a multi-Region key.
        public var region: Swift.String?

        public init(
            arn: Swift.String? = nil,
            region: Swift.String? = nil
        )
        {
            self.arn = arn
            self.region = region
        }
    }

}

extension KMSClientTypes {
    /// Describes the configuration of this multi-Region key. This field appears only when the KMS key is a primary or replica of a multi-Region key. For more information about any listed KMS key, use the [DescribeKey] operation.
    public struct MultiRegionConfiguration {
        /// Indicates whether the KMS key is a PRIMARY or REPLICA key.
        public var multiRegionKeyType: KMSClientTypes.MultiRegionKeyType?
        /// Displays the key ARN and Region of the primary key. This field includes the current KMS key if it is the primary key.
        public var primaryKey: KMSClientTypes.MultiRegionKey?
        /// displays the key ARNs and Regions of all replica keys. This field includes the current KMS key if it is a replica key.
        public var replicaKeys: [KMSClientTypes.MultiRegionKey]?

        public init(
            multiRegionKeyType: KMSClientTypes.MultiRegionKeyType? = nil,
            primaryKey: KMSClientTypes.MultiRegionKey? = nil,
            replicaKeys: [KMSClientTypes.MultiRegionKey]? = nil
        )
        {
            self.multiRegionKeyType = multiRegionKeyType
            self.primaryKey = primaryKey
            self.replicaKeys = replicaKeys
        }
    }

}

extension KMSClientTypes {

    public enum SigningAlgorithmSpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ecdsaSha256
        case ecdsaSha384
        case ecdsaSha512
        case rsassaPkcs1V15Sha256
        case rsassaPkcs1V15Sha384
        case rsassaPkcs1V15Sha512
        case rsassaPssSha256
        case rsassaPssSha384
        case rsassaPssSha512
        case sm2dsa
        case sdkUnknown(Swift.String)

        public static var allCases: [SigningAlgorithmSpec] {
            return [
                .ecdsaSha256,
                .ecdsaSha384,
                .ecdsaSha512,
                .rsassaPkcs1V15Sha256,
                .rsassaPkcs1V15Sha384,
                .rsassaPkcs1V15Sha512,
                .rsassaPssSha256,
                .rsassaPssSha384,
                .rsassaPssSha512,
                .sm2dsa
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ecdsaSha256: return "ECDSA_SHA_256"
            case .ecdsaSha384: return "ECDSA_SHA_384"
            case .ecdsaSha512: return "ECDSA_SHA_512"
            case .rsassaPkcs1V15Sha256: return "RSASSA_PKCS1_V1_5_SHA_256"
            case .rsassaPkcs1V15Sha384: return "RSASSA_PKCS1_V1_5_SHA_384"
            case .rsassaPkcs1V15Sha512: return "RSASSA_PKCS1_V1_5_SHA_512"
            case .rsassaPssSha256: return "RSASSA_PSS_SHA_256"
            case .rsassaPssSha384: return "RSASSA_PSS_SHA_384"
            case .rsassaPssSha512: return "RSASSA_PSS_SHA_512"
            case .sm2dsa: return "SM2DSA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KMSClientTypes {
    /// Information about the [external key ](https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html#concept-external-key)that is associated with a KMS key in an external key store. This element appears in a [CreateKey] or [DescribeKey] response only for a KMS key in an external key store. The external key is a symmetric encryption key that is hosted by an external key manager outside of Amazon Web Services. When you use the KMS key in an external key store in a cryptographic operation, the cryptographic operation is performed in the external key manager using the specified external key. For more information, see [External key](https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html#concept-external-key) in the Key Management Service Developer Guide.
    public struct XksKeyConfigurationType {
        /// The ID of the external key in its external key manager. This is the ID that the external key store proxy uses to identify the external key.
        public var id: Swift.String?

        public init(
            id: Swift.String? = nil
        )
        {
            self.id = id
        }
    }

}

extension KMSClientTypes {
    /// Contains metadata about a KMS key. This data type is used as a response element for the [CreateKey], [DescribeKey], and [ReplicateKey] operations.
    public struct KeyMetadata {
        /// The Amazon Resource Name (ARN) of the KMS key. For examples, see [Key Management Service (KMS)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms) in the Example ARNs section of the Amazon Web Services General Reference.
        public var arn: Swift.String?
        /// The twelve-digit account ID of the Amazon Web Services account that owns the KMS key.
        public var awsAccountId: Swift.String?
        /// The cluster ID of the CloudHSM cluster that contains the key material for the KMS key. When you create a KMS key in an CloudHSM [custom key store](https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html), KMS creates the key material for the KMS key in the associated CloudHSM cluster. This field is present only when the KMS key is created in an CloudHSM key store.
        public var cloudHsmClusterId: Swift.String?
        /// The date and time when the KMS key was created.
        public var creationDate: Foundation.Date?
        /// A unique identifier for the [custom key store](https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html) that contains the KMS key. This field is present only when the KMS key is created in a custom key store.
        public var customKeyStoreId: Swift.String?
        /// Instead, use the KeySpec field. The KeySpec and CustomerMasterKeySpec fields have the same value. We recommend that you use the KeySpec field in your code. However, to avoid breaking changes, KMS supports both fields.
        @available(*, deprecated, message: "This field has been deprecated. Instead, use the KeySpec field.")
        public var customerMasterKeySpec: KMSClientTypes.CustomerMasterKeySpec?
        /// The date and time after which KMS deletes this KMS key. This value is present only when the KMS key is scheduled for deletion, that is, when its KeyState is PendingDeletion. When the primary key in a multi-Region key is scheduled for deletion but still has replica keys, its key state is PendingReplicaDeletion and the length of its waiting period is displayed in the PendingDeletionWindowInDays field.
        public var deletionDate: Foundation.Date?
        /// The description of the KMS key.
        public var description: Swift.String?
        /// Specifies whether the KMS key is enabled. When KeyState is Enabled this value is true, otherwise it is false.
        public var enabled: Swift.Bool
        /// The encryption algorithms that the KMS key supports. You cannot use the KMS key with other encryption algorithms within KMS. This value is present only when the KeyUsage of the KMS key is ENCRYPT_DECRYPT.
        public var encryptionAlgorithms: [KMSClientTypes.EncryptionAlgorithmSpec]?
        /// Specifies whether the KMS key's key material expires. This value is present only when Origin is EXTERNAL, otherwise this value is omitted.
        public var expirationModel: KMSClientTypes.ExpirationModelType?
        /// The key agreement algorithm used to derive a shared secret.
        public var keyAgreementAlgorithms: [KMSClientTypes.KeyAgreementAlgorithmSpec]?
        /// The globally unique identifier for the KMS key.
        /// This member is required.
        public var keyId: Swift.String?
        /// The manager of the KMS key. KMS keys in your Amazon Web Services account are either customer managed or Amazon Web Services managed. For more information about the difference, see [KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#kms_keys) in the Key Management Service Developer Guide.
        public var keyManager: KMSClientTypes.KeyManagerType?
        /// Describes the type of key material in the KMS key.
        public var keySpec: KMSClientTypes.KeySpec?
        /// The current status of the KMS key. For more information about how key state affects the use of a KMS key, see [Key states of KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the Key Management Service Developer Guide.
        public var keyState: KMSClientTypes.KeyState?
        /// The [cryptographic operations](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations) for which you can use the KMS key.
        public var keyUsage: KMSClientTypes.KeyUsageType?
        /// The message authentication code (MAC) algorithm that the HMAC KMS key supports. This value is present only when the KeyUsage of the KMS key is GENERATE_VERIFY_MAC.
        public var macAlgorithms: [KMSClientTypes.MacAlgorithmSpec]?
        /// Indicates whether the KMS key is a multi-Region (True) or regional (False) key. This value is True for multi-Region primary and replica keys and False for regional KMS keys. For more information about multi-Region keys, see [Multi-Region keys in KMS](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html) in the Key Management Service Developer Guide.
        public var multiRegion: Swift.Bool?
        /// Lists the primary and replica keys in same multi-Region key. This field is present only when the value of the MultiRegion field is True. For more information about any listed KMS key, use the [DescribeKey] operation.
        ///
        /// * MultiRegionKeyType indicates whether the KMS key is a PRIMARY or REPLICA key.
        ///
        /// * PrimaryKey displays the key ARN and Region of the primary key. This field displays the current KMS key if it is the primary key.
        ///
        /// * ReplicaKeys displays the key ARNs and Regions of all replica keys. This field includes the current KMS key if it is a replica key.
        public var multiRegionConfiguration: KMSClientTypes.MultiRegionConfiguration?
        /// The source of the key material for the KMS key. When this value is AWS_KMS, KMS created the key material. When this value is EXTERNAL, the key material was imported or the KMS key doesn't have any key material. When this value is AWS_CLOUDHSM, the key material was created in the CloudHSM cluster associated with a custom key store.
        public var origin: KMSClientTypes.OriginType?
        /// The waiting period before the primary key in a multi-Region key is deleted. This waiting period begins when the last of its replica keys is deleted. This value is present only when the KeyState of the KMS key is PendingReplicaDeletion. That indicates that the KMS key is the primary key in a multi-Region key, it is scheduled for deletion, and it still has existing replica keys. When a single-Region KMS key or a multi-Region replica key is scheduled for deletion, its deletion date is displayed in the DeletionDate field. However, when the primary key in a multi-Region key is scheduled for deletion, its waiting period doesn't begin until all of its replica keys are deleted. This value displays that waiting period. When the last replica key in the multi-Region key is deleted, the KeyState of the scheduled primary key changes from PendingReplicaDeletion to PendingDeletion and the deletion date appears in the DeletionDate field.
        public var pendingDeletionWindowInDays: Swift.Int?
        /// The signing algorithms that the KMS key supports. You cannot use the KMS key with other signing algorithms within KMS. This field appears only when the KeyUsage of the KMS key is SIGN_VERIFY.
        public var signingAlgorithms: [KMSClientTypes.SigningAlgorithmSpec]?
        /// The time at which the imported key material expires. When the key material expires, KMS deletes the key material and the KMS key becomes unusable. This value is present only for KMS keys whose Origin is EXTERNAL and whose ExpirationModel is KEY_MATERIAL_EXPIRES, otherwise this value is omitted.
        public var validTo: Foundation.Date?
        /// Information about the external key that is associated with a KMS key in an external key store. For more information, see [External key](https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html#concept-external-key) in the Key Management Service Developer Guide.
        public var xksKeyConfiguration: KMSClientTypes.XksKeyConfigurationType?

        public init(
            arn: Swift.String? = nil,
            awsAccountId: Swift.String? = nil,
            cloudHsmClusterId: Swift.String? = nil,
            creationDate: Foundation.Date? = nil,
            customKeyStoreId: Swift.String? = nil,
            customerMasterKeySpec: KMSClientTypes.CustomerMasterKeySpec? = nil,
            deletionDate: Foundation.Date? = nil,
            description: Swift.String? = nil,
            enabled: Swift.Bool = false,
            encryptionAlgorithms: [KMSClientTypes.EncryptionAlgorithmSpec]? = nil,
            expirationModel: KMSClientTypes.ExpirationModelType? = nil,
            keyAgreementAlgorithms: [KMSClientTypes.KeyAgreementAlgorithmSpec]? = nil,
            keyId: Swift.String? = nil,
            keyManager: KMSClientTypes.KeyManagerType? = nil,
            keySpec: KMSClientTypes.KeySpec? = nil,
            keyState: KMSClientTypes.KeyState? = nil,
            keyUsage: KMSClientTypes.KeyUsageType? = nil,
            macAlgorithms: [KMSClientTypes.MacAlgorithmSpec]? = nil,
            multiRegion: Swift.Bool? = nil,
            multiRegionConfiguration: KMSClientTypes.MultiRegionConfiguration? = nil,
            origin: KMSClientTypes.OriginType? = nil,
            pendingDeletionWindowInDays: Swift.Int? = nil,
            signingAlgorithms: [KMSClientTypes.SigningAlgorithmSpec]? = nil,
            validTo: Foundation.Date? = nil,
            xksKeyConfiguration: KMSClientTypes.XksKeyConfigurationType? = nil
        )
        {
            self.arn = arn
            self.awsAccountId = awsAccountId
            self.cloudHsmClusterId = cloudHsmClusterId
            self.creationDate = creationDate
            self.customKeyStoreId = customKeyStoreId
            self.customerMasterKeySpec = customerMasterKeySpec
            self.deletionDate = deletionDate
            self.description = description
            self.enabled = enabled
            self.encryptionAlgorithms = encryptionAlgorithms
            self.expirationModel = expirationModel
            self.keyAgreementAlgorithms = keyAgreementAlgorithms
            self.keyId = keyId
            self.keyManager = keyManager
            self.keySpec = keySpec
            self.keyState = keyState
            self.keyUsage = keyUsage
            self.macAlgorithms = macAlgorithms
            self.multiRegion = multiRegion
            self.multiRegionConfiguration = multiRegionConfiguration
            self.origin = origin
            self.pendingDeletionWindowInDays = pendingDeletionWindowInDays
            self.signingAlgorithms = signingAlgorithms
            self.validTo = validTo
            self.xksKeyConfiguration = xksKeyConfiguration
        }
    }

}

public struct CreateKeyOutput {
    /// Metadata associated with the KMS key.
    public var keyMetadata: KMSClientTypes.KeyMetadata?

    public init(
        keyMetadata: KMSClientTypes.KeyMetadata? = nil
    )
    {
        self.keyMetadata = keyMetadata
    }
}

/// The request was rejected because the custom key store contains KMS keys. After verifying that you do not need to use the KMS keys, use the [ScheduleKeyDeletion] operation to delete the KMS keys. After they are deleted, you can delete the custom key store.
public struct CustomKeyStoreHasCMKsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CustomKeyStoreHasCMKsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension KMSClientTypes {
    /// Detailed information about the external key store proxy (XKS proxy). Your external key store proxy translates KMS requests into a format that your external key manager can understand. These fields appear in a [DescribeCustomKeyStores] response only when the CustomKeyStoreType is EXTERNAL_KEY_STORE.
    public struct XksProxyConfigurationType {
        /// The part of the external key store [proxy authentication credential](https://docs.aws.amazon.com/kms/latest/APIReference/API_CreateCustomKeyStore.html#KMS-CreateCustomKeyStore-request-XksProxyAuthenticationCredential) that uniquely identifies the secret access key.
        public var accessKeyId: Swift.String?
        /// Indicates whether the external key store proxy uses a public endpoint or an Amazon VPC endpoint service to communicate with KMS.
        public var connectivity: KMSClientTypes.XksProxyConnectivityType?
        /// The URI endpoint for the external key store proxy. If the external key store proxy has a public endpoint, it is displayed here. If the external key store proxy uses an Amazon VPC endpoint service name, this field displays the private DNS name associated with the VPC endpoint service.
        public var uriEndpoint: Swift.String?
        /// The path to the external key store proxy APIs.
        public var uriPath: Swift.String?
        /// The Amazon VPC endpoint service used to communicate with the external key store proxy. This field appears only when the external key store proxy uses an Amazon VPC endpoint service to communicate with KMS.
        public var vpcEndpointServiceName: Swift.String?

        public init(
            accessKeyId: Swift.String? = nil,
            connectivity: KMSClientTypes.XksProxyConnectivityType? = nil,
            uriEndpoint: Swift.String? = nil,
            uriPath: Swift.String? = nil,
            vpcEndpointServiceName: Swift.String? = nil
        )
        {
            self.accessKeyId = accessKeyId
            self.connectivity = connectivity
            self.uriEndpoint = uriEndpoint
            self.uriPath = uriPath
            self.vpcEndpointServiceName = vpcEndpointServiceName
        }
    }

}

extension KMSClientTypes.XksProxyConfigurationType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "XksProxyConfigurationType(connectivity: \(Swift.String(describing: connectivity)), uriEndpoint: \(Swift.String(describing: uriEndpoint)), uriPath: \(Swift.String(describing: uriPath)), vpcEndpointServiceName: \(Swift.String(describing: vpcEndpointServiceName)), accessKeyId: \"CONTENT_REDACTED\")"}
}

extension KMSClientTypes {
    /// Contains information about each custom key store in the custom key store list.
    public struct CustomKeyStoresListEntry {
        /// A unique identifier for the CloudHSM cluster that is associated with an CloudHSM key store. This field appears only when the CustomKeyStoreType is AWS_CLOUDHSM.
        public var cloudHsmClusterId: Swift.String?
        /// Describes the connection error. This field appears in the response only when the ConnectionState is FAILED. Many failures can be resolved by updating the properties of the custom key store. To update a custom key store, disconnect it ([DisconnectCustomKeyStore]), correct the errors ([UpdateCustomKeyStore]), and try to connect again ([ConnectCustomKeyStore]). For additional help resolving these errors, see [How to Fix a Connection Failure](https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#fix-keystore-failed) in Key Management Service Developer Guide. All custom key stores:
        ///
        /// * INTERNAL_ERROR — KMS could not complete the request due to an internal error. Retry the request. For ConnectCustomKeyStore requests, disconnect the custom key store before trying to connect again.
        ///
        /// * NETWORK_ERRORS — Network errors are preventing KMS from connecting the custom key store to its backing key store.
        ///
        ///
        /// CloudHSM key stores:
        ///
        /// * CLUSTER_NOT_FOUND — KMS cannot find the CloudHSM cluster with the specified cluster ID.
        ///
        /// * INSUFFICIENT_CLOUDHSM_HSMS — The associated CloudHSM cluster does not contain any active HSMs. To connect a custom key store to its CloudHSM cluster, the cluster must contain at least one active HSM.
        ///
        /// * INSUFFICIENT_FREE_ADDRESSES_IN_SUBNET — At least one private subnet associated with the CloudHSM cluster doesn't have any available IP addresses. A CloudHSM key store connection requires one free IP address in each of the associated private subnets, although two are preferable. For details, see [How to Fix a Connection Failure](https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#fix-keystore-failed) in the Key Management Service Developer Guide.
        ///
        /// * INVALID_CREDENTIALS — The KeyStorePassword for the custom key store doesn't match the current password of the kmsuser crypto user in the CloudHSM cluster. Before you can connect your custom key store to its CloudHSM cluster, you must change the kmsuser account password and update the KeyStorePassword value for the custom key store.
        ///
        /// * SUBNET_NOT_FOUND — A subnet in the CloudHSM cluster configuration was deleted. If KMS cannot find all of the subnets in the cluster configuration, attempts to connect the custom key store to the CloudHSM cluster fail. To fix this error, create a cluster from a recent backup and associate it with your custom key store. (This process creates a new cluster configuration with a VPC and private subnets.) For details, see [How to Fix a Connection Failure](https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#fix-keystore-failed) in the Key Management Service Developer Guide.
        ///
        /// * USER_LOCKED_OUT — The kmsuser CU account is locked out of the associated CloudHSM cluster due to too many failed password attempts. Before you can connect your custom key store to its CloudHSM cluster, you must change the kmsuser account password and update the key store password value for the custom key store.
        ///
        /// * USER_LOGGED_IN — The kmsuser CU account is logged into the associated CloudHSM cluster. This prevents KMS from rotating the kmsuser account password and logging into the cluster. Before you can connect your custom key store to its CloudHSM cluster, you must log the kmsuser CU out of the cluster. If you changed the kmsuser password to log into the cluster, you must also and update the key store password value for the custom key store. For help, see [How to Log Out and Reconnect](https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#login-kmsuser-2) in the Key Management Service Developer Guide.
        ///
        /// * USER_NOT_FOUND — KMS cannot find a kmsuser CU account in the associated CloudHSM cluster. Before you can connect your custom key store to its CloudHSM cluster, you must create a kmsuser CU account in the cluster, and then update the key store password value for the custom key store.
        ///
        ///
        /// External key stores:
        ///
        /// * INVALID_CREDENTIALS — One or both of the XksProxyAuthenticationCredential values is not valid on the specified external key store proxy.
        ///
        /// * XKS_PROXY_ACCESS_DENIED — KMS requests are denied access to the external key store proxy. If the external key store proxy has authorization rules, verify that they permit KMS to communicate with the proxy on your behalf.
        ///
        /// * XKS_PROXY_INVALID_CONFIGURATION — A configuration error is preventing the external key store from connecting to its proxy. Verify the value of the XksProxyUriPath.
        ///
        /// * XKS_PROXY_INVALID_RESPONSE — KMS cannot interpret the response from the external key store proxy. If you see this connection error code repeatedly, notify your external key store proxy vendor.
        ///
        /// * XKS_PROXY_INVALID_TLS_CONFIGURATION — KMS cannot connect to the external key store proxy because the TLS configuration is invalid. Verify that the XKS proxy supports TLS 1.2 or 1.3. Also, verify that the TLS certificate is not expired, and that it matches the hostname in the XksProxyUriEndpoint value, and that it is signed by a certificate authority included in the [Trusted Certificate Authorities](https://github.com/aws/aws-kms-xksproxy-api-spec/blob/main/TrustedCertificateAuthorities) list.
        ///
        /// * XKS_PROXY_NOT_REACHABLE — KMS can't communicate with your external key store proxy. Verify that the XksProxyUriEndpoint and XksProxyUriPath are correct. Use the tools for your external key store proxy to verify that the proxy is active and available on its network. Also, verify that your external key manager instances are operating properly. Connection attempts fail with this connection error code if the proxy reports that all external key manager instances are unavailable.
        ///
        /// * XKS_PROXY_TIMED_OUT — KMS can connect to the external key store proxy, but the proxy does not respond to KMS in the time allotted. If you see this connection error code repeatedly, notify your external key store proxy vendor.
        ///
        /// * XKS_VPC_ENDPOINT_SERVICE_INVALID_CONFIGURATION — The Amazon VPC endpoint service configuration doesn't conform to the requirements for an KMS external key store.
        ///
        /// * The VPC endpoint service must be an endpoint service for interface endpoints in the caller's Amazon Web Services account.
        ///
        /// * It must have a network load balancer (NLB) connected to at least two subnets, each in a different Availability Zone.
        ///
        /// * The Allow principals list must include the KMS service principal for the Region, cks.kms..amazonaws.com, such as cks.kms.us-east-1.amazonaws.com.
        ///
        /// * It must not require [acceptance](https://docs.aws.amazon.com/vpc/latest/privatelink/create-endpoint-service.html) of connection requests.
        ///
        /// * It must have a private DNS name. The private DNS name for an external key store with VPC_ENDPOINT_SERVICE connectivity must be unique in its Amazon Web Services Region.
        ///
        /// * The domain of the private DNS name must have a [verification status](https://docs.aws.amazon.com/vpc/latest/privatelink/verify-domains.html) of verified.
        ///
        /// * The [TLS certificate](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html) specifies the private DNS hostname at which the endpoint is reachable.
        ///
        ///
        ///
        ///
        /// * XKS_VPC_ENDPOINT_SERVICE_NOT_FOUND — KMS can't find the VPC endpoint service that it uses to communicate with the external key store proxy. Verify that the XksProxyVpcEndpointServiceName is correct and the KMS service principal has service consumer permissions on the Amazon VPC endpoint service.
        public var connectionErrorCode: KMSClientTypes.ConnectionErrorCodeType?
        /// Indicates whether the custom key store is connected to its backing key store. For an CloudHSM key store, the ConnectionState indicates whether it is connected to its CloudHSM cluster. For an external key store, the ConnectionState indicates whether it is connected to the external key store proxy that communicates with your external key manager. You can create and use KMS keys in your custom key stores only when its ConnectionState is CONNECTED. The ConnectionState value is DISCONNECTED only if the key store has never been connected or you use the [DisconnectCustomKeyStore] operation to disconnect it. If the value is CONNECTED but you are having trouble using the custom key store, make sure that the backing key store is reachable and active. For an CloudHSM key store, verify that its associated CloudHSM cluster is active and contains at least one active HSM. For an external key store, verify that the external key store proxy and external key manager are connected and enabled. A value of FAILED indicates that an attempt to connect was unsuccessful. The ConnectionErrorCode field in the response indicates the cause of the failure. For help resolving a connection failure, see [Troubleshooting a custom key store](https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html) in the Key Management Service Developer Guide.
        public var connectionState: KMSClientTypes.ConnectionStateType?
        /// The date and time when the custom key store was created.
        public var creationDate: Foundation.Date?
        /// A unique identifier for the custom key store.
        public var customKeyStoreId: Swift.String?
        /// The user-specified friendly name for the custom key store.
        public var customKeyStoreName: Swift.String?
        /// Indicates the type of the custom key store. AWS_CLOUDHSM indicates a custom key store backed by an CloudHSM cluster. EXTERNAL_KEY_STORE indicates a custom key store backed by an external key store proxy and external key manager outside of Amazon Web Services.
        public var customKeyStoreType: KMSClientTypes.CustomKeyStoreType?
        /// The trust anchor certificate of the CloudHSM cluster associated with an CloudHSM key store. When you [initialize the cluster](https://docs.aws.amazon.com/cloudhsm/latest/userguide/initialize-cluster.html#sign-csr), you create this certificate and save it in the customerCA.crt file. This field appears only when the CustomKeyStoreType is AWS_CLOUDHSM.
        public var trustAnchorCertificate: Swift.String?
        /// Configuration settings for the external key store proxy (XKS proxy). The external key store proxy translates KMS requests into a format that your external key manager can understand. The proxy configuration includes connection information that KMS requires. This field appears only when the CustomKeyStoreType is EXTERNAL_KEY_STORE.
        public var xksProxyConfiguration: KMSClientTypes.XksProxyConfigurationType?

        public init(
            cloudHsmClusterId: Swift.String? = nil,
            connectionErrorCode: KMSClientTypes.ConnectionErrorCodeType? = nil,
            connectionState: KMSClientTypes.ConnectionStateType? = nil,
            creationDate: Foundation.Date? = nil,
            customKeyStoreId: Swift.String? = nil,
            customKeyStoreName: Swift.String? = nil,
            customKeyStoreType: KMSClientTypes.CustomKeyStoreType? = nil,
            trustAnchorCertificate: Swift.String? = nil,
            xksProxyConfiguration: KMSClientTypes.XksProxyConfigurationType? = nil
        )
        {
            self.cloudHsmClusterId = cloudHsmClusterId
            self.connectionErrorCode = connectionErrorCode
            self.connectionState = connectionState
            self.creationDate = creationDate
            self.customKeyStoreId = customKeyStoreId
            self.customKeyStoreName = customKeyStoreName
            self.customKeyStoreType = customKeyStoreType
            self.trustAnchorCertificate = trustAnchorCertificate
            self.xksProxyConfiguration = xksProxyConfiguration
        }
    }

}

extension KMSClientTypes {

    public enum DataKeyPairSpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case eccNistP256
        case eccNistP384
        case eccNistP521
        case eccSecgP256k1
        case rsa2048
        case rsa3072
        case rsa4096
        case sm2
        case sdkUnknown(Swift.String)

        public static var allCases: [DataKeyPairSpec] {
            return [
                .eccNistP256,
                .eccNistP384,
                .eccNistP521,
                .eccSecgP256k1,
                .rsa2048,
                .rsa3072,
                .rsa4096,
                .sm2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .eccNistP256: return "ECC_NIST_P256"
            case .eccNistP384: return "ECC_NIST_P384"
            case .eccNistP521: return "ECC_NIST_P521"
            case .eccSecgP256k1: return "ECC_SECG_P256K1"
            case .rsa2048: return "RSA_2048"
            case .rsa3072: return "RSA_3072"
            case .rsa4096: return "RSA_4096"
            case .sm2: return "SM2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KMSClientTypes {

    public enum DataKeySpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aes128
        case aes256
        case sdkUnknown(Swift.String)

        public static var allCases: [DataKeySpec] {
            return [
                .aes128,
                .aes256
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aes128: return "AES_128"
            case .aes256: return "AES_256"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The request was rejected because the specified KMS key cannot decrypt the data. The KeyId in a [Decrypt] request and the SourceKeyId in a [ReEncrypt] request must identify the same KMS key that was used to encrypt the ciphertext.
public struct IncorrectKeyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IncorrectKeyException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// From the [Decrypt] or [ReEncrypt] operation, the request was rejected because the specified ciphertext, or additional authenticated data incorporated into the ciphertext, such as the encryption context, is corrupted, missing, or otherwise invalid. From the [ImportKeyMaterial] operation, the request was rejected because KMS could not decrypt the encrypted (wrapped) key material.
public struct InvalidCiphertextException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidCiphertext" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected for one of the following reasons:
///
/// * The KeyUsage value of the KMS key is incompatible with the API operation.
///
/// * The encryption algorithm or signing algorithm specified for the operation is incompatible with the type of key material in the KMS key (KeySpec).
///
///
/// For encrypting, decrypting, re-encrypting, and generating data keys, the KeyUsage must be ENCRYPT_DECRYPT. For signing and verifying messages, the KeyUsage must be SIGN_VERIFY. For generating and verifying message authentication codes (MACs), the KeyUsage must be GENERATE_VERIFY_MAC. For deriving key agreement secrets, the KeyUsage must be KEY_AGREEMENT. To find the KeyUsage of a KMS key, use the [DescribeKey] operation. To find the encryption or signing algorithms supported for a particular KMS key, use the [DescribeKey] operation.
public struct InvalidKeyUsageException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidKeyUsage" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the specified KMS key was not available. You can retry the request.
public struct KeyUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KeyUnavailable" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension KMSClientTypes {

    public enum KeyEncryptionMechanism: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case rsaesOaepSha256
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyEncryptionMechanism] {
            return [
                .rsaesOaepSha256
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .rsaesOaepSha256: return "RSAES_OAEP_SHA_256"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KMSClientTypes {
    /// Contains information about the party that receives the response from the API operation. This data type is designed to support Amazon Web Services Nitro Enclaves, which lets you create an isolated compute environment in Amazon EC2. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see [How Amazon Web Services Nitro Enclaves uses KMS](https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html) in the Key Management Service Developer Guide.
    public struct RecipientInfo {
        /// The attestation document for an Amazon Web Services Nitro Enclave. This document includes the enclave's public key.
        public var attestationDocument: Foundation.Data?
        /// The encryption algorithm that KMS should use with the public key for an Amazon Web Services Nitro Enclave to encrypt plaintext values for the response. The only valid value is RSAES_OAEP_SHA_256.
        public var keyEncryptionAlgorithm: KMSClientTypes.KeyEncryptionMechanism?

        public init(
            attestationDocument: Foundation.Data? = nil,
            keyEncryptionAlgorithm: KMSClientTypes.KeyEncryptionMechanism? = nil
        )
        {
            self.attestationDocument = attestationDocument
            self.keyEncryptionAlgorithm = keyEncryptionAlgorithm
        }
    }

}

public struct DecryptInput {
    /// Ciphertext to be decrypted. The blob includes metadata.
    /// This member is required.
    public var ciphertextBlob: Foundation.Data?
    /// Checks if your request will succeed. DryRun is an optional parameter. To learn more about how to use this parameter, see [Testing your KMS API calls](https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html) in the Key Management Service Developer Guide.
    public var dryRun: Swift.Bool?
    /// Specifies the encryption algorithm that will be used to decrypt the ciphertext. Specify the same algorithm that was used to encrypt the data. If you specify a different algorithm, the Decrypt operation fails. This parameter is required only when the ciphertext was encrypted under an asymmetric KMS key. The default value, SYMMETRIC_DEFAULT, represents the only supported algorithm that is valid for symmetric encryption KMS keys.
    public var encryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
    /// Specifies the encryption context to use when decrypting the data. An encryption context is valid only for [cryptographic operations](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations) with a symmetric encryption KMS key. The standard asymmetric encryption algorithms and HMAC algorithms that KMS uses do not support an encryption context. An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Key Management Service Developer Guide.
    public var encryptionContext: [Swift.String: Swift.String]?
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Specifies the KMS key that KMS uses to decrypt the ciphertext. Enter a key ID of the KMS key that was used to encrypt the ciphertext. If you identify a different KMS key, the Decrypt operation throws an IncorrectKeyException. This parameter is required only when the ciphertext was encrypted under an asymmetric KMS key. If you used a symmetric encryption KMS key, KMS can get the KMS key from metadata that it adds to the symmetric ciphertext blob. However, it is always recommended as a best practice. This practice ensures that you use the KMS key that you intend. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    public var keyId: Swift.String?
    /// A signed [attestation document](https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave-concepts.html#term-attestdoc) from an Amazon Web Services Nitro enclave and the encryption algorithm to use with the enclave's public key. The only valid encryption algorithm is RSAES_OAEP_SHA_256. This parameter only supports attestation documents for Amazon Web Services Nitro Enclaves. To include this parameter, use the [Amazon Web Services Nitro Enclaves SDK](https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk) or any Amazon Web Services SDK. When you use this parameter, instead of returning the plaintext data, KMS encrypts the plaintext data with the public key in the attestation document, and returns the resulting ciphertext in the CiphertextForRecipient field in the response. This ciphertext can be decrypted only with the private key in the enclave. The Plaintext field in the response is null or empty. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see [How Amazon Web Services Nitro Enclaves uses KMS](https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html) in the Key Management Service Developer Guide.
    public var recipient: KMSClientTypes.RecipientInfo?

    public init(
        ciphertextBlob: Foundation.Data? = nil,
        dryRun: Swift.Bool? = nil,
        encryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec? = nil,
        encryptionContext: [Swift.String: Swift.String]? = nil,
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil,
        recipient: KMSClientTypes.RecipientInfo? = nil
    )
    {
        self.ciphertextBlob = ciphertextBlob
        self.dryRun = dryRun
        self.encryptionAlgorithm = encryptionAlgorithm
        self.encryptionContext = encryptionContext
        self.grantTokens = grantTokens
        self.keyId = keyId
        self.recipient = recipient
    }
}

public struct DecryptOutput {
    /// The plaintext data encrypted with the public key in the attestation document. This field is included in the response only when the Recipient parameter in the request includes a valid attestation document from an Amazon Web Services Nitro enclave. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see [How Amazon Web Services Nitro Enclaves uses KMS](https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html) in the Key Management Service Developer Guide.
    public var ciphertextForRecipient: Foundation.Data?
    /// The encryption algorithm that was used to decrypt the ciphertext.
    public var encryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the KMS key that was used to decrypt the ciphertext.
    public var keyId: Swift.String?
    /// Decrypted plaintext data. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded. If the response includes the CiphertextForRecipient field, the Plaintext field is null or empty.
    public var plaintext: Foundation.Data?

    public init(
        ciphertextForRecipient: Foundation.Data? = nil,
        encryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec? = nil,
        keyId: Swift.String? = nil,
        plaintext: Foundation.Data? = nil
    )
    {
        self.ciphertextForRecipient = ciphertextForRecipient
        self.encryptionAlgorithm = encryptionAlgorithm
        self.keyId = keyId
        self.plaintext = plaintext
    }
}

extension DecryptOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DecryptOutput(ciphertextForRecipient: \(Swift.String(describing: ciphertextForRecipient)), encryptionAlgorithm: \(Swift.String(describing: encryptionAlgorithm)), keyId: \(Swift.String(describing: keyId)), plaintext: \"CONTENT_REDACTED\")"}
}

public struct DeleteAliasInput {
    /// The alias to be deleted. The alias name must begin with alias/ followed by the alias name, such as alias/ExampleAlias.
    /// This member is required.
    public var aliasName: Swift.String?

    public init(
        aliasName: Swift.String? = nil
    )
    {
        self.aliasName = aliasName
    }
}

public struct DeleteCustomKeyStoreInput {
    /// Enter the ID of the custom key store you want to delete. To find the ID of a custom key store, use the [DescribeCustomKeyStores] operation.
    /// This member is required.
    public var customKeyStoreId: Swift.String?

    public init(
        customKeyStoreId: Swift.String? = nil
    )
    {
        self.customKeyStoreId = customKeyStoreId
    }
}

public struct DeleteCustomKeyStoreOutput {

    public init() { }
}

public struct DeleteImportedKeyMaterialInput {
    /// Identifies the KMS key from which you are deleting imported key material. The Origin of the KMS key must be EXTERNAL. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?

    public init(
        keyId: Swift.String? = nil
    )
    {
        self.keyId = keyId
    }
}

public struct DeriveSharedSecretInput {
    /// Checks if your request will succeed. DryRun is an optional parameter. To learn more about how to use this parameter, see [Testing your KMS API calls](https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html) in the Key Management Service Developer Guide.
    public var dryRun: Swift.Bool?
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Specifies the key agreement algorithm used to derive the shared secret. The only valid value is ECDH.
    /// This member is required.
    public var keyAgreementAlgorithm: KMSClientTypes.KeyAgreementAlgorithmSpec?
    /// Identifies an asymmetric NIST-recommended ECC or SM2 (China Regions only) KMS key. KMS uses the private key in the specified key pair to derive the shared secret. The key usage of the KMS key must be KEY_AGREEMENT. To find the KeyUsage of a KMS key, use the [DescribeKey] operation. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    /// This member is required.
    public var keyId: Swift.String?
    /// Specifies the public key in your peer's NIST-recommended elliptic curve (ECC) or SM2 (China Regions only) key pair. The public key must be a DER-encoded X.509 public key, also known as SubjectPublicKeyInfo (SPKI), as defined in [RFC 5280](https://tools.ietf.org/html/rfc5280). [GetPublicKey] returns the public key of an asymmetric KMS key pair in the required DER-encoded format. If you use [Amazon Web Services CLI version 1](https://docs.aws.amazon.com/cli/v1/userguide/cli-chap-welcome.html), you must provide the DER-encoded X.509 public key in a file. Otherwise, the Amazon Web Services CLI Base64-encodes the public key a second time, resulting in a ValidationException. You can specify the public key as binary data in a file using fileb (fileb://) or in-line using a Base64 encoded string.
    /// This member is required.
    public var publicKey: Foundation.Data?
    /// A signed [attestation document](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitro-enclave-how.html#term-attestdoc) from an Amazon Web Services Nitro enclave and the encryption algorithm to use with the enclave's public key. The only valid encryption algorithm is RSAES_OAEP_SHA_256. This parameter only supports attestation documents for Amazon Web Services Nitro Enclaves. To call DeriveSharedSecret for an Amazon Web Services Nitro Enclaves, use the [Amazon Web Services Nitro Enclaves SDK](https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk) to generate the attestation document and then use the Recipient parameter from any Amazon Web Services SDK to provide the attestation document for the enclave. When you use this parameter, instead of returning a plaintext copy of the shared secret, KMS encrypts the plaintext shared secret under the public key in the attestation document, and returns the resulting ciphertext in the CiphertextForRecipient field in the response. This ciphertext can be decrypted only with the private key in the enclave. The CiphertextBlob field in the response contains the encrypted shared secret derived from the KMS key specified by the KeyId parameter and public key specified by the PublicKey parameter. The SharedSecret field in the response is null or empty. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see [How Amazon Web Services Nitro Enclaves uses KMS](https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html) in the Key Management Service Developer Guide.
    public var recipient: KMSClientTypes.RecipientInfo?

    public init(
        dryRun: Swift.Bool? = nil,
        grantTokens: [Swift.String]? = nil,
        keyAgreementAlgorithm: KMSClientTypes.KeyAgreementAlgorithmSpec? = nil,
        keyId: Swift.String? = nil,
        publicKey: Foundation.Data? = nil,
        recipient: KMSClientTypes.RecipientInfo? = nil
    )
    {
        self.dryRun = dryRun
        self.grantTokens = grantTokens
        self.keyAgreementAlgorithm = keyAgreementAlgorithm
        self.keyId = keyId
        self.publicKey = publicKey
        self.recipient = recipient
    }
}

public struct DeriveSharedSecretOutput {
    /// The plaintext shared secret encrypted with the public key in the attestation document. This field is included in the response only when the Recipient parameter in the request includes a valid attestation document from an Amazon Web Services Nitro enclave. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see [How Amazon Web Services Nitro Enclaves uses KMS](https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html) in the Key Management Service Developer Guide.
    public var ciphertextForRecipient: Foundation.Data?
    /// Identifies the key agreement algorithm used to derive the shared secret.
    public var keyAgreementAlgorithm: KMSClientTypes.KeyAgreementAlgorithmSpec?
    /// Identifies the KMS key used to derive the shared secret.
    public var keyId: Swift.String?
    /// The source of the key material for the specified KMS key. When this value is AWS_KMS, KMS created the key material. When this value is EXTERNAL, the key material was imported or the KMS key doesn't have any key material. The only valid values for DeriveSharedSecret are AWS_KMS and EXTERNAL. DeriveSharedSecret does not support KMS keys with a KeyOrigin value of AWS_CLOUDHSM or EXTERNAL_KEY_STORE.
    public var keyOrigin: KMSClientTypes.OriginType?
    /// The raw secret derived from the specified key agreement algorithm, private key in the asymmetric KMS key, and your peer's public key. If the response includes the CiphertextForRecipient field, the SharedSecret field is null or empty.
    public var sharedSecret: Foundation.Data?

    public init(
        ciphertextForRecipient: Foundation.Data? = nil,
        keyAgreementAlgorithm: KMSClientTypes.KeyAgreementAlgorithmSpec? = nil,
        keyId: Swift.String? = nil,
        keyOrigin: KMSClientTypes.OriginType? = nil,
        sharedSecret: Foundation.Data? = nil
    )
    {
        self.ciphertextForRecipient = ciphertextForRecipient
        self.keyAgreementAlgorithm = keyAgreementAlgorithm
        self.keyId = keyId
        self.keyOrigin = keyOrigin
        self.sharedSecret = sharedSecret
    }
}

extension DeriveSharedSecretOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeriveSharedSecretOutput(ciphertextForRecipient: \(Swift.String(describing: ciphertextForRecipient)), keyAgreementAlgorithm: \(Swift.String(describing: keyAgreementAlgorithm)), keyId: \(Swift.String(describing: keyId)), keyOrigin: \(Swift.String(describing: keyOrigin)), sharedSecret: \"CONTENT_REDACTED\")"}
}

/// The request was rejected because the marker that specifies where pagination should next begin is not valid.
public struct InvalidMarkerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidMarker" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DescribeCustomKeyStoresInput {
    /// Gets only information about the specified custom key store. Enter the key store ID. By default, this operation gets information about all custom key stores in the account and Region. To limit the output to a particular custom key store, provide either the CustomKeyStoreId or CustomKeyStoreName parameter, but not both.
    public var customKeyStoreId: Swift.String?
    /// Gets only information about the specified custom key store. Enter the friendly name of the custom key store. By default, this operation gets information about all custom key stores in the account and Region. To limit the output to a particular custom key store, provide either the CustomKeyStoreId or CustomKeyStoreName parameter, but not both.
    public var customKeyStoreName: Swift.String?
    /// Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer.
    public var limit: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
    public var marker: Swift.String?

    public init(
        customKeyStoreId: Swift.String? = nil,
        customKeyStoreName: Swift.String? = nil,
        limit: Swift.Int? = nil,
        marker: Swift.String? = nil
    )
    {
        self.customKeyStoreId = customKeyStoreId
        self.customKeyStoreName = customKeyStoreName
        self.limit = limit
        self.marker = marker
    }
}

public struct DescribeCustomKeyStoresOutput {
    /// Contains metadata about each custom key store.
    public var customKeyStores: [KMSClientTypes.CustomKeyStoresListEntry]?
    /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
    public var nextMarker: Swift.String?
    /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in this response to the Marker parameter in a subsequent request.
    public var truncated: Swift.Bool

    public init(
        customKeyStores: [KMSClientTypes.CustomKeyStoresListEntry]? = nil,
        nextMarker: Swift.String? = nil,
        truncated: Swift.Bool = false
    )
    {
        self.customKeyStores = customKeyStores
        self.nextMarker = nextMarker
        self.truncated = truncated
    }
}

public struct DescribeKeyInput {
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Describes the specified KMS key. If you specify a predefined Amazon Web Services alias (an Amazon Web Services alias with no key ID), KMS associates the alias with an [Amazon Web Services managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html##aws-managed-cmk) and returns its KeyId and Arn in the response. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    /// This member is required.
    public var keyId: Swift.String?

    public init(
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil
    )
    {
        self.grantTokens = grantTokens
        self.keyId = keyId
    }
}

public struct DescribeKeyOutput {
    /// Metadata associated with the key.
    public var keyMetadata: KMSClientTypes.KeyMetadata?

    public init(
        keyMetadata: KMSClientTypes.KeyMetadata? = nil
    )
    {
        self.keyMetadata = keyMetadata
    }
}

public struct DisableKeyInput {
    /// Identifies the KMS key to disable. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?

    public init(
        keyId: Swift.String? = nil
    )
    {
        self.keyId = keyId
    }
}

public struct DisableKeyRotationInput {
    /// Identifies a symmetric encryption KMS key. You cannot enable or disable automatic rotation of [asymmetric KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html#asymmetric-cmks), [HMAC KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html), KMS keys with [imported key material](https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html), or KMS keys in a [custom key store](https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html). Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?

    public init(
        keyId: Swift.String? = nil
    )
    {
        self.keyId = keyId
    }
}

public struct DisconnectCustomKeyStoreInput {
    /// Enter the ID of the custom key store you want to disconnect. To find the ID of a custom key store, use the [DescribeCustomKeyStores] operation.
    /// This member is required.
    public var customKeyStoreId: Swift.String?

    public init(
        customKeyStoreId: Swift.String? = nil
    )
    {
        self.customKeyStoreId = customKeyStoreId
    }
}

public struct DisconnectCustomKeyStoreOutput {

    public init() { }
}

public struct EnableKeyInput {
    /// Identifies the KMS key to enable. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?

    public init(
        keyId: Swift.String? = nil
    )
    {
        self.keyId = keyId
    }
}

public struct EnableKeyRotationInput {
    /// Identifies a symmetric encryption KMS key. You cannot enable automatic rotation of [asymmetric KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html), [HMAC KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html), KMS keys with [imported key material](https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html), or KMS keys in a [custom key store](https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html). To enable or disable automatic rotation of a set of related [multi-Region keys](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate), set the property on the primary key. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// Use this parameter to specify a custom period of time between each rotation date. If no value is specified, the default value is 365 days. The rotation period defines the number of days after you enable automatic key rotation that KMS will rotate your key material, and the number of days between each automatic rotation thereafter. You can use the [kms:RotationPeriodInDays](https://docs.aws.amazon.com/kms/latest/developerguide/conditions-kms.html#conditions-kms-rotation-period-in-days) condition key to further constrain the values that principals can specify in the RotationPeriodInDays parameter.
    public var rotationPeriodInDays: Swift.Int?

    public init(
        keyId: Swift.String? = nil,
        rotationPeriodInDays: Swift.Int? = nil
    )
    {
        self.keyId = keyId
        self.rotationPeriodInDays = rotationPeriodInDays
    }
}

public struct EncryptInput {
    /// Checks if your request will succeed. DryRun is an optional parameter. To learn more about how to use this parameter, see [Testing your KMS API calls](https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html) in the Key Management Service Developer Guide.
    public var dryRun: Swift.Bool?
    /// Specifies the encryption algorithm that KMS will use to encrypt the plaintext message. The algorithm must be compatible with the KMS key that you specify. This parameter is required only for asymmetric KMS keys. The default value, SYMMETRIC_DEFAULT, is the algorithm used for symmetric encryption KMS keys. If you are using an asymmetric KMS key, we recommend RSAES_OAEP_SHA_256. The SM2PKE algorithm is only available in China Regions.
    public var encryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
    /// Specifies the encryption context that will be used to encrypt the data. An encryption context is valid only for [cryptographic operations](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations) with a symmetric encryption KMS key. The standard asymmetric encryption algorithms and HMAC algorithms that KMS uses do not support an encryption context. Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Key Management Service Developer Guide.
    public var encryptionContext: [Swift.String: Swift.String]?
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Identifies the KMS key to use in the encryption operation. The KMS key must have a KeyUsage of ENCRYPT_DECRYPT. To find the KeyUsage of a KMS key, use the [DescribeKey] operation. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    /// This member is required.
    public var keyId: Swift.String?
    /// Data to be encrypted.
    /// This member is required.
    public var plaintext: Foundation.Data?

    public init(
        dryRun: Swift.Bool? = nil,
        encryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec? = nil,
        encryptionContext: [Swift.String: Swift.String]? = nil,
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil,
        plaintext: Foundation.Data? = nil
    )
    {
        self.dryRun = dryRun
        self.encryptionAlgorithm = encryptionAlgorithm
        self.encryptionContext = encryptionContext
        self.grantTokens = grantTokens
        self.keyId = keyId
        self.plaintext = plaintext
    }
}

extension EncryptInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EncryptInput(dryRun: \(Swift.String(describing: dryRun)), encryptionAlgorithm: \(Swift.String(describing: encryptionAlgorithm)), encryptionContext: \(Swift.String(describing: encryptionContext)), grantTokens: \(Swift.String(describing: grantTokens)), keyId: \(Swift.String(describing: keyId)), plaintext: \"CONTENT_REDACTED\")"}
}

public struct EncryptOutput {
    /// The encrypted plaintext. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var ciphertextBlob: Foundation.Data?
    /// The encryption algorithm that was used to encrypt the plaintext.
    public var encryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the KMS key that was used to encrypt the plaintext.
    public var keyId: Swift.String?

    public init(
        ciphertextBlob: Foundation.Data? = nil,
        encryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec? = nil,
        keyId: Swift.String? = nil
    )
    {
        self.ciphertextBlob = ciphertextBlob
        self.encryptionAlgorithm = encryptionAlgorithm
        self.keyId = keyId
    }
}

/// The request was rejected because the specified import token is expired. Use [GetParametersForImport] to get a new import token and public key, use the new public key to encrypt the key material, and then try the request again.
public struct ExpiredImportTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ExpiredImportTokenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct GenerateDataKeyInput {
    /// Checks if your request will succeed. DryRun is an optional parameter. To learn more about how to use this parameter, see [Testing your KMS API calls](https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html) in the Key Management Service Developer Guide.
    public var dryRun: Swift.Bool?
    /// Specifies the encryption context that will be used when encrypting the data key. Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Key Management Service Developer Guide.
    public var encryptionContext: [Swift.String: Swift.String]?
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Specifies the symmetric encryption KMS key that encrypts the data key. You cannot specify an asymmetric KMS key or a KMS key in a custom key store. To get the type and origin of your KMS key, use the [DescribeKey] operation. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    /// This member is required.
    public var keyId: Swift.String?
    /// Specifies the length of the data key. Use AES_128 to generate a 128-bit symmetric key, or AES_256 to generate a 256-bit symmetric key. You must specify either the KeySpec or the NumberOfBytes parameter (but not both) in every GenerateDataKey request.
    public var keySpec: KMSClientTypes.DataKeySpec?
    /// Specifies the length of the data key in bytes. For example, use the value 64 to generate a 512-bit data key (64 bytes is 512 bits). For 128-bit (16-byte) and 256-bit (32-byte) data keys, use the KeySpec parameter. You must specify either the KeySpec or the NumberOfBytes parameter (but not both) in every GenerateDataKey request.
    public var numberOfBytes: Swift.Int?
    /// A signed [attestation document](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitro-enclave-how.html#term-attestdoc) from an Amazon Web Services Nitro enclave and the encryption algorithm to use with the enclave's public key. The only valid encryption algorithm is RSAES_OAEP_SHA_256. This parameter only supports attestation documents for Amazon Web Services Nitro Enclaves. To include this parameter, use the [Amazon Web Services Nitro Enclaves SDK](https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk) or any Amazon Web Services SDK. When you use this parameter, instead of returning the plaintext data key, KMS encrypts the plaintext data key under the public key in the attestation document, and returns the resulting ciphertext in the CiphertextForRecipient field in the response. This ciphertext can be decrypted only with the private key in the enclave. The CiphertextBlob field in the response contains a copy of the data key encrypted under the KMS key specified by the KeyId parameter. The Plaintext field in the response is null or empty. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see [How Amazon Web Services Nitro Enclaves uses KMS](https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html) in the Key Management Service Developer Guide.
    public var recipient: KMSClientTypes.RecipientInfo?

    public init(
        dryRun: Swift.Bool? = nil,
        encryptionContext: [Swift.String: Swift.String]? = nil,
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil,
        keySpec: KMSClientTypes.DataKeySpec? = nil,
        numberOfBytes: Swift.Int? = nil,
        recipient: KMSClientTypes.RecipientInfo? = nil
    )
    {
        self.dryRun = dryRun
        self.encryptionContext = encryptionContext
        self.grantTokens = grantTokens
        self.keyId = keyId
        self.keySpec = keySpec
        self.numberOfBytes = numberOfBytes
        self.recipient = recipient
    }
}

public struct GenerateDataKeyOutput {
    /// The encrypted copy of the data key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var ciphertextBlob: Foundation.Data?
    /// The plaintext data key encrypted with the public key from the Nitro enclave. This ciphertext can be decrypted only by using a private key in the Nitro enclave. This field is included in the response only when the Recipient parameter in the request includes a valid attestation document from an Amazon Web Services Nitro enclave. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see [How Amazon Web Services Nitro Enclaves uses KMS](https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html) in the Key Management Service Developer Guide.
    public var ciphertextForRecipient: Foundation.Data?
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the KMS key that encrypted the data key.
    public var keyId: Swift.String?
    /// The plaintext data key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded. Use this data key to encrypt your data outside of KMS. Then, remove it from memory as soon as possible. If the response includes the CiphertextForRecipient field, the Plaintext field is null or empty.
    public var plaintext: Foundation.Data?

    public init(
        ciphertextBlob: Foundation.Data? = nil,
        ciphertextForRecipient: Foundation.Data? = nil,
        keyId: Swift.String? = nil,
        plaintext: Foundation.Data? = nil
    )
    {
        self.ciphertextBlob = ciphertextBlob
        self.ciphertextForRecipient = ciphertextForRecipient
        self.keyId = keyId
        self.plaintext = plaintext
    }
}

extension GenerateDataKeyOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GenerateDataKeyOutput(ciphertextBlob: \(Swift.String(describing: ciphertextBlob)), ciphertextForRecipient: \(Swift.String(describing: ciphertextForRecipient)), keyId: \(Swift.String(describing: keyId)), plaintext: \"CONTENT_REDACTED\")"}
}

public struct GenerateDataKeyPairInput {
    /// Checks if your request will succeed. DryRun is an optional parameter. To learn more about how to use this parameter, see [Testing your KMS API calls](https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html) in the Key Management Service Developer Guide.
    public var dryRun: Swift.Bool?
    /// Specifies the encryption context that will be used when encrypting the private key in the data key pair. Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Key Management Service Developer Guide.
    public var encryptionContext: [Swift.String: Swift.String]?
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Specifies the symmetric encryption KMS key that encrypts the private key in the data key pair. You cannot specify an asymmetric KMS key or a KMS key in a custom key store. To get the type and origin of your KMS key, use the [DescribeKey] operation. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    /// This member is required.
    public var keyId: Swift.String?
    /// Determines the type of data key pair that is generated. The KMS rule that restricts the use of asymmetric RSA and SM2 KMS keys to encrypt and decrypt or to sign and verify (but not both), and the rule that permits you to use ECC KMS keys only to sign and verify, are not effective on data key pairs, which are used outside of KMS. The SM2 key spec is only available in China Regions.
    /// This member is required.
    public var keyPairSpec: KMSClientTypes.DataKeyPairSpec?
    /// A signed [attestation document](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitro-enclave-how.html#term-attestdoc) from an Amazon Web Services Nitro enclave and the encryption algorithm to use with the enclave's public key. The only valid encryption algorithm is RSAES_OAEP_SHA_256. This parameter only supports attestation documents for Amazon Web Services Nitro Enclaves. To call DeriveSharedSecret for an Amazon Web Services Nitro Enclaves, use the [Amazon Web Services Nitro Enclaves SDK](https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk) to generate the attestation document and then use the Recipient parameter from any Amazon Web Services SDK to provide the attestation document for the enclave. When you use this parameter, instead of returning a plaintext copy of the private data key, KMS encrypts the plaintext private data key under the public key in the attestation document, and returns the resulting ciphertext in the CiphertextForRecipient field in the response. This ciphertext can be decrypted only with the private key in the enclave. The CiphertextBlob field in the response contains a copy of the private data key encrypted under the KMS key specified by the KeyId parameter. The PrivateKeyPlaintext field in the response is null or empty. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see [How Amazon Web Services Nitro Enclaves uses KMS](https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html) in the Key Management Service Developer Guide.
    public var recipient: KMSClientTypes.RecipientInfo?

    public init(
        dryRun: Swift.Bool? = nil,
        encryptionContext: [Swift.String: Swift.String]? = nil,
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil,
        keyPairSpec: KMSClientTypes.DataKeyPairSpec? = nil,
        recipient: KMSClientTypes.RecipientInfo? = nil
    )
    {
        self.dryRun = dryRun
        self.encryptionContext = encryptionContext
        self.grantTokens = grantTokens
        self.keyId = keyId
        self.keyPairSpec = keyPairSpec
        self.recipient = recipient
    }
}

public struct GenerateDataKeyPairOutput {
    /// The plaintext private data key encrypted with the public key from the Nitro enclave. This ciphertext can be decrypted only by using a private key in the Nitro enclave. This field is included in the response only when the Recipient parameter in the request includes a valid attestation document from an Amazon Web Services Nitro enclave. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see [How Amazon Web Services Nitro Enclaves uses KMS](https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html) in the Key Management Service Developer Guide.
    public var ciphertextForRecipient: Foundation.Data?
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the KMS key that encrypted the private key.
    public var keyId: Swift.String?
    /// The type of data key pair that was generated.
    public var keyPairSpec: KMSClientTypes.DataKeyPairSpec?
    /// The encrypted copy of the private key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var privateKeyCiphertextBlob: Foundation.Data?
    /// The plaintext copy of the private key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded. If the response includes the CiphertextForRecipient field, the PrivateKeyPlaintext field is null or empty.
    public var privateKeyPlaintext: Foundation.Data?
    /// The public key (in plaintext). When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var publicKey: Foundation.Data?

    public init(
        ciphertextForRecipient: Foundation.Data? = nil,
        keyId: Swift.String? = nil,
        keyPairSpec: KMSClientTypes.DataKeyPairSpec? = nil,
        privateKeyCiphertextBlob: Foundation.Data? = nil,
        privateKeyPlaintext: Foundation.Data? = nil,
        publicKey: Foundation.Data? = nil
    )
    {
        self.ciphertextForRecipient = ciphertextForRecipient
        self.keyId = keyId
        self.keyPairSpec = keyPairSpec
        self.privateKeyCiphertextBlob = privateKeyCiphertextBlob
        self.privateKeyPlaintext = privateKeyPlaintext
        self.publicKey = publicKey
    }
}

extension GenerateDataKeyPairOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GenerateDataKeyPairOutput(ciphertextForRecipient: \(Swift.String(describing: ciphertextForRecipient)), keyId: \(Swift.String(describing: keyId)), keyPairSpec: \(Swift.String(describing: keyPairSpec)), privateKeyCiphertextBlob: \(Swift.String(describing: privateKeyCiphertextBlob)), publicKey: \(Swift.String(describing: publicKey)), privateKeyPlaintext: \"CONTENT_REDACTED\")"}
}

public struct GenerateDataKeyPairWithoutPlaintextInput {
    /// Checks if your request will succeed. DryRun is an optional parameter. To learn more about how to use this parameter, see [Testing your KMS API calls](https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html) in the Key Management Service Developer Guide.
    public var dryRun: Swift.Bool?
    /// Specifies the encryption context that will be used when encrypting the private key in the data key pair. Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Key Management Service Developer Guide.
    public var encryptionContext: [Swift.String: Swift.String]?
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Specifies the symmetric encryption KMS key that encrypts the private key in the data key pair. You cannot specify an asymmetric KMS key or a KMS key in a custom key store. To get the type and origin of your KMS key, use the [DescribeKey] operation. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    /// This member is required.
    public var keyId: Swift.String?
    /// Determines the type of data key pair that is generated. The KMS rule that restricts the use of asymmetric RSA and SM2 KMS keys to encrypt and decrypt or to sign and verify (but not both), and the rule that permits you to use ECC KMS keys only to sign and verify, are not effective on data key pairs, which are used outside of KMS. The SM2 key spec is only available in China Regions.
    /// This member is required.
    public var keyPairSpec: KMSClientTypes.DataKeyPairSpec?

    public init(
        dryRun: Swift.Bool? = nil,
        encryptionContext: [Swift.String: Swift.String]? = nil,
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil,
        keyPairSpec: KMSClientTypes.DataKeyPairSpec? = nil
    )
    {
        self.dryRun = dryRun
        self.encryptionContext = encryptionContext
        self.grantTokens = grantTokens
        self.keyId = keyId
        self.keyPairSpec = keyPairSpec
    }
}

public struct GenerateDataKeyPairWithoutPlaintextOutput {
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the KMS key that encrypted the private key.
    public var keyId: Swift.String?
    /// The type of data key pair that was generated.
    public var keyPairSpec: KMSClientTypes.DataKeyPairSpec?
    /// The encrypted copy of the private key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var privateKeyCiphertextBlob: Foundation.Data?
    /// The public key (in plaintext). When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var publicKey: Foundation.Data?

    public init(
        keyId: Swift.String? = nil,
        keyPairSpec: KMSClientTypes.DataKeyPairSpec? = nil,
        privateKeyCiphertextBlob: Foundation.Data? = nil,
        publicKey: Foundation.Data? = nil
    )
    {
        self.keyId = keyId
        self.keyPairSpec = keyPairSpec
        self.privateKeyCiphertextBlob = privateKeyCiphertextBlob
        self.publicKey = publicKey
    }
}

public struct GenerateDataKeyWithoutPlaintextInput {
    /// Checks if your request will succeed. DryRun is an optional parameter. To learn more about how to use this parameter, see [Testing your KMS API calls](https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html) in the Key Management Service Developer Guide.
    public var dryRun: Swift.Bool?
    /// Specifies the encryption context that will be used when encrypting the data key. Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Key Management Service Developer Guide.
    public var encryptionContext: [Swift.String: Swift.String]?
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Specifies the symmetric encryption KMS key that encrypts the data key. You cannot specify an asymmetric KMS key or a KMS key in a custom key store. To get the type and origin of your KMS key, use the [DescribeKey] operation. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    /// This member is required.
    public var keyId: Swift.String?
    /// The length of the data key. Use AES_128 to generate a 128-bit symmetric key, or AES_256 to generate a 256-bit symmetric key.
    public var keySpec: KMSClientTypes.DataKeySpec?
    /// The length of the data key in bytes. For example, use the value 64 to generate a 512-bit data key (64 bytes is 512 bits). For common key lengths (128-bit and 256-bit symmetric keys), we recommend that you use the KeySpec field instead of this one.
    public var numberOfBytes: Swift.Int?

    public init(
        dryRun: Swift.Bool? = nil,
        encryptionContext: [Swift.String: Swift.String]? = nil,
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil,
        keySpec: KMSClientTypes.DataKeySpec? = nil,
        numberOfBytes: Swift.Int? = nil
    )
    {
        self.dryRun = dryRun
        self.encryptionContext = encryptionContext
        self.grantTokens = grantTokens
        self.keyId = keyId
        self.keySpec = keySpec
        self.numberOfBytes = numberOfBytes
    }
}

public struct GenerateDataKeyWithoutPlaintextOutput {
    /// The encrypted data key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var ciphertextBlob: Foundation.Data?
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the KMS key that encrypted the data key.
    public var keyId: Swift.String?

    public init(
        ciphertextBlob: Foundation.Data? = nil,
        keyId: Swift.String? = nil
    )
    {
        self.ciphertextBlob = ciphertextBlob
        self.keyId = keyId
    }
}

public struct GenerateMacInput {
    /// Checks if your request will succeed. DryRun is an optional parameter. To learn more about how to use this parameter, see [Testing your KMS API calls](https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html) in the Key Management Service Developer Guide.
    public var dryRun: Swift.Bool?
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// The HMAC KMS key to use in the operation. The MAC algorithm computes the HMAC for the message and the key as described in [RFC 2104](https://datatracker.ietf.org/doc/html/rfc2104). To identify an HMAC KMS key, use the [DescribeKey] operation and see the KeySpec field in the response.
    /// This member is required.
    public var keyId: Swift.String?
    /// The MAC algorithm used in the operation. The algorithm must be compatible with the HMAC KMS key that you specify. To find the MAC algorithms that your HMAC KMS key supports, use the [DescribeKey] operation and see the MacAlgorithms field in the DescribeKey response.
    /// This member is required.
    public var macAlgorithm: KMSClientTypes.MacAlgorithmSpec?
    /// The message to be hashed. Specify a message of up to 4,096 bytes. GenerateMac and [VerifyMac] do not provide special handling for message digests. If you generate an HMAC for a hash digest of a message, you must verify the HMAC of the same hash digest.
    /// This member is required.
    public var message: Foundation.Data?

    public init(
        dryRun: Swift.Bool? = nil,
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil,
        macAlgorithm: KMSClientTypes.MacAlgorithmSpec? = nil,
        message: Foundation.Data? = nil
    )
    {
        self.dryRun = dryRun
        self.grantTokens = grantTokens
        self.keyId = keyId
        self.macAlgorithm = macAlgorithm
        self.message = message
    }
}

extension GenerateMacInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GenerateMacInput(dryRun: \(Swift.String(describing: dryRun)), grantTokens: \(Swift.String(describing: grantTokens)), keyId: \(Swift.String(describing: keyId)), macAlgorithm: \(Swift.String(describing: macAlgorithm)), message: \"CONTENT_REDACTED\")"}
}

public struct GenerateMacOutput {
    /// The HMAC KMS key used in the operation.
    public var keyId: Swift.String?
    /// The hash-based message authentication code (HMAC) that was generated for the specified message, HMAC KMS key, and MAC algorithm. This is the standard, raw HMAC defined in [RFC 2104](https://datatracker.ietf.org/doc/html/rfc2104).
    public var mac: Foundation.Data?
    /// The MAC algorithm that was used to generate the HMAC.
    public var macAlgorithm: KMSClientTypes.MacAlgorithmSpec?

    public init(
        keyId: Swift.String? = nil,
        mac: Foundation.Data? = nil,
        macAlgorithm: KMSClientTypes.MacAlgorithmSpec? = nil
    )
    {
        self.keyId = keyId
        self.mac = mac
        self.macAlgorithm = macAlgorithm
    }
}

public struct GenerateRandomInput {
    /// Generates the random byte string in the CloudHSM cluster that is associated with the specified CloudHSM key store. To find the ID of a custom key store, use the [DescribeCustomKeyStores] operation. External key store IDs are not valid for this parameter. If you specify the ID of an external key store, GenerateRandom throws an UnsupportedOperationException.
    public var customKeyStoreId: Swift.String?
    /// The length of the random byte string. This parameter is required.
    public var numberOfBytes: Swift.Int?
    /// A signed [attestation document](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitro-enclave-how.html#term-attestdoc) from an Amazon Web Services Nitro enclave and the encryption algorithm to use with the enclave's public key. The only valid encryption algorithm is RSAES_OAEP_SHA_256. This parameter only supports attestation documents for Amazon Web Services Nitro Enclaves. To include this parameter, use the [Amazon Web Services Nitro Enclaves SDK](https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk) or any Amazon Web Services SDK. When you use this parameter, instead of returning plaintext bytes, KMS encrypts the plaintext bytes under the public key in the attestation document, and returns the resulting ciphertext in the CiphertextForRecipient field in the response. This ciphertext can be decrypted only with the private key in the enclave. The Plaintext field in the response is null or empty. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see [How Amazon Web Services Nitro Enclaves uses KMS](https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html) in the Key Management Service Developer Guide.
    public var recipient: KMSClientTypes.RecipientInfo?

    public init(
        customKeyStoreId: Swift.String? = nil,
        numberOfBytes: Swift.Int? = nil,
        recipient: KMSClientTypes.RecipientInfo? = nil
    )
    {
        self.customKeyStoreId = customKeyStoreId
        self.numberOfBytes = numberOfBytes
        self.recipient = recipient
    }
}

public struct GenerateRandomOutput {
    /// The plaintext random bytes encrypted with the public key from the Nitro enclave. This ciphertext can be decrypted only by using a private key in the Nitro enclave. This field is included in the response only when the Recipient parameter in the request includes a valid attestation document from an Amazon Web Services Nitro enclave. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see [How Amazon Web Services Nitro Enclaves uses KMS](https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html) in the Key Management Service Developer Guide.
    public var ciphertextForRecipient: Foundation.Data?
    /// The random byte string. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded. If the response includes the CiphertextForRecipient field, the Plaintext field is null or empty.
    public var plaintext: Foundation.Data?

    public init(
        ciphertextForRecipient: Foundation.Data? = nil,
        plaintext: Foundation.Data? = nil
    )
    {
        self.ciphertextForRecipient = ciphertextForRecipient
        self.plaintext = plaintext
    }
}

extension GenerateRandomOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GenerateRandomOutput(ciphertextForRecipient: \(Swift.String(describing: ciphertextForRecipient)), plaintext: \"CONTENT_REDACTED\")"}
}

public struct GetKeyPolicyInput {
    /// Gets the key policy for the specified KMS key. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// Specifies the name of the key policy. If no policy name is specified, the default value is default. The only valid name is default. To get the names of key policies, use [ListKeyPolicies].
    public var policyName: Swift.String?

    public init(
        keyId: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.keyId = keyId
        self.policyName = policyName
    }
}

public struct GetKeyPolicyOutput {
    /// A key policy document in JSON format.
    public var policy: Swift.String?
    /// The name of the key policy. The only valid value is default.
    public var policyName: Swift.String?

    public init(
        policy: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.policy = policy
        self.policyName = policyName
    }
}

public struct GetKeyRotationStatusInput {
    /// Gets the rotation status for the specified KMS key. Specify the key ID or key ARN of the KMS key. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?

    public init(
        keyId: Swift.String? = nil
    )
    {
        self.keyId = keyId
    }
}

public struct GetKeyRotationStatusOutput {
    /// Identifies the specified symmetric encryption KMS key.
    public var keyId: Swift.String?
    /// A Boolean value that specifies whether key rotation is enabled.
    public var keyRotationEnabled: Swift.Bool
    /// The next date that KMS will automatically rotate the key material.
    public var nextRotationDate: Foundation.Date?
    /// Identifies the date and time that an in progress on-demand rotation was initiated. The KMS API follows an [eventual consistency](https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html) model due to the distributed nature of the system. As a result, there might be a slight delay between initiating on-demand key rotation and the rotation's completion. Once the on-demand rotation is complete, use [ListKeyRotations] to view the details of the on-demand rotation.
    public var onDemandRotationStartDate: Foundation.Date?
    /// The number of days between each automatic rotation. The default value is 365 days.
    public var rotationPeriodInDays: Swift.Int?

    public init(
        keyId: Swift.String? = nil,
        keyRotationEnabled: Swift.Bool = false,
        nextRotationDate: Foundation.Date? = nil,
        onDemandRotationStartDate: Foundation.Date? = nil,
        rotationPeriodInDays: Swift.Int? = nil
    )
    {
        self.keyId = keyId
        self.keyRotationEnabled = keyRotationEnabled
        self.nextRotationDate = nextRotationDate
        self.onDemandRotationStartDate = onDemandRotationStartDate
        self.rotationPeriodInDays = rotationPeriodInDays
    }
}

extension KMSClientTypes {

    public enum WrappingKeySpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case rsa2048
        case rsa3072
        case rsa4096
        case sm2
        case sdkUnknown(Swift.String)

        public static var allCases: [WrappingKeySpec] {
            return [
                .rsa2048,
                .rsa3072,
                .rsa4096,
                .sm2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .rsa2048: return "RSA_2048"
            case .rsa3072: return "RSA_3072"
            case .rsa4096: return "RSA_4096"
            case .sm2: return "SM2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetParametersForImportInput {
    /// The identifier of the KMS key that will be associated with the imported key material. The Origin of the KMS key must be EXTERNAL. All KMS key types are supported, including multi-Region keys. However, you cannot import key material into a KMS key in a custom key store. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// The algorithm you will use with the RSA public key (PublicKey) in the response to protect your key material during import. For more information, see [Select a wrapping algorithm] in the Key Management Service Developer Guide. For RSA_AES wrapping algorithms, you encrypt your key material with an AES key that you generate, then encrypt your AES key with the RSA public key from KMS. For RSAES wrapping algorithms, you encrypt your key material directly with the RSA public key from KMS. The wrapping algorithms that you can use depend on the type of key material that you are importing. To import an RSA private key, you must use an RSA_AES wrapping algorithm.
    ///
    /// * RSA_AES_KEY_WRAP_SHA_256 — Supported for wrapping RSA and ECC key material.
    ///
    /// * RSA_AES_KEY_WRAP_SHA_1 — Supported for wrapping RSA and ECC key material.
    ///
    /// * RSAES_OAEP_SHA_256 — Supported for all types of key material, except RSA key material (private key). You cannot use the RSAES_OAEP_SHA_256 wrapping algorithm with the RSA_2048 wrapping key spec to wrap ECC_NIST_P521 key material.
    ///
    /// * RSAES_OAEP_SHA_1 — Supported for all types of key material, except RSA key material (private key). You cannot use the RSAES_OAEP_SHA_1 wrapping algorithm with the RSA_2048 wrapping key spec to wrap ECC_NIST_P521 key material.
    ///
    /// * RSAES_PKCS1_V1_5 (Deprecated) — As of October 10, 2023, KMS does not support the RSAES_PKCS1_V1_5 wrapping algorithm.
    /// This member is required.
    public var wrappingAlgorithm: KMSClientTypes.AlgorithmSpec?
    /// The type of RSA public key to return in the response. You will use this wrapping key with the specified wrapping algorithm to protect your key material during import. Use the longest RSA wrapping key that is practical. You cannot use an RSA_2048 public key to directly wrap an ECC_NIST_P521 private key. Instead, use an RSA_AES wrapping algorithm or choose a longer RSA public key.
    /// This member is required.
    public var wrappingKeySpec: KMSClientTypes.WrappingKeySpec?

    public init(
        keyId: Swift.String? = nil,
        wrappingAlgorithm: KMSClientTypes.AlgorithmSpec? = nil,
        wrappingKeySpec: KMSClientTypes.WrappingKeySpec? = nil
    )
    {
        self.keyId = keyId
        self.wrappingAlgorithm = wrappingAlgorithm
        self.wrappingKeySpec = wrappingKeySpec
    }
}

public struct GetParametersForImportOutput {
    /// The import token to send in a subsequent [ImportKeyMaterial] request.
    public var importToken: Foundation.Data?
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the KMS key to use in a subsequent [ImportKeyMaterial] request. This is the same KMS key specified in the GetParametersForImport request.
    public var keyId: Swift.String?
    /// The time at which the import token and public key are no longer valid. After this time, you cannot use them to make an [ImportKeyMaterial] request and you must send another GetParametersForImport request to get new ones.
    public var parametersValidTo: Foundation.Date?
    /// The public key to use to encrypt the key material before importing it with [ImportKeyMaterial].
    public var publicKey: Foundation.Data?

    public init(
        importToken: Foundation.Data? = nil,
        keyId: Swift.String? = nil,
        parametersValidTo: Foundation.Date? = nil,
        publicKey: Foundation.Data? = nil
    )
    {
        self.importToken = importToken
        self.keyId = keyId
        self.parametersValidTo = parametersValidTo
        self.publicKey = publicKey
    }
}

extension GetParametersForImportOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetParametersForImportOutput(importToken: \(Swift.String(describing: importToken)), keyId: \(Swift.String(describing: keyId)), parametersValidTo: \(Swift.String(describing: parametersValidTo)), publicKey: \"CONTENT_REDACTED\")"}
}

public struct GetPublicKeyInput {
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Identifies the asymmetric KMS key that includes the public key. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    /// This member is required.
    public var keyId: Swift.String?

    public init(
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil
    )
    {
        self.grantTokens = grantTokens
        self.keyId = keyId
    }
}

public struct GetPublicKeyOutput {
    /// Instead, use the KeySpec field in the GetPublicKey response. The KeySpec and CustomerMasterKeySpec fields have the same value. We recommend that you use the KeySpec field in your code. However, to avoid breaking changes, KMS supports both fields.
    @available(*, deprecated, message: "This field has been deprecated. Instead, use the KeySpec field.")
    public var customerMasterKeySpec: KMSClientTypes.CustomerMasterKeySpec?
    /// The encryption algorithms that KMS supports for this key. This information is critical. If a public key encrypts data outside of KMS by using an unsupported encryption algorithm, the ciphertext cannot be decrypted. This field appears in the response only when the KeyUsage of the public key is ENCRYPT_DECRYPT.
    public var encryptionAlgorithms: [KMSClientTypes.EncryptionAlgorithmSpec]?
    /// The key agreement algorithm used to derive a shared secret. This field is present only when the KMS key has a KeyUsage value of KEY_AGREEMENT.
    public var keyAgreementAlgorithms: [KMSClientTypes.KeyAgreementAlgorithmSpec]?
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the asymmetric KMS key from which the public key was downloaded.
    public var keyId: Swift.String?
    /// The type of the of the public key that was downloaded.
    public var keySpec: KMSClientTypes.KeySpec?
    /// The permitted use of the public key. Valid values for asymmetric key pairs are ENCRYPT_DECRYPT, SIGN_VERIFY, and KEY_AGREEMENT. This information is critical. For example, if a public key with SIGN_VERIFY key usage encrypts data outside of KMS, the ciphertext cannot be decrypted.
    public var keyUsage: KMSClientTypes.KeyUsageType?
    /// The exported public key. The value is a DER-encoded X.509 public key, also known as SubjectPublicKeyInfo (SPKI), as defined in [RFC 5280](https://tools.ietf.org/html/rfc5280). When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var publicKey: Foundation.Data?
    /// The signing algorithms that KMS supports for this key. This field appears in the response only when the KeyUsage of the public key is SIGN_VERIFY.
    public var signingAlgorithms: [KMSClientTypes.SigningAlgorithmSpec]?

    public init(
        customerMasterKeySpec: KMSClientTypes.CustomerMasterKeySpec? = nil,
        encryptionAlgorithms: [KMSClientTypes.EncryptionAlgorithmSpec]? = nil,
        keyAgreementAlgorithms: [KMSClientTypes.KeyAgreementAlgorithmSpec]? = nil,
        keyId: Swift.String? = nil,
        keySpec: KMSClientTypes.KeySpec? = nil,
        keyUsage: KMSClientTypes.KeyUsageType? = nil,
        publicKey: Foundation.Data? = nil,
        signingAlgorithms: [KMSClientTypes.SigningAlgorithmSpec]? = nil
    )
    {
        self.customerMasterKeySpec = customerMasterKeySpec
        self.encryptionAlgorithms = encryptionAlgorithms
        self.keyAgreementAlgorithms = keyAgreementAlgorithms
        self.keyId = keyId
        self.keySpec = keySpec
        self.keyUsage = keyUsage
        self.publicKey = publicKey
        self.signingAlgorithms = signingAlgorithms
    }
}

extension KMSClientTypes {
    /// Contains information about a grant.
    public struct GrantListEntry {
        /// A list of key-value pairs that must be present in the encryption context of certain subsequent operations that the grant allows.
        public var constraints: KMSClientTypes.GrantConstraints?
        /// The date and time when the grant was created.
        public var creationDate: Foundation.Date?
        /// The unique identifier for the grant.
        public var grantId: Swift.String?
        /// The identity that gets the permissions in the grant. The GranteePrincipal field in the ListGrants response usually contains the user or role designated as the grantee principal in the grant. However, when the grantee principal in the grant is an Amazon Web Services service, the GranteePrincipal field contains the [service principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#principal-services), which might represent several different grantee principals.
        public var granteePrincipal: Swift.String?
        /// The Amazon Web Services account under which the grant was issued.
        public var issuingAccount: Swift.String?
        /// The unique identifier for the KMS key to which the grant applies.
        public var keyId: Swift.String?
        /// The friendly name that identifies the grant. If a name was provided in the [CreateGrant] request, that name is returned. Otherwise this value is null.
        public var name: Swift.String?
        /// The list of operations permitted by the grant.
        public var operations: [KMSClientTypes.GrantOperation]?
        /// The principal that can retire the grant.
        public var retiringPrincipal: Swift.String?

        public init(
            constraints: KMSClientTypes.GrantConstraints? = nil,
            creationDate: Foundation.Date? = nil,
            grantId: Swift.String? = nil,
            granteePrincipal: Swift.String? = nil,
            issuingAccount: Swift.String? = nil,
            keyId: Swift.String? = nil,
            name: Swift.String? = nil,
            operations: [KMSClientTypes.GrantOperation]? = nil,
            retiringPrincipal: Swift.String? = nil
        )
        {
            self.constraints = constraints
            self.creationDate = creationDate
            self.grantId = grantId
            self.granteePrincipal = granteePrincipal
            self.issuingAccount = issuingAccount
            self.keyId = keyId
            self.name = name
            self.operations = operations
            self.retiringPrincipal = retiringPrincipal
        }
    }

}

/// The request was rejected because the key material in the request is, expired, invalid, or is not the same key material that was previously imported into this KMS key.
public struct IncorrectKeyMaterialException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IncorrectKeyMaterialException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the provided import token is invalid or is associated with a different KMS key.
public struct InvalidImportTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidImportTokenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ImportKeyMaterialInput {
    /// The encrypted key material to import. The key material must be encrypted under the public wrapping key that [GetParametersForImport] returned, using the wrapping algorithm that you specified in the same GetParametersForImport request.
    /// This member is required.
    public var encryptedKeyMaterial: Foundation.Data?
    /// Specifies whether the key material expires. The default is KEY_MATERIAL_EXPIRES. For help with this choice, see [Setting an expiration time](https://docs.aws.amazon.com/en_us/kms/latest/developerguide/importing-keys.html#importing-keys-expiration) in the Key Management Service Developer Guide. When the value of ExpirationModel is KEY_MATERIAL_EXPIRES, you must specify a value for the ValidTo parameter. When value is KEY_MATERIAL_DOES_NOT_EXPIRE, you must omit the ValidTo parameter. You cannot change the ExpirationModel or ValidTo values for the current import after the request completes. To change either value, you must reimport the key material.
    public var expirationModel: KMSClientTypes.ExpirationModelType?
    /// The import token that you received in the response to a previous [GetParametersForImport] request. It must be from the same response that contained the public key that you used to encrypt the key material.
    /// This member is required.
    public var importToken: Foundation.Data?
    /// The identifier of the KMS key that will be associated with the imported key material. This must be the same KMS key specified in the KeyID parameter of the corresponding [GetParametersForImport] request. The Origin of the KMS key must be EXTERNAL and its KeyState must be PendingImport. The KMS key can be a symmetric encryption KMS key, HMAC KMS key, asymmetric encryption KMS key, or asymmetric signing KMS key, including a [multi-Region key] of any supported type. You cannot perform this operation on a KMS key in a custom key store, or on a KMS key in a different Amazon Web Services account. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// The date and time when the imported key material expires. This parameter is required when the value of the ExpirationModel parameter is KEY_MATERIAL_EXPIRES. Otherwise it is not valid. The value of this parameter must be a future date and time. The maximum value is 365 days from the request date. When the key material expires, KMS deletes the key material from the KMS key. Without its key material, the KMS key is unusable. To use the KMS key in cryptographic operations, you must reimport the same key material. You cannot change the ExpirationModel or ValidTo values for the current import after the request completes. To change either value, you must delete ([DeleteImportedKeyMaterial]) and reimport the key material.
    public var validTo: Foundation.Date?

    public init(
        encryptedKeyMaterial: Foundation.Data? = nil,
        expirationModel: KMSClientTypes.ExpirationModelType? = nil,
        importToken: Foundation.Data? = nil,
        keyId: Swift.String? = nil,
        validTo: Foundation.Date? = nil
    )
    {
        self.encryptedKeyMaterial = encryptedKeyMaterial
        self.expirationModel = expirationModel
        self.importToken = importToken
        self.keyId = keyId
        self.validTo = validTo
    }
}

public struct ImportKeyMaterialOutput {

    public init() { }
}

/// The request was rejected because the specified GrantId is not valid.
public struct InvalidGrantIdException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidGrantId" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension KMSClientTypes {
    /// Contains information about each entry in the key list.
    public struct KeyListEntry {
        /// ARN of the key.
        public var keyArn: Swift.String?
        /// Unique identifier of the key.
        public var keyId: Swift.String?

        public init(
            keyArn: Swift.String? = nil,
            keyId: Swift.String? = nil
        )
        {
            self.keyArn = keyArn
            self.keyId = keyId
        }
    }

}

/// The request was rejected because the HMAC verification failed. HMAC verification fails when the HMAC computed by using the specified message, HMAC KMS key, and MAC algorithm does not match the HMAC specified in the request.
public struct KMSInvalidMacException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMSInvalidMac" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the signature verification failed. Signature verification fails when it cannot confirm that signature was produced by signing the specified message with the specified KMS key and signing algorithm.
public struct KMSInvalidSignatureException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMSInvalidSignature" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ListAliasesInput {
    /// Lists only aliases that are associated with the specified KMS key. Enter a KMS key in your Amazon Web Services account. This parameter is optional. If you omit it, ListAliases returns all aliases in the account and Region. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    public var keyId: Swift.String?
    /// Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.
    public var limit: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
    public var marker: Swift.String?

    public init(
        keyId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        marker: Swift.String? = nil
    )
    {
        self.keyId = keyId
        self.limit = limit
        self.marker = marker
    }
}

public struct ListAliasesOutput {
    /// A list of aliases.
    public var aliases: [KMSClientTypes.AliasListEntry]?
    /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
    public var nextMarker: Swift.String?
    /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in this response to the Marker parameter in a subsequent request.
    public var truncated: Swift.Bool

    public init(
        aliases: [KMSClientTypes.AliasListEntry]? = nil,
        nextMarker: Swift.String? = nil,
        truncated: Swift.Bool = false
    )
    {
        self.aliases = aliases
        self.nextMarker = nextMarker
        self.truncated = truncated
    }
}

public struct ListGrantsInput {
    /// Returns only the grant with the specified grant ID. The grant ID uniquely identifies the grant.
    public var grantId: Swift.String?
    /// Returns only grants where the specified principal is the grantee principal for the grant.
    public var granteePrincipal: Swift.String?
    /// Returns only grants for the specified KMS key. This parameter is required. Specify the key ID or key ARN of the KMS key. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.
    public var limit: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
    public var marker: Swift.String?

    public init(
        grantId: Swift.String? = nil,
        granteePrincipal: Swift.String? = nil,
        keyId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        marker: Swift.String? = nil
    )
    {
        self.grantId = grantId
        self.granteePrincipal = granteePrincipal
        self.keyId = keyId
        self.limit = limit
        self.marker = marker
    }
}

public struct ListGrantsOutput {
    /// A list of grants.
    public var grants: [KMSClientTypes.GrantListEntry]?
    /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
    public var nextMarker: Swift.String?
    /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in this response to the Marker parameter in a subsequent request.
    public var truncated: Swift.Bool

    public init(
        grants: [KMSClientTypes.GrantListEntry]? = nil,
        nextMarker: Swift.String? = nil,
        truncated: Swift.Bool = false
    )
    {
        self.grants = grants
        self.nextMarker = nextMarker
        self.truncated = truncated
    }
}

public struct ListKeyPoliciesInput {
    /// Gets the names of key policies for the specified KMS key. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 1000, inclusive. If you do not include a value, it defaults to 100. Only one policy can be attached to a key.
    public var limit: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
    public var marker: Swift.String?

    public init(
        keyId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        marker: Swift.String? = nil
    )
    {
        self.keyId = keyId
        self.limit = limit
        self.marker = marker
    }
}

public struct ListKeyPoliciesOutput {
    /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
    public var nextMarker: Swift.String?
    /// A list of key policy names. The only valid value is default.
    public var policyNames: [Swift.String]?
    /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in this response to the Marker parameter in a subsequent request.
    public var truncated: Swift.Bool

    public init(
        nextMarker: Swift.String? = nil,
        policyNames: [Swift.String]? = nil,
        truncated: Swift.Bool = false
    )
    {
        self.nextMarker = nextMarker
        self.policyNames = policyNames
        self.truncated = truncated
    }
}

public struct ListKeyRotationsInput {
    /// Gets the key rotations for the specified KMS key. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 1000, inclusive. If you do not include a value, it defaults to 100.
    public var limit: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
    public var marker: Swift.String?

    public init(
        keyId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        marker: Swift.String? = nil
    )
    {
        self.keyId = keyId
        self.limit = limit
        self.marker = marker
    }
}

extension KMSClientTypes {

    public enum RotationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case automatic
        case onDemand
        case sdkUnknown(Swift.String)

        public static var allCases: [RotationType] {
            return [
                .automatic,
                .onDemand
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .automatic: return "AUTOMATIC"
            case .onDemand: return "ON_DEMAND"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KMSClientTypes {
    /// Contains information about completed key material rotations.
    public struct RotationsListEntry {
        /// Unique identifier of the key.
        public var keyId: Swift.String?
        /// Date and time that the key material rotation completed. Formatted as Unix time.
        public var rotationDate: Foundation.Date?
        /// Identifies whether the key material rotation was a scheduled [automatic rotation](https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotating-keys-enable-disable) or an [on-demand rotation](https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotating-keys-on-demand).
        public var rotationType: KMSClientTypes.RotationType?

        public init(
            keyId: Swift.String? = nil,
            rotationDate: Foundation.Date? = nil,
            rotationType: KMSClientTypes.RotationType? = nil
        )
        {
            self.keyId = keyId
            self.rotationDate = rotationDate
            self.rotationType = rotationType
        }
    }

}

public struct ListKeyRotationsOutput {
    /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
    public var nextMarker: Swift.String?
    /// A list of completed key material rotations.
    public var rotations: [KMSClientTypes.RotationsListEntry]?
    /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in this response to the Marker parameter in a subsequent request.
    public var truncated: Swift.Bool

    public init(
        nextMarker: Swift.String? = nil,
        rotations: [KMSClientTypes.RotationsListEntry]? = nil,
        truncated: Swift.Bool = false
    )
    {
        self.nextMarker = nextMarker
        self.rotations = rotations
        self.truncated = truncated
    }
}

public struct ListKeysInput {
    /// Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 1000, inclusive. If you do not include a value, it defaults to 100.
    public var limit: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
    public var marker: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        marker: Swift.String? = nil
    )
    {
        self.limit = limit
        self.marker = marker
    }
}

public struct ListKeysOutput {
    /// A list of KMS keys.
    public var keys: [KMSClientTypes.KeyListEntry]?
    /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
    public var nextMarker: Swift.String?
    /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in this response to the Marker parameter in a subsequent request.
    public var truncated: Swift.Bool

    public init(
        keys: [KMSClientTypes.KeyListEntry]? = nil,
        nextMarker: Swift.String? = nil,
        truncated: Swift.Bool = false
    )
    {
        self.keys = keys
        self.nextMarker = nextMarker
        self.truncated = truncated
    }
}

public struct ListResourceTagsInput {
    /// Gets tags on the specified KMS key. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 50, inclusive. If you do not include a value, it defaults to 50.
    public var limit: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received. Do not attempt to construct this value. Use only the value of NextMarker from the truncated response you just received.
    public var marker: Swift.String?

    public init(
        keyId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        marker: Swift.String? = nil
    )
    {
        self.keyId = keyId
        self.limit = limit
        self.marker = marker
    }
}

public struct ListResourceTagsOutput {
    /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request. Do not assume or infer any information from this value.
    public var nextMarker: Swift.String?
    /// A list of tags. Each tag consists of a tag key and a tag value. Tagging or untagging a KMS key can allow or deny permission to the KMS key. For details, see [ABAC for KMS](https://docs.aws.amazon.com/kms/latest/developerguide/abac.html) in the Key Management Service Developer Guide.
    public var tags: [KMSClientTypes.Tag]?
    /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in this response to the Marker parameter in a subsequent request.
    public var truncated: Swift.Bool

    public init(
        nextMarker: Swift.String? = nil,
        tags: [KMSClientTypes.Tag]? = nil,
        truncated: Swift.Bool = false
    )
    {
        self.nextMarker = nextMarker
        self.tags = tags
        self.truncated = truncated
    }
}

public struct ListRetirableGrantsInput {
    /// Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.
    public var limit: Swift.Int?
    /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
    public var marker: Swift.String?
    /// The retiring principal for which to list grants. Enter a principal in your Amazon Web Services account. To specify the retiring principal, use the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of an Amazon Web Services principal. Valid principals include Amazon Web Services accounts, IAM users, IAM roles, federated users, and assumed role users. For help with the ARN syntax for a principal, see [IAM ARNs](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns) in the Identity and Access Management User Guide .
    /// This member is required.
    public var retiringPrincipal: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        marker: Swift.String? = nil,
        retiringPrincipal: Swift.String? = nil
    )
    {
        self.limit = limit
        self.marker = marker
        self.retiringPrincipal = retiringPrincipal
    }
}

public struct ListRetirableGrantsOutput {
    /// A list of grants.
    public var grants: [KMSClientTypes.GrantListEntry]?
    /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
    public var nextMarker: Swift.String?
    /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in this response to the Marker parameter in a subsequent request.
    public var truncated: Swift.Bool

    public init(
        grants: [KMSClientTypes.GrantListEntry]? = nil,
        nextMarker: Swift.String? = nil,
        truncated: Swift.Bool = false
    )
    {
        self.grants = grants
        self.nextMarker = nextMarker
        self.truncated = truncated
    }
}

extension KMSClientTypes {

    public enum MessageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case digest
        case raw
        case sdkUnknown(Swift.String)

        public static var allCases: [MessageType] {
            return [
                .digest,
                .raw
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .digest: return "DIGEST"
            case .raw: return "RAW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct PutKeyPolicyInput {
    /// Skips ("bypasses") the key policy lockout safety check. The default value is false. Setting this value to true increases the risk that the KMS key becomes unmanageable. Do not set this value to true indiscriminately. For more information, see [Default key policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#prevent-unmanageable-key) in the Key Management Service Developer Guide. Use this parameter only when you intend to prevent the principal that is making the request from making a subsequent [PutKeyPolicy](https://docs.aws.amazon.com/kms/latest/APIReference/API_PutKeyPolicy.html) request on the KMS key.
    public var bypassPolicyLockoutSafetyCheck: Swift.Bool?
    /// Sets the key policy on the specified KMS key. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// The key policy to attach to the KMS key. The key policy must meet the following criteria:
    ///
    /// * The key policy must allow the calling principal to make a subsequent PutKeyPolicy request on the KMS key. This reduces the risk that the KMS key becomes unmanageable. For more information, see [Default key policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#prevent-unmanageable-key) in the Key Management Service Developer Guide. (To omit this condition, set BypassPolicyLockoutSafetyCheck to true.)
    ///
    /// * Each statement in the key policy must contain one or more principals. The principals in the key policy must exist and be visible to KMS. When you create a new Amazon Web Services principal, you might need to enforce a delay before including the new principal in a key policy because the new principal might not be immediately visible to KMS. For more information, see [Changes that I make are not always immediately visible](https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency) in the Amazon Web Services Identity and Access Management User Guide.
    ///
    ///
    /// A key policy document can include only the following characters:
    ///
    /// * Printable ASCII characters from the space character (\u0020) through the end of the ASCII character range.
    ///
    /// * Printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF).
    ///
    /// * The tab (\u0009), line feed (\u000A), and carriage return (\u000D) special characters
    ///
    ///
    /// For information about key policies, see [Key policies in KMS](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html) in the Key Management Service Developer Guide.For help writing and formatting a JSON policy document, see the [IAM JSON Policy Reference](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html) in the Identity and Access Management User Guide .
    /// This member is required.
    public var policy: Swift.String?
    /// The name of the key policy. If no policy name is specified, the default value is default. The only valid value is default.
    public var policyName: Swift.String?

    public init(
        bypassPolicyLockoutSafetyCheck: Swift.Bool? = false,
        keyId: Swift.String? = nil,
        policy: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck
        self.keyId = keyId
        self.policy = policy
        self.policyName = policyName
    }
}

public struct ReEncryptInput {
    /// Ciphertext of the data to reencrypt.
    /// This member is required.
    public var ciphertextBlob: Foundation.Data?
    /// Specifies the encryption algorithm that KMS will use to reecrypt the data after it has decrypted it. The default value, SYMMETRIC_DEFAULT, represents the encryption algorithm used for symmetric encryption KMS keys. This parameter is required only when the destination KMS key is an asymmetric KMS key.
    public var destinationEncryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
    /// Specifies that encryption context to use when the reencrypting the data. Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. A destination encryption context is valid only when the destination KMS key is a symmetric encryption KMS key. The standard ciphertext format for asymmetric KMS keys does not include fields for metadata. An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Key Management Service Developer Guide.
    public var destinationEncryptionContext: [Swift.String: Swift.String]?
    /// A unique identifier for the KMS key that is used to reencrypt the data. Specify a symmetric encryption KMS key or an asymmetric KMS key with a KeyUsage value of ENCRYPT_DECRYPT. To find the KeyUsage value of a KMS key, use the [DescribeKey] operation. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    /// This member is required.
    public var destinationKeyId: Swift.String?
    /// Checks if your request will succeed. DryRun is an optional parameter. To learn more about how to use this parameter, see [Testing your KMS API calls](https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html) in the Key Management Service Developer Guide.
    public var dryRun: Swift.Bool?
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Specifies the encryption algorithm that KMS will use to decrypt the ciphertext before it is reencrypted. The default value, SYMMETRIC_DEFAULT, represents the algorithm used for symmetric encryption KMS keys. Specify the same algorithm that was used to encrypt the ciphertext. If you specify a different algorithm, the decrypt attempt fails. This parameter is required only when the ciphertext was encrypted under an asymmetric KMS key.
    public var sourceEncryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
    /// Specifies the encryption context to use to decrypt the ciphertext. Enter the same encryption context that was used to encrypt the ciphertext. An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Key Management Service Developer Guide.
    public var sourceEncryptionContext: [Swift.String: Swift.String]?
    /// Specifies the KMS key that KMS will use to decrypt the ciphertext before it is re-encrypted. Enter a key ID of the KMS key that was used to encrypt the ciphertext. If you identify a different KMS key, the ReEncrypt operation throws an IncorrectKeyException. This parameter is required only when the ciphertext was encrypted under an asymmetric KMS key. If you used a symmetric encryption KMS key, KMS can get the KMS key from metadata that it adds to the symmetric ciphertext blob. However, it is always recommended as a best practice. This practice ensures that you use the KMS key that you intend. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    public var sourceKeyId: Swift.String?

    public init(
        ciphertextBlob: Foundation.Data? = nil,
        destinationEncryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec? = nil,
        destinationEncryptionContext: [Swift.String: Swift.String]? = nil,
        destinationKeyId: Swift.String? = nil,
        dryRun: Swift.Bool? = nil,
        grantTokens: [Swift.String]? = nil,
        sourceEncryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec? = nil,
        sourceEncryptionContext: [Swift.String: Swift.String]? = nil,
        sourceKeyId: Swift.String? = nil
    )
    {
        self.ciphertextBlob = ciphertextBlob
        self.destinationEncryptionAlgorithm = destinationEncryptionAlgorithm
        self.destinationEncryptionContext = destinationEncryptionContext
        self.destinationKeyId = destinationKeyId
        self.dryRun = dryRun
        self.grantTokens = grantTokens
        self.sourceEncryptionAlgorithm = sourceEncryptionAlgorithm
        self.sourceEncryptionContext = sourceEncryptionContext
        self.sourceKeyId = sourceKeyId
    }
}

public struct ReEncryptOutput {
    /// The reencrypted data. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var ciphertextBlob: Foundation.Data?
    /// The encryption algorithm that was used to reencrypt the data.
    public var destinationEncryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the KMS key that was used to reencrypt the data.
    public var keyId: Swift.String?
    /// The encryption algorithm that was used to decrypt the ciphertext before it was reencrypted.
    public var sourceEncryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec?
    /// Unique identifier of the KMS key used to originally encrypt the data.
    public var sourceKeyId: Swift.String?

    public init(
        ciphertextBlob: Foundation.Data? = nil,
        destinationEncryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec? = nil,
        keyId: Swift.String? = nil,
        sourceEncryptionAlgorithm: KMSClientTypes.EncryptionAlgorithmSpec? = nil,
        sourceKeyId: Swift.String? = nil
    )
    {
        self.ciphertextBlob = ciphertextBlob
        self.destinationEncryptionAlgorithm = destinationEncryptionAlgorithm
        self.keyId = keyId
        self.sourceEncryptionAlgorithm = sourceEncryptionAlgorithm
        self.sourceKeyId = sourceKeyId
    }
}

public struct ReplicateKeyInput {
    /// Skips ("bypasses") the key policy lockout safety check. The default value is false. Setting this value to true increases the risk that the KMS key becomes unmanageable. Do not set this value to true indiscriminately. For more information, see [Default key policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#prevent-unmanageable-key) in the Key Management Service Developer Guide. Use this parameter only when you intend to prevent the principal that is making the request from making a subsequent [PutKeyPolicy](https://docs.aws.amazon.com/kms/latest/APIReference/API_PutKeyPolicy.html) request on the KMS key.
    public var bypassPolicyLockoutSafetyCheck: Swift.Bool?
    /// A description of the KMS key. The default value is an empty string (no description). Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. The description is not a shared property of multi-Region keys. You can specify the same description or a different description for each key in a set of related multi-Region keys. KMS does not synchronize this property.
    public var description: Swift.String?
    /// Identifies the multi-Region primary key that is being replicated. To determine whether a KMS key is a multi-Region primary key, use the [DescribeKey] operation to check the value of the MultiRegionKeyType property. Specify the key ID or key ARN of a multi-Region primary key. For example:
    ///
    /// * Key ID: mrk-1234abcd12ab34cd56ef1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// The key policy to attach to the KMS key. This parameter is optional. If you do not provide a key policy, KMS attaches the [default key policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default) to the KMS key. The key policy is not a shared property of multi-Region keys. You can specify the same key policy or a different key policy for each key in a set of related multi-Region keys. KMS does not synchronize this property. If you provide a key policy, it must meet the following criteria:
    ///
    /// * The key policy must allow the calling principal to make a subsequent PutKeyPolicy request on the KMS key. This reduces the risk that the KMS key becomes unmanageable. For more information, see [Default key policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#prevent-unmanageable-key) in the Key Management Service Developer Guide. (To omit this condition, set BypassPolicyLockoutSafetyCheck to true.)
    ///
    /// * Each statement in the key policy must contain one or more principals. The principals in the key policy must exist and be visible to KMS. When you create a new Amazon Web Services principal, you might need to enforce a delay before including the new principal in a key policy because the new principal might not be immediately visible to KMS. For more information, see [Changes that I make are not always immediately visible](https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency) in the Amazon Web Services Identity and Access Management User Guide.
    ///
    ///
    /// A key policy document can include only the following characters:
    ///
    /// * Printable ASCII characters from the space character (\u0020) through the end of the ASCII character range.
    ///
    /// * Printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF).
    ///
    /// * The tab (\u0009), line feed (\u000A), and carriage return (\u000D) special characters
    ///
    ///
    /// For information about key policies, see [Key policies in KMS](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html) in the Key Management Service Developer Guide. For help writing and formatting a JSON policy document, see the [IAM JSON Policy Reference](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html) in the Identity and Access Management User Guide .
    public var policy: Swift.String?
    /// The Region ID of the Amazon Web Services Region for this replica key. Enter the Region ID, such as us-east-1 or ap-southeast-2. For a list of Amazon Web Services Regions in which KMS is supported, see [KMS service endpoints](https://docs.aws.amazon.com/general/latest/gr/kms.html#kms_region) in the Amazon Web Services General Reference. HMAC KMS keys are not supported in all Amazon Web Services Regions. If you try to replicate an HMAC KMS key in an Amazon Web Services Region in which HMAC keys are not supported, the ReplicateKey operation returns an UnsupportedOperationException. For a list of Regions in which HMAC KMS keys are supported, see [HMAC keys in KMS](https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html) in the Key Management Service Developer Guide. The replica must be in a different Amazon Web Services Region than its primary key and other replicas of that primary key, but in the same Amazon Web Services partition. KMS must be available in the replica Region. If the Region is not enabled by default, the Amazon Web Services account must be enabled in the Region. For information about Amazon Web Services partitions, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference. For information about enabling and disabling Regions, see [Enabling a Region](https://docs.aws.amazon.com/general/latest/gr/rande-manage.html#rande-manage-enable) and [Disabling a Region](https://docs.aws.amazon.com/general/latest/gr/rande-manage.html#rande-manage-disable) in the Amazon Web Services General Reference.
    /// This member is required.
    public var replicaRegion: Swift.String?
    /// Assigns one or more tags to the replica key. Use this parameter to tag the KMS key when it is created. To tag an existing KMS key, use the [TagResource] operation. Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. Tagging or untagging a KMS key can allow or deny permission to the KMS key. For details, see [ABAC for KMS](https://docs.aws.amazon.com/kms/latest/developerguide/abac.html) in the Key Management Service Developer Guide. To use this parameter, you must have [kms:TagResource](https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html) permission in an IAM policy. Tags are not a shared property of multi-Region keys. You can specify the same tags or different tags for each key in a set of related multi-Region keys. KMS does not synchronize this property. Each tag consists of a tag key and a tag value. Both the tag key and the tag value are required, but the tag value can be an empty (null) string. You cannot have more than one tag on a KMS key with the same tag key. If you specify an existing tag key with a different tag value, KMS replaces the current tag value with the specified one. When you add tags to an Amazon Web Services resource, Amazon Web Services generates a cost allocation report with usage and costs aggregated by tags. Tags can also be used to control access to a KMS key. For details, see [Tagging Keys](https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html).
    public var tags: [KMSClientTypes.Tag]?

    public init(
        bypassPolicyLockoutSafetyCheck: Swift.Bool? = false,
        description: Swift.String? = nil,
        keyId: Swift.String? = nil,
        policy: Swift.String? = nil,
        replicaRegion: Swift.String? = nil,
        tags: [KMSClientTypes.Tag]? = nil
    )
    {
        self.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck
        self.description = description
        self.keyId = keyId
        self.policy = policy
        self.replicaRegion = replicaRegion
        self.tags = tags
    }
}

public struct ReplicateKeyOutput {
    /// Displays details about the new replica key, including its Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) and [Key states of KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html). It also includes the ARN and Amazon Web Services Region of its primary key and other replica keys.
    public var replicaKeyMetadata: KMSClientTypes.KeyMetadata?
    /// The key policy of the new replica key. The value is a key policy document in JSON format.
    public var replicaPolicy: Swift.String?
    /// The tags on the new replica key. The value is a list of tag key and tag value pairs.
    public var replicaTags: [KMSClientTypes.Tag]?

    public init(
        replicaKeyMetadata: KMSClientTypes.KeyMetadata? = nil,
        replicaPolicy: Swift.String? = nil,
        replicaTags: [KMSClientTypes.Tag]? = nil
    )
    {
        self.replicaKeyMetadata = replicaKeyMetadata
        self.replicaPolicy = replicaPolicy
        self.replicaTags = replicaTags
    }
}

public struct RetireGrantInput {
    /// Checks if your request will succeed. DryRun is an optional parameter. To learn more about how to use this parameter, see [Testing your KMS API calls](https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html) in the Key Management Service Developer Guide.
    public var dryRun: Swift.Bool?
    /// Identifies the grant to retire. To get the grant ID, use [CreateGrant], [ListGrants], or [ListRetirableGrants].
    ///
    /// * Grant ID Example - 0123456789012345678901234567890123456789012345678901234567890123
    public var grantId: Swift.String?
    /// Identifies the grant to be retired. You can use a grant token to identify a new grant even before it has achieved eventual consistency. Only the [CreateGrant] operation returns a grant token. For details, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Eventual consistency](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#terms-eventual-consistency) in the Key Management Service Developer Guide.
    public var grantToken: Swift.String?
    /// The key ARN KMS key associated with the grant. To find the key ARN, use the [ListKeys] operation. For example: arn:aws:kms:us-east-2:444455556666:key/1234abcd-12ab-34cd-56ef-1234567890ab
    public var keyId: Swift.String?

    public init(
        dryRun: Swift.Bool? = nil,
        grantId: Swift.String? = nil,
        grantToken: Swift.String? = nil,
        keyId: Swift.String? = nil
    )
    {
        self.dryRun = dryRun
        self.grantId = grantId
        self.grantToken = grantToken
        self.keyId = keyId
    }
}

public struct RevokeGrantInput {
    /// Checks if your request will succeed. DryRun is an optional parameter. To learn more about how to use this parameter, see [Testing your KMS API calls](https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html) in the Key Management Service Developer Guide.
    public var dryRun: Swift.Bool?
    /// Identifies the grant to revoke. To get the grant ID, use [CreateGrant], [ListGrants], or [ListRetirableGrants].
    /// This member is required.
    public var grantId: Swift.String?
    /// A unique identifier for the KMS key associated with the grant. To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. Specify the key ID or key ARN of the KMS key. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?

    public init(
        dryRun: Swift.Bool? = nil,
        grantId: Swift.String? = nil,
        keyId: Swift.String? = nil
    )
    {
        self.dryRun = dryRun
        self.grantId = grantId
        self.keyId = keyId
    }
}

public struct RotateKeyOnDemandInput {
    /// Identifies a symmetric encryption KMS key. You cannot perform on-demand rotation of [asymmetric KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html), [HMAC KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html), KMS keys with [imported key material](https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html), or KMS keys in a [custom key store](https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html). To perform on-demand rotation of a set of related [multi-Region keys](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate), invoke the on-demand rotation on the primary key. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?

    public init(
        keyId: Swift.String? = nil
    )
    {
        self.keyId = keyId
    }
}

public struct RotateKeyOnDemandOutput {
    /// Identifies the symmetric encryption KMS key that you initiated on-demand rotation on.
    public var keyId: Swift.String?

    public init(
        keyId: Swift.String? = nil
    )
    {
        self.keyId = keyId
    }
}

public struct ScheduleKeyDeletionInput {
    /// The unique identifier of the KMS key to delete. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// The waiting period, specified in number of days. After the waiting period ends, KMS deletes the KMS key. If the KMS key is a multi-Region primary key with replica keys, the waiting period begins when the last of its replica keys is deleted. Otherwise, the waiting period begins immediately. This value is optional. If you include a value, it must be between 7 and 30, inclusive. If you do not include a value, it defaults to 30. You can use the [kms:ScheduleKeyDeletionPendingWindowInDays](https://docs.aws.amazon.com/kms/latest/developerguide/conditions-kms.html#conditions-kms-schedule-key-deletion-pending-window-in-days) condition key to further constrain the values that principals can specify in the PendingWindowInDays parameter.
    public var pendingWindowInDays: Swift.Int?

    public init(
        keyId: Swift.String? = nil,
        pendingWindowInDays: Swift.Int? = nil
    )
    {
        self.keyId = keyId
        self.pendingWindowInDays = pendingWindowInDays
    }
}

public struct ScheduleKeyDeletionOutput {
    /// The date and time after which KMS deletes the KMS key. If the KMS key is a multi-Region primary key with replica keys, this field does not appear. The deletion date for the primary key isn't known until its last replica key is deleted.
    public var deletionDate: Foundation.Date?
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the KMS key whose deletion is scheduled.
    public var keyId: Swift.String?
    /// The current status of the KMS key. For more information about how key state affects the use of a KMS key, see [Key states of KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the Key Management Service Developer Guide.
    public var keyState: KMSClientTypes.KeyState?
    /// The waiting period before the KMS key is deleted. If the KMS key is a multi-Region primary key with replicas, the waiting period begins when the last of its replica keys is deleted. Otherwise, the waiting period begins immediately.
    public var pendingWindowInDays: Swift.Int?

    public init(
        deletionDate: Foundation.Date? = nil,
        keyId: Swift.String? = nil,
        keyState: KMSClientTypes.KeyState? = nil,
        pendingWindowInDays: Swift.Int? = nil
    )
    {
        self.deletionDate = deletionDate
        self.keyId = keyId
        self.keyState = keyState
        self.pendingWindowInDays = pendingWindowInDays
    }
}

public struct SignInput {
    /// Checks if your request will succeed. DryRun is an optional parameter. To learn more about how to use this parameter, see [Testing your KMS API calls](https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html) in the Key Management Service Developer Guide.
    public var dryRun: Swift.Bool?
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Identifies an asymmetric KMS key. KMS uses the private key in the asymmetric KMS key to sign the message. The KeyUsage type of the KMS key must be SIGN_VERIFY. To find the KeyUsage of a KMS key, use the [DescribeKey] operation. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    /// This member is required.
    public var keyId: Swift.String?
    /// Specifies the message or message digest to sign. Messages can be 0-4096 bytes. To sign a larger message, provide a message digest. If you provide a message digest, use the DIGEST value of MessageType to prevent the digest from being hashed again while signing.
    /// This member is required.
    public var message: Foundation.Data?
    /// Tells KMS whether the value of the Message parameter should be hashed as part of the signing algorithm. Use RAW for unhashed messages; use DIGEST for message digests, which are already hashed. When the value of MessageType is RAW, KMS uses the standard signing algorithm, which begins with a hash function. When the value is DIGEST, KMS skips the hashing step in the signing algorithm. Use the DIGEST value only when the value of the Message parameter is a message digest. If you use the DIGEST value with an unhashed message, the security of the signing operation can be compromised. When the value of MessageTypeis DIGEST, the length of the Message value must match the length of hashed messages for the specified signing algorithm. You can submit a message digest and omit the MessageType or specify RAW so the digest is hashed again while signing. However, this can cause verification failures when verifying with a system that assumes a single hash. The hashing algorithm in that Sign uses is based on the SigningAlgorithm value.
    ///
    /// * Signing algorithms that end in SHA_256 use the SHA_256 hashing algorithm.
    ///
    /// * Signing algorithms that end in SHA_384 use the SHA_384 hashing algorithm.
    ///
    /// * Signing algorithms that end in SHA_512 use the SHA_512 hashing algorithm.
    ///
    /// * SM2DSA uses the SM3 hashing algorithm. For details, see [Offline verification with SM2 key pairs](https://docs.aws.amazon.com/kms/latest/developerguide/asymmetric-key-specs.html#key-spec-sm-offline-verification).
    public var messageType: KMSClientTypes.MessageType?
    /// Specifies the signing algorithm to use when signing the message. Choose an algorithm that is compatible with the type and size of the specified asymmetric KMS key. When signing with RSA key pairs, RSASSA-PSS algorithms are preferred. We include RSASSA-PKCS1-v1_5 algorithms for compatibility with existing applications.
    /// This member is required.
    public var signingAlgorithm: KMSClientTypes.SigningAlgorithmSpec?

    public init(
        dryRun: Swift.Bool? = nil,
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil,
        message: Foundation.Data? = nil,
        messageType: KMSClientTypes.MessageType? = nil,
        signingAlgorithm: KMSClientTypes.SigningAlgorithmSpec? = nil
    )
    {
        self.dryRun = dryRun
        self.grantTokens = grantTokens
        self.keyId = keyId
        self.message = message
        self.messageType = messageType
        self.signingAlgorithm = signingAlgorithm
    }
}

extension SignInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SignInput(dryRun: \(Swift.String(describing: dryRun)), grantTokens: \(Swift.String(describing: grantTokens)), keyId: \(Swift.String(describing: keyId)), messageType: \(Swift.String(describing: messageType)), signingAlgorithm: \(Swift.String(describing: signingAlgorithm)), message: \"CONTENT_REDACTED\")"}
}

public struct SignOutput {
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the asymmetric KMS key that was used to sign the message.
    public var keyId: Swift.String?
    /// The cryptographic signature that was generated for the message.
    ///
    /// * When used with the supported RSA signing algorithms, the encoding of this value is defined by [PKCS #1 in RFC 8017](https://tools.ietf.org/html/rfc8017).
    ///
    /// * When used with the ECDSA_SHA_256, ECDSA_SHA_384, or ECDSA_SHA_512 signing algorithms, this value is a DER-encoded object as defined by ANSI X9.62–2005 and [RFC 3279 Section 2.2.3](https://tools.ietf.org/html/rfc3279#section-2.2.3). This is the most commonly used signature format and is appropriate for most uses.
    ///
    ///
    /// When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
    public var signature: Foundation.Data?
    /// The signing algorithm that was used to sign the message.
    public var signingAlgorithm: KMSClientTypes.SigningAlgorithmSpec?

    public init(
        keyId: Swift.String? = nil,
        signature: Foundation.Data? = nil,
        signingAlgorithm: KMSClientTypes.SigningAlgorithmSpec? = nil
    )
    {
        self.keyId = keyId
        self.signature = signature
        self.signingAlgorithm = signingAlgorithm
    }
}

public struct TagResourceInput {
    /// Identifies a customer managed key in the account and Region. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// One or more tags. Each tag consists of a tag key and a tag value. The tag value can be an empty (null) string. Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. You cannot have more than one tag on a KMS key with the same tag key. If you specify an existing tag key with a different tag value, KMS replaces the current tag value with the specified one.
    /// This member is required.
    public var tags: [KMSClientTypes.Tag]?

    public init(
        keyId: Swift.String? = nil,
        tags: [KMSClientTypes.Tag]? = nil
    )
    {
        self.keyId = keyId
        self.tags = tags
    }
}

public struct UntagResourceInput {
    /// Identifies the KMS key from which you are removing tags. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// One or more tag keys. Specify only the tag keys, not the tag values.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        keyId: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.keyId = keyId
        self.tagKeys = tagKeys
    }
}

public struct UpdateAliasInput {
    /// Identifies the alias that is changing its KMS key. This value must begin with alias/ followed by the alias name, such as alias/ExampleAlias. You cannot use UpdateAlias to change the alias name. Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.
    /// This member is required.
    public var aliasName: Swift.String?
    /// Identifies the [customer managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk) to associate with the alias. You don't have permission to associate an alias with an [Amazon Web Services managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk). The KMS key must be in the same Amazon Web Services account and Region as the alias. Also, the new target KMS key must be the same type as the current target KMS key (both symmetric or both asymmetric or both HMAC) and they must have the same key usage. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To verify that the alias is mapped to the correct KMS key, use [ListAliases].
    /// This member is required.
    public var targetKeyId: Swift.String?

    public init(
        aliasName: Swift.String? = nil,
        targetKeyId: Swift.String? = nil
    )
    {
        self.aliasName = aliasName
        self.targetKeyId = targetKeyId
    }
}

public struct UpdateCustomKeyStoreInput {
    /// Associates the custom key store with a related CloudHSM cluster. This parameter is valid only for custom key stores with a CustomKeyStoreType of AWS_CLOUDHSM. Enter the cluster ID of the cluster that you used to create the custom key store or a cluster that shares a backup history and has the same cluster certificate as the original cluster. You cannot use this parameter to associate a custom key store with an unrelated cluster. In addition, the replacement cluster must [fulfill the requirements](https://docs.aws.amazon.com/kms/latest/developerguide/create-keystore.html#before-keystore) for a cluster associated with a custom key store. To view the cluster certificate of a cluster, use the [DescribeClusters](https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html) operation. To change this value, the CloudHSM key store must be disconnected.
    public var cloudHsmClusterId: Swift.String?
    /// Identifies the custom key store that you want to update. Enter the ID of the custom key store. To find the ID of a custom key store, use the [DescribeCustomKeyStores] operation.
    /// This member is required.
    public var customKeyStoreId: Swift.String?
    /// Enter the current password of the kmsuser crypto user (CU) in the CloudHSM cluster that is associated with the custom key store. This parameter is valid only for custom key stores with a CustomKeyStoreType of AWS_CLOUDHSM. This parameter tells KMS the current password of the kmsuser crypto user (CU). It does not set or change the password of any users in the CloudHSM cluster. To change this value, the CloudHSM key store must be disconnected.
    public var keyStorePassword: Swift.String?
    /// Changes the friendly name of the custom key store to the value that you specify. The custom key store name must be unique in the Amazon Web Services account. Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. To change this value, an CloudHSM key store must be disconnected. An external key store can be connected or disconnected.
    public var newCustomKeyStoreName: Swift.String?
    /// Changes the credentials that KMS uses to sign requests to the external key store proxy (XKS proxy). This parameter is valid only for custom key stores with a CustomKeyStoreType of EXTERNAL_KEY_STORE. You must specify both the AccessKeyId and SecretAccessKey value in the authentication credential, even if you are only updating one value. This parameter doesn't establish or change your authentication credentials on the proxy. It just tells KMS the credential that you established with your external key store proxy. For example, if you rotate the credential on your external key store proxy, you can use this parameter to update the credential in KMS. You can change this value when the external key store is connected or disconnected.
    public var xksProxyAuthenticationCredential: KMSClientTypes.XksProxyAuthenticationCredentialType?
    /// Changes the connectivity setting for the external key store. To indicate that the external key store proxy uses a Amazon VPC endpoint service to communicate with KMS, specify VPC_ENDPOINT_SERVICE. Otherwise, specify PUBLIC_ENDPOINT. If you change the XksProxyConnectivity to VPC_ENDPOINT_SERVICE, you must also change the XksProxyUriEndpoint and add an XksProxyVpcEndpointServiceName value. If you change the XksProxyConnectivity to PUBLIC_ENDPOINT, you must also change the XksProxyUriEndpoint and specify a null or empty string for the XksProxyVpcEndpointServiceName value. To change this value, the external key store must be disconnected.
    public var xksProxyConnectivity: KMSClientTypes.XksProxyConnectivityType?
    /// Changes the URI endpoint that KMS uses to connect to your external key store proxy (XKS proxy). This parameter is valid only for custom key stores with a CustomKeyStoreType of EXTERNAL_KEY_STORE. For external key stores with an XksProxyConnectivity value of PUBLIC_ENDPOINT, the protocol must be HTTPS. For external key stores with an XksProxyConnectivity value of VPC_ENDPOINT_SERVICE, specify https:// followed by the private DNS name associated with the VPC endpoint service. Each external key store must use a different private DNS name. The combined XksProxyUriEndpoint and XksProxyUriPath values must be unique in the Amazon Web Services account and Region. To change this value, the external key store must be disconnected.
    public var xksProxyUriEndpoint: Swift.String?
    /// Changes the base path to the proxy APIs for this external key store. To find this value, see the documentation for your external key manager and external key store proxy (XKS proxy). This parameter is valid only for custom key stores with a CustomKeyStoreType of EXTERNAL_KEY_STORE. The value must start with / and must end with /kms/xks/v1, where v1 represents the version of the KMS external key store proxy API. You can include an optional prefix between the required elements such as /example/kms/xks/v1. The combined XksProxyUriEndpoint and XksProxyUriPath values must be unique in the Amazon Web Services account and Region. You can change this value when the external key store is connected or disconnected.
    public var xksProxyUriPath: Swift.String?
    /// Changes the name that KMS uses to identify the Amazon VPC endpoint service for your external key store proxy (XKS proxy). This parameter is valid when the CustomKeyStoreType is EXTERNAL_KEY_STORE and the XksProxyConnectivity is VPC_ENDPOINT_SERVICE. To change this value, the external key store must be disconnected.
    public var xksProxyVpcEndpointServiceName: Swift.String?

    public init(
        cloudHsmClusterId: Swift.String? = nil,
        customKeyStoreId: Swift.String? = nil,
        keyStorePassword: Swift.String? = nil,
        newCustomKeyStoreName: Swift.String? = nil,
        xksProxyAuthenticationCredential: KMSClientTypes.XksProxyAuthenticationCredentialType? = nil,
        xksProxyConnectivity: KMSClientTypes.XksProxyConnectivityType? = nil,
        xksProxyUriEndpoint: Swift.String? = nil,
        xksProxyUriPath: Swift.String? = nil,
        xksProxyVpcEndpointServiceName: Swift.String? = nil
    )
    {
        self.cloudHsmClusterId = cloudHsmClusterId
        self.customKeyStoreId = customKeyStoreId
        self.keyStorePassword = keyStorePassword
        self.newCustomKeyStoreName = newCustomKeyStoreName
        self.xksProxyAuthenticationCredential = xksProxyAuthenticationCredential
        self.xksProxyConnectivity = xksProxyConnectivity
        self.xksProxyUriEndpoint = xksProxyUriEndpoint
        self.xksProxyUriPath = xksProxyUriPath
        self.xksProxyVpcEndpointServiceName = xksProxyVpcEndpointServiceName
    }
}

extension UpdateCustomKeyStoreInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateCustomKeyStoreInput(cloudHsmClusterId: \(Swift.String(describing: cloudHsmClusterId)), customKeyStoreId: \(Swift.String(describing: customKeyStoreId)), newCustomKeyStoreName: \(Swift.String(describing: newCustomKeyStoreName)), xksProxyAuthenticationCredential: \(Swift.String(describing: xksProxyAuthenticationCredential)), xksProxyConnectivity: \(Swift.String(describing: xksProxyConnectivity)), xksProxyUriEndpoint: \(Swift.String(describing: xksProxyUriEndpoint)), xksProxyUriPath: \(Swift.String(describing: xksProxyUriPath)), xksProxyVpcEndpointServiceName: \(Swift.String(describing: xksProxyVpcEndpointServiceName)), keyStorePassword: \"CONTENT_REDACTED\")"}
}

public struct UpdateCustomKeyStoreOutput {

    public init() { }
}

public struct UpdateKeyDescriptionInput {
    /// New description for the KMS key. Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.
    /// This member is required.
    public var description: Swift.String?
    /// Updates the description of the specified KMS key. Specify the key ID or key ARN of the KMS key. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?

    public init(
        description: Swift.String? = nil,
        keyId: Swift.String? = nil
    )
    {
        self.description = description
        self.keyId = keyId
    }
}

public struct UpdatePrimaryRegionInput {
    /// Identifies the current primary key. When the operation completes, this KMS key will be a replica key. Specify the key ID or key ARN of a multi-Region primary key. For example:
    ///
    /// * Key ID: mrk-1234abcd12ab34cd56ef1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey].
    /// This member is required.
    public var keyId: Swift.String?
    /// The Amazon Web Services Region of the new primary key. Enter the Region ID, such as us-east-1 or ap-southeast-2. There must be an existing replica key in this Region. When the operation completes, the multi-Region key in this Region will be the primary key.
    /// This member is required.
    public var primaryRegion: Swift.String?

    public init(
        keyId: Swift.String? = nil,
        primaryRegion: Swift.String? = nil
    )
    {
        self.keyId = keyId
        self.primaryRegion = primaryRegion
    }
}

public struct VerifyInput {
    /// Checks if your request will succeed. DryRun is an optional parameter. To learn more about how to use this parameter, see [Testing your KMS API calls](https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html) in the Key Management Service Developer Guide.
    public var dryRun: Swift.Bool?
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// Identifies the asymmetric KMS key that will be used to verify the signature. This must be the same KMS key that was used to generate the signature. If you specify a different KMS key, the signature verification fails. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// To get the key ID and key ARN for a KMS key, use [ListKeys] or [DescribeKey]. To get the alias name and alias ARN, use [ListAliases].
    /// This member is required.
    public var keyId: Swift.String?
    /// Specifies the message that was signed. You can submit a raw message of up to 4096 bytes, or a hash digest of the message. If you submit a digest, use the MessageType parameter with a value of DIGEST. If the message specified here is different from the message that was signed, the signature verification fails. A message and its hash digest are considered to be the same message.
    /// This member is required.
    public var message: Foundation.Data?
    /// Tells KMS whether the value of the Message parameter should be hashed as part of the signing algorithm. Use RAW for unhashed messages; use DIGEST for message digests, which are already hashed. When the value of MessageType is RAW, KMS uses the standard signing algorithm, which begins with a hash function. When the value is DIGEST, KMS skips the hashing step in the signing algorithm. Use the DIGEST value only when the value of the Message parameter is a message digest. If you use the DIGEST value with an unhashed message, the security of the verification operation can be compromised. When the value of MessageTypeis DIGEST, the length of the Message value must match the length of hashed messages for the specified signing algorithm. You can submit a message digest and omit the MessageType or specify RAW so the digest is hashed again while signing. However, if the signed message is hashed once while signing, but twice while verifying, verification fails, even when the message hasn't changed. The hashing algorithm in that Verify uses is based on the SigningAlgorithm value.
    ///
    /// * Signing algorithms that end in SHA_256 use the SHA_256 hashing algorithm.
    ///
    /// * Signing algorithms that end in SHA_384 use the SHA_384 hashing algorithm.
    ///
    /// * Signing algorithms that end in SHA_512 use the SHA_512 hashing algorithm.
    ///
    /// * SM2DSA uses the SM3 hashing algorithm. For details, see [Offline verification with SM2 key pairs](https://docs.aws.amazon.com/kms/latest/developerguide/asymmetric-key-specs.html#key-spec-sm-offline-verification).
    public var messageType: KMSClientTypes.MessageType?
    /// The signature that the Sign operation generated.
    /// This member is required.
    public var signature: Foundation.Data?
    /// The signing algorithm that was used to sign the message. If you submit a different algorithm, the signature verification fails.
    /// This member is required.
    public var signingAlgorithm: KMSClientTypes.SigningAlgorithmSpec?

    public init(
        dryRun: Swift.Bool? = nil,
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil,
        message: Foundation.Data? = nil,
        messageType: KMSClientTypes.MessageType? = nil,
        signature: Foundation.Data? = nil,
        signingAlgorithm: KMSClientTypes.SigningAlgorithmSpec? = nil
    )
    {
        self.dryRun = dryRun
        self.grantTokens = grantTokens
        self.keyId = keyId
        self.message = message
        self.messageType = messageType
        self.signature = signature
        self.signingAlgorithm = signingAlgorithm
    }
}

extension VerifyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VerifyInput(dryRun: \(Swift.String(describing: dryRun)), grantTokens: \(Swift.String(describing: grantTokens)), keyId: \(Swift.String(describing: keyId)), messageType: \(Swift.String(describing: messageType)), signature: \(Swift.String(describing: signature)), signingAlgorithm: \(Swift.String(describing: signingAlgorithm)), message: \"CONTENT_REDACTED\")"}
}

public struct VerifyOutput {
    /// The Amazon Resource Name ([key ARN](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN)) of the asymmetric KMS key that was used to verify the signature.
    public var keyId: Swift.String?
    /// A Boolean value that indicates whether the signature was verified. A value of True indicates that the Signature was produced by signing the Message with the specified KeyID and SigningAlgorithm. If the signature is not verified, the Verify operation fails with a KMSInvalidSignatureException exception.
    public var signatureValid: Swift.Bool
    /// The signing algorithm that was used to verify the signature.
    public var signingAlgorithm: KMSClientTypes.SigningAlgorithmSpec?

    public init(
        keyId: Swift.String? = nil,
        signatureValid: Swift.Bool = false,
        signingAlgorithm: KMSClientTypes.SigningAlgorithmSpec? = nil
    )
    {
        self.keyId = keyId
        self.signatureValid = signatureValid
        self.signingAlgorithm = signingAlgorithm
    }
}

public struct VerifyMacInput {
    /// Checks if your request will succeed. DryRun is an optional parameter. To learn more about how to use this parameter, see [Testing your KMS API calls](https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html) in the Key Management Service Developer Guide.
    public var dryRun: Swift.Bool?
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// The KMS key that will be used in the verification. Enter a key ID of the KMS key that was used to generate the HMAC. If you identify a different KMS key, the VerifyMac operation fails.
    /// This member is required.
    public var keyId: Swift.String?
    /// The HMAC to verify. Enter the HMAC that was generated by the [GenerateMac] operation when you specified the same message, HMAC KMS key, and MAC algorithm as the values specified in this request.
    /// This member is required.
    public var mac: Foundation.Data?
    /// The MAC algorithm that will be used in the verification. Enter the same MAC algorithm that was used to compute the HMAC. This algorithm must be supported by the HMAC KMS key identified by the KeyId parameter.
    /// This member is required.
    public var macAlgorithm: KMSClientTypes.MacAlgorithmSpec?
    /// The message that will be used in the verification. Enter the same message that was used to generate the HMAC. [GenerateMac] and VerifyMac do not provide special handling for message digests. If you generated an HMAC for a hash digest of a message, you must verify the HMAC for the same hash digest.
    /// This member is required.
    public var message: Foundation.Data?

    public init(
        dryRun: Swift.Bool? = nil,
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil,
        mac: Foundation.Data? = nil,
        macAlgorithm: KMSClientTypes.MacAlgorithmSpec? = nil,
        message: Foundation.Data? = nil
    )
    {
        self.dryRun = dryRun
        self.grantTokens = grantTokens
        self.keyId = keyId
        self.mac = mac
        self.macAlgorithm = macAlgorithm
        self.message = message
    }
}

extension VerifyMacInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VerifyMacInput(dryRun: \(Swift.String(describing: dryRun)), grantTokens: \(Swift.String(describing: grantTokens)), keyId: \(Swift.String(describing: keyId)), mac: \(Swift.String(describing: mac)), macAlgorithm: \(Swift.String(describing: macAlgorithm)), message: \"CONTENT_REDACTED\")"}
}

public struct VerifyMacOutput {
    /// The HMAC KMS key used in the verification.
    public var keyId: Swift.String?
    /// The MAC algorithm used in the verification.
    public var macAlgorithm: KMSClientTypes.MacAlgorithmSpec?
    /// A Boolean value that indicates whether the HMAC was verified. A value of True indicates that the HMAC (Mac) was generated with the specified Message, HMAC KMS key (KeyID) and MacAlgorithm.. If the HMAC is not verified, the VerifyMac operation fails with a KMSInvalidMacException exception. This exception indicates that one or more of the inputs changed since the HMAC was computed.
    public var macValid: Swift.Bool

    public init(
        keyId: Swift.String? = nil,
        macAlgorithm: KMSClientTypes.MacAlgorithmSpec? = nil,
        macValid: Swift.Bool = false
    )
    {
        self.keyId = keyId
        self.macAlgorithm = macAlgorithm
        self.macValid = macValid
    }
}

extension CancelKeyDeletionInput {

    static func urlPathProvider(_ value: CancelKeyDeletionInput) -> Swift.String? {
        return "/"
    }
}

extension ConnectCustomKeyStoreInput {

    static func urlPathProvider(_ value: ConnectCustomKeyStoreInput) -> Swift.String? {
        return "/"
    }
}

extension CreateAliasInput {

    static func urlPathProvider(_ value: CreateAliasInput) -> Swift.String? {
        return "/"
    }
}

extension CreateCustomKeyStoreInput {

    static func urlPathProvider(_ value: CreateCustomKeyStoreInput) -> Swift.String? {
        return "/"
    }
}

extension CreateGrantInput {

    static func urlPathProvider(_ value: CreateGrantInput) -> Swift.String? {
        return "/"
    }
}

extension CreateKeyInput {

    static func urlPathProvider(_ value: CreateKeyInput) -> Swift.String? {
        return "/"
    }
}

extension DecryptInput {

    static func urlPathProvider(_ value: DecryptInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteAliasInput {

    static func urlPathProvider(_ value: DeleteAliasInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteCustomKeyStoreInput {

    static func urlPathProvider(_ value: DeleteCustomKeyStoreInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteImportedKeyMaterialInput {

    static func urlPathProvider(_ value: DeleteImportedKeyMaterialInput) -> Swift.String? {
        return "/"
    }
}

extension DeriveSharedSecretInput {

    static func urlPathProvider(_ value: DeriveSharedSecretInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeCustomKeyStoresInput {

    static func urlPathProvider(_ value: DescribeCustomKeyStoresInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeKeyInput {

    static func urlPathProvider(_ value: DescribeKeyInput) -> Swift.String? {
        return "/"
    }
}

extension DisableKeyInput {

    static func urlPathProvider(_ value: DisableKeyInput) -> Swift.String? {
        return "/"
    }
}

extension DisableKeyRotationInput {

    static func urlPathProvider(_ value: DisableKeyRotationInput) -> Swift.String? {
        return "/"
    }
}

extension DisconnectCustomKeyStoreInput {

    static func urlPathProvider(_ value: DisconnectCustomKeyStoreInput) -> Swift.String? {
        return "/"
    }
}

extension EnableKeyInput {

    static func urlPathProvider(_ value: EnableKeyInput) -> Swift.String? {
        return "/"
    }
}

extension EnableKeyRotationInput {

    static func urlPathProvider(_ value: EnableKeyRotationInput) -> Swift.String? {
        return "/"
    }
}

extension EncryptInput {

    static func urlPathProvider(_ value: EncryptInput) -> Swift.String? {
        return "/"
    }
}

extension GenerateDataKeyInput {

    static func urlPathProvider(_ value: GenerateDataKeyInput) -> Swift.String? {
        return "/"
    }
}

extension GenerateDataKeyPairInput {

    static func urlPathProvider(_ value: GenerateDataKeyPairInput) -> Swift.String? {
        return "/"
    }
}

extension GenerateDataKeyPairWithoutPlaintextInput {

    static func urlPathProvider(_ value: GenerateDataKeyPairWithoutPlaintextInput) -> Swift.String? {
        return "/"
    }
}

extension GenerateDataKeyWithoutPlaintextInput {

    static func urlPathProvider(_ value: GenerateDataKeyWithoutPlaintextInput) -> Swift.String? {
        return "/"
    }
}

extension GenerateMacInput {

    static func urlPathProvider(_ value: GenerateMacInput) -> Swift.String? {
        return "/"
    }
}

extension GenerateRandomInput {

    static func urlPathProvider(_ value: GenerateRandomInput) -> Swift.String? {
        return "/"
    }
}

extension GetKeyPolicyInput {

    static func urlPathProvider(_ value: GetKeyPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension GetKeyRotationStatusInput {

    static func urlPathProvider(_ value: GetKeyRotationStatusInput) -> Swift.String? {
        return "/"
    }
}

extension GetParametersForImportInput {

    static func urlPathProvider(_ value: GetParametersForImportInput) -> Swift.String? {
        return "/"
    }
}

extension GetPublicKeyInput {

    static func urlPathProvider(_ value: GetPublicKeyInput) -> Swift.String? {
        return "/"
    }
}

extension ImportKeyMaterialInput {

    static func urlPathProvider(_ value: ImportKeyMaterialInput) -> Swift.String? {
        return "/"
    }
}

extension ListAliasesInput {

    static func urlPathProvider(_ value: ListAliasesInput) -> Swift.String? {
        return "/"
    }
}

extension ListGrantsInput {

    static func urlPathProvider(_ value: ListGrantsInput) -> Swift.String? {
        return "/"
    }
}

extension ListKeyPoliciesInput {

    static func urlPathProvider(_ value: ListKeyPoliciesInput) -> Swift.String? {
        return "/"
    }
}

extension ListKeyRotationsInput {

    static func urlPathProvider(_ value: ListKeyRotationsInput) -> Swift.String? {
        return "/"
    }
}

extension ListKeysInput {

    static func urlPathProvider(_ value: ListKeysInput) -> Swift.String? {
        return "/"
    }
}

extension ListResourceTagsInput {

    static func urlPathProvider(_ value: ListResourceTagsInput) -> Swift.String? {
        return "/"
    }
}

extension ListRetirableGrantsInput {

    static func urlPathProvider(_ value: ListRetirableGrantsInput) -> Swift.String? {
        return "/"
    }
}

extension PutKeyPolicyInput {

    static func urlPathProvider(_ value: PutKeyPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension ReEncryptInput {

    static func urlPathProvider(_ value: ReEncryptInput) -> Swift.String? {
        return "/"
    }
}

extension ReplicateKeyInput {

    static func urlPathProvider(_ value: ReplicateKeyInput) -> Swift.String? {
        return "/"
    }
}

extension RetireGrantInput {

    static func urlPathProvider(_ value: RetireGrantInput) -> Swift.String? {
        return "/"
    }
}

extension RevokeGrantInput {

    static func urlPathProvider(_ value: RevokeGrantInput) -> Swift.String? {
        return "/"
    }
}

extension RotateKeyOnDemandInput {

    static func urlPathProvider(_ value: RotateKeyOnDemandInput) -> Swift.String? {
        return "/"
    }
}

extension ScheduleKeyDeletionInput {

    static func urlPathProvider(_ value: ScheduleKeyDeletionInput) -> Swift.String? {
        return "/"
    }
}

extension SignInput {

    static func urlPathProvider(_ value: SignInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateAliasInput {

    static func urlPathProvider(_ value: UpdateAliasInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateCustomKeyStoreInput {

    static func urlPathProvider(_ value: UpdateCustomKeyStoreInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateKeyDescriptionInput {

    static func urlPathProvider(_ value: UpdateKeyDescriptionInput) -> Swift.String? {
        return "/"
    }
}

extension UpdatePrimaryRegionInput {

    static func urlPathProvider(_ value: UpdatePrimaryRegionInput) -> Swift.String? {
        return "/"
    }
}

extension VerifyInput {

    static func urlPathProvider(_ value: VerifyInput) -> Swift.String? {
        return "/"
    }
}

extension VerifyMacInput {

    static func urlPathProvider(_ value: VerifyMacInput) -> Swift.String? {
        return "/"
    }
}

extension CancelKeyDeletionInput {

    static func write(value: CancelKeyDeletionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyId"].write(value.keyId)
    }
}

extension ConnectCustomKeyStoreInput {

    static func write(value: ConnectCustomKeyStoreInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomKeyStoreId"].write(value.customKeyStoreId)
    }
}

extension CreateAliasInput {

    static func write(value: CreateAliasInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AliasName"].write(value.aliasName)
        try writer["TargetKeyId"].write(value.targetKeyId)
    }
}

extension CreateCustomKeyStoreInput {

    static func write(value: CreateCustomKeyStoreInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CloudHsmClusterId"].write(value.cloudHsmClusterId)
        try writer["CustomKeyStoreName"].write(value.customKeyStoreName)
        try writer["CustomKeyStoreType"].write(value.customKeyStoreType)
        try writer["KeyStorePassword"].write(value.keyStorePassword)
        try writer["TrustAnchorCertificate"].write(value.trustAnchorCertificate)
        try writer["XksProxyAuthenticationCredential"].write(value.xksProxyAuthenticationCredential, with: KMSClientTypes.XksProxyAuthenticationCredentialType.write(value:to:))
        try writer["XksProxyConnectivity"].write(value.xksProxyConnectivity)
        try writer["XksProxyUriEndpoint"].write(value.xksProxyUriEndpoint)
        try writer["XksProxyUriPath"].write(value.xksProxyUriPath)
        try writer["XksProxyVpcEndpointServiceName"].write(value.xksProxyVpcEndpointServiceName)
    }
}

extension CreateGrantInput {

    static func write(value: CreateGrantInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Constraints"].write(value.constraints, with: KMSClientTypes.GrantConstraints.write(value:to:))
        try writer["DryRun"].write(value.dryRun)
        try writer["GrantTokens"].writeList(value.grantTokens, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["GranteePrincipal"].write(value.granteePrincipal)
        try writer["KeyId"].write(value.keyId)
        try writer["Name"].write(value.name)
        try writer["Operations"].writeList(value.operations, memberWritingClosure: SmithyReadWrite.WritingClosureBox<KMSClientTypes.GrantOperation>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["RetiringPrincipal"].write(value.retiringPrincipal)
    }
}

extension CreateKeyInput {

    static func write(value: CreateKeyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BypassPolicyLockoutSafetyCheck"].write(value.bypassPolicyLockoutSafetyCheck)
        try writer["CustomKeyStoreId"].write(value.customKeyStoreId)
        try writer["CustomerMasterKeySpec"].write(value.customerMasterKeySpec)
        try writer["Description"].write(value.description)
        try writer["KeySpec"].write(value.keySpec)
        try writer["KeyUsage"].write(value.keyUsage)
        try writer["MultiRegion"].write(value.multiRegion)
        try writer["Origin"].write(value.origin)
        try writer["Policy"].write(value.policy)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: KMSClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["XksKeyId"].write(value.xksKeyId)
    }
}

extension DecryptInput {

    static func write(value: DecryptInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CiphertextBlob"].write(value.ciphertextBlob)
        try writer["DryRun"].write(value.dryRun)
        try writer["EncryptionAlgorithm"].write(value.encryptionAlgorithm)
        try writer["EncryptionContext"].writeMap(value.encryptionContext, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["GrantTokens"].writeList(value.grantTokens, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KeyId"].write(value.keyId)
        try writer["Recipient"].write(value.recipient, with: KMSClientTypes.RecipientInfo.write(value:to:))
    }
}

extension DeleteAliasInput {

    static func write(value: DeleteAliasInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AliasName"].write(value.aliasName)
    }
}

extension DeleteCustomKeyStoreInput {

    static func write(value: DeleteCustomKeyStoreInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomKeyStoreId"].write(value.customKeyStoreId)
    }
}

extension DeleteImportedKeyMaterialInput {

    static func write(value: DeleteImportedKeyMaterialInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyId"].write(value.keyId)
    }
}

extension DeriveSharedSecretInput {

    static func write(value: DeriveSharedSecretInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DryRun"].write(value.dryRun)
        try writer["GrantTokens"].writeList(value.grantTokens, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KeyAgreementAlgorithm"].write(value.keyAgreementAlgorithm)
        try writer["KeyId"].write(value.keyId)
        try writer["PublicKey"].write(value.publicKey)
        try writer["Recipient"].write(value.recipient, with: KMSClientTypes.RecipientInfo.write(value:to:))
    }
}

extension DescribeCustomKeyStoresInput {

    static func write(value: DescribeCustomKeyStoresInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomKeyStoreId"].write(value.customKeyStoreId)
        try writer["CustomKeyStoreName"].write(value.customKeyStoreName)
        try writer["Limit"].write(value.limit)
        try writer["Marker"].write(value.marker)
    }
}

extension DescribeKeyInput {

    static func write(value: DescribeKeyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GrantTokens"].writeList(value.grantTokens, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KeyId"].write(value.keyId)
    }
}

extension DisableKeyInput {

    static func write(value: DisableKeyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyId"].write(value.keyId)
    }
}

extension DisableKeyRotationInput {

    static func write(value: DisableKeyRotationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyId"].write(value.keyId)
    }
}

extension DisconnectCustomKeyStoreInput {

    static func write(value: DisconnectCustomKeyStoreInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomKeyStoreId"].write(value.customKeyStoreId)
    }
}

extension EnableKeyInput {

    static func write(value: EnableKeyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyId"].write(value.keyId)
    }
}

extension EnableKeyRotationInput {

    static func write(value: EnableKeyRotationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyId"].write(value.keyId)
        try writer["RotationPeriodInDays"].write(value.rotationPeriodInDays)
    }
}

extension EncryptInput {

    static func write(value: EncryptInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DryRun"].write(value.dryRun)
        try writer["EncryptionAlgorithm"].write(value.encryptionAlgorithm)
        try writer["EncryptionContext"].writeMap(value.encryptionContext, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["GrantTokens"].writeList(value.grantTokens, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KeyId"].write(value.keyId)
        try writer["Plaintext"].write(value.plaintext)
    }
}

extension GenerateDataKeyInput {

    static func write(value: GenerateDataKeyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DryRun"].write(value.dryRun)
        try writer["EncryptionContext"].writeMap(value.encryptionContext, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["GrantTokens"].writeList(value.grantTokens, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KeyId"].write(value.keyId)
        try writer["KeySpec"].write(value.keySpec)
        try writer["NumberOfBytes"].write(value.numberOfBytes)
        try writer["Recipient"].write(value.recipient, with: KMSClientTypes.RecipientInfo.write(value:to:))
    }
}

extension GenerateDataKeyPairInput {

    static func write(value: GenerateDataKeyPairInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DryRun"].write(value.dryRun)
        try writer["EncryptionContext"].writeMap(value.encryptionContext, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["GrantTokens"].writeList(value.grantTokens, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KeyId"].write(value.keyId)
        try writer["KeyPairSpec"].write(value.keyPairSpec)
        try writer["Recipient"].write(value.recipient, with: KMSClientTypes.RecipientInfo.write(value:to:))
    }
}

extension GenerateDataKeyPairWithoutPlaintextInput {

    static func write(value: GenerateDataKeyPairWithoutPlaintextInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DryRun"].write(value.dryRun)
        try writer["EncryptionContext"].writeMap(value.encryptionContext, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["GrantTokens"].writeList(value.grantTokens, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KeyId"].write(value.keyId)
        try writer["KeyPairSpec"].write(value.keyPairSpec)
    }
}

extension GenerateDataKeyWithoutPlaintextInput {

    static func write(value: GenerateDataKeyWithoutPlaintextInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DryRun"].write(value.dryRun)
        try writer["EncryptionContext"].writeMap(value.encryptionContext, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["GrantTokens"].writeList(value.grantTokens, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KeyId"].write(value.keyId)
        try writer["KeySpec"].write(value.keySpec)
        try writer["NumberOfBytes"].write(value.numberOfBytes)
    }
}

extension GenerateMacInput {

    static func write(value: GenerateMacInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DryRun"].write(value.dryRun)
        try writer["GrantTokens"].writeList(value.grantTokens, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KeyId"].write(value.keyId)
        try writer["MacAlgorithm"].write(value.macAlgorithm)
        try writer["Message"].write(value.message)
    }
}

extension GenerateRandomInput {

    static func write(value: GenerateRandomInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomKeyStoreId"].write(value.customKeyStoreId)
        try writer["NumberOfBytes"].write(value.numberOfBytes)
        try writer["Recipient"].write(value.recipient, with: KMSClientTypes.RecipientInfo.write(value:to:))
    }
}

extension GetKeyPolicyInput {

    static func write(value: GetKeyPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyId"].write(value.keyId)
        try writer["PolicyName"].write(value.policyName)
    }
}

extension GetKeyRotationStatusInput {

    static func write(value: GetKeyRotationStatusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyId"].write(value.keyId)
    }
}

extension GetParametersForImportInput {

    static func write(value: GetParametersForImportInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyId"].write(value.keyId)
        try writer["WrappingAlgorithm"].write(value.wrappingAlgorithm)
        try writer["WrappingKeySpec"].write(value.wrappingKeySpec)
    }
}

extension GetPublicKeyInput {

    static func write(value: GetPublicKeyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GrantTokens"].writeList(value.grantTokens, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KeyId"].write(value.keyId)
    }
}

extension ImportKeyMaterialInput {

    static func write(value: ImportKeyMaterialInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EncryptedKeyMaterial"].write(value.encryptedKeyMaterial)
        try writer["ExpirationModel"].write(value.expirationModel)
        try writer["ImportToken"].write(value.importToken)
        try writer["KeyId"].write(value.keyId)
        try writer["ValidTo"].writeTimestamp(value.validTo, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ListAliasesInput {

    static func write(value: ListAliasesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyId"].write(value.keyId)
        try writer["Limit"].write(value.limit)
        try writer["Marker"].write(value.marker)
    }
}

extension ListGrantsInput {

    static func write(value: ListGrantsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GrantId"].write(value.grantId)
        try writer["GranteePrincipal"].write(value.granteePrincipal)
        try writer["KeyId"].write(value.keyId)
        try writer["Limit"].write(value.limit)
        try writer["Marker"].write(value.marker)
    }
}

extension ListKeyPoliciesInput {

    static func write(value: ListKeyPoliciesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyId"].write(value.keyId)
        try writer["Limit"].write(value.limit)
        try writer["Marker"].write(value.marker)
    }
}

extension ListKeyRotationsInput {

    static func write(value: ListKeyRotationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyId"].write(value.keyId)
        try writer["Limit"].write(value.limit)
        try writer["Marker"].write(value.marker)
    }
}

extension ListKeysInput {

    static func write(value: ListKeysInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["Marker"].write(value.marker)
    }
}

extension ListResourceTagsInput {

    static func write(value: ListResourceTagsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyId"].write(value.keyId)
        try writer["Limit"].write(value.limit)
        try writer["Marker"].write(value.marker)
    }
}

extension ListRetirableGrantsInput {

    static func write(value: ListRetirableGrantsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["Marker"].write(value.marker)
        try writer["RetiringPrincipal"].write(value.retiringPrincipal)
    }
}

extension PutKeyPolicyInput {

    static func write(value: PutKeyPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BypassPolicyLockoutSafetyCheck"].write(value.bypassPolicyLockoutSafetyCheck)
        try writer["KeyId"].write(value.keyId)
        try writer["Policy"].write(value.policy)
        try writer["PolicyName"].write(value.policyName)
    }
}

extension ReEncryptInput {

    static func write(value: ReEncryptInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CiphertextBlob"].write(value.ciphertextBlob)
        try writer["DestinationEncryptionAlgorithm"].write(value.destinationEncryptionAlgorithm)
        try writer["DestinationEncryptionContext"].writeMap(value.destinationEncryptionContext, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["DestinationKeyId"].write(value.destinationKeyId)
        try writer["DryRun"].write(value.dryRun)
        try writer["GrantTokens"].writeList(value.grantTokens, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SourceEncryptionAlgorithm"].write(value.sourceEncryptionAlgorithm)
        try writer["SourceEncryptionContext"].writeMap(value.sourceEncryptionContext, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["SourceKeyId"].write(value.sourceKeyId)
    }
}

extension ReplicateKeyInput {

    static func write(value: ReplicateKeyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BypassPolicyLockoutSafetyCheck"].write(value.bypassPolicyLockoutSafetyCheck)
        try writer["Description"].write(value.description)
        try writer["KeyId"].write(value.keyId)
        try writer["Policy"].write(value.policy)
        try writer["ReplicaRegion"].write(value.replicaRegion)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: KMSClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension RetireGrantInput {

    static func write(value: RetireGrantInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DryRun"].write(value.dryRun)
        try writer["GrantId"].write(value.grantId)
        try writer["GrantToken"].write(value.grantToken)
        try writer["KeyId"].write(value.keyId)
    }
}

extension RevokeGrantInput {

    static func write(value: RevokeGrantInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DryRun"].write(value.dryRun)
        try writer["GrantId"].write(value.grantId)
        try writer["KeyId"].write(value.keyId)
    }
}

extension RotateKeyOnDemandInput {

    static func write(value: RotateKeyOnDemandInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyId"].write(value.keyId)
    }
}

extension ScheduleKeyDeletionInput {

    static func write(value: ScheduleKeyDeletionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyId"].write(value.keyId)
        try writer["PendingWindowInDays"].write(value.pendingWindowInDays)
    }
}

extension SignInput {

    static func write(value: SignInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DryRun"].write(value.dryRun)
        try writer["GrantTokens"].writeList(value.grantTokens, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KeyId"].write(value.keyId)
        try writer["Message"].write(value.message)
        try writer["MessageType"].write(value.messageType)
        try writer["SigningAlgorithm"].write(value.signingAlgorithm)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyId"].write(value.keyId)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: KMSClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyId"].write(value.keyId)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateAliasInput {

    static func write(value: UpdateAliasInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AliasName"].write(value.aliasName)
        try writer["TargetKeyId"].write(value.targetKeyId)
    }
}

extension UpdateCustomKeyStoreInput {

    static func write(value: UpdateCustomKeyStoreInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CloudHsmClusterId"].write(value.cloudHsmClusterId)
        try writer["CustomKeyStoreId"].write(value.customKeyStoreId)
        try writer["KeyStorePassword"].write(value.keyStorePassword)
        try writer["NewCustomKeyStoreName"].write(value.newCustomKeyStoreName)
        try writer["XksProxyAuthenticationCredential"].write(value.xksProxyAuthenticationCredential, with: KMSClientTypes.XksProxyAuthenticationCredentialType.write(value:to:))
        try writer["XksProxyConnectivity"].write(value.xksProxyConnectivity)
        try writer["XksProxyUriEndpoint"].write(value.xksProxyUriEndpoint)
        try writer["XksProxyUriPath"].write(value.xksProxyUriPath)
        try writer["XksProxyVpcEndpointServiceName"].write(value.xksProxyVpcEndpointServiceName)
    }
}

extension UpdateKeyDescriptionInput {

    static func write(value: UpdateKeyDescriptionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["KeyId"].write(value.keyId)
    }
}

extension UpdatePrimaryRegionInput {

    static func write(value: UpdatePrimaryRegionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyId"].write(value.keyId)
        try writer["PrimaryRegion"].write(value.primaryRegion)
    }
}

extension VerifyInput {

    static func write(value: VerifyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DryRun"].write(value.dryRun)
        try writer["GrantTokens"].writeList(value.grantTokens, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KeyId"].write(value.keyId)
        try writer["Message"].write(value.message)
        try writer["MessageType"].write(value.messageType)
        try writer["Signature"].write(value.signature)
        try writer["SigningAlgorithm"].write(value.signingAlgorithm)
    }
}

extension VerifyMacInput {

    static func write(value: VerifyMacInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DryRun"].write(value.dryRun)
        try writer["GrantTokens"].writeList(value.grantTokens, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KeyId"].write(value.keyId)
        try writer["Mac"].write(value.mac)
        try writer["MacAlgorithm"].write(value.macAlgorithm)
        try writer["Message"].write(value.message)
    }
}

extension CancelKeyDeletionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelKeyDeletionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CancelKeyDeletionOutput()
        value.keyId = try reader["KeyId"].readIfPresent()
        return value
    }
}

extension ConnectCustomKeyStoreOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ConnectCustomKeyStoreOutput {
        return ConnectCustomKeyStoreOutput()
    }
}

extension CreateAliasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAliasOutput {
        return CreateAliasOutput()
    }
}

extension CreateCustomKeyStoreOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCustomKeyStoreOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateCustomKeyStoreOutput()
        value.customKeyStoreId = try reader["CustomKeyStoreId"].readIfPresent()
        return value
    }
}

extension CreateGrantOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateGrantOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateGrantOutput()
        value.grantId = try reader["GrantId"].readIfPresent()
        value.grantToken = try reader["GrantToken"].readIfPresent()
        return value
    }
}

extension CreateKeyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateKeyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateKeyOutput()
        value.keyMetadata = try reader["KeyMetadata"].readIfPresent(with: KMSClientTypes.KeyMetadata.read(from:))
        return value
    }
}

extension DecryptOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DecryptOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DecryptOutput()
        value.ciphertextForRecipient = try reader["CiphertextForRecipient"].readIfPresent()
        value.encryptionAlgorithm = try reader["EncryptionAlgorithm"].readIfPresent()
        value.keyId = try reader["KeyId"].readIfPresent()
        value.plaintext = try reader["Plaintext"].readIfPresent()
        return value
    }
}

extension DeleteAliasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAliasOutput {
        return DeleteAliasOutput()
    }
}

extension DeleteCustomKeyStoreOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCustomKeyStoreOutput {
        return DeleteCustomKeyStoreOutput()
    }
}

extension DeleteImportedKeyMaterialOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteImportedKeyMaterialOutput {
        return DeleteImportedKeyMaterialOutput()
    }
}

extension DeriveSharedSecretOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeriveSharedSecretOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeriveSharedSecretOutput()
        value.ciphertextForRecipient = try reader["CiphertextForRecipient"].readIfPresent()
        value.keyAgreementAlgorithm = try reader["KeyAgreementAlgorithm"].readIfPresent()
        value.keyId = try reader["KeyId"].readIfPresent()
        value.keyOrigin = try reader["KeyOrigin"].readIfPresent()
        value.sharedSecret = try reader["SharedSecret"].readIfPresent()
        return value
    }
}

extension DescribeCustomKeyStoresOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeCustomKeyStoresOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeCustomKeyStoresOutput()
        value.customKeyStores = try reader["CustomKeyStores"].readListIfPresent(memberReadingClosure: KMSClientTypes.CustomKeyStoresListEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.truncated = try reader["Truncated"].readIfPresent() ?? false
        return value
    }
}

extension DescribeKeyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeKeyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeKeyOutput()
        value.keyMetadata = try reader["KeyMetadata"].readIfPresent(with: KMSClientTypes.KeyMetadata.read(from:))
        return value
    }
}

extension DisableKeyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisableKeyOutput {
        return DisableKeyOutput()
    }
}

extension DisableKeyRotationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisableKeyRotationOutput {
        return DisableKeyRotationOutput()
    }
}

extension DisconnectCustomKeyStoreOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisconnectCustomKeyStoreOutput {
        return DisconnectCustomKeyStoreOutput()
    }
}

extension EnableKeyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnableKeyOutput {
        return EnableKeyOutput()
    }
}

extension EnableKeyRotationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnableKeyRotationOutput {
        return EnableKeyRotationOutput()
    }
}

extension EncryptOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EncryptOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = EncryptOutput()
        value.ciphertextBlob = try reader["CiphertextBlob"].readIfPresent()
        value.encryptionAlgorithm = try reader["EncryptionAlgorithm"].readIfPresent()
        value.keyId = try reader["KeyId"].readIfPresent()
        return value
    }
}

extension GenerateDataKeyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GenerateDataKeyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GenerateDataKeyOutput()
        value.ciphertextBlob = try reader["CiphertextBlob"].readIfPresent()
        value.ciphertextForRecipient = try reader["CiphertextForRecipient"].readIfPresent()
        value.keyId = try reader["KeyId"].readIfPresent()
        value.plaintext = try reader["Plaintext"].readIfPresent()
        return value
    }
}

extension GenerateDataKeyPairOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GenerateDataKeyPairOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GenerateDataKeyPairOutput()
        value.ciphertextForRecipient = try reader["CiphertextForRecipient"].readIfPresent()
        value.keyId = try reader["KeyId"].readIfPresent()
        value.keyPairSpec = try reader["KeyPairSpec"].readIfPresent()
        value.privateKeyCiphertextBlob = try reader["PrivateKeyCiphertextBlob"].readIfPresent()
        value.privateKeyPlaintext = try reader["PrivateKeyPlaintext"].readIfPresent()
        value.publicKey = try reader["PublicKey"].readIfPresent()
        return value
    }
}

extension GenerateDataKeyPairWithoutPlaintextOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GenerateDataKeyPairWithoutPlaintextOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GenerateDataKeyPairWithoutPlaintextOutput()
        value.keyId = try reader["KeyId"].readIfPresent()
        value.keyPairSpec = try reader["KeyPairSpec"].readIfPresent()
        value.privateKeyCiphertextBlob = try reader["PrivateKeyCiphertextBlob"].readIfPresent()
        value.publicKey = try reader["PublicKey"].readIfPresent()
        return value
    }
}

extension GenerateDataKeyWithoutPlaintextOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GenerateDataKeyWithoutPlaintextOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GenerateDataKeyWithoutPlaintextOutput()
        value.ciphertextBlob = try reader["CiphertextBlob"].readIfPresent()
        value.keyId = try reader["KeyId"].readIfPresent()
        return value
    }
}

extension GenerateMacOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GenerateMacOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GenerateMacOutput()
        value.keyId = try reader["KeyId"].readIfPresent()
        value.mac = try reader["Mac"].readIfPresent()
        value.macAlgorithm = try reader["MacAlgorithm"].readIfPresent()
        return value
    }
}

extension GenerateRandomOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GenerateRandomOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GenerateRandomOutput()
        value.ciphertextForRecipient = try reader["CiphertextForRecipient"].readIfPresent()
        value.plaintext = try reader["Plaintext"].readIfPresent()
        return value
    }
}

extension GetKeyPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetKeyPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetKeyPolicyOutput()
        value.policy = try reader["Policy"].readIfPresent()
        value.policyName = try reader["PolicyName"].readIfPresent()
        return value
    }
}

extension GetKeyRotationStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetKeyRotationStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetKeyRotationStatusOutput()
        value.keyId = try reader["KeyId"].readIfPresent()
        value.keyRotationEnabled = try reader["KeyRotationEnabled"].readIfPresent() ?? false
        value.nextRotationDate = try reader["NextRotationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.onDemandRotationStartDate = try reader["OnDemandRotationStartDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.rotationPeriodInDays = try reader["RotationPeriodInDays"].readIfPresent()
        return value
    }
}

extension GetParametersForImportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetParametersForImportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetParametersForImportOutput()
        value.importToken = try reader["ImportToken"].readIfPresent()
        value.keyId = try reader["KeyId"].readIfPresent()
        value.parametersValidTo = try reader["ParametersValidTo"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.publicKey = try reader["PublicKey"].readIfPresent()
        return value
    }
}

extension GetPublicKeyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPublicKeyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetPublicKeyOutput()
        value.customerMasterKeySpec = try reader["CustomerMasterKeySpec"].readIfPresent()
        value.encryptionAlgorithms = try reader["EncryptionAlgorithms"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<KMSClientTypes.EncryptionAlgorithmSpec>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.keyAgreementAlgorithms = try reader["KeyAgreementAlgorithms"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<KMSClientTypes.KeyAgreementAlgorithmSpec>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.keyId = try reader["KeyId"].readIfPresent()
        value.keySpec = try reader["KeySpec"].readIfPresent()
        value.keyUsage = try reader["KeyUsage"].readIfPresent()
        value.publicKey = try reader["PublicKey"].readIfPresent()
        value.signingAlgorithms = try reader["SigningAlgorithms"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<KMSClientTypes.SigningAlgorithmSpec>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ImportKeyMaterialOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ImportKeyMaterialOutput {
        return ImportKeyMaterialOutput()
    }
}

extension ListAliasesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAliasesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAliasesOutput()
        value.aliases = try reader["Aliases"].readListIfPresent(memberReadingClosure: KMSClientTypes.AliasListEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.truncated = try reader["Truncated"].readIfPresent() ?? false
        return value
    }
}

extension ListGrantsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListGrantsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListGrantsOutput()
        value.grants = try reader["Grants"].readListIfPresent(memberReadingClosure: KMSClientTypes.GrantListEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.truncated = try reader["Truncated"].readIfPresent() ?? false
        return value
    }
}

extension ListKeyPoliciesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListKeyPoliciesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListKeyPoliciesOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.policyNames = try reader["PolicyNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.truncated = try reader["Truncated"].readIfPresent() ?? false
        return value
    }
}

extension ListKeyRotationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListKeyRotationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListKeyRotationsOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.rotations = try reader["Rotations"].readListIfPresent(memberReadingClosure: KMSClientTypes.RotationsListEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.truncated = try reader["Truncated"].readIfPresent() ?? false
        return value
    }
}

extension ListKeysOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListKeysOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListKeysOutput()
        value.keys = try reader["Keys"].readListIfPresent(memberReadingClosure: KMSClientTypes.KeyListEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.truncated = try reader["Truncated"].readIfPresent() ?? false
        return value
    }
}

extension ListResourceTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListResourceTagsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListResourceTagsOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: KMSClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.truncated = try reader["Truncated"].readIfPresent() ?? false
        return value
    }
}

extension ListRetirableGrantsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRetirableGrantsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRetirableGrantsOutput()
        value.grants = try reader["Grants"].readListIfPresent(memberReadingClosure: KMSClientTypes.GrantListEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.truncated = try reader["Truncated"].readIfPresent() ?? false
        return value
    }
}

extension PutKeyPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutKeyPolicyOutput {
        return PutKeyPolicyOutput()
    }
}

extension ReEncryptOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ReEncryptOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ReEncryptOutput()
        value.ciphertextBlob = try reader["CiphertextBlob"].readIfPresent()
        value.destinationEncryptionAlgorithm = try reader["DestinationEncryptionAlgorithm"].readIfPresent()
        value.keyId = try reader["KeyId"].readIfPresent()
        value.sourceEncryptionAlgorithm = try reader["SourceEncryptionAlgorithm"].readIfPresent()
        value.sourceKeyId = try reader["SourceKeyId"].readIfPresent()
        return value
    }
}

extension ReplicateKeyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ReplicateKeyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ReplicateKeyOutput()
        value.replicaKeyMetadata = try reader["ReplicaKeyMetadata"].readIfPresent(with: KMSClientTypes.KeyMetadata.read(from:))
        value.replicaPolicy = try reader["ReplicaPolicy"].readIfPresent()
        value.replicaTags = try reader["ReplicaTags"].readListIfPresent(memberReadingClosure: KMSClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RetireGrantOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RetireGrantOutput {
        return RetireGrantOutput()
    }
}

extension RevokeGrantOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RevokeGrantOutput {
        return RevokeGrantOutput()
    }
}

extension RotateKeyOnDemandOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RotateKeyOnDemandOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RotateKeyOnDemandOutput()
        value.keyId = try reader["KeyId"].readIfPresent()
        return value
    }
}

extension ScheduleKeyDeletionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ScheduleKeyDeletionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ScheduleKeyDeletionOutput()
        value.deletionDate = try reader["DeletionDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.keyId = try reader["KeyId"].readIfPresent()
        value.keyState = try reader["KeyState"].readIfPresent()
        value.pendingWindowInDays = try reader["PendingWindowInDays"].readIfPresent()
        return value
    }
}

extension SignOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SignOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SignOutput()
        value.keyId = try reader["KeyId"].readIfPresent()
        value.signature = try reader["Signature"].readIfPresent()
        value.signingAlgorithm = try reader["SigningAlgorithm"].readIfPresent()
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateAliasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAliasOutput {
        return UpdateAliasOutput()
    }
}

extension UpdateCustomKeyStoreOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateCustomKeyStoreOutput {
        return UpdateCustomKeyStoreOutput()
    }
}

extension UpdateKeyDescriptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateKeyDescriptionOutput {
        return UpdateKeyDescriptionOutput()
    }
}

extension UpdatePrimaryRegionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdatePrimaryRegionOutput {
        return UpdatePrimaryRegionOutput()
    }
}

extension VerifyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> VerifyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = VerifyOutput()
        value.keyId = try reader["KeyId"].readIfPresent()
        value.signatureValid = try reader["SignatureValid"].readIfPresent() ?? false
        value.signingAlgorithm = try reader["SigningAlgorithm"].readIfPresent()
        return value
    }
}

extension VerifyMacOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> VerifyMacOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = VerifyMacOutput()
        value.keyId = try reader["KeyId"].readIfPresent()
        value.macAlgorithm = try reader["MacAlgorithm"].readIfPresent()
        value.macValid = try reader["MacValid"].readIfPresent() ?? false
        return value
    }
}

enum CancelKeyDeletionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ConnectCustomKeyStoreOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmClusterInvalidConfigurationException": return try CloudHsmClusterInvalidConfigurationException.makeError(baseError: baseError)
            case "CloudHsmClusterNotActiveException": return try CloudHsmClusterNotActiveException.makeError(baseError: baseError)
            case "CustomKeyStoreInvalidStateException": return try CustomKeyStoreInvalidStateException.makeError(baseError: baseError)
            case "CustomKeyStoreNotFoundException": return try CustomKeyStoreNotFoundException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAliasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExists": return try AlreadyExistsException.makeError(baseError: baseError)
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "InvalidAliasName": return try InvalidAliasNameException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "LimitExceeded": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateCustomKeyStoreOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmClusterInUseException": return try CloudHsmClusterInUseException.makeError(baseError: baseError)
            case "CloudHsmClusterInvalidConfigurationException": return try CloudHsmClusterInvalidConfigurationException.makeError(baseError: baseError)
            case "CloudHsmClusterNotActiveException": return try CloudHsmClusterNotActiveException.makeError(baseError: baseError)
            case "CloudHsmClusterNotFoundException": return try CloudHsmClusterNotFoundException.makeError(baseError: baseError)
            case "CustomKeyStoreNameInUseException": return try CustomKeyStoreNameInUseException.makeError(baseError: baseError)
            case "IncorrectTrustAnchorException": return try IncorrectTrustAnchorException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "LimitExceeded": return try LimitExceededException.makeError(baseError: baseError)
            case "XksProxyIncorrectAuthenticationCredentialException": return try XksProxyIncorrectAuthenticationCredentialException.makeError(baseError: baseError)
            case "XksProxyInvalidConfigurationException": return try XksProxyInvalidConfigurationException.makeError(baseError: baseError)
            case "XksProxyInvalidResponseException": return try XksProxyInvalidResponseException.makeError(baseError: baseError)
            case "XksProxyUriEndpointInUseException": return try XksProxyUriEndpointInUseException.makeError(baseError: baseError)
            case "XksProxyUriInUseException": return try XksProxyUriInUseException.makeError(baseError: baseError)
            case "XksProxyUriUnreachableException": return try XksProxyUriUnreachableException.makeError(baseError: baseError)
            case "XksProxyVpcEndpointServiceInUseException": return try XksProxyVpcEndpointServiceInUseException.makeError(baseError: baseError)
            case "XksProxyVpcEndpointServiceInvalidConfigurationException": return try XksProxyVpcEndpointServiceInvalidConfigurationException.makeError(baseError: baseError)
            case "XksProxyVpcEndpointServiceNotFoundException": return try XksProxyVpcEndpointServiceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateGrantOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "Disabled": return try DisabledException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperationException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidGrantToken": return try InvalidGrantTokenException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "LimitExceeded": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateKeyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmClusterInvalidConfigurationException": return try CloudHsmClusterInvalidConfigurationException.makeError(baseError: baseError)
            case "CustomKeyStoreInvalidStateException": return try CustomKeyStoreInvalidStateException.makeError(baseError: baseError)
            case "CustomKeyStoreNotFoundException": return try CustomKeyStoreNotFoundException.makeError(baseError: baseError)
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "LimitExceeded": return try LimitExceededException.makeError(baseError: baseError)
            case "MalformedPolicyDocument": return try MalformedPolicyDocumentException.makeError(baseError: baseError)
            case "TagException": return try TagException.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationException.makeError(baseError: baseError)
            case "XksKeyAlreadyInUse": return try XksKeyAlreadyInUseException.makeError(baseError: baseError)
            case "XksKeyInvalidConfiguration": return try XksKeyInvalidConfigurationException.makeError(baseError: baseError)
            case "XksKeyNotFoundException": return try XksKeyNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DecryptOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "Disabled": return try DisabledException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperationException.makeError(baseError: baseError)
            case "IncorrectKeyException": return try IncorrectKeyException.makeError(baseError: baseError)
            case "InvalidCiphertext": return try InvalidCiphertextException.makeError(baseError: baseError)
            case "InvalidGrantToken": return try InvalidGrantTokenException.makeError(baseError: baseError)
            case "InvalidKeyUsage": return try InvalidKeyUsageException.makeError(baseError: baseError)
            case "KeyUnavailable": return try KeyUnavailableException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAliasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCustomKeyStoreOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CustomKeyStoreHasCMKsException": return try CustomKeyStoreHasCMKsException.makeError(baseError: baseError)
            case "CustomKeyStoreInvalidStateException": return try CustomKeyStoreInvalidStateException.makeError(baseError: baseError)
            case "CustomKeyStoreNotFoundException": return try CustomKeyStoreNotFoundException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteImportedKeyMaterialOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeriveSharedSecretOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "Disabled": return try DisabledException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperationException.makeError(baseError: baseError)
            case "InvalidGrantToken": return try InvalidGrantTokenException.makeError(baseError: baseError)
            case "InvalidKeyUsage": return try InvalidKeyUsageException.makeError(baseError: baseError)
            case "KeyUnavailable": return try KeyUnavailableException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeCustomKeyStoresOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CustomKeyStoreNotFoundException": return try CustomKeyStoreNotFoundException.makeError(baseError: baseError)
            case "InvalidMarker": return try InvalidMarkerException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeKeyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisableKeyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisableKeyRotationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "Disabled": return try DisabledException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisconnectCustomKeyStoreOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CustomKeyStoreInvalidStateException": return try CustomKeyStoreInvalidStateException.makeError(baseError: baseError)
            case "CustomKeyStoreNotFoundException": return try CustomKeyStoreNotFoundException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnableKeyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "LimitExceeded": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnableKeyRotationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "Disabled": return try DisabledException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EncryptOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "Disabled": return try DisabledException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperationException.makeError(baseError: baseError)
            case "InvalidGrantToken": return try InvalidGrantTokenException.makeError(baseError: baseError)
            case "InvalidKeyUsage": return try InvalidKeyUsageException.makeError(baseError: baseError)
            case "KeyUnavailable": return try KeyUnavailableException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GenerateDataKeyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "Disabled": return try DisabledException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperationException.makeError(baseError: baseError)
            case "InvalidGrantToken": return try InvalidGrantTokenException.makeError(baseError: baseError)
            case "InvalidKeyUsage": return try InvalidKeyUsageException.makeError(baseError: baseError)
            case "KeyUnavailable": return try KeyUnavailableException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GenerateDataKeyPairOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "Disabled": return try DisabledException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperationException.makeError(baseError: baseError)
            case "InvalidGrantToken": return try InvalidGrantTokenException.makeError(baseError: baseError)
            case "InvalidKeyUsage": return try InvalidKeyUsageException.makeError(baseError: baseError)
            case "KeyUnavailable": return try KeyUnavailableException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GenerateDataKeyPairWithoutPlaintextOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "Disabled": return try DisabledException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperationException.makeError(baseError: baseError)
            case "InvalidGrantToken": return try InvalidGrantTokenException.makeError(baseError: baseError)
            case "InvalidKeyUsage": return try InvalidKeyUsageException.makeError(baseError: baseError)
            case "KeyUnavailable": return try KeyUnavailableException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GenerateDataKeyWithoutPlaintextOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "Disabled": return try DisabledException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperationException.makeError(baseError: baseError)
            case "InvalidGrantToken": return try InvalidGrantTokenException.makeError(baseError: baseError)
            case "InvalidKeyUsage": return try InvalidKeyUsageException.makeError(baseError: baseError)
            case "KeyUnavailable": return try KeyUnavailableException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GenerateMacOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "Disabled": return try DisabledException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperationException.makeError(baseError: baseError)
            case "InvalidGrantToken": return try InvalidGrantTokenException.makeError(baseError: baseError)
            case "InvalidKeyUsage": return try InvalidKeyUsageException.makeError(baseError: baseError)
            case "KeyUnavailable": return try KeyUnavailableException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GenerateRandomOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CustomKeyStoreInvalidStateException": return try CustomKeyStoreInvalidStateException.makeError(baseError: baseError)
            case "CustomKeyStoreNotFoundException": return try CustomKeyStoreNotFoundException.makeError(baseError: baseError)
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetKeyPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetKeyRotationStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetParametersForImportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPublicKeyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "Disabled": return try DisabledException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidGrantToken": return try InvalidGrantTokenException.makeError(baseError: baseError)
            case "InvalidKeyUsage": return try InvalidKeyUsageException.makeError(baseError: baseError)
            case "KeyUnavailable": return try KeyUnavailableException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ImportKeyMaterialOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "ExpiredImportTokenException": return try ExpiredImportTokenException.makeError(baseError: baseError)
            case "IncorrectKeyMaterialException": return try IncorrectKeyMaterialException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidCiphertext": return try InvalidCiphertextException.makeError(baseError: baseError)
            case "InvalidImportTokenException": return try InvalidImportTokenException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAliasesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidMarker": return try InvalidMarkerException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListGrantsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidGrantId": return try InvalidGrantIdException.makeError(baseError: baseError)
            case "InvalidMarker": return try InvalidMarkerException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListKeyPoliciesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListKeyRotationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidMarker": return try InvalidMarkerException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListKeysOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "InvalidMarker": return try InvalidMarkerException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListResourceTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidMarker": return try InvalidMarkerException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRetirableGrantsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidMarker": return try InvalidMarkerException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutKeyPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "LimitExceeded": return try LimitExceededException.makeError(baseError: baseError)
            case "MalformedPolicyDocument": return try MalformedPolicyDocumentException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ReEncryptOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "Disabled": return try DisabledException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperationException.makeError(baseError: baseError)
            case "IncorrectKeyException": return try IncorrectKeyException.makeError(baseError: baseError)
            case "InvalidCiphertext": return try InvalidCiphertextException.makeError(baseError: baseError)
            case "InvalidGrantToken": return try InvalidGrantTokenException.makeError(baseError: baseError)
            case "InvalidKeyUsage": return try InvalidKeyUsageException.makeError(baseError: baseError)
            case "KeyUnavailable": return try KeyUnavailableException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ReplicateKeyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExists": return try AlreadyExistsException.makeError(baseError: baseError)
            case "Disabled": return try DisabledException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "LimitExceeded": return try LimitExceededException.makeError(baseError: baseError)
            case "MalformedPolicyDocument": return try MalformedPolicyDocumentException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            case "TagException": return try TagException.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RetireGrantOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperationException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidGrantId": return try InvalidGrantIdException.makeError(baseError: baseError)
            case "InvalidGrantToken": return try InvalidGrantTokenException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RevokeGrantOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperationException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidGrantId": return try InvalidGrantIdException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RotateKeyOnDemandOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "Disabled": return try DisabledException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "LimitExceeded": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ScheduleKeyDeletionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SignOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "Disabled": return try DisabledException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperationException.makeError(baseError: baseError)
            case "InvalidGrantToken": return try InvalidGrantTokenException.makeError(baseError: baseError)
            case "InvalidKeyUsage": return try InvalidKeyUsageException.makeError(baseError: baseError)
            case "KeyUnavailable": return try KeyUnavailableException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "LimitExceeded": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            case "TagException": return try TagException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            case "TagException": return try TagException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAliasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "LimitExceeded": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateCustomKeyStoreOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CloudHsmClusterInvalidConfigurationException": return try CloudHsmClusterInvalidConfigurationException.makeError(baseError: baseError)
            case "CloudHsmClusterNotActiveException": return try CloudHsmClusterNotActiveException.makeError(baseError: baseError)
            case "CloudHsmClusterNotFoundException": return try CloudHsmClusterNotFoundException.makeError(baseError: baseError)
            case "CloudHsmClusterNotRelatedException": return try CloudHsmClusterNotRelatedException.makeError(baseError: baseError)
            case "CustomKeyStoreInvalidStateException": return try CustomKeyStoreInvalidStateException.makeError(baseError: baseError)
            case "CustomKeyStoreNameInUseException": return try CustomKeyStoreNameInUseException.makeError(baseError: baseError)
            case "CustomKeyStoreNotFoundException": return try CustomKeyStoreNotFoundException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "XksProxyIncorrectAuthenticationCredentialException": return try XksProxyIncorrectAuthenticationCredentialException.makeError(baseError: baseError)
            case "XksProxyInvalidConfigurationException": return try XksProxyInvalidConfigurationException.makeError(baseError: baseError)
            case "XksProxyInvalidResponseException": return try XksProxyInvalidResponseException.makeError(baseError: baseError)
            case "XksProxyUriEndpointInUseException": return try XksProxyUriEndpointInUseException.makeError(baseError: baseError)
            case "XksProxyUriInUseException": return try XksProxyUriInUseException.makeError(baseError: baseError)
            case "XksProxyUriUnreachableException": return try XksProxyUriUnreachableException.makeError(baseError: baseError)
            case "XksProxyVpcEndpointServiceInUseException": return try XksProxyVpcEndpointServiceInUseException.makeError(baseError: baseError)
            case "XksProxyVpcEndpointServiceInvalidConfigurationException": return try XksProxyVpcEndpointServiceInvalidConfigurationException.makeError(baseError: baseError)
            case "XksProxyVpcEndpointServiceNotFoundException": return try XksProxyVpcEndpointServiceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateKeyDescriptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdatePrimaryRegionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "Disabled": return try DisabledException.makeError(baseError: baseError)
            case "InvalidArn": return try InvalidArnException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum VerifyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependencyTimeout": return try DependencyTimeoutException.makeError(baseError: baseError)
            case "Disabled": return try DisabledException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperationException.makeError(baseError: baseError)
            case "InvalidGrantToken": return try InvalidGrantTokenException.makeError(baseError: baseError)
            case "InvalidKeyUsage": return try InvalidKeyUsageException.makeError(baseError: baseError)
            case "KeyUnavailable": return try KeyUnavailableException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidSignature": return try KMSInvalidSignatureException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum VerifyMacOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "Disabled": return try DisabledException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperationException.makeError(baseError: baseError)
            case "InvalidGrantToken": return try InvalidGrantTokenException.makeError(baseError: baseError)
            case "InvalidKeyUsage": return try InvalidKeyUsageException.makeError(baseError: baseError)
            case "KeyUnavailable": return try KeyUnavailableException.makeError(baseError: baseError)
            case "KMSInternal": return try KMSInternalException.makeError(baseError: baseError)
            case "KMSInvalidMac": return try KMSInvalidMacException.makeError(baseError: baseError)
            case "KMSInvalidStateException": return try KMSInvalidStateException.makeError(baseError: baseError)
            case "NotFound": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension NotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> NotFoundException {
        let reader = baseError.errorBodyReader
        var value = NotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidArnException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidArnException {
        let reader = baseError.errorBodyReader
        var value = InvalidArnException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KMSInternalException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> KMSInternalException {
        let reader = baseError.errorBodyReader
        var value = KMSInternalException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KMSInvalidStateException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> KMSInvalidStateException {
        let reader = baseError.errorBodyReader
        var value = KMSInvalidStateException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DependencyTimeoutException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DependencyTimeoutException {
        let reader = baseError.errorBodyReader
        var value = DependencyTimeoutException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CloudHsmClusterInvalidConfigurationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> CloudHsmClusterInvalidConfigurationException {
        let reader = baseError.errorBodyReader
        var value = CloudHsmClusterInvalidConfigurationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CloudHsmClusterNotActiveException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> CloudHsmClusterNotActiveException {
        let reader = baseError.errorBodyReader
        var value = CloudHsmClusterNotActiveException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CustomKeyStoreInvalidStateException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> CustomKeyStoreInvalidStateException {
        let reader = baseError.errorBodyReader
        var value = CustomKeyStoreInvalidStateException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CustomKeyStoreNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> CustomKeyStoreNotFoundException {
        let reader = baseError.errorBodyReader
        var value = CustomKeyStoreNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidAliasNameException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidAliasNameException {
        let reader = baseError.errorBodyReader
        var value = InvalidAliasNameException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AlreadyExistsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AlreadyExistsException {
        let reader = baseError.errorBodyReader
        var value = AlreadyExistsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension XksProxyIncorrectAuthenticationCredentialException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> XksProxyIncorrectAuthenticationCredentialException {
        let reader = baseError.errorBodyReader
        var value = XksProxyIncorrectAuthenticationCredentialException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension XksProxyVpcEndpointServiceInvalidConfigurationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> XksProxyVpcEndpointServiceInvalidConfigurationException {
        let reader = baseError.errorBodyReader
        var value = XksProxyVpcEndpointServiceInvalidConfigurationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CustomKeyStoreNameInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> CustomKeyStoreNameInUseException {
        let reader = baseError.errorBodyReader
        var value = CustomKeyStoreNameInUseException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CloudHsmClusterInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> CloudHsmClusterInUseException {
        let reader = baseError.errorBodyReader
        var value = CloudHsmClusterInUseException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CloudHsmClusterNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> CloudHsmClusterNotFoundException {
        let reader = baseError.errorBodyReader
        var value = CloudHsmClusterNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension XksProxyVpcEndpointServiceInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> XksProxyVpcEndpointServiceInUseException {
        let reader = baseError.errorBodyReader
        var value = XksProxyVpcEndpointServiceInUseException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IncorrectTrustAnchorException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> IncorrectTrustAnchorException {
        let reader = baseError.errorBodyReader
        var value = IncorrectTrustAnchorException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension XksProxyInvalidResponseException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> XksProxyInvalidResponseException {
        let reader = baseError.errorBodyReader
        var value = XksProxyInvalidResponseException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension XksProxyInvalidConfigurationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> XksProxyInvalidConfigurationException {
        let reader = baseError.errorBodyReader
        var value = XksProxyInvalidConfigurationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension XksProxyUriUnreachableException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> XksProxyUriUnreachableException {
        let reader = baseError.errorBodyReader
        var value = XksProxyUriUnreachableException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension XksProxyUriInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> XksProxyUriInUseException {
        let reader = baseError.errorBodyReader
        var value = XksProxyUriInUseException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension XksProxyVpcEndpointServiceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> XksProxyVpcEndpointServiceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = XksProxyVpcEndpointServiceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension XksProxyUriEndpointInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> XksProxyUriEndpointInUseException {
        let reader = baseError.errorBodyReader
        var value = XksProxyUriEndpointInUseException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DryRunOperationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DryRunOperationException {
        let reader = baseError.errorBodyReader
        var value = DryRunOperationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DisabledException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DisabledException {
        let reader = baseError.errorBodyReader
        var value = DisabledException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidGrantTokenException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidGrantTokenException {
        let reader = baseError.errorBodyReader
        var value = InvalidGrantTokenException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnsupportedOperationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnsupportedOperationException {
        let reader = baseError.errorBodyReader
        var value = UnsupportedOperationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MalformedPolicyDocumentException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> MalformedPolicyDocumentException {
        let reader = baseError.errorBodyReader
        var value = MalformedPolicyDocumentException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TagException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TagException {
        let reader = baseError.errorBodyReader
        var value = TagException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension XksKeyNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> XksKeyNotFoundException {
        let reader = baseError.errorBodyReader
        var value = XksKeyNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension XksKeyAlreadyInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> XksKeyAlreadyInUseException {
        let reader = baseError.errorBodyReader
        var value = XksKeyAlreadyInUseException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension XksKeyInvalidConfigurationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> XksKeyInvalidConfigurationException {
        let reader = baseError.errorBodyReader
        var value = XksKeyInvalidConfigurationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidKeyUsageException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidKeyUsageException {
        let reader = baseError.errorBodyReader
        var value = InvalidKeyUsageException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KeyUnavailableException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> KeyUnavailableException {
        let reader = baseError.errorBodyReader
        var value = KeyUnavailableException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidCiphertextException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidCiphertextException {
        let reader = baseError.errorBodyReader
        var value = InvalidCiphertextException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IncorrectKeyException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> IncorrectKeyException {
        let reader = baseError.errorBodyReader
        var value = IncorrectKeyException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CustomKeyStoreHasCMKsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> CustomKeyStoreHasCMKsException {
        let reader = baseError.errorBodyReader
        var value = CustomKeyStoreHasCMKsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidMarkerException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidMarkerException {
        let reader = baseError.errorBodyReader
        var value = InvalidMarkerException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ExpiredImportTokenException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ExpiredImportTokenException {
        let reader = baseError.errorBodyReader
        var value = ExpiredImportTokenException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidImportTokenException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidImportTokenException {
        let reader = baseError.errorBodyReader
        var value = InvalidImportTokenException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IncorrectKeyMaterialException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> IncorrectKeyMaterialException {
        let reader = baseError.errorBodyReader
        var value = IncorrectKeyMaterialException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidGrantIdException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidGrantIdException {
        let reader = baseError.errorBodyReader
        var value = InvalidGrantIdException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CloudHsmClusterNotRelatedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> CloudHsmClusterNotRelatedException {
        let reader = baseError.errorBodyReader
        var value = CloudHsmClusterNotRelatedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KMSInvalidSignatureException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> KMSInvalidSignatureException {
        let reader = baseError.errorBodyReader
        var value = KMSInvalidSignatureException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KMSInvalidMacException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> KMSInvalidMacException {
        let reader = baseError.errorBodyReader
        var value = KMSInvalidMacException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KMSClientTypes.KeyMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> KMSClientTypes.KeyMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KMSClientTypes.KeyMetadata()
        value.awsAccountId = try reader["AWSAccountId"].readIfPresent()
        value.keyId = try reader["KeyId"].readIfPresent() ?? ""
        value.arn = try reader["Arn"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.enabled = try reader["Enabled"].readIfPresent() ?? false
        value.description = try reader["Description"].readIfPresent()
        value.keyUsage = try reader["KeyUsage"].readIfPresent()
        value.keyState = try reader["KeyState"].readIfPresent()
        value.deletionDate = try reader["DeletionDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.validTo = try reader["ValidTo"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.origin = try reader["Origin"].readIfPresent()
        value.customKeyStoreId = try reader["CustomKeyStoreId"].readIfPresent()
        value.cloudHsmClusterId = try reader["CloudHsmClusterId"].readIfPresent()
        value.expirationModel = try reader["ExpirationModel"].readIfPresent()
        value.keyManager = try reader["KeyManager"].readIfPresent()
        value.customerMasterKeySpec = try reader["CustomerMasterKeySpec"].readIfPresent()
        value.keySpec = try reader["KeySpec"].readIfPresent()
        value.encryptionAlgorithms = try reader["EncryptionAlgorithms"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<KMSClientTypes.EncryptionAlgorithmSpec>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.signingAlgorithms = try reader["SigningAlgorithms"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<KMSClientTypes.SigningAlgorithmSpec>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.keyAgreementAlgorithms = try reader["KeyAgreementAlgorithms"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<KMSClientTypes.KeyAgreementAlgorithmSpec>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.multiRegion = try reader["MultiRegion"].readIfPresent()
        value.multiRegionConfiguration = try reader["MultiRegionConfiguration"].readIfPresent(with: KMSClientTypes.MultiRegionConfiguration.read(from:))
        value.pendingDeletionWindowInDays = try reader["PendingDeletionWindowInDays"].readIfPresent()
        value.macAlgorithms = try reader["MacAlgorithms"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<KMSClientTypes.MacAlgorithmSpec>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.xksKeyConfiguration = try reader["XksKeyConfiguration"].readIfPresent(with: KMSClientTypes.XksKeyConfigurationType.read(from:))
        return value
    }
}

extension KMSClientTypes.XksKeyConfigurationType {

    static func read(from reader: SmithyJSON.Reader) throws -> KMSClientTypes.XksKeyConfigurationType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KMSClientTypes.XksKeyConfigurationType()
        value.id = try reader["Id"].readIfPresent()
        return value
    }
}

extension KMSClientTypes.MultiRegionConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> KMSClientTypes.MultiRegionConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KMSClientTypes.MultiRegionConfiguration()
        value.multiRegionKeyType = try reader["MultiRegionKeyType"].readIfPresent()
        value.primaryKey = try reader["PrimaryKey"].readIfPresent(with: KMSClientTypes.MultiRegionKey.read(from:))
        value.replicaKeys = try reader["ReplicaKeys"].readListIfPresent(memberReadingClosure: KMSClientTypes.MultiRegionKey.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KMSClientTypes.MultiRegionKey {

    static func read(from reader: SmithyJSON.Reader) throws -> KMSClientTypes.MultiRegionKey {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KMSClientTypes.MultiRegionKey()
        value.arn = try reader["Arn"].readIfPresent()
        value.region = try reader["Region"].readIfPresent()
        return value
    }
}

extension KMSClientTypes.CustomKeyStoresListEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> KMSClientTypes.CustomKeyStoresListEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KMSClientTypes.CustomKeyStoresListEntry()
        value.customKeyStoreId = try reader["CustomKeyStoreId"].readIfPresent()
        value.customKeyStoreName = try reader["CustomKeyStoreName"].readIfPresent()
        value.cloudHsmClusterId = try reader["CloudHsmClusterId"].readIfPresent()
        value.trustAnchorCertificate = try reader["TrustAnchorCertificate"].readIfPresent()
        value.connectionState = try reader["ConnectionState"].readIfPresent()
        value.connectionErrorCode = try reader["ConnectionErrorCode"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.customKeyStoreType = try reader["CustomKeyStoreType"].readIfPresent()
        value.xksProxyConfiguration = try reader["XksProxyConfiguration"].readIfPresent(with: KMSClientTypes.XksProxyConfigurationType.read(from:))
        return value
    }
}

extension KMSClientTypes.XksProxyConfigurationType {

    static func read(from reader: SmithyJSON.Reader) throws -> KMSClientTypes.XksProxyConfigurationType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KMSClientTypes.XksProxyConfigurationType()
        value.connectivity = try reader["Connectivity"].readIfPresent()
        value.accessKeyId = try reader["AccessKeyId"].readIfPresent()
        value.uriEndpoint = try reader["UriEndpoint"].readIfPresent()
        value.uriPath = try reader["UriPath"].readIfPresent()
        value.vpcEndpointServiceName = try reader["VpcEndpointServiceName"].readIfPresent()
        return value
    }
}

extension KMSClientTypes.AliasListEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> KMSClientTypes.AliasListEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KMSClientTypes.AliasListEntry()
        value.aliasName = try reader["AliasName"].readIfPresent()
        value.aliasArn = try reader["AliasArn"].readIfPresent()
        value.targetKeyId = try reader["TargetKeyId"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedDate = try reader["LastUpdatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension KMSClientTypes.GrantListEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> KMSClientTypes.GrantListEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KMSClientTypes.GrantListEntry()
        value.keyId = try reader["KeyId"].readIfPresent()
        value.grantId = try reader["GrantId"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.granteePrincipal = try reader["GranteePrincipal"].readIfPresent()
        value.retiringPrincipal = try reader["RetiringPrincipal"].readIfPresent()
        value.issuingAccount = try reader["IssuingAccount"].readIfPresent()
        value.operations = try reader["Operations"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<KMSClientTypes.GrantOperation>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.constraints = try reader["Constraints"].readIfPresent(with: KMSClientTypes.GrantConstraints.read(from:))
        return value
    }
}

extension KMSClientTypes.GrantConstraints {

    static func write(value: KMSClientTypes.GrantConstraints?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EncryptionContextEquals"].writeMap(value.encryptionContextEquals, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["EncryptionContextSubset"].writeMap(value.encryptionContextSubset, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KMSClientTypes.GrantConstraints {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KMSClientTypes.GrantConstraints()
        value.encryptionContextSubset = try reader["EncryptionContextSubset"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.encryptionContextEquals = try reader["EncryptionContextEquals"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension KMSClientTypes.RotationsListEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> KMSClientTypes.RotationsListEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KMSClientTypes.RotationsListEntry()
        value.keyId = try reader["KeyId"].readIfPresent()
        value.rotationDate = try reader["RotationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.rotationType = try reader["RotationType"].readIfPresent()
        return value
    }
}

extension KMSClientTypes.KeyListEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> KMSClientTypes.KeyListEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KMSClientTypes.KeyListEntry()
        value.keyId = try reader["KeyId"].readIfPresent()
        value.keyArn = try reader["KeyArn"].readIfPresent()
        return value
    }
}

extension KMSClientTypes.Tag {

    static func write(value: KMSClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TagKey"].write(value.tagKey)
        try writer["TagValue"].write(value.tagValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KMSClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KMSClientTypes.Tag()
        value.tagKey = try reader["TagKey"].readIfPresent() ?? ""
        value.tagValue = try reader["TagValue"].readIfPresent() ?? ""
        return value
    }
}

extension KMSClientTypes.XksProxyAuthenticationCredentialType {

    static func write(value: KMSClientTypes.XksProxyAuthenticationCredentialType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessKeyId"].write(value.accessKeyId)
        try writer["RawSecretAccessKey"].write(value.rawSecretAccessKey)
    }
}

extension KMSClientTypes.RecipientInfo {

    static func write(value: KMSClientTypes.RecipientInfo?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttestationDocument"].write(value.attestationDocument)
        try writer["KeyEncryptionAlgorithm"].write(value.keyEncryptionAlgorithm)
    }
}

public enum KMSClientTypes {}
