//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import protocol ClientRuntime.PaginateToken
import struct ClientRuntime.PaginatorSequence

extension GameLiftStreamsClient {
    /// Paginate over `[ListStreamSessionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListStreamSessionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListStreamSessionsOutput`
    public func listStreamSessionsPaginated(input: ListStreamSessionsInput) -> ClientRuntime.PaginatorSequence<ListStreamSessionsInput, ListStreamSessionsOutput> {
        return ClientRuntime.PaginatorSequence<ListStreamSessionsInput, ListStreamSessionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listStreamSessions(input:))
    }
}

extension ListStreamSessionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListStreamSessionsInput {
        return ListStreamSessionsInput(
            exportFilesStatus: self.exportFilesStatus,
            identifier: self.identifier,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )}
}

extension PaginatorSequence where OperationStackInput == ListStreamSessionsInput, OperationStackOutput == ListStreamSessionsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listStreamSessionsPaginated`
    /// to access the nested member `[GameLiftStreamsClientTypes.StreamSessionSummary]`
    /// - Returns: `[GameLiftStreamsClientTypes.StreamSessionSummary]`
    public func items() async throws -> [GameLiftStreamsClientTypes.StreamSessionSummary] {
        return try await self.asyncCompactMap { item in item.items }
    }
}
extension GameLiftStreamsClient {
    /// Paginate over `[ListStreamSessionsByAccountOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListStreamSessionsByAccountInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListStreamSessionsByAccountOutput`
    public func listStreamSessionsByAccountPaginated(input: ListStreamSessionsByAccountInput) -> ClientRuntime.PaginatorSequence<ListStreamSessionsByAccountInput, ListStreamSessionsByAccountOutput> {
        return ClientRuntime.PaginatorSequence<ListStreamSessionsByAccountInput, ListStreamSessionsByAccountOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listStreamSessionsByAccount(input:))
    }
}

extension ListStreamSessionsByAccountInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListStreamSessionsByAccountInput {
        return ListStreamSessionsByAccountInput(
            exportFilesStatus: self.exportFilesStatus,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )}
}

extension PaginatorSequence where OperationStackInput == ListStreamSessionsByAccountInput, OperationStackOutput == ListStreamSessionsByAccountOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listStreamSessionsByAccountPaginated`
    /// to access the nested member `[GameLiftStreamsClientTypes.StreamSessionSummary]`
    /// - Returns: `[GameLiftStreamsClientTypes.StreamSessionSummary]`
    public func items() async throws -> [GameLiftStreamsClientTypes.StreamSessionSummary] {
        return try await self.asyncCompactMap { item in item.items }
    }
}
