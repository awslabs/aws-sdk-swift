// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SSMContactsClient {
    /// Paginate over `[ListContactChannelsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListContactChannelsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListContactChannelsOutput`
    public func listContactChannelsPaginated(input: ListContactChannelsInput) -> ClientRuntime.PaginatorSequence<ListContactChannelsInput, ListContactChannelsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListContactChannelsInput, ListContactChannelsOutput>(input: input, inputKey: \ListContactChannelsInput.nextToken, outputKey: \ListContactChannelsOutput.nextToken, paginationFunction: self.listContactChannels(input:))
=======
        return ClientRuntime.PaginatorSequence<ListContactChannelsInput, ListContactChannelsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listContactChannels(input:))
>>>>>>> main
    }
}

extension ListContactChannelsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListContactChannelsInput {
        return ListContactChannelsInput(
            contactId: self.contactId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListContactChannelsInput, Output == ListContactChannelsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListContactChannelsInput, OperationStackOutput == ListContactChannelsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listContactChannelsPaginated`
    /// to access the nested member `[SSMContactsClientTypes.ContactChannel]`
    /// - Returns: `[SSMContactsClientTypes.ContactChannel]`
    public func contactChannels() async throws -> [SSMContactsClientTypes.ContactChannel] {
        return try await self.asyncCompactMap { item in item.contactChannels }
    }
}
extension SSMContactsClient {
    /// Paginate over `[ListContactsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListContactsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListContactsOutput`
    public func listContactsPaginated(input: ListContactsInput) -> ClientRuntime.PaginatorSequence<ListContactsInput, ListContactsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListContactsInput, ListContactsOutput>(input: input, inputKey: \ListContactsInput.nextToken, outputKey: \ListContactsOutput.nextToken, paginationFunction: self.listContacts(input:))
=======
        return ClientRuntime.PaginatorSequence<ListContactsInput, ListContactsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listContacts(input:))
>>>>>>> main
    }
}

extension ListContactsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListContactsInput {
        return ListContactsInput(
            aliasPrefix: self.aliasPrefix,
            maxResults: self.maxResults,
            nextToken: token,
            type: self.type
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListContactsInput, Output == ListContactsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListContactsInput, OperationStackOutput == ListContactsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listContactsPaginated`
    /// to access the nested member `[SSMContactsClientTypes.Contact]`
    /// - Returns: `[SSMContactsClientTypes.Contact]`
    public func contacts() async throws -> [SSMContactsClientTypes.Contact] {
        return try await self.asyncCompactMap { item in item.contacts }
    }
}
extension SSMContactsClient {
    /// Paginate over `[ListEngagementsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListEngagementsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListEngagementsOutput`
    public func listEngagementsPaginated(input: ListEngagementsInput) -> ClientRuntime.PaginatorSequence<ListEngagementsInput, ListEngagementsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListEngagementsInput, ListEngagementsOutput>(input: input, inputKey: \ListEngagementsInput.nextToken, outputKey: \ListEngagementsOutput.nextToken, paginationFunction: self.listEngagements(input:))
=======
        return ClientRuntime.PaginatorSequence<ListEngagementsInput, ListEngagementsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listEngagements(input:))
>>>>>>> main
    }
}

extension ListEngagementsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListEngagementsInput {
        return ListEngagementsInput(
            incidentId: self.incidentId,
            maxResults: self.maxResults,
            nextToken: token,
            timeRangeValue: self.timeRangeValue
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListEngagementsInput, Output == ListEngagementsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListEngagementsInput, OperationStackOutput == ListEngagementsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listEngagementsPaginated`
    /// to access the nested member `[SSMContactsClientTypes.Engagement]`
    /// - Returns: `[SSMContactsClientTypes.Engagement]`
    public func engagements() async throws -> [SSMContactsClientTypes.Engagement] {
        return try await self.asyncCompactMap { item in item.engagements }
    }
}
extension SSMContactsClient {
    /// Paginate over `[ListPageReceiptsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListPageReceiptsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListPageReceiptsOutput`
    public func listPageReceiptsPaginated(input: ListPageReceiptsInput) -> ClientRuntime.PaginatorSequence<ListPageReceiptsInput, ListPageReceiptsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListPageReceiptsInput, ListPageReceiptsOutput>(input: input, inputKey: \ListPageReceiptsInput.nextToken, outputKey: \ListPageReceiptsOutput.nextToken, paginationFunction: self.listPageReceipts(input:))
=======
        return ClientRuntime.PaginatorSequence<ListPageReceiptsInput, ListPageReceiptsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listPageReceipts(input:))
>>>>>>> main
    }
}

extension ListPageReceiptsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPageReceiptsInput {
        return ListPageReceiptsInput(
            maxResults: self.maxResults,
            nextToken: token,
            pageId: self.pageId
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListPageReceiptsInput, Output == ListPageReceiptsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListPageReceiptsInput, OperationStackOutput == ListPageReceiptsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listPageReceiptsPaginated`
    /// to access the nested member `[SSMContactsClientTypes.Receipt]`
    /// - Returns: `[SSMContactsClientTypes.Receipt]`
    public func receipts() async throws -> [SSMContactsClientTypes.Receipt] {
        return try await self.asyncCompactMap { item in item.receipts }
    }
}
extension SSMContactsClient {
    /// Paginate over `[ListPageResolutionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListPageResolutionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListPageResolutionsOutput`
    public func listPageResolutionsPaginated(input: ListPageResolutionsInput) -> ClientRuntime.PaginatorSequence<ListPageResolutionsInput, ListPageResolutionsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListPageResolutionsInput, ListPageResolutionsOutput>(input: input, inputKey: \ListPageResolutionsInput.nextToken, outputKey: \ListPageResolutionsOutput.nextToken, paginationFunction: self.listPageResolutions(input:))
=======
        return ClientRuntime.PaginatorSequence<ListPageResolutionsInput, ListPageResolutionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listPageResolutions(input:))
>>>>>>> main
    }
}

extension ListPageResolutionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPageResolutionsInput {
        return ListPageResolutionsInput(
            nextToken: token,
            pageId: self.pageId
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListPageResolutionsInput, Output == ListPageResolutionsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListPageResolutionsInput, OperationStackOutput == ListPageResolutionsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listPageResolutionsPaginated`
    /// to access the nested member `[SSMContactsClientTypes.ResolutionContact]`
    /// - Returns: `[SSMContactsClientTypes.ResolutionContact]`
    public func pageResolutions() async throws -> [SSMContactsClientTypes.ResolutionContact] {
        return try await self.asyncCompactMap { item in item.pageResolutions }
    }
}
extension SSMContactsClient {
    /// Paginate over `[ListPagesByContactOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListPagesByContactInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListPagesByContactOutput`
    public func listPagesByContactPaginated(input: ListPagesByContactInput) -> ClientRuntime.PaginatorSequence<ListPagesByContactInput, ListPagesByContactOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListPagesByContactInput, ListPagesByContactOutput>(input: input, inputKey: \ListPagesByContactInput.nextToken, outputKey: \ListPagesByContactOutput.nextToken, paginationFunction: self.listPagesByContact(input:))
=======
        return ClientRuntime.PaginatorSequence<ListPagesByContactInput, ListPagesByContactOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listPagesByContact(input:))
>>>>>>> main
    }
}

extension ListPagesByContactInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPagesByContactInput {
        return ListPagesByContactInput(
            contactId: self.contactId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListPagesByContactInput, Output == ListPagesByContactOutput {
=======
extension PaginatorSequence where OperationStackInput == ListPagesByContactInput, OperationStackOutput == ListPagesByContactOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listPagesByContactPaginated`
    /// to access the nested member `[SSMContactsClientTypes.Page]`
    /// - Returns: `[SSMContactsClientTypes.Page]`
    public func pages() async throws -> [SSMContactsClientTypes.Page] {
        return try await self.asyncCompactMap { item in item.pages }
    }
}
extension SSMContactsClient {
    /// Paginate over `[ListPagesByEngagementOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListPagesByEngagementInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListPagesByEngagementOutput`
    public func listPagesByEngagementPaginated(input: ListPagesByEngagementInput) -> ClientRuntime.PaginatorSequence<ListPagesByEngagementInput, ListPagesByEngagementOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListPagesByEngagementInput, ListPagesByEngagementOutput>(input: input, inputKey: \ListPagesByEngagementInput.nextToken, outputKey: \ListPagesByEngagementOutput.nextToken, paginationFunction: self.listPagesByEngagement(input:))
=======
        return ClientRuntime.PaginatorSequence<ListPagesByEngagementInput, ListPagesByEngagementOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listPagesByEngagement(input:))
>>>>>>> main
    }
}

extension ListPagesByEngagementInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPagesByEngagementInput {
        return ListPagesByEngagementInput(
            engagementId: self.engagementId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListPagesByEngagementInput, Output == ListPagesByEngagementOutput {
=======
extension PaginatorSequence where OperationStackInput == ListPagesByEngagementInput, OperationStackOutput == ListPagesByEngagementOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listPagesByEngagementPaginated`
    /// to access the nested member `[SSMContactsClientTypes.Page]`
    /// - Returns: `[SSMContactsClientTypes.Page]`
    public func pages() async throws -> [SSMContactsClientTypes.Page] {
        return try await self.asyncCompactMap { item in item.pages }
    }
}
extension SSMContactsClient {
    /// Paginate over `[ListPreviewRotationShiftsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListPreviewRotationShiftsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListPreviewRotationShiftsOutput`
    public func listPreviewRotationShiftsPaginated(input: ListPreviewRotationShiftsInput) -> ClientRuntime.PaginatorSequence<ListPreviewRotationShiftsInput, ListPreviewRotationShiftsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListPreviewRotationShiftsInput, ListPreviewRotationShiftsOutput>(input: input, inputKey: \ListPreviewRotationShiftsInput.nextToken, outputKey: \ListPreviewRotationShiftsOutput.nextToken, paginationFunction: self.listPreviewRotationShifts(input:))
=======
        return ClientRuntime.PaginatorSequence<ListPreviewRotationShiftsInput, ListPreviewRotationShiftsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listPreviewRotationShifts(input:))
>>>>>>> main
    }
}

extension ListPreviewRotationShiftsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPreviewRotationShiftsInput {
        return ListPreviewRotationShiftsInput(
            endTime: self.endTime,
            maxResults: self.maxResults,
            members: self.members,
            nextToken: token,
            overrides: self.overrides,
            recurrence: self.recurrence,
            rotationStartTime: self.rotationStartTime,
            startTime: self.startTime,
            timeZoneId: self.timeZoneId
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListPreviewRotationShiftsInput, Output == ListPreviewRotationShiftsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListPreviewRotationShiftsInput, OperationStackOutput == ListPreviewRotationShiftsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listPreviewRotationShiftsPaginated`
    /// to access the nested member `[SSMContactsClientTypes.RotationShift]`
    /// - Returns: `[SSMContactsClientTypes.RotationShift]`
    public func rotationShifts() async throws -> [SSMContactsClientTypes.RotationShift] {
        return try await self.asyncCompactMap { item in item.rotationShifts }
    }
}
extension SSMContactsClient {
    /// Paginate over `[ListRotationOverridesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListRotationOverridesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListRotationOverridesOutput`
    public func listRotationOverridesPaginated(input: ListRotationOverridesInput) -> ClientRuntime.PaginatorSequence<ListRotationOverridesInput, ListRotationOverridesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListRotationOverridesInput, ListRotationOverridesOutput>(input: input, inputKey: \ListRotationOverridesInput.nextToken, outputKey: \ListRotationOverridesOutput.nextToken, paginationFunction: self.listRotationOverrides(input:))
=======
        return ClientRuntime.PaginatorSequence<ListRotationOverridesInput, ListRotationOverridesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listRotationOverrides(input:))
>>>>>>> main
    }
}

extension ListRotationOverridesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListRotationOverridesInput {
        return ListRotationOverridesInput(
            endTime: self.endTime,
            maxResults: self.maxResults,
            nextToken: token,
            rotationId: self.rotationId,
            startTime: self.startTime
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListRotationOverridesInput, Output == ListRotationOverridesOutput {
=======
extension PaginatorSequence where OperationStackInput == ListRotationOverridesInput, OperationStackOutput == ListRotationOverridesOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listRotationOverridesPaginated`
    /// to access the nested member `[SSMContactsClientTypes.RotationOverride]`
    /// - Returns: `[SSMContactsClientTypes.RotationOverride]`
    public func rotationOverrides() async throws -> [SSMContactsClientTypes.RotationOverride] {
        return try await self.asyncCompactMap { item in item.rotationOverrides }
    }
}
extension SSMContactsClient {
    /// Paginate over `[ListRotationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListRotationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListRotationsOutput`
    public func listRotationsPaginated(input: ListRotationsInput) -> ClientRuntime.PaginatorSequence<ListRotationsInput, ListRotationsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListRotationsInput, ListRotationsOutput>(input: input, inputKey: \ListRotationsInput.nextToken, outputKey: \ListRotationsOutput.nextToken, paginationFunction: self.listRotations(input:))
=======
        return ClientRuntime.PaginatorSequence<ListRotationsInput, ListRotationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listRotations(input:))
>>>>>>> main
    }
}

extension ListRotationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListRotationsInput {
        return ListRotationsInput(
            maxResults: self.maxResults,
            nextToken: token,
            rotationNamePrefix: self.rotationNamePrefix
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListRotationsInput, Output == ListRotationsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListRotationsInput, OperationStackOutput == ListRotationsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listRotationsPaginated`
    /// to access the nested member `[SSMContactsClientTypes.Rotation]`
    /// - Returns: `[SSMContactsClientTypes.Rotation]`
    public func rotations() async throws -> [SSMContactsClientTypes.Rotation] {
        return try await self.asyncCompactMap { item in item.rotations }
    }
}
extension SSMContactsClient {
    /// Paginate over `[ListRotationShiftsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListRotationShiftsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListRotationShiftsOutput`
    public func listRotationShiftsPaginated(input: ListRotationShiftsInput) -> ClientRuntime.PaginatorSequence<ListRotationShiftsInput, ListRotationShiftsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListRotationShiftsInput, ListRotationShiftsOutput>(input: input, inputKey: \ListRotationShiftsInput.nextToken, outputKey: \ListRotationShiftsOutput.nextToken, paginationFunction: self.listRotationShifts(input:))
=======
        return ClientRuntime.PaginatorSequence<ListRotationShiftsInput, ListRotationShiftsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listRotationShifts(input:))
>>>>>>> main
    }
}

extension ListRotationShiftsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListRotationShiftsInput {
        return ListRotationShiftsInput(
            endTime: self.endTime,
            maxResults: self.maxResults,
            nextToken: token,
            rotationId: self.rotationId,
            startTime: self.startTime
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListRotationShiftsInput, Output == ListRotationShiftsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListRotationShiftsInput, OperationStackOutput == ListRotationShiftsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listRotationShiftsPaginated`
    /// to access the nested member `[SSMContactsClientTypes.RotationShift]`
    /// - Returns: `[SSMContactsClientTypes.RotationShift]`
    public func rotationShifts() async throws -> [SSMContactsClientTypes.RotationShift] {
        return try await self.asyncCompactMap { item in item.rotationShifts }
    }
}
