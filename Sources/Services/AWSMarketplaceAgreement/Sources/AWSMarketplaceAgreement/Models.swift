//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError

extension MarketplaceAgreementClientTypes {
    /// Enables you and your customers to move your existing agreements to AWS Marketplace. The customer won't be charged for product usage in AWS Marketplace because they already paid for the product outside of AWS Marketplace.
    public struct ByolPricingTerm {
        /// Type of the term being updated.
        public var type: Swift.String?

        public init(
            type: Swift.String? = nil
        )
        {
            self.type = type
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// Defines the dimensions that the acceptor has purchased from the overall set of dimensions presented in the rate card.
    public struct Dimension {
        /// The name of key value of the dimension.
        /// This member is required.
        public var dimensionKey: Swift.String?
        /// The number of units of the dimension the acceptor has purchased. For Agreements with ConfigurableUpfrontPricingTerm, the RateCard section will define the prices and dimensions defined by the seller (proposer), whereas the Configuration section will define the actual dimensions, prices, and units the buyer has chosen to accept.
        /// This member is required.
        public var dimensionValue: Swift.Int

        public init(
            dimensionKey: Swift.String? = nil,
            dimensionValue: Swift.Int = 0
        )
        {
            self.dimensionKey = dimensionKey
            self.dimensionValue = dimensionValue
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// Defines a prepaid payment model that allows buyers to configure the entitlements they want to purchase and the duration.
    public struct ConfigurableUpfrontPricingTermConfiguration {
        /// Defines the dimensions that the acceptor has purchased from the overall set of dimensions presented in the rate card.
        /// This member is required.
        public var dimensions: [MarketplaceAgreementClientTypes.Dimension]?
        /// Defines the length of time for which the particular pricing/dimension is being purchased by the acceptor.
        /// This member is required.
        public var selectorValue: Swift.String?

        public init(
            dimensions: [MarketplaceAgreementClientTypes.Dimension]? = nil,
            selectorValue: Swift.String? = nil
        )
        {
            self.dimensions = dimensions
            self.selectorValue = selectorValue
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// Defines limits on how the term can be configured by acceptors.
    public struct Constraints {
        /// Determines if buyers are allowed to select multiple dimensions in the rate card. The possible values are Allowed and Disallowed. The default value is Allowed.
        public var multipleDimensionSelection: Swift.String?
        /// Determines if acceptors are allowed to configure quantity for each dimension in rate card. The possible values are Allowed and Disallowed. The default value is Allowed.
        public var quantityConfiguration: Swift.String?

        public init(
            multipleDimensionSelection: Swift.String? = nil,
            quantityConfiguration: Swift.String? = nil
        )
        {
            self.multipleDimensionSelection = multipleDimensionSelection
            self.quantityConfiguration = quantityConfiguration
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// Defines the per unit rates for each individual product dimension.
    public struct RateCardItem {
        /// Dimension for which the given entitlement applies. Dimensions represent categories of capacity in a product and are specified when the product is listed in AWS Marketplace.
        public var dimensionKey: Swift.String?
        /// Per unit price for the product dimension thatâ€™s used for calculating the amount to be charged.
        public var price: Swift.String?

        public init(
            dimensionKey: Swift.String? = nil,
            price: Swift.String? = nil
        )
        {
            self.dimensionKey = dimensionKey
            self.price = price
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// Differentiates between the mutually exclusive rate cards in the same pricing term to be selected by the buyer.
    public struct Selector {
        /// Category of selector.
        public var type: Swift.String?
        /// Contract duration. This field supports the ISO 8601 format.
        public var value: Swift.String?

        public init(
            type: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// Within the prepaid payment model defined under ConfigurableUpfrontPricingTerm, the RateCardItem defines all the various rate cards (including pricing and dimensions) that have been proposed.
    public struct ConfigurableUpfrontRateCardItem {
        /// Defines limits on how the term can be configured by acceptors.
        public var constraints: MarketplaceAgreementClientTypes.Constraints?
        /// Defines the per unit rates for product dimensions.
        public var rateCard: [MarketplaceAgreementClientTypes.RateCardItem]?
        /// Differentiates between the mutually exclusive rate cards in the same pricing term to be selected by the buyer.
        public var selector: MarketplaceAgreementClientTypes.Selector?

        public init(
            constraints: MarketplaceAgreementClientTypes.Constraints? = nil,
            rateCard: [MarketplaceAgreementClientTypes.RateCardItem]? = nil,
            selector: MarketplaceAgreementClientTypes.Selector? = nil
        )
        {
            self.constraints = constraints
            self.rateCard = rateCard
            self.selector = selector
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// Defines a prepaid payment model that allows buyers to configure the entitlements they want to purchase and the duration.
    public struct ConfigurableUpfrontPricingTerm {
        /// Additional parameters specified by the acceptor while accepting the term.
        public var configuration: MarketplaceAgreementClientTypes.ConfigurableUpfrontPricingTermConfiguration?
        /// Defines the currency for the prices mentioned in the term.
        public var currencyCode: Swift.String?
        /// A rate card defines the per unit rates for product dimensions.
        public var rateCards: [MarketplaceAgreementClientTypes.ConfigurableUpfrontRateCardItem]?
        /// Category of selector.
        public var type: Swift.String?

        public init(
            configuration: MarketplaceAgreementClientTypes.ConfigurableUpfrontPricingTermConfiguration? = nil,
            currencyCode: Swift.String? = nil,
            rateCards: [MarketplaceAgreementClientTypes.ConfigurableUpfrontRateCardItem]? = nil,
            type: Swift.String? = nil
        )
        {
            self.configuration = configuration
            self.currencyCode = currencyCode
            self.rateCards = rateCards
            self.type = type
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// Entitlements granted to the acceptor of fixed upfront as part of agreement execution.
    public struct GrantItem {
        /// Unique dimension key defined in the product document. Dimensions represent categories of capacity in a product and are specified when the product is listed in AWS Marketplace.
        public var dimensionKey: Swift.String?
        /// Maximum amount of capacity that the buyer can be entitled to the given dimension of the product. If MaxQuantity is not provided, the buyer will be able to use an unlimited amount of the given dimension.
        public var maxQuantity: Swift.Int?

        public init(
            dimensionKey: Swift.String? = nil,
            maxQuantity: Swift.Int? = 1
        )
        {
            self.dimensionKey = dimensionKey
            self.maxQuantity = maxQuantity
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// Defines a prepaid pricing model where the customers are charged a fixed upfront amount.
    public struct FixedUpfrontPricingTerm {
        /// Defines the currency for the prices mentioned in this term.
        public var currencyCode: Swift.String?
        /// Contract duration for the terms.
        public var duration: Swift.String?
        /// Entitlements granted to the acceptor of fixed upfront as part of agreement execution.
        public var grants: [MarketplaceAgreementClientTypes.GrantItem]?
        /// Fixed amount to be charged to the customer when this term is accepted.
        public var price: Swift.String?
        /// Category of the term being updated.
        public var type: Swift.String?

        public init(
            currencyCode: Swift.String? = nil,
            duration: Swift.String? = nil,
            grants: [MarketplaceAgreementClientTypes.GrantItem]? = nil,
            price: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.currencyCode = currencyCode
            self.duration = duration
            self.grants = grants
            self.price = price
            self.type = type
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// Defines a short-term free pricing model where the buyers arenâ€™t charged anything within a specified limit.
    public struct FreeTrialPricingTerm {
        /// Duration of the free trial period (5â€“31 days).
        public var duration: Swift.String?
        /// Entitlements granted to the acceptor of a free trial as part of an agreement execution.
        public var grants: [MarketplaceAgreementClientTypes.GrantItem]?
        /// Category of the term.
        public var type: Swift.String?

        public init(
            duration: Swift.String? = nil,
            grants: [MarketplaceAgreementClientTypes.GrantItem]? = nil,
            type: Swift.String? = nil
        )
        {
            self.duration = duration
            self.grants = grants
            self.type = type
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// Includes the list of references to legal resources proposed by the proposer to the acceptor. Each DocumentItem refers to an individual reference.
    public struct DocumentItem {
        /// Category of the document. Document types include:
        ///
        /// * CustomEula â€“ A custom EULA provided by you as seller. A URL for a EULA stored in an accessible Amazon S3 bucket is required for this document type.
        ///
        /// * CustomDsa â€“ A custom Data Subscription Agreement (DSA) provided by you as seller. A URL for a DSA stored in an accessible Amazon S3 bucket is required for this document type.
        ///
        /// * StandardEula â€“ The Standard Contract for AWS Marketplace (SCMP). For more information about SCMP, see the AWS Marketplace Seller Guide. You donâ€™t provide a URL for this type because itâ€™s managed by AWS Marketplace.
        ///
        /// * StandardDsa â€“ DSA for AWS Marketplace. For more information about the DSA, see the AWS Data Exchange User Guide. You donâ€™t provide a URL for this type because itâ€™s managed by AWS Marketplace.
        public var type: Swift.String?
        /// A URL to the legal document for buyers to read. Required when Type is CustomEula.
        public var url: Swift.String?
        /// Version of standard contracts provided by AWS Marketplace. Required when Type is StandardEula or StandardDsa.
        public var version: Swift.String?

        public init(
            type: Swift.String? = nil,
            url: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.type = type
            self.url = url
            self.version = version
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// Defines the list of text agreements proposed to the acceptors. An example is the end user license agreement (EULA).
    public struct LegalTerm {
        /// List of references to legal resources proposed to the buyers. An example is the EULA.
        public var documents: [MarketplaceAgreementClientTypes.DocumentItem]?
        /// Category of the term being updated.
        public var type: Swift.String?

        public init(
            documents: [MarketplaceAgreementClientTypes.DocumentItem]? = nil,
            type: Swift.String? = nil
        )
        {
            self.documents = documents
            self.type = type
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// An individual installment of the payment that includes the date and amount of the charge.
    public struct ScheduleItem {
        /// The price that the customer would pay on the scheduled date (chargeDate).
        public var chargeAmount: Swift.String?
        /// The date that the customer would pay the price defined in this payment schedule term. Invoices are generated on the date provided.
        public var chargeDate: Foundation.Date?

        public init(
            chargeAmount: Swift.String? = nil,
            chargeDate: Foundation.Date? = nil
        )
        {
            self.chargeAmount = chargeAmount
            self.chargeDate = chargeDate
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// Defines an installment-based pricing model where customers are charged a fixed price on different dates during the agreement validity period. This is used most commonly for flexible payment schedule pricing.
    public struct PaymentScheduleTerm {
        /// Defines the currency for the prices mentioned in the term.
        public var currencyCode: Swift.String?
        /// List of the payment schedule where each element defines one installment of payment. It contains the information necessary for calculating the price.
        public var schedule: [MarketplaceAgreementClientTypes.ScheduleItem]?
        /// Type of the term.
        public var type: Swift.String?

        public init(
            currencyCode: Swift.String? = nil,
            schedule: [MarketplaceAgreementClientTypes.ScheduleItem]? = nil,
            type: Swift.String? = nil
        )
        {
            self.currencyCode = currencyCode
            self.schedule = schedule
            self.type = type
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// Defines a pricing model where customers are charged a fixed recurring price at the end of each billing period.
    public struct RecurringPaymentTerm {
        /// Defines the recurrence at which buyers are charged.
        public var billingPeriod: Swift.String?
        /// Defines the currency for the prices mentioned in this term.
        public var currencyCode: Swift.String?
        /// Amount charged to the buyer every billing period.
        public var price: Swift.String?
        /// Type of the term being updated.
        public var type: Swift.String?

        public init(
            billingPeriod: Swift.String? = nil,
            currencyCode: Swift.String? = nil,
            price: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.billingPeriod = billingPeriod
            self.currencyCode = currencyCode
            self.price = price
            self.type = type
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// Additional parameters specified by the acceptor while accepting the term.
    public struct RenewalTermConfiguration {
        /// Defines whether the acceptor has chosen to auto-renew the agreement at the end of its lifecycle. Can be set to True or False.
        /// This member is required.
        public var enableAutoRenew: Swift.Bool?

        public init(
            enableAutoRenew: Swift.Bool? = nil
        )
        {
            self.enableAutoRenew = enableAutoRenew
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// Defines that on graceful expiration of the agreement (when the agreement ends on its pre-defined end date), a new agreement will be created using the accepted terms on the existing agreement. In other words, the agreement will be renewed. The presence of RenewalTerm in the offer document means that auto-renewal is allowed. Buyers will have the option to accept or decline auto-renewal at the offer acceptance/agreement creation. Buyers can also change this flag from True to False or False to True at anytime during the agreement's lifecycle.
    public struct RenewalTerm {
        /// Additional parameters specified by the acceptor while accepting the term.
        public var configuration: MarketplaceAgreementClientTypes.RenewalTermConfiguration?
        /// Category of the term being updated.
        public var type: Swift.String?

        public init(
            configuration: MarketplaceAgreementClientTypes.RenewalTermConfiguration? = nil,
            type: Swift.String? = nil
        )
        {
            self.configuration = configuration
            self.type = type
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// Defines the customer support available for the acceptors when they purchase the software.
    public struct SupportTerm {
        /// Free-text field about the refund policy description that will be shown to customers as is on the website and console.
        public var refundPolicy: Swift.String?
        /// Category of the term being updated.
        public var type: Swift.String?

        public init(
            refundPolicy: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.refundPolicy = refundPolicy
            self.type = type
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// Within the pay-as-you-go model defined under UsageBasedPricingTerm, the UsageBasedRateCardItem defines an individual rate for a product dimension.
    public struct UsageBasedRateCardItem {
        /// Defines the per unit rates for product dimensions.
        public var rateCard: [MarketplaceAgreementClientTypes.RateCardItem]?

        public init(
            rateCard: [MarketplaceAgreementClientTypes.RateCardItem]? = nil
        )
        {
            self.rateCard = rateCard
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// Defines a usage-based pricing model (typically, pay-as-you-go pricing), where the customers are charged based on product usage.
    public struct UsageBasedPricingTerm {
        /// Defines the currency for the prices mentioned in the term.
        public var currencyCode: Swift.String?
        /// List of rate cards.
        public var rateCards: [MarketplaceAgreementClientTypes.UsageBasedRateCardItem]?
        /// Category of the term.
        public var type: Swift.String?

        public init(
            currencyCode: Swift.String? = nil,
            rateCards: [MarketplaceAgreementClientTypes.UsageBasedRateCardItem]? = nil,
            type: Swift.String? = nil
        )
        {
            self.currencyCode = currencyCode
            self.rateCards = rateCards
            self.type = type
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// Defines the conditions that will keep an agreement created from this offer valid.
    public struct ValidityTerm {
        /// Defines the duration that the agreement remains active. If AgreementStartDate isnâ€™t provided, the agreement duration is relative to the agreement signature time. The duration is represented in the ISO_8601 format.
        public var agreementDuration: Swift.String?
        /// Defines the date when the agreement ends. The agreement ends at 23:59:59.999 UTC on the date provided. If AgreementEndDate isnâ€™t provided, the agreement end date is determined by the validity of individual terms.
        public var agreementEndDate: Foundation.Date?
        /// Defines the date when agreement starts. The agreement starts at 00:00:00.000 UTC on the date provided. If AgreementStartDate isnâ€™t provided, the agreement start date is determined based on agreement signature time.
        public var agreementStartDate: Foundation.Date?
        /// Category of the term being updated.
        public var type: Swift.String?

        public init(
            agreementDuration: Swift.String? = nil,
            agreementEndDate: Foundation.Date? = nil,
            agreementStartDate: Foundation.Date? = nil,
            type: Swift.String? = nil
        )
        {
            self.agreementDuration = agreementDuration
            self.agreementEndDate = agreementEndDate
            self.agreementStartDate = agreementStartDate
            self.type = type
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// A subset of terms proposed by the proposer, which have been accepted by the acceptor as part of agreement creation.
    public enum AcceptedTerm {
        /// Defines the list of text agreements proposed to the acceptors. An example is the end user license agreement (EULA).
        case legalterm(MarketplaceAgreementClientTypes.LegalTerm)
        /// Defines the customer support available for the acceptors when they purchase the software.
        case supportterm(MarketplaceAgreementClientTypes.SupportTerm)
        /// Defines that on graceful expiration of the agreement (when the agreement ends on its pre-defined end date), a new agreement will be created using the accepted terms on the existing agreement. In other words, the agreement will be renewed. Presence of RenewalTerm in the offer document means that auto-renewal is allowed. Buyers will have the option to accept or decline auto-renewal at the offer acceptance/agreement creation. Buyers can also change this flag from True to False or False to True at anytime during the agreement's lifecycle.
        case renewalterm(MarketplaceAgreementClientTypes.RenewalTerm)
        /// Defines a usage-based pricing model (typically, pay-as-you-go pricing), where the customers are charged based on product usage.
        case usagebasedpricingterm(MarketplaceAgreementClientTypes.UsageBasedPricingTerm)
        /// Defines a prepaid payment model that allows buyers to configure the entitlements they want to purchase and the duration.
        case configurableupfrontpricingterm(MarketplaceAgreementClientTypes.ConfigurableUpfrontPricingTerm)
        /// Enables you and your customers to move your existing agreements to AWS Marketplace. The customer won't be charged for product usage in AWS Marketplace because they already paid for the product outside of AWS Marketplace.
        case byolpricingterm(MarketplaceAgreementClientTypes.ByolPricingTerm)
        /// Defines a pricing model where customers are charged a fixed recurring price at the end of each billing period.
        case recurringpaymentterm(MarketplaceAgreementClientTypes.RecurringPaymentTerm)
        /// Defines the conditions that will keep an agreement created from this offer valid.
        case validityterm(MarketplaceAgreementClientTypes.ValidityTerm)
        /// Defines an installment-based pricing model where customers are charged a fixed price on different dates during the agreement validity period. This is used most commonly for flexible payment schedule pricing.
        case paymentscheduleterm(MarketplaceAgreementClientTypes.PaymentScheduleTerm)
        /// Defines a short-term free pricing model where the buyers arenâ€™t charged anything within a specified limit.
        case freetrialpricingterm(MarketplaceAgreementClientTypes.FreeTrialPricingTerm)
        /// Defines a pre-paid pricing model where the customers are charged a fixed upfront amount.
        case fixedupfrontpricingterm(MarketplaceAgreementClientTypes.FixedUpfrontPricingTerm)
        case sdkUnknown(Swift.String)
    }

}

extension MarketplaceAgreementClientTypes {
    /// The details of the party accepting the agreement terms. This is commonly the buyer for PurchaseAgreement.
    public struct Acceptor {
        /// The AWS account ID of the acceptor.
        public var accountId: Swift.String?

        public init(
            accountId: Swift.String? = nil
        )
        {
            self.accountId = accountId
        }
    }

}

/// User does not have sufficient access to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The unique identifier for the error.
        public internal(set) var requestId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.requestId = requestId
    }
}

extension MarketplaceAgreementClientTypes {

    public enum AgreementStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case archived
        case cancelled
        case expired
        case renewed
        case replaced
        case rolledBack
        case superseded
        case terminated
        case sdkUnknown(Swift.String)

        public static var allCases: [AgreementStatus] {
            return [
                .active,
                .archived,
                .cancelled,
                .expired,
                .renewed,
                .replaced,
                .rolledBack,
                .superseded,
                .terminated
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .archived: return "ARCHIVED"
            case .cancelled: return "CANCELLED"
            case .expired: return "EXPIRED"
            case .renewed: return "RENEWED"
            case .replaced: return "REPLACED"
            case .rolledBack: return "ROLLED_BACK"
            case .superseded: return "SUPERSEDED"
            case .terminated: return "TERMINATED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MarketplaceAgreementClientTypes {
    /// The list of resources involved in the agreement.
    public struct Resource {
        /// The unique identifier of the resource. We mention the term resource, which is most commonly a product, so a resourceId is also a productId.
        public var id: Swift.String?
        /// Type of the resource, which is the product. Values include SaaSProduct or AmiProduct.
        public var type: Swift.String?

        public init(
            id: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.id = id
            self.type = type
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// A summary of the proposal received from the proposer.
    public struct ProposalSummary {
        /// The unique identifier of the offer in AWS Marketplace.
        public var offerId: Swift.String?
        /// The list of resources involved in the agreement.
        public var resources: [MarketplaceAgreementClientTypes.Resource]?

        public init(
            offerId: Swift.String? = nil,
            resources: [MarketplaceAgreementClientTypes.Resource]? = nil
        )
        {
            self.offerId = offerId
            self.resources = resources
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// Details of the party proposing the agreement terms,. This is commonly the seller for PurchaseAgreement.
    public struct Proposer {
        /// The AWS account ID of the proposer.
        public var accountId: Swift.String?

        public init(
            accountId: Swift.String? = nil
        )
        {
            self.accountId = accountId
        }
    }

}

extension MarketplaceAgreementClientTypes {
    /// A summary of the agreement, including top-level attributes (for example, the agreement ID, version, proposer, and acceptor).
    public struct AgreementViewSummary {
        /// The date and time that the agreement was accepted.
        public var acceptanceTime: Foundation.Date?
        /// Details of the party accepting the agreement terms. This is commonly the buyer for PurchaseAgreement.
        public var acceptor: MarketplaceAgreementClientTypes.Acceptor?
        /// The unique identifier of the agreement.
        public var agreementId: Swift.String?
        /// The type of agreement. Values are PurchaseAgreement or VendorInsightsAgreement.
        public var agreementType: Swift.String?
        /// The date and time when the agreement ends. The field is null for pay-as-you-go agreements, which donâ€™t have end dates.
        public var endTime: Foundation.Date?
        /// A summary of the proposal
        public var proposalSummary: MarketplaceAgreementClientTypes.ProposalSummary?
        /// Details of the party proposing the agreement terms, most commonly the seller for PurchaseAgreement.
        public var proposer: MarketplaceAgreementClientTypes.Proposer?
        /// The date and time when the agreement starts.
        public var startTime: Foundation.Date?
        /// The current status of the agreement.
        public var status: MarketplaceAgreementClientTypes.AgreementStatus?

        public init(
            acceptanceTime: Foundation.Date? = nil,
            acceptor: MarketplaceAgreementClientTypes.Acceptor? = nil,
            agreementId: Swift.String? = nil,
            agreementType: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            proposalSummary: MarketplaceAgreementClientTypes.ProposalSummary? = nil,
            proposer: MarketplaceAgreementClientTypes.Proposer? = nil,
            startTime: Foundation.Date? = nil,
            status: MarketplaceAgreementClientTypes.AgreementStatus? = nil
        )
        {
            self.acceptanceTime = acceptanceTime
            self.acceptor = acceptor
            self.agreementId = agreementId
            self.agreementType = agreementType
            self.endTime = endTime
            self.proposalSummary = proposalSummary
            self.proposer = proposer
            self.startTime = startTime
            self.status = status
        }
    }

}

/// Unexpected error during processing of request.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The unique identifier for the error.
        public internal(set) var requestId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.requestId = requestId
    }
}

extension MarketplaceAgreementClientTypes {

    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case agreement
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .agreement
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .agreement: return "Agreement"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Request references a resource which does not exist.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The unique identifier for the error.
        public internal(set) var requestId: Swift.String? = nil
        /// The unique identifier for the resource.
        public internal(set) var resourceId: Swift.String? = nil
        /// The type of resource.
        public internal(set) var resourceType: MarketplaceAgreementClientTypes.ResourceType? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        requestId: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: MarketplaceAgreementClientTypes.ResourceType? = nil
    )
    {
        self.properties.message = message
        self.properties.requestId = requestId
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
    }
}

/// Request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The unique identifier for the error.
        public internal(set) var requestId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.requestId = requestId
    }
}

extension MarketplaceAgreementClientTypes {
    /// The input fails to satisfy the constraints specified by the service.
    public struct ValidationExceptionField {
        /// See applicable actions.
        /// This member is required.
        public var message: Swift.String?
        /// The name of the field associated with the error.
        /// This member is required.
        public var name: Swift.String?

        public init(
            message: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.message = message
            self.name = name
        }
    }

}

extension MarketplaceAgreementClientTypes {

    public enum ValidationExceptionReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case invalidAgreementId
        case invalidCatalog
        case invalidFilterName
        case invalidFilterValues
        case invalidMaxResults
        case invalidNextToken
        case invalidSortBy
        case invalidSortOrder
        case missingAgreementId
        case other
        case unsupportedFilters
        case sdkUnknown(Swift.String)

        public static var allCases: [ValidationExceptionReason] {
            return [
                .invalidAgreementId,
                .invalidCatalog,
                .invalidFilterName,
                .invalidFilterValues,
                .invalidMaxResults,
                .invalidNextToken,
                .invalidSortBy,
                .invalidSortOrder,
                .missingAgreementId,
                .other,
                .unsupportedFilters
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .invalidAgreementId: return "INVALID_AGREEMENT_ID"
            case .invalidCatalog: return "INVALID_CATALOG"
            case .invalidFilterName: return "INVALID_FILTER_NAME"
            case .invalidFilterValues: return "INVALID_FILTER_VALUES"
            case .invalidMaxResults: return "INVALID_MAX_RESULTS"
            case .invalidNextToken: return "INVALID_NEXT_TOKEN"
            case .invalidSortBy: return "INVALID_SORT_BY"
            case .invalidSortOrder: return "INVALID_SORT_ORDER"
            case .missingAgreementId: return "MISSING_AGREEMENT_ID"
            case .other: return "OTHER"
            case .unsupportedFilters: return "UNSUPPORTED_FILTERS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The input fails to satisfy the constraints specified by the service.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The fields associated with the error.
        public internal(set) var fields: [MarketplaceAgreementClientTypes.ValidationExceptionField]? = nil
        public internal(set) var message: Swift.String? = nil
        /// The reason associated with the error.
        public internal(set) var reason: MarketplaceAgreementClientTypes.ValidationExceptionReason? = nil
        /// The unique identifier associated with the error.
        public internal(set) var requestId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        fields: [MarketplaceAgreementClientTypes.ValidationExceptionField]? = nil,
        message: Swift.String? = nil,
        reason: MarketplaceAgreementClientTypes.ValidationExceptionReason? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.properties.fields = fields
        self.properties.message = message
        self.properties.reason = reason
        self.properties.requestId = requestId
    }
}

public struct DescribeAgreementInput {
    /// The unique identifier of the agreement.
    /// This member is required.
    public var agreementId: Swift.String?

    public init(
        agreementId: Swift.String? = nil
    )
    {
        self.agreementId = agreementId
    }
}

extension MarketplaceAgreementClientTypes {
    /// Estimated cost of the agreement.
    public struct EstimatedCharges {
        /// The total known amount customer has to pay across the lifecycle of the agreement. This is the total contract value if accepted terms contain ConfigurableUpfrontPricingTerm or FixedUpfrontPricingTerm. In the case of pure contract pricing, this will be the total value of the contract. In the case of contracts with consumption pricing, this will only include the committed value and not include any overages that occur. If the accepted terms contain PaymentScheduleTerm, it will be the total payment schedule amount. This occurs when flexible payment schedule is used, and is the sum of all invoice charges in the payment schedule. In case a customer has amended an agreement, by purchasing more units of any dimension, this will include both the original cost as well as the added cost incurred due to addition of new units. This is 0 if the accepted terms contain UsageBasedPricingTerm without ConfigurableUpfrontPricingTerm or RecurringPaymentTerm. This occurs for usage-based pricing (such as SaaS metered or AMI/container hourly or monthly), because the exact usage is not known upfront.
        public var agreementValue: Swift.String?
        /// Defines the currency code for the charge.
        public var currencyCode: Swift.String?

        public init(
            agreementValue: Swift.String? = nil,
            currencyCode: Swift.String? = nil
        )
        {
            self.agreementValue = agreementValue
            self.currencyCode = currencyCode
        }
    }

}

public struct DescribeAgreementOutput {
    /// The date and time the offer was accepted or the agreement was created. AcceptanceTime and StartTime can differ for future dated agreements (FDAs).
    public var acceptanceTime: Foundation.Date?
    /// The details of the party accepting the agreement terms. This is commonly the buyer for PurchaseAgreement.
    public var acceptor: MarketplaceAgreementClientTypes.Acceptor?
    /// The unique identifier of the agreement.
    public var agreementId: Swift.String?
    /// The type of agreement. Values are PurchaseAgreement or VendorInsightsAgreement.
    public var agreementType: Swift.String?
    /// The date and time when the agreement ends. The field is null for pay-as-you-go agreements, which donâ€™t have end dates.
    public var endTime: Foundation.Date?
    /// The estimated cost of the agreement.
    public var estimatedCharges: MarketplaceAgreementClientTypes.EstimatedCharges?
    /// A summary of the proposal received from the proposer.
    public var proposalSummary: MarketplaceAgreementClientTypes.ProposalSummary?
    /// The details of the party proposing the agreement terms. This is commonly the seller for PurchaseAgreement.
    public var proposer: MarketplaceAgreementClientTypes.Proposer?
    /// The date and time when the agreement starts.
    public var startTime: Foundation.Date?
    /// The current status of the agreement. Statuses include:
    ///
    /// * ACTIVE â€“ The terms of the agreement are active.
    ///
    /// * ARCHIVED â€“ The agreement ended without a specified reason.
    ///
    /// * CANCELLED â€“ The acceptor ended the agreement before the defined end date.
    ///
    /// * EXPIRED â€“ The agreement ended on the defined end date.
    ///
    /// * RENEWED â€“ The agreement was renewed into a new agreement (for example, an auto-renewal).
    ///
    /// * REPLACED â€“ The agreement was replaced using an agreement replacement offer.
    ///
    /// * ROLLED_BACK (Only applicable to inactive agreement revisions) â€“ The agreement revision has been rolled back because of an error. An earlier revision is now active.
    ///
    /// * SUPERCEDED (Only applicable to inactive agreement revisions) â€“ The agreement revision is no longer active and another agreement revision is now active.
    ///
    /// * TERMINATED â€“ The agreement ended before the defined end date because of an AWS termination (for example, a payment failure).
    public var status: MarketplaceAgreementClientTypes.AgreementStatus?

    public init(
        acceptanceTime: Foundation.Date? = nil,
        acceptor: MarketplaceAgreementClientTypes.Acceptor? = nil,
        agreementId: Swift.String? = nil,
        agreementType: Swift.String? = nil,
        endTime: Foundation.Date? = nil,
        estimatedCharges: MarketplaceAgreementClientTypes.EstimatedCharges? = nil,
        proposalSummary: MarketplaceAgreementClientTypes.ProposalSummary? = nil,
        proposer: MarketplaceAgreementClientTypes.Proposer? = nil,
        startTime: Foundation.Date? = nil,
        status: MarketplaceAgreementClientTypes.AgreementStatus? = nil
    )
    {
        self.acceptanceTime = acceptanceTime
        self.acceptor = acceptor
        self.agreementId = agreementId
        self.agreementType = agreementType
        self.endTime = endTime
        self.estimatedCharges = estimatedCharges
        self.proposalSummary = proposalSummary
        self.proposer = proposer
        self.startTime = startTime
        self.status = status
    }
}

public struct GetAgreementTermsInput {
    /// The unique identifier of the agreement.
    /// This member is required.
    public var agreementId: Swift.String?
    /// The maximum number of agreements to return in the response.
    public var maxResults: Swift.Int?
    /// A token to specify where to start pagination
    public var nextToken: Swift.String?

    public init(
        agreementId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.agreementId = agreementId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct GetAgreementTermsOutput {
    /// A subset of terms proposed by the proposer that have been accepted by the acceptor as part of the agreement creation.
    public var acceptedTerms: [MarketplaceAgreementClientTypes.AcceptedTerm]?
    /// A token to specify where to start pagination
    public var nextToken: Swift.String?

    public init(
        acceptedTerms: [MarketplaceAgreementClientTypes.AcceptedTerm]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.acceptedTerms = acceptedTerms
        self.nextToken = nextToken
    }
}

extension MarketplaceAgreementClientTypes {
    /// The filter name and value pair that is used to return a more specific list of results. Filters can be used to match a set of resources by various criteria, such as offerId or productId.
    public struct Filter {
        /// The name of the filter.
        public var name: Swift.String?
        /// The filter value.
        public var values: [Swift.String]?

        public init(
            name: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension MarketplaceAgreementClientTypes {

    public enum SortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ASCENDING"
            case .descending: return "DESCENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MarketplaceAgreementClientTypes {
    /// An object that contains the SortBy and SortOrder attributes.
    public struct Sort {
        /// The attribute on which the data is grouped, which can be by StartTime and EndTime. The default value is EndTime.
        public var sortBy: Swift.String?
        /// The sorting order, which can be ASCENDING or DESCENDING. The default value is DESCENDING.
        public var sortOrder: MarketplaceAgreementClientTypes.SortOrder?

        public init(
            sortBy: Swift.String? = nil,
            sortOrder: MarketplaceAgreementClientTypes.SortOrder? = nil
        )
        {
            self.sortBy = sortBy
            self.sortOrder = sortOrder
        }
    }

}

public struct SearchAgreementsInput {
    /// The catalog in which the agreement was created.
    public var catalog: Swift.String?
    /// The filter name and value pair used to return a specific list of results. The following filters are supported:
    ///
    /// * ResourceIdentifier â€“ The unique identifier of the resource.
    ///
    /// * ResourceType â€“ Type of the resource, which is the product (AmiProduct, ContainerProduct, or SaaSProduct).
    ///
    /// * PartyType â€“ The party type (either Acceptor or Proposer) of the caller. For agreements where the caller is the proposer, use the Proposer filter. For agreements where the caller is the acceptor, use the Acceptor filter.
    ///
    /// * AcceptorAccountId â€“ The AWS account ID of the party accepting the agreement terms.
    ///
    /// * OfferId â€“ The unique identifier of the offer in which the terms are registered in the agreement token.
    ///
    /// * Status â€“ The current status of the agreement. Values include ACTIVE, ARCHIVED, CANCELLED, EXPIRED, RENEWED, REPLACED, and TERMINATED.
    ///
    /// * BeforeEndTime â€“ A date used to filter agreements with a date before the endTime of an agreement.
    ///
    /// * AfterEndTime â€“ A date used to filter agreements with a date after the endTime of an agreement.
    ///
    /// * AgreementType â€“ The type of agreement. Values include PurchaseAgreement or VendorInsightsAgreement.
    public var filters: [MarketplaceAgreementClientTypes.Filter]?
    /// The maximum number of agreements to return in the response.
    public var maxResults: Swift.Int?
    /// A token to specify where to start pagination.
    public var nextToken: Swift.String?
    /// An object that contains the SortBy and SortOrder attributes.
    public var sort: MarketplaceAgreementClientTypes.Sort?

    public init(
        catalog: Swift.String? = nil,
        filters: [MarketplaceAgreementClientTypes.Filter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sort: MarketplaceAgreementClientTypes.Sort? = nil
    )
    {
        self.catalog = catalog
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sort = sort
    }
}

public struct SearchAgreementsOutput {
    /// A summary of the agreement, including top-level attributes (for example, the agreement ID, version, proposer, and acceptor).
    public var agreementViewSummaries: [MarketplaceAgreementClientTypes.AgreementViewSummary]?
    /// The token used for pagination. The field is null if there are no more results.
    public var nextToken: Swift.String?

    public init(
        agreementViewSummaries: [MarketplaceAgreementClientTypes.AgreementViewSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.agreementViewSummaries = agreementViewSummaries
        self.nextToken = nextToken
    }
}

extension DescribeAgreementInput {

    static func urlPathProvider(_ value: DescribeAgreementInput) -> Swift.String? {
        return "/"
    }
}

extension GetAgreementTermsInput {

    static func urlPathProvider(_ value: GetAgreementTermsInput) -> Swift.String? {
        return "/"
    }
}

extension SearchAgreementsInput {

    static func urlPathProvider(_ value: SearchAgreementsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAgreementInput {

    static func write(value: DescribeAgreementInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["agreementId"].write(value.agreementId)
    }
}

extension GetAgreementTermsInput {

    static func write(value: GetAgreementTermsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["agreementId"].write(value.agreementId)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension SearchAgreementsInput {

    static func write(value: SearchAgreementsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["catalog"].write(value.catalog)
        try writer["filters"].writeList(value.filters, memberWritingClosure: MarketplaceAgreementClientTypes.Filter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sort"].write(value.sort, with: MarketplaceAgreementClientTypes.Sort.write(value:to:))
    }
}

extension DescribeAgreementOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAgreementOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAgreementOutput()
        value.acceptanceTime = try reader["acceptanceTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.acceptor = try reader["acceptor"].readIfPresent(with: MarketplaceAgreementClientTypes.Acceptor.read(from:))
        value.agreementId = try reader["agreementId"].readIfPresent()
        value.agreementType = try reader["agreementType"].readIfPresent()
        value.endTime = try reader["endTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.estimatedCharges = try reader["estimatedCharges"].readIfPresent(with: MarketplaceAgreementClientTypes.EstimatedCharges.read(from:))
        value.proposalSummary = try reader["proposalSummary"].readIfPresent(with: MarketplaceAgreementClientTypes.ProposalSummary.read(from:))
        value.proposer = try reader["proposer"].readIfPresent(with: MarketplaceAgreementClientTypes.Proposer.read(from:))
        value.startTime = try reader["startTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension GetAgreementTermsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAgreementTermsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAgreementTermsOutput()
        value.acceptedTerms = try reader["acceptedTerms"].readListIfPresent(memberReadingClosure: MarketplaceAgreementClientTypes.AcceptedTerm.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension SearchAgreementsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SearchAgreementsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SearchAgreementsOutput()
        value.agreementViewSummaries = try reader["agreementViewSummaries"].readListIfPresent(memberReadingClosure: MarketplaceAgreementClientTypes.AgreementViewSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

enum DescribeAgreementOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAgreementTermsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SearchAgreementsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.requestId = try reader["requestId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.requestId = try reader["requestId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.fields = try reader["fields"].readListIfPresent(memberReadingClosure: MarketplaceAgreementClientTypes.ValidationExceptionField.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.reason = try reader["reason"].readIfPresent()
        value.properties.requestId = try reader["requestId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.requestId = try reader["requestId"].readIfPresent()
        value.properties.resourceId = try reader["resourceId"].readIfPresent()
        value.properties.resourceType = try reader["resourceType"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.requestId = try reader["requestId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MarketplaceAgreementClientTypes.Acceptor {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.Acceptor {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.Acceptor()
        value.accountId = try reader["accountId"].readIfPresent()
        return value
    }
}

extension MarketplaceAgreementClientTypes.Proposer {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.Proposer {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.Proposer()
        value.accountId = try reader["accountId"].readIfPresent()
        return value
    }
}

extension MarketplaceAgreementClientTypes.EstimatedCharges {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.EstimatedCharges {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.EstimatedCharges()
        value.currencyCode = try reader["currencyCode"].readIfPresent()
        value.agreementValue = try reader["agreementValue"].readIfPresent()
        return value
    }
}

extension MarketplaceAgreementClientTypes.ProposalSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.ProposalSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.ProposalSummary()
        value.resources = try reader["resources"].readListIfPresent(memberReadingClosure: MarketplaceAgreementClientTypes.Resource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.offerId = try reader["offerId"].readIfPresent()
        return value
    }
}

extension MarketplaceAgreementClientTypes.Resource {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.Resource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.Resource()
        value.id = try reader["id"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension MarketplaceAgreementClientTypes.AcceptedTerm {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.AcceptedTerm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "legalTerm":
                return .legalterm(try reader["legalTerm"].read(with: MarketplaceAgreementClientTypes.LegalTerm.read(from:)))
            case "supportTerm":
                return .supportterm(try reader["supportTerm"].read(with: MarketplaceAgreementClientTypes.SupportTerm.read(from:)))
            case "renewalTerm":
                return .renewalterm(try reader["renewalTerm"].read(with: MarketplaceAgreementClientTypes.RenewalTerm.read(from:)))
            case "usageBasedPricingTerm":
                return .usagebasedpricingterm(try reader["usageBasedPricingTerm"].read(with: MarketplaceAgreementClientTypes.UsageBasedPricingTerm.read(from:)))
            case "configurableUpfrontPricingTerm":
                return .configurableupfrontpricingterm(try reader["configurableUpfrontPricingTerm"].read(with: MarketplaceAgreementClientTypes.ConfigurableUpfrontPricingTerm.read(from:)))
            case "byolPricingTerm":
                return .byolpricingterm(try reader["byolPricingTerm"].read(with: MarketplaceAgreementClientTypes.ByolPricingTerm.read(from:)))
            case "recurringPaymentTerm":
                return .recurringpaymentterm(try reader["recurringPaymentTerm"].read(with: MarketplaceAgreementClientTypes.RecurringPaymentTerm.read(from:)))
            case "validityTerm":
                return .validityterm(try reader["validityTerm"].read(with: MarketplaceAgreementClientTypes.ValidityTerm.read(from:)))
            case "paymentScheduleTerm":
                return .paymentscheduleterm(try reader["paymentScheduleTerm"].read(with: MarketplaceAgreementClientTypes.PaymentScheduleTerm.read(from:)))
            case "freeTrialPricingTerm":
                return .freetrialpricingterm(try reader["freeTrialPricingTerm"].read(with: MarketplaceAgreementClientTypes.FreeTrialPricingTerm.read(from:)))
            case "fixedUpfrontPricingTerm":
                return .fixedupfrontpricingterm(try reader["fixedUpfrontPricingTerm"].read(with: MarketplaceAgreementClientTypes.FixedUpfrontPricingTerm.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension MarketplaceAgreementClientTypes.FixedUpfrontPricingTerm {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.FixedUpfrontPricingTerm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.FixedUpfrontPricingTerm()
        value.type = try reader["type"].readIfPresent()
        value.currencyCode = try reader["currencyCode"].readIfPresent()
        value.duration = try reader["duration"].readIfPresent()
        value.price = try reader["price"].readIfPresent()
        value.grants = try reader["grants"].readListIfPresent(memberReadingClosure: MarketplaceAgreementClientTypes.GrantItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MarketplaceAgreementClientTypes.GrantItem {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.GrantItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.GrantItem()
        value.dimensionKey = try reader["dimensionKey"].readIfPresent()
        value.maxQuantity = try reader["maxQuantity"].readIfPresent() ?? 1
        return value
    }
}

extension MarketplaceAgreementClientTypes.FreeTrialPricingTerm {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.FreeTrialPricingTerm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.FreeTrialPricingTerm()
        value.type = try reader["type"].readIfPresent()
        value.duration = try reader["duration"].readIfPresent()
        value.grants = try reader["grants"].readListIfPresent(memberReadingClosure: MarketplaceAgreementClientTypes.GrantItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MarketplaceAgreementClientTypes.PaymentScheduleTerm {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.PaymentScheduleTerm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.PaymentScheduleTerm()
        value.type = try reader["type"].readIfPresent()
        value.currencyCode = try reader["currencyCode"].readIfPresent()
        value.schedule = try reader["schedule"].readListIfPresent(memberReadingClosure: MarketplaceAgreementClientTypes.ScheduleItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MarketplaceAgreementClientTypes.ScheduleItem {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.ScheduleItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.ScheduleItem()
        value.chargeDate = try reader["chargeDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.chargeAmount = try reader["chargeAmount"].readIfPresent()
        return value
    }
}

extension MarketplaceAgreementClientTypes.ValidityTerm {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.ValidityTerm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.ValidityTerm()
        value.type = try reader["type"].readIfPresent()
        value.agreementDuration = try reader["agreementDuration"].readIfPresent()
        value.agreementStartDate = try reader["agreementStartDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.agreementEndDate = try reader["agreementEndDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension MarketplaceAgreementClientTypes.RecurringPaymentTerm {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.RecurringPaymentTerm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.RecurringPaymentTerm()
        value.type = try reader["type"].readIfPresent()
        value.currencyCode = try reader["currencyCode"].readIfPresent()
        value.billingPeriod = try reader["billingPeriod"].readIfPresent()
        value.price = try reader["price"].readIfPresent()
        return value
    }
}

extension MarketplaceAgreementClientTypes.ByolPricingTerm {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.ByolPricingTerm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.ByolPricingTerm()
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension MarketplaceAgreementClientTypes.ConfigurableUpfrontPricingTerm {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.ConfigurableUpfrontPricingTerm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.ConfigurableUpfrontPricingTerm()
        value.type = try reader["type"].readIfPresent()
        value.currencyCode = try reader["currencyCode"].readIfPresent()
        value.rateCards = try reader["rateCards"].readListIfPresent(memberReadingClosure: MarketplaceAgreementClientTypes.ConfigurableUpfrontRateCardItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.configuration = try reader["configuration"].readIfPresent(with: MarketplaceAgreementClientTypes.ConfigurableUpfrontPricingTermConfiguration.read(from:))
        return value
    }
}

extension MarketplaceAgreementClientTypes.ConfigurableUpfrontPricingTermConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.ConfigurableUpfrontPricingTermConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.ConfigurableUpfrontPricingTermConfiguration()
        value.selectorValue = try reader["selectorValue"].readIfPresent() ?? ""
        value.dimensions = try reader["dimensions"].readListIfPresent(memberReadingClosure: MarketplaceAgreementClientTypes.Dimension.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension MarketplaceAgreementClientTypes.Dimension {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.Dimension {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.Dimension()
        value.dimensionKey = try reader["dimensionKey"].readIfPresent() ?? ""
        value.dimensionValue = try reader["dimensionValue"].readIfPresent() ?? 0
        return value
    }
}

extension MarketplaceAgreementClientTypes.ConfigurableUpfrontRateCardItem {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.ConfigurableUpfrontRateCardItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.ConfigurableUpfrontRateCardItem()
        value.selector = try reader["selector"].readIfPresent(with: MarketplaceAgreementClientTypes.Selector.read(from:))
        value.constraints = try reader["constraints"].readIfPresent(with: MarketplaceAgreementClientTypes.Constraints.read(from:))
        value.rateCard = try reader["rateCard"].readListIfPresent(memberReadingClosure: MarketplaceAgreementClientTypes.RateCardItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MarketplaceAgreementClientTypes.RateCardItem {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.RateCardItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.RateCardItem()
        value.dimensionKey = try reader["dimensionKey"].readIfPresent()
        value.price = try reader["price"].readIfPresent()
        return value
    }
}

extension MarketplaceAgreementClientTypes.Constraints {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.Constraints {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.Constraints()
        value.multipleDimensionSelection = try reader["multipleDimensionSelection"].readIfPresent()
        value.quantityConfiguration = try reader["quantityConfiguration"].readIfPresent()
        return value
    }
}

extension MarketplaceAgreementClientTypes.Selector {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.Selector {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.Selector()
        value.type = try reader["type"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension MarketplaceAgreementClientTypes.UsageBasedPricingTerm {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.UsageBasedPricingTerm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.UsageBasedPricingTerm()
        value.type = try reader["type"].readIfPresent()
        value.currencyCode = try reader["currencyCode"].readIfPresent()
        value.rateCards = try reader["rateCards"].readListIfPresent(memberReadingClosure: MarketplaceAgreementClientTypes.UsageBasedRateCardItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MarketplaceAgreementClientTypes.UsageBasedRateCardItem {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.UsageBasedRateCardItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.UsageBasedRateCardItem()
        value.rateCard = try reader["rateCard"].readListIfPresent(memberReadingClosure: MarketplaceAgreementClientTypes.RateCardItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MarketplaceAgreementClientTypes.RenewalTerm {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.RenewalTerm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.RenewalTerm()
        value.type = try reader["type"].readIfPresent()
        value.configuration = try reader["configuration"].readIfPresent(with: MarketplaceAgreementClientTypes.RenewalTermConfiguration.read(from:))
        return value
    }
}

extension MarketplaceAgreementClientTypes.RenewalTermConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.RenewalTermConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.RenewalTermConfiguration()
        value.enableAutoRenew = try reader["enableAutoRenew"].readIfPresent() ?? false
        return value
    }
}

extension MarketplaceAgreementClientTypes.SupportTerm {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.SupportTerm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.SupportTerm()
        value.type = try reader["type"].readIfPresent()
        value.refundPolicy = try reader["refundPolicy"].readIfPresent()
        return value
    }
}

extension MarketplaceAgreementClientTypes.LegalTerm {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.LegalTerm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.LegalTerm()
        value.type = try reader["type"].readIfPresent()
        value.documents = try reader["documents"].readListIfPresent(memberReadingClosure: MarketplaceAgreementClientTypes.DocumentItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MarketplaceAgreementClientTypes.DocumentItem {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.DocumentItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.DocumentItem()
        value.type = try reader["type"].readIfPresent()
        value.url = try reader["url"].readIfPresent()
        value.version = try reader["version"].readIfPresent()
        return value
    }
}

extension MarketplaceAgreementClientTypes.AgreementViewSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.AgreementViewSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.AgreementViewSummary()
        value.agreementId = try reader["agreementId"].readIfPresent()
        value.acceptanceTime = try reader["acceptanceTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.startTime = try reader["startTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["endTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.agreementType = try reader["agreementType"].readIfPresent()
        value.acceptor = try reader["acceptor"].readIfPresent(with: MarketplaceAgreementClientTypes.Acceptor.read(from:))
        value.proposer = try reader["proposer"].readIfPresent(with: MarketplaceAgreementClientTypes.Proposer.read(from:))
        value.proposalSummary = try reader["proposalSummary"].readIfPresent(with: MarketplaceAgreementClientTypes.ProposalSummary.read(from:))
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension MarketplaceAgreementClientTypes.ValidationExceptionField {

    static func read(from reader: SmithyJSON.Reader) throws -> MarketplaceAgreementClientTypes.ValidationExceptionField {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MarketplaceAgreementClientTypes.ValidationExceptionField()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.message = try reader["message"].readIfPresent() ?? ""
        return value
    }
}

extension MarketplaceAgreementClientTypes.Filter {

    static func write(value: MarketplaceAgreementClientTypes.Filter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension MarketplaceAgreementClientTypes.Sort {

    static func write(value: MarketplaceAgreementClientTypes.Sort?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sortBy"].write(value.sortBy)
        try writer["sortOrder"].write(value.sortOrder)
    }
}

public enum MarketplaceAgreementClientTypes {}
