//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.Document
import struct Smithy.URIQueryItem

/// Access to the Apache Airflow Web UI or CLI has been denied due to insufficient permissions. To learn more, see [Accessing an Amazon MWAA environment](https://docs.aws.amazon.com/mwaa/latest/userguide/access-policies.html).
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// ResourceNotFoundException: The resource is not available.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateCliTokenInput: Swift.Sendable {
    /// The name of the Amazon MWAA environment. For example, MyMWAAEnvironment.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct CreateCliTokenOutput: Swift.Sendable {
    /// An Airflow CLI login token.
    public var cliToken: Swift.String?
    /// The Airflow web server hostname for the environment.
    public var webServerHostname: Swift.String?

    public init(
        cliToken: Swift.String? = nil,
        webServerHostname: Swift.String? = nil
    )
    {
        self.cliToken = cliToken
        self.webServerHostname = webServerHostname
    }
}

extension CreateCliTokenOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateCliTokenOutput(webServerHostname: \(Swift.String(describing: webServerHostname)), cliToken: \"CONTENT_REDACTED\")"}
}

/// InternalServerException: An internal error has occurred.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// ValidationException: The provided input is not valid.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension MWAAClientTypes {

    public enum EndpointManagement: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case customer
        case service
        case sdkUnknown(Swift.String)

        public static var allCases: [EndpointManagement] {
            return [
                .customer,
                .service
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .customer: return "CUSTOMER"
            case .service: return "SERVICE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MWAAClientTypes {

    public enum LoggingLevel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case critical
        case debug
        case error
        case info
        case warning
        case sdkUnknown(Swift.String)

        public static var allCases: [LoggingLevel] {
            return [
                .critical,
                .debug,
                .error,
                .info,
                .warning
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .critical: return "CRITICAL"
            case .debug: return "DEBUG"
            case .error: return "ERROR"
            case .info: return "INFO"
            case .warning: return "WARNING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MWAAClientTypes {

    /// Enables the Apache Airflow log type (e.g. DagProcessingLogs) and defines the log level to send to CloudWatch Logs (e.g. INFO).
    public struct ModuleLoggingConfigurationInput: Swift.Sendable {
        /// Indicates whether to enable the Apache Airflow log type (e.g. DagProcessingLogs).
        /// This member is required.
        public var enabled: Swift.Bool?
        /// Defines the Apache Airflow log level (e.g. INFO) to send to CloudWatch Logs.
        /// This member is required.
        public var logLevel: MWAAClientTypes.LoggingLevel?

        public init(
            enabled: Swift.Bool? = nil,
            logLevel: MWAAClientTypes.LoggingLevel? = nil
        )
        {
            self.enabled = enabled
            self.logLevel = logLevel
        }
    }
}

extension MWAAClientTypes {

    /// Defines the Apache Airflow log types to send to CloudWatch Logs.
    public struct LoggingConfigurationInput: Swift.Sendable {
        /// Publishes Airflow DAG processing logs to CloudWatch Logs.
        public var dagProcessingLogs: MWAAClientTypes.ModuleLoggingConfigurationInput?
        /// Publishes Airflow scheduler logs to CloudWatch Logs.
        public var schedulerLogs: MWAAClientTypes.ModuleLoggingConfigurationInput?
        /// Publishes Airflow task logs to CloudWatch Logs.
        public var taskLogs: MWAAClientTypes.ModuleLoggingConfigurationInput?
        /// Publishes Airflow web server logs to CloudWatch Logs.
        public var webserverLogs: MWAAClientTypes.ModuleLoggingConfigurationInput?
        /// Publishes Airflow worker logs to CloudWatch Logs.
        public var workerLogs: MWAAClientTypes.ModuleLoggingConfigurationInput?

        public init(
            dagProcessingLogs: MWAAClientTypes.ModuleLoggingConfigurationInput? = nil,
            schedulerLogs: MWAAClientTypes.ModuleLoggingConfigurationInput? = nil,
            taskLogs: MWAAClientTypes.ModuleLoggingConfigurationInput? = nil,
            webserverLogs: MWAAClientTypes.ModuleLoggingConfigurationInput? = nil,
            workerLogs: MWAAClientTypes.ModuleLoggingConfigurationInput? = nil
        )
        {
            self.dagProcessingLogs = dagProcessingLogs
            self.schedulerLogs = schedulerLogs
            self.taskLogs = taskLogs
            self.webserverLogs = webserverLogs
            self.workerLogs = workerLogs
        }
    }
}

extension MWAAClientTypes {

    /// Describes the VPC networking components used to secure and enable network traffic between the Amazon Web Services resources for your environment. For more information, see [About networking on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/networking-about.html).
    public struct NetworkConfiguration: Swift.Sendable {
        /// A list of security group IDs. For more information, see [Security in your VPC on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/vpc-security.html).
        public var securityGroupIds: [Swift.String]?
        /// A list of subnet IDs. For more information, see [About networking on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/networking-about.html).
        public var subnetIds: [Swift.String]?

        public init(
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }
    }
}

extension MWAAClientTypes {

    public enum WebserverAccessMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case privateOnly
        case publicOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [WebserverAccessMode] {
            return [
                .privateOnly,
                .publicOnly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .privateOnly: return "PRIVATE_ONLY"
            case .publicOnly: return "PUBLIC_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// This section contains the Amazon Managed Workflows for Apache Airflow (Amazon MWAA) API reference documentation to create an environment. For more information, see [Get started with Amazon Managed Workflows for Apache Airflow](https://docs.aws.amazon.com/mwaa/latest/userguide/get-started.html).
public struct CreateEnvironmentInput: Swift.Sendable {
    /// A list of key-value pairs containing the Apache Airflow configuration options you want to attach to your environment. For more information, see [Apache Airflow configuration options](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html).
    public var airflowConfigurationOptions: [Swift.String: Swift.String]?
    /// The Apache Airflow version for your environment. If no value is specified, it defaults to the latest version. For more information, see [Apache Airflow versions on Amazon Managed Workflows for Apache Airflow (Amazon MWAA)](https://docs.aws.amazon.com/mwaa/latest/userguide/airflow-versions.html). Valid values: 1.10.12, 2.0.2, 2.2.2, 2.4.3, 2.5.1, 2.6.3, 2.7.2, 2.8.1, 2.9.2, and 2.10.1.
    public var airflowVersion: Swift.String?
    /// The relative path to the DAGs folder on your Amazon S3 bucket. For example, dags. For more information, see [Adding or updating DAGs](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-folder.html).
    /// This member is required.
    public var dagS3Path: Swift.String?
    /// Defines whether the VPC endpoints configured for the environment are created, and managed, by the customer or by Amazon MWAA. If set to SERVICE, Amazon MWAA will create and manage the required VPC endpoints in your VPC. If set to CUSTOMER, you must create, and manage, the VPC endpoints for your VPC. If you choose to create an environment in a shared VPC, you must set this value to CUSTOMER. In a shared VPC deployment, the environment will remain in PENDING status until you create the VPC endpoints. If you do not take action to create the endpoints within 72 hours, the status will change to CREATE_FAILED. You can delete the failed environment and create a new one.
    public var endpointManagement: MWAAClientTypes.EndpointManagement?
    /// The environment class type. Valid values: mw1.small, mw1.medium, mw1.large, mw1.xlarge, and mw1.2xlarge. For more information, see [Amazon MWAA environment class](https://docs.aws.amazon.com/mwaa/latest/userguide/environment-class.html).
    public var environmentClass: Swift.String?
    /// The Amazon Resource Name (ARN) of the execution role for your environment. An execution role is an Amazon Web Services Identity and Access Management (IAM) role that grants MWAA permission to access Amazon Web Services services and resources used by your environment. For example, arn:aws:iam::123456789:role/my-execution-role. For more information, see [Amazon MWAA Execution role](https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-create-role.html).
    /// This member is required.
    public var executionRoleArn: Swift.String?
    /// The Amazon Web Services Key Management Service (KMS) key to encrypt the data in your environment. You can use an Amazon Web Services owned CMK, or a Customer managed CMK (advanced). For more information, see [Create an Amazon MWAA environment](https://docs.aws.amazon.com/mwaa/latest/userguide/create-environment.html).
    public var kmsKey: Swift.String?
    /// Defines the Apache Airflow logs to send to CloudWatch Logs.
    public var loggingConfiguration: MWAAClientTypes.LoggingConfigurationInput?
    /// The maximum number of web servers that you want to run in your environment. Amazon MWAA scales the number of Apache Airflow web servers up to the number you specify for MaxWebservers when you interact with your Apache Airflow environment using Apache Airflow REST API, or the Apache Airflow CLI. For example, in scenarios where your workload requires network calls to the Apache Airflow REST API with a high transaction-per-second (TPS) rate, Amazon MWAA will increase the number of web servers up to the number set in MaxWebserers. As TPS rates decrease Amazon MWAA disposes of the additional web servers, and scales down to the number set in MinxWebserers. Valid values: Accepts between 2 and 5. Defaults to 2.
    public var maxWebservers: Swift.Int?
    /// The maximum number of workers that you want to run in your environment. MWAA scales the number of Apache Airflow workers up to the number you specify in the MaxWorkers field. For example, 20. When there are no more tasks running, and no more in the queue, MWAA disposes of the extra workers leaving the one worker that is included with your environment, or the number you specify in MinWorkers.
    public var maxWorkers: Swift.Int?
    /// The minimum number of web servers that you want to run in your environment. Amazon MWAA scales the number of Apache Airflow web servers up to the number you specify for MaxWebservers when you interact with your Apache Airflow environment using Apache Airflow REST API, or the Apache Airflow CLI. As the transaction-per-second rate, and the network load, decrease, Amazon MWAA disposes of the additional web servers, and scales down to the number set in MinxWebserers. Valid values: Accepts between 2 and 5. Defaults to 2.
    public var minWebservers: Swift.Int?
    /// The minimum number of workers that you want to run in your environment. MWAA scales the number of Apache Airflow workers up to the number you specify in the MaxWorkers field. When there are no more tasks running, and no more in the queue, MWAA disposes of the extra workers leaving the worker count you specify in the MinWorkers field. For example, 2.
    public var minWorkers: Swift.Int?
    /// The name of the Amazon MWAA environment. For example, MyMWAAEnvironment.
    /// This member is required.
    public var name: Swift.String?
    /// The VPC networking components used to secure and enable network traffic between the Amazon Web Services resources for your environment. For more information, see [About networking on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/networking-about.html).
    /// This member is required.
    public var networkConfiguration: MWAAClientTypes.NetworkConfiguration?
    /// The version of the plugins.zip file on your Amazon S3 bucket. You must specify a version each time a plugins.zip file is updated. For more information, see [How S3 Versioning works](https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html).
    public var pluginsS3ObjectVersion: Swift.String?
    /// The relative path to the plugins.zip file on your Amazon S3 bucket. For example, plugins.zip. If specified, then the plugins.zip version is required. For more information, see [Installing custom plugins](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import-plugins.html).
    public var pluginsS3Path: Swift.String?
    /// The version of the requirements.txt file on your Amazon S3 bucket. You must specify a version each time a requirements.txt file is updated. For more information, see [How S3 Versioning works](https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html).
    public var requirementsS3ObjectVersion: Swift.String?
    /// The relative path to the requirements.txt file on your Amazon S3 bucket. For example, requirements.txt. If specified, then a version is required. For more information, see [Installing Python dependencies](https://docs.aws.amazon.com/mwaa/latest/userguide/working-dags-dependencies.html).
    public var requirementsS3Path: Swift.String?
    /// The number of Apache Airflow schedulers to run in your environment. Valid values:
    ///
    /// * v2 - Accepts between 2 to 5. Defaults to 2.
    ///
    /// * v1 - Accepts 1.
    public var schedulers: Swift.Int?
    /// The Amazon Resource Name (ARN) of the Amazon S3 bucket where your DAG code and supporting files are stored. For example, arn:aws:s3:::my-airflow-bucket-unique-name. For more information, see [Create an Amazon S3 bucket for Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-s3-bucket.html).
    /// This member is required.
    public var sourceBucketArn: Swift.String?
    /// The version of the startup shell script in your Amazon S3 bucket. You must specify the [version ID](https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html) that Amazon S3 assigns to the file every time you update the script. Version IDs are Unicode, UTF-8 encoded, URL-ready, opaque strings that are no more than 1,024 bytes long. The following is an example: 3sL4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo For more information, see [Using a startup script](https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html).
    public var startupScriptS3ObjectVersion: Swift.String?
    /// The relative path to the startup shell script in your Amazon S3 bucket. For example, s3://mwaa-environment/startup.sh. Amazon MWAA runs the script as your environment starts, and before running the Apache Airflow process. You can use this script to install dependencies, modify Apache Airflow configuration options, and set environment variables. For more information, see [Using a startup script](https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html).
    public var startupScriptS3Path: Swift.String?
    /// The key-value tag pairs you want to associate to your environment. For example, "Environment": "Staging". For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [Swift.String: Swift.String]?
    /// Defines the access mode for the Apache Airflow web server. For more information, see [Apache Airflow access modes](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-networking.html).
    public var webserverAccessMode: MWAAClientTypes.WebserverAccessMode?
    /// The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time to start weekly maintenance updates of your environment in the following format: DAY:HH:MM. For example: TUE:03:30. You can specify a start time in 30 minute increments only.
    public var weeklyMaintenanceWindowStart: Swift.String?

    public init(
        airflowConfigurationOptions: [Swift.String: Swift.String]? = nil,
        airflowVersion: Swift.String? = nil,
        dagS3Path: Swift.String? = nil,
        endpointManagement: MWAAClientTypes.EndpointManagement? = nil,
        environmentClass: Swift.String? = nil,
        executionRoleArn: Swift.String? = nil,
        kmsKey: Swift.String? = nil,
        loggingConfiguration: MWAAClientTypes.LoggingConfigurationInput? = nil,
        maxWebservers: Swift.Int? = nil,
        maxWorkers: Swift.Int? = nil,
        minWebservers: Swift.Int? = nil,
        minWorkers: Swift.Int? = nil,
        name: Swift.String? = nil,
        networkConfiguration: MWAAClientTypes.NetworkConfiguration? = nil,
        pluginsS3ObjectVersion: Swift.String? = nil,
        pluginsS3Path: Swift.String? = nil,
        requirementsS3ObjectVersion: Swift.String? = nil,
        requirementsS3Path: Swift.String? = nil,
        schedulers: Swift.Int? = nil,
        sourceBucketArn: Swift.String? = nil,
        startupScriptS3ObjectVersion: Swift.String? = nil,
        startupScriptS3Path: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        webserverAccessMode: MWAAClientTypes.WebserverAccessMode? = nil,
        weeklyMaintenanceWindowStart: Swift.String? = nil
    )
    {
        self.airflowConfigurationOptions = airflowConfigurationOptions
        self.airflowVersion = airflowVersion
        self.dagS3Path = dagS3Path
        self.endpointManagement = endpointManagement
        self.environmentClass = environmentClass
        self.executionRoleArn = executionRoleArn
        self.kmsKey = kmsKey
        self.loggingConfiguration = loggingConfiguration
        self.maxWebservers = maxWebservers
        self.maxWorkers = maxWorkers
        self.minWebservers = minWebservers
        self.minWorkers = minWorkers
        self.name = name
        self.networkConfiguration = networkConfiguration
        self.pluginsS3ObjectVersion = pluginsS3ObjectVersion
        self.pluginsS3Path = pluginsS3Path
        self.requirementsS3ObjectVersion = requirementsS3ObjectVersion
        self.requirementsS3Path = requirementsS3Path
        self.schedulers = schedulers
        self.sourceBucketArn = sourceBucketArn
        self.startupScriptS3ObjectVersion = startupScriptS3ObjectVersion
        self.startupScriptS3Path = startupScriptS3Path
        self.tags = tags
        self.webserverAccessMode = webserverAccessMode
        self.weeklyMaintenanceWindowStart = weeklyMaintenanceWindowStart
    }
}

extension CreateEnvironmentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateEnvironmentInput(airflowVersion: \(Swift.String(describing: airflowVersion)), dagS3Path: \(Swift.String(describing: dagS3Path)), endpointManagement: \(Swift.String(describing: endpointManagement)), environmentClass: \(Swift.String(describing: environmentClass)), executionRoleArn: \(Swift.String(describing: executionRoleArn)), kmsKey: \(Swift.String(describing: kmsKey)), loggingConfiguration: \(Swift.String(describing: loggingConfiguration)), maxWebservers: \(Swift.String(describing: maxWebservers)), maxWorkers: \(Swift.String(describing: maxWorkers)), minWebservers: \(Swift.String(describing: minWebservers)), minWorkers: \(Swift.String(describing: minWorkers)), name: \(Swift.String(describing: name)), networkConfiguration: \(Swift.String(describing: networkConfiguration)), pluginsS3ObjectVersion: \(Swift.String(describing: pluginsS3ObjectVersion)), pluginsS3Path: \(Swift.String(describing: pluginsS3Path)), requirementsS3ObjectVersion: \(Swift.String(describing: requirementsS3ObjectVersion)), requirementsS3Path: \(Swift.String(describing: requirementsS3Path)), schedulers: \(Swift.String(describing: schedulers)), sourceBucketArn: \(Swift.String(describing: sourceBucketArn)), startupScriptS3ObjectVersion: \(Swift.String(describing: startupScriptS3ObjectVersion)), startupScriptS3Path: \(Swift.String(describing: startupScriptS3Path)), tags: \(Swift.String(describing: tags)), webserverAccessMode: \(Swift.String(describing: webserverAccessMode)), weeklyMaintenanceWindowStart: \(Swift.String(describing: weeklyMaintenanceWindowStart)), airflowConfigurationOptions: \"CONTENT_REDACTED\")"}
}

public struct CreateEnvironmentOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) returned in the response for the environment.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

public struct CreateWebLoginTokenInput: Swift.Sendable {
    /// The name of the Amazon MWAA environment. For example, MyMWAAEnvironment.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct CreateWebLoginTokenOutput: Swift.Sendable {
    /// The user name of the Apache Airflow identity creating the web login token.
    public var airflowIdentity: Swift.String?
    /// The name of the IAM identity creating the web login token. This might be an IAM user, or an assumed or federated identity. For example, assumed-role/Admin/your-name.
    public var iamIdentity: Swift.String?
    /// The Airflow web server hostname for the environment.
    public var webServerHostname: Swift.String?
    /// An Airflow web server login token.
    public var webToken: Swift.String?

    public init(
        airflowIdentity: Swift.String? = nil,
        iamIdentity: Swift.String? = nil,
        webServerHostname: Swift.String? = nil,
        webToken: Swift.String? = nil
    )
    {
        self.airflowIdentity = airflowIdentity
        self.iamIdentity = iamIdentity
        self.webServerHostname = webServerHostname
        self.webToken = webToken
    }
}

extension CreateWebLoginTokenOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateWebLoginTokenOutput(airflowIdentity: \(Swift.String(describing: airflowIdentity)), iamIdentity: \(Swift.String(describing: iamIdentity)), webServerHostname: \(Swift.String(describing: webServerHostname)), webToken: \"CONTENT_REDACTED\")"}
}

public struct DeleteEnvironmentInput: Swift.Sendable {
    /// The name of the Amazon MWAA environment. For example, MyMWAAEnvironment.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteEnvironmentOutput: Swift.Sendable {

    public init() { }
}

public struct GetEnvironmentInput: Swift.Sendable {
    /// The name of the Amazon MWAA environment. For example, MyMWAAEnvironment.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

extension MWAAClientTypes {

    /// Describes the error(s) encountered with the last update of the environment.
    public struct UpdateError: Swift.Sendable {
        /// The error code that corresponds to the error with the last update.
        public var errorCode: Swift.String?
        /// The error message that corresponds to the error code.
        public var errorMessage: Swift.String?

        public init(
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
        }
    }
}

extension MWAAClientTypes {

    public enum UpdateStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case pending
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [UpdateStatus] {
            return [
                .failed,
                .pending,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MWAAClientTypes {

    /// Describes the status of the last update on the environment, and any errors that were encountered.
    public struct LastUpdate: Swift.Sendable {
        /// The day and time of the last update on the environment.
        public var createdAt: Foundation.Date?
        /// The error that was encountered during the last update of the environment.
        public var error: MWAAClientTypes.UpdateError?
        /// The source of the last update to the environment. Includes internal processes by Amazon MWAA, such as an environment maintenance update.
        public var source: Swift.String?
        /// The status of the last update on the environment.
        public var status: MWAAClientTypes.UpdateStatus?

        public init(
            createdAt: Foundation.Date? = nil,
            error: MWAAClientTypes.UpdateError? = nil,
            source: Swift.String? = nil,
            status: MWAAClientTypes.UpdateStatus? = nil
        )
        {
            self.createdAt = createdAt
            self.error = error
            self.source = source
            self.status = status
        }
    }
}

extension MWAAClientTypes {

    /// Describes the Apache Airflow log details for the log type (e.g. DagProcessingLogs).
    public struct ModuleLoggingConfiguration: Swift.Sendable {
        /// The Amazon Resource Name (ARN) for the CloudWatch Logs group where the Apache Airflow log type (e.g. DagProcessingLogs) is published. For example, arn:aws:logs:us-east-1:123456789012:log-group:airflow-MyMWAAEnvironment-MwaaEnvironment-DAGProcessing:*.
        public var cloudWatchLogGroupArn: Swift.String?
        /// Indicates whether the Apache Airflow log type (e.g. DagProcessingLogs) is enabled.
        public var enabled: Swift.Bool?
        /// The Apache Airflow log level for the log type (e.g. DagProcessingLogs).
        public var logLevel: MWAAClientTypes.LoggingLevel?

        public init(
            cloudWatchLogGroupArn: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            logLevel: MWAAClientTypes.LoggingLevel? = nil
        )
        {
            self.cloudWatchLogGroupArn = cloudWatchLogGroupArn
            self.enabled = enabled
            self.logLevel = logLevel
        }
    }
}

extension MWAAClientTypes {

    /// Describes the Apache Airflow log types that are published to CloudWatch Logs.
    public struct LoggingConfiguration: Swift.Sendable {
        /// The Airflow DAG processing logs published to CloudWatch Logs and the log level.
        public var dagProcessingLogs: MWAAClientTypes.ModuleLoggingConfiguration?
        /// The Airflow scheduler logs published to CloudWatch Logs and the log level.
        public var schedulerLogs: MWAAClientTypes.ModuleLoggingConfiguration?
        /// The Airflow task logs published to CloudWatch Logs and the log level.
        public var taskLogs: MWAAClientTypes.ModuleLoggingConfiguration?
        /// The Airflow web server logs published to CloudWatch Logs and the log level.
        public var webserverLogs: MWAAClientTypes.ModuleLoggingConfiguration?
        /// The Airflow worker logs published to CloudWatch Logs and the log level.
        public var workerLogs: MWAAClientTypes.ModuleLoggingConfiguration?

        public init(
            dagProcessingLogs: MWAAClientTypes.ModuleLoggingConfiguration? = nil,
            schedulerLogs: MWAAClientTypes.ModuleLoggingConfiguration? = nil,
            taskLogs: MWAAClientTypes.ModuleLoggingConfiguration? = nil,
            webserverLogs: MWAAClientTypes.ModuleLoggingConfiguration? = nil,
            workerLogs: MWAAClientTypes.ModuleLoggingConfiguration? = nil
        )
        {
            self.dagProcessingLogs = dagProcessingLogs
            self.schedulerLogs = schedulerLogs
            self.taskLogs = taskLogs
            self.webserverLogs = webserverLogs
            self.workerLogs = workerLogs
        }
    }
}

extension MWAAClientTypes {

    public enum EnvironmentStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case createFailed
        case creating
        case creatingSnapshot
        case deleted
        case deleting
        case maintenance
        case pending
        case rollingBack
        case unavailable
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [EnvironmentStatus] {
            return [
                .available,
                .createFailed,
                .creating,
                .creatingSnapshot,
                .deleted,
                .deleting,
                .maintenance,
                .pending,
                .rollingBack,
                .unavailable,
                .updateFailed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .creatingSnapshot: return "CREATING_SNAPSHOT"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .maintenance: return "MAINTENANCE"
            case .pending: return "PENDING"
            case .rollingBack: return "ROLLING_BACK"
            case .unavailable: return "UNAVAILABLE"
            case .updateFailed: return "UPDATE_FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MWAAClientTypes {

    /// Describes an Amazon Managed Workflows for Apache Airflow (MWAA) environment.
    public struct Environment: Swift.Sendable {
        /// A list of key-value pairs containing the Apache Airflow configuration options attached to your environment. For more information, see [Apache Airflow configuration options](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html).
        public var airflowConfigurationOptions: [Swift.String: Swift.String]?
        /// The Apache Airflow version on your environment. Valid values: 1.10.12, 2.0.2, 2.2.2, 2.4.3, 2.5.1, 2.6.3, 2.7.2, 2.8.1, 2.9.2, and 2.10.1.
        public var airflowVersion: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon MWAA environment.
        public var arn: Swift.String?
        /// The queue ARN for the environment's [Celery Executor](https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/executor/celery.html). Amazon MWAA uses a Celery Executor to distribute tasks across multiple workers. When you create an environment in a shared VPC, you must provide access to the Celery Executor queue from your VPC.
        public var celeryExecutorQueue: Swift.String?
        /// The day and time the environment was created.
        public var createdAt: Foundation.Date?
        /// The relative path to the DAGs folder in your Amazon S3 bucket. For example, s3://mwaa-environment/dags. For more information, see [Adding or updating DAGs](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-folder.html).
        public var dagS3Path: Swift.String?
        /// The VPC endpoint for the environment's Amazon RDS database.
        public var databaseVpcEndpointService: Swift.String?
        /// Defines whether the VPC endpoints configured for the environment are created, and managed, by the customer or by Amazon MWAA. If set to SERVICE, Amazon MWAA will create and manage the required VPC endpoints in your VPC. If set to CUSTOMER, you must create, and manage, the VPC endpoints in your VPC.
        public var endpointManagement: MWAAClientTypes.EndpointManagement?
        /// The environment class type. Valid values: mw1.small, mw1.medium, mw1.large, mw1.xlarge, and mw1.2xlarge. For more information, see [Amazon MWAA environment class](https://docs.aws.amazon.com/mwaa/latest/userguide/environment-class.html).
        public var environmentClass: Swift.String?
        /// The Amazon Resource Name (ARN) of the execution role in IAM that allows MWAA to access Amazon Web Services resources in your environment. For example, arn:aws:iam::123456789:role/my-execution-role. For more information, see [Amazon MWAA Execution role](https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-create-role.html).
        public var executionRoleArn: Swift.String?
        /// The KMS encryption key used to encrypt the data in your environment.
        public var kmsKey: Swift.String?
        /// The status of the last update on the environment.
        public var lastUpdate: MWAAClientTypes.LastUpdate?
        /// The Apache Airflow logs published to CloudWatch Logs.
        public var loggingConfiguration: MWAAClientTypes.LoggingConfiguration?
        /// The maximum number of web servers that you want to run in your environment. Amazon MWAA scales the number of Apache Airflow web servers up to the number you specify for MaxWebservers when you interact with your Apache Airflow environment using Apache Airflow REST API, or the Apache Airflow CLI. For example, in scenarios where your workload requires network calls to the Apache Airflow REST API with a high transaction-per-second (TPS) rate, Amazon MWAA will increase the number of web servers up to the number set in MaxWebserers. As TPS rates decrease Amazon MWAA disposes of the additional web servers, and scales down to the number set in MinxWebserers. Valid values: Accepts between 2 and 5. Defaults to 2.
        public var maxWebservers: Swift.Int?
        /// The maximum number of workers that run in your environment. For example, 20.
        public var maxWorkers: Swift.Int?
        /// The minimum number of web servers that you want to run in your environment. Amazon MWAA scales the number of Apache Airflow web servers up to the number you specify for MaxWebservers when you interact with your Apache Airflow environment using Apache Airflow REST API, or the Apache Airflow CLI. As the transaction-per-second rate, and the network load, decrease, Amazon MWAA disposes of the additional web servers, and scales down to the number set in MinxWebserers. Valid values: Accepts between 2 and 5. Defaults to 2.
        public var minWebservers: Swift.Int?
        /// The minimum number of workers that run in your environment. For example, 2.
        public var minWorkers: Swift.Int?
        /// The name of the Amazon MWAA environment. For example, MyMWAAEnvironment.
        public var name: Swift.String?
        /// Describes the VPC networking components used to secure and enable network traffic between the Amazon Web Services resources for your environment. For more information, see [About networking on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/networking-about.html).
        public var networkConfiguration: MWAAClientTypes.NetworkConfiguration?
        /// The version of the plugins.zip file in your Amazon S3 bucket. You must specify the [version ID](https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html) that Amazon S3 assigns to the file. Version IDs are Unicode, UTF-8 encoded, URL-ready, opaque strings that are no more than 1,024 bytes long. The following is an example: 3sL4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo For more information, see [Installing custom plugins](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import-plugins.html).
        public var pluginsS3ObjectVersion: Swift.String?
        /// The relative path to the file in your Amazon S3 bucket. For example, s3://mwaa-environment/plugins.zip. For more information, see [Installing custom plugins](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import-plugins.html).
        public var pluginsS3Path: Swift.String?
        /// The version of the requirements.txt  file on your Amazon S3 bucket. You must specify the [version ID](https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html) that Amazon S3 assigns to the file. Version IDs are Unicode, UTF-8 encoded, URL-ready, opaque strings that are no more than 1,024 bytes long. The following is an example: 3sL4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo For more information, see [Installing Python dependencies](https://docs.aws.amazon.com/mwaa/latest/userguide/working-dags-dependencies.html).
        public var requirementsS3ObjectVersion: Swift.String?
        /// The relative path to the requirements.txt file in your Amazon S3 bucket. For example, s3://mwaa-environment/requirements.txt. For more information, see [Installing Python dependencies](https://docs.aws.amazon.com/mwaa/latest/userguide/working-dags-dependencies.html).
        public var requirementsS3Path: Swift.String?
        /// The number of Apache Airflow schedulers that run in your Amazon MWAA environment.
        public var schedulers: Swift.Int?
        /// The Amazon Resource Name (ARN) for the service-linked role of the environment. For more information, see [Amazon MWAA Service-linked role](https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-slr.html).
        public var serviceRoleArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon S3 bucket where your DAG code and supporting files are stored. For example, arn:aws:s3:::my-airflow-bucket-unique-name. For more information, see [Create an Amazon S3 bucket for Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-s3-bucket.html).
        public var sourceBucketArn: Swift.String?
        /// The version of the startup shell script in your Amazon S3 bucket. You must specify the [version ID](https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html) that Amazon S3 assigns to the file. Version IDs are Unicode, UTF-8 encoded, URL-ready, opaque strings that are no more than 1,024 bytes long. The following is an example: 3sL4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo For more information, see [Using a startup script](https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html).
        public var startupScriptS3ObjectVersion: Swift.String?
        /// The relative path to the startup shell script in your Amazon S3 bucket. For example, s3://mwaa-environment/startup.sh. Amazon MWAA runs the script as your environment starts, and before running the Apache Airflow process. You can use this script to install dependencies, modify Apache Airflow configuration options, and set environment variables. For more information, see [Using a startup script](https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html).
        public var startupScriptS3Path: Swift.String?
        /// The status of the Amazon MWAA environment. Valid values:
        ///
        /// * CREATING - Indicates the request to create the environment is in progress.
        ///
        /// * CREATING_SNAPSHOT - Indicates the request to update environment details, or upgrade the environment version, is in progress and Amazon MWAA is creating a storage volume snapshot of the Amazon RDS database cluster associated with the environment. A database snapshot is a backup created at a specific point in time. Amazon MWAA uses snapshots to recover environment metadata if the process to update or upgrade an environment fails.
        ///
        /// * CREATE_FAILED - Indicates the request to create the environment failed, and the environment could not be created.
        ///
        /// * AVAILABLE - Indicates the request was successful and the environment is ready to use.
        ///
        /// * PENDING - Indicates the request was successful, but the process to create the environment is paused until you create the required VPC endpoints in your VPC. After you create the VPC endpoints, the process resumes.
        ///
        /// * UPDATING - Indicates the request to update the environment is in progress.
        ///
        /// * ROLLING_BACK - Indicates the request to update environment details, or upgrade the environment version, failed and Amazon MWAA is restoring the environment using the latest storage volume snapshot.
        ///
        /// * DELETING - Indicates the request to delete the environment is in progress.
        ///
        /// * DELETED - Indicates the request to delete the environment is complete, and the environment has been deleted.
        ///
        /// * UNAVAILABLE - Indicates the request failed, but the environment did not return to its previous state and is not stable.
        ///
        /// * UPDATE_FAILED - Indicates the request to update the environment failed, and the environment was restored to its previous state successfully and is ready to use.
        ///
        /// * MAINTENANCE - Indicates that the environment is undergoing maintenance. Depending on the type of work Amazon MWAA is performing, your environment might become unavailable during this process. After all operations are done, your environment will return to its status prior to mainteneace operations.
        ///
        ///
        /// We recommend reviewing our troubleshooting guide for a list of common errors and their solutions. For more information, see [Amazon MWAA troubleshooting](https://docs.aws.amazon.com/mwaa/latest/userguide/troubleshooting.html).
        public var status: MWAAClientTypes.EnvironmentStatus?
        /// The key-value tag pairs associated to your environment. For example, "Environment": "Staging". For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
        public var tags: [Swift.String: Swift.String]?
        /// The Apache Airflow web server access mode. For more information, see [Apache Airflow access modes](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-networking.html).
        public var webserverAccessMode: MWAAClientTypes.WebserverAccessMode?
        /// The Apache Airflow web server host name for the Amazon MWAA environment. For more information, see [Accessing the Apache Airflow UI](https://docs.aws.amazon.com/mwaa/latest/userguide/access-airflow-ui.html).
        public var webserverUrl: Swift.String?
        /// The VPC endpoint for the environment's web server.
        public var webserverVpcEndpointService: Swift.String?
        /// The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time that weekly maintenance updates are scheduled. For example: TUE:03:30.
        public var weeklyMaintenanceWindowStart: Swift.String?

        public init(
            airflowConfigurationOptions: [Swift.String: Swift.String]? = nil,
            airflowVersion: Swift.String? = nil,
            arn: Swift.String? = nil,
            celeryExecutorQueue: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            dagS3Path: Swift.String? = nil,
            databaseVpcEndpointService: Swift.String? = nil,
            endpointManagement: MWAAClientTypes.EndpointManagement? = nil,
            environmentClass: Swift.String? = nil,
            executionRoleArn: Swift.String? = nil,
            kmsKey: Swift.String? = nil,
            lastUpdate: MWAAClientTypes.LastUpdate? = nil,
            loggingConfiguration: MWAAClientTypes.LoggingConfiguration? = nil,
            maxWebservers: Swift.Int? = nil,
            maxWorkers: Swift.Int? = nil,
            minWebservers: Swift.Int? = nil,
            minWorkers: Swift.Int? = nil,
            name: Swift.String? = nil,
            networkConfiguration: MWAAClientTypes.NetworkConfiguration? = nil,
            pluginsS3ObjectVersion: Swift.String? = nil,
            pluginsS3Path: Swift.String? = nil,
            requirementsS3ObjectVersion: Swift.String? = nil,
            requirementsS3Path: Swift.String? = nil,
            schedulers: Swift.Int? = nil,
            serviceRoleArn: Swift.String? = nil,
            sourceBucketArn: Swift.String? = nil,
            startupScriptS3ObjectVersion: Swift.String? = nil,
            startupScriptS3Path: Swift.String? = nil,
            status: MWAAClientTypes.EnvironmentStatus? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            webserverAccessMode: MWAAClientTypes.WebserverAccessMode? = nil,
            webserverUrl: Swift.String? = nil,
            webserverVpcEndpointService: Swift.String? = nil,
            weeklyMaintenanceWindowStart: Swift.String? = nil
        )
        {
            self.airflowConfigurationOptions = airflowConfigurationOptions
            self.airflowVersion = airflowVersion
            self.arn = arn
            self.celeryExecutorQueue = celeryExecutorQueue
            self.createdAt = createdAt
            self.dagS3Path = dagS3Path
            self.databaseVpcEndpointService = databaseVpcEndpointService
            self.endpointManagement = endpointManagement
            self.environmentClass = environmentClass
            self.executionRoleArn = executionRoleArn
            self.kmsKey = kmsKey
            self.lastUpdate = lastUpdate
            self.loggingConfiguration = loggingConfiguration
            self.maxWebservers = maxWebservers
            self.maxWorkers = maxWorkers
            self.minWebservers = minWebservers
            self.minWorkers = minWorkers
            self.name = name
            self.networkConfiguration = networkConfiguration
            self.pluginsS3ObjectVersion = pluginsS3ObjectVersion
            self.pluginsS3Path = pluginsS3Path
            self.requirementsS3ObjectVersion = requirementsS3ObjectVersion
            self.requirementsS3Path = requirementsS3Path
            self.schedulers = schedulers
            self.serviceRoleArn = serviceRoleArn
            self.sourceBucketArn = sourceBucketArn
            self.startupScriptS3ObjectVersion = startupScriptS3ObjectVersion
            self.startupScriptS3Path = startupScriptS3Path
            self.status = status
            self.tags = tags
            self.webserverAccessMode = webserverAccessMode
            self.webserverUrl = webserverUrl
            self.webserverVpcEndpointService = webserverVpcEndpointService
            self.weeklyMaintenanceWindowStart = weeklyMaintenanceWindowStart
        }
    }
}

extension MWAAClientTypes.Environment: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Environment(airflowVersion: \(Swift.String(describing: airflowVersion)), arn: \(Swift.String(describing: arn)), celeryExecutorQueue: \(Swift.String(describing: celeryExecutorQueue)), createdAt: \(Swift.String(describing: createdAt)), dagS3Path: \(Swift.String(describing: dagS3Path)), databaseVpcEndpointService: \(Swift.String(describing: databaseVpcEndpointService)), endpointManagement: \(Swift.String(describing: endpointManagement)), environmentClass: \(Swift.String(describing: environmentClass)), executionRoleArn: \(Swift.String(describing: executionRoleArn)), kmsKey: \(Swift.String(describing: kmsKey)), lastUpdate: \(Swift.String(describing: lastUpdate)), loggingConfiguration: \(Swift.String(describing: loggingConfiguration)), maxWebservers: \(Swift.String(describing: maxWebservers)), maxWorkers: \(Swift.String(describing: maxWorkers)), minWebservers: \(Swift.String(describing: minWebservers)), minWorkers: \(Swift.String(describing: minWorkers)), name: \(Swift.String(describing: name)), networkConfiguration: \(Swift.String(describing: networkConfiguration)), pluginsS3ObjectVersion: \(Swift.String(describing: pluginsS3ObjectVersion)), pluginsS3Path: \(Swift.String(describing: pluginsS3Path)), requirementsS3ObjectVersion: \(Swift.String(describing: requirementsS3ObjectVersion)), requirementsS3Path: \(Swift.String(describing: requirementsS3Path)), schedulers: \(Swift.String(describing: schedulers)), serviceRoleArn: \(Swift.String(describing: serviceRoleArn)), sourceBucketArn: \(Swift.String(describing: sourceBucketArn)), startupScriptS3ObjectVersion: \(Swift.String(describing: startupScriptS3ObjectVersion)), startupScriptS3Path: \(Swift.String(describing: startupScriptS3Path)), status: \(Swift.String(describing: status)), tags: \(Swift.String(describing: tags)), webserverAccessMode: \(Swift.String(describing: webserverAccessMode)), webserverUrl: \(Swift.String(describing: webserverUrl)), webserverVpcEndpointService: \(Swift.String(describing: webserverVpcEndpointService)), weeklyMaintenanceWindowStart: \(Swift.String(describing: weeklyMaintenanceWindowStart)), airflowConfigurationOptions: \"CONTENT_REDACTED\")"}
}

public struct GetEnvironmentOutput: Swift.Sendable {
    /// An object containing all available details about the environment.
    public var environment: MWAAClientTypes.Environment?

    public init(
        environment: MWAAClientTypes.Environment? = nil
    )
    {
        self.environment = environment
    }
}

/// An exception indicating that a client-side error occurred during the Apache Airflow REST API call.
public struct RestApiClientException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The error response data from the Apache Airflow REST API call, provided as a JSON object.
        public internal(set) var restApiResponse: Smithy.Document? = nil
        /// The HTTP status code returned by the Apache Airflow REST API call.
        public internal(set) var restApiStatusCode: Swift.Int? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RestApiClientException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        restApiResponse: Smithy.Document? = nil,
        restApiStatusCode: Swift.Int? = nil
    )
    {
        self.properties.restApiResponse = restApiResponse
        self.properties.restApiStatusCode = restApiStatusCode
    }
}

extension RestApiClientException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RestApiClientException(restApiStatusCode: \(Swift.String(describing: properties.restApiStatusCode)), restApiResponse: \"CONTENT_REDACTED\")"}
}

/// An exception indicating that a server-side error occurred during the Apache Airflow REST API call.
public struct RestApiServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The error response data from the Apache Airflow REST API call, provided as a JSON object.
        public internal(set) var restApiResponse: Smithy.Document? = nil
        /// The HTTP status code returned by the Apache Airflow REST API call.
        public internal(set) var restApiStatusCode: Swift.Int? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RestApiServerException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        restApiResponse: Smithy.Document? = nil,
        restApiStatusCode: Swift.Int? = nil
    )
    {
        self.properties.restApiResponse = restApiResponse
        self.properties.restApiStatusCode = restApiStatusCode
    }
}

extension RestApiServerException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RestApiServerException(restApiStatusCode: \(Swift.String(describing: properties.restApiStatusCode)), restApiResponse: \"CONTENT_REDACTED\")"}
}

extension MWAAClientTypes {

    public enum RestApiMethod: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case delete
        case `get`
        case patch
        case post
        case put
        case sdkUnknown(Swift.String)

        public static var allCases: [RestApiMethod] {
            return [
                .delete,
                .get,
                .patch,
                .post,
                .put
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .delete: return "DELETE"
            case .get: return "GET"
            case .patch: return "PATCH"
            case .post: return "POST"
            case .put: return "PUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct InvokeRestApiInput: Swift.Sendable {
    /// The request body for the Apache Airflow REST API call, provided as a JSON object.
    public var body: Smithy.Document?
    /// The HTTP method used for making Airflow REST API calls. For example, POST.
    /// This member is required.
    public var method: MWAAClientTypes.RestApiMethod?
    /// The name of the Amazon MWAA environment. For example, MyMWAAEnvironment.
    /// This member is required.
    public var name: Swift.String?
    /// The Apache Airflow REST API endpoint path to be called. For example, /dags/123456/clearTaskInstances. For more information, see [Apache Airflow API](https://airflow.apache.org/docs/apache-airflow/stable/stable-rest-api-ref.html)
    /// This member is required.
    public var path: Swift.String?
    /// Query parameters to be included in the Apache Airflow REST API call, provided as a JSON object.
    public var queryParameters: Smithy.Document?

    public init(
        body: Smithy.Document? = nil,
        method: MWAAClientTypes.RestApiMethod? = nil,
        name: Swift.String? = nil,
        path: Swift.String? = nil,
        queryParameters: Smithy.Document? = nil
    )
    {
        self.body = body
        self.method = method
        self.name = name
        self.path = path
        self.queryParameters = queryParameters
    }
}

extension InvokeRestApiInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvokeRestApiInput(method: \(Swift.String(describing: method)), name: \(Swift.String(describing: name)), path: \(Swift.String(describing: path)), queryParameters: \(Swift.String(describing: queryParameters)), body: \"CONTENT_REDACTED\")"}
}

public struct InvokeRestApiOutput: Swift.Sendable {
    /// The response data from the Apache Airflow REST API call, provided as a JSON object.
    public var restApiResponse: Smithy.Document?
    /// The HTTP status code returned by the Apache Airflow REST API call.
    public var restApiStatusCode: Swift.Int?

    public init(
        restApiResponse: Smithy.Document? = nil,
        restApiStatusCode: Swift.Int? = nil
    )
    {
        self.restApiResponse = restApiResponse
        self.restApiStatusCode = restApiStatusCode
    }
}

extension InvokeRestApiOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvokeRestApiOutput(restApiStatusCode: \(Swift.String(describing: restApiStatusCode)), restApiResponse: \"CONTENT_REDACTED\")"}
}

public struct ListEnvironmentsInput: Swift.Sendable {
    /// The maximum number of results to retrieve per page. For example, 5 environments per page.
    public var maxResults: Swift.Int?
    /// Retrieves the next page of the results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListEnvironmentsOutput: Swift.Sendable {
    /// Returns a list of Amazon MWAA environments.
    /// This member is required.
    public var environments: [Swift.String]?
    /// Retrieves the next page of the results.
    public var nextToken: Swift.String?

    public init(
        environments: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.environments = environments
        self.nextToken = nextToken
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the Amazon MWAA environment. For example, arn:aws:airflow:us-east-1:123456789012:environment/MyMWAAEnvironment.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// The key-value tag pairs associated to your environment. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

extension MWAAClientTypes {

    /// Internal only. Represents the dimensions of a metric. To learn more about the metrics published to Amazon CloudWatch, see [Amazon MWAA performance metrics in Amazon CloudWatch](https://docs.aws.amazon.com/mwaa/latest/userguide/cw-metrics.html).
    @available(*, deprecated, message: "This type is for internal use and not meant for public use. Data set for this type will be ignored.")
    public struct Dimension: Swift.Sendable {
        /// Internal only. The name of the dimension.
        /// This member is required.
        public var name: Swift.String?
        /// Internal only. The value of the dimension.
        /// This member is required.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }
}

extension MWAAClientTypes {

    /// Internal only. Represents a set of statistics that describe a specific metric. To learn more about the metrics published to Amazon CloudWatch, see [Amazon MWAA performance metrics in Amazon CloudWatch](https://docs.aws.amazon.com/mwaa/latest/userguide/cw-metrics.html).
    @available(*, deprecated, message: "This type is for internal use and not meant for public use. Data set for this type will be ignored.")
    public struct StatisticSet: Swift.Sendable {
        /// Internal only. The maximum value of the sample set.
        public var maximum: Swift.Double?
        /// Internal only. The minimum value of the sample set.
        public var minimum: Swift.Double?
        /// Internal only. The number of samples used for the statistic set.
        public var sampleCount: Swift.Int?
        /// Internal only. The sum of values for the sample set.
        public var sum: Swift.Double?

        public init(
            maximum: Swift.Double? = nil,
            minimum: Swift.Double? = nil,
            sampleCount: Swift.Int? = nil,
            sum: Swift.Double? = nil
        )
        {
            self.maximum = maximum
            self.minimum = minimum
            self.sampleCount = sampleCount
            self.sum = sum
        }
    }
}

extension MWAAClientTypes {

    public enum Unit: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bits
        case bitsPerSecond
        case bytes
        case bytesPerSecond
        case count
        case countPerSecond
        case gigabits
        case gigabitsPerSecond
        case gigabytes
        case gigabytesPerSecond
        case kilobits
        case kilobitsPerSecond
        case kilobytes
        case kilobytesPerSecond
        case megabits
        case megabitsPerSecond
        case megabytes
        case megabytesPerSecond
        case microseconds
        case milliseconds
        case `none`
        case percent
        case seconds
        case terabits
        case terabitsPerSecond
        case terabytes
        case terabytesPerSecond
        case sdkUnknown(Swift.String)

        public static var allCases: [Unit] {
            return [
                .bits,
                .bitsPerSecond,
                .bytes,
                .bytesPerSecond,
                .count,
                .countPerSecond,
                .gigabits,
                .gigabitsPerSecond,
                .gigabytes,
                .gigabytesPerSecond,
                .kilobits,
                .kilobitsPerSecond,
                .kilobytes,
                .kilobytesPerSecond,
                .megabits,
                .megabitsPerSecond,
                .megabytes,
                .megabytesPerSecond,
                .microseconds,
                .milliseconds,
                .none,
                .percent,
                .seconds,
                .terabits,
                .terabitsPerSecond,
                .terabytes,
                .terabytesPerSecond
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bits: return "Bits"
            case .bitsPerSecond: return "Bits/Second"
            case .bytes: return "Bytes"
            case .bytesPerSecond: return "Bytes/Second"
            case .count: return "Count"
            case .countPerSecond: return "Count/Second"
            case .gigabits: return "Gigabits"
            case .gigabitsPerSecond: return "Gigabits/Second"
            case .gigabytes: return "Gigabytes"
            case .gigabytesPerSecond: return "Gigabytes/Second"
            case .kilobits: return "Kilobits"
            case .kilobitsPerSecond: return "Kilobits/Second"
            case .kilobytes: return "Kilobytes"
            case .kilobytesPerSecond: return "Kilobytes/Second"
            case .megabits: return "Megabits"
            case .megabitsPerSecond: return "Megabits/Second"
            case .megabytes: return "Megabytes"
            case .megabytesPerSecond: return "Megabytes/Second"
            case .microseconds: return "Microseconds"
            case .milliseconds: return "Milliseconds"
            case .none: return "None"
            case .percent: return "Percent"
            case .seconds: return "Seconds"
            case .terabits: return "Terabits"
            case .terabitsPerSecond: return "Terabits/Second"
            case .terabytes: return "Terabytes"
            case .terabytesPerSecond: return "Terabytes/Second"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MWAAClientTypes {

    /// Internal only. Collects Apache Airflow metrics. To learn more about the metrics published to Amazon CloudWatch, see [Amazon MWAA performance metrics in Amazon CloudWatch](https://docs.aws.amazon.com/mwaa/latest/userguide/cw-metrics.html).
    @available(*, deprecated, message: "This type is for internal use and not meant for public use. Data set for this type will be ignored.")
    public struct MetricDatum: Swift.Sendable {
        /// Internal only. The dimensions associated with the metric.
        @available(*, deprecated, message: "This type is for internal use and not meant for public use. Data set for this type will be ignored.")
        public var dimensions: [MWAAClientTypes.Dimension]?
        /// Internal only. The name of the metric.
        /// This member is required.
        public var metricName: Swift.String?
        /// Internal only. The statistical values for the metric.
        @available(*, deprecated, message: "This type is for internal use and not meant for public use. Data set for this type will be ignored.")
        public var statisticValues: MWAAClientTypes.StatisticSet?
        /// Internal only. The time the metric data was received.
        /// This member is required.
        public var timestamp: Foundation.Date?
        /// Internal only. The unit used to store the metric.
        public var unit: MWAAClientTypes.Unit?
        /// Internal only. The value for the metric.
        public var value: Swift.Double?

        public init(
            dimensions: [MWAAClientTypes.Dimension]? = nil,
            metricName: Swift.String? = nil,
            statisticValues: MWAAClientTypes.StatisticSet? = nil,
            timestamp: Foundation.Date? = nil,
            unit: MWAAClientTypes.Unit? = nil,
            value: Swift.Double? = nil
        )
        {
            self.dimensions = dimensions
            self.metricName = metricName
            self.statisticValues = statisticValues
            self.timestamp = timestamp
            self.unit = unit
            self.value = value
        }
    }
}

@available(*, deprecated, message: "This type is for internal use and not meant for public use. Data set for this type will be ignored.")
public struct PublishMetricsInput: Swift.Sendable {
    /// Internal only. The name of the environment.
    /// This member is required.
    public var environmentName: Swift.String?
    /// Internal only. Publishes metrics to Amazon CloudWatch. To learn more about the metrics published to Amazon CloudWatch, see [Amazon MWAA performance metrics in Amazon CloudWatch](https://docs.aws.amazon.com/mwaa/latest/userguide/cw-metrics.html).
    /// This member is required.
    @available(*, deprecated, message: "This type is for internal use and not meant for public use. Data set for this type will be ignored.")
    public var metricData: [MWAAClientTypes.MetricDatum]?

    public init(
        environmentName: Swift.String? = nil,
        metricData: [MWAAClientTypes.MetricDatum]? = nil
    )
    {
        self.environmentName = environmentName
        self.metricData = metricData
    }
}

@available(*, deprecated, message: "This type is for internal use and not meant for public use. Data set for this type will be ignored.")
public struct PublishMetricsOutput: Swift.Sendable {

    public init() { }
}

public struct TagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the Amazon MWAA environment. For example, arn:aws:airflow:us-east-1:123456789012:environment/MyMWAAEnvironment.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The key-value tag pairs you want to associate to your environment. For example, "Environment": "Staging". For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the Amazon MWAA environment. For example, arn:aws:airflow:us-east-1:123456789012:environment/MyMWAAEnvironment.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The key-value tag pair you want to remove. For example, "Environment": "Staging".
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

extension MWAAClientTypes {

    /// Defines the VPC networking components used to secure and enable network traffic between the Amazon Web Services resources for your environment. For more information, see [About networking on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/networking-about.html).
    public struct UpdateNetworkConfigurationInput: Swift.Sendable {
        /// A list of security group IDs. A security group must be attached to the same VPC as the subnets. For more information, see [Security in your VPC on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/vpc-security.html).
        /// This member is required.
        public var securityGroupIds: [Swift.String]?

        public init(
            securityGroupIds: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
        }
    }
}

public struct UpdateEnvironmentInput: Swift.Sendable {
    /// A list of key-value pairs containing the Apache Airflow configuration options you want to attach to your environment. For more information, see [Apache Airflow configuration options](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html).
    public var airflowConfigurationOptions: [Swift.String: Swift.String]?
    /// The Apache Airflow version for your environment. To upgrade your environment, specify a newer version of Apache Airflow supported by Amazon MWAA. Before you upgrade an environment, make sure your requirements, DAGs, plugins, and other resources used in your workflows are compatible with the new Apache Airflow version. For more information about updating your resources, see [Upgrading an Amazon MWAA environment](https://docs.aws.amazon.com/mwaa/latest/userguide/upgrading-environment.html). Valid values: 1.10.12, 2.0.2, 2.2.2, 2.4.3, 2.5.1, 2.6.3, 2.7.2, 2.8.1, 2.9.2, and 2.10.1.
    public var airflowVersion: Swift.String?
    /// The relative path to the DAGs folder on your Amazon S3 bucket. For example, dags. For more information, see [Adding or updating DAGs](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-folder.html).
    public var dagS3Path: Swift.String?
    /// The environment class type. Valid values: mw1.small, mw1.medium, mw1.large, mw1.xlarge, and mw1.2xlarge. For more information, see [Amazon MWAA environment class](https://docs.aws.amazon.com/mwaa/latest/userguide/environment-class.html).
    public var environmentClass: Swift.String?
    /// The Amazon Resource Name (ARN) of the execution role in IAM that allows MWAA to access Amazon Web Services resources in your environment. For example, arn:aws:iam::123456789:role/my-execution-role. For more information, see [Amazon MWAA Execution role](https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-create-role.html).
    public var executionRoleArn: Swift.String?
    /// The Apache Airflow log types to send to CloudWatch Logs.
    public var loggingConfiguration: MWAAClientTypes.LoggingConfigurationInput?
    /// The maximum number of web servers that you want to run in your environment. Amazon MWAA scales the number of Apache Airflow web servers up to the number you specify for MaxWebservers when you interact with your Apache Airflow environment using Apache Airflow REST API, or the Apache Airflow CLI. For example, in scenarios where your workload requires network calls to the Apache Airflow REST API with a high transaction-per-second (TPS) rate, Amazon MWAA will increase the number of web servers up to the number set in MaxWebserers. As TPS rates decrease Amazon MWAA disposes of the additional web servers, and scales down to the number set in MinxWebserers. Valid values: Accepts between 2 and 5. Defaults to 2.
    public var maxWebservers: Swift.Int?
    /// The maximum number of workers that you want to run in your environment. MWAA scales the number of Apache Airflow workers up to the number you specify in the MaxWorkers field. For example, 20. When there are no more tasks running, and no more in the queue, MWAA disposes of the extra workers leaving the one worker that is included with your environment, or the number you specify in MinWorkers.
    public var maxWorkers: Swift.Int?
    /// The minimum number of web servers that you want to run in your environment. Amazon MWAA scales the number of Apache Airflow web servers up to the number you specify for MaxWebservers when you interact with your Apache Airflow environment using Apache Airflow REST API, or the Apache Airflow CLI. As the transaction-per-second rate, and the network load, decrease, Amazon MWAA disposes of the additional web servers, and scales down to the number set in MinxWebserers. Valid values: Accepts between 2 and 5. Defaults to 2.
    public var minWebservers: Swift.Int?
    /// The minimum number of workers that you want to run in your environment. MWAA scales the number of Apache Airflow workers up to the number you specify in the MaxWorkers field. When there are no more tasks running, and no more in the queue, MWAA disposes of the extra workers leaving the worker count you specify in the MinWorkers field. For example, 2.
    public var minWorkers: Swift.Int?
    /// The name of your Amazon MWAA environment. For example, MyMWAAEnvironment.
    /// This member is required.
    public var name: Swift.String?
    /// The VPC networking components used to secure and enable network traffic between the Amazon Web Services resources for your environment. For more information, see [About networking on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/networking-about.html).
    public var networkConfiguration: MWAAClientTypes.UpdateNetworkConfigurationInput?
    /// The version of the plugins.zip file on your Amazon S3 bucket. You must specify a version each time a plugins.zip file is updated. For more information, see [How S3 Versioning works](https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html).
    public var pluginsS3ObjectVersion: Swift.String?
    /// The relative path to the plugins.zip file on your Amazon S3 bucket. For example, plugins.zip. If specified, then the plugins.zip version is required. For more information, see [Installing custom plugins](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import-plugins.html).
    public var pluginsS3Path: Swift.String?
    /// The version of the requirements.txt file on your Amazon S3 bucket. You must specify a version each time a requirements.txt file is updated. For more information, see [How S3 Versioning works](https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html).
    public var requirementsS3ObjectVersion: Swift.String?
    /// The relative path to the requirements.txt file on your Amazon S3 bucket. For example, requirements.txt. If specified, then a file version is required. For more information, see [Installing Python dependencies](https://docs.aws.amazon.com/mwaa/latest/userguide/working-dags-dependencies.html).
    public var requirementsS3Path: Swift.String?
    /// The number of Apache Airflow schedulers to run in your Amazon MWAA environment.
    public var schedulers: Swift.Int?
    /// The Amazon Resource Name (ARN) of the Amazon S3 bucket where your DAG code and supporting files are stored. For example, arn:aws:s3:::my-airflow-bucket-unique-name. For more information, see [Create an Amazon S3 bucket for Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-s3-bucket.html).
    public var sourceBucketArn: Swift.String?
    /// The version of the startup shell script in your Amazon S3 bucket. You must specify the [version ID](https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html) that Amazon S3 assigns to the file every time you update the script. Version IDs are Unicode, UTF-8 encoded, URL-ready, opaque strings that are no more than 1,024 bytes long. The following is an example: 3sL4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo For more information, see [Using a startup script](https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html).
    public var startupScriptS3ObjectVersion: Swift.String?
    /// The relative path to the startup shell script in your Amazon S3 bucket. For example, s3://mwaa-environment/startup.sh. Amazon MWAA runs the script as your environment starts, and before running the Apache Airflow process. You can use this script to install dependencies, modify Apache Airflow configuration options, and set environment variables. For more information, see [Using a startup script](https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html).
    public var startupScriptS3Path: Swift.String?
    /// The Apache Airflow Web server access mode. For more information, see [Apache Airflow access modes](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-networking.html).
    public var webserverAccessMode: MWAAClientTypes.WebserverAccessMode?
    /// The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time to start weekly maintenance updates of your environment in the following format: DAY:HH:MM. For example: TUE:03:30. You can specify a start time in 30 minute increments only.
    public var weeklyMaintenanceWindowStart: Swift.String?

    public init(
        airflowConfigurationOptions: [Swift.String: Swift.String]? = nil,
        airflowVersion: Swift.String? = nil,
        dagS3Path: Swift.String? = nil,
        environmentClass: Swift.String? = nil,
        executionRoleArn: Swift.String? = nil,
        loggingConfiguration: MWAAClientTypes.LoggingConfigurationInput? = nil,
        maxWebservers: Swift.Int? = nil,
        maxWorkers: Swift.Int? = nil,
        minWebservers: Swift.Int? = nil,
        minWorkers: Swift.Int? = nil,
        name: Swift.String? = nil,
        networkConfiguration: MWAAClientTypes.UpdateNetworkConfigurationInput? = nil,
        pluginsS3ObjectVersion: Swift.String? = nil,
        pluginsS3Path: Swift.String? = nil,
        requirementsS3ObjectVersion: Swift.String? = nil,
        requirementsS3Path: Swift.String? = nil,
        schedulers: Swift.Int? = nil,
        sourceBucketArn: Swift.String? = nil,
        startupScriptS3ObjectVersion: Swift.String? = nil,
        startupScriptS3Path: Swift.String? = nil,
        webserverAccessMode: MWAAClientTypes.WebserverAccessMode? = nil,
        weeklyMaintenanceWindowStart: Swift.String? = nil
    )
    {
        self.airflowConfigurationOptions = airflowConfigurationOptions
        self.airflowVersion = airflowVersion
        self.dagS3Path = dagS3Path
        self.environmentClass = environmentClass
        self.executionRoleArn = executionRoleArn
        self.loggingConfiguration = loggingConfiguration
        self.maxWebservers = maxWebservers
        self.maxWorkers = maxWorkers
        self.minWebservers = minWebservers
        self.minWorkers = minWorkers
        self.name = name
        self.networkConfiguration = networkConfiguration
        self.pluginsS3ObjectVersion = pluginsS3ObjectVersion
        self.pluginsS3Path = pluginsS3Path
        self.requirementsS3ObjectVersion = requirementsS3ObjectVersion
        self.requirementsS3Path = requirementsS3Path
        self.schedulers = schedulers
        self.sourceBucketArn = sourceBucketArn
        self.startupScriptS3ObjectVersion = startupScriptS3ObjectVersion
        self.startupScriptS3Path = startupScriptS3Path
        self.webserverAccessMode = webserverAccessMode
        self.weeklyMaintenanceWindowStart = weeklyMaintenanceWindowStart
    }
}

extension UpdateEnvironmentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateEnvironmentInput(airflowVersion: \(Swift.String(describing: airflowVersion)), dagS3Path: \(Swift.String(describing: dagS3Path)), environmentClass: \(Swift.String(describing: environmentClass)), executionRoleArn: \(Swift.String(describing: executionRoleArn)), loggingConfiguration: \(Swift.String(describing: loggingConfiguration)), maxWebservers: \(Swift.String(describing: maxWebservers)), maxWorkers: \(Swift.String(describing: maxWorkers)), minWebservers: \(Swift.String(describing: minWebservers)), minWorkers: \(Swift.String(describing: minWorkers)), name: \(Swift.String(describing: name)), networkConfiguration: \(Swift.String(describing: networkConfiguration)), pluginsS3ObjectVersion: \(Swift.String(describing: pluginsS3ObjectVersion)), pluginsS3Path: \(Swift.String(describing: pluginsS3Path)), requirementsS3ObjectVersion: \(Swift.String(describing: requirementsS3ObjectVersion)), requirementsS3Path: \(Swift.String(describing: requirementsS3Path)), schedulers: \(Swift.String(describing: schedulers)), sourceBucketArn: \(Swift.String(describing: sourceBucketArn)), startupScriptS3ObjectVersion: \(Swift.String(describing: startupScriptS3ObjectVersion)), startupScriptS3Path: \(Swift.String(describing: startupScriptS3Path)), webserverAccessMode: \(Swift.String(describing: webserverAccessMode)), weeklyMaintenanceWindowStart: \(Swift.String(describing: weeklyMaintenanceWindowStart)), airflowConfigurationOptions: \"CONTENT_REDACTED\")"}
}

public struct UpdateEnvironmentOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the Amazon MWAA environment. For example, arn:aws:airflow:us-east-1:123456789012:environment/MyMWAAEnvironment.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

extension CreateCliTokenInput {

    static func urlPathProvider(_ value: CreateCliTokenInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/clitoken/\(name.urlPercentEncoding())"
    }
}

extension CreateEnvironmentInput {

    static func urlPathProvider(_ value: CreateEnvironmentInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/environments/\(name.urlPercentEncoding())"
    }
}

extension CreateWebLoginTokenInput {

    static func urlPathProvider(_ value: CreateWebLoginTokenInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/webtoken/\(name.urlPercentEncoding())"
    }
}

extension DeleteEnvironmentInput {

    static func urlPathProvider(_ value: DeleteEnvironmentInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/environments/\(name.urlPercentEncoding())"
    }
}

extension GetEnvironmentInput {

    static func urlPathProvider(_ value: GetEnvironmentInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/environments/\(name.urlPercentEncoding())"
    }
}

extension InvokeRestApiInput {

    static func urlPathProvider(_ value: InvokeRestApiInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/restapi/\(name.urlPercentEncoding())"
    }
}

extension ListEnvironmentsInput {

    static func urlPathProvider(_ value: ListEnvironmentsInput) -> Swift.String? {
        return "/environments"
    }
}

extension ListEnvironmentsInput {

    static func queryItemProvider(_ value: ListEnvironmentsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension PublishMetricsInput {

    static func urlPathProvider(_ value: PublishMetricsInput) -> Swift.String? {
        guard let environmentName = value.environmentName else {
            return nil
        }
        return "/metrics/environments/\(environmentName.urlPercentEncoding())"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateEnvironmentInput {

    static func urlPathProvider(_ value: UpdateEnvironmentInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/environments/\(name.urlPercentEncoding())"
    }
}

extension CreateEnvironmentInput {

    static func write(value: CreateEnvironmentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AirflowConfigurationOptions"].writeMap(value.airflowConfigurationOptions, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["AirflowVersion"].write(value.airflowVersion)
        try writer["DagS3Path"].write(value.dagS3Path)
        try writer["EndpointManagement"].write(value.endpointManagement)
        try writer["EnvironmentClass"].write(value.environmentClass)
        try writer["ExecutionRoleArn"].write(value.executionRoleArn)
        try writer["KmsKey"].write(value.kmsKey)
        try writer["LoggingConfiguration"].write(value.loggingConfiguration, with: MWAAClientTypes.LoggingConfigurationInput.write(value:to:))
        try writer["MaxWebservers"].write(value.maxWebservers)
        try writer["MaxWorkers"].write(value.maxWorkers)
        try writer["MinWebservers"].write(value.minWebservers)
        try writer["MinWorkers"].write(value.minWorkers)
        try writer["NetworkConfiguration"].write(value.networkConfiguration, with: MWAAClientTypes.NetworkConfiguration.write(value:to:))
        try writer["PluginsS3ObjectVersion"].write(value.pluginsS3ObjectVersion)
        try writer["PluginsS3Path"].write(value.pluginsS3Path)
        try writer["RequirementsS3ObjectVersion"].write(value.requirementsS3ObjectVersion)
        try writer["RequirementsS3Path"].write(value.requirementsS3Path)
        try writer["Schedulers"].write(value.schedulers)
        try writer["SourceBucketArn"].write(value.sourceBucketArn)
        try writer["StartupScriptS3ObjectVersion"].write(value.startupScriptS3ObjectVersion)
        try writer["StartupScriptS3Path"].write(value.startupScriptS3Path)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["WebserverAccessMode"].write(value.webserverAccessMode)
        try writer["WeeklyMaintenanceWindowStart"].write(value.weeklyMaintenanceWindowStart)
    }
}

extension InvokeRestApiInput {

    static func write(value: InvokeRestApiInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Body"].write(value.body)
        try writer["Method"].write(value.method)
        try writer["Path"].write(value.path)
        try writer["QueryParameters"].write(value.queryParameters)
    }
}

extension PublishMetricsInput {

    static func write(value: PublishMetricsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MetricData"].writeList(value.metricData, memberWritingClosure: MWAAClientTypes.MetricDatum.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UpdateEnvironmentInput {

    static func write(value: UpdateEnvironmentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AirflowConfigurationOptions"].writeMap(value.airflowConfigurationOptions, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["AirflowVersion"].write(value.airflowVersion)
        try writer["DagS3Path"].write(value.dagS3Path)
        try writer["EnvironmentClass"].write(value.environmentClass)
        try writer["ExecutionRoleArn"].write(value.executionRoleArn)
        try writer["LoggingConfiguration"].write(value.loggingConfiguration, with: MWAAClientTypes.LoggingConfigurationInput.write(value:to:))
        try writer["MaxWebservers"].write(value.maxWebservers)
        try writer["MaxWorkers"].write(value.maxWorkers)
        try writer["MinWebservers"].write(value.minWebservers)
        try writer["MinWorkers"].write(value.minWorkers)
        try writer["NetworkConfiguration"].write(value.networkConfiguration, with: MWAAClientTypes.UpdateNetworkConfigurationInput.write(value:to:))
        try writer["PluginsS3ObjectVersion"].write(value.pluginsS3ObjectVersion)
        try writer["PluginsS3Path"].write(value.pluginsS3Path)
        try writer["RequirementsS3ObjectVersion"].write(value.requirementsS3ObjectVersion)
        try writer["RequirementsS3Path"].write(value.requirementsS3Path)
        try writer["Schedulers"].write(value.schedulers)
        try writer["SourceBucketArn"].write(value.sourceBucketArn)
        try writer["StartupScriptS3ObjectVersion"].write(value.startupScriptS3ObjectVersion)
        try writer["StartupScriptS3Path"].write(value.startupScriptS3Path)
        try writer["WebserverAccessMode"].write(value.webserverAccessMode)
        try writer["WeeklyMaintenanceWindowStart"].write(value.weeklyMaintenanceWindowStart)
    }
}

extension CreateCliTokenOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCliTokenOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateCliTokenOutput()
        value.cliToken = try reader["CliToken"].readIfPresent()
        value.webServerHostname = try reader["WebServerHostname"].readIfPresent()
        return value
    }
}

extension CreateEnvironmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEnvironmentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEnvironmentOutput()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension CreateWebLoginTokenOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateWebLoginTokenOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateWebLoginTokenOutput()
        value.airflowIdentity = try reader["AirflowIdentity"].readIfPresent()
        value.iamIdentity = try reader["IamIdentity"].readIfPresent()
        value.webServerHostname = try reader["WebServerHostname"].readIfPresent()
        value.webToken = try reader["WebToken"].readIfPresent()
        return value
    }
}

extension DeleteEnvironmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEnvironmentOutput {
        return DeleteEnvironmentOutput()
    }
}

extension GetEnvironmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetEnvironmentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetEnvironmentOutput()
        value.environment = try reader["Environment"].readIfPresent(with: MWAAClientTypes.Environment.read(from:))
        return value
    }
}

extension InvokeRestApiOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> InvokeRestApiOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = InvokeRestApiOutput()
        value.restApiResponse = try reader["RestApiResponse"].readIfPresent()
        value.restApiStatusCode = try reader["RestApiStatusCode"].readIfPresent()
        return value
    }
}

extension ListEnvironmentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEnvironmentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEnvironmentsOutput()
        value.environments = try reader["Environments"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension PublishMetricsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PublishMetricsOutput {
        return PublishMetricsOutput()
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateEnvironmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateEnvironmentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateEnvironmentOutput()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

enum CreateCliTokenOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEnvironmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateWebLoginTokenOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEnvironmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetEnvironmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum InvokeRestApiOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "RestApiClientException": return try RestApiClientException.makeError(baseError: baseError)
            case "RestApiServerException": return try RestApiServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEnvironmentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PublishMetricsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateEnvironmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RestApiServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> RestApiServerException {
        let reader = baseError.errorBodyReader
        var value = RestApiServerException()
        value.properties.restApiResponse = try reader["RestApiResponse"].readIfPresent()
        value.properties.restApiStatusCode = try reader["RestApiStatusCode"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RestApiClientException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> RestApiClientException {
        let reader = baseError.errorBodyReader
        var value = RestApiClientException()
        value.properties.restApiResponse = try reader["RestApiResponse"].readIfPresent()
        value.properties.restApiStatusCode = try reader["RestApiStatusCode"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MWAAClientTypes.Environment {

    static func read(from reader: SmithyJSON.Reader) throws -> MWAAClientTypes.Environment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MWAAClientTypes.Environment()
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.webserverUrl = try reader["WebserverUrl"].readIfPresent()
        value.executionRoleArn = try reader["ExecutionRoleArn"].readIfPresent()
        value.serviceRoleArn = try reader["ServiceRoleArn"].readIfPresent()
        value.kmsKey = try reader["KmsKey"].readIfPresent()
        value.airflowVersion = try reader["AirflowVersion"].readIfPresent()
        value.sourceBucketArn = try reader["SourceBucketArn"].readIfPresent()
        value.dagS3Path = try reader["DagS3Path"].readIfPresent()
        value.pluginsS3Path = try reader["PluginsS3Path"].readIfPresent()
        value.pluginsS3ObjectVersion = try reader["PluginsS3ObjectVersion"].readIfPresent()
        value.requirementsS3Path = try reader["RequirementsS3Path"].readIfPresent()
        value.requirementsS3ObjectVersion = try reader["RequirementsS3ObjectVersion"].readIfPresent()
        value.startupScriptS3Path = try reader["StartupScriptS3Path"].readIfPresent()
        value.startupScriptS3ObjectVersion = try reader["StartupScriptS3ObjectVersion"].readIfPresent()
        value.airflowConfigurationOptions = try reader["AirflowConfigurationOptions"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.environmentClass = try reader["EnvironmentClass"].readIfPresent()
        value.maxWorkers = try reader["MaxWorkers"].readIfPresent()
        value.networkConfiguration = try reader["NetworkConfiguration"].readIfPresent(with: MWAAClientTypes.NetworkConfiguration.read(from:))
        value.loggingConfiguration = try reader["LoggingConfiguration"].readIfPresent(with: MWAAClientTypes.LoggingConfiguration.read(from:))
        value.lastUpdate = try reader["LastUpdate"].readIfPresent(with: MWAAClientTypes.LastUpdate.read(from:))
        value.weeklyMaintenanceWindowStart = try reader["WeeklyMaintenanceWindowStart"].readIfPresent()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.webserverAccessMode = try reader["WebserverAccessMode"].readIfPresent()
        value.minWorkers = try reader["MinWorkers"].readIfPresent()
        value.schedulers = try reader["Schedulers"].readIfPresent()
        value.webserverVpcEndpointService = try reader["WebserverVpcEndpointService"].readIfPresent()
        value.databaseVpcEndpointService = try reader["DatabaseVpcEndpointService"].readIfPresent()
        value.celeryExecutorQueue = try reader["CeleryExecutorQueue"].readIfPresent()
        value.endpointManagement = try reader["EndpointManagement"].readIfPresent()
        value.minWebservers = try reader["MinWebservers"].readIfPresent()
        value.maxWebservers = try reader["MaxWebservers"].readIfPresent()
        return value
    }
}

extension MWAAClientTypes.LastUpdate {

    static func read(from reader: SmithyJSON.Reader) throws -> MWAAClientTypes.LastUpdate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MWAAClientTypes.LastUpdate()
        value.status = try reader["Status"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.error = try reader["Error"].readIfPresent(with: MWAAClientTypes.UpdateError.read(from:))
        value.source = try reader["Source"].readIfPresent()
        return value
    }
}

extension MWAAClientTypes.UpdateError {

    static func read(from reader: SmithyJSON.Reader) throws -> MWAAClientTypes.UpdateError {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MWAAClientTypes.UpdateError()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension MWAAClientTypes.LoggingConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> MWAAClientTypes.LoggingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MWAAClientTypes.LoggingConfiguration()
        value.dagProcessingLogs = try reader["DagProcessingLogs"].readIfPresent(with: MWAAClientTypes.ModuleLoggingConfiguration.read(from:))
        value.schedulerLogs = try reader["SchedulerLogs"].readIfPresent(with: MWAAClientTypes.ModuleLoggingConfiguration.read(from:))
        value.webserverLogs = try reader["WebserverLogs"].readIfPresent(with: MWAAClientTypes.ModuleLoggingConfiguration.read(from:))
        value.workerLogs = try reader["WorkerLogs"].readIfPresent(with: MWAAClientTypes.ModuleLoggingConfiguration.read(from:))
        value.taskLogs = try reader["TaskLogs"].readIfPresent(with: MWAAClientTypes.ModuleLoggingConfiguration.read(from:))
        return value
    }
}

extension MWAAClientTypes.ModuleLoggingConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> MWAAClientTypes.ModuleLoggingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MWAAClientTypes.ModuleLoggingConfiguration()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.logLevel = try reader["LogLevel"].readIfPresent()
        value.cloudWatchLogGroupArn = try reader["CloudWatchLogGroupArn"].readIfPresent()
        return value
    }
}

extension MWAAClientTypes.NetworkConfiguration {

    static func write(value: MWAAClientTypes.NetworkConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SubnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MWAAClientTypes.NetworkConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MWAAClientTypes.NetworkConfiguration()
        value.subnetIds = try reader["SubnetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.securityGroupIds = try reader["SecurityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MWAAClientTypes.LoggingConfigurationInput {

    static func write(value: MWAAClientTypes.LoggingConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DagProcessingLogs"].write(value.dagProcessingLogs, with: MWAAClientTypes.ModuleLoggingConfigurationInput.write(value:to:))
        try writer["SchedulerLogs"].write(value.schedulerLogs, with: MWAAClientTypes.ModuleLoggingConfigurationInput.write(value:to:))
        try writer["TaskLogs"].write(value.taskLogs, with: MWAAClientTypes.ModuleLoggingConfigurationInput.write(value:to:))
        try writer["WebserverLogs"].write(value.webserverLogs, with: MWAAClientTypes.ModuleLoggingConfigurationInput.write(value:to:))
        try writer["WorkerLogs"].write(value.workerLogs, with: MWAAClientTypes.ModuleLoggingConfigurationInput.write(value:to:))
    }
}

extension MWAAClientTypes.ModuleLoggingConfigurationInput {

    static func write(value: MWAAClientTypes.ModuleLoggingConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["LogLevel"].write(value.logLevel)
    }
}

extension MWAAClientTypes.MetricDatum {

    static func write(value: MWAAClientTypes.MetricDatum?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Dimensions"].writeList(value.dimensions, memberWritingClosure: MWAAClientTypes.Dimension.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MetricName"].write(value.metricName)
        try writer["StatisticValues"].write(value.statisticValues, with: MWAAClientTypes.StatisticSet.write(value:to:))
        try writer["Timestamp"].writeTimestamp(value.timestamp, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["Unit"].write(value.unit)
        try writer["Value"].write(value.value)
    }
}

extension MWAAClientTypes.StatisticSet {

    static func write(value: MWAAClientTypes.StatisticSet?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Maximum"].write(value.maximum)
        try writer["Minimum"].write(value.minimum)
        try writer["SampleCount"].write(value.sampleCount)
        try writer["Sum"].write(value.sum)
    }
}

extension MWAAClientTypes.Dimension {

    static func write(value: MWAAClientTypes.Dimension?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Value"].write(value.value)
    }
}

extension MWAAClientTypes.UpdateNetworkConfigurationInput {

    static func write(value: MWAAClientTypes.UpdateNetworkConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public enum MWAAClientTypes {}
