//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError

/// You do not have sufficient access to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Exception raised to indicate that authorization of an action was successful, when the DryRun flag is set to true.
public struct DryRunOperation: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DryRunOperation" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Exception raised when an internal, configuration, or dependency error is encountered.
public struct InternalServerError: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerError" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Exception raised when the provided input violates a policy constraint or is entered in the wrong format or data type.
public struct InvalidInputException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidInputException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Exception raised when a request fails due to temporary unavailability of the service.
public struct ServiceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceUnavailableException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The number of seconds the caller should wait before retrying.
        public internal(set) var retryAfterSeconds: Swift.Int = 0
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        retryAfterSeconds: Swift.Int = 0
    )
    {
        self.properties.message = message
        self.properties.retryAfterSeconds = retryAfterSeconds
    }
}

extension MigrationHubConfigClientTypes {

    public enum TargetType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case account
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetType] {
            return [
                .account
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .account: return "ACCOUNT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MigrationHubConfigClientTypes {

    /// The target parameter specifies the identifier to which the home region is applied, which is always an ACCOUNT. It applies the home region to the current ACCOUNT.
    public struct Target: Swift.Sendable {
        /// The TargetID is a 12-character identifier of the ACCOUNT for which the control was created. (This must be the current account.)
        public var id: Swift.String?
        /// The target type is always an ACCOUNT.
        /// This member is required.
        public var type: MigrationHubConfigClientTypes.TargetType?

        public init(
            id: Swift.String? = nil,
            type: MigrationHubConfigClientTypes.TargetType? = nil
        )
        {
            self.id = id
            self.type = type
        }
    }
}

public struct CreateHomeRegionControlInput: Swift.Sendable {
    /// Optional Boolean flag to indicate whether any effect should take place. It tests whether the caller has permission to make the call.
    public var dryRun: Swift.Bool?
    /// The name of the home region of the calling account.
    /// This member is required.
    public var homeRegion: Swift.String?
    /// The account for which this command sets up a home region control. The Target is always of type ACCOUNT.
    /// This member is required.
    public var target: MigrationHubConfigClientTypes.Target?

    public init(
        dryRun: Swift.Bool? = false,
        homeRegion: Swift.String? = nil,
        target: MigrationHubConfigClientTypes.Target? = nil
    )
    {
        self.dryRun = dryRun
        self.homeRegion = homeRegion
        self.target = target
    }
}

extension MigrationHubConfigClientTypes {

    /// A home region control is an object that specifies the home region for an account, with some additional information. It contains a target (always of type ACCOUNT), an ID, and a time at which the home region was set.
    public struct HomeRegionControl: Swift.Sendable {
        /// A unique identifier that's generated for each home region control. It's always a string that begins with "hrc-" followed by 12 lowercase letters and numbers.
        public var controlId: Swift.String?
        /// The AWS Region that's been set as home region. For example, "us-west-2" or "eu-central-1" are valid home regions.
        public var homeRegion: Swift.String?
        /// A timestamp representing the time when the customer called CreateHomeregionControl and set the home region for the account.
        public var requestedTime: Foundation.Date?
        /// The target parameter specifies the identifier to which the home region is applied, which is always an ACCOUNT. It applies the home region to the current ACCOUNT.
        public var target: MigrationHubConfigClientTypes.Target?

        public init(
            controlId: Swift.String? = nil,
            homeRegion: Swift.String? = nil,
            requestedTime: Foundation.Date? = nil,
            target: MigrationHubConfigClientTypes.Target? = nil
        )
        {
            self.controlId = controlId
            self.homeRegion = homeRegion
            self.requestedTime = requestedTime
            self.target = target
        }
    }
}

public struct CreateHomeRegionControlOutput: Swift.Sendable {
    /// This object is the HomeRegionControl object that's returned by a successful call to CreateHomeRegionControl.
    public var homeRegionControl: MigrationHubConfigClientTypes.HomeRegionControl?

    public init(
        homeRegionControl: MigrationHubConfigClientTypes.HomeRegionControl? = nil
    )
    {
        self.homeRegionControl = homeRegionControl
    }
}

public struct DeleteHomeRegionControlInput: Swift.Sendable {
    /// A unique identifier that's generated for each home region control. It's always a string that begins with "hrc-" followed by 12 lowercase letters and numbers.
    /// This member is required.
    public var controlId: Swift.String?

    public init(
        controlId: Swift.String? = nil
    )
    {
        self.controlId = controlId
    }
}

public struct DeleteHomeRegionControlOutput: Swift.Sendable {

    public init() { }
}

public struct DescribeHomeRegionControlsInput: Swift.Sendable {
    /// The ControlID is a unique identifier string of your HomeRegionControl object.
    public var controlId: Swift.String?
    /// The name of the home region you'd like to view.
    public var homeRegion: Swift.String?
    /// The maximum number of filtering results to display per page.
    public var maxResults: Swift.Int?
    /// If a NextToken was returned by a previous call, more results are available. To retrieve the next page of results, make the call again using the returned token in NextToken.
    public var nextToken: Swift.String?
    /// The target parameter specifies the identifier to which the home region is applied, which is always of type ACCOUNT. It applies the home region to the current ACCOUNT.
    public var target: MigrationHubConfigClientTypes.Target?

    public init(
        controlId: Swift.String? = nil,
        homeRegion: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        target: MigrationHubConfigClientTypes.Target? = nil
    )
    {
        self.controlId = controlId
        self.homeRegion = homeRegion
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.target = target
    }
}

public struct DescribeHomeRegionControlsOutput: Swift.Sendable {
    /// An array that contains your HomeRegionControl objects.
    public var homeRegionControls: [MigrationHubConfigClientTypes.HomeRegionControl]?
    /// If a NextToken was returned by a previous call, more results are available. To retrieve the next page of results, make the call again using the returned token in NextToken.
    public var nextToken: Swift.String?

    public init(
        homeRegionControls: [MigrationHubConfigClientTypes.HomeRegionControl]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.homeRegionControls = homeRegionControls
        self.nextToken = nextToken
    }
}

public struct GetHomeRegionInput: Swift.Sendable {

    public init() { }
}

public struct GetHomeRegionOutput: Swift.Sendable {
    /// The name of the home region of the calling account.
    public var homeRegion: Swift.String?

    public init(
        homeRegion: Swift.String? = nil
    )
    {
        self.homeRegion = homeRegion
    }
}

extension CreateHomeRegionControlInput {

    static func urlPathProvider(_ value: CreateHomeRegionControlInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteHomeRegionControlInput {

    static func urlPathProvider(_ value: DeleteHomeRegionControlInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeHomeRegionControlsInput {

    static func urlPathProvider(_ value: DescribeHomeRegionControlsInput) -> Swift.String? {
        return "/"
    }
}

extension GetHomeRegionInput {

    static func urlPathProvider(_ value: GetHomeRegionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateHomeRegionControlInput {

    static func write(value: CreateHomeRegionControlInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DryRun"].write(value.dryRun)
        try writer["HomeRegion"].write(value.homeRegion)
        try writer["Target"].write(value.target, with: MigrationHubConfigClientTypes.Target.write(value:to:))
    }
}

extension DeleteHomeRegionControlInput {

    static func write(value: DeleteHomeRegionControlInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ControlId"].write(value.controlId)
    }
}

extension DescribeHomeRegionControlsInput {

    static func write(value: DescribeHomeRegionControlsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ControlId"].write(value.controlId)
        try writer["HomeRegion"].write(value.homeRegion)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["Target"].write(value.target, with: MigrationHubConfigClientTypes.Target.write(value:to:))
    }
}

extension GetHomeRegionInput {

    static func write(value: GetHomeRegionInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension CreateHomeRegionControlOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateHomeRegionControlOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateHomeRegionControlOutput()
        value.homeRegionControl = try reader["HomeRegionControl"].readIfPresent(with: MigrationHubConfigClientTypes.HomeRegionControl.read(from:))
        return value
    }
}

extension DeleteHomeRegionControlOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteHomeRegionControlOutput {
        return DeleteHomeRegionControlOutput()
    }
}

extension DescribeHomeRegionControlsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeHomeRegionControlsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeHomeRegionControlsOutput()
        value.homeRegionControls = try reader["HomeRegionControls"].readListIfPresent(memberReadingClosure: MigrationHubConfigClientTypes.HomeRegionControl.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension GetHomeRegionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetHomeRegionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetHomeRegionOutput()
        value.homeRegion = try reader["HomeRegion"].readIfPresent()
        return value
    }
}

enum CreateHomeRegionControlOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperation.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteHomeRegionControlOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeHomeRegionControlsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetHomeRegionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DryRunOperation {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DryRunOperation {
        let reader = baseError.errorBodyReader
        var value = DryRunOperation()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerError {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerError {
        let reader = baseError.errorBodyReader
        var value = InternalServerError()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        let httpResponse = baseError.httpResponse
        var value = ThrottlingException()
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            value.properties.retryAfterSeconds = Swift.Int(retryAfterSecondsHeaderValue) ?? 0
        }
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidInputException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidInputException {
        let reader = baseError.errorBodyReader
        var value = InvalidInputException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceUnavailableException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceUnavailableException {
        let reader = baseError.errorBodyReader
        var value = ServiceUnavailableException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MigrationHubConfigClientTypes.HomeRegionControl {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubConfigClientTypes.HomeRegionControl {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubConfigClientTypes.HomeRegionControl()
        value.controlId = try reader["ControlId"].readIfPresent()
        value.homeRegion = try reader["HomeRegion"].readIfPresent()
        value.target = try reader["Target"].readIfPresent(with: MigrationHubConfigClientTypes.Target.read(from:))
        value.requestedTime = try reader["RequestedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension MigrationHubConfigClientTypes.Target {

    static func write(value: MigrationHubConfigClientTypes.Target?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubConfigClientTypes.Target {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubConfigClientTypes.Target()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.id = try reader["Id"].readIfPresent()
        return value
    }
}

public enum MigrationHubConfigClientTypes {}
