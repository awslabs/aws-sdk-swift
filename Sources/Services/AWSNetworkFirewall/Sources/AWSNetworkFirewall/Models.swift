//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

extension NetworkFirewallClientTypes {
    /// The value to use in an Amazon CloudWatch custom metric dimension. This is used in the PublishMetrics[CustomAction]. A CloudWatch custom metric dimension is a name/value pair that's part of the identity of a metric. Network Firewall sets the dimension name to CustomAction and you provide the dimension value. For more information about CloudWatch custom metric dimensions, see [Publishing Custom Metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html#usingDimensions) in the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html).
    public struct Dimension {
        /// The value to use in the custom metric dimension.
        /// This member is required.
        public var value: Swift.String?

        public init(
            value: Swift.String? = nil
        )
        {
            self.value = value
        }
    }

}

extension NetworkFirewallClientTypes {
    /// Stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. This setting defines a CloudWatch dimension value to be published.
    public struct PublishMetricAction {
        ///
        /// This member is required.
        public var dimensions: [NetworkFirewallClientTypes.Dimension]?

        public init(
            dimensions: [NetworkFirewallClientTypes.Dimension]? = nil
        )
        {
            self.dimensions = dimensions
        }
    }

}

extension NetworkFirewallClientTypes {
    /// A custom action to use in stateless rule actions settings. This is used in [CustomAction].
    public struct ActionDefinition {
        /// Stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. This setting defines a CloudWatch dimension value to be published. You can pair this custom action with any of the standard stateless rule actions. For example, you could pair this in a rule action with the standard action that forwards the packet for stateful inspection. Then, when a packet matches the rule, Network Firewall publishes metrics for the packet and forwards it.
        public var publishMetricAction: NetworkFirewallClientTypes.PublishMetricAction?

        public init(
            publishMetricAction: NetworkFirewallClientTypes.PublishMetricAction? = nil
        )
        {
            self.publishMetricAction = publishMetricAction
        }
    }

}

extension NetworkFirewallClientTypes {
    /// A single IP address specification. This is used in the [MatchAttributes] source and destination specifications.
    public struct Address {
        /// Specify an IP address or a block of IP addresses in Classless Inter-Domain Routing (CIDR) notation. Network Firewall supports all address ranges for IPv4 and IPv6. Examples:
        ///
        /// * To configure Network Firewall to inspect for the IP address 192.0.2.44, specify 192.0.2.44/32.
        ///
        /// * To configure Network Firewall to inspect for IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24.
        ///
        /// * To configure Network Firewall to inspect for the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128.
        ///
        /// * To configure Network Firewall to inspect for IP addresses from 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64.
        ///
        ///
        /// For more information about CIDR notation, see the Wikipedia entry [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing).
        /// This member is required.
        public var addressDefinition: Swift.String?

        public init(
            addressDefinition: Swift.String? = nil
        )
        {
            self.addressDefinition = addressDefinition
        }
    }

}

extension NetworkFirewallClientTypes {

    public enum IdentifiedType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case statelessRuleContainsTcpFlags
        case statelessRuleForwardingAsymmetrically
        case sdkUnknown(Swift.String)

        public static var allCases: [IdentifiedType] {
            return [
                .statelessRuleContainsTcpFlags,
                .statelessRuleForwardingAsymmetrically
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .statelessRuleContainsTcpFlags: return "STATELESS_RULE_CONTAINS_TCP_FLAGS"
            case .statelessRuleForwardingAsymmetrically: return "STATELESS_RULE_FORWARDING_ASYMMETRICALLY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension NetworkFirewallClientTypes {
    /// The analysis result for Network Firewall's stateless rule group analyzer. Every time you call [CreateRuleGroup], [UpdateRuleGroup], or [DescribeRuleGroup] on a stateless rule group, Network Firewall analyzes the stateless rule groups in your account and identifies the rules that might adversely effect your firewall's functionality. For example, if Network Firewall detects a rule that's routing traffic asymmetrically, which impacts the service's ability to properly process traffic, the service includes the rule in a list of analysis results.
    public struct AnalysisResult {
        /// Provides analysis details for the identified rule.
        public var analysisDetail: Swift.String?
        /// The priority number of the stateless rules identified in the analysis.
        public var identifiedRuleIds: [Swift.String]?
        /// The types of rule configurations that Network Firewall analyzes your rule groups for. Network Firewall analyzes stateless rule groups for the following types of rule configurations:
        ///
        /// * STATELESS_RULE_FORWARDING_ASYMMETRICALLY Cause: One or more stateless rules with the action pass or forward are forwarding traffic asymmetrically. Specifically, the rule's set of source IP addresses or their associated port numbers, don't match the set of destination IP addresses or their associated port numbers. To mitigate: Make sure that there's an existing return path. For example, if the rule allows traffic from source 10.1.0.0/24 to destination 20.1.0.0/24, you should allow return traffic from source 20.1.0.0/24 to destination 10.1.0.0/24.
        ///
        /// * STATELESS_RULE_CONTAINS_TCP_FLAGS Cause: At least one stateless rule with the action pass orforward contains TCP flags that are inconsistent in the forward and return directions. To mitigate: Prevent asymmetric routing issues caused by TCP flags by following these actions:
        ///
        /// * Remove unnecessary TCP flag inspections from the rules.
        ///
        /// * If you need to inspect TCP flags, check that the rules correctly account for changes in TCP flags throughout the TCP connection cycle, for example SYN and ACK flags used in a 3-way TCP handshake.
        public var identifiedType: NetworkFirewallClientTypes.IdentifiedType?

        public init(
            analysisDetail: Swift.String? = nil,
            identifiedRuleIds: [Swift.String]? = nil,
            identifiedType: NetworkFirewallClientTypes.IdentifiedType? = nil
        )
        {
            self.analysisDetail = analysisDetail
            self.identifiedRuleIds = identifiedRuleIds
            self.identifiedType = identifiedType
        }
    }

}

/// Your request is valid, but Network Firewall couldn't perform the operation because of a system problem. Retry your request.
public struct InternalServerError: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerError" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because it's not valid. For example, you might have tried to delete a rule group or firewall policy that's in use.
public struct InvalidOperationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidOperationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because of a problem with your request. Examples include:
///
/// * You specified an unsupported parameter name or value.
///
/// * You tried to update a property with a value that isn't among the available types.
///
/// * Your request references an ARN that is malformed, or corresponds to a resource that isn't valid in the context of the request.
public struct InvalidRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The token you provided is stale or isn't valid for the operation.
public struct InvalidTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTokenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Unable to locate a resource using the parameters that you provided.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Unable to process the request due to throttling limitations.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AssociateFirewallPolicyInput {
    /// The Amazon Resource Name (ARN) of the firewall. You must specify the ARN or the name, and you can specify both.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallName: Swift.String?
    /// The Amazon Resource Name (ARN) of the firewall policy.
    /// This member is required.
    public var firewallPolicyArn: Swift.String?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init(
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        firewallPolicyArn: Swift.String? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.firewallPolicyArn = firewallPolicyArn
        self.updateToken = updateToken
    }
}

public struct AssociateFirewallPolicyOutput {
    /// The Amazon Resource Name (ARN) of the firewall.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
    public var firewallName: Swift.String?
    /// The Amazon Resource Name (ARN) of the firewall policy.
    public var firewallPolicyArn: Swift.String?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init(
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        firewallPolicyArn: Swift.String? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.firewallPolicyArn = firewallPolicyArn
        self.updateToken = updateToken
    }
}

/// Amazon Web Services doesn't currently have enough available capacity to fulfill your request. Try your request later.
public struct InsufficientCapacityException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InsufficientCapacityException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NetworkFirewallClientTypes {

    public enum IPAddressType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dualstack
        case ipv4
        case ipv6
        case sdkUnknown(Swift.String)

        public static var allCases: [IPAddressType] {
            return [
                .dualstack,
                .ipv4,
                .ipv6
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dualstack: return "DUALSTACK"
            case .ipv4: return "IPV4"
            case .ipv6: return "IPV6"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension NetworkFirewallClientTypes {
    /// The ID for a subnet that you want to associate with the firewall. This is used with [CreateFirewall] and [AssociateSubnets]. Network Firewall creates an instance of the associated firewall in each subnet that you specify, to filter traffic in the subnet's Availability Zone.
    public struct SubnetMapping {
        /// The subnet's IP address type. You can't change the IP address type after you create the subnet.
        public var ipAddressType: NetworkFirewallClientTypes.IPAddressType?
        /// The unique identifier for the subnet.
        /// This member is required.
        public var subnetId: Swift.String?

        public init(
            ipAddressType: NetworkFirewallClientTypes.IPAddressType? = nil,
            subnetId: Swift.String? = nil
        )
        {
            self.ipAddressType = ipAddressType
            self.subnetId = subnetId
        }
    }

}

public struct AssociateSubnetsInput {
    /// The Amazon Resource Name (ARN) of the firewall. You must specify the ARN or the name, and you can specify both.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallName: Swift.String?
    /// The IDs of the subnets that you want to associate with the firewall.
    /// This member is required.
    public var subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init(
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.subnetMappings = subnetMappings
        self.updateToken = updateToken
    }
}

public struct AssociateSubnetsOutput {
    /// The Amazon Resource Name (ARN) of the firewall.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
    public var firewallName: Swift.String?
    /// The IDs of the subnets that are associated with the firewall.
    public var subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init(
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.subnetMappings = subnetMappings
        self.updateToken = updateToken
    }
}

extension NetworkFirewallClientTypes {

    public enum AttachmentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creating
        case deleting
        case error
        case failed
        case ready
        case scaling
        case sdkUnknown(Swift.String)

        public static var allCases: [AttachmentStatus] {
            return [
                .creating,
                .deleting,
                .error,
                .failed,
                .ready,
                .scaling
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .error: return "ERROR"
            case .failed: return "FAILED"
            case .ready: return "READY"
            case .scaling: return "SCALING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension NetworkFirewallClientTypes {
    /// The configuration and status for a single subnet that you've specified for use by the Network Firewall firewall. This is part of the [FirewallStatus].
    public struct Attachment {
        /// The identifier of the firewall endpoint that Network Firewall has instantiated in the subnet. You use this to identify the firewall endpoint in the VPC route tables, when you redirect the VPC traffic through the endpoint.
        public var endpointId: Swift.String?
        /// The current status of the firewall endpoint in the subnet. This value reflects both the instantiation of the endpoint in the VPC subnet and the sync states that are reported in the Config settings. When this value is READY, the endpoint is available and configured properly to handle network traffic. When the endpoint isn't available for traffic, this value will reflect its state, for example CREATING or DELETING.
        public var status: NetworkFirewallClientTypes.AttachmentStatus?
        /// If Network Firewall fails to create or delete the firewall endpoint in the subnet, it populates this with the reason for the error or failure and how to resolve it. A FAILED status indicates a non-recoverable state, and a ERROR status indicates an issue that you can fix. Depending on the error, it can take as many as 15 minutes to populate this field. For more information about the causes for failiure or errors and solutions available for this field, see [Troubleshooting firewall endpoint failures](https://docs.aws.amazon.com/network-firewall/latest/developerguide/firewall-troubleshooting-endpoint-failures.html) in the Network Firewall Developer Guide.
        public var statusMessage: Swift.String?
        /// The unique identifier of the subnet that you've specified to be used for a firewall endpoint.
        public var subnetId: Swift.String?

        public init(
            endpointId: Swift.String? = nil,
            status: NetworkFirewallClientTypes.AttachmentStatus? = nil,
            statusMessage: Swift.String? = nil,
            subnetId: Swift.String? = nil
        )
        {
            self.endpointId = endpointId
            self.status = status
            self.statusMessage = statusMessage
            self.subnetId = subnetId
        }
    }

}

extension NetworkFirewallClientTypes {
    /// General information about the IP set.
    public struct IPSetMetadata {
        /// Describes the total number of CIDR blocks currently in use by the IP set references in a firewall. To determine how many CIDR blocks are available for you to use in a firewall, you can call AvailableCIDRCount.
        public var resolvedCIDRCount: Swift.Int?

        public init(
            resolvedCIDRCount: Swift.Int? = nil
        )
        {
            self.resolvedCIDRCount = resolvedCIDRCount
        }
    }

}

extension NetworkFirewallClientTypes {
    /// Summarizes the CIDR blocks used by the IP set references in a firewall. Network Firewall calculates the number of CIDRs by taking an aggregated count of all CIDRs used by the IP sets you are referencing.
    public struct CIDRSummary {
        /// The number of CIDR blocks available for use by the IP set references in a firewall.
        public var availableCIDRCount: Swift.Int?
        /// The list of the IP set references used by a firewall.
        public var ipSetReferences: [Swift.String: NetworkFirewallClientTypes.IPSetMetadata]?
        /// The number of CIDR blocks used by the IP set references in a firewall.
        public var utilizedCIDRCount: Swift.Int?

        public init(
            availableCIDRCount: Swift.Int? = nil,
            ipSetReferences: [Swift.String: NetworkFirewallClientTypes.IPSetMetadata]? = nil,
            utilizedCIDRCount: Swift.Int? = nil
        )
        {
            self.availableCIDRCount = availableCIDRCount
            self.ipSetReferences = ipSetReferences
            self.utilizedCIDRCount = utilizedCIDRCount
        }
    }

}

extension NetworkFirewallClientTypes {
    /// The capacity usage summary of the resources used by the [ReferenceSets] in a firewall.
    public struct CapacityUsageSummary {
        /// Describes the capacity usage of the CIDR blocks used by the IP set references in a firewall.
        public var cidRs: NetworkFirewallClientTypes.CIDRSummary?

        public init(
            cidRs: NetworkFirewallClientTypes.CIDRSummary? = nil
        )
        {
            self.cidRs = cidRs
        }
    }

}

extension NetworkFirewallClientTypes {
    /// Contains metadata about an Certificate Manager certificate.
    public struct TlsCertificateData {
        /// The Amazon Resource Name (ARN) of the certificate.
        public var certificateArn: Swift.String?
        /// The serial number of the certificate.
        public var certificateSerial: Swift.String?
        /// The status of the certificate.
        public var status: Swift.String?
        /// Contains details about the certificate status, including information about certificate errors.
        public var statusMessage: Swift.String?

        public init(
            certificateArn: Swift.String? = nil,
            certificateSerial: Swift.String? = nil,
            status: Swift.String? = nil,
            statusMessage: Swift.String? = nil
        )
        {
            self.certificateArn = certificateArn
            self.certificateSerial = certificateSerial
            self.status = status
            self.statusMessage = statusMessage
        }
    }

}

extension NetworkFirewallClientTypes {

    public enum RevocationCheckAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case drop
        case pass
        case reject
        case sdkUnknown(Swift.String)

        public static var allCases: [RevocationCheckAction] {
            return [
                .drop,
                .pass,
                .reject
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .drop: return "DROP"
            case .pass: return "PASS"
            case .reject: return "REJECT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension NetworkFirewallClientTypes {
    /// Defines the actions to take on the SSL/TLS connection if the certificate presented by the server in the connection has a revoked or unknown status.
    public struct CheckCertificateRevocationStatusActions {
        /// Configures how Network Firewall processes traffic when it determines that the certificate presented by the server in the SSL/TLS connection has a revoked status.
        ///
        /// * PASS - Allow the connection to continue, and pass subsequent packets to the stateful engine for inspection.
        ///
        /// * DROP - Network Firewall closes the connection and drops subsequent packets for that connection.
        ///
        /// * REJECT - Network Firewall sends a TCP reject packet back to your client. The service closes the connection and drops subsequent packets for that connection. REJECT is available only for TCP traffic.
        public var revokedStatusAction: NetworkFirewallClientTypes.RevocationCheckAction?
        /// Configures how Network Firewall processes traffic when it determines that the certificate presented by the server in the SSL/TLS connection has an unknown status, or a status that cannot be determined for any other reason, including when the service is unable to connect to the OCSP and CRL endpoints for the certificate.
        ///
        /// * PASS - Allow the connection to continue, and pass subsequent packets to the stateful engine for inspection.
        ///
        /// * DROP - Network Firewall closes the connection and drops subsequent packets for that connection.
        ///
        /// * REJECT - Network Firewall sends a TCP reject packet back to your client. The service closes the connection and drops subsequent packets for that connection. REJECT is available only for TCP traffic.
        public var unknownStatusAction: NetworkFirewallClientTypes.RevocationCheckAction?

        public init(
            revokedStatusAction: NetworkFirewallClientTypes.RevocationCheckAction? = nil,
            unknownStatusAction: NetworkFirewallClientTypes.RevocationCheckAction? = nil
        )
        {
            self.revokedStatusAction = revokedStatusAction
            self.unknownStatusAction = unknownStatusAction
        }
    }

}

extension NetworkFirewallClientTypes {

    public enum ConfigurationSyncState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case capacityConstrained
        case inSync
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfigurationSyncState] {
            return [
                .capacityConstrained,
                .inSync,
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .capacityConstrained: return "CAPACITY_CONSTRAINED"
            case .inSync: return "IN_SYNC"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Unable to perform the operation because doing so would violate a limit setting.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NetworkFirewallClientTypes {

    public enum EncryptionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsOwnedKmsKey
        case customerKms
        case sdkUnknown(Swift.String)

        public static var allCases: [EncryptionType] {
            return [
                .awsOwnedKmsKey,
                .customerKms
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsOwnedKmsKey: return "AWS_OWNED_KMS_KEY"
            case .customerKms: return "CUSTOMER_KMS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension NetworkFirewallClientTypes {
    /// A complex type that contains optional Amazon Web Services Key Management Service (KMS) encryption settings for your Network Firewall resources. Your data is encrypted by default with an Amazon Web Services owned key that Amazon Web Services owns and manages for you. You can use either the Amazon Web Services owned key, or provide your own customer managed key. To learn more about KMS encryption of your Network Firewall resources, see [Encryption at rest with Amazon Web Services Key Managment Service](https://docs.aws.amazon.com/kms/latest/developerguide/kms-encryption-at-rest.html) in the Network Firewall Developer Guide.
    public struct EncryptionConfiguration {
        /// The ID of the Amazon Web Services Key Management Service (KMS) customer managed key. You can use any of the key identifiers that KMS supports, unless you're using a key that's managed by another account. If you're using a key managed by another account, then specify the key ARN. For more information, see [Key ID](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) in the Amazon Web Services KMS Developer Guide.
        public var keyId: Swift.String?
        /// The type of Amazon Web Services KMS key to use for encryption of your Network Firewall resources.
        /// This member is required.
        public var type: NetworkFirewallClientTypes.EncryptionType?

        public init(
            keyId: Swift.String? = nil,
            type: NetworkFirewallClientTypes.EncryptionType? = nil
        )
        {
            self.keyId = keyId
            self.type = type
        }
    }

}

extension NetworkFirewallClientTypes {
    /// A key:value pair associated with an Amazon Web Services resource. The key:value pair can be anything you define. Typically, the tag key represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50 tags to each Amazon Web Services resource.
    public struct Tag {
        /// The part of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as "customer." Tag keys are case-sensitive.
        /// This member is required.
        public var key: Swift.String?
        /// The part of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as "companyA" or "companyB." Tag values are case-sensitive.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct CreateFirewallInput {
    /// A flag indicating whether it is possible to delete the firewall. A setting of TRUE indicates that the firewall is protected against deletion. Use this setting to protect against accidentally deleting a firewall that is in use. When you create a firewall, the operation initializes this flag to TRUE.
    public var deleteProtection: Swift.Bool?
    /// A description of the firewall.
    public var description: Swift.String?
    /// A complex type that contains settings for encryption of your firewall resources.
    public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
    /// This member is required.
    public var firewallName: Swift.String?
    /// The Amazon Resource Name (ARN) of the [FirewallPolicy] that you want to use for the firewall.
    /// This member is required.
    public var firewallPolicyArn: Swift.String?
    /// A setting indicating whether the firewall is protected against a change to the firewall policy association. Use this setting to protect against accidentally modifying the firewall policy for a firewall that is in use. When you create a firewall, the operation initializes this setting to TRUE.
    public var firewallPolicyChangeProtection: Swift.Bool?
    /// A setting indicating whether the firewall is protected against changes to the subnet associations. Use this setting to protect against accidentally modifying the subnet associations for a firewall that is in use. When you create a firewall, the operation initializes this setting to TRUE.
    public var subnetChangeProtection: Swift.Bool?
    /// The public subnets to use for your Network Firewall firewalls. Each subnet must belong to a different Availability Zone in the VPC. Network Firewall creates a firewall endpoint in each subnet.
    /// This member is required.
    public var subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]?
    /// The key:value pairs to associate with the resource.
    public var tags: [NetworkFirewallClientTypes.Tag]?
    /// The unique identifier of the VPC where Network Firewall should create the firewall. You can't change this setting after you create the firewall.
    /// This member is required.
    public var vpcId: Swift.String?

    public init(
        deleteProtection: Swift.Bool? = false,
        description: Swift.String? = nil,
        encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
        firewallName: Swift.String? = nil,
        firewallPolicyArn: Swift.String? = nil,
        firewallPolicyChangeProtection: Swift.Bool? = false,
        subnetChangeProtection: Swift.Bool? = false,
        subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]? = nil,
        tags: [NetworkFirewallClientTypes.Tag]? = nil,
        vpcId: Swift.String? = nil
    )
    {
        self.deleteProtection = deleteProtection
        self.description = description
        self.encryptionConfiguration = encryptionConfiguration
        self.firewallName = firewallName
        self.firewallPolicyArn = firewallPolicyArn
        self.firewallPolicyChangeProtection = firewallPolicyChangeProtection
        self.subnetChangeProtection = subnetChangeProtection
        self.subnetMappings = subnetMappings
        self.tags = tags
        self.vpcId = vpcId
    }
}

extension NetworkFirewallClientTypes {
    /// The firewall defines the configuration settings for an Network Firewall firewall. These settings include the firewall policy, the subnets in your VPC to use for the firewall endpoints, and any tags that are attached to the firewall Amazon Web Services resource. The status of the firewall, for example whether it's ready to filter network traffic, is provided in the corresponding [FirewallStatus]. You can retrieve both objects by calling [DescribeFirewall].
    public struct Firewall {
        /// A flag indicating whether it is possible to delete the firewall. A setting of TRUE indicates that the firewall is protected against deletion. Use this setting to protect against accidentally deleting a firewall that is in use. When you create a firewall, the operation initializes this flag to TRUE.
        public var deleteProtection: Swift.Bool
        /// A description of the firewall.
        public var description: Swift.String?
        /// A complex type that contains the Amazon Web Services KMS encryption configuration settings for your firewall.
        public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
        /// The Amazon Resource Name (ARN) of the firewall.
        public var firewallArn: Swift.String?
        /// The unique identifier for the firewall.
        /// This member is required.
        public var firewallId: Swift.String?
        /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
        public var firewallName: Swift.String?
        /// The Amazon Resource Name (ARN) of the firewall policy. The relationship of firewall to firewall policy is many to one. Each firewall requires one firewall policy association, and you can use the same firewall policy for multiple firewalls.
        /// This member is required.
        public var firewallPolicyArn: Swift.String?
        /// A setting indicating whether the firewall is protected against a change to the firewall policy association. Use this setting to protect against accidentally modifying the firewall policy for a firewall that is in use. When you create a firewall, the operation initializes this setting to TRUE.
        public var firewallPolicyChangeProtection: Swift.Bool
        /// A setting indicating whether the firewall is protected against changes to the subnet associations. Use this setting to protect against accidentally modifying the subnet associations for a firewall that is in use. When you create a firewall, the operation initializes this setting to TRUE.
        public var subnetChangeProtection: Swift.Bool
        /// The public subnets that Network Firewall is using for the firewall. Each subnet must belong to a different Availability Zone.
        /// This member is required.
        public var subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]?
        ///
        public var tags: [NetworkFirewallClientTypes.Tag]?
        /// The unique identifier of the VPC where the firewall is in use.
        /// This member is required.
        public var vpcId: Swift.String?

        public init(
            deleteProtection: Swift.Bool = false,
            description: Swift.String? = nil,
            encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
            firewallArn: Swift.String? = nil,
            firewallId: Swift.String? = nil,
            firewallName: Swift.String? = nil,
            firewallPolicyArn: Swift.String? = nil,
            firewallPolicyChangeProtection: Swift.Bool = false,
            subnetChangeProtection: Swift.Bool = false,
            subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]? = nil,
            tags: [NetworkFirewallClientTypes.Tag]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.deleteProtection = deleteProtection
            self.description = description
            self.encryptionConfiguration = encryptionConfiguration
            self.firewallArn = firewallArn
            self.firewallId = firewallId
            self.firewallName = firewallName
            self.firewallPolicyArn = firewallPolicyArn
            self.firewallPolicyChangeProtection = firewallPolicyChangeProtection
            self.subnetChangeProtection = subnetChangeProtection
            self.subnetMappings = subnetMappings
            self.tags = tags
            self.vpcId = vpcId
        }
    }

}

extension NetworkFirewallClientTypes {

    public enum FirewallStatusValue: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deleting
        case provisioning
        case ready
        case sdkUnknown(Swift.String)

        public static var allCases: [FirewallStatusValue] {
            return [
                .deleting,
                .provisioning,
                .ready
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deleting: return "DELETING"
            case .provisioning: return "PROVISIONING"
            case .ready: return "READY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension NetworkFirewallClientTypes {

    public enum PerObjectSyncStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case capacityConstrained
        case inSync
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [PerObjectSyncStatus] {
            return [
                .capacityConstrained,
                .inSync,
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .capacityConstrained: return "CAPACITY_CONSTRAINED"
            case .inSync: return "IN_SYNC"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension NetworkFirewallClientTypes {
    /// Provides configuration status for a single policy or rule group that is used for a firewall endpoint. Network Firewall provides each endpoint with the rules that are configured in the firewall policy. Each time you add a subnet or modify the associated firewall policy, Network Firewall synchronizes the rules in the endpoint, so it can properly filter network traffic. This is part of a [SyncState] for a firewall.
    public struct PerObjectStatus {
        /// Indicates whether this object is in sync with the version indicated in the update token.
        public var syncStatus: NetworkFirewallClientTypes.PerObjectSyncStatus?
        /// The current version of the object that is either in sync or pending synchronization.
        public var updateToken: Swift.String?

        public init(
            syncStatus: NetworkFirewallClientTypes.PerObjectSyncStatus? = nil,
            updateToken: Swift.String? = nil
        )
        {
            self.syncStatus = syncStatus
            self.updateToken = updateToken
        }
    }

}

extension NetworkFirewallClientTypes {
    /// The status of the firewall endpoint and firewall policy configuration for a single VPC subnet. For each VPC subnet that you associate with a firewall, Network Firewall does the following:
    ///
    /// * Instantiates a firewall endpoint in the subnet, ready to take traffic.
    ///
    /// * Configures the endpoint with the current firewall policy settings, to provide the filtering behavior for the endpoint.
    ///
    ///
    /// When you update a firewall, for example to add a subnet association or change a rule group in the firewall policy, the affected sync states reflect out-of-sync or not ready status until the changes are complete.
    public struct SyncState {
        /// The attachment status of the firewall's association with a single VPC subnet. For each configured subnet, Network Firewall creates the attachment by instantiating the firewall endpoint in the subnet so that it's ready to take traffic. This is part of the [FirewallStatus].
        public var attachment: NetworkFirewallClientTypes.Attachment?
        /// The configuration status of the firewall endpoint in a single VPC subnet. Network Firewall provides each endpoint with the rules that are configured in the firewall policy. Each time you add a subnet or modify the associated firewall policy, Network Firewall synchronizes the rules in the endpoint, so it can properly filter network traffic. This is part of the [FirewallStatus].
        public var config: [Swift.String: NetworkFirewallClientTypes.PerObjectStatus]?

        public init(
            attachment: NetworkFirewallClientTypes.Attachment? = nil,
            config: [Swift.String: NetworkFirewallClientTypes.PerObjectStatus]? = nil
        )
        {
            self.attachment = attachment
            self.config = config
        }
    }

}

extension NetworkFirewallClientTypes {
    /// Detailed information about the current status of a [Firewall]. You can retrieve this for a firewall by calling [DescribeFirewall] and providing the firewall name and ARN.
    public struct FirewallStatus {
        /// Describes the capacity usage of the resources contained in a firewall's reference sets. Network Firewall calclulates the capacity usage by taking an aggregated count of all of the resources used by all of the reference sets in a firewall.
        public var capacityUsageSummary: NetworkFirewallClientTypes.CapacityUsageSummary?
        /// The configuration sync state for the firewall. This summarizes the sync states reported in the Config settings for all of the Availability Zones where you have configured the firewall. When you create a firewall or update its configuration, for example by adding a rule group to its firewall policy, Network Firewall distributes the configuration changes to all zones where the firewall is in use. This summary indicates whether the configuration changes have been applied everywhere. This status must be IN_SYNC for the firewall to be ready for use, but it doesn't indicate that the firewall is ready. The Status setting indicates firewall readiness.
        /// This member is required.
        public var configurationSyncStateSummary: NetworkFirewallClientTypes.ConfigurationSyncState?
        /// The readiness of the configured firewall to handle network traffic across all of the Availability Zones where you've configured it. This setting is READY only when the ConfigurationSyncStateSummary value is IN_SYNC and the AttachmentStatus values for all of the configured subnets are READY.
        /// This member is required.
        public var status: NetworkFirewallClientTypes.FirewallStatusValue?
        /// The subnets that you've configured for use by the Network Firewall firewall. This contains one array element per Availability Zone where you've configured a subnet. These objects provide details of the information that is summarized in the ConfigurationSyncStateSummary and Status, broken down by zone and configuration object.
        public var syncStates: [Swift.String: NetworkFirewallClientTypes.SyncState]?

        public init(
            capacityUsageSummary: NetworkFirewallClientTypes.CapacityUsageSummary? = nil,
            configurationSyncStateSummary: NetworkFirewallClientTypes.ConfigurationSyncState? = nil,
            status: NetworkFirewallClientTypes.FirewallStatusValue? = nil,
            syncStates: [Swift.String: NetworkFirewallClientTypes.SyncState]? = nil
        )
        {
            self.capacityUsageSummary = capacityUsageSummary
            self.configurationSyncStateSummary = configurationSyncStateSummary
            self.status = status
            self.syncStates = syncStates
        }
    }

}

public struct CreateFirewallOutput {
    /// The configuration settings for the firewall. These settings include the firewall policy and the subnets in your VPC to use for the firewall endpoints.
    public var firewall: NetworkFirewallClientTypes.Firewall?
    /// Detailed information about the current status of a [Firewall]. You can retrieve this for a firewall by calling [DescribeFirewall] and providing the firewall name and ARN.
    public var firewallStatus: NetworkFirewallClientTypes.FirewallStatus?

    public init(
        firewall: NetworkFirewallClientTypes.Firewall? = nil,
        firewallStatus: NetworkFirewallClientTypes.FirewallStatus? = nil
    )
    {
        self.firewall = firewall
        self.firewallStatus = firewallStatus
    }
}

extension NetworkFirewallClientTypes {
    /// A list of IP addresses and address ranges, in CIDR notation. This is part of a [RuleVariables].
    public struct IPSet {
        /// The list of IP addresses and address ranges, in CIDR notation.
        /// This member is required.
        public var definition: [Swift.String]?

        public init(
            definition: [Swift.String]? = nil
        )
        {
            self.definition = definition
        }
    }

}

extension NetworkFirewallClientTypes {
    /// Contains variables that you can use to override default Suricata settings in your firewall policy.
    public struct PolicyVariables {
        /// The IPv4 or IPv6 addresses in CIDR notation to use for the Suricata HOME_NET variable. If your firewall uses an inspection VPC, you might want to override the HOME_NET variable with the CIDRs of your home networks. If you don't override HOME_NET with your own CIDRs, Network Firewall by default uses the CIDR of your inspection VPC.
        public var ruleVariables: [Swift.String: NetworkFirewallClientTypes.IPSet]?

        public init(
            ruleVariables: [Swift.String: NetworkFirewallClientTypes.IPSet]? = nil
        )
        {
            self.ruleVariables = ruleVariables
        }
    }

}

extension NetworkFirewallClientTypes {

    public enum RuleOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case defaultActionOrder
        case strictOrder
        case sdkUnknown(Swift.String)

        public static var allCases: [RuleOrder] {
            return [
                .defaultActionOrder,
                .strictOrder
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .defaultActionOrder: return "DEFAULT_ACTION_ORDER"
            case .strictOrder: return "STRICT_ORDER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension NetworkFirewallClientTypes {

    public enum StreamExceptionPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `continue`
        case drop
        case reject
        case sdkUnknown(Swift.String)

        public static var allCases: [StreamExceptionPolicy] {
            return [
                .continue,
                .drop,
                .reject
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .continue: return "CONTINUE"
            case .drop: return "DROP"
            case .reject: return "REJECT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension NetworkFirewallClientTypes {
    /// Configuration settings for the handling of the stateful rule groups in a firewall policy.
    public struct StatefulEngineOptions {
        /// Indicates how to manage the order of stateful rule evaluation for the policy. STRICT_ORDER is the default and recommended option. With STRICT_ORDER, provide your rules in the order that you want them to be evaluated. You can then choose one or more default actions for packets that don't match any rules. Choose STRICT_ORDER to have the stateful rules engine determine the evaluation order of your rules. The default action for this rule order is PASS, followed by DROP, REJECT, and ALERT actions. Stateful rules are provided to the rule engine as Suricata compatible strings, and Suricata evaluates them based on your settings. For more information, see [Evaluation order for stateful rules](https://docs.aws.amazon.com/network-firewall/latest/developerguide/suricata-rule-evaluation-order.html) in the Network Firewall Developer Guide.
        public var ruleOrder: NetworkFirewallClientTypes.RuleOrder?
        /// Configures how Network Firewall processes traffic when a network connection breaks midstream. Network connections can break due to disruptions in external networks or within the firewall itself.
        ///
        /// * DROP - Network Firewall fails closed and drops all subsequent traffic going to the firewall. This is the default behavior.
        ///
        /// * CONTINUE - Network Firewall continues to apply rules to the subsequent traffic without context from traffic before the break. This impacts the behavior of rules that depend on this context. For example, if you have a stateful rule to drop http traffic, Network Firewall won't match the traffic for this rule because the service won't have the context from session initialization defining the application layer protocol as HTTP. However, this behavior is rule dependent—a TCP-layer rule using a flow:stateless rule would still match, as would the aws:drop_strict default action.
        ///
        /// * REJECT - Network Firewall fails closed and drops all subsequent traffic going to the firewall. Network Firewall also sends a TCP reject packet back to your client so that the client can immediately establish a new session. Network Firewall will have context about the new session and will apply rules to the subsequent traffic.
        public var streamExceptionPolicy: NetworkFirewallClientTypes.StreamExceptionPolicy?

        public init(
            ruleOrder: NetworkFirewallClientTypes.RuleOrder? = nil,
            streamExceptionPolicy: NetworkFirewallClientTypes.StreamExceptionPolicy? = nil
        )
        {
            self.ruleOrder = ruleOrder
            self.streamExceptionPolicy = streamExceptionPolicy
        }
    }

}

extension NetworkFirewallClientTypes {

    public enum OverrideAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dropToAlert
        case sdkUnknown(Swift.String)

        public static var allCases: [OverrideAction] {
            return [
                .dropToAlert
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dropToAlert: return "DROP_TO_ALERT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension NetworkFirewallClientTypes {
    /// The setting that allows the policy owner to change the behavior of the rule group within a policy.
    public struct StatefulRuleGroupOverride {
        /// The action that changes the rule group from DROP to ALERT. This only applies to managed rule groups.
        public var action: NetworkFirewallClientTypes.OverrideAction?

        public init(
            action: NetworkFirewallClientTypes.OverrideAction? = nil
        )
        {
            self.action = action
        }
    }

}

extension NetworkFirewallClientTypes {
    /// Identifier for a single stateful rule group, used in a firewall policy to refer to a rule group.
    public struct StatefulRuleGroupReference {
        /// The action that allows the policy owner to override the behavior of the rule group within a policy.
        public var `override`: NetworkFirewallClientTypes.StatefulRuleGroupOverride?
        /// An integer setting that indicates the order in which to run the stateful rule groups in a single [FirewallPolicy]. This setting only applies to firewall policies that specify the STRICT_ORDER rule order in the stateful engine options settings. Network Firewall evalutes each stateful rule group against a packet starting with the group that has the lowest priority setting. You must ensure that the priority settings are unique within each policy. You can change the priority settings of your rule groups at any time. To make it easier to insert rule groups later, number them so there's a wide range in between, for example use 100, 200, and so on.
        public var priority: Swift.Int?
        /// The Amazon Resource Name (ARN) of the stateful rule group.
        /// This member is required.
        public var resourceArn: Swift.String?

        public init(
            `override`: NetworkFirewallClientTypes.StatefulRuleGroupOverride? = nil,
            priority: Swift.Int? = nil,
            resourceArn: Swift.String? = nil
        )
        {
            self.`override` = `override`
            self.priority = priority
            self.resourceArn = resourceArn
        }
    }

}

extension NetworkFirewallClientTypes {
    /// An optional, non-standard action to use for stateless packet handling. You can define this in addition to the standard action that you must specify. You define and name the custom actions that you want to be able to use, and then you reference them by name in your actions settings. You can use custom actions in the following places:
    ///
    /// * In a rule group's [StatelessRulesAndCustomActions] specification. The custom actions are available for use by name inside the StatelessRulesAndCustomActions where you define them. You can use them for your stateless rule actions to specify what to do with a packet that matches the rule's match attributes.
    ///
    /// * In a [FirewallPolicy] specification, in StatelessCustomActions. The custom actions are available for use inside the policy where you define them. You can use them for the policy's default stateless actions settings to specify what to do with packets that don't match any of the policy's stateless rules.
    public struct CustomAction {
        /// The custom action associated with the action name.
        /// This member is required.
        public var actionDefinition: NetworkFirewallClientTypes.ActionDefinition?
        /// The descriptive name of the custom action. You can't change the name of a custom action after you create it.
        /// This member is required.
        public var actionName: Swift.String?

        public init(
            actionDefinition: NetworkFirewallClientTypes.ActionDefinition? = nil,
            actionName: Swift.String? = nil
        )
        {
            self.actionDefinition = actionDefinition
            self.actionName = actionName
        }
    }

}

extension NetworkFirewallClientTypes {
    /// Identifier for a single stateless rule group, used in a firewall policy to refer to the rule group.
    public struct StatelessRuleGroupReference {
        /// An integer setting that indicates the order in which to run the stateless rule groups in a single [FirewallPolicy]. Network Firewall applies each stateless rule group to a packet starting with the group that has the lowest priority setting. You must ensure that the priority settings are unique within each policy.
        /// This member is required.
        public var priority: Swift.Int?
        /// The Amazon Resource Name (ARN) of the stateless rule group.
        /// This member is required.
        public var resourceArn: Swift.String?

        public init(
            priority: Swift.Int? = nil,
            resourceArn: Swift.String? = nil
        )
        {
            self.priority = priority
            self.resourceArn = resourceArn
        }
    }

}

extension NetworkFirewallClientTypes {
    /// The firewall policy defines the behavior of a firewall using a collection of stateless and stateful rule groups and other settings. You can use one firewall policy for multiple firewalls. This, along with [FirewallPolicyResponse], define the policy. You can retrieve all objects for a firewall policy by calling [DescribeFirewallPolicy].
    public struct FirewallPolicy {
        /// Contains variables that you can use to override default Suricata settings in your firewall policy.
        public var policyVariables: NetworkFirewallClientTypes.PolicyVariables?
        /// The default actions to take on a packet that doesn't match any stateful rules. The stateful default action is optional, and is only valid when using the strict rule order. Valid values of the stateful default action:
        ///
        /// * aws:drop_strict
        ///
        /// * aws:drop_established
        ///
        /// * aws:alert_strict
        ///
        /// * aws:alert_established
        ///
        ///
        /// For more information, see [Strict evaluation order](https://docs.aws.amazon.com/network-firewall/latest/developerguide/suricata-rule-evaluation-order.html#suricata-strict-rule-evaluation-order.html) in the Network Firewall Developer Guide.
        public var statefulDefaultActions: [Swift.String]?
        /// Additional options governing how Network Firewall handles stateful rules. The stateful rule groups that you use in your policy must have stateful rule options settings that are compatible with these settings.
        public var statefulEngineOptions: NetworkFirewallClientTypes.StatefulEngineOptions?
        /// References to the stateful rule groups that are used in the policy. These define the inspection criteria in stateful rules.
        public var statefulRuleGroupReferences: [NetworkFirewallClientTypes.StatefulRuleGroupReference]?
        /// The custom action definitions that are available for use in the firewall policy's StatelessDefaultActions setting. You name each custom action that you define, and then you can use it by name in your default actions specifications.
        public var statelessCustomActions: [NetworkFirewallClientTypes.CustomAction]?
        /// The actions to take on a packet if it doesn't match any of the stateless rules in the policy. If you want non-matching packets to be forwarded for stateful inspection, specify aws:forward_to_sfe. You must specify one of the standard actions: aws:pass, aws:drop, or aws:forward_to_sfe. In addition, you can specify custom actions that are compatible with your standard section choice. For example, you could specify ["aws:pass"] or you could specify ["aws:pass", “customActionName”]. For information about compatibility, see the custom action descriptions under [CustomAction].
        /// This member is required.
        public var statelessDefaultActions: [Swift.String]?
        /// The actions to take on a fragmented UDP packet if it doesn't match any of the stateless rules in the policy. Network Firewall only manages UDP packet fragments and silently drops packet fragments for other protocols. If you want non-matching fragmented UDP packets to be forwarded for stateful inspection, specify aws:forward_to_sfe. You must specify one of the standard actions: aws:pass, aws:drop, or aws:forward_to_sfe. In addition, you can specify custom actions that are compatible with your standard section choice. For example, you could specify ["aws:pass"] or you could specify ["aws:pass", “customActionName”]. For information about compatibility, see the custom action descriptions under [CustomAction].
        /// This member is required.
        public var statelessFragmentDefaultActions: [Swift.String]?
        /// References to the stateless rule groups that are used in the policy. These define the matching criteria in stateless rules.
        public var statelessRuleGroupReferences: [NetworkFirewallClientTypes.StatelessRuleGroupReference]?
        /// The Amazon Resource Name (ARN) of the TLS inspection configuration.
        public var tlsInspectionConfigurationArn: Swift.String?

        public init(
            policyVariables: NetworkFirewallClientTypes.PolicyVariables? = nil,
            statefulDefaultActions: [Swift.String]? = nil,
            statefulEngineOptions: NetworkFirewallClientTypes.StatefulEngineOptions? = nil,
            statefulRuleGroupReferences: [NetworkFirewallClientTypes.StatefulRuleGroupReference]? = nil,
            statelessCustomActions: [NetworkFirewallClientTypes.CustomAction]? = nil,
            statelessDefaultActions: [Swift.String]? = nil,
            statelessFragmentDefaultActions: [Swift.String]? = nil,
            statelessRuleGroupReferences: [NetworkFirewallClientTypes.StatelessRuleGroupReference]? = nil,
            tlsInspectionConfigurationArn: Swift.String? = nil
        )
        {
            self.policyVariables = policyVariables
            self.statefulDefaultActions = statefulDefaultActions
            self.statefulEngineOptions = statefulEngineOptions
            self.statefulRuleGroupReferences = statefulRuleGroupReferences
            self.statelessCustomActions = statelessCustomActions
            self.statelessDefaultActions = statelessDefaultActions
            self.statelessFragmentDefaultActions = statelessFragmentDefaultActions
            self.statelessRuleGroupReferences = statelessRuleGroupReferences
            self.tlsInspectionConfigurationArn = tlsInspectionConfigurationArn
        }
    }

}

public struct CreateFirewallPolicyInput {
    /// A description of the firewall policy.
    public var description: Swift.String?
    /// Indicates whether you want Network Firewall to just check the validity of the request, rather than run the request. If set to TRUE, Network Firewall checks whether the request can run successfully, but doesn't actually make the requested changes. The call returns the value that the request would return if you ran it with dry run set to FALSE, but doesn't make additions or changes to your resources. This option allows you to make sure that you have the required permissions to run the request and that your request parameters are valid. If set to FALSE, Network Firewall makes the requested changes to your resources.
    public var dryRun: Swift.Bool?
    /// A complex type that contains settings for encryption of your firewall policy resources.
    public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
    /// The rule groups and policy actions to use in the firewall policy.
    /// This member is required.
    public var firewallPolicy: NetworkFirewallClientTypes.FirewallPolicy?
    /// The descriptive name of the firewall policy. You can't change the name of a firewall policy after you create it.
    /// This member is required.
    public var firewallPolicyName: Swift.String?
    /// The key:value pairs to associate with the resource.
    public var tags: [NetworkFirewallClientTypes.Tag]?

    public init(
        description: Swift.String? = nil,
        dryRun: Swift.Bool? = false,
        encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
        firewallPolicy: NetworkFirewallClientTypes.FirewallPolicy? = nil,
        firewallPolicyName: Swift.String? = nil,
        tags: [NetworkFirewallClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.dryRun = dryRun
        self.encryptionConfiguration = encryptionConfiguration
        self.firewallPolicy = firewallPolicy
        self.firewallPolicyName = firewallPolicyName
        self.tags = tags
    }
}

extension NetworkFirewallClientTypes {

    public enum ResourceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case deleting
        case error
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceStatus] {
            return [
                .active,
                .deleting,
                .error
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleting: return "DELETING"
            case .error: return "ERROR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension NetworkFirewallClientTypes {
    /// The high-level properties of a firewall policy. This, along with the [FirewallPolicy], define the policy. You can retrieve all objects for a firewall policy by calling [DescribeFirewallPolicy].
    public struct FirewallPolicyResponse {
        /// The number of capacity units currently consumed by the policy's stateful rules.
        public var consumedStatefulRuleCapacity: Swift.Int?
        /// The number of capacity units currently consumed by the policy's stateless rules.
        public var consumedStatelessRuleCapacity: Swift.Int?
        /// A description of the firewall policy.
        public var description: Swift.String?
        /// A complex type that contains the Amazon Web Services KMS encryption configuration settings for your firewall policy.
        public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
        /// The Amazon Resource Name (ARN) of the firewall policy. If this response is for a create request that had DryRun set to TRUE, then this ARN is a placeholder that isn't attached to a valid resource.
        /// This member is required.
        public var firewallPolicyArn: Swift.String?
        /// The unique identifier for the firewall policy.
        /// This member is required.
        public var firewallPolicyId: Swift.String?
        /// The descriptive name of the firewall policy. You can't change the name of a firewall policy after you create it.
        /// This member is required.
        public var firewallPolicyName: Swift.String?
        /// The current status of the firewall policy. You can retrieve this for a firewall policy by calling [DescribeFirewallPolicy] and providing the firewall policy's name or ARN.
        public var firewallPolicyStatus: NetworkFirewallClientTypes.ResourceStatus?
        /// The last time that the firewall policy was changed.
        public var lastModifiedTime: Foundation.Date?
        /// The number of firewalls that are associated with this firewall policy.
        public var numberOfAssociations: Swift.Int?
        /// The key:value pairs to associate with the resource.
        public var tags: [NetworkFirewallClientTypes.Tag]?

        public init(
            consumedStatefulRuleCapacity: Swift.Int? = nil,
            consumedStatelessRuleCapacity: Swift.Int? = nil,
            description: Swift.String? = nil,
            encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
            firewallPolicyArn: Swift.String? = nil,
            firewallPolicyId: Swift.String? = nil,
            firewallPolicyName: Swift.String? = nil,
            firewallPolicyStatus: NetworkFirewallClientTypes.ResourceStatus? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            numberOfAssociations: Swift.Int? = nil,
            tags: [NetworkFirewallClientTypes.Tag]? = nil
        )
        {
            self.consumedStatefulRuleCapacity = consumedStatefulRuleCapacity
            self.consumedStatelessRuleCapacity = consumedStatelessRuleCapacity
            self.description = description
            self.encryptionConfiguration = encryptionConfiguration
            self.firewallPolicyArn = firewallPolicyArn
            self.firewallPolicyId = firewallPolicyId
            self.firewallPolicyName = firewallPolicyName
            self.firewallPolicyStatus = firewallPolicyStatus
            self.lastModifiedTime = lastModifiedTime
            self.numberOfAssociations = numberOfAssociations
            self.tags = tags
        }
    }

}

public struct CreateFirewallPolicyOutput {
    /// The high-level properties of a firewall policy. This, along with the [FirewallPolicy], define the policy. You can retrieve all objects for a firewall policy by calling [DescribeFirewallPolicy].
    /// This member is required.
    public var firewallPolicyResponse: NetworkFirewallClientTypes.FirewallPolicyResponse?
    /// A token used for optimistic locking. Network Firewall returns a token to your requests that access the firewall policy. The token marks the state of the policy resource at the time of the request. To make changes to the policy, you provide the token in your request. Network Firewall uses the token to ensure that the policy hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall policy again to get a current copy of it with current token. Reapply your changes as needed, then try the operation again using the new token.
    /// This member is required.
    public var updateToken: Swift.String?

    public init(
        firewallPolicyResponse: NetworkFirewallClientTypes.FirewallPolicyResponse? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallPolicyResponse = firewallPolicyResponse
        self.updateToken = updateToken
    }
}

extension NetworkFirewallClientTypes {
    /// Configures one or more IP set references for a Suricata-compatible rule group. This is used in [CreateRuleGroup] or [UpdateRuleGroup]. An IP set reference is a rule variable that references resources that you create and manage in another Amazon Web Services service, such as an Amazon VPC prefix list. Network Firewall IP set references enable you to dynamically update the contents of your rules. When you create, update, or delete the resource you are referencing in your rule, Network Firewall automatically updates the rule's content with the changes. For more information about IP set references in Network Firewall, see [Using IP set references](https://docs.aws.amazon.com/network-firewall/latest/developerguide/rule-groups-ip-set-references) in the Network Firewall Developer Guide. Network Firewall currently supports [Amazon VPC prefix lists](https://docs.aws.amazon.com/vpc/latest/userguide/managed-prefix-lists.html) and [resource groups](https://docs.aws.amazon.com/network-firewall/latest/developerguide/rule-groups-ip-set-references.html#rule-groups-referencing-resource-groups) in IP set references.
    public struct IPSetReference {
        /// The Amazon Resource Name (ARN) of the resource that you are referencing in your rule group.
        public var referenceArn: Swift.String?

        public init(
            referenceArn: Swift.String? = nil
        )
        {
            self.referenceArn = referenceArn
        }
    }

}

extension NetworkFirewallClientTypes {
    /// Contains a set of IP set references.
    public struct ReferenceSets {
        /// The list of IP set references.
        public var ipSetReferences: [Swift.String: NetworkFirewallClientTypes.IPSetReference]?

        public init(
            ipSetReferences: [Swift.String: NetworkFirewallClientTypes.IPSetReference]? = nil
        )
        {
            self.ipSetReferences = ipSetReferences
        }
    }

}

extension NetworkFirewallClientTypes {

    public enum GeneratedRulesType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allowlist
        case denylist
        case sdkUnknown(Swift.String)

        public static var allCases: [GeneratedRulesType] {
            return [
                .allowlist,
                .denylist
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allowlist: return "ALLOWLIST"
            case .denylist: return "DENYLIST"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension NetworkFirewallClientTypes {

    public enum TargetType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case httpHost
        case tlsSni
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetType] {
            return [
                .httpHost,
                .tlsSni
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .httpHost: return "HTTP_HOST"
            case .tlsSni: return "TLS_SNI"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension NetworkFirewallClientTypes {
    /// Stateful inspection criteria for a domain list rule group. For HTTPS traffic, domain filtering is SNI-based. It uses the server name indicator extension of the TLS handshake. By default, Network Firewall domain list inspection only includes traffic coming from the VPC where you deploy the firewall. To inspect traffic from IP addresses outside of the deployment VPC, you set the HOME_NET rule variable to include the CIDR range of the deployment VPC plus the other CIDR ranges. For more information, see [RuleVariables] in this guide and [Stateful domain list rule groups in Network Firewall](https://docs.aws.amazon.com/network-firewall/latest/developerguide/stateful-rule-groups-domain-names.html) in the Network Firewall Developer Guide.
    public struct RulesSourceList {
        /// Whether you want to allow or deny access to the domains in your target list.
        /// This member is required.
        public var generatedRulesType: NetworkFirewallClientTypes.GeneratedRulesType?
        /// The protocols you want to inspect. Specify TLS_SNI for HTTPS. Specify HTTP_HOST for HTTP. You can specify either or both.
        /// This member is required.
        public var targetTypes: [NetworkFirewallClientTypes.TargetType]?
        /// The domains that you want to inspect for in your traffic flows. Valid domain specifications are the following:
        ///
        /// * Explicit names. For example, abc.example.com matches only the domain abc.example.com.
        ///
        /// * Names that use a domain wildcard, which you indicate with an initial '.'. For example,.example.com matches example.com and matches all subdomains of example.com, such as abc.example.com and www.example.com.
        /// This member is required.
        public var targets: [Swift.String]?

        public init(
            generatedRulesType: NetworkFirewallClientTypes.GeneratedRulesType? = nil,
            targetTypes: [NetworkFirewallClientTypes.TargetType]? = nil,
            targets: [Swift.String]? = nil
        )
        {
            self.generatedRulesType = generatedRulesType
            self.targetTypes = targetTypes
            self.targets = targets
        }
    }

}

extension NetworkFirewallClientTypes {

    public enum StatefulAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alert
        case drop
        case pass
        case reject
        case sdkUnknown(Swift.String)

        public static var allCases: [StatefulAction] {
            return [
                .alert,
                .drop,
                .pass,
                .reject
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alert: return "ALERT"
            case .drop: return "DROP"
            case .pass: return "PASS"
            case .reject: return "REJECT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension NetworkFirewallClientTypes {

    public enum StatefulRuleDirection: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case any
        case forward
        case sdkUnknown(Swift.String)

        public static var allCases: [StatefulRuleDirection] {
            return [
                .any,
                .forward
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .any: return "ANY"
            case .forward: return "FORWARD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension NetworkFirewallClientTypes {

    public enum StatefulRuleProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case any
        case dcerpc
        case dhcp
        case dns
        case ftp
        case http
        case icmp
        case ikev2
        case imap
        case krb5
        case msn
        case ntp
        case smb
        case smtp
        case ssh
        case tcp
        case tftp
        case tls
        case udp
        case sdkUnknown(Swift.String)

        public static var allCases: [StatefulRuleProtocol] {
            return [
                .any,
                .dcerpc,
                .dhcp,
                .dns,
                .ftp,
                .http,
                .icmp,
                .ikev2,
                .imap,
                .krb5,
                .msn,
                .ntp,
                .smb,
                .smtp,
                .ssh,
                .tcp,
                .tftp,
                .tls,
                .udp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .any: return "IP"
            case .dcerpc: return "DCERPC"
            case .dhcp: return "DHCP"
            case .dns: return "DNS"
            case .ftp: return "FTP"
            case .http: return "HTTP"
            case .icmp: return "ICMP"
            case .ikev2: return "IKEV2"
            case .imap: return "IMAP"
            case .krb5: return "KRB5"
            case .msn: return "MSN"
            case .ntp: return "NTP"
            case .smb: return "SMB"
            case .smtp: return "SMTP"
            case .ssh: return "SSH"
            case .tcp: return "TCP"
            case .tftp: return "TFTP"
            case .tls: return "TLS"
            case .udp: return "UDP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension NetworkFirewallClientTypes {
    /// The basic rule criteria for Network Firewall to use to inspect packet headers in stateful traffic flow inspection. Traffic flows that match the criteria are a match for the corresponding [StatefulRule].
    public struct Header {
        /// The destination IP address or address range to inspect for, in CIDR notation. To match with any address, specify ANY. Specify an IP address or a block of IP addresses in Classless Inter-Domain Routing (CIDR) notation. Network Firewall supports all address ranges for IPv4 and IPv6. Examples:
        ///
        /// * To configure Network Firewall to inspect for the IP address 192.0.2.44, specify 192.0.2.44/32.
        ///
        /// * To configure Network Firewall to inspect for IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24.
        ///
        /// * To configure Network Firewall to inspect for the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128.
        ///
        /// * To configure Network Firewall to inspect for IP addresses from 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64.
        ///
        ///
        /// For more information about CIDR notation, see the Wikipedia entry [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing).
        /// This member is required.
        public var destination: Swift.String?
        /// The destination port to inspect for. You can specify an individual port, for example 1994 and you can specify a port range, for example 1990:1994. To match with any port, specify ANY.
        /// This member is required.
        public var destinationPort: Swift.String?
        /// The direction of traffic flow to inspect. If set to ANY, the inspection matches bidirectional traffic, both from the source to the destination and from the destination to the source. If set to FORWARD, the inspection only matches traffic going from the source to the destination.
        /// This member is required.
        public var direction: NetworkFirewallClientTypes.StatefulRuleDirection?
        /// The protocol to inspect for. To specify all, you can use IP, because all traffic on Amazon Web Services and on the internet is IP.
        /// This member is required.
        public var `protocol`: NetworkFirewallClientTypes.StatefulRuleProtocol?
        /// The source IP address or address range to inspect for, in CIDR notation. To match with any address, specify ANY. Specify an IP address or a block of IP addresses in Classless Inter-Domain Routing (CIDR) notation. Network Firewall supports all address ranges for IPv4 and IPv6. Examples:
        ///
        /// * To configure Network Firewall to inspect for the IP address 192.0.2.44, specify 192.0.2.44/32.
        ///
        /// * To configure Network Firewall to inspect for IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24.
        ///
        /// * To configure Network Firewall to inspect for the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128.
        ///
        /// * To configure Network Firewall to inspect for IP addresses from 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64.
        ///
        ///
        /// For more information about CIDR notation, see the Wikipedia entry [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing).
        /// This member is required.
        public var source: Swift.String?
        /// The source port to inspect for. You can specify an individual port, for example 1994 and you can specify a port range, for example 1990:1994. To match with any port, specify ANY.
        /// This member is required.
        public var sourcePort: Swift.String?

        public init(
            destination: Swift.String? = nil,
            destinationPort: Swift.String? = nil,
            direction: NetworkFirewallClientTypes.StatefulRuleDirection? = nil,
            `protocol`: NetworkFirewallClientTypes.StatefulRuleProtocol? = nil,
            source: Swift.String? = nil,
            sourcePort: Swift.String? = nil
        )
        {
            self.destination = destination
            self.destinationPort = destinationPort
            self.direction = direction
            self.`protocol` = `protocol`
            self.source = source
            self.sourcePort = sourcePort
        }
    }

}

extension NetworkFirewallClientTypes {
    /// Additional settings for a stateful rule. This is part of the [StatefulRule] configuration.
    public struct RuleOption {
        /// The keyword for the Suricata compatible rule option. You must include a sid (signature ID), and can optionally include other keywords. For information about Suricata compatible keywords, see [Rule options](https://suricata.readthedocs.io/en/suricata-6.0.9/rules/intro.html#rule-options) in the Suricata documentation.
        /// This member is required.
        public var keyword: Swift.String?
        /// The settings of the Suricata compatible rule option. Rule options have zero or more setting values, and the number of possible and required settings depends on the Keyword. For more information about the settings for specific options, see [Rule options](https://suricata.readthedocs.io/en/suricata-6.0.9/rules/intro.html#rule-options).
        public var settings: [Swift.String]?

        public init(
            keyword: Swift.String? = nil,
            settings: [Swift.String]? = nil
        )
        {
            self.keyword = keyword
            self.settings = settings
        }
    }

}

extension NetworkFirewallClientTypes {
    /// A single Suricata rules specification, for use in a stateful rule group. Use this option to specify a simple Suricata rule with protocol, source and destination, ports, direction, and rule options. For information about the Suricata Rules format, see [Rules Format](https://suricata.readthedocs.io/en/suricata-6.0.9/rules/intro.html).
    public struct StatefulRule {
        /// Defines what Network Firewall should do with the packets in a traffic flow when the flow matches the stateful rule criteria. For all actions, Network Firewall performs the specified action and discontinues stateful inspection of the traffic flow. The actions for a stateful rule are defined as follows:
        ///
        /// * PASS - Permits the packets to go to the intended destination.
        ///
        /// * DROP - Blocks the packets from going to the intended destination and sends an alert log message, if alert logging is configured in the [Firewall][LoggingConfiguration].
        ///
        /// * ALERT - Sends an alert log message, if alert logging is configured in the [Firewall][LoggingConfiguration]. You can use this action to test a rule that you intend to use to drop traffic. You can enable the rule with ALERT action, verify in the logs that the rule is filtering as you want, then change the action to DROP.
        /// This member is required.
        public var action: NetworkFirewallClientTypes.StatefulAction?
        /// The stateful inspection criteria for this rule, used to inspect traffic flows.
        /// This member is required.
        public var header: NetworkFirewallClientTypes.Header?
        /// Additional options for the rule. These are the Suricata RuleOptions settings.
        /// This member is required.
        public var ruleOptions: [NetworkFirewallClientTypes.RuleOption]?

        public init(
            action: NetworkFirewallClientTypes.StatefulAction? = nil,
            header: NetworkFirewallClientTypes.Header? = nil,
            ruleOptions: [NetworkFirewallClientTypes.RuleOption]? = nil
        )
        {
            self.action = action
            self.header = header
            self.ruleOptions = ruleOptions
        }
    }

}

extension NetworkFirewallClientTypes {
    /// A single port range specification. This is used for source and destination port ranges in the stateless rule [MatchAttributes], SourcePorts, and DestinationPorts settings.
    public struct PortRange {
        /// The lower limit of the port range. This must be less than or equal to the ToPort specification.
        /// This member is required.
        public var fromPort: Swift.Int
        /// The upper limit of the port range. This must be greater than or equal to the FromPort specification.
        /// This member is required.
        public var toPort: Swift.Int

        public init(
            fromPort: Swift.Int = 0,
            toPort: Swift.Int = 0
        )
        {
            self.fromPort = fromPort
            self.toPort = toPort
        }
    }

}

extension NetworkFirewallClientTypes {

    public enum TCPFlag: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ack
        case cwr
        case ece
        case fin
        case psh
        case rst
        case syn
        case urg
        case sdkUnknown(Swift.String)

        public static var allCases: [TCPFlag] {
            return [
                .ack,
                .cwr,
                .ece,
                .fin,
                .psh,
                .rst,
                .syn,
                .urg
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ack: return "ACK"
            case .cwr: return "CWR"
            case .ece: return "ECE"
            case .fin: return "FIN"
            case .psh: return "PSH"
            case .rst: return "RST"
            case .syn: return "SYN"
            case .urg: return "URG"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension NetworkFirewallClientTypes {
    /// TCP flags and masks to inspect packets for, used in stateless rules [MatchAttributes] settings.
    public struct TCPFlagField {
        /// Used in conjunction with the Masks setting to define the flags that must be set and flags that must not be set in order for the packet to match. This setting can only specify values that are also specified in the Masks setting. For the flags that are specified in the masks setting, the following must be true for the packet to match:
        ///
        /// * The ones that are set in this flags setting must be set in the packet.
        ///
        /// * The ones that are not set in this flags setting must also not be set in the packet.
        /// This member is required.
        public var flags: [NetworkFirewallClientTypes.TCPFlag]?
        /// The set of flags to consider in the inspection. To inspect all flags in the valid values list, leave this with no setting.
        public var masks: [NetworkFirewallClientTypes.TCPFlag]?

        public init(
            flags: [NetworkFirewallClientTypes.TCPFlag]? = nil,
            masks: [NetworkFirewallClientTypes.TCPFlag]? = nil
        )
        {
            self.flags = flags
            self.masks = masks
        }
    }

}

extension NetworkFirewallClientTypes {
    /// Criteria for Network Firewall to use to inspect an individual packet in stateless rule inspection. Each match attributes set can include one or more items such as IP address, CIDR range, port number, protocol, and TCP flags.
    public struct MatchAttributes {
        /// The destination ports to inspect for. If not specified, this matches with any destination port. This setting is only used for protocols 6 (TCP) and 17 (UDP). You can specify individual ports, for example 1994 and you can specify port ranges, for example 1990:1994.
        public var destinationPorts: [NetworkFirewallClientTypes.PortRange]?
        /// The destination IP addresses and address ranges to inspect for, in CIDR notation. If not specified, this matches with any destination address.
        public var destinations: [NetworkFirewallClientTypes.Address]?
        /// The protocols to inspect for, specified using each protocol's assigned internet protocol number (IANA). If not specified, this matches with any protocol.
        public var protocols: [Swift.Int]?
        /// The source ports to inspect for. If not specified, this matches with any source port. This setting is only used for protocols 6 (TCP) and 17 (UDP). You can specify individual ports, for example 1994 and you can specify port ranges, for example 1990:1994.
        public var sourcePorts: [NetworkFirewallClientTypes.PortRange]?
        /// The source IP addresses and address ranges to inspect for, in CIDR notation. If not specified, this matches with any source address.
        public var sources: [NetworkFirewallClientTypes.Address]?
        /// The TCP flags and masks to inspect for. If not specified, this matches with any settings. This setting is only used for protocol 6 (TCP).
        public var tcpFlags: [NetworkFirewallClientTypes.TCPFlagField]?

        public init(
            destinationPorts: [NetworkFirewallClientTypes.PortRange]? = nil,
            destinations: [NetworkFirewallClientTypes.Address]? = nil,
            protocols: [Swift.Int]? = nil,
            sourcePorts: [NetworkFirewallClientTypes.PortRange]? = nil,
            sources: [NetworkFirewallClientTypes.Address]? = nil,
            tcpFlags: [NetworkFirewallClientTypes.TCPFlagField]? = nil
        )
        {
            self.destinationPorts = destinationPorts
            self.destinations = destinations
            self.protocols = protocols
            self.sourcePorts = sourcePorts
            self.sources = sources
            self.tcpFlags = tcpFlags
        }
    }

}

extension NetworkFirewallClientTypes {
    /// The inspection criteria and action for a single stateless rule. Network Firewall inspects each packet for the specified matching criteria. When a packet matches the criteria, Network Firewall performs the rule's actions on the packet.
    public struct RuleDefinition {
        /// The actions to take on a packet that matches one of the stateless rule definition's match attributes. You must specify a standard action and you can add custom actions. Network Firewall only forwards a packet for stateful rule inspection if you specify aws:forward_to_sfe for a rule that the packet matches, or if the packet doesn't match any stateless rule and you specify aws:forward_to_sfe for the StatelessDefaultActions setting for the [FirewallPolicy]. For every rule, you must specify exactly one of the following standard actions.
        ///
        /// * aws:pass - Discontinues all inspection of the packet and permits it to go to its intended destination.
        ///
        /// * aws:drop - Discontinues all inspection of the packet and blocks it from going to its intended destination.
        ///
        /// * aws:forward_to_sfe - Discontinues stateless inspection of the packet and forwards it to the stateful rule engine for inspection.
        ///
        ///
        /// Additionally, you can specify a custom action. To do this, you define a custom action by name and type, then provide the name you've assigned to the action in this Actions setting. For information about the options, see [CustomAction]. To provide more than one action in this setting, separate the settings with a comma. For example, if you have a custom PublishMetrics action that you've named MyMetricsAction, then you could specify the standard action aws:pass and the custom action with [“aws:pass”, “MyMetricsAction”].
        /// This member is required.
        public var actions: [Swift.String]?
        /// Criteria for Network Firewall to use to inspect an individual packet in stateless rule inspection. Each match attributes set can include one or more items such as IP address, CIDR range, port number, protocol, and TCP flags.
        /// This member is required.
        public var matchAttributes: NetworkFirewallClientTypes.MatchAttributes?

        public init(
            actions: [Swift.String]? = nil,
            matchAttributes: NetworkFirewallClientTypes.MatchAttributes? = nil
        )
        {
            self.actions = actions
            self.matchAttributes = matchAttributes
        }
    }

}

extension NetworkFirewallClientTypes {
    /// A single stateless rule. This is used in [StatelessRulesAndCustomActions].
    public struct StatelessRule {
        /// Indicates the order in which to run this rule relative to all of the rules that are defined for a stateless rule group. Network Firewall evaluates the rules in a rule group starting with the lowest priority setting. You must ensure that the priority settings are unique for the rule group. Each stateless rule group uses exactly one StatelessRulesAndCustomActions object, and each StatelessRulesAndCustomActions contains exactly one StatelessRules object. To ensure unique priority settings for your rule groups, set unique priorities for the stateless rules that you define inside any single StatelessRules object. You can change the priority settings of your rules at any time. To make it easier to insert rules later, number them so there's a wide range in between, for example use 100, 200, and so on.
        /// This member is required.
        public var priority: Swift.Int?
        /// Defines the stateless 5-tuple packet inspection criteria and the action to take on a packet that matches the criteria.
        /// This member is required.
        public var ruleDefinition: NetworkFirewallClientTypes.RuleDefinition?

        public init(
            priority: Swift.Int? = nil,
            ruleDefinition: NetworkFirewallClientTypes.RuleDefinition? = nil
        )
        {
            self.priority = priority
            self.ruleDefinition = ruleDefinition
        }
    }

}

extension NetworkFirewallClientTypes {
    /// Stateless inspection criteria. Each stateless rule group uses exactly one of these data types to define its stateless rules.
    public struct StatelessRulesAndCustomActions {
        /// Defines an array of individual custom action definitions that are available for use by the stateless rules in this StatelessRulesAndCustomActions specification. You name each custom action that you define, and then you can use it by name in your [StatelessRule][RuleDefinition]Actions specification.
        public var customActions: [NetworkFirewallClientTypes.CustomAction]?
        /// Defines the set of stateless rules for use in a stateless rule group.
        /// This member is required.
        public var statelessRules: [NetworkFirewallClientTypes.StatelessRule]?

        public init(
            customActions: [NetworkFirewallClientTypes.CustomAction]? = nil,
            statelessRules: [NetworkFirewallClientTypes.StatelessRule]? = nil
        )
        {
            self.customActions = customActions
            self.statelessRules = statelessRules
        }
    }

}

extension NetworkFirewallClientTypes {
    /// The stateless or stateful rules definitions for use in a single rule group. Each rule group requires a single RulesSource. You can use an instance of this for either stateless rules or stateful rules.
    public struct RulesSource {
        /// Stateful inspection criteria for a domain list rule group.
        public var rulesSourceList: NetworkFirewallClientTypes.RulesSourceList?
        /// Stateful inspection criteria, provided in Suricata compatible rules. Suricata is an open-source threat detection framework that includes a standard rule-based language for network traffic inspection. These rules contain the inspection criteria and the action to take for traffic that matches the criteria, so this type of rule group doesn't have a separate action setting. You can't use the priority keyword if the RuleOrder option in [StatefulRuleOptions] is set to STRICT_ORDER.
        public var rulesString: Swift.String?
        /// An array of individual stateful rules inspection criteria to be used together in a stateful rule group. Use this option to specify simple Suricata rules with protocol, source and destination, ports, direction, and rule options. For information about the Suricata Rules format, see [Rules Format](https://suricata.readthedocs.io/en/suricata-6.0.9/rules/intro.html).
        public var statefulRules: [NetworkFirewallClientTypes.StatefulRule]?
        /// Stateless inspection criteria to be used in a stateless rule group.
        public var statelessRulesAndCustomActions: NetworkFirewallClientTypes.StatelessRulesAndCustomActions?

        public init(
            rulesSourceList: NetworkFirewallClientTypes.RulesSourceList? = nil,
            rulesString: Swift.String? = nil,
            statefulRules: [NetworkFirewallClientTypes.StatefulRule]? = nil,
            statelessRulesAndCustomActions: NetworkFirewallClientTypes.StatelessRulesAndCustomActions? = nil
        )
        {
            self.rulesSourceList = rulesSourceList
            self.rulesString = rulesString
            self.statefulRules = statefulRules
            self.statelessRulesAndCustomActions = statelessRulesAndCustomActions
        }
    }

}

extension NetworkFirewallClientTypes {
    /// A set of port ranges for use in the rules in a rule group.
    public struct PortSet {
        /// The set of port ranges.
        public var definition: [Swift.String]?

        public init(
            definition: [Swift.String]? = nil
        )
        {
            self.definition = definition
        }
    }

}

extension NetworkFirewallClientTypes {
    /// Settings that are available for use in the rules in the [RuleGroup] where this is defined.
    public struct RuleVariables {
        /// A list of IP addresses and address ranges, in CIDR notation.
        public var ipSets: [Swift.String: NetworkFirewallClientTypes.IPSet]?
        /// A list of port ranges.
        public var portSets: [Swift.String: NetworkFirewallClientTypes.PortSet]?

        public init(
            ipSets: [Swift.String: NetworkFirewallClientTypes.IPSet]? = nil,
            portSets: [Swift.String: NetworkFirewallClientTypes.PortSet]? = nil
        )
        {
            self.ipSets = ipSets
            self.portSets = portSets
        }
    }

}

extension NetworkFirewallClientTypes {
    /// Additional options governing how Network Firewall handles the rule group. You can only use these for stateful rule groups.
    public struct StatefulRuleOptions {
        /// Indicates how to manage the order of the rule evaluation for the rule group. DEFAULT_ACTION_ORDER is the default behavior. Stateful rules are provided to the rule engine as Suricata compatible strings, and Suricata evaluates them based on certain settings. For more information, see [Evaluation order for stateful rules](https://docs.aws.amazon.com/network-firewall/latest/developerguide/suricata-rule-evaluation-order.html) in the Network Firewall Developer Guide.
        public var ruleOrder: NetworkFirewallClientTypes.RuleOrder?

        public init(
            ruleOrder: NetworkFirewallClientTypes.RuleOrder? = nil
        )
        {
            self.ruleOrder = ruleOrder
        }
    }

}

extension NetworkFirewallClientTypes {
    /// The object that defines the rules in a rule group. This, along with [RuleGroupResponse], define the rule group. You can retrieve all objects for a rule group by calling [DescribeRuleGroup]. Network Firewall uses a rule group to inspect and control network traffic. You define stateless rule groups to inspect individual packets and you define stateful rule groups to inspect packets in the context of their traffic flow. To use a rule group, you include it by reference in an Network Firewall firewall policy, then you use the policy in a firewall. You can reference a rule group from more than one firewall policy, and you can use a firewall policy in more than one firewall.
    public struct RuleGroup {
        /// The list of a rule group's reference sets.
        public var referenceSets: NetworkFirewallClientTypes.ReferenceSets?
        /// Settings that are available for use in the rules in the rule group. You can only use these for stateful rule groups.
        public var ruleVariables: NetworkFirewallClientTypes.RuleVariables?
        /// The stateful rules or stateless rules for the rule group.
        /// This member is required.
        public var rulesSource: NetworkFirewallClientTypes.RulesSource?
        /// Additional options governing how Network Firewall handles stateful rules. The policies where you use your stateful rule group must have stateful rule options settings that are compatible with these settings. Some limitations apply; for more information, see [Strict evaluation order](https://docs.aws.amazon.com/network-firewall/latest/developerguide/suricata-limitations-caveats.html) in the Network Firewall Developer Guide.
        public var statefulRuleOptions: NetworkFirewallClientTypes.StatefulRuleOptions?

        public init(
            referenceSets: NetworkFirewallClientTypes.ReferenceSets? = nil,
            ruleVariables: NetworkFirewallClientTypes.RuleVariables? = nil,
            rulesSource: NetworkFirewallClientTypes.RulesSource? = nil,
            statefulRuleOptions: NetworkFirewallClientTypes.StatefulRuleOptions? = nil
        )
        {
            self.referenceSets = referenceSets
            self.ruleVariables = ruleVariables
            self.rulesSource = rulesSource
            self.statefulRuleOptions = statefulRuleOptions
        }
    }

}

extension NetworkFirewallClientTypes {
    /// High-level information about the managed rule group that your own rule group is copied from. You can use the the metadata to track version updates made to the originating rule group. You can retrieve all objects for a rule group by calling [DescribeRuleGroup](https://docs.aws.amazon.com/network-firewall/latest/APIReference/API_DescribeRuleGroup.html).
    public struct SourceMetadata {
        /// The Amazon Resource Name (ARN) of the rule group that your own rule group is copied from.
        public var sourceArn: Swift.String?
        /// The update token of the Amazon Web Services managed rule group that your own rule group is copied from. To determine the update token for the managed rule group, call [DescribeRuleGroup](https://docs.aws.amazon.com/network-firewall/latest/APIReference/API_DescribeRuleGroup.html#networkfirewall-DescribeRuleGroup-response-UpdateToken).
        public var sourceUpdateToken: Swift.String?

        public init(
            sourceArn: Swift.String? = nil,
            sourceUpdateToken: Swift.String? = nil
        )
        {
            self.sourceArn = sourceArn
            self.sourceUpdateToken = sourceUpdateToken
        }
    }

}

extension NetworkFirewallClientTypes {

    public enum RuleGroupType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case stateful
        case stateless
        case sdkUnknown(Swift.String)

        public static var allCases: [RuleGroupType] {
            return [
                .stateful,
                .stateless
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .stateful: return "STATEFUL"
            case .stateless: return "STATELESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateRuleGroupInput {
    /// Indicates whether you want Network Firewall to analyze the stateless rules in the rule group for rule behavior such as asymmetric routing. If set to TRUE, Network Firewall runs the analysis and then creates the rule group for you. To run the stateless rule group analyzer without creating the rule group, set DryRun to TRUE.
    public var analyzeRuleGroup: Swift.Bool?
    /// The maximum operating resources that this rule group can use. Rule group capacity is fixed at creation. When you update a rule group, you are limited to this capacity. When you reference a rule group from a firewall policy, Network Firewall reserves this capacity for the rule group. You can retrieve the capacity that would be required for a rule group before you create the rule group by calling [CreateRuleGroup] with DryRun set to TRUE. You can't change or exceed this capacity when you update the rule group, so leave room for your rule group to grow. Capacity for a stateless rule group For a stateless rule group, the capacity required is the sum of the capacity requirements of the individual rules that you expect to have in the rule group. To calculate the capacity requirement of a single rule, multiply the capacity requirement values of each of the rule's match settings:
    ///
    /// * A match setting with no criteria specified has a value of 1.
    ///
    /// * A match setting with Any specified has a value of 1.
    ///
    /// * All other match settings have a value equal to the number of elements provided in the setting. For example, a protocol setting ["UDP"] and a source setting ["10.0.0.0/24"] each have a value of 1. A protocol setting ["UDP","TCP"] has a value of 2. A source setting ["10.0.0.0/24","10.0.0.1/24","10.0.0.2/24"] has a value of 3.
    ///
    ///
    /// A rule with no criteria specified in any of its match settings has a capacity requirement of 1. A rule with protocol setting ["UDP","TCP"], source setting ["10.0.0.0/24","10.0.0.1/24","10.0.0.2/24"], and a single specification or no specification for each of the other match settings has a capacity requirement of 6. Capacity for a stateful rule group For a stateful rule group, the minimum capacity required is the number of individual rules that you expect to have in the rule group.
    /// This member is required.
    public var capacity: Swift.Int?
    /// A description of the rule group.
    public var description: Swift.String?
    /// Indicates whether you want Network Firewall to just check the validity of the request, rather than run the request. If set to TRUE, Network Firewall checks whether the request can run successfully, but doesn't actually make the requested changes. The call returns the value that the request would return if you ran it with dry run set to FALSE, but doesn't make additions or changes to your resources. This option allows you to make sure that you have the required permissions to run the request and that your request parameters are valid. If set to FALSE, Network Firewall makes the requested changes to your resources.
    public var dryRun: Swift.Bool?
    /// A complex type that contains settings for encryption of your rule group resources.
    public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
    /// An object that defines the rule group rules. You must provide either this rule group setting or a Rules setting, but not both.
    public var ruleGroup: NetworkFirewallClientTypes.RuleGroup?
    /// The descriptive name of the rule group. You can't change the name of a rule group after you create it.
    /// This member is required.
    public var ruleGroupName: Swift.String?
    /// A string containing stateful rule group rules specifications in Suricata flat format, with one rule per line. Use this to import your existing Suricata compatible rule groups. You must provide either this rules setting or a populated RuleGroup setting, but not both. You can provide your rule group specification in Suricata flat format through this setting when you create or update your rule group. The call response returns a [RuleGroup] object that Network Firewall has populated from your string.
    public var rules: Swift.String?
    /// A complex type that contains metadata about the rule group that your own rule group is copied from. You can use the metadata to keep track of updates made to the originating rule group.
    public var sourceMetadata: NetworkFirewallClientTypes.SourceMetadata?
    /// The key:value pairs to associate with the resource.
    public var tags: [NetworkFirewallClientTypes.Tag]?
    /// Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules.
    /// This member is required.
    public var type: NetworkFirewallClientTypes.RuleGroupType?

    public init(
        analyzeRuleGroup: Swift.Bool? = false,
        capacity: Swift.Int? = nil,
        description: Swift.String? = nil,
        dryRun: Swift.Bool? = false,
        encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
        ruleGroup: NetworkFirewallClientTypes.RuleGroup? = nil,
        ruleGroupName: Swift.String? = nil,
        rules: Swift.String? = nil,
        sourceMetadata: NetworkFirewallClientTypes.SourceMetadata? = nil,
        tags: [NetworkFirewallClientTypes.Tag]? = nil,
        type: NetworkFirewallClientTypes.RuleGroupType? = nil
    )
    {
        self.analyzeRuleGroup = analyzeRuleGroup
        self.capacity = capacity
        self.description = description
        self.dryRun = dryRun
        self.encryptionConfiguration = encryptionConfiguration
        self.ruleGroup = ruleGroup
        self.ruleGroupName = ruleGroupName
        self.rules = rules
        self.sourceMetadata = sourceMetadata
        self.tags = tags
        self.type = type
    }
}

extension NetworkFirewallClientTypes {
    /// The high-level properties of a rule group. This, along with the [RuleGroup], define the rule group. You can retrieve all objects for a rule group by calling [DescribeRuleGroup].
    public struct RuleGroupResponse {
        /// The list of analysis results for AnalyzeRuleGroup. If you set AnalyzeRuleGroup to TRUE in [CreateRuleGroup], [UpdateRuleGroup], or [DescribeRuleGroup], Network Firewall analyzes the rule group and identifies the rules that might adversely effect your firewall's functionality. For example, if Network Firewall detects a rule that's routing traffic asymmetrically, which impacts the service's ability to properly process traffic, the service includes the rule in the list of analysis results.
        public var analysisResults: [NetworkFirewallClientTypes.AnalysisResult]?
        /// The maximum operating resources that this rule group can use. Rule group capacity is fixed at creation. When you update a rule group, you are limited to this capacity. When you reference a rule group from a firewall policy, Network Firewall reserves this capacity for the rule group. You can retrieve the capacity that would be required for a rule group before you create the rule group by calling [CreateRuleGroup] with DryRun set to TRUE.
        public var capacity: Swift.Int?
        /// The number of capacity units currently consumed by the rule group rules.
        public var consumedCapacity: Swift.Int?
        /// A description of the rule group.
        public var description: Swift.String?
        /// A complex type that contains the Amazon Web Services KMS encryption configuration settings for your rule group.
        public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
        /// The last time that the rule group was changed.
        public var lastModifiedTime: Foundation.Date?
        /// The number of firewall policies that use this rule group.
        public var numberOfAssociations: Swift.Int?
        /// The Amazon Resource Name (ARN) of the rule group. If this response is for a create request that had DryRun set to TRUE, then this ARN is a placeholder that isn't attached to a valid resource.
        /// This member is required.
        public var ruleGroupArn: Swift.String?
        /// The unique identifier for the rule group.
        /// This member is required.
        public var ruleGroupId: Swift.String?
        /// The descriptive name of the rule group. You can't change the name of a rule group after you create it.
        /// This member is required.
        public var ruleGroupName: Swift.String?
        /// Detailed information about the current status of a rule group.
        public var ruleGroupStatus: NetworkFirewallClientTypes.ResourceStatus?
        /// The Amazon resource name (ARN) of the Amazon Simple Notification Service SNS topic that's used to record changes to the managed rule group. You can subscribe to the SNS topic to receive notifications when the managed rule group is modified, such as for new versions and for version expiration. For more information, see the [Amazon Simple Notification Service Developer Guide.](https://docs.aws.amazon.com/sns/latest/dg/welcome.html).
        public var snsTopic: Swift.String?
        /// A complex type that contains metadata about the rule group that your own rule group is copied from. You can use the metadata to track the version updates made to the originating rule group.
        public var sourceMetadata: NetworkFirewallClientTypes.SourceMetadata?
        /// The key:value pairs to associate with the resource.
        public var tags: [NetworkFirewallClientTypes.Tag]?
        /// Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules.
        public var type: NetworkFirewallClientTypes.RuleGroupType?

        public init(
            analysisResults: [NetworkFirewallClientTypes.AnalysisResult]? = nil,
            capacity: Swift.Int? = nil,
            consumedCapacity: Swift.Int? = nil,
            description: Swift.String? = nil,
            encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            numberOfAssociations: Swift.Int? = nil,
            ruleGroupArn: Swift.String? = nil,
            ruleGroupId: Swift.String? = nil,
            ruleGroupName: Swift.String? = nil,
            ruleGroupStatus: NetworkFirewallClientTypes.ResourceStatus? = nil,
            snsTopic: Swift.String? = nil,
            sourceMetadata: NetworkFirewallClientTypes.SourceMetadata? = nil,
            tags: [NetworkFirewallClientTypes.Tag]? = nil,
            type: NetworkFirewallClientTypes.RuleGroupType? = nil
        )
        {
            self.analysisResults = analysisResults
            self.capacity = capacity
            self.consumedCapacity = consumedCapacity
            self.description = description
            self.encryptionConfiguration = encryptionConfiguration
            self.lastModifiedTime = lastModifiedTime
            self.numberOfAssociations = numberOfAssociations
            self.ruleGroupArn = ruleGroupArn
            self.ruleGroupId = ruleGroupId
            self.ruleGroupName = ruleGroupName
            self.ruleGroupStatus = ruleGroupStatus
            self.snsTopic = snsTopic
            self.sourceMetadata = sourceMetadata
            self.tags = tags
            self.type = type
        }
    }

}

public struct CreateRuleGroupOutput {
    /// The high-level properties of a rule group. This, along with the [RuleGroup], define the rule group. You can retrieve all objects for a rule group by calling [DescribeRuleGroup].
    /// This member is required.
    public var ruleGroupResponse: NetworkFirewallClientTypes.RuleGroupResponse?
    /// A token used for optimistic locking. Network Firewall returns a token to your requests that access the rule group. The token marks the state of the rule group resource at the time of the request. To make changes to the rule group, you provide the token in your request. Network Firewall uses the token to ensure that the rule group hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the rule group again to get a current copy of it with a current token. Reapply your changes as needed, then try the operation again using the new token.
    /// This member is required.
    public var updateToken: Swift.String?

    public init(
        ruleGroupResponse: NetworkFirewallClientTypes.RuleGroupResponse? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.ruleGroupResponse = ruleGroupResponse
        self.updateToken = updateToken
    }
}

extension NetworkFirewallClientTypes {
    /// Settings that define the Secure Sockets Layer/Transport Layer Security (SSL/TLS) traffic that Network Firewall should decrypt for inspection by the stateful rule engine.
    public struct ServerCertificateScope {
        /// The destination ports to decrypt for inspection, in Transmission Control Protocol (TCP) format. If not specified, this matches with any destination port. You can specify individual ports, for example 1994, and you can specify port ranges, such as 1990:1994.
        public var destinationPorts: [NetworkFirewallClientTypes.PortRange]?
        /// The destination IP addresses and address ranges to decrypt for inspection, in CIDR notation. If not specified, this matches with any destination address.
        public var destinations: [NetworkFirewallClientTypes.Address]?
        /// The protocols to decrypt for inspection, specified using each protocol's assigned internet protocol number (IANA). Network Firewall currently supports only TCP.
        public var protocols: [Swift.Int]?
        /// The source ports to decrypt for inspection, in Transmission Control Protocol (TCP) format. If not specified, this matches with any source port. You can specify individual ports, for example 1994, and you can specify port ranges, such as 1990:1994.
        public var sourcePorts: [NetworkFirewallClientTypes.PortRange]?
        /// The source IP addresses and address ranges to decrypt for inspection, in CIDR notation. If not specified, this matches with any source address.
        public var sources: [NetworkFirewallClientTypes.Address]?

        public init(
            destinationPorts: [NetworkFirewallClientTypes.PortRange]? = nil,
            destinations: [NetworkFirewallClientTypes.Address]? = nil,
            protocols: [Swift.Int]? = nil,
            sourcePorts: [NetworkFirewallClientTypes.PortRange]? = nil,
            sources: [NetworkFirewallClientTypes.Address]? = nil
        )
        {
            self.destinationPorts = destinationPorts
            self.destinations = destinations
            self.protocols = protocols
            self.sourcePorts = sourcePorts
            self.sources = sources
        }
    }

}

extension NetworkFirewallClientTypes {
    /// Any Certificate Manager (ACM) Secure Sockets Layer/Transport Layer Security (SSL/TLS) server certificate that's associated with a [ServerCertificateConfiguration]. Used in a [TLSInspectionConfiguration] for inspection of inbound traffic to your firewall. You must request or import a SSL/TLS certificate into ACM for each domain Network Firewall needs to decrypt and inspect. Network Firewall uses the SSL/TLS certificates to decrypt specified inbound SSL/TLS traffic going to your firewall. For information about working with certificates in Certificate Manager, see [Request a public certificate ](https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-public.html) or [Importing certificates](https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html) in the Certificate Manager User Guide.
    public struct ServerCertificate {
        /// The Amazon Resource Name (ARN) of the Certificate Manager SSL/TLS server certificate that's used for inbound SSL/TLS inspection.
        public var resourceArn: Swift.String?

        public init(
            resourceArn: Swift.String? = nil
        )
        {
            self.resourceArn = resourceArn
        }
    }

}

extension NetworkFirewallClientTypes {
    /// Configures the Certificate Manager certificates and scope that Network Firewall uses to decrypt and re-encrypt traffic using a [TLSInspectionConfiguration]. You can configure ServerCertificates for inbound SSL/TLS inspection, a CertificateAuthorityArn for outbound SSL/TLS inspection, or both. For information about working with certificates for TLS inspection, see [ Using SSL/TLS server certficiates with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection-certificate-requirements.html) in the Network Firewall Developer Guide. If a server certificate that's associated with your [TLSInspectionConfiguration] is revoked, deleted, or expired it can result in client-side TLS errors.
    public struct ServerCertificateConfiguration {
        /// The Amazon Resource Name (ARN) of the imported certificate authority (CA) certificate within Certificate Manager (ACM) to use for outbound SSL/TLS inspection. The following limitations apply:
        ///
        /// * You can use CA certificates that you imported into ACM, but you can't generate CA certificates with ACM.
        ///
        /// * You can't use certificates issued by Private Certificate Authority.
        ///
        ///
        /// For more information about configuring certificates for outbound inspection, see [Using SSL/TLS certificates with certificates with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection-certificate-requirements.html) in the Network Firewall Developer Guide. For information about working with certificates in ACM, see [Importing certificates](https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html) in the Certificate Manager User Guide.
        public var certificateAuthorityArn: Swift.String?
        /// When enabled, Network Firewall checks if the server certificate presented by the server in the SSL/TLS connection has a revoked or unkown status. If the certificate has an unknown or revoked status, you must specify the actions that Network Firewall takes on outbound traffic. To check the certificate revocation status, you must also specify a CertificateAuthorityArn in [ServerCertificateConfiguration].
        public var checkCertificateRevocationStatus: NetworkFirewallClientTypes.CheckCertificateRevocationStatusActions?
        /// A list of scopes.
        public var scopes: [NetworkFirewallClientTypes.ServerCertificateScope]?
        /// The list of server certificates to use for inbound SSL/TLS inspection.
        public var serverCertificates: [NetworkFirewallClientTypes.ServerCertificate]?

        public init(
            certificateAuthorityArn: Swift.String? = nil,
            checkCertificateRevocationStatus: NetworkFirewallClientTypes.CheckCertificateRevocationStatusActions? = nil,
            scopes: [NetworkFirewallClientTypes.ServerCertificateScope]? = nil,
            serverCertificates: [NetworkFirewallClientTypes.ServerCertificate]? = nil
        )
        {
            self.certificateAuthorityArn = certificateAuthorityArn
            self.checkCertificateRevocationStatus = checkCertificateRevocationStatus
            self.scopes = scopes
            self.serverCertificates = serverCertificates
        }
    }

}

extension NetworkFirewallClientTypes {
    /// The object that defines a TLS inspection configuration. This, along with [TLSInspectionConfigurationResponse], define the TLS inspection configuration. You can retrieve all objects for a TLS inspection configuration by calling [DescribeTLSInspectionConfiguration]. Network Firewall uses a TLS inspection configuration to decrypt traffic. Network Firewall re-encrypts the traffic before sending it to its destination. To use a TLS inspection configuration, you add it to a new Network Firewall firewall policy, then you apply the firewall policy to a firewall. Network Firewall acts as a proxy service to decrypt and inspect the traffic traveling through your firewalls. You can reference a TLS inspection configuration from more than one firewall policy, and you can use a firewall policy in more than one firewall. For more information about using TLS inspection configurations, see [Inspecting SSL/TLS traffic with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection.html) in the Network Firewall Developer Guide.
    public struct TLSInspectionConfiguration {
        /// Lists the server certificate configurations that are associated with the TLS configuration.
        public var serverCertificateConfigurations: [NetworkFirewallClientTypes.ServerCertificateConfiguration]?

        public init(
            serverCertificateConfigurations: [NetworkFirewallClientTypes.ServerCertificateConfiguration]? = nil
        )
        {
            self.serverCertificateConfigurations = serverCertificateConfigurations
        }
    }

}

public struct CreateTLSInspectionConfigurationInput {
    /// A description of the TLS inspection configuration.
    public var description: Swift.String?
    /// A complex type that contains optional Amazon Web Services Key Management Service (KMS) encryption settings for your Network Firewall resources. Your data is encrypted by default with an Amazon Web Services owned key that Amazon Web Services owns and manages for you. You can use either the Amazon Web Services owned key, or provide your own customer managed key. To learn more about KMS encryption of your Network Firewall resources, see [Encryption at rest with Amazon Web Services Key Managment Service](https://docs.aws.amazon.com/kms/latest/developerguide/kms-encryption-at-rest.html) in the Network Firewall Developer Guide.
    public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
    /// The key:value pairs to associate with the resource.
    public var tags: [NetworkFirewallClientTypes.Tag]?
    /// The object that defines a TLS inspection configuration. This, along with [TLSInspectionConfigurationResponse], define the TLS inspection configuration. You can retrieve all objects for a TLS inspection configuration by calling [DescribeTLSInspectionConfiguration]. Network Firewall uses a TLS inspection configuration to decrypt traffic. Network Firewall re-encrypts the traffic before sending it to its destination. To use a TLS inspection configuration, you add it to a new Network Firewall firewall policy, then you apply the firewall policy to a firewall. Network Firewall acts as a proxy service to decrypt and inspect the traffic traveling through your firewalls. You can reference a TLS inspection configuration from more than one firewall policy, and you can use a firewall policy in more than one firewall. For more information about using TLS inspection configurations, see [Inspecting SSL/TLS traffic with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection.html) in the Network Firewall Developer Guide.
    /// This member is required.
    public var tlsInspectionConfiguration: NetworkFirewallClientTypes.TLSInspectionConfiguration?
    /// The descriptive name of the TLS inspection configuration. You can't change the name of a TLS inspection configuration after you create it.
    /// This member is required.
    public var tlsInspectionConfigurationName: Swift.String?

    public init(
        description: Swift.String? = nil,
        encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
        tags: [NetworkFirewallClientTypes.Tag]? = nil,
        tlsInspectionConfiguration: NetworkFirewallClientTypes.TLSInspectionConfiguration? = nil,
        tlsInspectionConfigurationName: Swift.String? = nil
    )
    {
        self.description = description
        self.encryptionConfiguration = encryptionConfiguration
        self.tags = tags
        self.tlsInspectionConfiguration = tlsInspectionConfiguration
        self.tlsInspectionConfigurationName = tlsInspectionConfigurationName
    }
}

extension NetworkFirewallClientTypes {
    /// The high-level properties of a TLS inspection configuration. This, along with the TLSInspectionConfiguration, define the TLS inspection configuration. You can retrieve all objects for a TLS inspection configuration by calling DescribeTLSInspectionConfiguration.
    public struct TLSInspectionConfigurationResponse {
        /// Contains metadata about an Certificate Manager certificate.
        public var certificateAuthority: NetworkFirewallClientTypes.TlsCertificateData?
        /// A list of the certificates associated with the TLS inspection configuration.
        public var certificates: [NetworkFirewallClientTypes.TlsCertificateData]?
        /// A description of the TLS inspection configuration.
        public var description: Swift.String?
        /// A complex type that contains the Amazon Web Services KMS encryption configuration settings for your TLS inspection configuration.
        public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
        /// The last time that the TLS inspection configuration was changed.
        public var lastModifiedTime: Foundation.Date?
        /// The number of firewall policies that use this TLS inspection configuration.
        public var numberOfAssociations: Swift.Int?
        /// The key:value pairs to associate with the resource.
        public var tags: [NetworkFirewallClientTypes.Tag]?
        /// The Amazon Resource Name (ARN) of the TLS inspection configuration.
        /// This member is required.
        public var tlsInspectionConfigurationArn: Swift.String?
        /// A unique identifier for the TLS inspection configuration. This ID is returned in the responses to create and list commands. You provide it to operations such as update and delete.
        /// This member is required.
        public var tlsInspectionConfigurationId: Swift.String?
        /// The descriptive name of the TLS inspection configuration. You can't change the name of a TLS inspection configuration after you create it.
        /// This member is required.
        public var tlsInspectionConfigurationName: Swift.String?
        /// Detailed information about the current status of a [TLSInspectionConfiguration]. You can retrieve this for a TLS inspection configuration by calling [DescribeTLSInspectionConfiguration] and providing the TLS inspection configuration name and ARN.
        public var tlsInspectionConfigurationStatus: NetworkFirewallClientTypes.ResourceStatus?

        public init(
            certificateAuthority: NetworkFirewallClientTypes.TlsCertificateData? = nil,
            certificates: [NetworkFirewallClientTypes.TlsCertificateData]? = nil,
            description: Swift.String? = nil,
            encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            numberOfAssociations: Swift.Int? = nil,
            tags: [NetworkFirewallClientTypes.Tag]? = nil,
            tlsInspectionConfigurationArn: Swift.String? = nil,
            tlsInspectionConfigurationId: Swift.String? = nil,
            tlsInspectionConfigurationName: Swift.String? = nil,
            tlsInspectionConfigurationStatus: NetworkFirewallClientTypes.ResourceStatus? = nil
        )
        {
            self.certificateAuthority = certificateAuthority
            self.certificates = certificates
            self.description = description
            self.encryptionConfiguration = encryptionConfiguration
            self.lastModifiedTime = lastModifiedTime
            self.numberOfAssociations = numberOfAssociations
            self.tags = tags
            self.tlsInspectionConfigurationArn = tlsInspectionConfigurationArn
            self.tlsInspectionConfigurationId = tlsInspectionConfigurationId
            self.tlsInspectionConfigurationName = tlsInspectionConfigurationName
            self.tlsInspectionConfigurationStatus = tlsInspectionConfigurationStatus
        }
    }

}

public struct CreateTLSInspectionConfigurationOutput {
    /// The high-level properties of a TLS inspection configuration. This, along with the [TLSInspectionConfiguration], define the TLS inspection configuration. You can retrieve all objects for a TLS inspection configuration by calling [DescribeTLSInspectionConfiguration].
    /// This member is required.
    public var tlsInspectionConfigurationResponse: NetworkFirewallClientTypes.TLSInspectionConfigurationResponse?
    /// A token used for optimistic locking. Network Firewall returns a token to your requests that access the TLS inspection configuration. The token marks the state of the TLS inspection configuration resource at the time of the request. To make changes to the TLS inspection configuration, you provide the token in your request. Network Firewall uses the token to ensure that the TLS inspection configuration hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the TLS inspection configuration again to get a current copy of it with a current token. Reapply your changes as needed, then try the operation again using the new token.
    /// This member is required.
    public var updateToken: Swift.String?

    public init(
        tlsInspectionConfigurationResponse: NetworkFirewallClientTypes.TLSInspectionConfigurationResponse? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.tlsInspectionConfigurationResponse = tlsInspectionConfigurationResponse
        self.updateToken = updateToken
    }
}

/// The operation you requested isn't supported by Network Firewall.
public struct UnsupportedOperationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedOperationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteFirewallInput {
    /// The Amazon Resource Name (ARN) of the firewall. You must specify the ARN or the name, and you can specify both.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallName: Swift.String?

    public init(
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
    }
}

public struct DeleteFirewallOutput {
    /// The firewall defines the configuration settings for an Network Firewall firewall. These settings include the firewall policy, the subnets in your VPC to use for the firewall endpoints, and any tags that are attached to the firewall Amazon Web Services resource. The status of the firewall, for example whether it's ready to filter network traffic, is provided in the corresponding [FirewallStatus]. You can retrieve both objects by calling [DescribeFirewall].
    public var firewall: NetworkFirewallClientTypes.Firewall?
    /// Detailed information about the current status of a [Firewall]. You can retrieve this for a firewall by calling [DescribeFirewall] and providing the firewall name and ARN.
    public var firewallStatus: NetworkFirewallClientTypes.FirewallStatus?

    public init(
        firewall: NetworkFirewallClientTypes.Firewall? = nil,
        firewallStatus: NetworkFirewallClientTypes.FirewallStatus? = nil
    )
    {
        self.firewall = firewall
        self.firewallStatus = firewallStatus
    }
}

public struct DeleteFirewallPolicyInput {
    /// The Amazon Resource Name (ARN) of the firewall policy. You must specify the ARN or the name, and you can specify both.
    public var firewallPolicyArn: Swift.String?
    /// The descriptive name of the firewall policy. You can't change the name of a firewall policy after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallPolicyName: Swift.String?

    public init(
        firewallPolicyArn: Swift.String? = nil,
        firewallPolicyName: Swift.String? = nil
    )
    {
        self.firewallPolicyArn = firewallPolicyArn
        self.firewallPolicyName = firewallPolicyName
    }
}

public struct DeleteFirewallPolicyOutput {
    /// The object containing the definition of the [FirewallPolicyResponse] that you asked to delete.
    /// This member is required.
    public var firewallPolicyResponse: NetworkFirewallClientTypes.FirewallPolicyResponse?

    public init(
        firewallPolicyResponse: NetworkFirewallClientTypes.FirewallPolicyResponse? = nil
    )
    {
        self.firewallPolicyResponse = firewallPolicyResponse
    }
}

/// The policy statement failed validation.
public struct InvalidResourcePolicyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidResourcePolicyException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteResourcePolicyInput {
    /// The Amazon Resource Name (ARN) of the rule group or firewall policy whose resource policy you want to delete.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct DeleteResourcePolicyOutput {

    public init() { }
}

public struct DeleteRuleGroupInput {
    /// The Amazon Resource Name (ARN) of the rule group. You must specify the ARN or the name, and you can specify both.
    public var ruleGroupArn: Swift.String?
    /// The descriptive name of the rule group. You can't change the name of a rule group after you create it. You must specify the ARN or the name, and you can specify both.
    public var ruleGroupName: Swift.String?
    /// Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules. This setting is required for requests that do not include the RuleGroupARN.
    public var type: NetworkFirewallClientTypes.RuleGroupType?

    public init(
        ruleGroupArn: Swift.String? = nil,
        ruleGroupName: Swift.String? = nil,
        type: NetworkFirewallClientTypes.RuleGroupType? = nil
    )
    {
        self.ruleGroupArn = ruleGroupArn
        self.ruleGroupName = ruleGroupName
        self.type = type
    }
}

public struct DeleteRuleGroupOutput {
    /// The high-level properties of a rule group. This, along with the [RuleGroup], define the rule group. You can retrieve all objects for a rule group by calling [DescribeRuleGroup].
    /// This member is required.
    public var ruleGroupResponse: NetworkFirewallClientTypes.RuleGroupResponse?

    public init(
        ruleGroupResponse: NetworkFirewallClientTypes.RuleGroupResponse? = nil
    )
    {
        self.ruleGroupResponse = ruleGroupResponse
    }
}

public struct DeleteTLSInspectionConfigurationInput {
    /// The Amazon Resource Name (ARN) of the TLS inspection configuration. You must specify the ARN or the name, and you can specify both.
    public var tlsInspectionConfigurationArn: Swift.String?
    /// The descriptive name of the TLS inspection configuration. You can't change the name of a TLS inspection configuration after you create it. You must specify the ARN or the name, and you can specify both.
    public var tlsInspectionConfigurationName: Swift.String?

    public init(
        tlsInspectionConfigurationArn: Swift.String? = nil,
        tlsInspectionConfigurationName: Swift.String? = nil
    )
    {
        self.tlsInspectionConfigurationArn = tlsInspectionConfigurationArn
        self.tlsInspectionConfigurationName = tlsInspectionConfigurationName
    }
}

public struct DeleteTLSInspectionConfigurationOutput {
    /// The high-level properties of a TLS inspection configuration. This, along with the [TLSInspectionConfiguration], define the TLS inspection configuration. You can retrieve all objects for a TLS inspection configuration by calling [DescribeTLSInspectionConfiguration].
    /// This member is required.
    public var tlsInspectionConfigurationResponse: NetworkFirewallClientTypes.TLSInspectionConfigurationResponse?

    public init(
        tlsInspectionConfigurationResponse: NetworkFirewallClientTypes.TLSInspectionConfigurationResponse? = nil
    )
    {
        self.tlsInspectionConfigurationResponse = tlsInspectionConfigurationResponse
    }
}

public struct DescribeFirewallInput {
    /// The Amazon Resource Name (ARN) of the firewall. You must specify the ARN or the name, and you can specify both.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallName: Swift.String?

    public init(
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
    }
}

public struct DescribeFirewallOutput {
    /// The configuration settings for the firewall. These settings include the firewall policy and the subnets in your VPC to use for the firewall endpoints.
    public var firewall: NetworkFirewallClientTypes.Firewall?
    /// Detailed information about the current status of a [Firewall]. You can retrieve this for a firewall by calling [DescribeFirewall] and providing the firewall name and ARN.
    public var firewallStatus: NetworkFirewallClientTypes.FirewallStatus?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init(
        firewall: NetworkFirewallClientTypes.Firewall? = nil,
        firewallStatus: NetworkFirewallClientTypes.FirewallStatus? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.firewall = firewall
        self.firewallStatus = firewallStatus
        self.updateToken = updateToken
    }
}

public struct DescribeFirewallPolicyInput {
    /// The Amazon Resource Name (ARN) of the firewall policy. You must specify the ARN or the name, and you can specify both.
    public var firewallPolicyArn: Swift.String?
    /// The descriptive name of the firewall policy. You can't change the name of a firewall policy after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallPolicyName: Swift.String?

    public init(
        firewallPolicyArn: Swift.String? = nil,
        firewallPolicyName: Swift.String? = nil
    )
    {
        self.firewallPolicyArn = firewallPolicyArn
        self.firewallPolicyName = firewallPolicyName
    }
}

public struct DescribeFirewallPolicyOutput {
    /// The policy for the specified firewall policy.
    public var firewallPolicy: NetworkFirewallClientTypes.FirewallPolicy?
    /// The high-level properties of a firewall policy. This, along with the [FirewallPolicy], define the policy. You can retrieve all objects for a firewall policy by calling [DescribeFirewallPolicy].
    /// This member is required.
    public var firewallPolicyResponse: NetworkFirewallClientTypes.FirewallPolicyResponse?
    /// A token used for optimistic locking. Network Firewall returns a token to your requests that access the firewall policy. The token marks the state of the policy resource at the time of the request. To make changes to the policy, you provide the token in your request. Network Firewall uses the token to ensure that the policy hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall policy again to get a current copy of it with current token. Reapply your changes as needed, then try the operation again using the new token.
    /// This member is required.
    public var updateToken: Swift.String?

    public init(
        firewallPolicy: NetworkFirewallClientTypes.FirewallPolicy? = nil,
        firewallPolicyResponse: NetworkFirewallClientTypes.FirewallPolicyResponse? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallPolicy = firewallPolicy
        self.firewallPolicyResponse = firewallPolicyResponse
        self.updateToken = updateToken
    }
}

public struct DescribeLoggingConfigurationInput {
    /// The Amazon Resource Name (ARN) of the firewall. You must specify the ARN or the name, and you can specify both.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallName: Swift.String?

    public init(
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
    }
}

extension NetworkFirewallClientTypes {

    public enum LogDestinationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cloudwatchLogs
        case kinesisDataFirehose
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [LogDestinationType] {
            return [
                .cloudwatchLogs,
                .kinesisDataFirehose,
                .s3
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cloudwatchLogs: return "CloudWatchLogs"
            case .kinesisDataFirehose: return "KinesisDataFirehose"
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension NetworkFirewallClientTypes {

    public enum LogType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alert
        case flow
        case sdkUnknown(Swift.String)

        public static var allCases: [LogType] {
            return [
                .alert,
                .flow
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alert: return "ALERT"
            case .flow: return "FLOW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension NetworkFirewallClientTypes {
    /// Defines where Network Firewall sends logs for the firewall for one log type. This is used in [LoggingConfiguration]. You can send each type of log to an Amazon S3 bucket, a CloudWatch log group, or a Firehose delivery stream. Network Firewall generates logs for stateful rule groups. You can save alert and flow log types. The stateful rules engine records flow logs for all network traffic that it receives. It records alert logs for traffic that matches stateful rules that have the rule action set to DROP or ALERT.
    public struct LogDestinationConfig {
        /// The named location for the logs, provided in a key:value mapping that is specific to the chosen destination type.
        ///
        /// * For an Amazon S3 bucket, provide the name of the bucket, with key bucketName, and optionally provide a prefix, with key prefix. The following example specifies an Amazon S3 bucket named DOC-EXAMPLE-BUCKET and the prefix alerts: "LogDestination": { "bucketName": "DOC-EXAMPLE-BUCKET", "prefix": "alerts" }
        ///
        /// * For a CloudWatch log group, provide the name of the CloudWatch log group, with key logGroup. The following example specifies a log group named alert-log-group: "LogDestination": { "logGroup": "alert-log-group" }
        ///
        /// * For a Firehose delivery stream, provide the name of the delivery stream, with key deliveryStream. The following example specifies a delivery stream named alert-delivery-stream: "LogDestination": { "deliveryStream": "alert-delivery-stream" }
        /// This member is required.
        public var logDestination: [Swift.String: Swift.String]?
        /// The type of storage destination to send these logs to. You can send logs to an Amazon S3 bucket, a CloudWatch log group, or a Firehose delivery stream.
        /// This member is required.
        public var logDestinationType: NetworkFirewallClientTypes.LogDestinationType?
        /// The type of log to send. Alert logs report traffic that matches a [StatefulRule] with an action setting that sends an alert log message. Flow logs are standard network traffic flow logs.
        /// This member is required.
        public var logType: NetworkFirewallClientTypes.LogType?

        public init(
            logDestination: [Swift.String: Swift.String]? = nil,
            logDestinationType: NetworkFirewallClientTypes.LogDestinationType? = nil,
            logType: NetworkFirewallClientTypes.LogType? = nil
        )
        {
            self.logDestination = logDestination
            self.logDestinationType = logDestinationType
            self.logType = logType
        }
    }

}

extension NetworkFirewallClientTypes {
    /// Defines how Network Firewall performs logging for a [Firewall].
    public struct LoggingConfiguration {
        /// Defines the logging destinations for the logs for a firewall. Network Firewall generates logs for stateful rule groups.
        /// This member is required.
        public var logDestinationConfigs: [NetworkFirewallClientTypes.LogDestinationConfig]?

        public init(
            logDestinationConfigs: [NetworkFirewallClientTypes.LogDestinationConfig]? = nil
        )
        {
            self.logDestinationConfigs = logDestinationConfigs
        }
    }

}

public struct DescribeLoggingConfigurationOutput {
    /// The Amazon Resource Name (ARN) of the firewall.
    public var firewallArn: Swift.String?
    /// Defines how Network Firewall performs logging for a [Firewall].
    public var loggingConfiguration: NetworkFirewallClientTypes.LoggingConfiguration?

    public init(
        firewallArn: Swift.String? = nil,
        loggingConfiguration: NetworkFirewallClientTypes.LoggingConfiguration? = nil
    )
    {
        self.firewallArn = firewallArn
        self.loggingConfiguration = loggingConfiguration
    }
}

public struct DescribeResourcePolicyInput {
    /// The Amazon Resource Name (ARN) of the rule group or firewall policy whose resource policy you want to retrieve.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct DescribeResourcePolicyOutput {
    /// The IAM policy for the resource.
    public var policy: Swift.String?

    public init(
        policy: Swift.String? = nil
    )
    {
        self.policy = policy
    }
}

public struct DescribeRuleGroupInput {
    /// Indicates whether you want Network Firewall to analyze the stateless rules in the rule group for rule behavior such as asymmetric routing. If set to TRUE, Network Firewall runs the analysis.
    public var analyzeRuleGroup: Swift.Bool?
    /// The Amazon Resource Name (ARN) of the rule group. You must specify the ARN or the name, and you can specify both.
    public var ruleGroupArn: Swift.String?
    /// The descriptive name of the rule group. You can't change the name of a rule group after you create it. You must specify the ARN or the name, and you can specify both.
    public var ruleGroupName: Swift.String?
    /// Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules. This setting is required for requests that do not include the RuleGroupARN.
    public var type: NetworkFirewallClientTypes.RuleGroupType?

    public init(
        analyzeRuleGroup: Swift.Bool? = false,
        ruleGroupArn: Swift.String? = nil,
        ruleGroupName: Swift.String? = nil,
        type: NetworkFirewallClientTypes.RuleGroupType? = nil
    )
    {
        self.analyzeRuleGroup = analyzeRuleGroup
        self.ruleGroupArn = ruleGroupArn
        self.ruleGroupName = ruleGroupName
        self.type = type
    }
}

public struct DescribeRuleGroupOutput {
    /// The object that defines the rules in a rule group. This, along with [RuleGroupResponse], define the rule group. You can retrieve all objects for a rule group by calling [DescribeRuleGroup]. Network Firewall uses a rule group to inspect and control network traffic. You define stateless rule groups to inspect individual packets and you define stateful rule groups to inspect packets in the context of their traffic flow. To use a rule group, you include it by reference in an Network Firewall firewall policy, then you use the policy in a firewall. You can reference a rule group from more than one firewall policy, and you can use a firewall policy in more than one firewall.
    public var ruleGroup: NetworkFirewallClientTypes.RuleGroup?
    /// The high-level properties of a rule group. This, along with the [RuleGroup], define the rule group. You can retrieve all objects for a rule group by calling [DescribeRuleGroup].
    /// This member is required.
    public var ruleGroupResponse: NetworkFirewallClientTypes.RuleGroupResponse?
    /// A token used for optimistic locking. Network Firewall returns a token to your requests that access the rule group. The token marks the state of the rule group resource at the time of the request. To make changes to the rule group, you provide the token in your request. Network Firewall uses the token to ensure that the rule group hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the rule group again to get a current copy of it with a current token. Reapply your changes as needed, then try the operation again using the new token.
    /// This member is required.
    public var updateToken: Swift.String?

    public init(
        ruleGroup: NetworkFirewallClientTypes.RuleGroup? = nil,
        ruleGroupResponse: NetworkFirewallClientTypes.RuleGroupResponse? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.ruleGroup = ruleGroup
        self.ruleGroupResponse = ruleGroupResponse
        self.updateToken = updateToken
    }
}

public struct DescribeRuleGroupMetadataInput {
    /// The descriptive name of the rule group. You can't change the name of a rule group after you create it. You must specify the ARN or the name, and you can specify both.
    public var ruleGroupArn: Swift.String?
    /// The descriptive name of the rule group. You can't change the name of a rule group after you create it. You must specify the ARN or the name, and you can specify both.
    public var ruleGroupName: Swift.String?
    /// Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules. This setting is required for requests that do not include the RuleGroupARN.
    public var type: NetworkFirewallClientTypes.RuleGroupType?

    public init(
        ruleGroupArn: Swift.String? = nil,
        ruleGroupName: Swift.String? = nil,
        type: NetworkFirewallClientTypes.RuleGroupType? = nil
    )
    {
        self.ruleGroupArn = ruleGroupArn
        self.ruleGroupName = ruleGroupName
        self.type = type
    }
}

public struct DescribeRuleGroupMetadataOutput {
    /// The maximum operating resources that this rule group can use. Rule group capacity is fixed at creation. When you update a rule group, you are limited to this capacity. When you reference a rule group from a firewall policy, Network Firewall reserves this capacity for the rule group. You can retrieve the capacity that would be required for a rule group before you create the rule group by calling [CreateRuleGroup] with DryRun set to TRUE.
    public var capacity: Swift.Int?
    /// Returns the metadata objects for the specified rule group.
    public var description: Swift.String?
    /// The last time that the rule group was changed.
    public var lastModifiedTime: Foundation.Date?
    /// The descriptive name of the rule group. You can't change the name of a rule group after you create it. You must specify the ARN or the name, and you can specify both.
    /// This member is required.
    public var ruleGroupArn: Swift.String?
    /// The descriptive name of the rule group. You can't change the name of a rule group after you create it. You must specify the ARN or the name, and you can specify both.
    /// This member is required.
    public var ruleGroupName: Swift.String?
    /// Additional options governing how Network Firewall handles the rule group. You can only use these for stateful rule groups.
    public var statefulRuleOptions: NetworkFirewallClientTypes.StatefulRuleOptions?
    /// Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules. This setting is required for requests that do not include the RuleGroupARN.
    public var type: NetworkFirewallClientTypes.RuleGroupType?

    public init(
        capacity: Swift.Int? = nil,
        description: Swift.String? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        ruleGroupArn: Swift.String? = nil,
        ruleGroupName: Swift.String? = nil,
        statefulRuleOptions: NetworkFirewallClientTypes.StatefulRuleOptions? = nil,
        type: NetworkFirewallClientTypes.RuleGroupType? = nil
    )
    {
        self.capacity = capacity
        self.description = description
        self.lastModifiedTime = lastModifiedTime
        self.ruleGroupArn = ruleGroupArn
        self.ruleGroupName = ruleGroupName
        self.statefulRuleOptions = statefulRuleOptions
        self.type = type
    }
}

public struct DescribeTLSInspectionConfigurationInput {
    /// The Amazon Resource Name (ARN) of the TLS inspection configuration. You must specify the ARN or the name, and you can specify both.
    public var tlsInspectionConfigurationArn: Swift.String?
    /// The descriptive name of the TLS inspection configuration. You can't change the name of a TLS inspection configuration after you create it. You must specify the ARN or the name, and you can specify both.
    public var tlsInspectionConfigurationName: Swift.String?

    public init(
        tlsInspectionConfigurationArn: Swift.String? = nil,
        tlsInspectionConfigurationName: Swift.String? = nil
    )
    {
        self.tlsInspectionConfigurationArn = tlsInspectionConfigurationArn
        self.tlsInspectionConfigurationName = tlsInspectionConfigurationName
    }
}

public struct DescribeTLSInspectionConfigurationOutput {
    /// The object that defines a TLS inspection configuration. This, along with [TLSInspectionConfigurationResponse], define the TLS inspection configuration. You can retrieve all objects for a TLS inspection configuration by calling [DescribeTLSInspectionConfiguration]. Network Firewall uses a TLS inspection configuration to decrypt traffic. Network Firewall re-encrypts the traffic before sending it to its destination. To use a TLS inspection configuration, you add it to a new Network Firewall firewall policy, then you apply the firewall policy to a firewall. Network Firewall acts as a proxy service to decrypt and inspect the traffic traveling through your firewalls. You can reference a TLS inspection configuration from more than one firewall policy, and you can use a firewall policy in more than one firewall. For more information about using TLS inspection configurations, see [Inspecting SSL/TLS traffic with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection.html) in the Network Firewall Developer Guide.
    public var tlsInspectionConfiguration: NetworkFirewallClientTypes.TLSInspectionConfiguration?
    /// The high-level properties of a TLS inspection configuration. This, along with the [TLSInspectionConfiguration], define the TLS inspection configuration. You can retrieve all objects for a TLS inspection configuration by calling [DescribeTLSInspectionConfiguration].
    /// This member is required.
    public var tlsInspectionConfigurationResponse: NetworkFirewallClientTypes.TLSInspectionConfigurationResponse?
    /// A token used for optimistic locking. Network Firewall returns a token to your requests that access the TLS inspection configuration. The token marks the state of the TLS inspection configuration resource at the time of the request. To make changes to the TLS inspection configuration, you provide the token in your request. Network Firewall uses the token to ensure that the TLS inspection configuration hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the TLS inspection configuration again to get a current copy of it with a current token. Reapply your changes as needed, then try the operation again using the new token.
    /// This member is required.
    public var updateToken: Swift.String?

    public init(
        tlsInspectionConfiguration: NetworkFirewallClientTypes.TLSInspectionConfiguration? = nil,
        tlsInspectionConfigurationResponse: NetworkFirewallClientTypes.TLSInspectionConfigurationResponse? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.tlsInspectionConfiguration = tlsInspectionConfiguration
        self.tlsInspectionConfigurationResponse = tlsInspectionConfigurationResponse
        self.updateToken = updateToken
    }
}

public struct DisassociateSubnetsInput {
    /// The Amazon Resource Name (ARN) of the firewall. You must specify the ARN or the name, and you can specify both.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallName: Swift.String?
    /// The unique identifiers for the subnets that you want to disassociate.
    /// This member is required.
    public var subnetIds: [Swift.String]?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init(
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.subnetIds = subnetIds
        self.updateToken = updateToken
    }
}

public struct DisassociateSubnetsOutput {
    /// The Amazon Resource Name (ARN) of the firewall.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
    public var firewallName: Swift.String?
    /// The IDs of the subnets that are associated with the firewall.
    public var subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init(
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.subnetMappings = subnetMappings
        self.updateToken = updateToken
    }
}

extension NetworkFirewallClientTypes {
    /// High-level information about a firewall, returned by operations like create and describe. You can use the information provided in the metadata to retrieve and manage a firewall.
    public struct FirewallMetadata {
        /// The Amazon Resource Name (ARN) of the firewall.
        public var firewallArn: Swift.String?
        /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
        public var firewallName: Swift.String?

        public init(
            firewallArn: Swift.String? = nil,
            firewallName: Swift.String? = nil
        )
        {
            self.firewallArn = firewallArn
            self.firewallName = firewallName
        }
    }

}

extension NetworkFirewallClientTypes {
    /// High-level information about a firewall policy, returned by operations like create and describe. You can use the information provided in the metadata to retrieve and manage a firewall policy. You can retrieve all objects for a firewall policy by calling [DescribeFirewallPolicy].
    public struct FirewallPolicyMetadata {
        /// The Amazon Resource Name (ARN) of the firewall policy.
        public var arn: Swift.String?
        /// The descriptive name of the firewall policy. You can't change the name of a firewall policy after you create it.
        public var name: Swift.String?

        public init(
            arn: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.name = name
        }
    }

}

public struct ListFirewallPoliciesInput {
    /// The maximum number of objects that you want Network Firewall to return for this request. If more objects are available, in the response, Network Firewall provides a NextToken value that you can use in a subsequent call to get the next batch of objects.
    public var maxResults: Swift.Int?
    /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListFirewallPoliciesOutput {
    /// The metadata for the firewall policies. Depending on your setting for max results and the number of firewall policies that you have, this might not be the full list.
    public var firewallPolicies: [NetworkFirewallClientTypes.FirewallPolicyMetadata]?
    /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
    public var nextToken: Swift.String?

    public init(
        firewallPolicies: [NetworkFirewallClientTypes.FirewallPolicyMetadata]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.firewallPolicies = firewallPolicies
        self.nextToken = nextToken
    }
}

public struct ListFirewallsInput {
    /// The maximum number of objects that you want Network Firewall to return for this request. If more objects are available, in the response, Network Firewall provides a NextToken value that you can use in a subsequent call to get the next batch of objects.
    public var maxResults: Swift.Int?
    /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
    public var nextToken: Swift.String?
    /// The unique identifiers of the VPCs that you want Network Firewall to retrieve the firewalls for. Leave this blank to retrieve all firewalls that you have defined.
    public var vpcIds: [Swift.String]?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        vpcIds: [Swift.String]? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.vpcIds = vpcIds
    }
}

public struct ListFirewallsOutput {
    /// The firewall metadata objects for the VPCs that you specified. Depending on your setting for max results and the number of firewalls you have, a single call might not be the full list.
    public var firewalls: [NetworkFirewallClientTypes.FirewallMetadata]?
    /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
    public var nextToken: Swift.String?

    public init(
        firewalls: [NetworkFirewallClientTypes.FirewallMetadata]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.firewalls = firewalls
        self.nextToken = nextToken
    }
}

extension NetworkFirewallClientTypes {

    public enum ResourceManagedType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsManagedDomainLists
        case awsManagedThreatSignatures
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceManagedType] {
            return [
                .awsManagedDomainLists,
                .awsManagedThreatSignatures
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsManagedDomainLists: return "AWS_MANAGED_DOMAIN_LISTS"
            case .awsManagedThreatSignatures: return "AWS_MANAGED_THREAT_SIGNATURES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension NetworkFirewallClientTypes {

    public enum ResourceManagedStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case account
        case managed
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceManagedStatus] {
            return [
                .account,
                .managed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .account: return "ACCOUNT"
            case .managed: return "MANAGED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListRuleGroupsInput {
    /// Indicates the general category of the Amazon Web Services managed rule group.
    public var managedType: NetworkFirewallClientTypes.ResourceManagedType?
    /// The maximum number of objects that you want Network Firewall to return for this request. If more objects are available, in the response, Network Firewall provides a NextToken value that you can use in a subsequent call to get the next batch of objects.
    public var maxResults: Swift.Int?
    /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
    public var nextToken: Swift.String?
    /// The scope of the request. The default setting of ACCOUNT or a setting of NULL returns all of the rule groups in your account. A setting of MANAGED returns all available managed rule groups.
    public var scope: NetworkFirewallClientTypes.ResourceManagedStatus?
    /// Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules.
    public var type: NetworkFirewallClientTypes.RuleGroupType?

    public init(
        managedType: NetworkFirewallClientTypes.ResourceManagedType? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        scope: NetworkFirewallClientTypes.ResourceManagedStatus? = nil,
        type: NetworkFirewallClientTypes.RuleGroupType? = nil
    )
    {
        self.managedType = managedType
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.scope = scope
        self.type = type
    }
}

extension NetworkFirewallClientTypes {
    /// High-level information about a rule group, returned by [ListRuleGroups]. You can use the information provided in the metadata to retrieve and manage a rule group.
    public struct RuleGroupMetadata {
        /// The Amazon Resource Name (ARN) of the rule group.
        public var arn: Swift.String?
        /// The descriptive name of the rule group. You can't change the name of a rule group after you create it.
        public var name: Swift.String?

        public init(
            arn: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.name = name
        }
    }

}

public struct ListRuleGroupsOutput {
    /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
    public var nextToken: Swift.String?
    /// The rule group metadata objects that you've defined. Depending on your setting for max results and the number of rule groups, this might not be the full list.
    public var ruleGroups: [NetworkFirewallClientTypes.RuleGroupMetadata]?

    public init(
        nextToken: Swift.String? = nil,
        ruleGroups: [NetworkFirewallClientTypes.RuleGroupMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.ruleGroups = ruleGroups
    }
}

public struct ListTagsForResourceInput {
    /// The maximum number of objects that you want Network Firewall to return for this request. If more objects are available, in the response, Network Firewall provides a NextToken value that you can use in a subsequent call to get the next batch of objects.
    public var maxResults: Swift.Int?
    /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput {
    /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
    public var nextToken: Swift.String?
    /// The tags that are associated with the resource.
    public var tags: [NetworkFirewallClientTypes.Tag]?

    public init(
        nextToken: Swift.String? = nil,
        tags: [NetworkFirewallClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

public struct ListTLSInspectionConfigurationsInput {
    /// The maximum number of objects that you want Network Firewall to return for this request. If more objects are available, in the response, Network Firewall provides a NextToken value that you can use in a subsequent call to get the next batch of objects.
    public var maxResults: Swift.Int?
    /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension NetworkFirewallClientTypes {
    /// High-level information about a TLS inspection configuration, returned by ListTLSInspectionConfigurations. You can use the information provided in the metadata to retrieve and manage a TLS configuration.
    public struct TLSInspectionConfigurationMetadata {
        /// The Amazon Resource Name (ARN) of the TLS inspection configuration.
        public var arn: Swift.String?
        /// The descriptive name of the TLS inspection configuration. You can't change the name of a TLS inspection configuration after you create it.
        public var name: Swift.String?

        public init(
            arn: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.name = name
        }
    }

}

public struct ListTLSInspectionConfigurationsOutput {
    /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
    public var nextToken: Swift.String?
    /// The TLS inspection configuration metadata objects that you've defined. Depending on your setting for max results and the number of TLS inspection configurations, this might not be the full list.
    public var tlsInspectionConfigurations: [NetworkFirewallClientTypes.TLSInspectionConfigurationMetadata]?

    public init(
        nextToken: Swift.String? = nil,
        tlsInspectionConfigurations: [NetworkFirewallClientTypes.TLSInspectionConfigurationMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.tlsInspectionConfigurations = tlsInspectionConfigurations
    }
}

/// Unable to send logs to a configured logging destination.
public struct LogDestinationPermissionException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LogDestinationPermissionException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct PutResourcePolicyInput {
    /// The IAM policy statement that lists the accounts that you want to share your rule group or firewall policy with and the operations that you want the accounts to be able to perform. For a rule group resource, you can specify the following operations in the Actions section of the statement:
    ///
    /// * network-firewall:CreateFirewallPolicy
    ///
    /// * network-firewall:UpdateFirewallPolicy
    ///
    /// * network-firewall:ListRuleGroups
    ///
    ///
    /// For a firewall policy resource, you can specify the following operations in the Actions section of the statement:
    ///
    /// * network-firewall:AssociateFirewallPolicy
    ///
    /// * network-firewall:ListFirewallPolicies
    ///
    ///
    /// In the Resource section of the statement, you specify the ARNs for the rule groups and firewall policies that you want to share with the account that you specified in Arn.
    /// This member is required.
    public var policy: Swift.String?
    /// The Amazon Resource Name (ARN) of the account that you want to share rule groups and firewall policies with.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        policy: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.policy = policy
        self.resourceArn = resourceArn
    }
}

public struct PutResourcePolicyOutput {

    public init() { }
}

public struct TagResourceInput {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    ///
    /// This member is required.
    public var tags: [NetworkFirewallClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [NetworkFirewallClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceInput {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    ///
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput {

    public init() { }
}

/// Unable to change the resource because your account doesn't own it.
public struct ResourceOwnerCheckException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceOwnerCheckException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct UpdateFirewallDeleteProtectionInput {
    /// A flag indicating whether it is possible to delete the firewall. A setting of TRUE indicates that the firewall is protected against deletion. Use this setting to protect against accidentally deleting a firewall that is in use. When you create a firewall, the operation initializes this flag to TRUE.
    /// This member is required.
    public var deleteProtection: Swift.Bool?
    /// The Amazon Resource Name (ARN) of the firewall. You must specify the ARN or the name, and you can specify both.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallName: Swift.String?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init(
        deleteProtection: Swift.Bool? = false,
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.deleteProtection = deleteProtection
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.updateToken = updateToken
    }
}

public struct UpdateFirewallDeleteProtectionOutput {
    /// A flag indicating whether it is possible to delete the firewall. A setting of TRUE indicates that the firewall is protected against deletion. Use this setting to protect against accidentally deleting a firewall that is in use. When you create a firewall, the operation initializes this flag to TRUE.
    public var deleteProtection: Swift.Bool
    /// The Amazon Resource Name (ARN) of the firewall.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
    public var firewallName: Swift.String?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init(
        deleteProtection: Swift.Bool = false,
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.deleteProtection = deleteProtection
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.updateToken = updateToken
    }
}

public struct UpdateFirewallDescriptionInput {
    /// The new description for the firewall. If you omit this setting, Network Firewall removes the description for the firewall.
    public var description: Swift.String?
    /// The Amazon Resource Name (ARN) of the firewall. You must specify the ARN or the name, and you can specify both.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallName: Swift.String?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init(
        description: Swift.String? = nil,
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.description = description
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.updateToken = updateToken
    }
}

public struct UpdateFirewallDescriptionOutput {
    /// A description of the firewall.
    public var description: Swift.String?
    /// The Amazon Resource Name (ARN) of the firewall.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
    public var firewallName: Swift.String?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init(
        description: Swift.String? = nil,
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.description = description
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.updateToken = updateToken
    }
}

public struct UpdateFirewallEncryptionConfigurationInput {
    /// A complex type that contains optional Amazon Web Services Key Management Service (KMS) encryption settings for your Network Firewall resources. Your data is encrypted by default with an Amazon Web Services owned key that Amazon Web Services owns and manages for you. You can use either the Amazon Web Services owned key, or provide your own customer managed key. To learn more about KMS encryption of your Network Firewall resources, see [Encryption at rest with Amazon Web Services Key Managment Service](https://docs.aws.amazon.com/kms/latest/developerguide/kms-encryption-at-rest.html) in the Network Firewall Developer Guide.
    public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
    /// The Amazon Resource Name (ARN) of the firewall.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
    public var firewallName: Swift.String?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init(
        encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.encryptionConfiguration = encryptionConfiguration
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.updateToken = updateToken
    }
}

public struct UpdateFirewallEncryptionConfigurationOutput {
    /// A complex type that contains optional Amazon Web Services Key Management Service (KMS) encryption settings for your Network Firewall resources. Your data is encrypted by default with an Amazon Web Services owned key that Amazon Web Services owns and manages for you. You can use either the Amazon Web Services owned key, or provide your own customer managed key. To learn more about KMS encryption of your Network Firewall resources, see [Encryption at rest with Amazon Web Services Key Managment Service](https://docs.aws.amazon.com/kms/latest/developerguide/kms-encryption-at-rest.html) in the Network Firewall Developer Guide.
    public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
    /// The Amazon Resource Name (ARN) of the firewall.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
    public var firewallName: Swift.String?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init(
        encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.encryptionConfiguration = encryptionConfiguration
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.updateToken = updateToken
    }
}

public struct UpdateFirewallPolicyInput {
    /// A description of the firewall policy.
    public var description: Swift.String?
    /// Indicates whether you want Network Firewall to just check the validity of the request, rather than run the request. If set to TRUE, Network Firewall checks whether the request can run successfully, but doesn't actually make the requested changes. The call returns the value that the request would return if you ran it with dry run set to FALSE, but doesn't make additions or changes to your resources. This option allows you to make sure that you have the required permissions to run the request and that your request parameters are valid. If set to FALSE, Network Firewall makes the requested changes to your resources.
    public var dryRun: Swift.Bool?
    /// A complex type that contains settings for encryption of your firewall policy resources.
    public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
    /// The updated firewall policy to use for the firewall. You can't add or remove a [TLSInspectionConfiguration] after you create a firewall policy. However, you can replace an existing TLS inspection configuration with another TLSInspectionConfiguration.
    /// This member is required.
    public var firewallPolicy: NetworkFirewallClientTypes.FirewallPolicy?
    /// The Amazon Resource Name (ARN) of the firewall policy. You must specify the ARN or the name, and you can specify both.
    public var firewallPolicyArn: Swift.String?
    /// The descriptive name of the firewall policy. You can't change the name of a firewall policy after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallPolicyName: Swift.String?
    /// A token used for optimistic locking. Network Firewall returns a token to your requests that access the firewall policy. The token marks the state of the policy resource at the time of the request. To make changes to the policy, you provide the token in your request. Network Firewall uses the token to ensure that the policy hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall policy again to get a current copy of it with current token. Reapply your changes as needed, then try the operation again using the new token.
    /// This member is required.
    public var updateToken: Swift.String?

    public init(
        description: Swift.String? = nil,
        dryRun: Swift.Bool? = false,
        encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
        firewallPolicy: NetworkFirewallClientTypes.FirewallPolicy? = nil,
        firewallPolicyArn: Swift.String? = nil,
        firewallPolicyName: Swift.String? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.description = description
        self.dryRun = dryRun
        self.encryptionConfiguration = encryptionConfiguration
        self.firewallPolicy = firewallPolicy
        self.firewallPolicyArn = firewallPolicyArn
        self.firewallPolicyName = firewallPolicyName
        self.updateToken = updateToken
    }
}

public struct UpdateFirewallPolicyOutput {
    /// The high-level properties of a firewall policy. This, along with the [FirewallPolicy], define the policy. You can retrieve all objects for a firewall policy by calling [DescribeFirewallPolicy].
    /// This member is required.
    public var firewallPolicyResponse: NetworkFirewallClientTypes.FirewallPolicyResponse?
    /// A token used for optimistic locking. Network Firewall returns a token to your requests that access the firewall policy. The token marks the state of the policy resource at the time of the request. To make changes to the policy, you provide the token in your request. Network Firewall uses the token to ensure that the policy hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall policy again to get a current copy of it with current token. Reapply your changes as needed, then try the operation again using the new token.
    /// This member is required.
    public var updateToken: Swift.String?

    public init(
        firewallPolicyResponse: NetworkFirewallClientTypes.FirewallPolicyResponse? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallPolicyResponse = firewallPolicyResponse
        self.updateToken = updateToken
    }
}

public struct UpdateFirewallPolicyChangeProtectionInput {
    /// The Amazon Resource Name (ARN) of the firewall. You must specify the ARN or the name, and you can specify both.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallName: Swift.String?
    /// A setting indicating whether the firewall is protected against a change to the firewall policy association. Use this setting to protect against accidentally modifying the firewall policy for a firewall that is in use. When you create a firewall, the operation initializes this setting to TRUE.
    /// This member is required.
    public var firewallPolicyChangeProtection: Swift.Bool?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init(
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        firewallPolicyChangeProtection: Swift.Bool? = false,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.firewallPolicyChangeProtection = firewallPolicyChangeProtection
        self.updateToken = updateToken
    }
}

public struct UpdateFirewallPolicyChangeProtectionOutput {
    /// The Amazon Resource Name (ARN) of the firewall.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
    public var firewallName: Swift.String?
    /// A setting indicating whether the firewall is protected against a change to the firewall policy association. Use this setting to protect against accidentally modifying the firewall policy for a firewall that is in use. When you create a firewall, the operation initializes this setting to TRUE.
    public var firewallPolicyChangeProtection: Swift.Bool
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init(
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        firewallPolicyChangeProtection: Swift.Bool = false,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.firewallPolicyChangeProtection = firewallPolicyChangeProtection
        self.updateToken = updateToken
    }
}

public struct UpdateLoggingConfigurationInput {
    /// The Amazon Resource Name (ARN) of the firewall. You must specify the ARN or the name, and you can specify both.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallName: Swift.String?
    /// Defines how Network Firewall performs logging for a firewall. If you omit this setting, Network Firewall disables logging for the firewall.
    public var loggingConfiguration: NetworkFirewallClientTypes.LoggingConfiguration?

    public init(
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        loggingConfiguration: NetworkFirewallClientTypes.LoggingConfiguration? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.loggingConfiguration = loggingConfiguration
    }
}

public struct UpdateLoggingConfigurationOutput {
    /// The Amazon Resource Name (ARN) of the firewall.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
    public var firewallName: Swift.String?
    /// Defines how Network Firewall performs logging for a [Firewall].
    public var loggingConfiguration: NetworkFirewallClientTypes.LoggingConfiguration?

    public init(
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        loggingConfiguration: NetworkFirewallClientTypes.LoggingConfiguration? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.loggingConfiguration = loggingConfiguration
    }
}

public struct UpdateRuleGroupInput {
    /// Indicates whether you want Network Firewall to analyze the stateless rules in the rule group for rule behavior such as asymmetric routing. If set to TRUE, Network Firewall runs the analysis and then updates the rule group for you. To run the stateless rule group analyzer without updating the rule group, set DryRun to TRUE.
    public var analyzeRuleGroup: Swift.Bool?
    /// A description of the rule group.
    public var description: Swift.String?
    /// Indicates whether you want Network Firewall to just check the validity of the request, rather than run the request. If set to TRUE, Network Firewall checks whether the request can run successfully, but doesn't actually make the requested changes. The call returns the value that the request would return if you ran it with dry run set to FALSE, but doesn't make additions or changes to your resources. This option allows you to make sure that you have the required permissions to run the request and that your request parameters are valid. If set to FALSE, Network Firewall makes the requested changes to your resources.
    public var dryRun: Swift.Bool?
    /// A complex type that contains settings for encryption of your rule group resources.
    public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
    /// An object that defines the rule group rules. You must provide either this rule group setting or a Rules setting, but not both.
    public var ruleGroup: NetworkFirewallClientTypes.RuleGroup?
    /// The Amazon Resource Name (ARN) of the rule group. You must specify the ARN or the name, and you can specify both.
    public var ruleGroupArn: Swift.String?
    /// The descriptive name of the rule group. You can't change the name of a rule group after you create it. You must specify the ARN or the name, and you can specify both.
    public var ruleGroupName: Swift.String?
    /// A string containing stateful rule group rules specifications in Suricata flat format, with one rule per line. Use this to import your existing Suricata compatible rule groups. You must provide either this rules setting or a populated RuleGroup setting, but not both. You can provide your rule group specification in Suricata flat format through this setting when you create or update your rule group. The call response returns a [RuleGroup] object that Network Firewall has populated from your string.
    public var rules: Swift.String?
    /// A complex type that contains metadata about the rule group that your own rule group is copied from. You can use the metadata to keep track of updates made to the originating rule group.
    public var sourceMetadata: NetworkFirewallClientTypes.SourceMetadata?
    /// Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules. This setting is required for requests that do not include the RuleGroupARN.
    public var type: NetworkFirewallClientTypes.RuleGroupType?
    /// A token used for optimistic locking. Network Firewall returns a token to your requests that access the rule group. The token marks the state of the rule group resource at the time of the request. To make changes to the rule group, you provide the token in your request. Network Firewall uses the token to ensure that the rule group hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the rule group again to get a current copy of it with a current token. Reapply your changes as needed, then try the operation again using the new token.
    /// This member is required.
    public var updateToken: Swift.String?

    public init(
        analyzeRuleGroup: Swift.Bool? = false,
        description: Swift.String? = nil,
        dryRun: Swift.Bool? = false,
        encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
        ruleGroup: NetworkFirewallClientTypes.RuleGroup? = nil,
        ruleGroupArn: Swift.String? = nil,
        ruleGroupName: Swift.String? = nil,
        rules: Swift.String? = nil,
        sourceMetadata: NetworkFirewallClientTypes.SourceMetadata? = nil,
        type: NetworkFirewallClientTypes.RuleGroupType? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.analyzeRuleGroup = analyzeRuleGroup
        self.description = description
        self.dryRun = dryRun
        self.encryptionConfiguration = encryptionConfiguration
        self.ruleGroup = ruleGroup
        self.ruleGroupArn = ruleGroupArn
        self.ruleGroupName = ruleGroupName
        self.rules = rules
        self.sourceMetadata = sourceMetadata
        self.type = type
        self.updateToken = updateToken
    }
}

public struct UpdateRuleGroupOutput {
    /// The high-level properties of a rule group. This, along with the [RuleGroup], define the rule group. You can retrieve all objects for a rule group by calling [DescribeRuleGroup].
    /// This member is required.
    public var ruleGroupResponse: NetworkFirewallClientTypes.RuleGroupResponse?
    /// A token used for optimistic locking. Network Firewall returns a token to your requests that access the rule group. The token marks the state of the rule group resource at the time of the request. To make changes to the rule group, you provide the token in your request. Network Firewall uses the token to ensure that the rule group hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the rule group again to get a current copy of it with a current token. Reapply your changes as needed, then try the operation again using the new token.
    /// This member is required.
    public var updateToken: Swift.String?

    public init(
        ruleGroupResponse: NetworkFirewallClientTypes.RuleGroupResponse? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.ruleGroupResponse = ruleGroupResponse
        self.updateToken = updateToken
    }
}

public struct UpdateSubnetChangeProtectionInput {
    /// The Amazon Resource Name (ARN) of the firewall. You must specify the ARN or the name, and you can specify both.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallName: Swift.String?
    /// A setting indicating whether the firewall is protected against changes to the subnet associations. Use this setting to protect against accidentally modifying the subnet associations for a firewall that is in use. When you create a firewall, the operation initializes this setting to TRUE.
    /// This member is required.
    public var subnetChangeProtection: Swift.Bool?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init(
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        subnetChangeProtection: Swift.Bool? = false,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.subnetChangeProtection = subnetChangeProtection
        self.updateToken = updateToken
    }
}

public struct UpdateSubnetChangeProtectionOutput {
    /// The Amazon Resource Name (ARN) of the firewall.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
    public var firewallName: Swift.String?
    /// A setting indicating whether the firewall is protected against changes to the subnet associations. Use this setting to protect against accidentally modifying the subnet associations for a firewall that is in use. When you create a firewall, the operation initializes this setting to TRUE.
    public var subnetChangeProtection: Swift.Bool
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init(
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        subnetChangeProtection: Swift.Bool = false,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.subnetChangeProtection = subnetChangeProtection
        self.updateToken = updateToken
    }
}

public struct UpdateTLSInspectionConfigurationInput {
    /// A description of the TLS inspection configuration.
    public var description: Swift.String?
    /// A complex type that contains the Amazon Web Services KMS encryption configuration settings for your TLS inspection configuration.
    public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
    /// The object that defines a TLS inspection configuration. This, along with [TLSInspectionConfigurationResponse], define the TLS inspection configuration. You can retrieve all objects for a TLS inspection configuration by calling [DescribeTLSInspectionConfiguration]. Network Firewall uses a TLS inspection configuration to decrypt traffic. Network Firewall re-encrypts the traffic before sending it to its destination. To use a TLS inspection configuration, you add it to a new Network Firewall firewall policy, then you apply the firewall policy to a firewall. Network Firewall acts as a proxy service to decrypt and inspect the traffic traveling through your firewalls. You can reference a TLS inspection configuration from more than one firewall policy, and you can use a firewall policy in more than one firewall. For more information about using TLS inspection configurations, see [Inspecting SSL/TLS traffic with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection.html) in the Network Firewall Developer Guide.
    /// This member is required.
    public var tlsInspectionConfiguration: NetworkFirewallClientTypes.TLSInspectionConfiguration?
    /// The Amazon Resource Name (ARN) of the TLS inspection configuration.
    public var tlsInspectionConfigurationArn: Swift.String?
    /// The descriptive name of the TLS inspection configuration. You can't change the name of a TLS inspection configuration after you create it.
    public var tlsInspectionConfigurationName: Swift.String?
    /// A token used for optimistic locking. Network Firewall returns a token to your requests that access the TLS inspection configuration. The token marks the state of the TLS inspection configuration resource at the time of the request. To make changes to the TLS inspection configuration, you provide the token in your request. Network Firewall uses the token to ensure that the TLS inspection configuration hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the TLS inspection configuration again to get a current copy of it with a current token. Reapply your changes as needed, then try the operation again using the new token.
    /// This member is required.
    public var updateToken: Swift.String?

    public init(
        description: Swift.String? = nil,
        encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
        tlsInspectionConfiguration: NetworkFirewallClientTypes.TLSInspectionConfiguration? = nil,
        tlsInspectionConfigurationArn: Swift.String? = nil,
        tlsInspectionConfigurationName: Swift.String? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.description = description
        self.encryptionConfiguration = encryptionConfiguration
        self.tlsInspectionConfiguration = tlsInspectionConfiguration
        self.tlsInspectionConfigurationArn = tlsInspectionConfigurationArn
        self.tlsInspectionConfigurationName = tlsInspectionConfigurationName
        self.updateToken = updateToken
    }
}

public struct UpdateTLSInspectionConfigurationOutput {
    /// The high-level properties of a TLS inspection configuration. This, along with the [TLSInspectionConfiguration], define the TLS inspection configuration. You can retrieve all objects for a TLS inspection configuration by calling [DescribeTLSInspectionConfiguration].
    /// This member is required.
    public var tlsInspectionConfigurationResponse: NetworkFirewallClientTypes.TLSInspectionConfigurationResponse?
    /// A token used for optimistic locking. Network Firewall returns a token to your requests that access the TLS inspection configuration. The token marks the state of the TLS inspection configuration resource at the time of the request. To make changes to the TLS inspection configuration, you provide the token in your request. Network Firewall uses the token to ensure that the TLS inspection configuration hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the TLS inspection configuration again to get a current copy of it with a current token. Reapply your changes as needed, then try the operation again using the new token.
    /// This member is required.
    public var updateToken: Swift.String?

    public init(
        tlsInspectionConfigurationResponse: NetworkFirewallClientTypes.TLSInspectionConfigurationResponse? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.tlsInspectionConfigurationResponse = tlsInspectionConfigurationResponse
        self.updateToken = updateToken
    }
}

extension AssociateFirewallPolicyInput {

    static func urlPathProvider(_ value: AssociateFirewallPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension AssociateSubnetsInput {

    static func urlPathProvider(_ value: AssociateSubnetsInput) -> Swift.String? {
        return "/"
    }
}

extension CreateFirewallInput {

    static func urlPathProvider(_ value: CreateFirewallInput) -> Swift.String? {
        return "/"
    }
}

extension CreateFirewallPolicyInput {

    static func urlPathProvider(_ value: CreateFirewallPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension CreateRuleGroupInput {

    static func urlPathProvider(_ value: CreateRuleGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateTLSInspectionConfigurationInput {

    static func urlPathProvider(_ value: CreateTLSInspectionConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteFirewallInput {

    static func urlPathProvider(_ value: DeleteFirewallInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteFirewallPolicyInput {

    static func urlPathProvider(_ value: DeleteFirewallPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteResourcePolicyInput {

    static func urlPathProvider(_ value: DeleteResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteRuleGroupInput {

    static func urlPathProvider(_ value: DeleteRuleGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteTLSInspectionConfigurationInput {

    static func urlPathProvider(_ value: DeleteTLSInspectionConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeFirewallInput {

    static func urlPathProvider(_ value: DescribeFirewallInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeFirewallPolicyInput {

    static func urlPathProvider(_ value: DescribeFirewallPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeLoggingConfigurationInput {

    static func urlPathProvider(_ value: DescribeLoggingConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeResourcePolicyInput {

    static func urlPathProvider(_ value: DescribeResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeRuleGroupInput {

    static func urlPathProvider(_ value: DescribeRuleGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeRuleGroupMetadataInput {

    static func urlPathProvider(_ value: DescribeRuleGroupMetadataInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTLSInspectionConfigurationInput {

    static func urlPathProvider(_ value: DescribeTLSInspectionConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension DisassociateSubnetsInput {

    static func urlPathProvider(_ value: DisassociateSubnetsInput) -> Swift.String? {
        return "/"
    }
}

extension ListFirewallPoliciesInput {

    static func urlPathProvider(_ value: ListFirewallPoliciesInput) -> Swift.String? {
        return "/"
    }
}

extension ListFirewallsInput {

    static func urlPathProvider(_ value: ListFirewallsInput) -> Swift.String? {
        return "/"
    }
}

extension ListRuleGroupsInput {

    static func urlPathProvider(_ value: ListRuleGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension ListTLSInspectionConfigurationsInput {

    static func urlPathProvider(_ value: ListTLSInspectionConfigurationsInput) -> Swift.String? {
        return "/"
    }
}

extension PutResourcePolicyInput {

    static func urlPathProvider(_ value: PutResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateFirewallDeleteProtectionInput {

    static func urlPathProvider(_ value: UpdateFirewallDeleteProtectionInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateFirewallDescriptionInput {

    static func urlPathProvider(_ value: UpdateFirewallDescriptionInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateFirewallEncryptionConfigurationInput {

    static func urlPathProvider(_ value: UpdateFirewallEncryptionConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateFirewallPolicyInput {

    static func urlPathProvider(_ value: UpdateFirewallPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateFirewallPolicyChangeProtectionInput {

    static func urlPathProvider(_ value: UpdateFirewallPolicyChangeProtectionInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateLoggingConfigurationInput {

    static func urlPathProvider(_ value: UpdateLoggingConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateRuleGroupInput {

    static func urlPathProvider(_ value: UpdateRuleGroupInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateSubnetChangeProtectionInput {

    static func urlPathProvider(_ value: UpdateSubnetChangeProtectionInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateTLSInspectionConfigurationInput {

    static func urlPathProvider(_ value: UpdateTLSInspectionConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension AssociateFirewallPolicyInput {

    static func write(value: AssociateFirewallPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FirewallArn"].write(value.firewallArn)
        try writer["FirewallName"].write(value.firewallName)
        try writer["FirewallPolicyArn"].write(value.firewallPolicyArn)
        try writer["UpdateToken"].write(value.updateToken)
    }
}

extension AssociateSubnetsInput {

    static func write(value: AssociateSubnetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FirewallArn"].write(value.firewallArn)
        try writer["FirewallName"].write(value.firewallName)
        try writer["SubnetMappings"].writeList(value.subnetMappings, memberWritingClosure: NetworkFirewallClientTypes.SubnetMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UpdateToken"].write(value.updateToken)
    }
}

extension CreateFirewallInput {

    static func write(value: CreateFirewallInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeleteProtection"].write(value.deleteProtection)
        try writer["Description"].write(value.description)
        try writer["EncryptionConfiguration"].write(value.encryptionConfiguration, with: NetworkFirewallClientTypes.EncryptionConfiguration.write(value:to:))
        try writer["FirewallName"].write(value.firewallName)
        try writer["FirewallPolicyArn"].write(value.firewallPolicyArn)
        try writer["FirewallPolicyChangeProtection"].write(value.firewallPolicyChangeProtection)
        try writer["SubnetChangeProtection"].write(value.subnetChangeProtection)
        try writer["SubnetMappings"].writeList(value.subnetMappings, memberWritingClosure: NetworkFirewallClientTypes.SubnetMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: NetworkFirewallClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VpcId"].write(value.vpcId)
    }
}

extension CreateFirewallPolicyInput {

    static func write(value: CreateFirewallPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["DryRun"].write(value.dryRun)
        try writer["EncryptionConfiguration"].write(value.encryptionConfiguration, with: NetworkFirewallClientTypes.EncryptionConfiguration.write(value:to:))
        try writer["FirewallPolicy"].write(value.firewallPolicy, with: NetworkFirewallClientTypes.FirewallPolicy.write(value:to:))
        try writer["FirewallPolicyName"].write(value.firewallPolicyName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: NetworkFirewallClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateRuleGroupInput {

    static func write(value: CreateRuleGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AnalyzeRuleGroup"].write(value.analyzeRuleGroup)
        try writer["Capacity"].write(value.capacity)
        try writer["Description"].write(value.description)
        try writer["DryRun"].write(value.dryRun)
        try writer["EncryptionConfiguration"].write(value.encryptionConfiguration, with: NetworkFirewallClientTypes.EncryptionConfiguration.write(value:to:))
        try writer["RuleGroup"].write(value.ruleGroup, with: NetworkFirewallClientTypes.RuleGroup.write(value:to:))
        try writer["RuleGroupName"].write(value.ruleGroupName)
        try writer["Rules"].write(value.rules)
        try writer["SourceMetadata"].write(value.sourceMetadata, with: NetworkFirewallClientTypes.SourceMetadata.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: NetworkFirewallClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Type"].write(value.type)
    }
}

extension CreateTLSInspectionConfigurationInput {

    static func write(value: CreateTLSInspectionConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["EncryptionConfiguration"].write(value.encryptionConfiguration, with: NetworkFirewallClientTypes.EncryptionConfiguration.write(value:to:))
        try writer["TLSInspectionConfiguration"].write(value.tlsInspectionConfiguration, with: NetworkFirewallClientTypes.TLSInspectionConfiguration.write(value:to:))
        try writer["TLSInspectionConfigurationName"].write(value.tlsInspectionConfigurationName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: NetworkFirewallClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteFirewallInput {

    static func write(value: DeleteFirewallInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FirewallArn"].write(value.firewallArn)
        try writer["FirewallName"].write(value.firewallName)
    }
}

extension DeleteFirewallPolicyInput {

    static func write(value: DeleteFirewallPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FirewallPolicyArn"].write(value.firewallPolicyArn)
        try writer["FirewallPolicyName"].write(value.firewallPolicyName)
    }
}

extension DeleteResourcePolicyInput {

    static func write(value: DeleteResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension DeleteRuleGroupInput {

    static func write(value: DeleteRuleGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RuleGroupArn"].write(value.ruleGroupArn)
        try writer["RuleGroupName"].write(value.ruleGroupName)
        try writer["Type"].write(value.type)
    }
}

extension DeleteTLSInspectionConfigurationInput {

    static func write(value: DeleteTLSInspectionConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TLSInspectionConfigurationArn"].write(value.tlsInspectionConfigurationArn)
        try writer["TLSInspectionConfigurationName"].write(value.tlsInspectionConfigurationName)
    }
}

extension DescribeFirewallInput {

    static func write(value: DescribeFirewallInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FirewallArn"].write(value.firewallArn)
        try writer["FirewallName"].write(value.firewallName)
    }
}

extension DescribeFirewallPolicyInput {

    static func write(value: DescribeFirewallPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FirewallPolicyArn"].write(value.firewallPolicyArn)
        try writer["FirewallPolicyName"].write(value.firewallPolicyName)
    }
}

extension DescribeLoggingConfigurationInput {

    static func write(value: DescribeLoggingConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FirewallArn"].write(value.firewallArn)
        try writer["FirewallName"].write(value.firewallName)
    }
}

extension DescribeResourcePolicyInput {

    static func write(value: DescribeResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension DescribeRuleGroupInput {

    static func write(value: DescribeRuleGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AnalyzeRuleGroup"].write(value.analyzeRuleGroup)
        try writer["RuleGroupArn"].write(value.ruleGroupArn)
        try writer["RuleGroupName"].write(value.ruleGroupName)
        try writer["Type"].write(value.type)
    }
}

extension DescribeRuleGroupMetadataInput {

    static func write(value: DescribeRuleGroupMetadataInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RuleGroupArn"].write(value.ruleGroupArn)
        try writer["RuleGroupName"].write(value.ruleGroupName)
        try writer["Type"].write(value.type)
    }
}

extension DescribeTLSInspectionConfigurationInput {

    static func write(value: DescribeTLSInspectionConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TLSInspectionConfigurationArn"].write(value.tlsInspectionConfigurationArn)
        try writer["TLSInspectionConfigurationName"].write(value.tlsInspectionConfigurationName)
    }
}

extension DisassociateSubnetsInput {

    static func write(value: DisassociateSubnetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FirewallArn"].write(value.firewallArn)
        try writer["FirewallName"].write(value.firewallName)
        try writer["SubnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UpdateToken"].write(value.updateToken)
    }
}

extension ListFirewallPoliciesInput {

    static func write(value: ListFirewallPoliciesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListFirewallsInput {

    static func write(value: ListFirewallsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["VpcIds"].writeList(value.vpcIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ListRuleGroupsInput {

    static func write(value: ListRuleGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ManagedType"].write(value.managedType)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["Scope"].write(value.scope)
        try writer["Type"].write(value.type)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension ListTLSInspectionConfigurationsInput {

    static func write(value: ListTLSInspectionConfigurationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension PutResourcePolicyInput {

    static func write(value: PutResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Policy"].write(value.policy)
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: NetworkFirewallClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateFirewallDeleteProtectionInput {

    static func write(value: UpdateFirewallDeleteProtectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeleteProtection"].write(value.deleteProtection)
        try writer["FirewallArn"].write(value.firewallArn)
        try writer["FirewallName"].write(value.firewallName)
        try writer["UpdateToken"].write(value.updateToken)
    }
}

extension UpdateFirewallDescriptionInput {

    static func write(value: UpdateFirewallDescriptionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["FirewallArn"].write(value.firewallArn)
        try writer["FirewallName"].write(value.firewallName)
        try writer["UpdateToken"].write(value.updateToken)
    }
}

extension UpdateFirewallEncryptionConfigurationInput {

    static func write(value: UpdateFirewallEncryptionConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EncryptionConfiguration"].write(value.encryptionConfiguration, with: NetworkFirewallClientTypes.EncryptionConfiguration.write(value:to:))
        try writer["FirewallArn"].write(value.firewallArn)
        try writer["FirewallName"].write(value.firewallName)
        try writer["UpdateToken"].write(value.updateToken)
    }
}

extension UpdateFirewallPolicyInput {

    static func write(value: UpdateFirewallPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["DryRun"].write(value.dryRun)
        try writer["EncryptionConfiguration"].write(value.encryptionConfiguration, with: NetworkFirewallClientTypes.EncryptionConfiguration.write(value:to:))
        try writer["FirewallPolicy"].write(value.firewallPolicy, with: NetworkFirewallClientTypes.FirewallPolicy.write(value:to:))
        try writer["FirewallPolicyArn"].write(value.firewallPolicyArn)
        try writer["FirewallPolicyName"].write(value.firewallPolicyName)
        try writer["UpdateToken"].write(value.updateToken)
    }
}

extension UpdateFirewallPolicyChangeProtectionInput {

    static func write(value: UpdateFirewallPolicyChangeProtectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FirewallArn"].write(value.firewallArn)
        try writer["FirewallName"].write(value.firewallName)
        try writer["FirewallPolicyChangeProtection"].write(value.firewallPolicyChangeProtection)
        try writer["UpdateToken"].write(value.updateToken)
    }
}

extension UpdateLoggingConfigurationInput {

    static func write(value: UpdateLoggingConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FirewallArn"].write(value.firewallArn)
        try writer["FirewallName"].write(value.firewallName)
        try writer["LoggingConfiguration"].write(value.loggingConfiguration, with: NetworkFirewallClientTypes.LoggingConfiguration.write(value:to:))
    }
}

extension UpdateRuleGroupInput {

    static func write(value: UpdateRuleGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AnalyzeRuleGroup"].write(value.analyzeRuleGroup)
        try writer["Description"].write(value.description)
        try writer["DryRun"].write(value.dryRun)
        try writer["EncryptionConfiguration"].write(value.encryptionConfiguration, with: NetworkFirewallClientTypes.EncryptionConfiguration.write(value:to:))
        try writer["RuleGroup"].write(value.ruleGroup, with: NetworkFirewallClientTypes.RuleGroup.write(value:to:))
        try writer["RuleGroupArn"].write(value.ruleGroupArn)
        try writer["RuleGroupName"].write(value.ruleGroupName)
        try writer["Rules"].write(value.rules)
        try writer["SourceMetadata"].write(value.sourceMetadata, with: NetworkFirewallClientTypes.SourceMetadata.write(value:to:))
        try writer["Type"].write(value.type)
        try writer["UpdateToken"].write(value.updateToken)
    }
}

extension UpdateSubnetChangeProtectionInput {

    static func write(value: UpdateSubnetChangeProtectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FirewallArn"].write(value.firewallArn)
        try writer["FirewallName"].write(value.firewallName)
        try writer["SubnetChangeProtection"].write(value.subnetChangeProtection)
        try writer["UpdateToken"].write(value.updateToken)
    }
}

extension UpdateTLSInspectionConfigurationInput {

    static func write(value: UpdateTLSInspectionConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["EncryptionConfiguration"].write(value.encryptionConfiguration, with: NetworkFirewallClientTypes.EncryptionConfiguration.write(value:to:))
        try writer["TLSInspectionConfiguration"].write(value.tlsInspectionConfiguration, with: NetworkFirewallClientTypes.TLSInspectionConfiguration.write(value:to:))
        try writer["TLSInspectionConfigurationArn"].write(value.tlsInspectionConfigurationArn)
        try writer["TLSInspectionConfigurationName"].write(value.tlsInspectionConfigurationName)
        try writer["UpdateToken"].write(value.updateToken)
    }
}

extension AssociateFirewallPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateFirewallPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AssociateFirewallPolicyOutput()
        value.firewallArn = try reader["FirewallArn"].readIfPresent()
        value.firewallName = try reader["FirewallName"].readIfPresent()
        value.firewallPolicyArn = try reader["FirewallPolicyArn"].readIfPresent()
        value.updateToken = try reader["UpdateToken"].readIfPresent()
        return value
    }
}

extension AssociateSubnetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateSubnetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AssociateSubnetsOutput()
        value.firewallArn = try reader["FirewallArn"].readIfPresent()
        value.firewallName = try reader["FirewallName"].readIfPresent()
        value.subnetMappings = try reader["SubnetMappings"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.SubnetMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.updateToken = try reader["UpdateToken"].readIfPresent()
        return value
    }
}

extension CreateFirewallOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateFirewallOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateFirewallOutput()
        value.firewall = try reader["Firewall"].readIfPresent(with: NetworkFirewallClientTypes.Firewall.read(from:))
        value.firewallStatus = try reader["FirewallStatus"].readIfPresent(with: NetworkFirewallClientTypes.FirewallStatus.read(from:))
        return value
    }
}

extension CreateFirewallPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateFirewallPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateFirewallPolicyOutput()
        value.firewallPolicyResponse = try reader["FirewallPolicyResponse"].readIfPresent(with: NetworkFirewallClientTypes.FirewallPolicyResponse.read(from:))
        value.updateToken = try reader["UpdateToken"].readIfPresent() ?? ""
        return value
    }
}

extension CreateRuleGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateRuleGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateRuleGroupOutput()
        value.ruleGroupResponse = try reader["RuleGroupResponse"].readIfPresent(with: NetworkFirewallClientTypes.RuleGroupResponse.read(from:))
        value.updateToken = try reader["UpdateToken"].readIfPresent() ?? ""
        return value
    }
}

extension CreateTLSInspectionConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateTLSInspectionConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateTLSInspectionConfigurationOutput()
        value.tlsInspectionConfigurationResponse = try reader["TLSInspectionConfigurationResponse"].readIfPresent(with: NetworkFirewallClientTypes.TLSInspectionConfigurationResponse.read(from:))
        value.updateToken = try reader["UpdateToken"].readIfPresent() ?? ""
        return value
    }
}

extension DeleteFirewallOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteFirewallOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteFirewallOutput()
        value.firewall = try reader["Firewall"].readIfPresent(with: NetworkFirewallClientTypes.Firewall.read(from:))
        value.firewallStatus = try reader["FirewallStatus"].readIfPresent(with: NetworkFirewallClientTypes.FirewallStatus.read(from:))
        return value
    }
}

extension DeleteFirewallPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteFirewallPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteFirewallPolicyOutput()
        value.firewallPolicyResponse = try reader["FirewallPolicyResponse"].readIfPresent(with: NetworkFirewallClientTypes.FirewallPolicyResponse.read(from:))
        return value
    }
}

extension DeleteResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteResourcePolicyOutput {
        return DeleteResourcePolicyOutput()
    }
}

extension DeleteRuleGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRuleGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteRuleGroupOutput()
        value.ruleGroupResponse = try reader["RuleGroupResponse"].readIfPresent(with: NetworkFirewallClientTypes.RuleGroupResponse.read(from:))
        return value
    }
}

extension DeleteTLSInspectionConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteTLSInspectionConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteTLSInspectionConfigurationOutput()
        value.tlsInspectionConfigurationResponse = try reader["TLSInspectionConfigurationResponse"].readIfPresent(with: NetworkFirewallClientTypes.TLSInspectionConfigurationResponse.read(from:))
        return value
    }
}

extension DescribeFirewallOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeFirewallOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeFirewallOutput()
        value.firewall = try reader["Firewall"].readIfPresent(with: NetworkFirewallClientTypes.Firewall.read(from:))
        value.firewallStatus = try reader["FirewallStatus"].readIfPresent(with: NetworkFirewallClientTypes.FirewallStatus.read(from:))
        value.updateToken = try reader["UpdateToken"].readIfPresent()
        return value
    }
}

extension DescribeFirewallPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeFirewallPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeFirewallPolicyOutput()
        value.firewallPolicy = try reader["FirewallPolicy"].readIfPresent(with: NetworkFirewallClientTypes.FirewallPolicy.read(from:))
        value.firewallPolicyResponse = try reader["FirewallPolicyResponse"].readIfPresent(with: NetworkFirewallClientTypes.FirewallPolicyResponse.read(from:))
        value.updateToken = try reader["UpdateToken"].readIfPresent() ?? ""
        return value
    }
}

extension DescribeLoggingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeLoggingConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeLoggingConfigurationOutput()
        value.firewallArn = try reader["FirewallArn"].readIfPresent()
        value.loggingConfiguration = try reader["LoggingConfiguration"].readIfPresent(with: NetworkFirewallClientTypes.LoggingConfiguration.read(from:))
        return value
    }
}

extension DescribeResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeResourcePolicyOutput()
        value.policy = try reader["Policy"].readIfPresent()
        return value
    }
}

extension DescribeRuleGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeRuleGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeRuleGroupOutput()
        value.ruleGroup = try reader["RuleGroup"].readIfPresent(with: NetworkFirewallClientTypes.RuleGroup.read(from:))
        value.ruleGroupResponse = try reader["RuleGroupResponse"].readIfPresent(with: NetworkFirewallClientTypes.RuleGroupResponse.read(from:))
        value.updateToken = try reader["UpdateToken"].readIfPresent() ?? ""
        return value
    }
}

extension DescribeRuleGroupMetadataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeRuleGroupMetadataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeRuleGroupMetadataOutput()
        value.capacity = try reader["Capacity"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.ruleGroupArn = try reader["RuleGroupArn"].readIfPresent() ?? ""
        value.ruleGroupName = try reader["RuleGroupName"].readIfPresent() ?? ""
        value.statefulRuleOptions = try reader["StatefulRuleOptions"].readIfPresent(with: NetworkFirewallClientTypes.StatefulRuleOptions.read(from:))
        value.type = try reader["Type"].readIfPresent()
        return value
    }
}

extension DescribeTLSInspectionConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTLSInspectionConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeTLSInspectionConfigurationOutput()
        value.tlsInspectionConfiguration = try reader["TLSInspectionConfiguration"].readIfPresent(with: NetworkFirewallClientTypes.TLSInspectionConfiguration.read(from:))
        value.tlsInspectionConfigurationResponse = try reader["TLSInspectionConfigurationResponse"].readIfPresent(with: NetworkFirewallClientTypes.TLSInspectionConfigurationResponse.read(from:))
        value.updateToken = try reader["UpdateToken"].readIfPresent() ?? ""
        return value
    }
}

extension DisassociateSubnetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateSubnetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DisassociateSubnetsOutput()
        value.firewallArn = try reader["FirewallArn"].readIfPresent()
        value.firewallName = try reader["FirewallName"].readIfPresent()
        value.subnetMappings = try reader["SubnetMappings"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.SubnetMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.updateToken = try reader["UpdateToken"].readIfPresent()
        return value
    }
}

extension ListFirewallPoliciesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListFirewallPoliciesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListFirewallPoliciesOutput()
        value.firewallPolicies = try reader["FirewallPolicies"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.FirewallPolicyMetadata.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListFirewallsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListFirewallsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListFirewallsOutput()
        value.firewalls = try reader["Firewalls"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.FirewallMetadata.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListRuleGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRuleGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRuleGroupsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.ruleGroups = try reader["RuleGroups"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.RuleGroupMetadata.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTLSInspectionConfigurationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTLSInspectionConfigurationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTLSInspectionConfigurationsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.tlsInspectionConfigurations = try reader["TLSInspectionConfigurations"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.TLSInspectionConfigurationMetadata.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutResourcePolicyOutput {
        return PutResourcePolicyOutput()
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateFirewallDeleteProtectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateFirewallDeleteProtectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateFirewallDeleteProtectionOutput()
        value.deleteProtection = try reader["DeleteProtection"].readIfPresent() ?? false
        value.firewallArn = try reader["FirewallArn"].readIfPresent()
        value.firewallName = try reader["FirewallName"].readIfPresent()
        value.updateToken = try reader["UpdateToken"].readIfPresent()
        return value
    }
}

extension UpdateFirewallDescriptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateFirewallDescriptionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateFirewallDescriptionOutput()
        value.description = try reader["Description"].readIfPresent()
        value.firewallArn = try reader["FirewallArn"].readIfPresent()
        value.firewallName = try reader["FirewallName"].readIfPresent()
        value.updateToken = try reader["UpdateToken"].readIfPresent()
        return value
    }
}

extension UpdateFirewallEncryptionConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateFirewallEncryptionConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateFirewallEncryptionConfigurationOutput()
        value.encryptionConfiguration = try reader["EncryptionConfiguration"].readIfPresent(with: NetworkFirewallClientTypes.EncryptionConfiguration.read(from:))
        value.firewallArn = try reader["FirewallArn"].readIfPresent()
        value.firewallName = try reader["FirewallName"].readIfPresent()
        value.updateToken = try reader["UpdateToken"].readIfPresent()
        return value
    }
}

extension UpdateFirewallPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateFirewallPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateFirewallPolicyOutput()
        value.firewallPolicyResponse = try reader["FirewallPolicyResponse"].readIfPresent(with: NetworkFirewallClientTypes.FirewallPolicyResponse.read(from:))
        value.updateToken = try reader["UpdateToken"].readIfPresent() ?? ""
        return value
    }
}

extension UpdateFirewallPolicyChangeProtectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateFirewallPolicyChangeProtectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateFirewallPolicyChangeProtectionOutput()
        value.firewallArn = try reader["FirewallArn"].readIfPresent()
        value.firewallName = try reader["FirewallName"].readIfPresent()
        value.firewallPolicyChangeProtection = try reader["FirewallPolicyChangeProtection"].readIfPresent() ?? false
        value.updateToken = try reader["UpdateToken"].readIfPresent()
        return value
    }
}

extension UpdateLoggingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateLoggingConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateLoggingConfigurationOutput()
        value.firewallArn = try reader["FirewallArn"].readIfPresent()
        value.firewallName = try reader["FirewallName"].readIfPresent()
        value.loggingConfiguration = try reader["LoggingConfiguration"].readIfPresent(with: NetworkFirewallClientTypes.LoggingConfiguration.read(from:))
        return value
    }
}

extension UpdateRuleGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateRuleGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateRuleGroupOutput()
        value.ruleGroupResponse = try reader["RuleGroupResponse"].readIfPresent(with: NetworkFirewallClientTypes.RuleGroupResponse.read(from:))
        value.updateToken = try reader["UpdateToken"].readIfPresent() ?? ""
        return value
    }
}

extension UpdateSubnetChangeProtectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateSubnetChangeProtectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateSubnetChangeProtectionOutput()
        value.firewallArn = try reader["FirewallArn"].readIfPresent()
        value.firewallName = try reader["FirewallName"].readIfPresent()
        value.subnetChangeProtection = try reader["SubnetChangeProtection"].readIfPresent() ?? false
        value.updateToken = try reader["UpdateToken"].readIfPresent()
        return value
    }
}

extension UpdateTLSInspectionConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateTLSInspectionConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateTLSInspectionConfigurationOutput()
        value.tlsInspectionConfigurationResponse = try reader["TLSInspectionConfigurationResponse"].readIfPresent(with: NetworkFirewallClientTypes.TLSInspectionConfigurationResponse.read(from:))
        value.updateToken = try reader["UpdateToken"].readIfPresent() ?? ""
        return value
    }
}

enum AssociateFirewallPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidOperationException": return try InvalidOperationException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "InvalidTokenException": return try InvalidTokenException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AssociateSubnetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InsufficientCapacityException": return try InsufficientCapacityException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidOperationException": return try InvalidOperationException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "InvalidTokenException": return try InvalidTokenException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateFirewallOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InsufficientCapacityException": return try InsufficientCapacityException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidOperationException": return try InvalidOperationException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateFirewallPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InsufficientCapacityException": return try InsufficientCapacityException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateRuleGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InsufficientCapacityException": return try InsufficientCapacityException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateTLSInspectionConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InsufficientCapacityException": return try InsufficientCapacityException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteFirewallOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidOperationException": return try InvalidOperationException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnsupportedOperationException": return try UnsupportedOperationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteFirewallPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidOperationException": return try InvalidOperationException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnsupportedOperationException": return try UnsupportedOperationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "InvalidResourcePolicyException": return try InvalidResourcePolicyException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteRuleGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidOperationException": return try InvalidOperationException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnsupportedOperationException": return try UnsupportedOperationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteTLSInspectionConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidOperationException": return try InvalidOperationException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeFirewallOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeFirewallPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeLoggingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeRuleGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeRuleGroupMetadataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTLSInspectionConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateSubnetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidOperationException": return try InvalidOperationException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "InvalidTokenException": return try InvalidTokenException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListFirewallPoliciesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListFirewallsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRuleGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTLSInspectionConfigurationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "InvalidResourcePolicyException": return try InvalidResourcePolicyException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateFirewallDeleteProtectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "InvalidTokenException": return try InvalidTokenException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceOwnerCheckException": return try ResourceOwnerCheckException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateFirewallDescriptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "InvalidTokenException": return try InvalidTokenException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateFirewallEncryptionConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "InvalidTokenException": return try InvalidTokenException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceOwnerCheckException": return try ResourceOwnerCheckException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateFirewallPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "InvalidTokenException": return try InvalidTokenException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateFirewallPolicyChangeProtectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "InvalidTokenException": return try InvalidTokenException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceOwnerCheckException": return try ResourceOwnerCheckException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateLoggingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "InvalidTokenException": return try InvalidTokenException.makeError(baseError: baseError)
            case "LogDestinationPermissionException": return try LogDestinationPermissionException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateRuleGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "InvalidTokenException": return try InvalidTokenException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateSubnetChangeProtectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "InvalidTokenException": return try InvalidTokenException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceOwnerCheckException": return try ResourceOwnerCheckException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateTLSInspectionConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "InvalidTokenException": return try InvalidTokenException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidRequestException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidRequestException {
        let reader = baseError.errorBodyReader
        var value = InvalidRequestException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerError {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerError {
        let reader = baseError.errorBodyReader
        var value = InternalServerError()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidOperationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidOperationException {
        let reader = baseError.errorBodyReader
        var value = InvalidOperationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidTokenException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidTokenException {
        let reader = baseError.errorBodyReader
        var value = InvalidTokenException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InsufficientCapacityException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InsufficientCapacityException {
        let reader = baseError.errorBodyReader
        var value = InsufficientCapacityException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnsupportedOperationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnsupportedOperationException {
        let reader = baseError.errorBodyReader
        var value = UnsupportedOperationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidResourcePolicyException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidResourcePolicyException {
        let reader = baseError.errorBodyReader
        var value = InvalidResourcePolicyException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceOwnerCheckException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceOwnerCheckException {
        let reader = baseError.errorBodyReader
        var value = ResourceOwnerCheckException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LogDestinationPermissionException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LogDestinationPermissionException {
        let reader = baseError.errorBodyReader
        var value = LogDestinationPermissionException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NetworkFirewallClientTypes.SubnetMapping {

    static func write(value: NetworkFirewallClientTypes.SubnetMapping?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IPAddressType"].write(value.ipAddressType)
        try writer["SubnetId"].write(value.subnetId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.SubnetMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.SubnetMapping()
        value.subnetId = try reader["SubnetId"].readIfPresent() ?? ""
        value.ipAddressType = try reader["IPAddressType"].readIfPresent()
        return value
    }
}

extension NetworkFirewallClientTypes.Firewall {

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.Firewall {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.Firewall()
        value.firewallName = try reader["FirewallName"].readIfPresent()
        value.firewallArn = try reader["FirewallArn"].readIfPresent()
        value.firewallPolicyArn = try reader["FirewallPolicyArn"].readIfPresent() ?? ""
        value.vpcId = try reader["VpcId"].readIfPresent() ?? ""
        value.subnetMappings = try reader["SubnetMappings"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.SubnetMapping.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.deleteProtection = try reader["DeleteProtection"].readIfPresent() ?? false
        value.subnetChangeProtection = try reader["SubnetChangeProtection"].readIfPresent() ?? false
        value.firewallPolicyChangeProtection = try reader["FirewallPolicyChangeProtection"].readIfPresent() ?? false
        value.description = try reader["Description"].readIfPresent()
        value.firewallId = try reader["FirewallId"].readIfPresent() ?? ""
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.encryptionConfiguration = try reader["EncryptionConfiguration"].readIfPresent(with: NetworkFirewallClientTypes.EncryptionConfiguration.read(from:))
        return value
    }
}

extension NetworkFirewallClientTypes.EncryptionConfiguration {

    static func write(value: NetworkFirewallClientTypes.EncryptionConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyId"].write(value.keyId)
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.EncryptionConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.EncryptionConfiguration()
        value.keyId = try reader["KeyId"].readIfPresent()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension NetworkFirewallClientTypes.Tag {

    static func write(value: NetworkFirewallClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension NetworkFirewallClientTypes.FirewallStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.FirewallStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.FirewallStatus()
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.configurationSyncStateSummary = try reader["ConfigurationSyncStateSummary"].readIfPresent() ?? .sdkUnknown("")
        value.syncStates = try reader["SyncStates"].readMapIfPresent(valueReadingClosure: NetworkFirewallClientTypes.SyncState.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.capacityUsageSummary = try reader["CapacityUsageSummary"].readIfPresent(with: NetworkFirewallClientTypes.CapacityUsageSummary.read(from:))
        return value
    }
}

extension NetworkFirewallClientTypes.CapacityUsageSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.CapacityUsageSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.CapacityUsageSummary()
        value.cidRs = try reader["CIDRs"].readIfPresent(with: NetworkFirewallClientTypes.CIDRSummary.read(from:))
        return value
    }
}

extension NetworkFirewallClientTypes.CIDRSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.CIDRSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.CIDRSummary()
        value.availableCIDRCount = try reader["AvailableCIDRCount"].readIfPresent()
        value.utilizedCIDRCount = try reader["UtilizedCIDRCount"].readIfPresent()
        value.ipSetReferences = try reader["IPSetReferences"].readMapIfPresent(valueReadingClosure: NetworkFirewallClientTypes.IPSetMetadata.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension NetworkFirewallClientTypes.IPSetMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.IPSetMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.IPSetMetadata()
        value.resolvedCIDRCount = try reader["ResolvedCIDRCount"].readIfPresent()
        return value
    }
}

extension NetworkFirewallClientTypes.SyncState {

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.SyncState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.SyncState()
        value.attachment = try reader["Attachment"].readIfPresent(with: NetworkFirewallClientTypes.Attachment.read(from:))
        value.config = try reader["Config"].readMapIfPresent(valueReadingClosure: NetworkFirewallClientTypes.PerObjectStatus.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension NetworkFirewallClientTypes.PerObjectStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.PerObjectStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.PerObjectStatus()
        value.syncStatus = try reader["SyncStatus"].readIfPresent()
        value.updateToken = try reader["UpdateToken"].readIfPresent()
        return value
    }
}

extension NetworkFirewallClientTypes.Attachment {

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.Attachment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.Attachment()
        value.subnetId = try reader["SubnetId"].readIfPresent()
        value.endpointId = try reader["EndpointId"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        return value
    }
}

extension NetworkFirewallClientTypes.FirewallPolicyResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.FirewallPolicyResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.FirewallPolicyResponse()
        value.firewallPolicyName = try reader["FirewallPolicyName"].readIfPresent() ?? ""
        value.firewallPolicyArn = try reader["FirewallPolicyArn"].readIfPresent() ?? ""
        value.firewallPolicyId = try reader["FirewallPolicyId"].readIfPresent() ?? ""
        value.description = try reader["Description"].readIfPresent()
        value.firewallPolicyStatus = try reader["FirewallPolicyStatus"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.consumedStatelessRuleCapacity = try reader["ConsumedStatelessRuleCapacity"].readIfPresent()
        value.consumedStatefulRuleCapacity = try reader["ConsumedStatefulRuleCapacity"].readIfPresent()
        value.numberOfAssociations = try reader["NumberOfAssociations"].readIfPresent()
        value.encryptionConfiguration = try reader["EncryptionConfiguration"].readIfPresent(with: NetworkFirewallClientTypes.EncryptionConfiguration.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension NetworkFirewallClientTypes.RuleGroupResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.RuleGroupResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.RuleGroupResponse()
        value.ruleGroupArn = try reader["RuleGroupArn"].readIfPresent() ?? ""
        value.ruleGroupName = try reader["RuleGroupName"].readIfPresent() ?? ""
        value.ruleGroupId = try reader["RuleGroupId"].readIfPresent() ?? ""
        value.description = try reader["Description"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.capacity = try reader["Capacity"].readIfPresent()
        value.ruleGroupStatus = try reader["RuleGroupStatus"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.consumedCapacity = try reader["ConsumedCapacity"].readIfPresent()
        value.numberOfAssociations = try reader["NumberOfAssociations"].readIfPresent()
        value.encryptionConfiguration = try reader["EncryptionConfiguration"].readIfPresent(with: NetworkFirewallClientTypes.EncryptionConfiguration.read(from:))
        value.sourceMetadata = try reader["SourceMetadata"].readIfPresent(with: NetworkFirewallClientTypes.SourceMetadata.read(from:))
        value.snsTopic = try reader["SnsTopic"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.analysisResults = try reader["AnalysisResults"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.AnalysisResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension NetworkFirewallClientTypes.AnalysisResult {

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.AnalysisResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.AnalysisResult()
        value.identifiedRuleIds = try reader["IdentifiedRuleIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.identifiedType = try reader["IdentifiedType"].readIfPresent()
        value.analysisDetail = try reader["AnalysisDetail"].readIfPresent()
        return value
    }
}

extension NetworkFirewallClientTypes.SourceMetadata {

    static func write(value: NetworkFirewallClientTypes.SourceMetadata?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SourceArn"].write(value.sourceArn)
        try writer["SourceUpdateToken"].write(value.sourceUpdateToken)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.SourceMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.SourceMetadata()
        value.sourceArn = try reader["SourceArn"].readIfPresent()
        value.sourceUpdateToken = try reader["SourceUpdateToken"].readIfPresent()
        return value
    }
}

extension NetworkFirewallClientTypes.TLSInspectionConfigurationResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.TLSInspectionConfigurationResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.TLSInspectionConfigurationResponse()
        value.tlsInspectionConfigurationArn = try reader["TLSInspectionConfigurationArn"].readIfPresent() ?? ""
        value.tlsInspectionConfigurationName = try reader["TLSInspectionConfigurationName"].readIfPresent() ?? ""
        value.tlsInspectionConfigurationId = try reader["TLSInspectionConfigurationId"].readIfPresent() ?? ""
        value.tlsInspectionConfigurationStatus = try reader["TLSInspectionConfigurationStatus"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.numberOfAssociations = try reader["NumberOfAssociations"].readIfPresent()
        value.encryptionConfiguration = try reader["EncryptionConfiguration"].readIfPresent(with: NetworkFirewallClientTypes.EncryptionConfiguration.read(from:))
        value.certificates = try reader["Certificates"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.TlsCertificateData.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.certificateAuthority = try reader["CertificateAuthority"].readIfPresent(with: NetworkFirewallClientTypes.TlsCertificateData.read(from:))
        return value
    }
}

extension NetworkFirewallClientTypes.TlsCertificateData {

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.TlsCertificateData {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.TlsCertificateData()
        value.certificateArn = try reader["CertificateArn"].readIfPresent()
        value.certificateSerial = try reader["CertificateSerial"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        return value
    }
}

extension NetworkFirewallClientTypes.FirewallPolicy {

    static func write(value: NetworkFirewallClientTypes.FirewallPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PolicyVariables"].write(value.policyVariables, with: NetworkFirewallClientTypes.PolicyVariables.write(value:to:))
        try writer["StatefulDefaultActions"].writeList(value.statefulDefaultActions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StatefulEngineOptions"].write(value.statefulEngineOptions, with: NetworkFirewallClientTypes.StatefulEngineOptions.write(value:to:))
        try writer["StatefulRuleGroupReferences"].writeList(value.statefulRuleGroupReferences, memberWritingClosure: NetworkFirewallClientTypes.StatefulRuleGroupReference.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StatelessCustomActions"].writeList(value.statelessCustomActions, memberWritingClosure: NetworkFirewallClientTypes.CustomAction.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StatelessDefaultActions"].writeList(value.statelessDefaultActions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StatelessFragmentDefaultActions"].writeList(value.statelessFragmentDefaultActions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StatelessRuleGroupReferences"].writeList(value.statelessRuleGroupReferences, memberWritingClosure: NetworkFirewallClientTypes.StatelessRuleGroupReference.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TLSInspectionConfigurationArn"].write(value.tlsInspectionConfigurationArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.FirewallPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.FirewallPolicy()
        value.statelessRuleGroupReferences = try reader["StatelessRuleGroupReferences"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.StatelessRuleGroupReference.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.statelessDefaultActions = try reader["StatelessDefaultActions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.statelessFragmentDefaultActions = try reader["StatelessFragmentDefaultActions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.statelessCustomActions = try reader["StatelessCustomActions"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.CustomAction.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.statefulRuleGroupReferences = try reader["StatefulRuleGroupReferences"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.StatefulRuleGroupReference.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.statefulDefaultActions = try reader["StatefulDefaultActions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.statefulEngineOptions = try reader["StatefulEngineOptions"].readIfPresent(with: NetworkFirewallClientTypes.StatefulEngineOptions.read(from:))
        value.tlsInspectionConfigurationArn = try reader["TLSInspectionConfigurationArn"].readIfPresent()
        value.policyVariables = try reader["PolicyVariables"].readIfPresent(with: NetworkFirewallClientTypes.PolicyVariables.read(from:))
        return value
    }
}

extension NetworkFirewallClientTypes.PolicyVariables {

    static func write(value: NetworkFirewallClientTypes.PolicyVariables?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RuleVariables"].writeMap(value.ruleVariables, valueWritingClosure: NetworkFirewallClientTypes.IPSet.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.PolicyVariables {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.PolicyVariables()
        value.ruleVariables = try reader["RuleVariables"].readMapIfPresent(valueReadingClosure: NetworkFirewallClientTypes.IPSet.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension NetworkFirewallClientTypes.IPSet {

    static func write(value: NetworkFirewallClientTypes.IPSet?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Definition"].writeList(value.definition, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.IPSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.IPSet()
        value.definition = try reader["Definition"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension NetworkFirewallClientTypes.StatefulEngineOptions {

    static func write(value: NetworkFirewallClientTypes.StatefulEngineOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RuleOrder"].write(value.ruleOrder)
        try writer["StreamExceptionPolicy"].write(value.streamExceptionPolicy)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.StatefulEngineOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.StatefulEngineOptions()
        value.ruleOrder = try reader["RuleOrder"].readIfPresent()
        value.streamExceptionPolicy = try reader["StreamExceptionPolicy"].readIfPresent()
        return value
    }
}

extension NetworkFirewallClientTypes.StatefulRuleGroupReference {

    static func write(value: NetworkFirewallClientTypes.StatefulRuleGroupReference?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Override"].write(value.`override`, with: NetworkFirewallClientTypes.StatefulRuleGroupOverride.write(value:to:))
        try writer["Priority"].write(value.priority)
        try writer["ResourceArn"].write(value.resourceArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.StatefulRuleGroupReference {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.StatefulRuleGroupReference()
        value.resourceArn = try reader["ResourceArn"].readIfPresent() ?? ""
        value.priority = try reader["Priority"].readIfPresent()
        value.`override` = try reader["Override"].readIfPresent(with: NetworkFirewallClientTypes.StatefulRuleGroupOverride.read(from:))
        return value
    }
}

extension NetworkFirewallClientTypes.StatefulRuleGroupOverride {

    static func write(value: NetworkFirewallClientTypes.StatefulRuleGroupOverride?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Action"].write(value.action)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.StatefulRuleGroupOverride {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.StatefulRuleGroupOverride()
        value.action = try reader["Action"].readIfPresent()
        return value
    }
}

extension NetworkFirewallClientTypes.CustomAction {

    static func write(value: NetworkFirewallClientTypes.CustomAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ActionDefinition"].write(value.actionDefinition, with: NetworkFirewallClientTypes.ActionDefinition.write(value:to:))
        try writer["ActionName"].write(value.actionName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.CustomAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.CustomAction()
        value.actionName = try reader["ActionName"].readIfPresent() ?? ""
        value.actionDefinition = try reader["ActionDefinition"].readIfPresent(with: NetworkFirewallClientTypes.ActionDefinition.read(from:))
        return value
    }
}

extension NetworkFirewallClientTypes.ActionDefinition {

    static func write(value: NetworkFirewallClientTypes.ActionDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PublishMetricAction"].write(value.publishMetricAction, with: NetworkFirewallClientTypes.PublishMetricAction.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.ActionDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.ActionDefinition()
        value.publishMetricAction = try reader["PublishMetricAction"].readIfPresent(with: NetworkFirewallClientTypes.PublishMetricAction.read(from:))
        return value
    }
}

extension NetworkFirewallClientTypes.PublishMetricAction {

    static func write(value: NetworkFirewallClientTypes.PublishMetricAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Dimensions"].writeList(value.dimensions, memberWritingClosure: NetworkFirewallClientTypes.Dimension.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.PublishMetricAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.PublishMetricAction()
        value.dimensions = try reader["Dimensions"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.Dimension.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension NetworkFirewallClientTypes.Dimension {

    static func write(value: NetworkFirewallClientTypes.Dimension?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.Dimension {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.Dimension()
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension NetworkFirewallClientTypes.StatelessRuleGroupReference {

    static func write(value: NetworkFirewallClientTypes.StatelessRuleGroupReference?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Priority"].write(value.priority)
        try writer["ResourceArn"].write(value.resourceArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.StatelessRuleGroupReference {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.StatelessRuleGroupReference()
        value.resourceArn = try reader["ResourceArn"].readIfPresent() ?? ""
        value.priority = try reader["Priority"].readIfPresent() ?? 0
        return value
    }
}

extension NetworkFirewallClientTypes.LoggingConfiguration {

    static func write(value: NetworkFirewallClientTypes.LoggingConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LogDestinationConfigs"].writeList(value.logDestinationConfigs, memberWritingClosure: NetworkFirewallClientTypes.LogDestinationConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.LoggingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.LoggingConfiguration()
        value.logDestinationConfigs = try reader["LogDestinationConfigs"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.LogDestinationConfig.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension NetworkFirewallClientTypes.LogDestinationConfig {

    static func write(value: NetworkFirewallClientTypes.LogDestinationConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LogDestination"].writeMap(value.logDestination, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["LogDestinationType"].write(value.logDestinationType)
        try writer["LogType"].write(value.logType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.LogDestinationConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.LogDestinationConfig()
        value.logType = try reader["LogType"].readIfPresent() ?? .sdkUnknown("")
        value.logDestinationType = try reader["LogDestinationType"].readIfPresent() ?? .sdkUnknown("")
        value.logDestination = try reader["LogDestination"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        return value
    }
}

extension NetworkFirewallClientTypes.RuleGroup {

    static func write(value: NetworkFirewallClientTypes.RuleGroup?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ReferenceSets"].write(value.referenceSets, with: NetworkFirewallClientTypes.ReferenceSets.write(value:to:))
        try writer["RuleVariables"].write(value.ruleVariables, with: NetworkFirewallClientTypes.RuleVariables.write(value:to:))
        try writer["RulesSource"].write(value.rulesSource, with: NetworkFirewallClientTypes.RulesSource.write(value:to:))
        try writer["StatefulRuleOptions"].write(value.statefulRuleOptions, with: NetworkFirewallClientTypes.StatefulRuleOptions.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.RuleGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.RuleGroup()
        value.ruleVariables = try reader["RuleVariables"].readIfPresent(with: NetworkFirewallClientTypes.RuleVariables.read(from:))
        value.referenceSets = try reader["ReferenceSets"].readIfPresent(with: NetworkFirewallClientTypes.ReferenceSets.read(from:))
        value.rulesSource = try reader["RulesSource"].readIfPresent(with: NetworkFirewallClientTypes.RulesSource.read(from:))
        value.statefulRuleOptions = try reader["StatefulRuleOptions"].readIfPresent(with: NetworkFirewallClientTypes.StatefulRuleOptions.read(from:))
        return value
    }
}

extension NetworkFirewallClientTypes.StatefulRuleOptions {

    static func write(value: NetworkFirewallClientTypes.StatefulRuleOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RuleOrder"].write(value.ruleOrder)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.StatefulRuleOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.StatefulRuleOptions()
        value.ruleOrder = try reader["RuleOrder"].readIfPresent()
        return value
    }
}

extension NetworkFirewallClientTypes.RulesSource {

    static func write(value: NetworkFirewallClientTypes.RulesSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RulesSourceList"].write(value.rulesSourceList, with: NetworkFirewallClientTypes.RulesSourceList.write(value:to:))
        try writer["RulesString"].write(value.rulesString)
        try writer["StatefulRules"].writeList(value.statefulRules, memberWritingClosure: NetworkFirewallClientTypes.StatefulRule.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StatelessRulesAndCustomActions"].write(value.statelessRulesAndCustomActions, with: NetworkFirewallClientTypes.StatelessRulesAndCustomActions.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.RulesSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.RulesSource()
        value.rulesString = try reader["RulesString"].readIfPresent()
        value.rulesSourceList = try reader["RulesSourceList"].readIfPresent(with: NetworkFirewallClientTypes.RulesSourceList.read(from:))
        value.statefulRules = try reader["StatefulRules"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.StatefulRule.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.statelessRulesAndCustomActions = try reader["StatelessRulesAndCustomActions"].readIfPresent(with: NetworkFirewallClientTypes.StatelessRulesAndCustomActions.read(from:))
        return value
    }
}

extension NetworkFirewallClientTypes.StatelessRulesAndCustomActions {

    static func write(value: NetworkFirewallClientTypes.StatelessRulesAndCustomActions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomActions"].writeList(value.customActions, memberWritingClosure: NetworkFirewallClientTypes.CustomAction.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StatelessRules"].writeList(value.statelessRules, memberWritingClosure: NetworkFirewallClientTypes.StatelessRule.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.StatelessRulesAndCustomActions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.StatelessRulesAndCustomActions()
        value.statelessRules = try reader["StatelessRules"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.StatelessRule.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.customActions = try reader["CustomActions"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.CustomAction.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension NetworkFirewallClientTypes.StatelessRule {

    static func write(value: NetworkFirewallClientTypes.StatelessRule?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Priority"].write(value.priority)
        try writer["RuleDefinition"].write(value.ruleDefinition, with: NetworkFirewallClientTypes.RuleDefinition.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.StatelessRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.StatelessRule()
        value.ruleDefinition = try reader["RuleDefinition"].readIfPresent(with: NetworkFirewallClientTypes.RuleDefinition.read(from:))
        value.priority = try reader["Priority"].readIfPresent() ?? 0
        return value
    }
}

extension NetworkFirewallClientTypes.RuleDefinition {

    static func write(value: NetworkFirewallClientTypes.RuleDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Actions"].writeList(value.actions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MatchAttributes"].write(value.matchAttributes, with: NetworkFirewallClientTypes.MatchAttributes.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.RuleDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.RuleDefinition()
        value.matchAttributes = try reader["MatchAttributes"].readIfPresent(with: NetworkFirewallClientTypes.MatchAttributes.read(from:))
        value.actions = try reader["Actions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension NetworkFirewallClientTypes.MatchAttributes {

    static func write(value: NetworkFirewallClientTypes.MatchAttributes?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DestinationPorts"].writeList(value.destinationPorts, memberWritingClosure: NetworkFirewallClientTypes.PortRange.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Destinations"].writeList(value.destinations, memberWritingClosure: NetworkFirewallClientTypes.Address.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Protocols"].writeList(value.protocols, memberWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SourcePorts"].writeList(value.sourcePorts, memberWritingClosure: NetworkFirewallClientTypes.PortRange.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Sources"].writeList(value.sources, memberWritingClosure: NetworkFirewallClientTypes.Address.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TCPFlags"].writeList(value.tcpFlags, memberWritingClosure: NetworkFirewallClientTypes.TCPFlagField.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.MatchAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.MatchAttributes()
        value.sources = try reader["Sources"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.Address.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.destinations = try reader["Destinations"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.Address.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.sourcePorts = try reader["SourcePorts"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.PortRange.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.destinationPorts = try reader["DestinationPorts"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.PortRange.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.protocols = try reader["Protocols"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        value.tcpFlags = try reader["TCPFlags"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.TCPFlagField.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension NetworkFirewallClientTypes.TCPFlagField {

    static func write(value: NetworkFirewallClientTypes.TCPFlagField?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Flags"].writeList(value.flags, memberWritingClosure: SmithyReadWrite.WritingClosureBox<NetworkFirewallClientTypes.TCPFlag>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Masks"].writeList(value.masks, memberWritingClosure: SmithyReadWrite.WritingClosureBox<NetworkFirewallClientTypes.TCPFlag>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.TCPFlagField {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.TCPFlagField()
        value.flags = try reader["Flags"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<NetworkFirewallClientTypes.TCPFlag>().read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.masks = try reader["Masks"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<NetworkFirewallClientTypes.TCPFlag>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension NetworkFirewallClientTypes.PortRange {

    static func write(value: NetworkFirewallClientTypes.PortRange?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FromPort"].write(value.fromPort)
        try writer["ToPort"].write(value.toPort)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.PortRange {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.PortRange()
        value.fromPort = try reader["FromPort"].readIfPresent() ?? 0
        value.toPort = try reader["ToPort"].readIfPresent() ?? 0
        return value
    }
}

extension NetworkFirewallClientTypes.Address {

    static func write(value: NetworkFirewallClientTypes.Address?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AddressDefinition"].write(value.addressDefinition)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.Address {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.Address()
        value.addressDefinition = try reader["AddressDefinition"].readIfPresent() ?? ""
        return value
    }
}

extension NetworkFirewallClientTypes.StatefulRule {

    static func write(value: NetworkFirewallClientTypes.StatefulRule?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Action"].write(value.action)
        try writer["Header"].write(value.header, with: NetworkFirewallClientTypes.Header.write(value:to:))
        try writer["RuleOptions"].writeList(value.ruleOptions, memberWritingClosure: NetworkFirewallClientTypes.RuleOption.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.StatefulRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.StatefulRule()
        value.action = try reader["Action"].readIfPresent() ?? .sdkUnknown("")
        value.header = try reader["Header"].readIfPresent(with: NetworkFirewallClientTypes.Header.read(from:))
        value.ruleOptions = try reader["RuleOptions"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.RuleOption.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension NetworkFirewallClientTypes.RuleOption {

    static func write(value: NetworkFirewallClientTypes.RuleOption?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Keyword"].write(value.keyword)
        try writer["Settings"].writeList(value.settings, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.RuleOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.RuleOption()
        value.keyword = try reader["Keyword"].readIfPresent() ?? ""
        value.settings = try reader["Settings"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension NetworkFirewallClientTypes.Header {

    static func write(value: NetworkFirewallClientTypes.Header?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Destination"].write(value.destination)
        try writer["DestinationPort"].write(value.destinationPort)
        try writer["Direction"].write(value.direction)
        try writer["Protocol"].write(value.`protocol`)
        try writer["Source"].write(value.source)
        try writer["SourcePort"].write(value.sourcePort)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.Header {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.Header()
        value.`protocol` = try reader["Protocol"].readIfPresent() ?? .sdkUnknown("")
        value.source = try reader["Source"].readIfPresent() ?? ""
        value.sourcePort = try reader["SourcePort"].readIfPresent() ?? ""
        value.direction = try reader["Direction"].readIfPresent() ?? .sdkUnknown("")
        value.destination = try reader["Destination"].readIfPresent() ?? ""
        value.destinationPort = try reader["DestinationPort"].readIfPresent() ?? ""
        return value
    }
}

extension NetworkFirewallClientTypes.RulesSourceList {

    static func write(value: NetworkFirewallClientTypes.RulesSourceList?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GeneratedRulesType"].write(value.generatedRulesType)
        try writer["TargetTypes"].writeList(value.targetTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<NetworkFirewallClientTypes.TargetType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Targets"].writeList(value.targets, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.RulesSourceList {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.RulesSourceList()
        value.targets = try reader["Targets"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.targetTypes = try reader["TargetTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<NetworkFirewallClientTypes.TargetType>().read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.generatedRulesType = try reader["GeneratedRulesType"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension NetworkFirewallClientTypes.ReferenceSets {

    static func write(value: NetworkFirewallClientTypes.ReferenceSets?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IPSetReferences"].writeMap(value.ipSetReferences, valueWritingClosure: NetworkFirewallClientTypes.IPSetReference.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.ReferenceSets {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.ReferenceSets()
        value.ipSetReferences = try reader["IPSetReferences"].readMapIfPresent(valueReadingClosure: NetworkFirewallClientTypes.IPSetReference.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension NetworkFirewallClientTypes.IPSetReference {

    static func write(value: NetworkFirewallClientTypes.IPSetReference?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ReferenceArn"].write(value.referenceArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.IPSetReference {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.IPSetReference()
        value.referenceArn = try reader["ReferenceArn"].readIfPresent()
        return value
    }
}

extension NetworkFirewallClientTypes.RuleVariables {

    static func write(value: NetworkFirewallClientTypes.RuleVariables?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IPSets"].writeMap(value.ipSets, valueWritingClosure: NetworkFirewallClientTypes.IPSet.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["PortSets"].writeMap(value.portSets, valueWritingClosure: NetworkFirewallClientTypes.PortSet.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.RuleVariables {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.RuleVariables()
        value.ipSets = try reader["IPSets"].readMapIfPresent(valueReadingClosure: NetworkFirewallClientTypes.IPSet.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.portSets = try reader["PortSets"].readMapIfPresent(valueReadingClosure: NetworkFirewallClientTypes.PortSet.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension NetworkFirewallClientTypes.PortSet {

    static func write(value: NetworkFirewallClientTypes.PortSet?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Definition"].writeList(value.definition, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.PortSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.PortSet()
        value.definition = try reader["Definition"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension NetworkFirewallClientTypes.TLSInspectionConfiguration {

    static func write(value: NetworkFirewallClientTypes.TLSInspectionConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ServerCertificateConfigurations"].writeList(value.serverCertificateConfigurations, memberWritingClosure: NetworkFirewallClientTypes.ServerCertificateConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.TLSInspectionConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.TLSInspectionConfiguration()
        value.serverCertificateConfigurations = try reader["ServerCertificateConfigurations"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.ServerCertificateConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension NetworkFirewallClientTypes.ServerCertificateConfiguration {

    static func write(value: NetworkFirewallClientTypes.ServerCertificateConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateAuthorityArn"].write(value.certificateAuthorityArn)
        try writer["CheckCertificateRevocationStatus"].write(value.checkCertificateRevocationStatus, with: NetworkFirewallClientTypes.CheckCertificateRevocationStatusActions.write(value:to:))
        try writer["Scopes"].writeList(value.scopes, memberWritingClosure: NetworkFirewallClientTypes.ServerCertificateScope.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ServerCertificates"].writeList(value.serverCertificates, memberWritingClosure: NetworkFirewallClientTypes.ServerCertificate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.ServerCertificateConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.ServerCertificateConfiguration()
        value.serverCertificates = try reader["ServerCertificates"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.ServerCertificate.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.scopes = try reader["Scopes"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.ServerCertificateScope.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.certificateAuthorityArn = try reader["CertificateAuthorityArn"].readIfPresent()
        value.checkCertificateRevocationStatus = try reader["CheckCertificateRevocationStatus"].readIfPresent(with: NetworkFirewallClientTypes.CheckCertificateRevocationStatusActions.read(from:))
        return value
    }
}

extension NetworkFirewallClientTypes.CheckCertificateRevocationStatusActions {

    static func write(value: NetworkFirewallClientTypes.CheckCertificateRevocationStatusActions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RevokedStatusAction"].write(value.revokedStatusAction)
        try writer["UnknownStatusAction"].write(value.unknownStatusAction)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.CheckCertificateRevocationStatusActions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.CheckCertificateRevocationStatusActions()
        value.revokedStatusAction = try reader["RevokedStatusAction"].readIfPresent()
        value.unknownStatusAction = try reader["UnknownStatusAction"].readIfPresent()
        return value
    }
}

extension NetworkFirewallClientTypes.ServerCertificateScope {

    static func write(value: NetworkFirewallClientTypes.ServerCertificateScope?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DestinationPorts"].writeList(value.destinationPorts, memberWritingClosure: NetworkFirewallClientTypes.PortRange.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Destinations"].writeList(value.destinations, memberWritingClosure: NetworkFirewallClientTypes.Address.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Protocols"].writeList(value.protocols, memberWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SourcePorts"].writeList(value.sourcePorts, memberWritingClosure: NetworkFirewallClientTypes.PortRange.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Sources"].writeList(value.sources, memberWritingClosure: NetworkFirewallClientTypes.Address.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.ServerCertificateScope {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.ServerCertificateScope()
        value.sources = try reader["Sources"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.Address.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.destinations = try reader["Destinations"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.Address.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.sourcePorts = try reader["SourcePorts"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.PortRange.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.destinationPorts = try reader["DestinationPorts"].readListIfPresent(memberReadingClosure: NetworkFirewallClientTypes.PortRange.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.protocols = try reader["Protocols"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension NetworkFirewallClientTypes.ServerCertificate {

    static func write(value: NetworkFirewallClientTypes.ServerCertificate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.ServerCertificate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.ServerCertificate()
        value.resourceArn = try reader["ResourceArn"].readIfPresent()
        return value
    }
}

extension NetworkFirewallClientTypes.FirewallPolicyMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.FirewallPolicyMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.FirewallPolicyMetadata()
        value.name = try reader["Name"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension NetworkFirewallClientTypes.FirewallMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.FirewallMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.FirewallMetadata()
        value.firewallName = try reader["FirewallName"].readIfPresent()
        value.firewallArn = try reader["FirewallArn"].readIfPresent()
        return value
    }
}

extension NetworkFirewallClientTypes.RuleGroupMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.RuleGroupMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.RuleGroupMetadata()
        value.name = try reader["Name"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension NetworkFirewallClientTypes.TLSInspectionConfigurationMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> NetworkFirewallClientTypes.TLSInspectionConfigurationMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NetworkFirewallClientTypes.TLSInspectionConfigurationMetadata()
        value.name = try reader["Name"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

public enum NetworkFirewallClientTypes {}
