// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkFirewallClient {
    /// Paginate over `[ListFirewallPoliciesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListFirewallPoliciesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListFirewallPoliciesOutputResponse`
    public func listFirewallPoliciesPaginated(input: ListFirewallPoliciesInput) -> ClientRuntime.PaginatorSequence<ListFirewallPoliciesInput, ListFirewallPoliciesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListFirewallPoliciesInput, ListFirewallPoliciesOutputResponse>(input: input, inputKey: \ListFirewallPoliciesInput.nextToken, outputKey: \ListFirewallPoliciesOutputResponse.nextToken, paginationFunction: self.listFirewallPolicies(input:))
    }
}

extension ListFirewallPoliciesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListFirewallPoliciesInput {
        return ListFirewallPoliciesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListFirewallPoliciesInput, Output == ListFirewallPoliciesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listFirewallPoliciesPaginated`
    /// to access the nested member `[NetworkFirewallClientTypes.FirewallPolicyMetadata]`
    /// - Returns: `[NetworkFirewallClientTypes.FirewallPolicyMetadata]`
    public func firewallPolicies() async throws -> [NetworkFirewallClientTypes.FirewallPolicyMetadata] {
        return try await self.asyncCompactMap { item in item.firewallPolicies }
    }
}
extension NetworkFirewallClient {
    /// Paginate over `[ListFirewallsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListFirewallsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListFirewallsOutputResponse`
    public func listFirewallsPaginated(input: ListFirewallsInput) -> ClientRuntime.PaginatorSequence<ListFirewallsInput, ListFirewallsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListFirewallsInput, ListFirewallsOutputResponse>(input: input, inputKey: \ListFirewallsInput.nextToken, outputKey: \ListFirewallsOutputResponse.nextToken, paginationFunction: self.listFirewalls(input:))
    }
}

extension ListFirewallsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListFirewallsInput {
        return ListFirewallsInput(
            maxResults: self.maxResults,
            nextToken: token,
            vpcIds: self.vpcIds
        )}
}

extension PaginatorSequence where Input == ListFirewallsInput, Output == ListFirewallsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listFirewallsPaginated`
    /// to access the nested member `[NetworkFirewallClientTypes.FirewallMetadata]`
    /// - Returns: `[NetworkFirewallClientTypes.FirewallMetadata]`
    public func firewalls() async throws -> [NetworkFirewallClientTypes.FirewallMetadata] {
        return try await self.asyncCompactMap { item in item.firewalls }
    }
}
extension NetworkFirewallClient {
    /// Paginate over `[ListRuleGroupsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListRuleGroupsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListRuleGroupsOutputResponse`
    public func listRuleGroupsPaginated(input: ListRuleGroupsInput) -> ClientRuntime.PaginatorSequence<ListRuleGroupsInput, ListRuleGroupsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListRuleGroupsInput, ListRuleGroupsOutputResponse>(input: input, inputKey: \ListRuleGroupsInput.nextToken, outputKey: \ListRuleGroupsOutputResponse.nextToken, paginationFunction: self.listRuleGroups(input:))
    }
}

extension ListRuleGroupsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListRuleGroupsInput {
        return ListRuleGroupsInput(
            managedType: self.managedType,
            maxResults: self.maxResults,
            nextToken: token,
            scope: self.scope,
            type: self.type
        )}
}

extension PaginatorSequence where Input == ListRuleGroupsInput, Output == ListRuleGroupsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listRuleGroupsPaginated`
    /// to access the nested member `[NetworkFirewallClientTypes.RuleGroupMetadata]`
    /// - Returns: `[NetworkFirewallClientTypes.RuleGroupMetadata]`
    public func ruleGroups() async throws -> [NetworkFirewallClientTypes.RuleGroupMetadata] {
        return try await self.asyncCompactMap { item in item.ruleGroups }
    }
}
extension NetworkFirewallClient {
    /// Paginate over `[ListTagsForResourceOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTagsForResourceInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTagsForResourceOutputResponse`
    public func listTagsForResourcePaginated(input: ListTagsForResourceInput) -> ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutputResponse>(input: input, inputKey: \ListTagsForResourceInput.nextToken, outputKey: \ListTagsForResourceOutputResponse.nextToken, paginationFunction: self.listTagsForResource(input:))
    }
}

extension ListTagsForResourceInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTagsForResourceInput {
        return ListTagsForResourceInput(
            maxResults: self.maxResults,
            nextToken: token,
            resourceArn: self.resourceArn
        )}
}

extension PaginatorSequence where Input == ListTagsForResourceInput, Output == ListTagsForResourceOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listTagsForResourcePaginated`
    /// to access the nested member `[NetworkFirewallClientTypes.Tag]`
    /// - Returns: `[NetworkFirewallClientTypes.Tag]`
    public func tags() async throws -> [NetworkFirewallClientTypes.Tag] {
        return try await self.asyncCompactMap { item in item.tags }
    }
}
