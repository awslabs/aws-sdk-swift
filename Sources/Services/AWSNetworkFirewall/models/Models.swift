// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension NetworkFirewallClientTypes.ActionDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case publishMetricAction = "PublishMetricAction"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let publishMetricAction = self.publishMetricAction {
            try encodeContainer.encode(publishMetricAction, forKey: .publishMetricAction)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let publishMetricActionDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.PublishMetricAction.self, forKey: .publishMetricAction)
        publishMetricAction = publishMetricActionDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// A custom action to use in stateless rule actions settings. This is used in [CustomAction].
    public struct ActionDefinition: Swift.Equatable {
        /// Stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. This setting defines a CloudWatch dimension value to be published. You can pair this custom action with any of the standard stateless rule actions. For example, you could pair this in a rule action with the standard action that forwards the packet for stateful inspection. Then, when a packet matches the rule, Network Firewall publishes metrics for the packet and forwards it.
        public var publishMetricAction: NetworkFirewallClientTypes.PublishMetricAction?

        public init (
            publishMetricAction: NetworkFirewallClientTypes.PublishMetricAction? = nil
        )
        {
            self.publishMetricAction = publishMetricAction
        }
    }

}

extension NetworkFirewallClientTypes.Address: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressDefinition = "AddressDefinition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addressDefinition = self.addressDefinition {
            try encodeContainer.encode(addressDefinition, forKey: .addressDefinition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addressDefinition)
        addressDefinition = addressDefinitionDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// A single IP address specification. This is used in the [MatchAttributes] source and destination specifications.
    public struct Address: Swift.Equatable {
        /// Specify an IP address or a block of IP addresses in Classless Inter-Domain Routing (CIDR) notation. Network Firewall supports all address ranges for IPv4. Examples:
        ///
        /// * To configure Network Firewall to inspect for the IP address 192.0.2.44, specify 192.0.2.44/32.
        ///
        /// * To configure Network Firewall to inspect for IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24.
        ///
        ///
        /// For more information about CIDR notation, see the Wikipedia entry [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing).
        /// This member is required.
        public var addressDefinition: Swift.String?

        public init (
            addressDefinition: Swift.String? = nil
        )
        {
            self.addressDefinition = addressDefinition
        }
    }

}

extension AssociateFirewallPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case firewallPolicyArn = "FirewallPolicyArn"
        case updateToken = "UpdateToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let firewallArn = self.firewallArn {
            try encodeContainer.encode(firewallArn, forKey: .firewallArn)
        }
        if let firewallName = self.firewallName {
            try encodeContainer.encode(firewallName, forKey: .firewallName)
        }
        if let firewallPolicyArn = self.firewallPolicyArn {
            try encodeContainer.encode(firewallPolicyArn, forKey: .firewallPolicyArn)
        }
        if let updateToken = self.updateToken {
            try encodeContainer.encode(updateToken, forKey: .updateToken)
        }
    }
}

extension AssociateFirewallPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AssociateFirewallPolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the firewall. You must specify the ARN or the name, and you can specify both.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallName: Swift.String?
    /// The Amazon Resource Name (ARN) of the firewall policy.
    /// This member is required.
    public var firewallPolicyArn: Swift.String?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init (
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        firewallPolicyArn: Swift.String? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.firewallPolicyArn = firewallPolicyArn
        self.updateToken = updateToken
    }
}

struct AssociateFirewallPolicyInputBody: Swift.Equatable {
    let updateToken: Swift.String?
    let firewallArn: Swift.String?
    let firewallName: Swift.String?
    let firewallPolicyArn: Swift.String?
}

extension AssociateFirewallPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case firewallPolicyArn = "FirewallPolicyArn"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let firewallPolicyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallPolicyArn)
        firewallPolicyArn = firewallPolicyArnDecoded
    }
}

extension AssociateFirewallPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateFirewallPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTokenException" : self = .invalidTokenException(try InvalidTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AssociateFirewallPolicyOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidOperationException(InvalidOperationException)
    case invalidRequestException(InvalidRequestException)
    case invalidTokenException(InvalidTokenException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateFirewallPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AssociateFirewallPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.firewallArn = output.firewallArn
            self.firewallName = output.firewallName
            self.firewallPolicyArn = output.firewallPolicyArn
            self.updateToken = output.updateToken
        } else {
            self.firewallArn = nil
            self.firewallName = nil
            self.firewallPolicyArn = nil
            self.updateToken = nil
        }
    }
}

public struct AssociateFirewallPolicyOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the firewall.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
    public var firewallName: Swift.String?
    /// The Amazon Resource Name (ARN) of the firewall policy.
    public var firewallPolicyArn: Swift.String?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init (
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        firewallPolicyArn: Swift.String? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.firewallPolicyArn = firewallPolicyArn
        self.updateToken = updateToken
    }
}

struct AssociateFirewallPolicyOutputResponseBody: Swift.Equatable {
    let firewallArn: Swift.String?
    let firewallName: Swift.String?
    let firewallPolicyArn: Swift.String?
    let updateToken: Swift.String?
}

extension AssociateFirewallPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case firewallPolicyArn = "FirewallPolicyArn"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let firewallPolicyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallPolicyArn)
        firewallPolicyArn = firewallPolicyArnDecoded
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
    }
}

extension AssociateSubnetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case subnetMappings = "SubnetMappings"
        case updateToken = "UpdateToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let firewallArn = self.firewallArn {
            try encodeContainer.encode(firewallArn, forKey: .firewallArn)
        }
        if let firewallName = self.firewallName {
            try encodeContainer.encode(firewallName, forKey: .firewallName)
        }
        if let subnetMappings = subnetMappings {
            var subnetMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetMappings)
            for subnetmapping0 in subnetMappings {
                try subnetMappingsContainer.encode(subnetmapping0)
            }
        }
        if let updateToken = self.updateToken {
            try encodeContainer.encode(updateToken, forKey: .updateToken)
        }
    }
}

extension AssociateSubnetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AssociateSubnetsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the firewall. You must specify the ARN or the name, and you can specify both.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallName: Swift.String?
    /// The IDs of the subnets that you want to associate with the firewall.
    /// This member is required.
    public var subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init (
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.subnetMappings = subnetMappings
        self.updateToken = updateToken
    }
}

struct AssociateSubnetsInputBody: Swift.Equatable {
    let updateToken: Swift.String?
    let firewallArn: Swift.String?
    let firewallName: Swift.String?
    let subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]?
}

extension AssociateSubnetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case subnetMappings = "SubnetMappings"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let subnetMappingsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.SubnetMapping?].self, forKey: .subnetMappings)
        var subnetMappingsDecoded0:[NetworkFirewallClientTypes.SubnetMapping]? = nil
        if let subnetMappingsContainer = subnetMappingsContainer {
            subnetMappingsDecoded0 = [NetworkFirewallClientTypes.SubnetMapping]()
            for structure0 in subnetMappingsContainer {
                if let structure0 = structure0 {
                    subnetMappingsDecoded0?.append(structure0)
                }
            }
        }
        subnetMappings = subnetMappingsDecoded0
    }
}

extension AssociateSubnetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateSubnetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientCapacityException" : self = .insufficientCapacityException(try InsufficientCapacityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTokenException" : self = .invalidTokenException(try InvalidTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AssociateSubnetsOutputError: Swift.Error, Swift.Equatable {
    case insufficientCapacityException(InsufficientCapacityException)
    case internalServerError(InternalServerError)
    case invalidOperationException(InvalidOperationException)
    case invalidRequestException(InvalidRequestException)
    case invalidTokenException(InvalidTokenException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateSubnetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AssociateSubnetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.firewallArn = output.firewallArn
            self.firewallName = output.firewallName
            self.subnetMappings = output.subnetMappings
            self.updateToken = output.updateToken
        } else {
            self.firewallArn = nil
            self.firewallName = nil
            self.subnetMappings = nil
            self.updateToken = nil
        }
    }
}

public struct AssociateSubnetsOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the firewall.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
    public var firewallName: Swift.String?
    /// The IDs of the subnets that are associated with the firewall.
    public var subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init (
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.subnetMappings = subnetMappings
        self.updateToken = updateToken
    }
}

struct AssociateSubnetsOutputResponseBody: Swift.Equatable {
    let firewallArn: Swift.String?
    let firewallName: Swift.String?
    let subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]?
    let updateToken: Swift.String?
}

extension AssociateSubnetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case subnetMappings = "SubnetMappings"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let subnetMappingsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.SubnetMapping?].self, forKey: .subnetMappings)
        var subnetMappingsDecoded0:[NetworkFirewallClientTypes.SubnetMapping]? = nil
        if let subnetMappingsContainer = subnetMappingsContainer {
            subnetMappingsDecoded0 = [NetworkFirewallClientTypes.SubnetMapping]()
            for structure0 in subnetMappingsContainer {
                if let structure0 = structure0 {
                    subnetMappingsDecoded0?.append(structure0)
                }
            }
        }
        subnetMappings = subnetMappingsDecoded0
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
    }
}

extension NetworkFirewallClientTypes.Attachment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointId = "EndpointId"
        case status = "Status"
        case statusMessage = "StatusMessage"
        case subnetId = "SubnetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointId = self.endpointId {
            try encodeContainer.encode(endpointId, forKey: .endpointId)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusMessage = self.statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let subnetId = self.subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let endpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointId)
        endpointId = endpointIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.AttachmentStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// The configuration and status for a single subnet that you've specified for use by the Network Firewall firewall. This is part of the [FirewallStatus].
    public struct Attachment: Swift.Equatable {
        /// The identifier of the firewall endpoint that Network Firewall has instantiated in the subnet. You use this to identify the firewall endpoint in the VPC route tables, when you redirect the VPC traffic through the endpoint.
        public var endpointId: Swift.String?
        /// The current status of the firewall endpoint in the subnet. This value reflects both the instantiation of the endpoint in the VPC subnet and the sync states that are reported in the Config settings. When this value is READY, the endpoint is available and configured properly to handle network traffic. When the endpoint isn't available for traffic, this value will reflect its state, for example CREATING or DELETING.
        public var status: NetworkFirewallClientTypes.AttachmentStatus?
        /// If Network Firewall fails to create or delete the firewall endpoint in the subnet, it populates this with the reason for the failure and how to resolve it. Depending on the error, it can take as many as 15 minutes to populate this field. For more information about the errors and solutions available for this field, see [Troubleshooting firewall endpoint failures](https://docs.aws.amazon.com/network-firewall/latest/developerguide/firewall-troubleshooting-endpoint-failures.html) in the Network Firewall Developer Guide.
        public var statusMessage: Swift.String?
        /// The unique identifier of the subnet that you've specified to be used for a firewall endpoint.
        public var subnetId: Swift.String?

        public init (
            endpointId: Swift.String? = nil,
            status: NetworkFirewallClientTypes.AttachmentStatus? = nil,
            statusMessage: Swift.String? = nil,
            subnetId: Swift.String? = nil
        )
        {
            self.endpointId = endpointId
            self.status = status
            self.statusMessage = statusMessage
            self.subnetId = subnetId
        }
    }

}

extension NetworkFirewallClientTypes {
    public enum AttachmentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creating
        case deleting
        case ready
        case scaling
        case sdkUnknown(Swift.String)

        public static var allCases: [AttachmentStatus] {
            return [
                .creating,
                .deleting,
                .ready,
                .scaling,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .ready: return "READY"
            case .scaling: return "SCALING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AttachmentStatus(rawValue: rawValue) ?? AttachmentStatus.sdkUnknown(rawValue)
        }
    }
}

extension NetworkFirewallClientTypes.CIDRSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availableCIDRCount = "AvailableCIDRCount"
        case ipSetReferences = "IPSetReferences"
        case utilizedCIDRCount = "UtilizedCIDRCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availableCIDRCount = self.availableCIDRCount {
            try encodeContainer.encode(availableCIDRCount, forKey: .availableCIDRCount)
        }
        if let ipSetReferences = ipSetReferences {
            var ipSetReferencesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .ipSetReferences)
            for (dictKey0, ipSetMetadataMap0) in ipSetReferences {
                try ipSetReferencesContainer.encode(ipSetMetadataMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let utilizedCIDRCount = self.utilizedCIDRCount {
            try encodeContainer.encode(utilizedCIDRCount, forKey: .utilizedCIDRCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availableCIDRCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .availableCIDRCount)
        availableCIDRCount = availableCIDRCountDecoded
        let utilizedCIDRCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .utilizedCIDRCount)
        utilizedCIDRCount = utilizedCIDRCountDecoded
        let ipSetReferencesContainer = try containerValues.decodeIfPresent([Swift.String: NetworkFirewallClientTypes.IPSetMetadata?].self, forKey: .ipSetReferences)
        var ipSetReferencesDecoded0: [Swift.String:NetworkFirewallClientTypes.IPSetMetadata]? = nil
        if let ipSetReferencesContainer = ipSetReferencesContainer {
            ipSetReferencesDecoded0 = [Swift.String:NetworkFirewallClientTypes.IPSetMetadata]()
            for (key0, ipsetmetadata0) in ipSetReferencesContainer {
                if let ipsetmetadata0 = ipsetmetadata0 {
                    ipSetReferencesDecoded0?[key0] = ipsetmetadata0
                }
            }
        }
        ipSetReferences = ipSetReferencesDecoded0
    }
}

extension NetworkFirewallClientTypes {
    /// Summarizes the CIDR blocks used by the IP set references in a firewall. Network Firewall calculates the number of CIDRs by taking an aggregated count of all CIDRs used by the IP sets you are referencing.
    public struct CIDRSummary: Swift.Equatable {
        /// The number of CIDR blocks available for use by the IP set references in a firewall.
        public var availableCIDRCount: Swift.Int?
        /// The list of the IP set references used by a firewall.
        public var ipSetReferences: [Swift.String:NetworkFirewallClientTypes.IPSetMetadata]?
        /// The number of CIDR blocks used by the IP set references in a firewall.
        public var utilizedCIDRCount: Swift.Int?

        public init (
            availableCIDRCount: Swift.Int? = nil,
            ipSetReferences: [Swift.String:NetworkFirewallClientTypes.IPSetMetadata]? = nil,
            utilizedCIDRCount: Swift.Int? = nil
        )
        {
            self.availableCIDRCount = availableCIDRCount
            self.ipSetReferences = ipSetReferences
            self.utilizedCIDRCount = utilizedCIDRCount
        }
    }

}

extension NetworkFirewallClientTypes.CapacityUsageSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidRs = "CIDRs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidRs = self.cidRs {
            try encodeContainer.encode(cidRs, forKey: .cidRs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidRsDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.CIDRSummary.self, forKey: .cidRs)
        cidRs = cidRsDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// The capacity usage summary of the resources used by the [ReferenceSets] in a firewall.
    public struct CapacityUsageSummary: Swift.Equatable {
        /// Describes the capacity usage of the CIDR blocks used by the IP set references in a firewall.
        public var cidRs: NetworkFirewallClientTypes.CIDRSummary?

        public init (
            cidRs: NetworkFirewallClientTypes.CIDRSummary? = nil
        )
        {
            self.cidRs = cidRs
        }
    }

}

extension NetworkFirewallClientTypes {
    public enum ConfigurationSyncState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case capacityConstrained
        case inSync
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfigurationSyncState] {
            return [
                .capacityConstrained,
                .inSync,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .capacityConstrained: return "CAPACITY_CONSTRAINED"
            case .inSync: return "IN_SYNC"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConfigurationSyncState(rawValue: rawValue) ?? ConfigurationSyncState.sdkUnknown(rawValue)
        }
    }
}

extension CreateFirewallInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteProtection = "DeleteProtection"
        case description = "Description"
        case encryptionConfiguration = "EncryptionConfiguration"
        case firewallName = "FirewallName"
        case firewallPolicyArn = "FirewallPolicyArn"
        case firewallPolicyChangeProtection = "FirewallPolicyChangeProtection"
        case subnetChangeProtection = "SubnetChangeProtection"
        case subnetMappings = "SubnetMappings"
        case tags = "Tags"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if deleteProtection != false {
            try encodeContainer.encode(deleteProtection, forKey: .deleteProtection)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let encryptionConfiguration = self.encryptionConfiguration {
            try encodeContainer.encode(encryptionConfiguration, forKey: .encryptionConfiguration)
        }
        if let firewallName = self.firewallName {
            try encodeContainer.encode(firewallName, forKey: .firewallName)
        }
        if let firewallPolicyArn = self.firewallPolicyArn {
            try encodeContainer.encode(firewallPolicyArn, forKey: .firewallPolicyArn)
        }
        if firewallPolicyChangeProtection != false {
            try encodeContainer.encode(firewallPolicyChangeProtection, forKey: .firewallPolicyChangeProtection)
        }
        if subnetChangeProtection != false {
            try encodeContainer.encode(subnetChangeProtection, forKey: .subnetChangeProtection)
        }
        if let subnetMappings = subnetMappings {
            var subnetMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetMappings)
            for subnetmapping0 in subnetMappings {
                try subnetMappingsContainer.encode(subnetmapping0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }
}

extension CreateFirewallInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateFirewallInput: Swift.Equatable {
    /// A flag indicating whether it is possible to delete the firewall. A setting of TRUE indicates that the firewall is protected against deletion. Use this setting to protect against accidentally deleting a firewall that is in use. When you create a firewall, the operation initializes this flag to TRUE.
    public var deleteProtection: Swift.Bool
    /// A description of the firewall.
    public var description: Swift.String?
    /// A complex type that contains settings for encryption of your firewall resources.
    public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
    /// This member is required.
    public var firewallName: Swift.String?
    /// The Amazon Resource Name (ARN) of the [FirewallPolicy] that you want to use for the firewall.
    /// This member is required.
    public var firewallPolicyArn: Swift.String?
    /// A setting indicating whether the firewall is protected against a change to the firewall policy association. Use this setting to protect against accidentally modifying the firewall policy for a firewall that is in use. When you create a firewall, the operation initializes this setting to TRUE.
    public var firewallPolicyChangeProtection: Swift.Bool
    /// A setting indicating whether the firewall is protected against changes to the subnet associations. Use this setting to protect against accidentally modifying the subnet associations for a firewall that is in use. When you create a firewall, the operation initializes this setting to TRUE.
    public var subnetChangeProtection: Swift.Bool
    /// The public subnets to use for your Network Firewall firewalls. Each subnet must belong to a different Availability Zone in the VPC. Network Firewall creates a firewall endpoint in each subnet.
    /// This member is required.
    public var subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]?
    /// The key:value pairs to associate with the resource.
    public var tags: [NetworkFirewallClientTypes.Tag]?
    /// The unique identifier of the VPC where Network Firewall should create the firewall. You can't change this setting after you create the firewall.
    /// This member is required.
    public var vpcId: Swift.String?

    public init (
        deleteProtection: Swift.Bool = false,
        description: Swift.String? = nil,
        encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
        firewallName: Swift.String? = nil,
        firewallPolicyArn: Swift.String? = nil,
        firewallPolicyChangeProtection: Swift.Bool = false,
        subnetChangeProtection: Swift.Bool = false,
        subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]? = nil,
        tags: [NetworkFirewallClientTypes.Tag]? = nil,
        vpcId: Swift.String? = nil
    )
    {
        self.deleteProtection = deleteProtection
        self.description = description
        self.encryptionConfiguration = encryptionConfiguration
        self.firewallName = firewallName
        self.firewallPolicyArn = firewallPolicyArn
        self.firewallPolicyChangeProtection = firewallPolicyChangeProtection
        self.subnetChangeProtection = subnetChangeProtection
        self.subnetMappings = subnetMappings
        self.tags = tags
        self.vpcId = vpcId
    }
}

struct CreateFirewallInputBody: Swift.Equatable {
    let firewallName: Swift.String?
    let firewallPolicyArn: Swift.String?
    let vpcId: Swift.String?
    let subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]?
    let deleteProtection: Swift.Bool
    let subnetChangeProtection: Swift.Bool
    let firewallPolicyChangeProtection: Swift.Bool
    let description: Swift.String?
    let tags: [NetworkFirewallClientTypes.Tag]?
    let encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
}

extension CreateFirewallInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteProtection = "DeleteProtection"
        case description = "Description"
        case encryptionConfiguration = "EncryptionConfiguration"
        case firewallName = "FirewallName"
        case firewallPolicyArn = "FirewallPolicyArn"
        case firewallPolicyChangeProtection = "FirewallPolicyChangeProtection"
        case subnetChangeProtection = "SubnetChangeProtection"
        case subnetMappings = "SubnetMappings"
        case tags = "Tags"
        case vpcId = "VpcId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let firewallPolicyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallPolicyArn)
        firewallPolicyArn = firewallPolicyArnDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetMappingsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.SubnetMapping?].self, forKey: .subnetMappings)
        var subnetMappingsDecoded0:[NetworkFirewallClientTypes.SubnetMapping]? = nil
        if let subnetMappingsContainer = subnetMappingsContainer {
            subnetMappingsDecoded0 = [NetworkFirewallClientTypes.SubnetMapping]()
            for structure0 in subnetMappingsContainer {
                if let structure0 = structure0 {
                    subnetMappingsDecoded0?.append(structure0)
                }
            }
        }
        subnetMappings = subnetMappingsDecoded0
        let deleteProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteProtection) ?? false
        deleteProtection = deleteProtectionDecoded
        let subnetChangeProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .subnetChangeProtection) ?? false
        subnetChangeProtection = subnetChangeProtectionDecoded
        let firewallPolicyChangeProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .firewallPolicyChangeProtection) ?? false
        firewallPolicyChangeProtection = firewallPolicyChangeProtectionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[NetworkFirewallClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [NetworkFirewallClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
    }
}

extension CreateFirewallOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateFirewallOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientCapacityException" : self = .insufficientCapacityException(try InsufficientCapacityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateFirewallOutputError: Swift.Error, Swift.Equatable {
    case insufficientCapacityException(InsufficientCapacityException)
    case internalServerError(InternalServerError)
    case invalidOperationException(InvalidOperationException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateFirewallOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateFirewallOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.firewall = output.firewall
            self.firewallStatus = output.firewallStatus
        } else {
            self.firewall = nil
            self.firewallStatus = nil
        }
    }
}

public struct CreateFirewallOutputResponse: Swift.Equatable {
    /// The configuration settings for the firewall. These settings include the firewall policy and the subnets in your VPC to use for the firewall endpoints.
    public var firewall: NetworkFirewallClientTypes.Firewall?
    /// Detailed information about the current status of a [Firewall]. You can retrieve this for a firewall by calling [DescribeFirewall] and providing the firewall name and ARN.
    public var firewallStatus: NetworkFirewallClientTypes.FirewallStatus?

    public init (
        firewall: NetworkFirewallClientTypes.Firewall? = nil,
        firewallStatus: NetworkFirewallClientTypes.FirewallStatus? = nil
    )
    {
        self.firewall = firewall
        self.firewallStatus = firewallStatus
    }
}

struct CreateFirewallOutputResponseBody: Swift.Equatable {
    let firewall: NetworkFirewallClientTypes.Firewall?
    let firewallStatus: NetworkFirewallClientTypes.FirewallStatus?
}

extension CreateFirewallOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewall = "Firewall"
        case firewallStatus = "FirewallStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.Firewall.self, forKey: .firewall)
        firewall = firewallDecoded
        let firewallStatusDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.FirewallStatus.self, forKey: .firewallStatus)
        firewallStatus = firewallStatusDecoded
    }
}

extension CreateFirewallPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case dryRun = "DryRun"
        case encryptionConfiguration = "EncryptionConfiguration"
        case firewallPolicy = "FirewallPolicy"
        case firewallPolicyName = "FirewallPolicyName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if dryRun != false {
            try encodeContainer.encode(dryRun, forKey: .dryRun)
        }
        if let encryptionConfiguration = self.encryptionConfiguration {
            try encodeContainer.encode(encryptionConfiguration, forKey: .encryptionConfiguration)
        }
        if let firewallPolicy = self.firewallPolicy {
            try encodeContainer.encode(firewallPolicy, forKey: .firewallPolicy)
        }
        if let firewallPolicyName = self.firewallPolicyName {
            try encodeContainer.encode(firewallPolicyName, forKey: .firewallPolicyName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateFirewallPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateFirewallPolicyInput: Swift.Equatable {
    /// A description of the firewall policy.
    public var description: Swift.String?
    /// Indicates whether you want Network Firewall to just check the validity of the request, rather than run the request. If set to TRUE, Network Firewall checks whether the request can run successfully, but doesn't actually make the requested changes. The call returns the value that the request would return if you ran it with dry run set to FALSE, but doesn't make additions or changes to your resources. This option allows you to make sure that you have the required permissions to run the request and that your request parameters are valid. If set to FALSE, Network Firewall makes the requested changes to your resources.
    public var dryRun: Swift.Bool
    /// A complex type that contains settings for encryption of your firewall policy resources.
    public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
    /// The rule groups and policy actions to use in the firewall policy.
    /// This member is required.
    public var firewallPolicy: NetworkFirewallClientTypes.FirewallPolicy?
    /// The descriptive name of the firewall policy. You can't change the name of a firewall policy after you create it.
    /// This member is required.
    public var firewallPolicyName: Swift.String?
    /// The key:value pairs to associate with the resource.
    public var tags: [NetworkFirewallClientTypes.Tag]?

    public init (
        description: Swift.String? = nil,
        dryRun: Swift.Bool = false,
        encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
        firewallPolicy: NetworkFirewallClientTypes.FirewallPolicy? = nil,
        firewallPolicyName: Swift.String? = nil,
        tags: [NetworkFirewallClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.dryRun = dryRun
        self.encryptionConfiguration = encryptionConfiguration
        self.firewallPolicy = firewallPolicy
        self.firewallPolicyName = firewallPolicyName
        self.tags = tags
    }
}

struct CreateFirewallPolicyInputBody: Swift.Equatable {
    let firewallPolicyName: Swift.String?
    let firewallPolicy: NetworkFirewallClientTypes.FirewallPolicy?
    let description: Swift.String?
    let tags: [NetworkFirewallClientTypes.Tag]?
    let dryRun: Swift.Bool
    let encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
}

extension CreateFirewallPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case dryRun = "DryRun"
        case encryptionConfiguration = "EncryptionConfiguration"
        case firewallPolicy = "FirewallPolicy"
        case firewallPolicyName = "FirewallPolicyName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallPolicyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallPolicyName)
        firewallPolicyName = firewallPolicyNameDecoded
        let firewallPolicyDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.FirewallPolicy.self, forKey: .firewallPolicy)
        firewallPolicy = firewallPolicyDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[NetworkFirewallClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [NetworkFirewallClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun) ?? false
        dryRun = dryRunDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
    }
}

extension CreateFirewallPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateFirewallPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientCapacityException" : self = .insufficientCapacityException(try InsufficientCapacityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateFirewallPolicyOutputError: Swift.Error, Swift.Equatable {
    case insufficientCapacityException(InsufficientCapacityException)
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateFirewallPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateFirewallPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.firewallPolicyResponse = output.firewallPolicyResponse
            self.updateToken = output.updateToken
        } else {
            self.firewallPolicyResponse = nil
            self.updateToken = nil
        }
    }
}

public struct CreateFirewallPolicyOutputResponse: Swift.Equatable {
    /// The high-level properties of a firewall policy. This, along with the [FirewallPolicy], define the policy. You can retrieve all objects for a firewall policy by calling [DescribeFirewallPolicy].
    /// This member is required.
    public var firewallPolicyResponse: NetworkFirewallClientTypes.FirewallPolicyResponse?
    /// A token used for optimistic locking. Network Firewall returns a token to your requests that access the firewall policy. The token marks the state of the policy resource at the time of the request. To make changes to the policy, you provide the token in your request. Network Firewall uses the token to ensure that the policy hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall policy again to get a current copy of it with current token. Reapply your changes as needed, then try the operation again using the new token.
    /// This member is required.
    public var updateToken: Swift.String?

    public init (
        firewallPolicyResponse: NetworkFirewallClientTypes.FirewallPolicyResponse? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallPolicyResponse = firewallPolicyResponse
        self.updateToken = updateToken
    }
}

struct CreateFirewallPolicyOutputResponseBody: Swift.Equatable {
    let updateToken: Swift.String?
    let firewallPolicyResponse: NetworkFirewallClientTypes.FirewallPolicyResponse?
}

extension CreateFirewallPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallPolicyResponse = "FirewallPolicyResponse"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
        let firewallPolicyResponseDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.FirewallPolicyResponse.self, forKey: .firewallPolicyResponse)
        firewallPolicyResponse = firewallPolicyResponseDecoded
    }
}

extension CreateRuleGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacity = "Capacity"
        case description = "Description"
        case dryRun = "DryRun"
        case encryptionConfiguration = "EncryptionConfiguration"
        case ruleGroup = "RuleGroup"
        case ruleGroupName = "RuleGroupName"
        case rules = "Rules"
        case sourceMetadata = "SourceMetadata"
        case tags = "Tags"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacity = self.capacity {
            try encodeContainer.encode(capacity, forKey: .capacity)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if dryRun != false {
            try encodeContainer.encode(dryRun, forKey: .dryRun)
        }
        if let encryptionConfiguration = self.encryptionConfiguration {
            try encodeContainer.encode(encryptionConfiguration, forKey: .encryptionConfiguration)
        }
        if let ruleGroup = self.ruleGroup {
            try encodeContainer.encode(ruleGroup, forKey: .ruleGroup)
        }
        if let ruleGroupName = self.ruleGroupName {
            try encodeContainer.encode(ruleGroupName, forKey: .ruleGroupName)
        }
        if let rules = self.rules {
            try encodeContainer.encode(rules, forKey: .rules)
        }
        if let sourceMetadata = self.sourceMetadata {
            try encodeContainer.encode(sourceMetadata, forKey: .sourceMetadata)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

extension CreateRuleGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateRuleGroupInput: Swift.Equatable {
    /// The maximum operating resources that this rule group can use. Rule group capacity is fixed at creation. When you update a rule group, you are limited to this capacity. When you reference a rule group from a firewall policy, Network Firewall reserves this capacity for the rule group. You can retrieve the capacity that would be required for a rule group before you create the rule group by calling [CreateRuleGroup] with DryRun set to TRUE. You can't change or exceed this capacity when you update the rule group, so leave room for your rule group to grow. Capacity for a stateless rule group For a stateless rule group, the capacity required is the sum of the capacity requirements of the individual rules that you expect to have in the rule group. To calculate the capacity requirement of a single rule, multiply the capacity requirement values of each of the rule's match settings:
    ///
    /// * A match setting with no criteria specified has a value of 1.
    ///
    /// * A match setting with Any specified has a value of 1.
    ///
    /// * All other match settings have a value equal to the number of elements provided in the setting. For example, a protocol setting ["UDP"] and a source setting ["10.0.0.0/24"] each have a value of 1. A protocol setting ["UDP","TCP"] has a value of 2. A source setting ["10.0.0.0/24","10.0.0.1/24","10.0.0.2/24"] has a value of 3.
    ///
    ///
    /// A rule with no criteria specified in any of its match settings has a capacity requirement of 1. A rule with protocol setting ["UDP","TCP"], source setting ["10.0.0.0/24","10.0.0.1/24","10.0.0.2/24"], and a single specification or no specification for each of the other match settings has a capacity requirement of 6. Capacity for a stateful rule group For a stateful rule group, the minimum capacity required is the number of individual rules that you expect to have in the rule group.
    /// This member is required.
    public var capacity: Swift.Int?
    /// A description of the rule group.
    public var description: Swift.String?
    /// Indicates whether you want Network Firewall to just check the validity of the request, rather than run the request. If set to TRUE, Network Firewall checks whether the request can run successfully, but doesn't actually make the requested changes. The call returns the value that the request would return if you ran it with dry run set to FALSE, but doesn't make additions or changes to your resources. This option allows you to make sure that you have the required permissions to run the request and that your request parameters are valid. If set to FALSE, Network Firewall makes the requested changes to your resources.
    public var dryRun: Swift.Bool
    /// A complex type that contains settings for encryption of your rule group resources.
    public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
    /// An object that defines the rule group rules. You must provide either this rule group setting or a Rules setting, but not both.
    public var ruleGroup: NetworkFirewallClientTypes.RuleGroup?
    /// The descriptive name of the rule group. You can't change the name of a rule group after you create it.
    /// This member is required.
    public var ruleGroupName: Swift.String?
    /// A string containing stateful rule group rules specifications in Suricata flat format, with one rule per line. Use this to import your existing Suricata compatible rule groups. You must provide either this rules setting or a populated RuleGroup setting, but not both. You can provide your rule group specification in Suricata flat format through this setting when you create or update your rule group. The call response returns a [RuleGroup] object that Network Firewall has populated from your string.
    public var rules: Swift.String?
    /// A complex type that contains metadata about the rule group that your own rule group is copied from. You can use the metadata to keep track of updates made to the originating rule group.
    public var sourceMetadata: NetworkFirewallClientTypes.SourceMetadata?
    /// The key:value pairs to associate with the resource.
    public var tags: [NetworkFirewallClientTypes.Tag]?
    /// Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules.
    /// This member is required.
    public var type: NetworkFirewallClientTypes.RuleGroupType?

    public init (
        capacity: Swift.Int? = nil,
        description: Swift.String? = nil,
        dryRun: Swift.Bool = false,
        encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
        ruleGroup: NetworkFirewallClientTypes.RuleGroup? = nil,
        ruleGroupName: Swift.String? = nil,
        rules: Swift.String? = nil,
        sourceMetadata: NetworkFirewallClientTypes.SourceMetadata? = nil,
        tags: [NetworkFirewallClientTypes.Tag]? = nil,
        type: NetworkFirewallClientTypes.RuleGroupType? = nil
    )
    {
        self.capacity = capacity
        self.description = description
        self.dryRun = dryRun
        self.encryptionConfiguration = encryptionConfiguration
        self.ruleGroup = ruleGroup
        self.ruleGroupName = ruleGroupName
        self.rules = rules
        self.sourceMetadata = sourceMetadata
        self.tags = tags
        self.type = type
    }
}

struct CreateRuleGroupInputBody: Swift.Equatable {
    let ruleGroupName: Swift.String?
    let ruleGroup: NetworkFirewallClientTypes.RuleGroup?
    let rules: Swift.String?
    let type: NetworkFirewallClientTypes.RuleGroupType?
    let description: Swift.String?
    let capacity: Swift.Int?
    let tags: [NetworkFirewallClientTypes.Tag]?
    let dryRun: Swift.Bool
    let encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
    let sourceMetadata: NetworkFirewallClientTypes.SourceMetadata?
}

extension CreateRuleGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacity = "Capacity"
        case description = "Description"
        case dryRun = "DryRun"
        case encryptionConfiguration = "EncryptionConfiguration"
        case ruleGroup = "RuleGroup"
        case ruleGroupName = "RuleGroupName"
        case rules = "Rules"
        case sourceMetadata = "SourceMetadata"
        case tags = "Tags"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupName)
        ruleGroupName = ruleGroupNameDecoded
        let ruleGroupDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RuleGroup.self, forKey: .ruleGroup)
        ruleGroup = ruleGroupDecoded
        let rulesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rules)
        rules = rulesDecoded
        let typeDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RuleGroupType.self, forKey: .type)
        type = typeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let capacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .capacity)
        capacity = capacityDecoded
        let tagsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[NetworkFirewallClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [NetworkFirewallClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun) ?? false
        dryRun = dryRunDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
        let sourceMetadataDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.SourceMetadata.self, forKey: .sourceMetadata)
        sourceMetadata = sourceMetadataDecoded
    }
}

extension CreateRuleGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRuleGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientCapacityException" : self = .insufficientCapacityException(try InsufficientCapacityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateRuleGroupOutputError: Swift.Error, Swift.Equatable {
    case insufficientCapacityException(InsufficientCapacityException)
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRuleGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateRuleGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.ruleGroupResponse = output.ruleGroupResponse
            self.updateToken = output.updateToken
        } else {
            self.ruleGroupResponse = nil
            self.updateToken = nil
        }
    }
}

public struct CreateRuleGroupOutputResponse: Swift.Equatable {
    /// The high-level properties of a rule group. This, along with the [RuleGroup], define the rule group. You can retrieve all objects for a rule group by calling [DescribeRuleGroup].
    /// This member is required.
    public var ruleGroupResponse: NetworkFirewallClientTypes.RuleGroupResponse?
    /// A token used for optimistic locking. Network Firewall returns a token to your requests that access the rule group. The token marks the state of the rule group resource at the time of the request. To make changes to the rule group, you provide the token in your request. Network Firewall uses the token to ensure that the rule group hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the rule group again to get a current copy of it with a current token. Reapply your changes as needed, then try the operation again using the new token.
    /// This member is required.
    public var updateToken: Swift.String?

    public init (
        ruleGroupResponse: NetworkFirewallClientTypes.RuleGroupResponse? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.ruleGroupResponse = ruleGroupResponse
        self.updateToken = updateToken
    }
}

struct CreateRuleGroupOutputResponseBody: Swift.Equatable {
    let updateToken: Swift.String?
    let ruleGroupResponse: NetworkFirewallClientTypes.RuleGroupResponse?
}

extension CreateRuleGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleGroupResponse = "RuleGroupResponse"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
        let ruleGroupResponseDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RuleGroupResponse.self, forKey: .ruleGroupResponse)
        ruleGroupResponse = ruleGroupResponseDecoded
    }
}

extension NetworkFirewallClientTypes.CustomAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionDefinition = "ActionDefinition"
        case actionName = "ActionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionDefinition = self.actionDefinition {
            try encodeContainer.encode(actionDefinition, forKey: .actionDefinition)
        }
        if let actionName = self.actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let actionDefinitionDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.ActionDefinition.self, forKey: .actionDefinition)
        actionDefinition = actionDefinitionDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// An optional, non-standard action to use for stateless packet handling. You can define this in addition to the standard action that you must specify. You define and name the custom actions that you want to be able to use, and then you reference them by name in your actions settings. You can use custom actions in the following places:
    ///
    /// * In a rule group's [StatelessRulesAndCustomActions] specification. The custom actions are available for use by name inside the StatelessRulesAndCustomActions where you define them. You can use them for your stateless rule actions to specify what to do with a packet that matches the rule's match attributes.
    ///
    /// * In a [FirewallPolicy] specification, in StatelessCustomActions. The custom actions are available for use inside the policy where you define them. You can use them for the policy's default stateless actions settings to specify what to do with packets that don't match any of the policy's stateless rules.
    public struct CustomAction: Swift.Equatable {
        /// The custom action associated with the action name.
        /// This member is required.
        public var actionDefinition: NetworkFirewallClientTypes.ActionDefinition?
        /// The descriptive name of the custom action. You can't change the name of a custom action after you create it.
        /// This member is required.
        public var actionName: Swift.String?

        public init (
            actionDefinition: NetworkFirewallClientTypes.ActionDefinition? = nil,
            actionName: Swift.String? = nil
        )
        {
            self.actionDefinition = actionDefinition
            self.actionName = actionName
        }
    }

}

extension DeleteFirewallInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let firewallArn = self.firewallArn {
            try encodeContainer.encode(firewallArn, forKey: .firewallArn)
        }
        if let firewallName = self.firewallName {
            try encodeContainer.encode(firewallName, forKey: .firewallName)
        }
    }
}

extension DeleteFirewallInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteFirewallInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the firewall. You must specify the ARN or the name, and you can specify both.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallName: Swift.String?

    public init (
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
    }
}

struct DeleteFirewallInputBody: Swift.Equatable {
    let firewallName: Swift.String?
    let firewallArn: Swift.String?
}

extension DeleteFirewallInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
    }
}

extension DeleteFirewallOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteFirewallOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteFirewallOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidOperationException(InvalidOperationException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteFirewallOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteFirewallOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.firewall = output.firewall
            self.firewallStatus = output.firewallStatus
        } else {
            self.firewall = nil
            self.firewallStatus = nil
        }
    }
}

public struct DeleteFirewallOutputResponse: Swift.Equatable {
    /// The firewall defines the configuration settings for an Network Firewall firewall. These settings include the firewall policy, the subnets in your VPC to use for the firewall endpoints, and any tags that are attached to the firewall Amazon Web Services resource. The status of the firewall, for example whether it's ready to filter network traffic, is provided in the corresponding [FirewallStatus]. You can retrieve both objects by calling [DescribeFirewall].
    public var firewall: NetworkFirewallClientTypes.Firewall?
    /// Detailed information about the current status of a [Firewall]. You can retrieve this for a firewall by calling [DescribeFirewall] and providing the firewall name and ARN.
    public var firewallStatus: NetworkFirewallClientTypes.FirewallStatus?

    public init (
        firewall: NetworkFirewallClientTypes.Firewall? = nil,
        firewallStatus: NetworkFirewallClientTypes.FirewallStatus? = nil
    )
    {
        self.firewall = firewall
        self.firewallStatus = firewallStatus
    }
}

struct DeleteFirewallOutputResponseBody: Swift.Equatable {
    let firewall: NetworkFirewallClientTypes.Firewall?
    let firewallStatus: NetworkFirewallClientTypes.FirewallStatus?
}

extension DeleteFirewallOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewall = "Firewall"
        case firewallStatus = "FirewallStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.Firewall.self, forKey: .firewall)
        firewall = firewallDecoded
        let firewallStatusDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.FirewallStatus.self, forKey: .firewallStatus)
        firewallStatus = firewallStatusDecoded
    }
}

extension DeleteFirewallPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallPolicyArn = "FirewallPolicyArn"
        case firewallPolicyName = "FirewallPolicyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let firewallPolicyArn = self.firewallPolicyArn {
            try encodeContainer.encode(firewallPolicyArn, forKey: .firewallPolicyArn)
        }
        if let firewallPolicyName = self.firewallPolicyName {
            try encodeContainer.encode(firewallPolicyName, forKey: .firewallPolicyName)
        }
    }
}

extension DeleteFirewallPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteFirewallPolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the firewall policy. You must specify the ARN or the name, and you can specify both.
    public var firewallPolicyArn: Swift.String?
    /// The descriptive name of the firewall policy. You can't change the name of a firewall policy after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallPolicyName: Swift.String?

    public init (
        firewallPolicyArn: Swift.String? = nil,
        firewallPolicyName: Swift.String? = nil
    )
    {
        self.firewallPolicyArn = firewallPolicyArn
        self.firewallPolicyName = firewallPolicyName
    }
}

struct DeleteFirewallPolicyInputBody: Swift.Equatable {
    let firewallPolicyName: Swift.String?
    let firewallPolicyArn: Swift.String?
}

extension DeleteFirewallPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallPolicyArn = "FirewallPolicyArn"
        case firewallPolicyName = "FirewallPolicyName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallPolicyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallPolicyName)
        firewallPolicyName = firewallPolicyNameDecoded
        let firewallPolicyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallPolicyArn)
        firewallPolicyArn = firewallPolicyArnDecoded
    }
}

extension DeleteFirewallPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteFirewallPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteFirewallPolicyOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidOperationException(InvalidOperationException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteFirewallPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteFirewallPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.firewallPolicyResponse = output.firewallPolicyResponse
        } else {
            self.firewallPolicyResponse = nil
        }
    }
}

public struct DeleteFirewallPolicyOutputResponse: Swift.Equatable {
    /// The object containing the definition of the [FirewallPolicyResponse] that you asked to delete.
    /// This member is required.
    public var firewallPolicyResponse: NetworkFirewallClientTypes.FirewallPolicyResponse?

    public init (
        firewallPolicyResponse: NetworkFirewallClientTypes.FirewallPolicyResponse? = nil
    )
    {
        self.firewallPolicyResponse = firewallPolicyResponse
    }
}

struct DeleteFirewallPolicyOutputResponseBody: Swift.Equatable {
    let firewallPolicyResponse: NetworkFirewallClientTypes.FirewallPolicyResponse?
}

extension DeleteFirewallPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallPolicyResponse = "FirewallPolicyResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallPolicyResponseDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.FirewallPolicyResponse.self, forKey: .firewallPolicyResponse)
        firewallPolicyResponse = firewallPolicyResponseDecoded
    }
}

extension DeleteResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension DeleteResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteResourcePolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the rule group or firewall policy whose resource policy you want to delete.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct DeleteResourcePolicyInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension DeleteResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension DeleteResourcePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteResourcePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidResourcePolicyException" : self = .invalidResourcePolicyException(try InvalidResourcePolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteResourcePolicyOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case invalidResourcePolicyException(InvalidResourcePolicyException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteResourcePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteResourcePolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteRuleGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleGroupArn = "RuleGroupArn"
        case ruleGroupName = "RuleGroupName"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ruleGroupArn = self.ruleGroupArn {
            try encodeContainer.encode(ruleGroupArn, forKey: .ruleGroupArn)
        }
        if let ruleGroupName = self.ruleGroupName {
            try encodeContainer.encode(ruleGroupName, forKey: .ruleGroupName)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

extension DeleteRuleGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteRuleGroupInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the rule group. You must specify the ARN or the name, and you can specify both.
    public var ruleGroupArn: Swift.String?
    /// The descriptive name of the rule group. You can't change the name of a rule group after you create it. You must specify the ARN or the name, and you can specify both.
    public var ruleGroupName: Swift.String?
    /// Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules. This setting is required for requests that do not include the RuleGroupARN.
    public var type: NetworkFirewallClientTypes.RuleGroupType?

    public init (
        ruleGroupArn: Swift.String? = nil,
        ruleGroupName: Swift.String? = nil,
        type: NetworkFirewallClientTypes.RuleGroupType? = nil
    )
    {
        self.ruleGroupArn = ruleGroupArn
        self.ruleGroupName = ruleGroupName
        self.type = type
    }
}

struct DeleteRuleGroupInputBody: Swift.Equatable {
    let ruleGroupName: Swift.String?
    let ruleGroupArn: Swift.String?
    let type: NetworkFirewallClientTypes.RuleGroupType?
}

extension DeleteRuleGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleGroupArn = "RuleGroupArn"
        case ruleGroupName = "RuleGroupName"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupName)
        ruleGroupName = ruleGroupNameDecoded
        let ruleGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupArn)
        ruleGroupArn = ruleGroupArnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RuleGroupType.self, forKey: .type)
        type = typeDecoded
    }
}

extension DeleteRuleGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRuleGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteRuleGroupOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidOperationException(InvalidOperationException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRuleGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteRuleGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.ruleGroupResponse = output.ruleGroupResponse
        } else {
            self.ruleGroupResponse = nil
        }
    }
}

public struct DeleteRuleGroupOutputResponse: Swift.Equatable {
    /// The high-level properties of a rule group. This, along with the [RuleGroup], define the rule group. You can retrieve all objects for a rule group by calling [DescribeRuleGroup].
    /// This member is required.
    public var ruleGroupResponse: NetworkFirewallClientTypes.RuleGroupResponse?

    public init (
        ruleGroupResponse: NetworkFirewallClientTypes.RuleGroupResponse? = nil
    )
    {
        self.ruleGroupResponse = ruleGroupResponse
    }
}

struct DeleteRuleGroupOutputResponseBody: Swift.Equatable {
    let ruleGroupResponse: NetworkFirewallClientTypes.RuleGroupResponse?
}

extension DeleteRuleGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleGroupResponse = "RuleGroupResponse"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleGroupResponseDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RuleGroupResponse.self, forKey: .ruleGroupResponse)
        ruleGroupResponse = ruleGroupResponseDecoded
    }
}

extension DescribeFirewallInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let firewallArn = self.firewallArn {
            try encodeContainer.encode(firewallArn, forKey: .firewallArn)
        }
        if let firewallName = self.firewallName {
            try encodeContainer.encode(firewallName, forKey: .firewallName)
        }
    }
}

extension DescribeFirewallInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeFirewallInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the firewall. You must specify the ARN or the name, and you can specify both.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallName: Swift.String?

    public init (
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
    }
}

struct DescribeFirewallInputBody: Swift.Equatable {
    let firewallName: Swift.String?
    let firewallArn: Swift.String?
}

extension DescribeFirewallInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
    }
}

extension DescribeFirewallOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFirewallOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeFirewallOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFirewallOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeFirewallOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.firewall = output.firewall
            self.firewallStatus = output.firewallStatus
            self.updateToken = output.updateToken
        } else {
            self.firewall = nil
            self.firewallStatus = nil
            self.updateToken = nil
        }
    }
}

public struct DescribeFirewallOutputResponse: Swift.Equatable {
    /// The configuration settings for the firewall. These settings include the firewall policy and the subnets in your VPC to use for the firewall endpoints.
    public var firewall: NetworkFirewallClientTypes.Firewall?
    /// Detailed information about the current status of a [Firewall]. You can retrieve this for a firewall by calling [DescribeFirewall] and providing the firewall name and ARN.
    public var firewallStatus: NetworkFirewallClientTypes.FirewallStatus?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init (
        firewall: NetworkFirewallClientTypes.Firewall? = nil,
        firewallStatus: NetworkFirewallClientTypes.FirewallStatus? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.firewall = firewall
        self.firewallStatus = firewallStatus
        self.updateToken = updateToken
    }
}

struct DescribeFirewallOutputResponseBody: Swift.Equatable {
    let updateToken: Swift.String?
    let firewall: NetworkFirewallClientTypes.Firewall?
    let firewallStatus: NetworkFirewallClientTypes.FirewallStatus?
}

extension DescribeFirewallOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewall = "Firewall"
        case firewallStatus = "FirewallStatus"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
        let firewallDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.Firewall.self, forKey: .firewall)
        firewall = firewallDecoded
        let firewallStatusDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.FirewallStatus.self, forKey: .firewallStatus)
        firewallStatus = firewallStatusDecoded
    }
}

extension DescribeFirewallPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallPolicyArn = "FirewallPolicyArn"
        case firewallPolicyName = "FirewallPolicyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let firewallPolicyArn = self.firewallPolicyArn {
            try encodeContainer.encode(firewallPolicyArn, forKey: .firewallPolicyArn)
        }
        if let firewallPolicyName = self.firewallPolicyName {
            try encodeContainer.encode(firewallPolicyName, forKey: .firewallPolicyName)
        }
    }
}

extension DescribeFirewallPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeFirewallPolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the firewall policy. You must specify the ARN or the name, and you can specify both.
    public var firewallPolicyArn: Swift.String?
    /// The descriptive name of the firewall policy. You can't change the name of a firewall policy after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallPolicyName: Swift.String?

    public init (
        firewallPolicyArn: Swift.String? = nil,
        firewallPolicyName: Swift.String? = nil
    )
    {
        self.firewallPolicyArn = firewallPolicyArn
        self.firewallPolicyName = firewallPolicyName
    }
}

struct DescribeFirewallPolicyInputBody: Swift.Equatable {
    let firewallPolicyName: Swift.String?
    let firewallPolicyArn: Swift.String?
}

extension DescribeFirewallPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallPolicyArn = "FirewallPolicyArn"
        case firewallPolicyName = "FirewallPolicyName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallPolicyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallPolicyName)
        firewallPolicyName = firewallPolicyNameDecoded
        let firewallPolicyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallPolicyArn)
        firewallPolicyArn = firewallPolicyArnDecoded
    }
}

extension DescribeFirewallPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFirewallPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeFirewallPolicyOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFirewallPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeFirewallPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.firewallPolicy = output.firewallPolicy
            self.firewallPolicyResponse = output.firewallPolicyResponse
            self.updateToken = output.updateToken
        } else {
            self.firewallPolicy = nil
            self.firewallPolicyResponse = nil
            self.updateToken = nil
        }
    }
}

public struct DescribeFirewallPolicyOutputResponse: Swift.Equatable {
    /// The policy for the specified firewall policy.
    public var firewallPolicy: NetworkFirewallClientTypes.FirewallPolicy?
    /// The high-level properties of a firewall policy. This, along with the [FirewallPolicy], define the policy. You can retrieve all objects for a firewall policy by calling [DescribeFirewallPolicy].
    /// This member is required.
    public var firewallPolicyResponse: NetworkFirewallClientTypes.FirewallPolicyResponse?
    /// A token used for optimistic locking. Network Firewall returns a token to your requests that access the firewall policy. The token marks the state of the policy resource at the time of the request. To make changes to the policy, you provide the token in your request. Network Firewall uses the token to ensure that the policy hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall policy again to get a current copy of it with current token. Reapply your changes as needed, then try the operation again using the new token.
    /// This member is required.
    public var updateToken: Swift.String?

    public init (
        firewallPolicy: NetworkFirewallClientTypes.FirewallPolicy? = nil,
        firewallPolicyResponse: NetworkFirewallClientTypes.FirewallPolicyResponse? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallPolicy = firewallPolicy
        self.firewallPolicyResponse = firewallPolicyResponse
        self.updateToken = updateToken
    }
}

struct DescribeFirewallPolicyOutputResponseBody: Swift.Equatable {
    let updateToken: Swift.String?
    let firewallPolicyResponse: NetworkFirewallClientTypes.FirewallPolicyResponse?
    let firewallPolicy: NetworkFirewallClientTypes.FirewallPolicy?
}

extension DescribeFirewallPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallPolicy = "FirewallPolicy"
        case firewallPolicyResponse = "FirewallPolicyResponse"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
        let firewallPolicyResponseDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.FirewallPolicyResponse.self, forKey: .firewallPolicyResponse)
        firewallPolicyResponse = firewallPolicyResponseDecoded
        let firewallPolicyDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.FirewallPolicy.self, forKey: .firewallPolicy)
        firewallPolicy = firewallPolicyDecoded
    }
}

extension DescribeLoggingConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let firewallArn = self.firewallArn {
            try encodeContainer.encode(firewallArn, forKey: .firewallArn)
        }
        if let firewallName = self.firewallName {
            try encodeContainer.encode(firewallName, forKey: .firewallName)
        }
    }
}

extension DescribeLoggingConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLoggingConfigurationInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the firewall. You must specify the ARN or the name, and you can specify both.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallName: Swift.String?

    public init (
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
    }
}

struct DescribeLoggingConfigurationInputBody: Swift.Equatable {
    let firewallArn: Swift.String?
    let firewallName: Swift.String?
}

extension DescribeLoggingConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
    }
}

extension DescribeLoggingConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLoggingConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeLoggingConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLoggingConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeLoggingConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.firewallArn = output.firewallArn
            self.loggingConfiguration = output.loggingConfiguration
        } else {
            self.firewallArn = nil
            self.loggingConfiguration = nil
        }
    }
}

public struct DescribeLoggingConfigurationOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the firewall.
    public var firewallArn: Swift.String?
    /// Defines how Network Firewall performs logging for a [Firewall].
    public var loggingConfiguration: NetworkFirewallClientTypes.LoggingConfiguration?

    public init (
        firewallArn: Swift.String? = nil,
        loggingConfiguration: NetworkFirewallClientTypes.LoggingConfiguration? = nil
    )
    {
        self.firewallArn = firewallArn
        self.loggingConfiguration = loggingConfiguration
    }
}

struct DescribeLoggingConfigurationOutputResponseBody: Swift.Equatable {
    let firewallArn: Swift.String?
    let loggingConfiguration: NetworkFirewallClientTypes.LoggingConfiguration?
}

extension DescribeLoggingConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case loggingConfiguration = "LoggingConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let loggingConfigurationDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.LoggingConfiguration.self, forKey: .loggingConfiguration)
        loggingConfiguration = loggingConfigurationDecoded
    }
}

extension DescribeResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension DescribeResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeResourcePolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the rule group or firewall policy whose resource policy you want to retrieve.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct DescribeResourcePolicyInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension DescribeResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension DescribeResourcePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeResourcePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeResourcePolicyOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeResourcePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeResourcePolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policy = output.policy
        } else {
            self.policy = nil
        }
    }
}

public struct DescribeResourcePolicyOutputResponse: Swift.Equatable {
    /// The IAM policy for the resource.
    public var policy: Swift.String?

    public init (
        policy: Swift.String? = nil
    )
    {
        self.policy = policy
    }
}

struct DescribeResourcePolicyOutputResponseBody: Swift.Equatable {
    let policy: Swift.String?
}

extension DescribeResourcePolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension DescribeRuleGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleGroupArn = "RuleGroupArn"
        case ruleGroupName = "RuleGroupName"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ruleGroupArn = self.ruleGroupArn {
            try encodeContainer.encode(ruleGroupArn, forKey: .ruleGroupArn)
        }
        if let ruleGroupName = self.ruleGroupName {
            try encodeContainer.encode(ruleGroupName, forKey: .ruleGroupName)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

extension DescribeRuleGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeRuleGroupInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the rule group. You must specify the ARN or the name, and you can specify both.
    public var ruleGroupArn: Swift.String?
    /// The descriptive name of the rule group. You can't change the name of a rule group after you create it. You must specify the ARN or the name, and you can specify both.
    public var ruleGroupName: Swift.String?
    /// Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules. This setting is required for requests that do not include the RuleGroupARN.
    public var type: NetworkFirewallClientTypes.RuleGroupType?

    public init (
        ruleGroupArn: Swift.String? = nil,
        ruleGroupName: Swift.String? = nil,
        type: NetworkFirewallClientTypes.RuleGroupType? = nil
    )
    {
        self.ruleGroupArn = ruleGroupArn
        self.ruleGroupName = ruleGroupName
        self.type = type
    }
}

struct DescribeRuleGroupInputBody: Swift.Equatable {
    let ruleGroupName: Swift.String?
    let ruleGroupArn: Swift.String?
    let type: NetworkFirewallClientTypes.RuleGroupType?
}

extension DescribeRuleGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleGroupArn = "RuleGroupArn"
        case ruleGroupName = "RuleGroupName"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupName)
        ruleGroupName = ruleGroupNameDecoded
        let ruleGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupArn)
        ruleGroupArn = ruleGroupArnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RuleGroupType.self, forKey: .type)
        type = typeDecoded
    }
}

extension DescribeRuleGroupMetadataInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleGroupArn = "RuleGroupArn"
        case ruleGroupName = "RuleGroupName"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ruleGroupArn = self.ruleGroupArn {
            try encodeContainer.encode(ruleGroupArn, forKey: .ruleGroupArn)
        }
        if let ruleGroupName = self.ruleGroupName {
            try encodeContainer.encode(ruleGroupName, forKey: .ruleGroupName)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

extension DescribeRuleGroupMetadataInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeRuleGroupMetadataInput: Swift.Equatable {
    /// The descriptive name of the rule group. You can't change the name of a rule group after you create it. You must specify the ARN or the name, and you can specify both.
    public var ruleGroupArn: Swift.String?
    /// The descriptive name of the rule group. You can't change the name of a rule group after you create it. You must specify the ARN or the name, and you can specify both.
    public var ruleGroupName: Swift.String?
    /// Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules. This setting is required for requests that do not include the RuleGroupARN.
    public var type: NetworkFirewallClientTypes.RuleGroupType?

    public init (
        ruleGroupArn: Swift.String? = nil,
        ruleGroupName: Swift.String? = nil,
        type: NetworkFirewallClientTypes.RuleGroupType? = nil
    )
    {
        self.ruleGroupArn = ruleGroupArn
        self.ruleGroupName = ruleGroupName
        self.type = type
    }
}

struct DescribeRuleGroupMetadataInputBody: Swift.Equatable {
    let ruleGroupName: Swift.String?
    let ruleGroupArn: Swift.String?
    let type: NetworkFirewallClientTypes.RuleGroupType?
}

extension DescribeRuleGroupMetadataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleGroupArn = "RuleGroupArn"
        case ruleGroupName = "RuleGroupName"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupName)
        ruleGroupName = ruleGroupNameDecoded
        let ruleGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupArn)
        ruleGroupArn = ruleGroupArnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RuleGroupType.self, forKey: .type)
        type = typeDecoded
    }
}

extension DescribeRuleGroupMetadataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeRuleGroupMetadataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeRuleGroupMetadataOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeRuleGroupMetadataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeRuleGroupMetadataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.capacity = output.capacity
            self.description = output.description
            self.lastModifiedTime = output.lastModifiedTime
            self.ruleGroupArn = output.ruleGroupArn
            self.ruleGroupName = output.ruleGroupName
            self.statefulRuleOptions = output.statefulRuleOptions
            self.type = output.type
        } else {
            self.capacity = nil
            self.description = nil
            self.lastModifiedTime = nil
            self.ruleGroupArn = nil
            self.ruleGroupName = nil
            self.statefulRuleOptions = nil
            self.type = nil
        }
    }
}

public struct DescribeRuleGroupMetadataOutputResponse: Swift.Equatable {
    /// The maximum operating resources that this rule group can use. Rule group capacity is fixed at creation. When you update a rule group, you are limited to this capacity. When you reference a rule group from a firewall policy, Network Firewall reserves this capacity for the rule group. You can retrieve the capacity that would be required for a rule group before you create the rule group by calling [CreateRuleGroup] with DryRun set to TRUE.
    public var capacity: Swift.Int?
    /// Returns the metadata objects for the specified rule group.
    public var description: Swift.String?
    /// The last time that the rule group was changed.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The descriptive name of the rule group. You can't change the name of a rule group after you create it. You must specify the ARN or the name, and you can specify both.
    /// This member is required.
    public var ruleGroupArn: Swift.String?
    /// The descriptive name of the rule group. You can't change the name of a rule group after you create it. You must specify the ARN or the name, and you can specify both.
    /// This member is required.
    public var ruleGroupName: Swift.String?
    /// Additional options governing how Network Firewall handles the rule group. You can only use these for stateful rule groups.
    public var statefulRuleOptions: NetworkFirewallClientTypes.StatefulRuleOptions?
    /// Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules. This setting is required for requests that do not include the RuleGroupARN.
    public var type: NetworkFirewallClientTypes.RuleGroupType?

    public init (
        capacity: Swift.Int? = nil,
        description: Swift.String? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        ruleGroupArn: Swift.String? = nil,
        ruleGroupName: Swift.String? = nil,
        statefulRuleOptions: NetworkFirewallClientTypes.StatefulRuleOptions? = nil,
        type: NetworkFirewallClientTypes.RuleGroupType? = nil
    )
    {
        self.capacity = capacity
        self.description = description
        self.lastModifiedTime = lastModifiedTime
        self.ruleGroupArn = ruleGroupArn
        self.ruleGroupName = ruleGroupName
        self.statefulRuleOptions = statefulRuleOptions
        self.type = type
    }
}

struct DescribeRuleGroupMetadataOutputResponseBody: Swift.Equatable {
    let ruleGroupArn: Swift.String?
    let ruleGroupName: Swift.String?
    let description: Swift.String?
    let type: NetworkFirewallClientTypes.RuleGroupType?
    let capacity: Swift.Int?
    let statefulRuleOptions: NetworkFirewallClientTypes.StatefulRuleOptions?
    let lastModifiedTime: ClientRuntime.Date?
}

extension DescribeRuleGroupMetadataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacity = "Capacity"
        case description = "Description"
        case lastModifiedTime = "LastModifiedTime"
        case ruleGroupArn = "RuleGroupArn"
        case ruleGroupName = "RuleGroupName"
        case statefulRuleOptions = "StatefulRuleOptions"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupArn)
        ruleGroupArn = ruleGroupArnDecoded
        let ruleGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupName)
        ruleGroupName = ruleGroupNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let typeDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RuleGroupType.self, forKey: .type)
        type = typeDecoded
        let capacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .capacity)
        capacity = capacityDecoded
        let statefulRuleOptionsDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.StatefulRuleOptions.self, forKey: .statefulRuleOptions)
        statefulRuleOptions = statefulRuleOptionsDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension DescribeRuleGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeRuleGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeRuleGroupOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeRuleGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeRuleGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.ruleGroup = output.ruleGroup
            self.ruleGroupResponse = output.ruleGroupResponse
            self.updateToken = output.updateToken
        } else {
            self.ruleGroup = nil
            self.ruleGroupResponse = nil
            self.updateToken = nil
        }
    }
}

public struct DescribeRuleGroupOutputResponse: Swift.Equatable {
    /// The object that defines the rules in a rule group. This, along with [RuleGroupResponse], define the rule group. You can retrieve all objects for a rule group by calling [DescribeRuleGroup]. Network Firewall uses a rule group to inspect and control network traffic. You define stateless rule groups to inspect individual packets and you define stateful rule groups to inspect packets in the context of their traffic flow. To use a rule group, you include it by reference in an Network Firewall firewall policy, then you use the policy in a firewall. You can reference a rule group from more than one firewall policy, and you can use a firewall policy in more than one firewall.
    public var ruleGroup: NetworkFirewallClientTypes.RuleGroup?
    /// The high-level properties of a rule group. This, along with the [RuleGroup], define the rule group. You can retrieve all objects for a rule group by calling [DescribeRuleGroup].
    /// This member is required.
    public var ruleGroupResponse: NetworkFirewallClientTypes.RuleGroupResponse?
    /// A token used for optimistic locking. Network Firewall returns a token to your requests that access the rule group. The token marks the state of the rule group resource at the time of the request. To make changes to the rule group, you provide the token in your request. Network Firewall uses the token to ensure that the rule group hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the rule group again to get a current copy of it with a current token. Reapply your changes as needed, then try the operation again using the new token.
    /// This member is required.
    public var updateToken: Swift.String?

    public init (
        ruleGroup: NetworkFirewallClientTypes.RuleGroup? = nil,
        ruleGroupResponse: NetworkFirewallClientTypes.RuleGroupResponse? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.ruleGroup = ruleGroup
        self.ruleGroupResponse = ruleGroupResponse
        self.updateToken = updateToken
    }
}

struct DescribeRuleGroupOutputResponseBody: Swift.Equatable {
    let updateToken: Swift.String?
    let ruleGroup: NetworkFirewallClientTypes.RuleGroup?
    let ruleGroupResponse: NetworkFirewallClientTypes.RuleGroupResponse?
}

extension DescribeRuleGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleGroup = "RuleGroup"
        case ruleGroupResponse = "RuleGroupResponse"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
        let ruleGroupDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RuleGroup.self, forKey: .ruleGroup)
        ruleGroup = ruleGroupDecoded
        let ruleGroupResponseDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RuleGroupResponse.self, forKey: .ruleGroupResponse)
        ruleGroupResponse = ruleGroupResponseDecoded
    }
}

extension NetworkFirewallClientTypes.Dimension: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// The value to use in an Amazon CloudWatch custom metric dimension. This is used in the PublishMetrics[CustomAction]. A CloudWatch custom metric dimension is a name/value pair that's part of the identity of a metric. Network Firewall sets the dimension name to CustomAction and you provide the dimension value. For more information about CloudWatch custom metric dimensions, see [Publishing Custom Metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html#usingDimensions) in the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html).
    public struct Dimension: Swift.Equatable {
        /// The value to use in the custom metric dimension.
        /// This member is required.
        public var value: Swift.String?

        public init (
            value: Swift.String? = nil
        )
        {
            self.value = value
        }
    }

}

extension DisassociateSubnetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case subnetIds = "SubnetIds"
        case updateToken = "UpdateToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let firewallArn = self.firewallArn {
            try encodeContainer.encode(firewallArn, forKey: .firewallArn)
        }
        if let firewallName = self.firewallName {
            try encodeContainer.encode(firewallName, forKey: .firewallName)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for azsubnet0 in subnetIds {
                try subnetIdsContainer.encode(azsubnet0)
            }
        }
        if let updateToken = self.updateToken {
            try encodeContainer.encode(updateToken, forKey: .updateToken)
        }
    }
}

extension DisassociateSubnetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DisassociateSubnetsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the firewall. You must specify the ARN or the name, and you can specify both.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallName: Swift.String?
    /// The unique identifiers for the subnets that you want to disassociate.
    /// This member is required.
    public var subnetIds: [Swift.String]?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init (
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.subnetIds = subnetIds
        self.updateToken = updateToken
    }
}

struct DisassociateSubnetsInputBody: Swift.Equatable {
    let updateToken: Swift.String?
    let firewallArn: Swift.String?
    let firewallName: Swift.String?
    let subnetIds: [Swift.String]?
}

extension DisassociateSubnetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case subnetIds = "SubnetIds"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
    }
}

extension DisassociateSubnetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateSubnetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTokenException" : self = .invalidTokenException(try InvalidTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DisassociateSubnetsOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidOperationException(InvalidOperationException)
    case invalidRequestException(InvalidRequestException)
    case invalidTokenException(InvalidTokenException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateSubnetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DisassociateSubnetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.firewallArn = output.firewallArn
            self.firewallName = output.firewallName
            self.subnetMappings = output.subnetMappings
            self.updateToken = output.updateToken
        } else {
            self.firewallArn = nil
            self.firewallName = nil
            self.subnetMappings = nil
            self.updateToken = nil
        }
    }
}

public struct DisassociateSubnetsOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the firewall.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
    public var firewallName: Swift.String?
    /// The IDs of the subnets that are associated with the firewall.
    public var subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init (
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.subnetMappings = subnetMappings
        self.updateToken = updateToken
    }
}

struct DisassociateSubnetsOutputResponseBody: Swift.Equatable {
    let firewallArn: Swift.String?
    let firewallName: Swift.String?
    let subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]?
    let updateToken: Swift.String?
}

extension DisassociateSubnetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case subnetMappings = "SubnetMappings"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let subnetMappingsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.SubnetMapping?].self, forKey: .subnetMappings)
        var subnetMappingsDecoded0:[NetworkFirewallClientTypes.SubnetMapping]? = nil
        if let subnetMappingsContainer = subnetMappingsContainer {
            subnetMappingsDecoded0 = [NetworkFirewallClientTypes.SubnetMapping]()
            for structure0 in subnetMappingsContainer {
                if let structure0 = structure0 {
                    subnetMappingsDecoded0?.append(structure0)
                }
            }
        }
        subnetMappings = subnetMappingsDecoded0
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
    }
}

extension NetworkFirewallClientTypes.EncryptionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.EncryptionType.self, forKey: .type)
        type = typeDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// A complex type that contains optional Amazon Web Services Key Management Service (KMS) encryption settings for your Network Firewall resources. Your data is encrypted by default with an Amazon Web Services owned key that Amazon Web Services owns and manages for you. You can use either the Amazon Web Services owned key, or provide your own customer managed key. To learn more about KMS encryption of your Network Firewall resources, see [Encryption at rest with Amazon Web Services Key Managment Service](https://docs.aws.amazon.com/kms/latest/developerguide/kms-encryption-at-rest.html) in the Network Firewall Developer Guide.
    public struct EncryptionConfiguration: Swift.Equatable {
        /// The ID of the Amazon Web Services Key Management Service (KMS) customer managed key. You can use any of the key identifiers that KMS supports, unless you're using a key that's managed by another account. If you're using a key managed by another account, then specify the key ARN. For more information, see [Key ID](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) in the Amazon Web Services KMS Developer Guide.
        public var keyId: Swift.String?
        /// The type of Amazon Web Services KMS key to use for encryption of your Network Firewall resources.
        /// This member is required.
        public var type: NetworkFirewallClientTypes.EncryptionType?

        public init (
            keyId: Swift.String? = nil,
            type: NetworkFirewallClientTypes.EncryptionType? = nil
        )
        {
            self.keyId = keyId
            self.type = type
        }
    }

}

extension NetworkFirewallClientTypes {
    public enum EncryptionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsOwnedKmsKey
        case customerKms
        case sdkUnknown(Swift.String)

        public static var allCases: [EncryptionType] {
            return [
                .awsOwnedKmsKey,
                .customerKms,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsOwnedKmsKey: return "AWS_OWNED_KMS_KEY"
            case .customerKms: return "CUSTOMER_KMS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EncryptionType(rawValue: rawValue) ?? EncryptionType.sdkUnknown(rawValue)
        }
    }
}

extension NetworkFirewallClientTypes.Firewall: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteProtection = "DeleteProtection"
        case description = "Description"
        case encryptionConfiguration = "EncryptionConfiguration"
        case firewallArn = "FirewallArn"
        case firewallId = "FirewallId"
        case firewallName = "FirewallName"
        case firewallPolicyArn = "FirewallPolicyArn"
        case firewallPolicyChangeProtection = "FirewallPolicyChangeProtection"
        case subnetChangeProtection = "SubnetChangeProtection"
        case subnetMappings = "SubnetMappings"
        case tags = "Tags"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if deleteProtection != false {
            try encodeContainer.encode(deleteProtection, forKey: .deleteProtection)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let encryptionConfiguration = self.encryptionConfiguration {
            try encodeContainer.encode(encryptionConfiguration, forKey: .encryptionConfiguration)
        }
        if let firewallArn = self.firewallArn {
            try encodeContainer.encode(firewallArn, forKey: .firewallArn)
        }
        if let firewallId = self.firewallId {
            try encodeContainer.encode(firewallId, forKey: .firewallId)
        }
        if let firewallName = self.firewallName {
            try encodeContainer.encode(firewallName, forKey: .firewallName)
        }
        if let firewallPolicyArn = self.firewallPolicyArn {
            try encodeContainer.encode(firewallPolicyArn, forKey: .firewallPolicyArn)
        }
        if firewallPolicyChangeProtection != false {
            try encodeContainer.encode(firewallPolicyChangeProtection, forKey: .firewallPolicyChangeProtection)
        }
        if subnetChangeProtection != false {
            try encodeContainer.encode(subnetChangeProtection, forKey: .subnetChangeProtection)
        }
        if let subnetMappings = subnetMappings {
            var subnetMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetMappings)
            for subnetmapping0 in subnetMappings {
                try subnetMappingsContainer.encode(subnetmapping0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let firewallPolicyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallPolicyArn)
        firewallPolicyArn = firewallPolicyArnDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetMappingsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.SubnetMapping?].self, forKey: .subnetMappings)
        var subnetMappingsDecoded0:[NetworkFirewallClientTypes.SubnetMapping]? = nil
        if let subnetMappingsContainer = subnetMappingsContainer {
            subnetMappingsDecoded0 = [NetworkFirewallClientTypes.SubnetMapping]()
            for structure0 in subnetMappingsContainer {
                if let structure0 = structure0 {
                    subnetMappingsDecoded0?.append(structure0)
                }
            }
        }
        subnetMappings = subnetMappingsDecoded0
        let deleteProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteProtection) ?? false
        deleteProtection = deleteProtectionDecoded
        let subnetChangeProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .subnetChangeProtection) ?? false
        subnetChangeProtection = subnetChangeProtectionDecoded
        let firewallPolicyChangeProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .firewallPolicyChangeProtection) ?? false
        firewallPolicyChangeProtection = firewallPolicyChangeProtectionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let firewallIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallId)
        firewallId = firewallIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[NetworkFirewallClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [NetworkFirewallClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// The firewall defines the configuration settings for an Network Firewall firewall. These settings include the firewall policy, the subnets in your VPC to use for the firewall endpoints, and any tags that are attached to the firewall Amazon Web Services resource. The status of the firewall, for example whether it's ready to filter network traffic, is provided in the corresponding [FirewallStatus]. You can retrieve both objects by calling [DescribeFirewall].
    public struct Firewall: Swift.Equatable {
        /// A flag indicating whether it is possible to delete the firewall. A setting of TRUE indicates that the firewall is protected against deletion. Use this setting to protect against accidentally deleting a firewall that is in use. When you create a firewall, the operation initializes this flag to TRUE.
        public var deleteProtection: Swift.Bool
        /// A description of the firewall.
        public var description: Swift.String?
        /// A complex type that contains the Amazon Web Services KMS encryption configuration settings for your firewall.
        public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
        /// The Amazon Resource Name (ARN) of the firewall.
        public var firewallArn: Swift.String?
        /// The unique identifier for the firewall.
        /// This member is required.
        public var firewallId: Swift.String?
        /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
        public var firewallName: Swift.String?
        /// The Amazon Resource Name (ARN) of the firewall policy. The relationship of firewall to firewall policy is many to one. Each firewall requires one firewall policy association, and you can use the same firewall policy for multiple firewalls.
        /// This member is required.
        public var firewallPolicyArn: Swift.String?
        /// A setting indicating whether the firewall is protected against a change to the firewall policy association. Use this setting to protect against accidentally modifying the firewall policy for a firewall that is in use. When you create a firewall, the operation initializes this setting to TRUE.
        public var firewallPolicyChangeProtection: Swift.Bool
        /// A setting indicating whether the firewall is protected against changes to the subnet associations. Use this setting to protect against accidentally modifying the subnet associations for a firewall that is in use. When you create a firewall, the operation initializes this setting to TRUE.
        public var subnetChangeProtection: Swift.Bool
        /// The public subnets that Network Firewall is using for the firewall. Each subnet must belong to a different Availability Zone.
        /// This member is required.
        public var subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]?
        ///
        public var tags: [NetworkFirewallClientTypes.Tag]?
        /// The unique identifier of the VPC where the firewall is in use.
        /// This member is required.
        public var vpcId: Swift.String?

        public init (
            deleteProtection: Swift.Bool = false,
            description: Swift.String? = nil,
            encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
            firewallArn: Swift.String? = nil,
            firewallId: Swift.String? = nil,
            firewallName: Swift.String? = nil,
            firewallPolicyArn: Swift.String? = nil,
            firewallPolicyChangeProtection: Swift.Bool = false,
            subnetChangeProtection: Swift.Bool = false,
            subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]? = nil,
            tags: [NetworkFirewallClientTypes.Tag]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.deleteProtection = deleteProtection
            self.description = description
            self.encryptionConfiguration = encryptionConfiguration
            self.firewallArn = firewallArn
            self.firewallId = firewallId
            self.firewallName = firewallName
            self.firewallPolicyArn = firewallPolicyArn
            self.firewallPolicyChangeProtection = firewallPolicyChangeProtection
            self.subnetChangeProtection = subnetChangeProtection
            self.subnetMappings = subnetMappings
            self.tags = tags
            self.vpcId = vpcId
        }
    }

}

extension NetworkFirewallClientTypes.FirewallMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let firewallArn = self.firewallArn {
            try encodeContainer.encode(firewallArn, forKey: .firewallArn)
        }
        if let firewallName = self.firewallName {
            try encodeContainer.encode(firewallName, forKey: .firewallName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// High-level information about a firewall, returned by operations like create and describe. You can use the information provided in the metadata to retrieve and manage a firewall.
    public struct FirewallMetadata: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the firewall.
        public var firewallArn: Swift.String?
        /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
        public var firewallName: Swift.String?

        public init (
            firewallArn: Swift.String? = nil,
            firewallName: Swift.String? = nil
        )
        {
            self.firewallArn = firewallArn
            self.firewallName = firewallName
        }
    }

}

extension NetworkFirewallClientTypes.FirewallPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case statefulDefaultActions = "StatefulDefaultActions"
        case statefulEngineOptions = "StatefulEngineOptions"
        case statefulRuleGroupReferences = "StatefulRuleGroupReferences"
        case statelessCustomActions = "StatelessCustomActions"
        case statelessDefaultActions = "StatelessDefaultActions"
        case statelessFragmentDefaultActions = "StatelessFragmentDefaultActions"
        case statelessRuleGroupReferences = "StatelessRuleGroupReferences"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let statefulDefaultActions = statefulDefaultActions {
            var statefulDefaultActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statefulDefaultActions)
            for collectionmember_string0 in statefulDefaultActions {
                try statefulDefaultActionsContainer.encode(collectionmember_string0)
            }
        }
        if let statefulEngineOptions = self.statefulEngineOptions {
            try encodeContainer.encode(statefulEngineOptions, forKey: .statefulEngineOptions)
        }
        if let statefulRuleGroupReferences = statefulRuleGroupReferences {
            var statefulRuleGroupReferencesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statefulRuleGroupReferences)
            for statefulrulegroupreference0 in statefulRuleGroupReferences {
                try statefulRuleGroupReferencesContainer.encode(statefulrulegroupreference0)
            }
        }
        if let statelessCustomActions = statelessCustomActions {
            var statelessCustomActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statelessCustomActions)
            for customaction0 in statelessCustomActions {
                try statelessCustomActionsContainer.encode(customaction0)
            }
        }
        if let statelessDefaultActions = statelessDefaultActions {
            var statelessDefaultActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statelessDefaultActions)
            for collectionmember_string0 in statelessDefaultActions {
                try statelessDefaultActionsContainer.encode(collectionmember_string0)
            }
        }
        if let statelessFragmentDefaultActions = statelessFragmentDefaultActions {
            var statelessFragmentDefaultActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statelessFragmentDefaultActions)
            for collectionmember_string0 in statelessFragmentDefaultActions {
                try statelessFragmentDefaultActionsContainer.encode(collectionmember_string0)
            }
        }
        if let statelessRuleGroupReferences = statelessRuleGroupReferences {
            var statelessRuleGroupReferencesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statelessRuleGroupReferences)
            for statelessrulegroupreference0 in statelessRuleGroupReferences {
                try statelessRuleGroupReferencesContainer.encode(statelessrulegroupreference0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statelessRuleGroupReferencesContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.StatelessRuleGroupReference?].self, forKey: .statelessRuleGroupReferences)
        var statelessRuleGroupReferencesDecoded0:[NetworkFirewallClientTypes.StatelessRuleGroupReference]? = nil
        if let statelessRuleGroupReferencesContainer = statelessRuleGroupReferencesContainer {
            statelessRuleGroupReferencesDecoded0 = [NetworkFirewallClientTypes.StatelessRuleGroupReference]()
            for structure0 in statelessRuleGroupReferencesContainer {
                if let structure0 = structure0 {
                    statelessRuleGroupReferencesDecoded0?.append(structure0)
                }
            }
        }
        statelessRuleGroupReferences = statelessRuleGroupReferencesDecoded0
        let statelessDefaultActionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .statelessDefaultActions)
        var statelessDefaultActionsDecoded0:[Swift.String]? = nil
        if let statelessDefaultActionsContainer = statelessDefaultActionsContainer {
            statelessDefaultActionsDecoded0 = [Swift.String]()
            for string0 in statelessDefaultActionsContainer {
                if let string0 = string0 {
                    statelessDefaultActionsDecoded0?.append(string0)
                }
            }
        }
        statelessDefaultActions = statelessDefaultActionsDecoded0
        let statelessFragmentDefaultActionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .statelessFragmentDefaultActions)
        var statelessFragmentDefaultActionsDecoded0:[Swift.String]? = nil
        if let statelessFragmentDefaultActionsContainer = statelessFragmentDefaultActionsContainer {
            statelessFragmentDefaultActionsDecoded0 = [Swift.String]()
            for string0 in statelessFragmentDefaultActionsContainer {
                if let string0 = string0 {
                    statelessFragmentDefaultActionsDecoded0?.append(string0)
                }
            }
        }
        statelessFragmentDefaultActions = statelessFragmentDefaultActionsDecoded0
        let statelessCustomActionsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.CustomAction?].self, forKey: .statelessCustomActions)
        var statelessCustomActionsDecoded0:[NetworkFirewallClientTypes.CustomAction]? = nil
        if let statelessCustomActionsContainer = statelessCustomActionsContainer {
            statelessCustomActionsDecoded0 = [NetworkFirewallClientTypes.CustomAction]()
            for structure0 in statelessCustomActionsContainer {
                if let structure0 = structure0 {
                    statelessCustomActionsDecoded0?.append(structure0)
                }
            }
        }
        statelessCustomActions = statelessCustomActionsDecoded0
        let statefulRuleGroupReferencesContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.StatefulRuleGroupReference?].self, forKey: .statefulRuleGroupReferences)
        var statefulRuleGroupReferencesDecoded0:[NetworkFirewallClientTypes.StatefulRuleGroupReference]? = nil
        if let statefulRuleGroupReferencesContainer = statefulRuleGroupReferencesContainer {
            statefulRuleGroupReferencesDecoded0 = [NetworkFirewallClientTypes.StatefulRuleGroupReference]()
            for structure0 in statefulRuleGroupReferencesContainer {
                if let structure0 = structure0 {
                    statefulRuleGroupReferencesDecoded0?.append(structure0)
                }
            }
        }
        statefulRuleGroupReferences = statefulRuleGroupReferencesDecoded0
        let statefulDefaultActionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .statefulDefaultActions)
        var statefulDefaultActionsDecoded0:[Swift.String]? = nil
        if let statefulDefaultActionsContainer = statefulDefaultActionsContainer {
            statefulDefaultActionsDecoded0 = [Swift.String]()
            for string0 in statefulDefaultActionsContainer {
                if let string0 = string0 {
                    statefulDefaultActionsDecoded0?.append(string0)
                }
            }
        }
        statefulDefaultActions = statefulDefaultActionsDecoded0
        let statefulEngineOptionsDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.StatefulEngineOptions.self, forKey: .statefulEngineOptions)
        statefulEngineOptions = statefulEngineOptionsDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// The firewall policy defines the behavior of a firewall using a collection of stateless and stateful rule groups and other settings. You can use one firewall policy for multiple firewalls. This, along with [FirewallPolicyResponse], define the policy. You can retrieve all objects for a firewall policy by calling [DescribeFirewallPolicy].
    public struct FirewallPolicy: Swift.Equatable {
        /// The default actions to take on a packet that doesn't match any stateful rules. The stateful default action is optional, and is only valid when using the strict rule order. Valid values of the stateful default action:
        ///
        /// * aws:drop_strict
        ///
        /// * aws:drop_established
        ///
        /// * aws:alert_strict
        ///
        /// * aws:alert_established
        ///
        ///
        /// For more information, see [Strict evaluation order](https://docs.aws.amazon.com/network-firewall/latest/developerguide/suricata-rule-evaluation-order.html#suricata-strict-rule-evaluation-order.html) in the Network Firewall Developer Guide.
        public var statefulDefaultActions: [Swift.String]?
        /// Additional options governing how Network Firewall handles stateful rules. The stateful rule groups that you use in your policy must have stateful rule options settings that are compatible with these settings.
        public var statefulEngineOptions: NetworkFirewallClientTypes.StatefulEngineOptions?
        /// References to the stateful rule groups that are used in the policy. These define the inspection criteria in stateful rules.
        public var statefulRuleGroupReferences: [NetworkFirewallClientTypes.StatefulRuleGroupReference]?
        /// The custom action definitions that are available for use in the firewall policy's StatelessDefaultActions setting. You name each custom action that you define, and then you can use it by name in your default actions specifications.
        public var statelessCustomActions: [NetworkFirewallClientTypes.CustomAction]?
        /// The actions to take on a packet if it doesn't match any of the stateless rules in the policy. If you want non-matching packets to be forwarded for stateful inspection, specify aws:forward_to_sfe. You must specify one of the standard actions: aws:pass, aws:drop, or aws:forward_to_sfe. In addition, you can specify custom actions that are compatible with your standard section choice. For example, you could specify ["aws:pass"] or you could specify ["aws:pass", “customActionName”]. For information about compatibility, see the custom action descriptions under [CustomAction].
        /// This member is required.
        public var statelessDefaultActions: [Swift.String]?
        /// The actions to take on a fragmented UDP packet if it doesn't match any of the stateless rules in the policy. Network Firewall only manages UDP packet fragments and silently drops packet fragments for other protocols. If you want non-matching fragmented UDP packets to be forwarded for stateful inspection, specify aws:forward_to_sfe. You must specify one of the standard actions: aws:pass, aws:drop, or aws:forward_to_sfe. In addition, you can specify custom actions that are compatible with your standard section choice. For example, you could specify ["aws:pass"] or you could specify ["aws:pass", “customActionName”]. For information about compatibility, see the custom action descriptions under [CustomAction].
        /// This member is required.
        public var statelessFragmentDefaultActions: [Swift.String]?
        /// References to the stateless rule groups that are used in the policy. These define the matching criteria in stateless rules.
        public var statelessRuleGroupReferences: [NetworkFirewallClientTypes.StatelessRuleGroupReference]?

        public init (
            statefulDefaultActions: [Swift.String]? = nil,
            statefulEngineOptions: NetworkFirewallClientTypes.StatefulEngineOptions? = nil,
            statefulRuleGroupReferences: [NetworkFirewallClientTypes.StatefulRuleGroupReference]? = nil,
            statelessCustomActions: [NetworkFirewallClientTypes.CustomAction]? = nil,
            statelessDefaultActions: [Swift.String]? = nil,
            statelessFragmentDefaultActions: [Swift.String]? = nil,
            statelessRuleGroupReferences: [NetworkFirewallClientTypes.StatelessRuleGroupReference]? = nil
        )
        {
            self.statefulDefaultActions = statefulDefaultActions
            self.statefulEngineOptions = statefulEngineOptions
            self.statefulRuleGroupReferences = statefulRuleGroupReferences
            self.statelessCustomActions = statelessCustomActions
            self.statelessDefaultActions = statelessDefaultActions
            self.statelessFragmentDefaultActions = statelessFragmentDefaultActions
            self.statelessRuleGroupReferences = statelessRuleGroupReferences
        }
    }

}

extension NetworkFirewallClientTypes.FirewallPolicyMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// High-level information about a firewall policy, returned by operations like create and describe. You can use the information provided in the metadata to retrieve and manage a firewall policy. You can retrieve all objects for a firewall policy by calling [DescribeFirewallPolicy].
    public struct FirewallPolicyMetadata: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the firewall policy.
        public var arn: Swift.String?
        /// The descriptive name of the firewall policy. You can't change the name of a firewall policy after you create it.
        public var name: Swift.String?

        public init (
            arn: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.name = name
        }
    }

}

extension NetworkFirewallClientTypes.FirewallPolicyResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumedStatefulRuleCapacity = "ConsumedStatefulRuleCapacity"
        case consumedStatelessRuleCapacity = "ConsumedStatelessRuleCapacity"
        case description = "Description"
        case encryptionConfiguration = "EncryptionConfiguration"
        case firewallPolicyArn = "FirewallPolicyArn"
        case firewallPolicyId = "FirewallPolicyId"
        case firewallPolicyName = "FirewallPolicyName"
        case firewallPolicyStatus = "FirewallPolicyStatus"
        case lastModifiedTime = "LastModifiedTime"
        case numberOfAssociations = "NumberOfAssociations"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let consumedStatefulRuleCapacity = self.consumedStatefulRuleCapacity {
            try encodeContainer.encode(consumedStatefulRuleCapacity, forKey: .consumedStatefulRuleCapacity)
        }
        if let consumedStatelessRuleCapacity = self.consumedStatelessRuleCapacity {
            try encodeContainer.encode(consumedStatelessRuleCapacity, forKey: .consumedStatelessRuleCapacity)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let encryptionConfiguration = self.encryptionConfiguration {
            try encodeContainer.encode(encryptionConfiguration, forKey: .encryptionConfiguration)
        }
        if let firewallPolicyArn = self.firewallPolicyArn {
            try encodeContainer.encode(firewallPolicyArn, forKey: .firewallPolicyArn)
        }
        if let firewallPolicyId = self.firewallPolicyId {
            try encodeContainer.encode(firewallPolicyId, forKey: .firewallPolicyId)
        }
        if let firewallPolicyName = self.firewallPolicyName {
            try encodeContainer.encode(firewallPolicyName, forKey: .firewallPolicyName)
        }
        if let firewallPolicyStatus = self.firewallPolicyStatus {
            try encodeContainer.encode(firewallPolicyStatus.rawValue, forKey: .firewallPolicyStatus)
        }
        if let lastModifiedTime = self.lastModifiedTime {
            try encodeContainer.encodeTimestamp(lastModifiedTime, format: .epochSeconds, forKey: .lastModifiedTime)
        }
        if let numberOfAssociations = self.numberOfAssociations {
            try encodeContainer.encode(numberOfAssociations, forKey: .numberOfAssociations)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallPolicyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallPolicyName)
        firewallPolicyName = firewallPolicyNameDecoded
        let firewallPolicyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallPolicyArn)
        firewallPolicyArn = firewallPolicyArnDecoded
        let firewallPolicyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallPolicyId)
        firewallPolicyId = firewallPolicyIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let firewallPolicyStatusDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.ResourceStatus.self, forKey: .firewallPolicyStatus)
        firewallPolicyStatus = firewallPolicyStatusDecoded
        let tagsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[NetworkFirewallClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [NetworkFirewallClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let consumedStatelessRuleCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .consumedStatelessRuleCapacity)
        consumedStatelessRuleCapacity = consumedStatelessRuleCapacityDecoded
        let consumedStatefulRuleCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .consumedStatefulRuleCapacity)
        consumedStatefulRuleCapacity = consumedStatefulRuleCapacityDecoded
        let numberOfAssociationsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfAssociations)
        numberOfAssociations = numberOfAssociationsDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// The high-level properties of a firewall policy. This, along with the [FirewallPolicy], define the policy. You can retrieve all objects for a firewall policy by calling [DescribeFirewallPolicy].
    public struct FirewallPolicyResponse: Swift.Equatable {
        /// The number of capacity units currently consumed by the policy's stateful rules.
        public var consumedStatefulRuleCapacity: Swift.Int?
        /// The number of capacity units currently consumed by the policy's stateless rules.
        public var consumedStatelessRuleCapacity: Swift.Int?
        /// A description of the firewall policy.
        public var description: Swift.String?
        /// A complex type that contains the Amazon Web Services KMS encryption configuration settings for your firewall policy.
        public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
        /// The Amazon Resource Name (ARN) of the firewall policy. If this response is for a create request that had DryRun set to TRUE, then this ARN is a placeholder that isn't attached to a valid resource.
        /// This member is required.
        public var firewallPolicyArn: Swift.String?
        /// The unique identifier for the firewall policy.
        /// This member is required.
        public var firewallPolicyId: Swift.String?
        /// The descriptive name of the firewall policy. You can't change the name of a firewall policy after you create it.
        /// This member is required.
        public var firewallPolicyName: Swift.String?
        /// The current status of the firewall policy. You can retrieve this for a firewall policy by calling [DescribeFirewallPolicy] and providing the firewall policy's name or ARN.
        public var firewallPolicyStatus: NetworkFirewallClientTypes.ResourceStatus?
        /// The last time that the firewall policy was changed.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The number of firewalls that are associated with this firewall policy.
        public var numberOfAssociations: Swift.Int?
        /// The key:value pairs to associate with the resource.
        public var tags: [NetworkFirewallClientTypes.Tag]?

        public init (
            consumedStatefulRuleCapacity: Swift.Int? = nil,
            consumedStatelessRuleCapacity: Swift.Int? = nil,
            description: Swift.String? = nil,
            encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
            firewallPolicyArn: Swift.String? = nil,
            firewallPolicyId: Swift.String? = nil,
            firewallPolicyName: Swift.String? = nil,
            firewallPolicyStatus: NetworkFirewallClientTypes.ResourceStatus? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            numberOfAssociations: Swift.Int? = nil,
            tags: [NetworkFirewallClientTypes.Tag]? = nil
        )
        {
            self.consumedStatefulRuleCapacity = consumedStatefulRuleCapacity
            self.consumedStatelessRuleCapacity = consumedStatelessRuleCapacity
            self.description = description
            self.encryptionConfiguration = encryptionConfiguration
            self.firewallPolicyArn = firewallPolicyArn
            self.firewallPolicyId = firewallPolicyId
            self.firewallPolicyName = firewallPolicyName
            self.firewallPolicyStatus = firewallPolicyStatus
            self.lastModifiedTime = lastModifiedTime
            self.numberOfAssociations = numberOfAssociations
            self.tags = tags
        }
    }

}

extension NetworkFirewallClientTypes.FirewallStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityUsageSummary = "CapacityUsageSummary"
        case configurationSyncStateSummary = "ConfigurationSyncStateSummary"
        case status = "Status"
        case syncStates = "SyncStates"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityUsageSummary = self.capacityUsageSummary {
            try encodeContainer.encode(capacityUsageSummary, forKey: .capacityUsageSummary)
        }
        if let configurationSyncStateSummary = self.configurationSyncStateSummary {
            try encodeContainer.encode(configurationSyncStateSummary.rawValue, forKey: .configurationSyncStateSummary)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let syncStates = syncStates {
            var syncStatesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .syncStates)
            for (dictKey0, syncStates0) in syncStates {
                try syncStatesContainer.encode(syncStates0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.FirewallStatusValue.self, forKey: .status)
        status = statusDecoded
        let configurationSyncStateSummaryDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.ConfigurationSyncState.self, forKey: .configurationSyncStateSummary)
        configurationSyncStateSummary = configurationSyncStateSummaryDecoded
        let syncStatesContainer = try containerValues.decodeIfPresent([Swift.String: NetworkFirewallClientTypes.SyncState?].self, forKey: .syncStates)
        var syncStatesDecoded0: [Swift.String:NetworkFirewallClientTypes.SyncState]? = nil
        if let syncStatesContainer = syncStatesContainer {
            syncStatesDecoded0 = [Swift.String:NetworkFirewallClientTypes.SyncState]()
            for (key0, syncstate0) in syncStatesContainer {
                if let syncstate0 = syncstate0 {
                    syncStatesDecoded0?[key0] = syncstate0
                }
            }
        }
        syncStates = syncStatesDecoded0
        let capacityUsageSummaryDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.CapacityUsageSummary.self, forKey: .capacityUsageSummary)
        capacityUsageSummary = capacityUsageSummaryDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// Detailed information about the current status of a [Firewall]. You can retrieve this for a firewall by calling [DescribeFirewall] and providing the firewall name and ARN.
    public struct FirewallStatus: Swift.Equatable {
        /// Describes the capacity usage of the resources contained in a firewall's reference sets. Network Firewall calclulates the capacity usage by taking an aggregated count of all of the resources used by all of the reference sets in a firewall.
        public var capacityUsageSummary: NetworkFirewallClientTypes.CapacityUsageSummary?
        /// The configuration sync state for the firewall. This summarizes the sync states reported in the Config settings for all of the Availability Zones where you have configured the firewall. When you create a firewall or update its configuration, for example by adding a rule group to its firewall policy, Network Firewall distributes the configuration changes to all zones where the firewall is in use. This summary indicates whether the configuration changes have been applied everywhere. This status must be IN_SYNC for the firewall to be ready for use, but it doesn't indicate that the firewall is ready. The Status setting indicates firewall readiness.
        /// This member is required.
        public var configurationSyncStateSummary: NetworkFirewallClientTypes.ConfigurationSyncState?
        /// The readiness of the configured firewall to handle network traffic across all of the Availability Zones where you've configured it. This setting is READY only when the ConfigurationSyncStateSummary value is IN_SYNC and the AttachmentStatus values for all of the configured subnets are READY.
        /// This member is required.
        public var status: NetworkFirewallClientTypes.FirewallStatusValue?
        /// The subnets that you've configured for use by the Network Firewall firewall. This contains one array element per Availability Zone where you've configured a subnet. These objects provide details of the information that is summarized in the ConfigurationSyncStateSummary and Status, broken down by zone and configuration object.
        public var syncStates: [Swift.String:NetworkFirewallClientTypes.SyncState]?

        public init (
            capacityUsageSummary: NetworkFirewallClientTypes.CapacityUsageSummary? = nil,
            configurationSyncStateSummary: NetworkFirewallClientTypes.ConfigurationSyncState? = nil,
            status: NetworkFirewallClientTypes.FirewallStatusValue? = nil,
            syncStates: [Swift.String:NetworkFirewallClientTypes.SyncState]? = nil
        )
        {
            self.capacityUsageSummary = capacityUsageSummary
            self.configurationSyncStateSummary = configurationSyncStateSummary
            self.status = status
            self.syncStates = syncStates
        }
    }

}

extension NetworkFirewallClientTypes {
    public enum FirewallStatusValue: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleting
        case provisioning
        case ready
        case sdkUnknown(Swift.String)

        public static var allCases: [FirewallStatusValue] {
            return [
                .deleting,
                .provisioning,
                .ready,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleting: return "DELETING"
            case .provisioning: return "PROVISIONING"
            case .ready: return "READY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FirewallStatusValue(rawValue: rawValue) ?? FirewallStatusValue.sdkUnknown(rawValue)
        }
    }
}

extension NetworkFirewallClientTypes {
    public enum GeneratedRulesType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allowlist
        case denylist
        case sdkUnknown(Swift.String)

        public static var allCases: [GeneratedRulesType] {
            return [
                .allowlist,
                .denylist,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allowlist: return "ALLOWLIST"
            case .denylist: return "DENYLIST"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GeneratedRulesType(rawValue: rawValue) ?? GeneratedRulesType.sdkUnknown(rawValue)
        }
    }
}

extension NetworkFirewallClientTypes.Header: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case destinationPort = "DestinationPort"
        case direction = "Direction"
        case `protocol` = "Protocol"
        case source = "Source"
        case sourcePort = "SourcePort"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let destinationPort = self.destinationPort {
            try encodeContainer.encode(destinationPort, forKey: .destinationPort)
        }
        if let direction = self.direction {
            try encodeContainer.encode(direction.rawValue, forKey: .direction)
        }
        if let `protocol` = self.`protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let source = self.source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let sourcePort = self.sourcePort {
            try encodeContainer.encode(sourcePort, forKey: .sourcePort)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protocolDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.StatefulRuleProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .source)
        source = sourceDecoded
        let sourcePortDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourcePort)
        sourcePort = sourcePortDecoded
        let directionDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.StatefulRuleDirection.self, forKey: .direction)
        direction = directionDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destination)
        destination = destinationDecoded
        let destinationPortDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationPort)
        destinationPort = destinationPortDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// The basic rule criteria for Network Firewall to use to inspect packet headers in stateful traffic flow inspection. Traffic flows that match the criteria are a match for the corresponding [StatefulRule].
    public struct Header: Swift.Equatable {
        /// The destination IP address or address range to inspect for, in CIDR notation. To match with any address, specify ANY. Specify an IP address or a block of IP addresses in Classless Inter-Domain Routing (CIDR) notation. Network Firewall supports all address ranges for IPv4. Examples:
        ///
        /// * To configure Network Firewall to inspect for the IP address 192.0.2.44, specify 192.0.2.44/32.
        ///
        /// * To configure Network Firewall to inspect for IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24.
        ///
        ///
        /// For more information about CIDR notation, see the Wikipedia entry [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing).
        /// This member is required.
        public var destination: Swift.String?
        /// The destination port to inspect for. You can specify an individual port, for example 1994 and you can specify a port range, for example 1990:1994. To match with any port, specify ANY.
        /// This member is required.
        public var destinationPort: Swift.String?
        /// The direction of traffic flow to inspect. If set to ANY, the inspection matches bidirectional traffic, both from the source to the destination and from the destination to the source. If set to FORWARD, the inspection only matches traffic going from the source to the destination.
        /// This member is required.
        public var direction: NetworkFirewallClientTypes.StatefulRuleDirection?
        /// The protocol to inspect for. To specify all, you can use IP, because all traffic on Amazon Web Services and on the internet is IP.
        /// This member is required.
        public var `protocol`: NetworkFirewallClientTypes.StatefulRuleProtocol?
        /// The source IP address or address range to inspect for, in CIDR notation. To match with any address, specify ANY. Specify an IP address or a block of IP addresses in Classless Inter-Domain Routing (CIDR) notation. Network Firewall supports all address ranges for IPv4. Examples:
        ///
        /// * To configure Network Firewall to inspect for the IP address 192.0.2.44, specify 192.0.2.44/32.
        ///
        /// * To configure Network Firewall to inspect for IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24.
        ///
        ///
        /// For more information about CIDR notation, see the Wikipedia entry [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing).
        /// This member is required.
        public var source: Swift.String?
        /// The source port to inspect for. You can specify an individual port, for example 1994 and you can specify a port range, for example 1990:1994. To match with any port, specify ANY.
        /// This member is required.
        public var sourcePort: Swift.String?

        public init (
            destination: Swift.String? = nil,
            destinationPort: Swift.String? = nil,
            direction: NetworkFirewallClientTypes.StatefulRuleDirection? = nil,
            `protocol`: NetworkFirewallClientTypes.StatefulRuleProtocol? = nil,
            source: Swift.String? = nil,
            sourcePort: Swift.String? = nil
        )
        {
            self.destination = destination
            self.destinationPort = destinationPort
            self.direction = direction
            self.`protocol` = `protocol`
            self.source = source
            self.sourcePort = sourcePort
        }
    }

}

extension NetworkFirewallClientTypes.IPSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case definition = "Definition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let definition = definition {
            var definitionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .definition)
            for variabledefinition0 in definition {
                try definitionContainer.encode(variabledefinition0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let definitionContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .definition)
        var definitionDecoded0:[Swift.String]? = nil
        if let definitionContainer = definitionContainer {
            definitionDecoded0 = [Swift.String]()
            for string0 in definitionContainer {
                if let string0 = string0 {
                    definitionDecoded0?.append(string0)
                }
            }
        }
        definition = definitionDecoded0
    }
}

extension NetworkFirewallClientTypes {
    /// A list of IP addresses and address ranges, in CIDR notation. This is part of a [RuleVariables].
    public struct IPSet: Swift.Equatable {
        /// The list of IP addresses and address ranges, in CIDR notation.
        /// This member is required.
        public var definition: [Swift.String]?

        public init (
            definition: [Swift.String]? = nil
        )
        {
            self.definition = definition
        }
    }

}

extension NetworkFirewallClientTypes.IPSetMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resolvedCIDRCount = "ResolvedCIDRCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resolvedCIDRCount = self.resolvedCIDRCount {
            try encodeContainer.encode(resolvedCIDRCount, forKey: .resolvedCIDRCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resolvedCIDRCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .resolvedCIDRCount)
        resolvedCIDRCount = resolvedCIDRCountDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// General information about the IP set.
    public struct IPSetMetadata: Swift.Equatable {
        /// Describes the total number of CIDR blocks currently in use by the IP set references in a firewall. To determine how many CIDR blocks are available for you to use in a firewall, you can call AvailableCIDRCount.
        public var resolvedCIDRCount: Swift.Int?

        public init (
            resolvedCIDRCount: Swift.Int? = nil
        )
        {
            self.resolvedCIDRCount = resolvedCIDRCount
        }
    }

}

extension NetworkFirewallClientTypes.IPSetReference: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case referenceArn = "ReferenceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let referenceArn = self.referenceArn {
            try encodeContainer.encode(referenceArn, forKey: .referenceArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let referenceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .referenceArn)
        referenceArn = referenceArnDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// Configures one or more IP set references for a Suricata-compatible rule group. This is used in [CreateRuleGroup] or [UpdateRuleGroup]. An IP set reference is a rule variable that references a resource that you create and manage in another Amazon Web Services service, such as an Amazon VPC prefix list. Network Firewall IP set references enable you to dynamically update the contents of your rules. When you create, update, or delete the IP set you are referencing in your rule, Network Firewall automatically updates the rule's content with the changes. For more information about IP set references in Network Firewall, see [Using IP set references](https://docs.aws.amazon.com/network-firewall/latest/developerguide/rule-groups-ip-set-references) in the Network Firewall Developer Guide. Network Firewall currently supports only [Amazon VPC prefix lists](https://docs.aws.amazon.com/vpc/latest/userguide/managed-prefix-lists.html) as IP set references.
    public struct IPSetReference: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the resource that you are referencing in your rule group.
        public var referenceArn: Swift.String?

        public init (
            referenceArn: Swift.String? = nil
        )
        {
            self.referenceArn = referenceArn
        }
    }

}

extension InsufficientCapacityException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InsufficientCapacityExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Amazon Web Services doesn't currently have enough available capacity to fulfill your request. Try your request later.
public struct InsufficientCapacityException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InsufficientCapacityExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InsufficientCapacityExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InternalServerError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalServerErrorBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Your request is valid, but Network Firewall couldn’t perform the operation because of a system problem. Retry your request.
public struct InternalServerError: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerErrorBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalServerErrorBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidOperationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidOperationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation failed because it's not valid. For example, you might have tried to delete a rule group or firewall policy that's in use.
public struct InvalidOperationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidOperationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidOperationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation failed because of a problem with your request. Examples include:
///
/// * You specified an unsupported parameter name or value.
///
/// * You tried to update a property with a value that isn't among the available types.
///
/// * Your request references an ARN that is malformed, or corresponds to a resource that isn't valid in the context of the request.
public struct InvalidRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRequestExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidResourcePolicyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidResourcePolicyExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The policy statement failed validation.
public struct InvalidResourcePolicyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidResourcePolicyExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidResourcePolicyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTokenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The token you provided is stale or isn't valid for the operation.
public struct InvalidTokenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTokenExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Unable to perform the operation because doing so would violate a limit setting.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListFirewallPoliciesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListFirewallPoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListFirewallPoliciesInput: Swift.Equatable {
    /// The maximum number of objects that you want Network Firewall to return for this request. If more objects are available, in the response, Network Firewall provides a NextToken value that you can use in a subsequent call to get the next batch of objects.
    public var maxResults: Swift.Int?
    /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListFirewallPoliciesInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListFirewallPoliciesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListFirewallPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListFirewallPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListFirewallPoliciesOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListFirewallPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListFirewallPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.firewallPolicies = output.firewallPolicies
            self.nextToken = output.nextToken
        } else {
            self.firewallPolicies = nil
            self.nextToken = nil
        }
    }
}

public struct ListFirewallPoliciesOutputResponse: Swift.Equatable {
    /// The metadata for the firewall policies. Depending on your setting for max results and the number of firewall policies that you have, this might not be the full list.
    public var firewallPolicies: [NetworkFirewallClientTypes.FirewallPolicyMetadata]?
    /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
    public var nextToken: Swift.String?

    public init (
        firewallPolicies: [NetworkFirewallClientTypes.FirewallPolicyMetadata]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.firewallPolicies = firewallPolicies
        self.nextToken = nextToken
    }
}

struct ListFirewallPoliciesOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let firewallPolicies: [NetworkFirewallClientTypes.FirewallPolicyMetadata]?
}

extension ListFirewallPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallPolicies = "FirewallPolicies"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let firewallPoliciesContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.FirewallPolicyMetadata?].self, forKey: .firewallPolicies)
        var firewallPoliciesDecoded0:[NetworkFirewallClientTypes.FirewallPolicyMetadata]? = nil
        if let firewallPoliciesContainer = firewallPoliciesContainer {
            firewallPoliciesDecoded0 = [NetworkFirewallClientTypes.FirewallPolicyMetadata]()
            for structure0 in firewallPoliciesContainer {
                if let structure0 = structure0 {
                    firewallPoliciesDecoded0?.append(structure0)
                }
            }
        }
        firewallPolicies = firewallPoliciesDecoded0
    }
}

extension ListFirewallsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case vpcIds = "VpcIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let vpcIds = vpcIds {
            var vpcIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vpcIds)
            for vpcid0 in vpcIds {
                try vpcIdsContainer.encode(vpcid0)
            }
        }
    }
}

extension ListFirewallsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListFirewallsInput: Swift.Equatable {
    /// The maximum number of objects that you want Network Firewall to return for this request. If more objects are available, in the response, Network Firewall provides a NextToken value that you can use in a subsequent call to get the next batch of objects.
    public var maxResults: Swift.Int?
    /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
    public var nextToken: Swift.String?
    /// The unique identifiers of the VPCs that you want Network Firewall to retrieve the firewalls for. Leave this blank to retrieve all firewalls that you have defined.
    public var vpcIds: [Swift.String]?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        vpcIds: [Swift.String]? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.vpcIds = vpcIds
    }
}

struct ListFirewallsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let vpcIds: [Swift.String]?
    let maxResults: Swift.Int?
}

extension ListFirewallsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case vpcIds = "VpcIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let vpcIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .vpcIds)
        var vpcIdsDecoded0:[Swift.String]? = nil
        if let vpcIdsContainer = vpcIdsContainer {
            vpcIdsDecoded0 = [Swift.String]()
            for string0 in vpcIdsContainer {
                if let string0 = string0 {
                    vpcIdsDecoded0?.append(string0)
                }
            }
        }
        vpcIds = vpcIdsDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListFirewallsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListFirewallsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListFirewallsOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListFirewallsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListFirewallsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.firewalls = output.firewalls
            self.nextToken = output.nextToken
        } else {
            self.firewalls = nil
            self.nextToken = nil
        }
    }
}

public struct ListFirewallsOutputResponse: Swift.Equatable {
    /// The firewall metadata objects for the VPCs that you specified. Depending on your setting for max results and the number of firewalls you have, a single call might not be the full list.
    public var firewalls: [NetworkFirewallClientTypes.FirewallMetadata]?
    /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
    public var nextToken: Swift.String?

    public init (
        firewalls: [NetworkFirewallClientTypes.FirewallMetadata]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.firewalls = firewalls
        self.nextToken = nextToken
    }
}

struct ListFirewallsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let firewalls: [NetworkFirewallClientTypes.FirewallMetadata]?
}

extension ListFirewallsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewalls = "Firewalls"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let firewallsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.FirewallMetadata?].self, forKey: .firewalls)
        var firewallsDecoded0:[NetworkFirewallClientTypes.FirewallMetadata]? = nil
        if let firewallsContainer = firewallsContainer {
            firewallsDecoded0 = [NetworkFirewallClientTypes.FirewallMetadata]()
            for structure0 in firewallsContainer {
                if let structure0 = structure0 {
                    firewallsDecoded0?.append(structure0)
                }
            }
        }
        firewalls = firewallsDecoded0
    }
}

extension ListRuleGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case managedType = "ManagedType"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case scope = "Scope"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let managedType = self.managedType {
            try encodeContainer.encode(managedType.rawValue, forKey: .managedType)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

extension ListRuleGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListRuleGroupsInput: Swift.Equatable {
    /// Indicates the general category of the Amazon Web Services managed rule group.
    public var managedType: NetworkFirewallClientTypes.ResourceManagedType?
    /// The maximum number of objects that you want Network Firewall to return for this request. If more objects are available, in the response, Network Firewall provides a NextToken value that you can use in a subsequent call to get the next batch of objects.
    public var maxResults: Swift.Int?
    /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
    public var nextToken: Swift.String?
    /// The scope of the request. The default setting of ACCOUNT or a setting of NULL returns all of the rule groups in your account. A setting of MANAGED returns all available managed rule groups.
    public var scope: NetworkFirewallClientTypes.ResourceManagedStatus?
    /// Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules.
    public var type: NetworkFirewallClientTypes.RuleGroupType?

    public init (
        managedType: NetworkFirewallClientTypes.ResourceManagedType? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        scope: NetworkFirewallClientTypes.ResourceManagedStatus? = nil,
        type: NetworkFirewallClientTypes.RuleGroupType? = nil
    )
    {
        self.managedType = managedType
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.scope = scope
        self.type = type
    }
}

struct ListRuleGroupsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let scope: NetworkFirewallClientTypes.ResourceManagedStatus?
    let managedType: NetworkFirewallClientTypes.ResourceManagedType?
    let type: NetworkFirewallClientTypes.RuleGroupType?
}

extension ListRuleGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case managedType = "ManagedType"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case scope = "Scope"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.ResourceManagedStatus.self, forKey: .scope)
        scope = scopeDecoded
        let managedTypeDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.ResourceManagedType.self, forKey: .managedType)
        managedType = managedTypeDecoded
        let typeDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RuleGroupType.self, forKey: .type)
        type = typeDecoded
    }
}

extension ListRuleGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRuleGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListRuleGroupsOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRuleGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListRuleGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.ruleGroups = output.ruleGroups
        } else {
            self.nextToken = nil
            self.ruleGroups = nil
        }
    }
}

public struct ListRuleGroupsOutputResponse: Swift.Equatable {
    /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
    public var nextToken: Swift.String?
    /// The rule group metadata objects that you've defined. Depending on your setting for max results and the number of rule groups, this might not be the full list.
    public var ruleGroups: [NetworkFirewallClientTypes.RuleGroupMetadata]?

    public init (
        nextToken: Swift.String? = nil,
        ruleGroups: [NetworkFirewallClientTypes.RuleGroupMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.ruleGroups = ruleGroups
    }
}

struct ListRuleGroupsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let ruleGroups: [NetworkFirewallClientTypes.RuleGroupMetadata]?
}

extension ListRuleGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case ruleGroups = "RuleGroups"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let ruleGroupsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.RuleGroupMetadata?].self, forKey: .ruleGroups)
        var ruleGroupsDecoded0:[NetworkFirewallClientTypes.RuleGroupMetadata]? = nil
        if let ruleGroupsContainer = ruleGroupsContainer {
            ruleGroupsDecoded0 = [NetworkFirewallClientTypes.RuleGroupMetadata]()
            for structure0 in ruleGroupsContainer {
                if let structure0 = structure0 {
                    ruleGroupsDecoded0?.append(structure0)
                }
            }
        }
        ruleGroups = ruleGroupsDecoded0
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The maximum number of objects that you want Network Firewall to return for this request. If more objects are available, in the response, Network Firewall provides a NextToken value that you can use in a subsequent call to get the next batch of objects.
    public var maxResults: Swift.Int?
    /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let resourceArn: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tags = output.tags
        } else {
            self.nextToken = nil
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
    public var nextToken: Swift.String?
    /// The tags that are associated with the resource.
    public var tags: [NetworkFirewallClientTypes.Tag]?

    public init (
        nextToken: Swift.String? = nil,
        tags: [NetworkFirewallClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let tags: [NetworkFirewallClientTypes.Tag]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[NetworkFirewallClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [NetworkFirewallClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension NetworkFirewallClientTypes.LogDestinationConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logDestination = "LogDestination"
        case logDestinationType = "LogDestinationType"
        case logType = "LogType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logDestination = logDestination {
            var logDestinationContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .logDestination)
            for (dictKey0, logDestinationMap0) in logDestination {
                try logDestinationContainer.encode(logDestinationMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let logDestinationType = self.logDestinationType {
            try encodeContainer.encode(logDestinationType.rawValue, forKey: .logDestinationType)
        }
        if let logType = self.logType {
            try encodeContainer.encode(logType.rawValue, forKey: .logType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logTypeDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.LogType.self, forKey: .logType)
        logType = logTypeDecoded
        let logDestinationTypeDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.LogDestinationType.self, forKey: .logDestinationType)
        logDestinationType = logDestinationTypeDecoded
        let logDestinationContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .logDestination)
        var logDestinationDecoded0: [Swift.String:Swift.String]? = nil
        if let logDestinationContainer = logDestinationContainer {
            logDestinationDecoded0 = [Swift.String:Swift.String]()
            for (key0, hashmapvalue0) in logDestinationContainer {
                if let hashmapvalue0 = hashmapvalue0 {
                    logDestinationDecoded0?[key0] = hashmapvalue0
                }
            }
        }
        logDestination = logDestinationDecoded0
    }
}

extension NetworkFirewallClientTypes {
    /// Defines where Network Firewall sends logs for the firewall for one log type. This is used in [LoggingConfiguration]. You can send each type of log to an Amazon S3 bucket, a CloudWatch log group, or a Kinesis Data Firehose delivery stream. Network Firewall generates logs for stateful rule groups. You can save alert and flow log types. The stateful rules engine records flow logs for all network traffic that it receives. It records alert logs for traffic that matches stateful rules that have the rule action set to DROP or ALERT.
    public struct LogDestinationConfig: Swift.Equatable {
        /// The named location for the logs, provided in a key:value mapping that is specific to the chosen destination type.
        ///
        /// * For an Amazon S3 bucket, provide the name of the bucket, with key bucketName, and optionally provide a prefix, with key prefix. The following example specifies an Amazon S3 bucket named DOC-EXAMPLE-BUCKET and the prefix alerts: "LogDestination": { "bucketName": "DOC-EXAMPLE-BUCKET", "prefix": "alerts" }
        ///
        /// * For a CloudWatch log group, provide the name of the CloudWatch log group, with key logGroup. The following example specifies a log group named alert-log-group: "LogDestination": { "logGroup": "alert-log-group" }
        ///
        /// * For a Kinesis Data Firehose delivery stream, provide the name of the delivery stream, with key deliveryStream. The following example specifies a delivery stream named alert-delivery-stream: "LogDestination": { "deliveryStream": "alert-delivery-stream" }
        /// This member is required.
        public var logDestination: [Swift.String:Swift.String]?
        /// The type of storage destination to send these logs to. You can send logs to an Amazon S3 bucket, a CloudWatch log group, or a Kinesis Data Firehose delivery stream.
        /// This member is required.
        public var logDestinationType: NetworkFirewallClientTypes.LogDestinationType?
        /// The type of log to send. Alert logs report traffic that matches a [StatefulRule] with an action setting that sends an alert log message. Flow logs are standard network traffic flow logs.
        /// This member is required.
        public var logType: NetworkFirewallClientTypes.LogType?

        public init (
            logDestination: [Swift.String:Swift.String]? = nil,
            logDestinationType: NetworkFirewallClientTypes.LogDestinationType? = nil,
            logType: NetworkFirewallClientTypes.LogType? = nil
        )
        {
            self.logDestination = logDestination
            self.logDestinationType = logDestinationType
            self.logType = logType
        }
    }

}

extension LogDestinationPermissionException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: LogDestinationPermissionExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Unable to send logs to a configured logging destination.
public struct LogDestinationPermissionException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LogDestinationPermissionExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension LogDestinationPermissionExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NetworkFirewallClientTypes {
    public enum LogDestinationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cloudwatchLogs
        case kinesisDataFirehose
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [LogDestinationType] {
            return [
                .cloudwatchLogs,
                .kinesisDataFirehose,
                .s3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cloudwatchLogs: return "CloudWatchLogs"
            case .kinesisDataFirehose: return "KinesisDataFirehose"
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogDestinationType(rawValue: rawValue) ?? LogDestinationType.sdkUnknown(rawValue)
        }
    }
}

extension NetworkFirewallClientTypes {
    public enum LogType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case alert
        case flow
        case sdkUnknown(Swift.String)

        public static var allCases: [LogType] {
            return [
                .alert,
                .flow,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .alert: return "ALERT"
            case .flow: return "FLOW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogType(rawValue: rawValue) ?? LogType.sdkUnknown(rawValue)
        }
    }
}

extension NetworkFirewallClientTypes.LoggingConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logDestinationConfigs = "LogDestinationConfigs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logDestinationConfigs = logDestinationConfigs {
            var logDestinationConfigsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logDestinationConfigs)
            for logdestinationconfig0 in logDestinationConfigs {
                try logDestinationConfigsContainer.encode(logdestinationconfig0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logDestinationConfigsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.LogDestinationConfig?].self, forKey: .logDestinationConfigs)
        var logDestinationConfigsDecoded0:[NetworkFirewallClientTypes.LogDestinationConfig]? = nil
        if let logDestinationConfigsContainer = logDestinationConfigsContainer {
            logDestinationConfigsDecoded0 = [NetworkFirewallClientTypes.LogDestinationConfig]()
            for structure0 in logDestinationConfigsContainer {
                if let structure0 = structure0 {
                    logDestinationConfigsDecoded0?.append(structure0)
                }
            }
        }
        logDestinationConfigs = logDestinationConfigsDecoded0
    }
}

extension NetworkFirewallClientTypes {
    /// Defines how Network Firewall performs logging for a [Firewall].
    public struct LoggingConfiguration: Swift.Equatable {
        /// Defines the logging destinations for the logs for a firewall. Network Firewall generates logs for stateful rule groups.
        /// This member is required.
        public var logDestinationConfigs: [NetworkFirewallClientTypes.LogDestinationConfig]?

        public init (
            logDestinationConfigs: [NetworkFirewallClientTypes.LogDestinationConfig]? = nil
        )
        {
            self.logDestinationConfigs = logDestinationConfigs
        }
    }

}

extension NetworkFirewallClientTypes.MatchAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationPorts = "DestinationPorts"
        case destinations = "Destinations"
        case protocols = "Protocols"
        case sourcePorts = "SourcePorts"
        case sources = "Sources"
        case tcpFlags = "TCPFlags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationPorts = destinationPorts {
            var destinationPortsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinationPorts)
            for portrange0 in destinationPorts {
                try destinationPortsContainer.encode(portrange0)
            }
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for address0 in destinations {
                try destinationsContainer.encode(address0)
            }
        }
        if let protocols = protocols {
            var protocolsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .protocols)
            for protocolnumber0 in protocols {
                try protocolsContainer.encode(protocolnumber0)
            }
        }
        if let sourcePorts = sourcePorts {
            var sourcePortsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourcePorts)
            for portrange0 in sourcePorts {
                try sourcePortsContainer.encode(portrange0)
            }
        }
        if let sources = sources {
            var sourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sources)
            for address0 in sources {
                try sourcesContainer.encode(address0)
            }
        }
        if let tcpFlags = tcpFlags {
            var tcpFlagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tcpFlags)
            for tcpflagfield0 in tcpFlags {
                try tcpFlagsContainer.encode(tcpflagfield0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourcesContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.Address?].self, forKey: .sources)
        var sourcesDecoded0:[NetworkFirewallClientTypes.Address]? = nil
        if let sourcesContainer = sourcesContainer {
            sourcesDecoded0 = [NetworkFirewallClientTypes.Address]()
            for structure0 in sourcesContainer {
                if let structure0 = structure0 {
                    sourcesDecoded0?.append(structure0)
                }
            }
        }
        sources = sourcesDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.Address?].self, forKey: .destinations)
        var destinationsDecoded0:[NetworkFirewallClientTypes.Address]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [NetworkFirewallClientTypes.Address]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let sourcePortsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.PortRange?].self, forKey: .sourcePorts)
        var sourcePortsDecoded0:[NetworkFirewallClientTypes.PortRange]? = nil
        if let sourcePortsContainer = sourcePortsContainer {
            sourcePortsDecoded0 = [NetworkFirewallClientTypes.PortRange]()
            for structure0 in sourcePortsContainer {
                if let structure0 = structure0 {
                    sourcePortsDecoded0?.append(structure0)
                }
            }
        }
        sourcePorts = sourcePortsDecoded0
        let destinationPortsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.PortRange?].self, forKey: .destinationPorts)
        var destinationPortsDecoded0:[NetworkFirewallClientTypes.PortRange]? = nil
        if let destinationPortsContainer = destinationPortsContainer {
            destinationPortsDecoded0 = [NetworkFirewallClientTypes.PortRange]()
            for structure0 in destinationPortsContainer {
                if let structure0 = structure0 {
                    destinationPortsDecoded0?.append(structure0)
                }
            }
        }
        destinationPorts = destinationPortsDecoded0
        let protocolsContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .protocols)
        var protocolsDecoded0:[Swift.Int]? = nil
        if let protocolsContainer = protocolsContainer {
            protocolsDecoded0 = [Swift.Int]()
            for integer0 in protocolsContainer {
                if let integer0 = integer0 {
                    protocolsDecoded0?.append(integer0)
                }
            }
        }
        protocols = protocolsDecoded0
        let tcpFlagsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.TCPFlagField?].self, forKey: .tcpFlags)
        var tcpFlagsDecoded0:[NetworkFirewallClientTypes.TCPFlagField]? = nil
        if let tcpFlagsContainer = tcpFlagsContainer {
            tcpFlagsDecoded0 = [NetworkFirewallClientTypes.TCPFlagField]()
            for structure0 in tcpFlagsContainer {
                if let structure0 = structure0 {
                    tcpFlagsDecoded0?.append(structure0)
                }
            }
        }
        tcpFlags = tcpFlagsDecoded0
    }
}

extension NetworkFirewallClientTypes {
    /// Criteria for Network Firewall to use to inspect an individual packet in stateless rule inspection. Each match attributes set can include one or more items such as IP address, CIDR range, port number, protocol, and TCP flags.
    public struct MatchAttributes: Swift.Equatable {
        /// The destination ports to inspect for. If not specified, this matches with any destination port. This setting is only used for protocols 6 (TCP) and 17 (UDP). You can specify individual ports, for example 1994 and you can specify port ranges, for example 1990:1994.
        public var destinationPorts: [NetworkFirewallClientTypes.PortRange]?
        /// The destination IP addresses and address ranges to inspect for, in CIDR notation. If not specified, this matches with any destination address.
        public var destinations: [NetworkFirewallClientTypes.Address]?
        /// The protocols to inspect for, specified using each protocol's assigned internet protocol number (IANA). If not specified, this matches with any protocol.
        public var protocols: [Swift.Int]?
        /// The source ports to inspect for. If not specified, this matches with any source port. This setting is only used for protocols 6 (TCP) and 17 (UDP). You can specify individual ports, for example 1994 and you can specify port ranges, for example 1990:1994.
        public var sourcePorts: [NetworkFirewallClientTypes.PortRange]?
        /// The source IP addresses and address ranges to inspect for, in CIDR notation. If not specified, this matches with any source address.
        public var sources: [NetworkFirewallClientTypes.Address]?
        /// The TCP flags and masks to inspect for. If not specified, this matches with any settings. This setting is only used for protocol 6 (TCP).
        public var tcpFlags: [NetworkFirewallClientTypes.TCPFlagField]?

        public init (
            destinationPorts: [NetworkFirewallClientTypes.PortRange]? = nil,
            destinations: [NetworkFirewallClientTypes.Address]? = nil,
            protocols: [Swift.Int]? = nil,
            sourcePorts: [NetworkFirewallClientTypes.PortRange]? = nil,
            sources: [NetworkFirewallClientTypes.Address]? = nil,
            tcpFlags: [NetworkFirewallClientTypes.TCPFlagField]? = nil
        )
        {
            self.destinationPorts = destinationPorts
            self.destinations = destinations
            self.protocols = protocols
            self.sourcePorts = sourcePorts
            self.sources = sources
            self.tcpFlags = tcpFlags
        }
    }

}

extension NetworkFirewallClientTypes {
    public enum OverrideAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case dropToAlert
        case sdkUnknown(Swift.String)

        public static var allCases: [OverrideAction] {
            return [
                .dropToAlert,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dropToAlert: return "DROP_TO_ALERT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OverrideAction(rawValue: rawValue) ?? OverrideAction.sdkUnknown(rawValue)
        }
    }
}

extension NetworkFirewallClientTypes.PerObjectStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case syncStatus = "SyncStatus"
        case updateToken = "UpdateToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let syncStatus = self.syncStatus {
            try encodeContainer.encode(syncStatus.rawValue, forKey: .syncStatus)
        }
        if let updateToken = self.updateToken {
            try encodeContainer.encode(updateToken, forKey: .updateToken)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let syncStatusDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.PerObjectSyncStatus.self, forKey: .syncStatus)
        syncStatus = syncStatusDecoded
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// Provides configuration status for a single policy or rule group that is used for a firewall endpoint. Network Firewall provides each endpoint with the rules that are configured in the firewall policy. Each time you add a subnet or modify the associated firewall policy, Network Firewall synchronizes the rules in the endpoint, so it can properly filter network traffic. This is part of a [SyncState] for a firewall.
    public struct PerObjectStatus: Swift.Equatable {
        /// Indicates whether this object is in sync with the version indicated in the update token.
        public var syncStatus: NetworkFirewallClientTypes.PerObjectSyncStatus?
        /// The current version of the object that is either in sync or pending synchronization.
        public var updateToken: Swift.String?

        public init (
            syncStatus: NetworkFirewallClientTypes.PerObjectSyncStatus? = nil,
            updateToken: Swift.String? = nil
        )
        {
            self.syncStatus = syncStatus
            self.updateToken = updateToken
        }
    }

}

extension NetworkFirewallClientTypes {
    public enum PerObjectSyncStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case capacityConstrained
        case inSync
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [PerObjectSyncStatus] {
            return [
                .capacityConstrained,
                .inSync,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .capacityConstrained: return "CAPACITY_CONSTRAINED"
            case .inSync: return "IN_SYNC"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PerObjectSyncStatus(rawValue: rawValue) ?? PerObjectSyncStatus.sdkUnknown(rawValue)
        }
    }
}

extension NetworkFirewallClientTypes.PortRange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fromPort = "FromPort"
        case toPort = "ToPort"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if fromPort != 0 {
            try encodeContainer.encode(fromPort, forKey: .fromPort)
        }
        if toPort != 0 {
            try encodeContainer.encode(toPort, forKey: .toPort)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fromPort) ?? 0
        fromPort = fromPortDecoded
        let toPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .toPort) ?? 0
        toPort = toPortDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// A single port range specification. This is used for source and destination port ranges in the stateless rule [MatchAttributes], SourcePorts, and DestinationPorts settings.
    public struct PortRange: Swift.Equatable {
        /// The lower limit of the port range. This must be less than or equal to the ToPort specification.
        /// This member is required.
        public var fromPort: Swift.Int
        /// The upper limit of the port range. This must be greater than or equal to the FromPort specification.
        /// This member is required.
        public var toPort: Swift.Int

        public init (
            fromPort: Swift.Int = 0,
            toPort: Swift.Int = 0
        )
        {
            self.fromPort = fromPort
            self.toPort = toPort
        }
    }

}

extension NetworkFirewallClientTypes.PortSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case definition = "Definition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let definition = definition {
            var definitionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .definition)
            for variabledefinition0 in definition {
                try definitionContainer.encode(variabledefinition0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let definitionContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .definition)
        var definitionDecoded0:[Swift.String]? = nil
        if let definitionContainer = definitionContainer {
            definitionDecoded0 = [Swift.String]()
            for string0 in definitionContainer {
                if let string0 = string0 {
                    definitionDecoded0?.append(string0)
                }
            }
        }
        definition = definitionDecoded0
    }
}

extension NetworkFirewallClientTypes {
    /// A set of port ranges for use in the rules in a rule group.
    public struct PortSet: Swift.Equatable {
        /// The set of port ranges.
        public var definition: [Swift.String]?

        public init (
            definition: [Swift.String]? = nil
        )
        {
            self.definition = definition
        }
    }

}

extension NetworkFirewallClientTypes.PublishMetricAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensions = dimensions {
            var dimensionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensions)
            for dimension0 in dimensions {
                try dimensionsContainer.encode(dimension0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.Dimension?].self, forKey: .dimensions)
        var dimensionsDecoded0:[NetworkFirewallClientTypes.Dimension]? = nil
        if let dimensionsContainer = dimensionsContainer {
            dimensionsDecoded0 = [NetworkFirewallClientTypes.Dimension]()
            for structure0 in dimensionsContainer {
                if let structure0 = structure0 {
                    dimensionsDecoded0?.append(structure0)
                }
            }
        }
        dimensions = dimensionsDecoded0
    }
}

extension NetworkFirewallClientTypes {
    /// Stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. This setting defines a CloudWatch dimension value to be published.
    public struct PublishMetricAction: Swift.Equatable {
        ///
        /// This member is required.
        public var dimensions: [NetworkFirewallClientTypes.Dimension]?

        public init (
            dimensions: [NetworkFirewallClientTypes.Dimension]? = nil
        )
        {
            self.dimensions = dimensions
        }
    }

}

extension PutResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policy = self.policy {
            try encodeContainer.encode(policy, forKey: .policy)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension PutResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutResourcePolicyInput: Swift.Equatable {
    /// The IAM policy statement that lists the accounts that you want to share your rule group or firewall policy with and the operations that you want the accounts to be able to perform. For a rule group resource, you can specify the following operations in the Actions section of the statement:
    ///
    /// * network-firewall:CreateFirewallPolicy
    ///
    /// * network-firewall:UpdateFirewallPolicy
    ///
    /// * network-firewall:ListRuleGroups
    ///
    ///
    /// For a firewall policy resource, you can specify the following operations in the Actions section of the statement:
    ///
    /// * network-firewall:CreateFirewall
    ///
    /// * network-firewall:UpdateFirewall
    ///
    /// * network-firewall:AssociateFirewallPolicy
    ///
    /// * network-firewall:ListFirewallPolicies
    ///
    ///
    /// In the Resource section of the statement, you specify the ARNs for the rule groups and firewall policies that you want to share with the account that you specified in Arn.
    /// This member is required.
    public var policy: Swift.String?
    /// The Amazon Resource Name (ARN) of the account that you want to share rule groups and firewall policies with.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        policy: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.policy = policy
        self.resourceArn = resourceArn
    }
}

struct PutResourcePolicyInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let policy: Swift.String?
}

extension PutResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension PutResourcePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutResourcePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidResourcePolicyException" : self = .invalidResourcePolicyException(try InvalidResourcePolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutResourcePolicyOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case invalidResourcePolicyException(InvalidResourcePolicyException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutResourcePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutResourcePolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension NetworkFirewallClientTypes.ReferenceSets: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipSetReferences = "IPSetReferences"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ipSetReferences = ipSetReferences {
            var ipSetReferencesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .ipSetReferences)
            for (dictKey0, ipSetReferenceMap0) in ipSetReferences {
                try ipSetReferencesContainer.encode(ipSetReferenceMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipSetReferencesContainer = try containerValues.decodeIfPresent([Swift.String: NetworkFirewallClientTypes.IPSetReference?].self, forKey: .ipSetReferences)
        var ipSetReferencesDecoded0: [Swift.String:NetworkFirewallClientTypes.IPSetReference]? = nil
        if let ipSetReferencesContainer = ipSetReferencesContainer {
            ipSetReferencesDecoded0 = [Swift.String:NetworkFirewallClientTypes.IPSetReference]()
            for (key0, ipsetreference0) in ipSetReferencesContainer {
                if let ipsetreference0 = ipsetreference0 {
                    ipSetReferencesDecoded0?[key0] = ipsetreference0
                }
            }
        }
        ipSetReferences = ipSetReferencesDecoded0
    }
}

extension NetworkFirewallClientTypes {
    /// Contains a set of IP set references.
    public struct ReferenceSets: Swift.Equatable {
        /// The list of IP set references.
        public var ipSetReferences: [Swift.String:NetworkFirewallClientTypes.IPSetReference]?

        public init (
            ipSetReferences: [Swift.String:NetworkFirewallClientTypes.IPSetReference]? = nil
        )
        {
            self.ipSetReferences = ipSetReferences
        }
    }

}

extension NetworkFirewallClientTypes {
    public enum ResourceManagedStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case account
        case managed
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceManagedStatus] {
            return [
                .account,
                .managed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .account: return "ACCOUNT"
            case .managed: return "MANAGED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceManagedStatus(rawValue: rawValue) ?? ResourceManagedStatus.sdkUnknown(rawValue)
        }
    }
}

extension NetworkFirewallClientTypes {
    public enum ResourceManagedType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsManagedDomainLists
        case awsManagedThreatSignatures
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceManagedType] {
            return [
                .awsManagedDomainLists,
                .awsManagedThreatSignatures,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsManagedDomainLists: return "AWS_MANAGED_DOMAIN_LISTS"
            case .awsManagedThreatSignatures: return "AWS_MANAGED_THREAT_SIGNATURES"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceManagedType(rawValue: rawValue) ?? ResourceManagedType.sdkUnknown(rawValue)
        }
    }
}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Unable to locate a resource using the parameters that you provided.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceOwnerCheckException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceOwnerCheckExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Unable to change the resource because your account doesn't own it.
public struct ResourceOwnerCheckException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceOwnerCheckExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceOwnerCheckExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NetworkFirewallClientTypes {
    public enum ResourceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceStatus] {
            return [
                .active,
                .deleting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceStatus(rawValue: rawValue) ?? ResourceStatus.sdkUnknown(rawValue)
        }
    }
}

extension NetworkFirewallClientTypes.RuleDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case matchAttributes = "MatchAttributes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for collectionmember_string0 in actions {
                try actionsContainer.encode(collectionmember_string0)
            }
        }
        if let matchAttributes = self.matchAttributes {
            try encodeContainer.encode(matchAttributes, forKey: .matchAttributes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let matchAttributesDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.MatchAttributes.self, forKey: .matchAttributes)
        matchAttributes = matchAttributesDecoded
        let actionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .actions)
        var actionsDecoded0:[Swift.String]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [Swift.String]()
            for string0 in actionsContainer {
                if let string0 = string0 {
                    actionsDecoded0?.append(string0)
                }
            }
        }
        actions = actionsDecoded0
    }
}

extension NetworkFirewallClientTypes {
    /// The inspection criteria and action for a single stateless rule. Network Firewall inspects each packet for the specified matching criteria. When a packet matches the criteria, Network Firewall performs the rule's actions on the packet.
    public struct RuleDefinition: Swift.Equatable {
        /// The actions to take on a packet that matches one of the stateless rule definition's match attributes. You must specify a standard action and you can add custom actions. Network Firewall only forwards a packet for stateful rule inspection if you specify aws:forward_to_sfe for a rule that the packet matches, or if the packet doesn't match any stateless rule and you specify aws:forward_to_sfe for the StatelessDefaultActions setting for the [FirewallPolicy]. For every rule, you must specify exactly one of the following standard actions.
        ///
        /// * aws:pass - Discontinues all inspection of the packet and permits it to go to its intended destination.
        ///
        /// * aws:drop - Discontinues all inspection of the packet and blocks it from going to its intended destination.
        ///
        /// * aws:forward_to_sfe - Discontinues stateless inspection of the packet and forwards it to the stateful rule engine for inspection.
        ///
        ///
        /// Additionally, you can specify a custom action. To do this, you define a custom action by name and type, then provide the name you've assigned to the action in this Actions setting. For information about the options, see [CustomAction]. To provide more than one action in this setting, separate the settings with a comma. For example, if you have a custom PublishMetrics action that you've named MyMetricsAction, then you could specify the standard action aws:pass and the custom action with [“aws:pass”, “MyMetricsAction”].
        /// This member is required.
        public var actions: [Swift.String]?
        /// Criteria for Network Firewall to use to inspect an individual packet in stateless rule inspection. Each match attributes set can include one or more items such as IP address, CIDR range, port number, protocol, and TCP flags.
        /// This member is required.
        public var matchAttributes: NetworkFirewallClientTypes.MatchAttributes?

        public init (
            actions: [Swift.String]? = nil,
            matchAttributes: NetworkFirewallClientTypes.MatchAttributes? = nil
        )
        {
            self.actions = actions
            self.matchAttributes = matchAttributes
        }
    }

}

extension NetworkFirewallClientTypes.RuleGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case referenceSets = "ReferenceSets"
        case ruleVariables = "RuleVariables"
        case rulesSource = "RulesSource"
        case statefulRuleOptions = "StatefulRuleOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let referenceSets = self.referenceSets {
            try encodeContainer.encode(referenceSets, forKey: .referenceSets)
        }
        if let ruleVariables = self.ruleVariables {
            try encodeContainer.encode(ruleVariables, forKey: .ruleVariables)
        }
        if let rulesSource = self.rulesSource {
            try encodeContainer.encode(rulesSource, forKey: .rulesSource)
        }
        if let statefulRuleOptions = self.statefulRuleOptions {
            try encodeContainer.encode(statefulRuleOptions, forKey: .statefulRuleOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleVariablesDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RuleVariables.self, forKey: .ruleVariables)
        ruleVariables = ruleVariablesDecoded
        let referenceSetsDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.ReferenceSets.self, forKey: .referenceSets)
        referenceSets = referenceSetsDecoded
        let rulesSourceDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RulesSource.self, forKey: .rulesSource)
        rulesSource = rulesSourceDecoded
        let statefulRuleOptionsDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.StatefulRuleOptions.self, forKey: .statefulRuleOptions)
        statefulRuleOptions = statefulRuleOptionsDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// The object that defines the rules in a rule group. This, along with [RuleGroupResponse], define the rule group. You can retrieve all objects for a rule group by calling [DescribeRuleGroup]. Network Firewall uses a rule group to inspect and control network traffic. You define stateless rule groups to inspect individual packets and you define stateful rule groups to inspect packets in the context of their traffic flow. To use a rule group, you include it by reference in an Network Firewall firewall policy, then you use the policy in a firewall. You can reference a rule group from more than one firewall policy, and you can use a firewall policy in more than one firewall.
    public struct RuleGroup: Swift.Equatable {
        /// The list of a rule group's reference sets.
        public var referenceSets: NetworkFirewallClientTypes.ReferenceSets?
        /// Settings that are available for use in the rules in the rule group. You can only use these for stateful rule groups.
        public var ruleVariables: NetworkFirewallClientTypes.RuleVariables?
        /// The stateful rules or stateless rules for the rule group.
        /// This member is required.
        public var rulesSource: NetworkFirewallClientTypes.RulesSource?
        /// Additional options governing how Network Firewall handles stateful rules. The policies where you use your stateful rule group must have stateful rule options settings that are compatible with these settings.
        public var statefulRuleOptions: NetworkFirewallClientTypes.StatefulRuleOptions?

        public init (
            referenceSets: NetworkFirewallClientTypes.ReferenceSets? = nil,
            ruleVariables: NetworkFirewallClientTypes.RuleVariables? = nil,
            rulesSource: NetworkFirewallClientTypes.RulesSource? = nil,
            statefulRuleOptions: NetworkFirewallClientTypes.StatefulRuleOptions? = nil
        )
        {
            self.referenceSets = referenceSets
            self.ruleVariables = ruleVariables
            self.rulesSource = rulesSource
            self.statefulRuleOptions = statefulRuleOptions
        }
    }

}

extension NetworkFirewallClientTypes.RuleGroupMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// High-level information about a rule group, returned by [ListRuleGroups]. You can use the information provided in the metadata to retrieve and manage a rule group.
    public struct RuleGroupMetadata: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the rule group.
        public var arn: Swift.String?
        /// The descriptive name of the rule group. You can't change the name of a rule group after you create it.
        public var name: Swift.String?

        public init (
            arn: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.name = name
        }
    }

}

extension NetworkFirewallClientTypes.RuleGroupResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacity = "Capacity"
        case consumedCapacity = "ConsumedCapacity"
        case description = "Description"
        case encryptionConfiguration = "EncryptionConfiguration"
        case lastModifiedTime = "LastModifiedTime"
        case numberOfAssociations = "NumberOfAssociations"
        case ruleGroupArn = "RuleGroupArn"
        case ruleGroupId = "RuleGroupId"
        case ruleGroupName = "RuleGroupName"
        case ruleGroupStatus = "RuleGroupStatus"
        case snsTopic = "SnsTopic"
        case sourceMetadata = "SourceMetadata"
        case tags = "Tags"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacity = self.capacity {
            try encodeContainer.encode(capacity, forKey: .capacity)
        }
        if let consumedCapacity = self.consumedCapacity {
            try encodeContainer.encode(consumedCapacity, forKey: .consumedCapacity)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let encryptionConfiguration = self.encryptionConfiguration {
            try encodeContainer.encode(encryptionConfiguration, forKey: .encryptionConfiguration)
        }
        if let lastModifiedTime = self.lastModifiedTime {
            try encodeContainer.encodeTimestamp(lastModifiedTime, format: .epochSeconds, forKey: .lastModifiedTime)
        }
        if let numberOfAssociations = self.numberOfAssociations {
            try encodeContainer.encode(numberOfAssociations, forKey: .numberOfAssociations)
        }
        if let ruleGroupArn = self.ruleGroupArn {
            try encodeContainer.encode(ruleGroupArn, forKey: .ruleGroupArn)
        }
        if let ruleGroupId = self.ruleGroupId {
            try encodeContainer.encode(ruleGroupId, forKey: .ruleGroupId)
        }
        if let ruleGroupName = self.ruleGroupName {
            try encodeContainer.encode(ruleGroupName, forKey: .ruleGroupName)
        }
        if let ruleGroupStatus = self.ruleGroupStatus {
            try encodeContainer.encode(ruleGroupStatus.rawValue, forKey: .ruleGroupStatus)
        }
        if let snsTopic = self.snsTopic {
            try encodeContainer.encode(snsTopic, forKey: .snsTopic)
        }
        if let sourceMetadata = self.sourceMetadata {
            try encodeContainer.encode(sourceMetadata, forKey: .sourceMetadata)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupArn)
        ruleGroupArn = ruleGroupArnDecoded
        let ruleGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupName)
        ruleGroupName = ruleGroupNameDecoded
        let ruleGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupId)
        ruleGroupId = ruleGroupIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let typeDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RuleGroupType.self, forKey: .type)
        type = typeDecoded
        let capacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .capacity)
        capacity = capacityDecoded
        let ruleGroupStatusDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.ResourceStatus.self, forKey: .ruleGroupStatus)
        ruleGroupStatus = ruleGroupStatusDecoded
        let tagsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[NetworkFirewallClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [NetworkFirewallClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let consumedCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .consumedCapacity)
        consumedCapacity = consumedCapacityDecoded
        let numberOfAssociationsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfAssociations)
        numberOfAssociations = numberOfAssociationsDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
        let sourceMetadataDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.SourceMetadata.self, forKey: .sourceMetadata)
        sourceMetadata = sourceMetadataDecoded
        let snsTopicDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopic)
        snsTopic = snsTopicDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// The high-level properties of a rule group. This, along with the [RuleGroup], define the rule group. You can retrieve all objects for a rule group by calling [DescribeRuleGroup].
    public struct RuleGroupResponse: Swift.Equatable {
        /// The maximum operating resources that this rule group can use. Rule group capacity is fixed at creation. When you update a rule group, you are limited to this capacity. When you reference a rule group from a firewall policy, Network Firewall reserves this capacity for the rule group. You can retrieve the capacity that would be required for a rule group before you create the rule group by calling [CreateRuleGroup] with DryRun set to TRUE.
        public var capacity: Swift.Int?
        /// The number of capacity units currently consumed by the rule group rules.
        public var consumedCapacity: Swift.Int?
        /// A description of the rule group.
        public var description: Swift.String?
        /// A complex type that contains the Amazon Web Services KMS encryption configuration settings for your rule group.
        public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
        /// The last time that the rule group was changed.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The number of firewall policies that use this rule group.
        public var numberOfAssociations: Swift.Int?
        /// The Amazon Resource Name (ARN) of the rule group. If this response is for a create request that had DryRun set to TRUE, then this ARN is a placeholder that isn't attached to a valid resource.
        /// This member is required.
        public var ruleGroupArn: Swift.String?
        /// The unique identifier for the rule group.
        /// This member is required.
        public var ruleGroupId: Swift.String?
        /// The descriptive name of the rule group. You can't change the name of a rule group after you create it.
        /// This member is required.
        public var ruleGroupName: Swift.String?
        /// Detailed information about the current status of a rule group.
        public var ruleGroupStatus: NetworkFirewallClientTypes.ResourceStatus?
        /// The Amazon resource name (ARN) of the Amazon Simple Notification Service SNS topic that's used to record changes to the managed rule group. You can subscribe to the SNS topic to receive notifications when the managed rule group is modified, such as for new versions and for version expiration. For more information, see the [Amazon Simple Notification Service Developer Guide.](https://docs.aws.amazon.com/sns/latest/dg/welcome.html).
        public var snsTopic: Swift.String?
        /// A complex type that contains metadata about the rule group that your own rule group is copied from. You can use the metadata to track the version updates made to the originating rule group.
        public var sourceMetadata: NetworkFirewallClientTypes.SourceMetadata?
        /// The key:value pairs to associate with the resource.
        public var tags: [NetworkFirewallClientTypes.Tag]?
        /// Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules.
        public var type: NetworkFirewallClientTypes.RuleGroupType?

        public init (
            capacity: Swift.Int? = nil,
            consumedCapacity: Swift.Int? = nil,
            description: Swift.String? = nil,
            encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            numberOfAssociations: Swift.Int? = nil,
            ruleGroupArn: Swift.String? = nil,
            ruleGroupId: Swift.String? = nil,
            ruleGroupName: Swift.String? = nil,
            ruleGroupStatus: NetworkFirewallClientTypes.ResourceStatus? = nil,
            snsTopic: Swift.String? = nil,
            sourceMetadata: NetworkFirewallClientTypes.SourceMetadata? = nil,
            tags: [NetworkFirewallClientTypes.Tag]? = nil,
            type: NetworkFirewallClientTypes.RuleGroupType? = nil
        )
        {
            self.capacity = capacity
            self.consumedCapacity = consumedCapacity
            self.description = description
            self.encryptionConfiguration = encryptionConfiguration
            self.lastModifiedTime = lastModifiedTime
            self.numberOfAssociations = numberOfAssociations
            self.ruleGroupArn = ruleGroupArn
            self.ruleGroupId = ruleGroupId
            self.ruleGroupName = ruleGroupName
            self.ruleGroupStatus = ruleGroupStatus
            self.snsTopic = snsTopic
            self.sourceMetadata = sourceMetadata
            self.tags = tags
            self.type = type
        }
    }

}

extension NetworkFirewallClientTypes {
    public enum RuleGroupType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case stateful
        case stateless
        case sdkUnknown(Swift.String)

        public static var allCases: [RuleGroupType] {
            return [
                .stateful,
                .stateless,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .stateful: return "STATEFUL"
            case .stateless: return "STATELESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RuleGroupType(rawValue: rawValue) ?? RuleGroupType.sdkUnknown(rawValue)
        }
    }
}

extension NetworkFirewallClientTypes.RuleOption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyword = "Keyword"
        case settings = "Settings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyword = self.keyword {
            try encodeContainer.encode(keyword, forKey: .keyword)
        }
        if let settings = settings {
            var settingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .settings)
            for setting0 in settings {
                try settingsContainer.encode(setting0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keywordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyword)
        keyword = keywordDecoded
        let settingsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .settings)
        var settingsDecoded0:[Swift.String]? = nil
        if let settingsContainer = settingsContainer {
            settingsDecoded0 = [Swift.String]()
            for string0 in settingsContainer {
                if let string0 = string0 {
                    settingsDecoded0?.append(string0)
                }
            }
        }
        settings = settingsDecoded0
    }
}

extension NetworkFirewallClientTypes {
    /// Additional settings for a stateful rule. This is part of the [StatefulRule] configuration.
    public struct RuleOption: Swift.Equatable {
        ///
        /// This member is required.
        public var keyword: Swift.String?
        ///
        public var settings: [Swift.String]?

        public init (
            keyword: Swift.String? = nil,
            settings: [Swift.String]? = nil
        )
        {
            self.keyword = keyword
            self.settings = settings
        }
    }

}

extension NetworkFirewallClientTypes {
    public enum RuleOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case defaultActionOrder
        case strictOrder
        case sdkUnknown(Swift.String)

        public static var allCases: [RuleOrder] {
            return [
                .defaultActionOrder,
                .strictOrder,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .defaultActionOrder: return "DEFAULT_ACTION_ORDER"
            case .strictOrder: return "STRICT_ORDER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RuleOrder(rawValue: rawValue) ?? RuleOrder.sdkUnknown(rawValue)
        }
    }
}

extension NetworkFirewallClientTypes.RuleVariables: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipSets = "IPSets"
        case portSets = "PortSets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ipSets = ipSets {
            var ipSetsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .ipSets)
            for (dictKey0, ipSets0) in ipSets {
                try ipSetsContainer.encode(ipSets0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let portSets = portSets {
            var portSetsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .portSets)
            for (dictKey0, portSets0) in portSets {
                try portSetsContainer.encode(portSets0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipSetsContainer = try containerValues.decodeIfPresent([Swift.String: NetworkFirewallClientTypes.IPSet?].self, forKey: .ipSets)
        var ipSetsDecoded0: [Swift.String:NetworkFirewallClientTypes.IPSet]? = nil
        if let ipSetsContainer = ipSetsContainer {
            ipSetsDecoded0 = [Swift.String:NetworkFirewallClientTypes.IPSet]()
            for (key0, ipset0) in ipSetsContainer {
                if let ipset0 = ipset0 {
                    ipSetsDecoded0?[key0] = ipset0
                }
            }
        }
        ipSets = ipSetsDecoded0
        let portSetsContainer = try containerValues.decodeIfPresent([Swift.String: NetworkFirewallClientTypes.PortSet?].self, forKey: .portSets)
        var portSetsDecoded0: [Swift.String:NetworkFirewallClientTypes.PortSet]? = nil
        if let portSetsContainer = portSetsContainer {
            portSetsDecoded0 = [Swift.String:NetworkFirewallClientTypes.PortSet]()
            for (key0, portset0) in portSetsContainer {
                if let portset0 = portset0 {
                    portSetsDecoded0?[key0] = portset0
                }
            }
        }
        portSets = portSetsDecoded0
    }
}

extension NetworkFirewallClientTypes {
    /// Settings that are available for use in the rules in the [RuleGroup] where this is defined.
    public struct RuleVariables: Swift.Equatable {
        /// A list of IP addresses and address ranges, in CIDR notation.
        public var ipSets: [Swift.String:NetworkFirewallClientTypes.IPSet]?
        /// A list of port ranges.
        public var portSets: [Swift.String:NetworkFirewallClientTypes.PortSet]?

        public init (
            ipSets: [Swift.String:NetworkFirewallClientTypes.IPSet]? = nil,
            portSets: [Swift.String:NetworkFirewallClientTypes.PortSet]? = nil
        )
        {
            self.ipSets = ipSets
            self.portSets = portSets
        }
    }

}

extension NetworkFirewallClientTypes.RulesSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rulesSourceList = "RulesSourceList"
        case rulesString = "RulesString"
        case statefulRules = "StatefulRules"
        case statelessRulesAndCustomActions = "StatelessRulesAndCustomActions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let rulesSourceList = self.rulesSourceList {
            try encodeContainer.encode(rulesSourceList, forKey: .rulesSourceList)
        }
        if let rulesString = self.rulesString {
            try encodeContainer.encode(rulesString, forKey: .rulesString)
        }
        if let statefulRules = statefulRules {
            var statefulRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statefulRules)
            for statefulrule0 in statefulRules {
                try statefulRulesContainer.encode(statefulrule0)
            }
        }
        if let statelessRulesAndCustomActions = self.statelessRulesAndCustomActions {
            try encodeContainer.encode(statelessRulesAndCustomActions, forKey: .statelessRulesAndCustomActions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rulesStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rulesString)
        rulesString = rulesStringDecoded
        let rulesSourceListDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RulesSourceList.self, forKey: .rulesSourceList)
        rulesSourceList = rulesSourceListDecoded
        let statefulRulesContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.StatefulRule?].self, forKey: .statefulRules)
        var statefulRulesDecoded0:[NetworkFirewallClientTypes.StatefulRule]? = nil
        if let statefulRulesContainer = statefulRulesContainer {
            statefulRulesDecoded0 = [NetworkFirewallClientTypes.StatefulRule]()
            for structure0 in statefulRulesContainer {
                if let structure0 = structure0 {
                    statefulRulesDecoded0?.append(structure0)
                }
            }
        }
        statefulRules = statefulRulesDecoded0
        let statelessRulesAndCustomActionsDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.StatelessRulesAndCustomActions.self, forKey: .statelessRulesAndCustomActions)
        statelessRulesAndCustomActions = statelessRulesAndCustomActionsDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// The stateless or stateful rules definitions for use in a single rule group. Each rule group requires a single RulesSource. You can use an instance of this for either stateless rules or stateful rules.
    public struct RulesSource: Swift.Equatable {
        /// Stateful inspection criteria for a domain list rule group.
        public var rulesSourceList: NetworkFirewallClientTypes.RulesSourceList?
        /// Stateful inspection criteria, provided in Suricata compatible intrusion prevention system (IPS) rules. Suricata is an open-source network IPS that includes a standard rule-based language for network traffic inspection. These rules contain the inspection criteria and the action to take for traffic that matches the criteria, so this type of rule group doesn't have a separate action setting.
        public var rulesString: Swift.String?
        /// An array of individual stateful rules inspection criteria to be used together in a stateful rule group. Use this option to specify simple Suricata rules with protocol, source and destination, ports, direction, and rule options. For information about the Suricata Rules format, see [Rules Format](https://suricata.readthedocs.io/rules/intro.html#).
        public var statefulRules: [NetworkFirewallClientTypes.StatefulRule]?
        /// Stateless inspection criteria to be used in a stateless rule group.
        public var statelessRulesAndCustomActions: NetworkFirewallClientTypes.StatelessRulesAndCustomActions?

        public init (
            rulesSourceList: NetworkFirewallClientTypes.RulesSourceList? = nil,
            rulesString: Swift.String? = nil,
            statefulRules: [NetworkFirewallClientTypes.StatefulRule]? = nil,
            statelessRulesAndCustomActions: NetworkFirewallClientTypes.StatelessRulesAndCustomActions? = nil
        )
        {
            self.rulesSourceList = rulesSourceList
            self.rulesString = rulesString
            self.statefulRules = statefulRules
            self.statelessRulesAndCustomActions = statelessRulesAndCustomActions
        }
    }

}

extension NetworkFirewallClientTypes.RulesSourceList: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case generatedRulesType = "GeneratedRulesType"
        case targetTypes = "TargetTypes"
        case targets = "Targets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let generatedRulesType = self.generatedRulesType {
            try encodeContainer.encode(generatedRulesType.rawValue, forKey: .generatedRulesType)
        }
        if let targetTypes = targetTypes {
            var targetTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetTypes)
            for targettype0 in targetTypes {
                try targetTypesContainer.encode(targettype0.rawValue)
            }
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targets)
            for collectionmember_string0 in targets {
                try targetsContainer.encode(collectionmember_string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targets)
        var targetsDecoded0:[Swift.String]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [Swift.String]()
            for string0 in targetsContainer {
                if let string0 = string0 {
                    targetsDecoded0?.append(string0)
                }
            }
        }
        targets = targetsDecoded0
        let targetTypesContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.TargetType?].self, forKey: .targetTypes)
        var targetTypesDecoded0:[NetworkFirewallClientTypes.TargetType]? = nil
        if let targetTypesContainer = targetTypesContainer {
            targetTypesDecoded0 = [NetworkFirewallClientTypes.TargetType]()
            for enum0 in targetTypesContainer {
                if let enum0 = enum0 {
                    targetTypesDecoded0?.append(enum0)
                }
            }
        }
        targetTypes = targetTypesDecoded0
        let generatedRulesTypeDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.GeneratedRulesType.self, forKey: .generatedRulesType)
        generatedRulesType = generatedRulesTypeDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// Stateful inspection criteria for a domain list rule group. For HTTPS traffic, domain filtering is SNI-based. It uses the server name indicator extension of the TLS handshake. By default, Network Firewall domain list inspection only includes traffic coming from the VPC where you deploy the firewall. To inspect traffic from IP addresses outside of the deployment VPC, you set the HOME_NET rule variable to include the CIDR range of the deployment VPC plus the other CIDR ranges. For more information, see [RuleVariables] in this guide and [Stateful domain list rule groups in Network Firewall](https://docs.aws.amazon.com/network-firewall/latest/developerguide/stateful-rule-groups-domain-names.html) in the Network Firewall Developer Guide.
    public struct RulesSourceList: Swift.Equatable {
        /// Whether you want to allow or deny access to the domains in your target list.
        /// This member is required.
        public var generatedRulesType: NetworkFirewallClientTypes.GeneratedRulesType?
        /// The protocols you want to inspect. Specify TLS_SNI for HTTPS. Specify HTTP_HOST for HTTP. You can specify either or both.
        /// This member is required.
        public var targetTypes: [NetworkFirewallClientTypes.TargetType]?
        /// The domains that you want to inspect for in your traffic flows. Valid domain specifications are the following:
        ///
        /// * Explicit names. For example, abc.example.com matches only the domain abc.example.com.
        ///
        /// * Names that use a domain wildcard, which you indicate with an initial '.'. For example,.example.com matches example.com and matches all subdomains of example.com, such as abc.example.com and www.example.com.
        /// This member is required.
        public var targets: [Swift.String]?

        public init (
            generatedRulesType: NetworkFirewallClientTypes.GeneratedRulesType? = nil,
            targetTypes: [NetworkFirewallClientTypes.TargetType]? = nil,
            targets: [Swift.String]? = nil
        )
        {
            self.generatedRulesType = generatedRulesType
            self.targetTypes = targetTypes
            self.targets = targets
        }
    }

}

extension NetworkFirewallClientTypes.SourceMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceArn = "SourceArn"
        case sourceUpdateToken = "SourceUpdateToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourceArn = self.sourceArn {
            try encodeContainer.encode(sourceArn, forKey: .sourceArn)
        }
        if let sourceUpdateToken = self.sourceUpdateToken {
            try encodeContainer.encode(sourceUpdateToken, forKey: .sourceUpdateToken)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let sourceUpdateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceUpdateToken)
        sourceUpdateToken = sourceUpdateTokenDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// High-level information about the managed rule group that your own rule group is copied from. You can use the the metadata to track version updates made to the originating rule group. You can retrieve all objects for a rule group by calling [DescribeRuleGroup](https://docs.aws.amazon.com/network-firewall/latest/APIReference/API_DescribeRuleGroup.html).
    public struct SourceMetadata: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the rule group that your own rule group is copied from.
        public var sourceArn: Swift.String?
        /// The update token of the Amazon Web Services managed rule group that your own rule group is copied from. To determine the update token for the managed rule group, call [DescribeRuleGroup](https://docs.aws.amazon.com/network-firewall/latest/APIReference/API_DescribeRuleGroup.html#networkfirewall-DescribeRuleGroup-response-UpdateToken).
        public var sourceUpdateToken: Swift.String?

        public init (
            sourceArn: Swift.String? = nil,
            sourceUpdateToken: Swift.String? = nil
        )
        {
            self.sourceArn = sourceArn
            self.sourceUpdateToken = sourceUpdateToken
        }
    }

}

extension NetworkFirewallClientTypes {
    public enum StatefulAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case alert
        case drop
        case pass
        case sdkUnknown(Swift.String)

        public static var allCases: [StatefulAction] {
            return [
                .alert,
                .drop,
                .pass,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .alert: return "ALERT"
            case .drop: return "DROP"
            case .pass: return "PASS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StatefulAction(rawValue: rawValue) ?? StatefulAction.sdkUnknown(rawValue)
        }
    }
}

extension NetworkFirewallClientTypes.StatefulEngineOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleOrder = "RuleOrder"
        case streamExceptionPolicy = "StreamExceptionPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ruleOrder = self.ruleOrder {
            try encodeContainer.encode(ruleOrder.rawValue, forKey: .ruleOrder)
        }
        if let streamExceptionPolicy = self.streamExceptionPolicy {
            try encodeContainer.encode(streamExceptionPolicy.rawValue, forKey: .streamExceptionPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleOrderDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RuleOrder.self, forKey: .ruleOrder)
        ruleOrder = ruleOrderDecoded
        let streamExceptionPolicyDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.StreamExceptionPolicy.self, forKey: .streamExceptionPolicy)
        streamExceptionPolicy = streamExceptionPolicyDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// Configuration settings for the handling of the stateful rule groups in a firewall policy.
    public struct StatefulEngineOptions: Swift.Equatable {
        /// Indicates how to manage the order of stateful rule evaluation for the policy. DEFAULT_ACTION_ORDER is the default behavior. Stateful rules are provided to the rule engine as Suricata compatible strings, and Suricata evaluates them based on certain settings. For more information, see [Evaluation order for stateful rules](https://docs.aws.amazon.com/network-firewall/latest/developerguide/suricata-rule-evaluation-order.html) in the Network Firewall Developer Guide.
        public var ruleOrder: NetworkFirewallClientTypes.RuleOrder?
        /// Configures how Network Firewall processes traffic when a network connection breaks midstream. Network connections can break due to disruptions in external networks or within the firewall itself.
        ///
        /// * DROP - Network Firewall fails closed and drops all subsequent traffic going to the firewall. This is the default behavior.
        ///
        /// * CONTINUE - Network Firewall continues to apply rules to the subsequent traffic without context from traffic before the break. This impacts the behavior of rules that depend on this context. For example, if you have a stateful rule to drop http traffic, Network Firewall won't match the traffic for this rule because the service won't have the context from session initialization defining the application layer protocol as HTTP. However, this behavior is rule dependent—a TCP-layer rule using a flow:stateless rule would still match, as would the aws:drop_strict default action.
        public var streamExceptionPolicy: NetworkFirewallClientTypes.StreamExceptionPolicy?

        public init (
            ruleOrder: NetworkFirewallClientTypes.RuleOrder? = nil,
            streamExceptionPolicy: NetworkFirewallClientTypes.StreamExceptionPolicy? = nil
        )
        {
            self.ruleOrder = ruleOrder
            self.streamExceptionPolicy = streamExceptionPolicy
        }
    }

}

extension NetworkFirewallClientTypes.StatefulRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case header = "Header"
        case ruleOptions = "RuleOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let header = self.header {
            try encodeContainer.encode(header, forKey: .header)
        }
        if let ruleOptions = ruleOptions {
            var ruleOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ruleOptions)
            for ruleoption0 in ruleOptions {
                try ruleOptionsContainer.encode(ruleoption0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.StatefulAction.self, forKey: .action)
        action = actionDecoded
        let headerDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.Header.self, forKey: .header)
        header = headerDecoded
        let ruleOptionsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.RuleOption?].self, forKey: .ruleOptions)
        var ruleOptionsDecoded0:[NetworkFirewallClientTypes.RuleOption]? = nil
        if let ruleOptionsContainer = ruleOptionsContainer {
            ruleOptionsDecoded0 = [NetworkFirewallClientTypes.RuleOption]()
            for structure0 in ruleOptionsContainer {
                if let structure0 = structure0 {
                    ruleOptionsDecoded0?.append(structure0)
                }
            }
        }
        ruleOptions = ruleOptionsDecoded0
    }
}

extension NetworkFirewallClientTypes {
    /// A single Suricata rules specification, for use in a stateful rule group. Use this option to specify a simple Suricata rule with protocol, source and destination, ports, direction, and rule options. For information about the Suricata Rules format, see [Rules Format](https://suricata.readthedocs.io/rules/intro.html#).
    public struct StatefulRule: Swift.Equatable {
        /// Defines what Network Firewall should do with the packets in a traffic flow when the flow matches the stateful rule criteria. For all actions, Network Firewall performs the specified action and discontinues stateful inspection of the traffic flow. The actions for a stateful rule are defined as follows:
        ///
        /// * PASS - Permits the packets to go to the intended destination.
        ///
        /// * DROP - Blocks the packets from going to the intended destination and sends an alert log message, if alert logging is configured in the [Firewall][LoggingConfiguration].
        ///
        /// * ALERT - Permits the packets to go to the intended destination and sends an alert log message, if alert logging is configured in the [Firewall][LoggingConfiguration]. You can use this action to test a rule that you intend to use to drop traffic. You can enable the rule with ALERT action, verify in the logs that the rule is filtering as you want, then change the action to DROP.
        /// This member is required.
        public var action: NetworkFirewallClientTypes.StatefulAction?
        /// The stateful inspection criteria for this rule, used to inspect traffic flows.
        /// This member is required.
        public var header: NetworkFirewallClientTypes.Header?
        /// Additional options for the rule. These are the Suricata RuleOptions settings.
        /// This member is required.
        public var ruleOptions: [NetworkFirewallClientTypes.RuleOption]?

        public init (
            action: NetworkFirewallClientTypes.StatefulAction? = nil,
            header: NetworkFirewallClientTypes.Header? = nil,
            ruleOptions: [NetworkFirewallClientTypes.RuleOption]? = nil
        )
        {
            self.action = action
            self.header = header
            self.ruleOptions = ruleOptions
        }
    }

}

extension NetworkFirewallClientTypes {
    public enum StatefulRuleDirection: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case any
        case forward
        case sdkUnknown(Swift.String)

        public static var allCases: [StatefulRuleDirection] {
            return [
                .any,
                .forward,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .any: return "ANY"
            case .forward: return "FORWARD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StatefulRuleDirection(rawValue: rawValue) ?? StatefulRuleDirection.sdkUnknown(rawValue)
        }
    }
}

extension NetworkFirewallClientTypes.StatefulRuleGroupOverride: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.OverrideAction.self, forKey: .action)
        action = actionDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// The setting that allows the policy owner to change the behavior of the rule group within a policy.
    public struct StatefulRuleGroupOverride: Swift.Equatable {
        /// The action that changes the rule group from DROP to ALERT. This only applies to managed rule groups.
        public var action: NetworkFirewallClientTypes.OverrideAction?

        public init (
            action: NetworkFirewallClientTypes.OverrideAction? = nil
        )
        {
            self.action = action
        }
    }

}

extension NetworkFirewallClientTypes.StatefulRuleGroupReference: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case `override` = "Override"
        case priority = "Priority"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let `override` = self.`override` {
            try encodeContainer.encode(`override`, forKey: .`override`)
        }
        if let priority = self.priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let overrideDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.StatefulRuleGroupOverride.self, forKey: .override)
        `override` = overrideDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// Identifier for a single stateful rule group, used in a firewall policy to refer to a rule group.
    public struct StatefulRuleGroupReference: Swift.Equatable {
        /// The action that allows the policy owner to override the behavior of the rule group within a policy.
        public var `override`: NetworkFirewallClientTypes.StatefulRuleGroupOverride?
        /// An integer setting that indicates the order in which to run the stateful rule groups in a single [FirewallPolicy]. This setting only applies to firewall policies that specify the STRICT_ORDER rule order in the stateful engine options settings. Network Firewall evalutes each stateful rule group against a packet starting with the group that has the lowest priority setting. You must ensure that the priority settings are unique within each policy. You can change the priority settings of your rule groups at any time. To make it easier to insert rule groups later, number them so there's a wide range in between, for example use 100, 200, and so on.
        public var priority: Swift.Int?
        /// The Amazon Resource Name (ARN) of the stateful rule group.
        /// This member is required.
        public var resourceArn: Swift.String?

        public init (
            `override`: NetworkFirewallClientTypes.StatefulRuleGroupOverride? = nil,
            priority: Swift.Int? = nil,
            resourceArn: Swift.String? = nil
        )
        {
            self.`override` = `override`
            self.priority = priority
            self.resourceArn = resourceArn
        }
    }

}

extension NetworkFirewallClientTypes.StatefulRuleOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleOrder = "RuleOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ruleOrder = self.ruleOrder {
            try encodeContainer.encode(ruleOrder.rawValue, forKey: .ruleOrder)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleOrderDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RuleOrder.self, forKey: .ruleOrder)
        ruleOrder = ruleOrderDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// Additional options governing how Network Firewall handles the rule group. You can only use these for stateful rule groups.
    public struct StatefulRuleOptions: Swift.Equatable {
        /// Indicates how to manage the order of the rule evaluation for the rule group. DEFAULT_ACTION_ORDER is the default behavior. Stateful rules are provided to the rule engine as Suricata compatible strings, and Suricata evaluates them based on certain settings. For more information, see [Evaluation order for stateful rules](https://docs.aws.amazon.com/network-firewall/latest/developerguide/suricata-rule-evaluation-order.html) in the Network Firewall Developer Guide.
        public var ruleOrder: NetworkFirewallClientTypes.RuleOrder?

        public init (
            ruleOrder: NetworkFirewallClientTypes.RuleOrder? = nil
        )
        {
            self.ruleOrder = ruleOrder
        }
    }

}

extension NetworkFirewallClientTypes {
    public enum StatefulRuleProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case any
        case dcerpc
        case dhcp
        case dns
        case ftp
        case http
        case icmp
        case ikev2
        case imap
        case krb5
        case msn
        case ntp
        case smb
        case smtp
        case ssh
        case tcp
        case tftp
        case tls
        case udp
        case sdkUnknown(Swift.String)

        public static var allCases: [StatefulRuleProtocol] {
            return [
                .any,
                .dcerpc,
                .dhcp,
                .dns,
                .ftp,
                .http,
                .icmp,
                .ikev2,
                .imap,
                .krb5,
                .msn,
                .ntp,
                .smb,
                .smtp,
                .ssh,
                .tcp,
                .tftp,
                .tls,
                .udp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .any: return "IP"
            case .dcerpc: return "DCERPC"
            case .dhcp: return "DHCP"
            case .dns: return "DNS"
            case .ftp: return "FTP"
            case .http: return "HTTP"
            case .icmp: return "ICMP"
            case .ikev2: return "IKEV2"
            case .imap: return "IMAP"
            case .krb5: return "KRB5"
            case .msn: return "MSN"
            case .ntp: return "NTP"
            case .smb: return "SMB"
            case .smtp: return "SMTP"
            case .ssh: return "SSH"
            case .tcp: return "TCP"
            case .tftp: return "TFTP"
            case .tls: return "TLS"
            case .udp: return "UDP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StatefulRuleProtocol(rawValue: rawValue) ?? StatefulRuleProtocol.sdkUnknown(rawValue)
        }
    }
}

extension NetworkFirewallClientTypes.StatelessRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case priority = "Priority"
        case ruleDefinition = "RuleDefinition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let ruleDefinition = self.ruleDefinition {
            try encodeContainer.encode(ruleDefinition, forKey: .ruleDefinition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleDefinitionDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RuleDefinition.self, forKey: .ruleDefinition)
        ruleDefinition = ruleDefinitionDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority) ?? 0
        priority = priorityDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// A single stateless rule. This is used in [StatelessRulesAndCustomActions].
    public struct StatelessRule: Swift.Equatable {
        /// Indicates the order in which to run this rule relative to all of the rules that are defined for a stateless rule group. Network Firewall evaluates the rules in a rule group starting with the lowest priority setting. You must ensure that the priority settings are unique for the rule group. Each stateless rule group uses exactly one StatelessRulesAndCustomActions object, and each StatelessRulesAndCustomActions contains exactly one StatelessRules object. To ensure unique priority settings for your rule groups, set unique priorities for the stateless rules that you define inside any single StatelessRules object. You can change the priority settings of your rules at any time. To make it easier to insert rules later, number them so there's a wide range in between, for example use 100, 200, and so on.
        /// This member is required.
        public var priority: Swift.Int
        /// Defines the stateless 5-tuple packet inspection criteria and the action to take on a packet that matches the criteria.
        /// This member is required.
        public var ruleDefinition: NetworkFirewallClientTypes.RuleDefinition?

        public init (
            priority: Swift.Int = 0,
            ruleDefinition: NetworkFirewallClientTypes.RuleDefinition? = nil
        )
        {
            self.priority = priority
            self.ruleDefinition = ruleDefinition
        }
    }

}

extension NetworkFirewallClientTypes.StatelessRuleGroupReference: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case priority = "Priority"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority) ?? 0
        priority = priorityDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// Identifier for a single stateless rule group, used in a firewall policy to refer to the rule group.
    public struct StatelessRuleGroupReference: Swift.Equatable {
        /// An integer setting that indicates the order in which to run the stateless rule groups in a single [FirewallPolicy]. Network Firewall applies each stateless rule group to a packet starting with the group that has the lowest priority setting. You must ensure that the priority settings are unique within each policy.
        /// This member is required.
        public var priority: Swift.Int
        /// The Amazon Resource Name (ARN) of the stateless rule group.
        /// This member is required.
        public var resourceArn: Swift.String?

        public init (
            priority: Swift.Int = 0,
            resourceArn: Swift.String? = nil
        )
        {
            self.priority = priority
            self.resourceArn = resourceArn
        }
    }

}

extension NetworkFirewallClientTypes.StatelessRulesAndCustomActions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customActions = "CustomActions"
        case statelessRules = "StatelessRules"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customActions = customActions {
            var customActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .customActions)
            for customaction0 in customActions {
                try customActionsContainer.encode(customaction0)
            }
        }
        if let statelessRules = statelessRules {
            var statelessRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statelessRules)
            for statelessrule0 in statelessRules {
                try statelessRulesContainer.encode(statelessrule0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statelessRulesContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.StatelessRule?].self, forKey: .statelessRules)
        var statelessRulesDecoded0:[NetworkFirewallClientTypes.StatelessRule]? = nil
        if let statelessRulesContainer = statelessRulesContainer {
            statelessRulesDecoded0 = [NetworkFirewallClientTypes.StatelessRule]()
            for structure0 in statelessRulesContainer {
                if let structure0 = structure0 {
                    statelessRulesDecoded0?.append(structure0)
                }
            }
        }
        statelessRules = statelessRulesDecoded0
        let customActionsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.CustomAction?].self, forKey: .customActions)
        var customActionsDecoded0:[NetworkFirewallClientTypes.CustomAction]? = nil
        if let customActionsContainer = customActionsContainer {
            customActionsDecoded0 = [NetworkFirewallClientTypes.CustomAction]()
            for structure0 in customActionsContainer {
                if let structure0 = structure0 {
                    customActionsDecoded0?.append(structure0)
                }
            }
        }
        customActions = customActionsDecoded0
    }
}

extension NetworkFirewallClientTypes {
    /// Stateless inspection criteria. Each stateless rule group uses exactly one of these data types to define its stateless rules.
    public struct StatelessRulesAndCustomActions: Swift.Equatable {
        /// Defines an array of individual custom action definitions that are available for use by the stateless rules in this StatelessRulesAndCustomActions specification. You name each custom action that you define, and then you can use it by name in your [StatelessRule][RuleDefinition]Actions specification.
        public var customActions: [NetworkFirewallClientTypes.CustomAction]?
        /// Defines the set of stateless rules for use in a stateless rule group.
        /// This member is required.
        public var statelessRules: [NetworkFirewallClientTypes.StatelessRule]?

        public init (
            customActions: [NetworkFirewallClientTypes.CustomAction]? = nil,
            statelessRules: [NetworkFirewallClientTypes.StatelessRule]? = nil
        )
        {
            self.customActions = customActions
            self.statelessRules = statelessRules
        }
    }

}

extension NetworkFirewallClientTypes {
    public enum StreamExceptionPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `continue`
        case drop
        case sdkUnknown(Swift.String)

        public static var allCases: [StreamExceptionPolicy] {
            return [
                .continue,
                .drop,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .continue: return "CONTINUE"
            case .drop: return "DROP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StreamExceptionPolicy(rawValue: rawValue) ?? StreamExceptionPolicy.sdkUnknown(rawValue)
        }
    }
}

extension NetworkFirewallClientTypes.SubnetMapping: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case subnetId = "SubnetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let subnetId = self.subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// The ID for a subnet that you want to associate with the firewall. This is used with [CreateFirewall] and [AssociateSubnets]. Network Firewall creates an instance of the associated firewall in each subnet that you specify, to filter traffic in the subnet's Availability Zone.
    public struct SubnetMapping: Swift.Equatable {
        /// The unique identifier for the subnet.
        /// This member is required.
        public var subnetId: Swift.String?

        public init (
            subnetId: Swift.String? = nil
        )
        {
            self.subnetId = subnetId
        }
    }

}

extension NetworkFirewallClientTypes.SyncState: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachment = "Attachment"
        case config = "Config"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachment = self.attachment {
            try encodeContainer.encode(attachment, forKey: .attachment)
        }
        if let config = config {
            var configContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .config)
            for (dictKey0, syncStateConfig0) in config {
                try configContainer.encode(syncStateConfig0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachmentDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.Attachment.self, forKey: .attachment)
        attachment = attachmentDecoded
        let configContainer = try containerValues.decodeIfPresent([Swift.String: NetworkFirewallClientTypes.PerObjectStatus?].self, forKey: .config)
        var configDecoded0: [Swift.String:NetworkFirewallClientTypes.PerObjectStatus]? = nil
        if let configContainer = configContainer {
            configDecoded0 = [Swift.String:NetworkFirewallClientTypes.PerObjectStatus]()
            for (key0, perobjectstatus0) in configContainer {
                if let perobjectstatus0 = perobjectstatus0 {
                    configDecoded0?[key0] = perobjectstatus0
                }
            }
        }
        config = configDecoded0
    }
}

extension NetworkFirewallClientTypes {
    /// The status of the firewall endpoint and firewall policy configuration for a single VPC subnet. For each VPC subnet that you associate with a firewall, Network Firewall does the following:
    ///
    /// * Instantiates a firewall endpoint in the subnet, ready to take traffic.
    ///
    /// * Configures the endpoint with the current firewall policy settings, to provide the filtering behavior for the endpoint.
    ///
    ///
    /// When you update a firewall, for example to add a subnet association or change a rule group in the firewall policy, the affected sync states reflect out-of-sync or not ready status until the changes are complete.
    public struct SyncState: Swift.Equatable {
        /// The attachment status of the firewall's association with a single VPC subnet. For each configured subnet, Network Firewall creates the attachment by instantiating the firewall endpoint in the subnet so that it's ready to take traffic. This is part of the [FirewallStatus].
        public var attachment: NetworkFirewallClientTypes.Attachment?
        /// The configuration status of the firewall endpoint in a single VPC subnet. Network Firewall provides each endpoint with the rules that are configured in the firewall policy. Each time you add a subnet or modify the associated firewall policy, Network Firewall synchronizes the rules in the endpoint, so it can properly filter network traffic. This is part of the [FirewallStatus].
        public var config: [Swift.String:NetworkFirewallClientTypes.PerObjectStatus]?

        public init (
            attachment: NetworkFirewallClientTypes.Attachment? = nil,
            config: [Swift.String:NetworkFirewallClientTypes.PerObjectStatus]? = nil
        )
        {
            self.attachment = attachment
            self.config = config
        }
    }

}

extension NetworkFirewallClientTypes {
    public enum TCPFlag: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ack
        case cwr
        case ece
        case fin
        case psh
        case rst
        case syn
        case urg
        case sdkUnknown(Swift.String)

        public static var allCases: [TCPFlag] {
            return [
                .ack,
                .cwr,
                .ece,
                .fin,
                .psh,
                .rst,
                .syn,
                .urg,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ack: return "ACK"
            case .cwr: return "CWR"
            case .ece: return "ECE"
            case .fin: return "FIN"
            case .psh: return "PSH"
            case .rst: return "RST"
            case .syn: return "SYN"
            case .urg: return "URG"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TCPFlag(rawValue: rawValue) ?? TCPFlag.sdkUnknown(rawValue)
        }
    }
}

extension NetworkFirewallClientTypes.TCPFlagField: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case flags = "Flags"
        case masks = "Masks"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let flags = flags {
            var flagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .flags)
            for tcpflag0 in flags {
                try flagsContainer.encode(tcpflag0.rawValue)
            }
        }
        if let masks = masks {
            var masksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .masks)
            for tcpflag0 in masks {
                try masksContainer.encode(tcpflag0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let flagsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.TCPFlag?].self, forKey: .flags)
        var flagsDecoded0:[NetworkFirewallClientTypes.TCPFlag]? = nil
        if let flagsContainer = flagsContainer {
            flagsDecoded0 = [NetworkFirewallClientTypes.TCPFlag]()
            for enum0 in flagsContainer {
                if let enum0 = enum0 {
                    flagsDecoded0?.append(enum0)
                }
            }
        }
        flags = flagsDecoded0
        let masksContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.TCPFlag?].self, forKey: .masks)
        var masksDecoded0:[NetworkFirewallClientTypes.TCPFlag]? = nil
        if let masksContainer = masksContainer {
            masksDecoded0 = [NetworkFirewallClientTypes.TCPFlag]()
            for enum0 in masksContainer {
                if let enum0 = enum0 {
                    masksDecoded0?.append(enum0)
                }
            }
        }
        masks = masksDecoded0
    }
}

extension NetworkFirewallClientTypes {
    /// TCP flags and masks to inspect packets for, used in stateless rules [MatchAttributes] settings.
    public struct TCPFlagField: Swift.Equatable {
        /// Used in conjunction with the Masks setting to define the flags that must be set and flags that must not be set in order for the packet to match. This setting can only specify values that are also specified in the Masks setting. For the flags that are specified in the masks setting, the following must be true for the packet to match:
        ///
        /// * The ones that are set in this flags setting must be set in the packet.
        ///
        /// * The ones that are not set in this flags setting must also not be set in the packet.
        /// This member is required.
        public var flags: [NetworkFirewallClientTypes.TCPFlag]?
        /// The set of flags to consider in the inspection. To inspect all flags in the valid values list, leave this with no setting.
        public var masks: [NetworkFirewallClientTypes.TCPFlag]?

        public init (
            flags: [NetworkFirewallClientTypes.TCPFlag]? = nil,
            masks: [NetworkFirewallClientTypes.TCPFlag]? = nil
        )
        {
            self.flags = flags
            self.masks = masks
        }
    }

}

extension NetworkFirewallClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension NetworkFirewallClientTypes {
    /// A key:value pair associated with an Amazon Web Services resource. The key:value pair can be anything you define. Typically, the tag key represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50 tags to each Amazon Web Services resource.
    public struct Tag: Swift.Equatable {
        /// The part of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as "customer." Tag keys are case-sensitive.
        /// This member is required.
        public var key: Swift.String?
        /// The part of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as "companyA" or "companyB." Tag values are case-sensitive.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    ///
    /// This member is required.
    public var tags: [NetworkFirewallClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [NetworkFirewallClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tags: [NetworkFirewallClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[NetworkFirewallClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [NetworkFirewallClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension NetworkFirewallClientTypes {
    public enum TargetType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case httpHost
        case tlsSni
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetType] {
            return [
                .httpHost,
                .tlsSni,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .httpHost: return "HTTP_HOST"
            case .tlsSni: return "TLS_SNI"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetType(rawValue: rawValue) ?? TargetType.sdkUnknown(rawValue)
        }
    }
}

extension ThrottlingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Unable to process the request due to throttling limitations.
public struct ThrottlingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UnsupportedOperationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UnsupportedOperationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation you requested isn't supported by Network Firewall.
public struct UnsupportedOperationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UnsupportedOperationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnsupportedOperationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkey0 in tagKeys {
                try tagKeysContainer.encode(tagkey0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    ///
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateFirewallDeleteProtectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteProtection = "DeleteProtection"
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case updateToken = "UpdateToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if deleteProtection != false {
            try encodeContainer.encode(deleteProtection, forKey: .deleteProtection)
        }
        if let firewallArn = self.firewallArn {
            try encodeContainer.encode(firewallArn, forKey: .firewallArn)
        }
        if let firewallName = self.firewallName {
            try encodeContainer.encode(firewallName, forKey: .firewallName)
        }
        if let updateToken = self.updateToken {
            try encodeContainer.encode(updateToken, forKey: .updateToken)
        }
    }
}

extension UpdateFirewallDeleteProtectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateFirewallDeleteProtectionInput: Swift.Equatable {
    /// A flag indicating whether it is possible to delete the firewall. A setting of TRUE indicates that the firewall is protected against deletion. Use this setting to protect against accidentally deleting a firewall that is in use. When you create a firewall, the operation initializes this flag to TRUE.
    /// This member is required.
    public var deleteProtection: Swift.Bool
    /// The Amazon Resource Name (ARN) of the firewall. You must specify the ARN or the name, and you can specify both.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallName: Swift.String?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init (
        deleteProtection: Swift.Bool = false,
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.deleteProtection = deleteProtection
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.updateToken = updateToken
    }
}

struct UpdateFirewallDeleteProtectionInputBody: Swift.Equatable {
    let updateToken: Swift.String?
    let firewallArn: Swift.String?
    let firewallName: Swift.String?
    let deleteProtection: Swift.Bool
}

extension UpdateFirewallDeleteProtectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteProtection = "DeleteProtection"
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let deleteProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteProtection) ?? false
        deleteProtection = deleteProtectionDecoded
    }
}

extension UpdateFirewallDeleteProtectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateFirewallDeleteProtectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTokenException" : self = .invalidTokenException(try InvalidTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceOwnerCheckException" : self = .resourceOwnerCheckException(try ResourceOwnerCheckException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateFirewallDeleteProtectionOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case invalidTokenException(InvalidTokenException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceOwnerCheckException(ResourceOwnerCheckException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateFirewallDeleteProtectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateFirewallDeleteProtectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deleteProtection = output.deleteProtection
            self.firewallArn = output.firewallArn
            self.firewallName = output.firewallName
            self.updateToken = output.updateToken
        } else {
            self.deleteProtection = false
            self.firewallArn = nil
            self.firewallName = nil
            self.updateToken = nil
        }
    }
}

public struct UpdateFirewallDeleteProtectionOutputResponse: Swift.Equatable {
    /// A flag indicating whether it is possible to delete the firewall. A setting of TRUE indicates that the firewall is protected against deletion. Use this setting to protect against accidentally deleting a firewall that is in use. When you create a firewall, the operation initializes this flag to TRUE.
    public var deleteProtection: Swift.Bool
    /// The Amazon Resource Name (ARN) of the firewall.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
    public var firewallName: Swift.String?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init (
        deleteProtection: Swift.Bool = false,
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.deleteProtection = deleteProtection
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.updateToken = updateToken
    }
}

struct UpdateFirewallDeleteProtectionOutputResponseBody: Swift.Equatable {
    let firewallArn: Swift.String?
    let firewallName: Swift.String?
    let deleteProtection: Swift.Bool
    let updateToken: Swift.String?
}

extension UpdateFirewallDeleteProtectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteProtection = "DeleteProtection"
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let deleteProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteProtection) ?? false
        deleteProtection = deleteProtectionDecoded
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
    }
}

extension UpdateFirewallDescriptionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case updateToken = "UpdateToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let firewallArn = self.firewallArn {
            try encodeContainer.encode(firewallArn, forKey: .firewallArn)
        }
        if let firewallName = self.firewallName {
            try encodeContainer.encode(firewallName, forKey: .firewallName)
        }
        if let updateToken = self.updateToken {
            try encodeContainer.encode(updateToken, forKey: .updateToken)
        }
    }
}

extension UpdateFirewallDescriptionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateFirewallDescriptionInput: Swift.Equatable {
    /// The new description for the firewall. If you omit this setting, Network Firewall removes the description for the firewall.
    public var description: Swift.String?
    /// The Amazon Resource Name (ARN) of the firewall. You must specify the ARN or the name, and you can specify both.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallName: Swift.String?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init (
        description: Swift.String? = nil,
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.description = description
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.updateToken = updateToken
    }
}

struct UpdateFirewallDescriptionInputBody: Swift.Equatable {
    let updateToken: Swift.String?
    let firewallArn: Swift.String?
    let firewallName: Swift.String?
    let description: Swift.String?
}

extension UpdateFirewallDescriptionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension UpdateFirewallDescriptionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateFirewallDescriptionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTokenException" : self = .invalidTokenException(try InvalidTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateFirewallDescriptionOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case invalidTokenException(InvalidTokenException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateFirewallDescriptionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateFirewallDescriptionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.description = output.description
            self.firewallArn = output.firewallArn
            self.firewallName = output.firewallName
            self.updateToken = output.updateToken
        } else {
            self.description = nil
            self.firewallArn = nil
            self.firewallName = nil
            self.updateToken = nil
        }
    }
}

public struct UpdateFirewallDescriptionOutputResponse: Swift.Equatable {
    /// A description of the firewall.
    public var description: Swift.String?
    /// The Amazon Resource Name (ARN) of the firewall.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
    public var firewallName: Swift.String?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init (
        description: Swift.String? = nil,
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.description = description
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.updateToken = updateToken
    }
}

struct UpdateFirewallDescriptionOutputResponseBody: Swift.Equatable {
    let firewallArn: Swift.String?
    let firewallName: Swift.String?
    let description: Swift.String?
    let updateToken: Swift.String?
}

extension UpdateFirewallDescriptionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
    }
}

extension UpdateFirewallEncryptionConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionConfiguration = "EncryptionConfiguration"
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case updateToken = "UpdateToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionConfiguration = self.encryptionConfiguration {
            try encodeContainer.encode(encryptionConfiguration, forKey: .encryptionConfiguration)
        }
        if let firewallArn = self.firewallArn {
            try encodeContainer.encode(firewallArn, forKey: .firewallArn)
        }
        if let firewallName = self.firewallName {
            try encodeContainer.encode(firewallName, forKey: .firewallName)
        }
        if let updateToken = self.updateToken {
            try encodeContainer.encode(updateToken, forKey: .updateToken)
        }
    }
}

extension UpdateFirewallEncryptionConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateFirewallEncryptionConfigurationInput: Swift.Equatable {
    /// A complex type that contains optional Amazon Web Services Key Management Service (KMS) encryption settings for your Network Firewall resources. Your data is encrypted by default with an Amazon Web Services owned key that Amazon Web Services owns and manages for you. You can use either the Amazon Web Services owned key, or provide your own customer managed key. To learn more about KMS encryption of your Network Firewall resources, see [Encryption at rest with Amazon Web Services Key Managment Service](https://docs.aws.amazon.com/kms/latest/developerguide/kms-encryption-at-rest.html) in the Network Firewall Developer Guide.
    public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
    /// The Amazon Resource Name (ARN) of the firewall.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
    public var firewallName: Swift.String?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init (
        encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.encryptionConfiguration = encryptionConfiguration
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.updateToken = updateToken
    }
}

struct UpdateFirewallEncryptionConfigurationInputBody: Swift.Equatable {
    let updateToken: Swift.String?
    let firewallArn: Swift.String?
    let firewallName: Swift.String?
    let encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
}

extension UpdateFirewallEncryptionConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionConfiguration = "EncryptionConfiguration"
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
    }
}

extension UpdateFirewallEncryptionConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateFirewallEncryptionConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTokenException" : self = .invalidTokenException(try InvalidTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceOwnerCheckException" : self = .resourceOwnerCheckException(try ResourceOwnerCheckException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateFirewallEncryptionConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case invalidTokenException(InvalidTokenException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceOwnerCheckException(ResourceOwnerCheckException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateFirewallEncryptionConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateFirewallEncryptionConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.encryptionConfiguration = output.encryptionConfiguration
            self.firewallArn = output.firewallArn
            self.firewallName = output.firewallName
            self.updateToken = output.updateToken
        } else {
            self.encryptionConfiguration = nil
            self.firewallArn = nil
            self.firewallName = nil
            self.updateToken = nil
        }
    }
}

public struct UpdateFirewallEncryptionConfigurationOutputResponse: Swift.Equatable {
    /// A complex type that contains optional Amazon Web Services Key Management Service (KMS) encryption settings for your Network Firewall resources. Your data is encrypted by default with an Amazon Web Services owned key that Amazon Web Services owns and manages for you. You can use either the Amazon Web Services owned key, or provide your own customer managed key. To learn more about KMS encryption of your Network Firewall resources, see [Encryption at rest with Amazon Web Services Key Managment Service](https://docs.aws.amazon.com/kms/latest/developerguide/kms-encryption-at-rest.html) in the Network Firewall Developer Guide.
    public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
    /// The Amazon Resource Name (ARN) of the firewall.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
    public var firewallName: Swift.String?
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init (
        encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.encryptionConfiguration = encryptionConfiguration
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.updateToken = updateToken
    }
}

struct UpdateFirewallEncryptionConfigurationOutputResponseBody: Swift.Equatable {
    let firewallArn: Swift.String?
    let firewallName: Swift.String?
    let updateToken: Swift.String?
    let encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
}

extension UpdateFirewallEncryptionConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionConfiguration = "EncryptionConfiguration"
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
    }
}

extension UpdateFirewallPolicyChangeProtectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case firewallPolicyChangeProtection = "FirewallPolicyChangeProtection"
        case updateToken = "UpdateToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let firewallArn = self.firewallArn {
            try encodeContainer.encode(firewallArn, forKey: .firewallArn)
        }
        if let firewallName = self.firewallName {
            try encodeContainer.encode(firewallName, forKey: .firewallName)
        }
        if firewallPolicyChangeProtection != false {
            try encodeContainer.encode(firewallPolicyChangeProtection, forKey: .firewallPolicyChangeProtection)
        }
        if let updateToken = self.updateToken {
            try encodeContainer.encode(updateToken, forKey: .updateToken)
        }
    }
}

extension UpdateFirewallPolicyChangeProtectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateFirewallPolicyChangeProtectionInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the firewall. You must specify the ARN or the name, and you can specify both.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallName: Swift.String?
    /// A setting indicating whether the firewall is protected against a change to the firewall policy association. Use this setting to protect against accidentally modifying the firewall policy for a firewall that is in use. When you create a firewall, the operation initializes this setting to TRUE.
    /// This member is required.
    public var firewallPolicyChangeProtection: Swift.Bool
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init (
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        firewallPolicyChangeProtection: Swift.Bool = false,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.firewallPolicyChangeProtection = firewallPolicyChangeProtection
        self.updateToken = updateToken
    }
}

struct UpdateFirewallPolicyChangeProtectionInputBody: Swift.Equatable {
    let updateToken: Swift.String?
    let firewallArn: Swift.String?
    let firewallName: Swift.String?
    let firewallPolicyChangeProtection: Swift.Bool
}

extension UpdateFirewallPolicyChangeProtectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case firewallPolicyChangeProtection = "FirewallPolicyChangeProtection"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let firewallPolicyChangeProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .firewallPolicyChangeProtection) ?? false
        firewallPolicyChangeProtection = firewallPolicyChangeProtectionDecoded
    }
}

extension UpdateFirewallPolicyChangeProtectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateFirewallPolicyChangeProtectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTokenException" : self = .invalidTokenException(try InvalidTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceOwnerCheckException" : self = .resourceOwnerCheckException(try ResourceOwnerCheckException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateFirewallPolicyChangeProtectionOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case invalidTokenException(InvalidTokenException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceOwnerCheckException(ResourceOwnerCheckException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateFirewallPolicyChangeProtectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateFirewallPolicyChangeProtectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.firewallArn = output.firewallArn
            self.firewallName = output.firewallName
            self.firewallPolicyChangeProtection = output.firewallPolicyChangeProtection
            self.updateToken = output.updateToken
        } else {
            self.firewallArn = nil
            self.firewallName = nil
            self.firewallPolicyChangeProtection = false
            self.updateToken = nil
        }
    }
}

public struct UpdateFirewallPolicyChangeProtectionOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the firewall.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
    public var firewallName: Swift.String?
    /// A setting indicating whether the firewall is protected against a change to the firewall policy association. Use this setting to protect against accidentally modifying the firewall policy for a firewall that is in use. When you create a firewall, the operation initializes this setting to TRUE.
    public var firewallPolicyChangeProtection: Swift.Bool
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init (
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        firewallPolicyChangeProtection: Swift.Bool = false,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.firewallPolicyChangeProtection = firewallPolicyChangeProtection
        self.updateToken = updateToken
    }
}

struct UpdateFirewallPolicyChangeProtectionOutputResponseBody: Swift.Equatable {
    let updateToken: Swift.String?
    let firewallArn: Swift.String?
    let firewallName: Swift.String?
    let firewallPolicyChangeProtection: Swift.Bool
}

extension UpdateFirewallPolicyChangeProtectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case firewallPolicyChangeProtection = "FirewallPolicyChangeProtection"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let firewallPolicyChangeProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .firewallPolicyChangeProtection) ?? false
        firewallPolicyChangeProtection = firewallPolicyChangeProtectionDecoded
    }
}

extension UpdateFirewallPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case dryRun = "DryRun"
        case encryptionConfiguration = "EncryptionConfiguration"
        case firewallPolicy = "FirewallPolicy"
        case firewallPolicyArn = "FirewallPolicyArn"
        case firewallPolicyName = "FirewallPolicyName"
        case updateToken = "UpdateToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if dryRun != false {
            try encodeContainer.encode(dryRun, forKey: .dryRun)
        }
        if let encryptionConfiguration = self.encryptionConfiguration {
            try encodeContainer.encode(encryptionConfiguration, forKey: .encryptionConfiguration)
        }
        if let firewallPolicy = self.firewallPolicy {
            try encodeContainer.encode(firewallPolicy, forKey: .firewallPolicy)
        }
        if let firewallPolicyArn = self.firewallPolicyArn {
            try encodeContainer.encode(firewallPolicyArn, forKey: .firewallPolicyArn)
        }
        if let firewallPolicyName = self.firewallPolicyName {
            try encodeContainer.encode(firewallPolicyName, forKey: .firewallPolicyName)
        }
        if let updateToken = self.updateToken {
            try encodeContainer.encode(updateToken, forKey: .updateToken)
        }
    }
}

extension UpdateFirewallPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateFirewallPolicyInput: Swift.Equatable {
    /// A description of the firewall policy.
    public var description: Swift.String?
    /// Indicates whether you want Network Firewall to just check the validity of the request, rather than run the request. If set to TRUE, Network Firewall checks whether the request can run successfully, but doesn't actually make the requested changes. The call returns the value that the request would return if you ran it with dry run set to FALSE, but doesn't make additions or changes to your resources. This option allows you to make sure that you have the required permissions to run the request and that your request parameters are valid. If set to FALSE, Network Firewall makes the requested changes to your resources.
    public var dryRun: Swift.Bool
    /// A complex type that contains settings for encryption of your firewall policy resources.
    public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
    /// The updated firewall policy to use for the firewall.
    /// This member is required.
    public var firewallPolicy: NetworkFirewallClientTypes.FirewallPolicy?
    /// The Amazon Resource Name (ARN) of the firewall policy. You must specify the ARN or the name, and you can specify both.
    public var firewallPolicyArn: Swift.String?
    /// The descriptive name of the firewall policy. You can't change the name of a firewall policy after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallPolicyName: Swift.String?
    /// A token used for optimistic locking. Network Firewall returns a token to your requests that access the firewall policy. The token marks the state of the policy resource at the time of the request. To make changes to the policy, you provide the token in your request. Network Firewall uses the token to ensure that the policy hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall policy again to get a current copy of it with current token. Reapply your changes as needed, then try the operation again using the new token.
    /// This member is required.
    public var updateToken: Swift.String?

    public init (
        description: Swift.String? = nil,
        dryRun: Swift.Bool = false,
        encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
        firewallPolicy: NetworkFirewallClientTypes.FirewallPolicy? = nil,
        firewallPolicyArn: Swift.String? = nil,
        firewallPolicyName: Swift.String? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.description = description
        self.dryRun = dryRun
        self.encryptionConfiguration = encryptionConfiguration
        self.firewallPolicy = firewallPolicy
        self.firewallPolicyArn = firewallPolicyArn
        self.firewallPolicyName = firewallPolicyName
        self.updateToken = updateToken
    }
}

struct UpdateFirewallPolicyInputBody: Swift.Equatable {
    let updateToken: Swift.String?
    let firewallPolicyArn: Swift.String?
    let firewallPolicyName: Swift.String?
    let firewallPolicy: NetworkFirewallClientTypes.FirewallPolicy?
    let description: Swift.String?
    let dryRun: Swift.Bool
    let encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
}

extension UpdateFirewallPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case dryRun = "DryRun"
        case encryptionConfiguration = "EncryptionConfiguration"
        case firewallPolicy = "FirewallPolicy"
        case firewallPolicyArn = "FirewallPolicyArn"
        case firewallPolicyName = "FirewallPolicyName"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
        let firewallPolicyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallPolicyArn)
        firewallPolicyArn = firewallPolicyArnDecoded
        let firewallPolicyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallPolicyName)
        firewallPolicyName = firewallPolicyNameDecoded
        let firewallPolicyDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.FirewallPolicy.self, forKey: .firewallPolicy)
        firewallPolicy = firewallPolicyDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun) ?? false
        dryRun = dryRunDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
    }
}

extension UpdateFirewallPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateFirewallPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTokenException" : self = .invalidTokenException(try InvalidTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateFirewallPolicyOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case invalidTokenException(InvalidTokenException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateFirewallPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateFirewallPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.firewallPolicyResponse = output.firewallPolicyResponse
            self.updateToken = output.updateToken
        } else {
            self.firewallPolicyResponse = nil
            self.updateToken = nil
        }
    }
}

public struct UpdateFirewallPolicyOutputResponse: Swift.Equatable {
    /// The high-level properties of a firewall policy. This, along with the [FirewallPolicy], define the policy. You can retrieve all objects for a firewall policy by calling [DescribeFirewallPolicy].
    /// This member is required.
    public var firewallPolicyResponse: NetworkFirewallClientTypes.FirewallPolicyResponse?
    /// A token used for optimistic locking. Network Firewall returns a token to your requests that access the firewall policy. The token marks the state of the policy resource at the time of the request. To make changes to the policy, you provide the token in your request. Network Firewall uses the token to ensure that the policy hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall policy again to get a current copy of it with current token. Reapply your changes as needed, then try the operation again using the new token.
    /// This member is required.
    public var updateToken: Swift.String?

    public init (
        firewallPolicyResponse: NetworkFirewallClientTypes.FirewallPolicyResponse? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallPolicyResponse = firewallPolicyResponse
        self.updateToken = updateToken
    }
}

struct UpdateFirewallPolicyOutputResponseBody: Swift.Equatable {
    let updateToken: Swift.String?
    let firewallPolicyResponse: NetworkFirewallClientTypes.FirewallPolicyResponse?
}

extension UpdateFirewallPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallPolicyResponse = "FirewallPolicyResponse"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
        let firewallPolicyResponseDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.FirewallPolicyResponse.self, forKey: .firewallPolicyResponse)
        firewallPolicyResponse = firewallPolicyResponseDecoded
    }
}

extension UpdateLoggingConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case loggingConfiguration = "LoggingConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let firewallArn = self.firewallArn {
            try encodeContainer.encode(firewallArn, forKey: .firewallArn)
        }
        if let firewallName = self.firewallName {
            try encodeContainer.encode(firewallName, forKey: .firewallName)
        }
        if let loggingConfiguration = self.loggingConfiguration {
            try encodeContainer.encode(loggingConfiguration, forKey: .loggingConfiguration)
        }
    }
}

extension UpdateLoggingConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateLoggingConfigurationInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the firewall. You must specify the ARN or the name, and you can specify both.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallName: Swift.String?
    /// Defines how Network Firewall performs logging for a firewall. If you omit this setting, Network Firewall disables logging for the firewall.
    public var loggingConfiguration: NetworkFirewallClientTypes.LoggingConfiguration?

    public init (
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        loggingConfiguration: NetworkFirewallClientTypes.LoggingConfiguration? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.loggingConfiguration = loggingConfiguration
    }
}

struct UpdateLoggingConfigurationInputBody: Swift.Equatable {
    let firewallArn: Swift.String?
    let firewallName: Swift.String?
    let loggingConfiguration: NetworkFirewallClientTypes.LoggingConfiguration?
}

extension UpdateLoggingConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case loggingConfiguration = "LoggingConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let loggingConfigurationDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.LoggingConfiguration.self, forKey: .loggingConfiguration)
        loggingConfiguration = loggingConfigurationDecoded
    }
}

extension UpdateLoggingConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateLoggingConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTokenException" : self = .invalidTokenException(try InvalidTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LogDestinationPermissionException" : self = .logDestinationPermissionException(try LogDestinationPermissionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateLoggingConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case invalidTokenException(InvalidTokenException)
    case logDestinationPermissionException(LogDestinationPermissionException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateLoggingConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateLoggingConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.firewallArn = output.firewallArn
            self.firewallName = output.firewallName
            self.loggingConfiguration = output.loggingConfiguration
        } else {
            self.firewallArn = nil
            self.firewallName = nil
            self.loggingConfiguration = nil
        }
    }
}

public struct UpdateLoggingConfigurationOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the firewall.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
    public var firewallName: Swift.String?
    /// Defines how Network Firewall performs logging for a [Firewall].
    public var loggingConfiguration: NetworkFirewallClientTypes.LoggingConfiguration?

    public init (
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        loggingConfiguration: NetworkFirewallClientTypes.LoggingConfiguration? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.loggingConfiguration = loggingConfiguration
    }
}

struct UpdateLoggingConfigurationOutputResponseBody: Swift.Equatable {
    let firewallArn: Swift.String?
    let firewallName: Swift.String?
    let loggingConfiguration: NetworkFirewallClientTypes.LoggingConfiguration?
}

extension UpdateLoggingConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case loggingConfiguration = "LoggingConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let loggingConfigurationDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.LoggingConfiguration.self, forKey: .loggingConfiguration)
        loggingConfiguration = loggingConfigurationDecoded
    }
}

extension UpdateRuleGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case dryRun = "DryRun"
        case encryptionConfiguration = "EncryptionConfiguration"
        case ruleGroup = "RuleGroup"
        case ruleGroupArn = "RuleGroupArn"
        case ruleGroupName = "RuleGroupName"
        case rules = "Rules"
        case sourceMetadata = "SourceMetadata"
        case type = "Type"
        case updateToken = "UpdateToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if dryRun != false {
            try encodeContainer.encode(dryRun, forKey: .dryRun)
        }
        if let encryptionConfiguration = self.encryptionConfiguration {
            try encodeContainer.encode(encryptionConfiguration, forKey: .encryptionConfiguration)
        }
        if let ruleGroup = self.ruleGroup {
            try encodeContainer.encode(ruleGroup, forKey: .ruleGroup)
        }
        if let ruleGroupArn = self.ruleGroupArn {
            try encodeContainer.encode(ruleGroupArn, forKey: .ruleGroupArn)
        }
        if let ruleGroupName = self.ruleGroupName {
            try encodeContainer.encode(ruleGroupName, forKey: .ruleGroupName)
        }
        if let rules = self.rules {
            try encodeContainer.encode(rules, forKey: .rules)
        }
        if let sourceMetadata = self.sourceMetadata {
            try encodeContainer.encode(sourceMetadata, forKey: .sourceMetadata)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let updateToken = self.updateToken {
            try encodeContainer.encode(updateToken, forKey: .updateToken)
        }
    }
}

extension UpdateRuleGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateRuleGroupInput: Swift.Equatable {
    /// A description of the rule group.
    public var description: Swift.String?
    /// Indicates whether you want Network Firewall to just check the validity of the request, rather than run the request. If set to TRUE, Network Firewall checks whether the request can run successfully, but doesn't actually make the requested changes. The call returns the value that the request would return if you ran it with dry run set to FALSE, but doesn't make additions or changes to your resources. This option allows you to make sure that you have the required permissions to run the request and that your request parameters are valid. If set to FALSE, Network Firewall makes the requested changes to your resources.
    public var dryRun: Swift.Bool
    /// A complex type that contains settings for encryption of your rule group resources.
    public var encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
    /// An object that defines the rule group rules. You must provide either this rule group setting or a Rules setting, but not both.
    public var ruleGroup: NetworkFirewallClientTypes.RuleGroup?
    /// The Amazon Resource Name (ARN) of the rule group. You must specify the ARN or the name, and you can specify both.
    public var ruleGroupArn: Swift.String?
    /// The descriptive name of the rule group. You can't change the name of a rule group after you create it. You must specify the ARN or the name, and you can specify both.
    public var ruleGroupName: Swift.String?
    /// A string containing stateful rule group rules specifications in Suricata flat format, with one rule per line. Use this to import your existing Suricata compatible rule groups. You must provide either this rules setting or a populated RuleGroup setting, but not both. You can provide your rule group specification in Suricata flat format through this setting when you create or update your rule group. The call response returns a [RuleGroup] object that Network Firewall has populated from your string.
    public var rules: Swift.String?
    /// A complex type that contains metadata about the rule group that your own rule group is copied from. You can use the metadata to keep track of updates made to the originating rule group.
    public var sourceMetadata: NetworkFirewallClientTypes.SourceMetadata?
    /// Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules. This setting is required for requests that do not include the RuleGroupARN.
    public var type: NetworkFirewallClientTypes.RuleGroupType?
    /// A token used for optimistic locking. Network Firewall returns a token to your requests that access the rule group. The token marks the state of the rule group resource at the time of the request. To make changes to the rule group, you provide the token in your request. Network Firewall uses the token to ensure that the rule group hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the rule group again to get a current copy of it with a current token. Reapply your changes as needed, then try the operation again using the new token.
    /// This member is required.
    public var updateToken: Swift.String?

    public init (
        description: Swift.String? = nil,
        dryRun: Swift.Bool = false,
        encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration? = nil,
        ruleGroup: NetworkFirewallClientTypes.RuleGroup? = nil,
        ruleGroupArn: Swift.String? = nil,
        ruleGroupName: Swift.String? = nil,
        rules: Swift.String? = nil,
        sourceMetadata: NetworkFirewallClientTypes.SourceMetadata? = nil,
        type: NetworkFirewallClientTypes.RuleGroupType? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.description = description
        self.dryRun = dryRun
        self.encryptionConfiguration = encryptionConfiguration
        self.ruleGroup = ruleGroup
        self.ruleGroupArn = ruleGroupArn
        self.ruleGroupName = ruleGroupName
        self.rules = rules
        self.sourceMetadata = sourceMetadata
        self.type = type
        self.updateToken = updateToken
    }
}

struct UpdateRuleGroupInputBody: Swift.Equatable {
    let updateToken: Swift.String?
    let ruleGroupArn: Swift.String?
    let ruleGroupName: Swift.String?
    let ruleGroup: NetworkFirewallClientTypes.RuleGroup?
    let rules: Swift.String?
    let type: NetworkFirewallClientTypes.RuleGroupType?
    let description: Swift.String?
    let dryRun: Swift.Bool
    let encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
    let sourceMetadata: NetworkFirewallClientTypes.SourceMetadata?
}

extension UpdateRuleGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case dryRun = "DryRun"
        case encryptionConfiguration = "EncryptionConfiguration"
        case ruleGroup = "RuleGroup"
        case ruleGroupArn = "RuleGroupArn"
        case ruleGroupName = "RuleGroupName"
        case rules = "Rules"
        case sourceMetadata = "SourceMetadata"
        case type = "Type"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
        let ruleGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupArn)
        ruleGroupArn = ruleGroupArnDecoded
        let ruleGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupName)
        ruleGroupName = ruleGroupNameDecoded
        let ruleGroupDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RuleGroup.self, forKey: .ruleGroup)
        ruleGroup = ruleGroupDecoded
        let rulesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rules)
        rules = rulesDecoded
        let typeDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RuleGroupType.self, forKey: .type)
        type = typeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun) ?? false
        dryRun = dryRunDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
        let sourceMetadataDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.SourceMetadata.self, forKey: .sourceMetadata)
        sourceMetadata = sourceMetadataDecoded
    }
}

extension UpdateRuleGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRuleGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTokenException" : self = .invalidTokenException(try InvalidTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateRuleGroupOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case invalidTokenException(InvalidTokenException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRuleGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateRuleGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.ruleGroupResponse = output.ruleGroupResponse
            self.updateToken = output.updateToken
        } else {
            self.ruleGroupResponse = nil
            self.updateToken = nil
        }
    }
}

public struct UpdateRuleGroupOutputResponse: Swift.Equatable {
    /// The high-level properties of a rule group. This, along with the [RuleGroup], define the rule group. You can retrieve all objects for a rule group by calling [DescribeRuleGroup].
    /// This member is required.
    public var ruleGroupResponse: NetworkFirewallClientTypes.RuleGroupResponse?
    /// A token used for optimistic locking. Network Firewall returns a token to your requests that access the rule group. The token marks the state of the rule group resource at the time of the request. To make changes to the rule group, you provide the token in your request. Network Firewall uses the token to ensure that the rule group hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the rule group again to get a current copy of it with a current token. Reapply your changes as needed, then try the operation again using the new token.
    /// This member is required.
    public var updateToken: Swift.String?

    public init (
        ruleGroupResponse: NetworkFirewallClientTypes.RuleGroupResponse? = nil,
        updateToken: Swift.String? = nil
    )
    {
        self.ruleGroupResponse = ruleGroupResponse
        self.updateToken = updateToken
    }
}

struct UpdateRuleGroupOutputResponseBody: Swift.Equatable {
    let updateToken: Swift.String?
    let ruleGroupResponse: NetworkFirewallClientTypes.RuleGroupResponse?
}

extension UpdateRuleGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleGroupResponse = "RuleGroupResponse"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
        let ruleGroupResponseDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RuleGroupResponse.self, forKey: .ruleGroupResponse)
        ruleGroupResponse = ruleGroupResponseDecoded
    }
}

extension UpdateSubnetChangeProtectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case subnetChangeProtection = "SubnetChangeProtection"
        case updateToken = "UpdateToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let firewallArn = self.firewallArn {
            try encodeContainer.encode(firewallArn, forKey: .firewallArn)
        }
        if let firewallName = self.firewallName {
            try encodeContainer.encode(firewallName, forKey: .firewallName)
        }
        if subnetChangeProtection != false {
            try encodeContainer.encode(subnetChangeProtection, forKey: .subnetChangeProtection)
        }
        if let updateToken = self.updateToken {
            try encodeContainer.encode(updateToken, forKey: .updateToken)
        }
    }
}

extension UpdateSubnetChangeProtectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateSubnetChangeProtectionInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the firewall. You must specify the ARN or the name, and you can specify both.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it. You must specify the ARN or the name, and you can specify both.
    public var firewallName: Swift.String?
    /// A setting indicating whether the firewall is protected against changes to the subnet associations. Use this setting to protect against accidentally modifying the subnet associations for a firewall that is in use. When you create a firewall, the operation initializes this setting to TRUE.
    /// This member is required.
    public var subnetChangeProtection: Swift.Bool
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init (
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        subnetChangeProtection: Swift.Bool = false,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.subnetChangeProtection = subnetChangeProtection
        self.updateToken = updateToken
    }
}

struct UpdateSubnetChangeProtectionInputBody: Swift.Equatable {
    let updateToken: Swift.String?
    let firewallArn: Swift.String?
    let firewallName: Swift.String?
    let subnetChangeProtection: Swift.Bool
}

extension UpdateSubnetChangeProtectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case subnetChangeProtection = "SubnetChangeProtection"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let subnetChangeProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .subnetChangeProtection) ?? false
        subnetChangeProtection = subnetChangeProtectionDecoded
    }
}

extension UpdateSubnetChangeProtectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateSubnetChangeProtectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTokenException" : self = .invalidTokenException(try InvalidTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceOwnerCheckException" : self = .resourceOwnerCheckException(try ResourceOwnerCheckException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateSubnetChangeProtectionOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case invalidTokenException(InvalidTokenException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceOwnerCheckException(ResourceOwnerCheckException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateSubnetChangeProtectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateSubnetChangeProtectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.firewallArn = output.firewallArn
            self.firewallName = output.firewallName
            self.subnetChangeProtection = output.subnetChangeProtection
            self.updateToken = output.updateToken
        } else {
            self.firewallArn = nil
            self.firewallName = nil
            self.subnetChangeProtection = false
            self.updateToken = nil
        }
    }
}

public struct UpdateSubnetChangeProtectionOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the firewall.
    public var firewallArn: Swift.String?
    /// The descriptive name of the firewall. You can't change the name of a firewall after you create it.
    public var firewallName: Swift.String?
    /// A setting indicating whether the firewall is protected against changes to the subnet associations. Use this setting to protect against accidentally modifying the subnet associations for a firewall that is in use. When you create a firewall, the operation initializes this setting to TRUE.
    public var subnetChangeProtection: Swift.Bool
    /// An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it. To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
    public var updateToken: Swift.String?

    public init (
        firewallArn: Swift.String? = nil,
        firewallName: Swift.String? = nil,
        subnetChangeProtection: Swift.Bool = false,
        updateToken: Swift.String? = nil
    )
    {
        self.firewallArn = firewallArn
        self.firewallName = firewallName
        self.subnetChangeProtection = subnetChangeProtection
        self.updateToken = updateToken
    }
}

struct UpdateSubnetChangeProtectionOutputResponseBody: Swift.Equatable {
    let updateToken: Swift.String?
    let firewallArn: Swift.String?
    let firewallName: Swift.String?
    let subnetChangeProtection: Swift.Bool
}

extension UpdateSubnetChangeProtectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case subnetChangeProtection = "SubnetChangeProtection"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let subnetChangeProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .subnetChangeProtection) ?? false
        subnetChangeProtection = subnetChangeProtectionDecoded
    }
}
