// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ACMClient {
    /// Paginate over `[ListCertificatesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListCertificatesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListCertificatesOutputResponse`
    public func listCertificatesPaginated(input: ListCertificatesInput) -> ClientRuntime.PaginatorSequence<ListCertificatesInput, ListCertificatesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListCertificatesInput, ListCertificatesOutputResponse>(input: input, inputKey: \ListCertificatesInput.nextToken, outputKey: \ListCertificatesOutputResponse.nextToken, paginationFunction: self.listCertificates(input:))
    }
}

extension ListCertificatesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListCertificatesInput {
        return ListCertificatesInput(
            certificateStatuses: self.certificateStatuses,
            includes: self.includes,
            maxItems: self.maxItems,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )}
}

extension PaginatorSequence where Input == ListCertificatesInput, Output == ListCertificatesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listCertificatesPaginated`
    /// to access the nested member `[ACMClientTypes.CertificateSummary]`
    /// - Returns: `[ACMClientTypes.CertificateSummary]`
    public func certificateSummaryList() async throws -> [ACMClientTypes.CertificateSummary] {
        return try await self.asyncCompactMap { item in item.certificateSummaryList }
    }
}
