// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ACMClientProtocol {

    static func certificateValidatedWaiterConfig() throws -> WaiterConfiguration<DescribeCertificateInput, DescribeCertificateOutputResponse> {
        let acceptors: [WaiterConfiguration<DescribeCertificateInput, DescribeCertificateOutputResponse>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeCertificateInput, result: Result<DescribeCertificateOutputResponse, Error>) -> Bool in
                // JMESPath expression: "Certificate.DomainValidationOptions[].ValidationStatus"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "SUCCESS"
                guard case .success(let output) = result else { return false }
                let certificate = output.certificate
                let domainValidationOptions = certificate?.domainValidationOptions
                let projection: [ACMClientTypes.DomainStatus]? = domainValidationOptions?.compactMap { original in
                    let validationStatus = original.validationStatus
                    return validationStatus
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { JMESUtils.compare($0, ==, "SUCCESS") } ?? false)
            }),
            .init(state: .retry, matcher: { (input: DescribeCertificateInput, result: Result<DescribeCertificateOutputResponse, Error>) -> Bool in
                // JMESPath expression: "Certificate.DomainValidationOptions[].ValidationStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "PENDING_VALIDATION"
                guard case .success(let output) = result else { return false }
                let certificate = output.certificate
                let domainValidationOptions = certificate?.domainValidationOptions
                let projection: [ACMClientTypes.DomainStatus]? = domainValidationOptions?.compactMap { original in
                    let validationStatus = original.validationStatus
                    return validationStatus
                }
                return projection?.contains(where: { JMESUtils.compare($0, ==, "PENDING_VALIDATION") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeCertificateInput, result: Result<DescribeCertificateOutputResponse, Error>) -> Bool in
                // JMESPath expression: "Certificate.Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "FAILED"
                guard case .success(let output) = result else { return false }
                let certificate = output.certificate
                let status = certificate?.status
                return JMESUtils.compare(status, ==, "FAILED")
            }),
            .init(state: .failure, matcher: { (input: DescribeCertificateInput, result: Result<DescribeCertificateOutputResponse, Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? WaiterTypedError)?.waiterErrorType == "ResourceNotFoundException"
            }),
        ]
        return try WaiterConfiguration<DescribeCertificateInput, DescribeCertificateOutputResponse>(acceptors: acceptors, minDelay: 60.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the CertificateValidated event on the describeCertificate operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeCertificateInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilCertificateValidated(options: WaiterOptions, input: DescribeCertificateInput) async throws -> WaiterOutcome<DescribeCertificateOutputResponse> {
        let waiter = Waiter(config: try Self.certificateValidatedWaiterConfig(), operation: self.describeCertificate(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }
}
