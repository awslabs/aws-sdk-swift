//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter


public struct AddTagsToCertificateOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteCertificateOutput: Swift.Sendable {

    public init() { }
}

public struct GetAccountConfigurationInput: Swift.Sendable {

    public init() { }
}

public struct PutAccountConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct RemoveTagsFromCertificateOutput: Swift.Sendable {

    public init() { }
}

public struct RenewCertificateOutput: Swift.Sendable {

    public init() { }
}

public struct ResendValidationEmailOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateCertificateOptionsOutput: Swift.Sendable {

    public init() { }
}

/// You do not have access required to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDenied" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested Amazon Resource Name (ARN) does not refer to an existing resource.
public struct InvalidArnException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidArnException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An input parameter was invalid.
public struct InvalidParameterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParameterException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// One or both of the values that make up the key-value pair is not valid. For example, you cannot specify a tag value that begins with aws:.
public struct InvalidTagException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTagException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified certificate cannot be found in the caller's account or the caller's account cannot be found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A specified tag did not comply with an existing tag policy and was rejected.
public struct TagPolicyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TagPolicyException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was denied because it exceeded a quota.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "Throttling" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request contains too many tags. Try the request again with fewer tags.
public struct TooManyTagsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyTagsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ACMClientTypes {

    /// A key-value pair that identifies or specifies metadata about an ACM resource.
    public struct Tag: Swift.Sendable {
        /// The key of the tag.
        /// This member is required.
        public var key: Swift.String?
        /// The value of the tag.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

public struct AddTagsToCertificateInput: Swift.Sendable {
    /// String that contains the ARN of the ACM certificate to which the tag is to be applied. This must be of the form: arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012 For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
    /// This member is required.
    public var certificateArn: Swift.String?
    /// The key-value pair that defines the tag. The tag value is optional.
    /// This member is required.
    public var tags: [ACMClientTypes.Tag]?

    public init(
        certificateArn: Swift.String? = nil,
        tags: [ACMClientTypes.Tag]? = nil
    )
    {
        self.certificateArn = certificateArn
        self.tags = tags
    }
}

extension ACMClientTypes {

    public enum RecordType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cname
        case sdkUnknown(Swift.String)

        public static var allCases: [RecordType] {
            return [
                .cname
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cname: return "CNAME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMClientTypes {

    /// Contains a DNS record value that you can use to validate ownership or control of a domain. This is used by the [DescribeCertificate] action.
    public struct ResourceRecord: Swift.Sendable {
        /// The name of the DNS record to create in your domain. This is supplied by ACM.
        /// This member is required.
        public var name: Swift.String?
        /// The type of DNS record. Currently this can be CNAME.
        /// This member is required.
        public var type: ACMClientTypes.RecordType?
        /// The value of the CNAME record to add to your DNS database. This is supplied by ACM.
        /// This member is required.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            type: ACMClientTypes.RecordType? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.type = type
            self.value = value
        }
    }
}

extension ACMClientTypes {

    public enum ValidationMethod: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dns
        case email
        case sdkUnknown(Swift.String)

        public static var allCases: [ValidationMethod] {
            return [
                .dns,
                .email
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dns: return "DNS"
            case .email: return "EMAIL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMClientTypes {

    public enum DomainStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case pendingValidation
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [DomainStatus] {
            return [
                .failed,
                .pendingValidation,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pendingValidation: return "PENDING_VALIDATION"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMClientTypes {

    /// Contains information about the validation of each domain name in the certificate.
    public struct DomainValidation: Swift.Sendable {
        /// A fully qualified domain name (FQDN) in the certificate. For example, www.example.com or example.com.
        /// This member is required.
        public var domainName: Swift.String?
        /// Contains the CNAME record that you add to your DNS database for domain validation. For more information, see [Use DNS to Validate Domain Ownership](https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html). Note: The CNAME information that you need does not include the name of your domain. If you include  your domain name in the DNS database CNAME record, validation fails.  For example, if the name is "_a79865eb4cd1a6ab990a45779b4e0b96.yourdomain.com", only "_a79865eb4cd1a6ab990a45779b4e0b96" must be used.
        public var resourceRecord: ACMClientTypes.ResourceRecord?
        /// The domain name that ACM used to send domain validation emails.
        public var validationDomain: Swift.String?
        /// A list of email addresses that ACM used to send domain validation emails.
        public var validationEmails: [Swift.String]?
        /// Specifies the domain validation method.
        public var validationMethod: ACMClientTypes.ValidationMethod?
        /// The validation status of the domain name. This can be one of the following values:
        ///
        /// * PENDING_VALIDATION
        ///
        /// * SUCCESS
        ///
        /// * FAILED
        public var validationStatus: ACMClientTypes.DomainStatus?

        public init(
            domainName: Swift.String? = nil,
            resourceRecord: ACMClientTypes.ResourceRecord? = nil,
            validationDomain: Swift.String? = nil,
            validationEmails: [Swift.String]? = nil,
            validationMethod: ACMClientTypes.ValidationMethod? = nil,
            validationStatus: ACMClientTypes.DomainStatus? = nil
        )
        {
            self.domainName = domainName
            self.resourceRecord = resourceRecord
            self.validationDomain = validationDomain
            self.validationEmails = validationEmails
            self.validationMethod = validationMethod
            self.validationStatus = validationStatus
        }
    }
}

extension ACMClientTypes {

    public enum ExtendedKeyUsageName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case any
        case codeSigning
        case custom
        case emailProtection
        case ipsecEndSystem
        case ipsecTunnel
        case ipsecUser
        case `none`
        case ocspSigning
        case timeStamping
        case tlsWebClientAuthentication
        case tlsWebServerAuthentication
        case sdkUnknown(Swift.String)

        public static var allCases: [ExtendedKeyUsageName] {
            return [
                .any,
                .codeSigning,
                .custom,
                .emailProtection,
                .ipsecEndSystem,
                .ipsecTunnel,
                .ipsecUser,
                .none,
                .ocspSigning,
                .timeStamping,
                .tlsWebClientAuthentication,
                .tlsWebServerAuthentication
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .any: return "ANY"
            case .codeSigning: return "CODE_SIGNING"
            case .custom: return "CUSTOM"
            case .emailProtection: return "EMAIL_PROTECTION"
            case .ipsecEndSystem: return "IPSEC_END_SYSTEM"
            case .ipsecTunnel: return "IPSEC_TUNNEL"
            case .ipsecUser: return "IPSEC_USER"
            case .none: return "NONE"
            case .ocspSigning: return "OCSP_SIGNING"
            case .timeStamping: return "TIME_STAMPING"
            case .tlsWebClientAuthentication: return "TLS_WEB_CLIENT_AUTHENTICATION"
            case .tlsWebServerAuthentication: return "TLS_WEB_SERVER_AUTHENTICATION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMClientTypes {

    /// The Extended Key Usage X.509 v3 extension defines one or more purposes for which the public key can be used. This is in addition to or in place of the basic purposes specified by the Key Usage extension.
    public struct ExtendedKeyUsage: Swift.Sendable {
        /// The name of an Extended Key Usage value.
        public var name: ACMClientTypes.ExtendedKeyUsageName?
        /// An object identifier (OID) for the extension value. OIDs are strings of numbers separated by periods. The following OIDs are defined in RFC 3280 and RFC 5280.
        ///
        /// * 1.3.6.1.5.5.7.3.1 (TLS_WEB_SERVER_AUTHENTICATION)
        ///
        /// * 1.3.6.1.5.5.7.3.2 (TLS_WEB_CLIENT_AUTHENTICATION)
        ///
        /// * 1.3.6.1.5.5.7.3.3 (CODE_SIGNING)
        ///
        /// * 1.3.6.1.5.5.7.3.4 (EMAIL_PROTECTION)
        ///
        /// * 1.3.6.1.5.5.7.3.8 (TIME_STAMPING)
        ///
        /// * 1.3.6.1.5.5.7.3.9 (OCSP_SIGNING)
        ///
        /// * 1.3.6.1.5.5.7.3.5 (IPSEC_END_SYSTEM)
        ///
        /// * 1.3.6.1.5.5.7.3.6 (IPSEC_TUNNEL)
        ///
        /// * 1.3.6.1.5.5.7.3.7 (IPSEC_USER)
        public var oid: Swift.String?

        public init(
            name: ACMClientTypes.ExtendedKeyUsageName? = nil,
            oid: Swift.String? = nil
        )
        {
            self.name = name
            self.oid = oid
        }
    }
}

extension ACMClientTypes {

    public enum FailureReason: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case additionalVerificationRequired
        case caaError
        case domainNotAllowed
        case domainValidationDenied
        case invalidPublicDomain
        case noAvailableContacts
        case other
        case pcaAccessDenied
        case pcaInvalidArgs
        case pcaInvalidArn
        case pcaInvalidDuration
        case pcaInvalidState
        case pcaLimitExceeded
        case pcaNameConstraintsValidation
        case pcaRequestFailed
        case pcaResourceNotFound
        case slrNotFound
        case sdkUnknown(Swift.String)

        public static var allCases: [FailureReason] {
            return [
                .additionalVerificationRequired,
                .caaError,
                .domainNotAllowed,
                .domainValidationDenied,
                .invalidPublicDomain,
                .noAvailableContacts,
                .other,
                .pcaAccessDenied,
                .pcaInvalidArgs,
                .pcaInvalidArn,
                .pcaInvalidDuration,
                .pcaInvalidState,
                .pcaLimitExceeded,
                .pcaNameConstraintsValidation,
                .pcaRequestFailed,
                .pcaResourceNotFound,
                .slrNotFound
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .additionalVerificationRequired: return "ADDITIONAL_VERIFICATION_REQUIRED"
            case .caaError: return "CAA_ERROR"
            case .domainNotAllowed: return "DOMAIN_NOT_ALLOWED"
            case .domainValidationDenied: return "DOMAIN_VALIDATION_DENIED"
            case .invalidPublicDomain: return "INVALID_PUBLIC_DOMAIN"
            case .noAvailableContacts: return "NO_AVAILABLE_CONTACTS"
            case .other: return "OTHER"
            case .pcaAccessDenied: return "PCA_ACCESS_DENIED"
            case .pcaInvalidArgs: return "PCA_INVALID_ARGS"
            case .pcaInvalidArn: return "PCA_INVALID_ARN"
            case .pcaInvalidDuration: return "PCA_INVALID_DURATION"
            case .pcaInvalidState: return "PCA_INVALID_STATE"
            case .pcaLimitExceeded: return "PCA_LIMIT_EXCEEDED"
            case .pcaNameConstraintsValidation: return "PCA_NAME_CONSTRAINTS_VALIDATION"
            case .pcaRequestFailed: return "PCA_REQUEST_FAILED"
            case .pcaResourceNotFound: return "PCA_RESOURCE_NOT_FOUND"
            case .slrNotFound: return "SLR_NOT_FOUND"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMClientTypes {

    public enum KeyAlgorithm: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ecPrime256v1
        case ecSecp384r1
        case ecSecp521r1
        case rsa1024
        case rsa2048
        case rsa3072
        case rsa4096
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyAlgorithm] {
            return [
                .ecPrime256v1,
                .ecSecp384r1,
                .ecSecp521r1,
                .rsa1024,
                .rsa2048,
                .rsa3072,
                .rsa4096
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ecPrime256v1: return "EC_prime256v1"
            case .ecSecp384r1: return "EC_secp384r1"
            case .ecSecp521r1: return "EC_secp521r1"
            case .rsa1024: return "RSA_1024"
            case .rsa2048: return "RSA_2048"
            case .rsa3072: return "RSA_3072"
            case .rsa4096: return "RSA_4096"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMClientTypes {

    public enum KeyUsageName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case any
        case certificateSigning
        case crlSigning
        case custom
        case dataEncipherment
        case decipherOnly
        case digitalSignature
        case enchiperOnly
        case keyAgreement
        case keyEncipherment
        case nonRepudation
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyUsageName] {
            return [
                .any,
                .certificateSigning,
                .crlSigning,
                .custom,
                .dataEncipherment,
                .decipherOnly,
                .digitalSignature,
                .enchiperOnly,
                .keyAgreement,
                .keyEncipherment,
                .nonRepudation
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .any: return "ANY"
            case .certificateSigning: return "CERTIFICATE_SIGNING"
            case .crlSigning: return "CRL_SIGNING"
            case .custom: return "CUSTOM"
            case .dataEncipherment: return "DATA_ENCIPHERMENT"
            case .decipherOnly: return "DECIPHER_ONLY"
            case .digitalSignature: return "DIGITAL_SIGNATURE"
            case .enchiperOnly: return "ENCIPHER_ONLY"
            case .keyAgreement: return "KEY_AGREEMENT"
            case .keyEncipherment: return "KEY_ENCIPHERMENT"
            case .nonRepudation: return "NON_REPUDIATION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMClientTypes {

    /// The Key Usage X.509 v3 extension defines the purpose of the public key contained in the certificate.
    public struct KeyUsage: Swift.Sendable {
        /// A string value that contains a Key Usage extension name.
        public var name: ACMClientTypes.KeyUsageName?

        public init(
            name: ACMClientTypes.KeyUsageName? = nil
        )
        {
            self.name = name
        }
    }
}

extension ACMClientTypes {

    public enum CertificateTransparencyLoggingPreference: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [CertificateTransparencyLoggingPreference] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMClientTypes {

    /// Structure that contains options for your certificate. Currently, you can use this only to specify whether to opt in to or out of certificate transparency logging. Some browsers require that public certificates issued for your domain be recorded in a log. Certificates that are not logged typically generate a browser error. Transparency makes it possible for you to detect SSL/TLS certificates that have been mistakenly or maliciously issued for your domain. For general information, see [Certificate Transparency Logging](https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency).
    public struct CertificateOptions: Swift.Sendable {
        /// You can opt out of certificate transparency logging by specifying the DISABLED option. Opt in by specifying ENABLED.
        public var certificateTransparencyLoggingPreference: ACMClientTypes.CertificateTransparencyLoggingPreference?

        public init(
            certificateTransparencyLoggingPreference: ACMClientTypes.CertificateTransparencyLoggingPreference? = nil
        )
        {
            self.certificateTransparencyLoggingPreference = certificateTransparencyLoggingPreference
        }
    }
}

extension ACMClientTypes {

    public enum RenewalEligibility: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case eligible
        case ineligible
        case sdkUnknown(Swift.String)

        public static var allCases: [RenewalEligibility] {
            return [
                .eligible,
                .ineligible
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .eligible: return "ELIGIBLE"
            case .ineligible: return "INELIGIBLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMClientTypes {

    public enum RenewalStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case pendingAutoRenewal
        case pendingValidation
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [RenewalStatus] {
            return [
                .failed,
                .pendingAutoRenewal,
                .pendingValidation,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pendingAutoRenewal: return "PENDING_AUTO_RENEWAL"
            case .pendingValidation: return "PENDING_VALIDATION"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMClientTypes {

    /// Contains information about the status of ACM's [managed renewal](https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html) for the certificate. This structure exists only when the certificate type is AMAZON_ISSUED.
    public struct RenewalSummary: Swift.Sendable {
        /// Contains information about the validation of each domain name in the certificate, as it pertains to ACM's [managed renewal](https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html). This is different from the initial validation that occurs as a result of the [RequestCertificate] request. This field exists only when the certificate type is AMAZON_ISSUED.
        /// This member is required.
        public var domainValidationOptions: [ACMClientTypes.DomainValidation]?
        /// The status of ACM's [managed renewal](https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html) of the certificate.
        /// This member is required.
        public var renewalStatus: ACMClientTypes.RenewalStatus?
        /// The reason that a renewal request was unsuccessful.
        public var renewalStatusReason: ACMClientTypes.FailureReason?
        /// The time at which the renewal summary was last updated.
        /// This member is required.
        public var updatedAt: Foundation.Date?

        public init(
            domainValidationOptions: [ACMClientTypes.DomainValidation]? = nil,
            renewalStatus: ACMClientTypes.RenewalStatus? = nil,
            renewalStatusReason: ACMClientTypes.FailureReason? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.domainValidationOptions = domainValidationOptions
            self.renewalStatus = renewalStatus
            self.renewalStatusReason = renewalStatusReason
            self.updatedAt = updatedAt
        }
    }
}

extension ACMClientTypes {

    public enum RevocationReason: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case affiliationChanged
        case aACompromise
        case caCompromise
        case certificateHold
        case cessationOfOperation
        case keyCompromise
        case privilegeWithdrawn
        case removeFromCrl
        case superceded
        case unspecified
        case sdkUnknown(Swift.String)

        public static var allCases: [RevocationReason] {
            return [
                .affiliationChanged,
                .aACompromise,
                .caCompromise,
                .certificateHold,
                .cessationOfOperation,
                .keyCompromise,
                .privilegeWithdrawn,
                .removeFromCrl,
                .superceded,
                .unspecified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .affiliationChanged: return "AFFILIATION_CHANGED"
            case .aACompromise: return "A_A_COMPROMISE"
            case .caCompromise: return "CA_COMPROMISE"
            case .certificateHold: return "CERTIFICATE_HOLD"
            case .cessationOfOperation: return "CESSATION_OF_OPERATION"
            case .keyCompromise: return "KEY_COMPROMISE"
            case .privilegeWithdrawn: return "PRIVILEGE_WITHDRAWN"
            case .removeFromCrl: return "REMOVE_FROM_CRL"
            case .superceded: return "SUPERCEDED"
            case .unspecified: return "UNSPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMClientTypes {

    public enum CertificateStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case expired
        case failed
        case inactive
        case issued
        case pendingValidation
        case revoked
        case validationTimedOut
        case sdkUnknown(Swift.String)

        public static var allCases: [CertificateStatus] {
            return [
                .expired,
                .failed,
                .inactive,
                .issued,
                .pendingValidation,
                .revoked,
                .validationTimedOut
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .expired: return "EXPIRED"
            case .failed: return "FAILED"
            case .inactive: return "INACTIVE"
            case .issued: return "ISSUED"
            case .pendingValidation: return "PENDING_VALIDATION"
            case .revoked: return "REVOKED"
            case .validationTimedOut: return "VALIDATION_TIMED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMClientTypes {

    public enum CertificateType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case amazonIssued
        case imported
        case `private`
        case sdkUnknown(Swift.String)

        public static var allCases: [CertificateType] {
            return [
                .amazonIssued,
                .imported,
                .private
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .amazonIssued: return "AMAZON_ISSUED"
            case .imported: return "IMPORTED"
            case .private: return "PRIVATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMClientTypes {

    /// Contains metadata about an ACM certificate. This structure is returned in the response to a [DescribeCertificate] request.
    public struct CertificateDetail: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the certificate. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var certificateArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the private certificate authority (CA) that issued the certificate. This has the following format: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
        public var certificateAuthorityArn: Swift.String?
        /// The time at which the certificate was requested.
        public var createdAt: Foundation.Date?
        /// The fully qualified domain name for the certificate, such as www.example.com or example.com.
        public var domainName: Swift.String?
        /// Contains information about the initial validation of each domain name that occurs as a result of the [RequestCertificate] request. This field exists only when the certificate type is AMAZON_ISSUED.
        public var domainValidationOptions: [ACMClientTypes.DomainValidation]?
        /// Contains a list of Extended Key Usage X.509 v3 extension objects. Each object specifies a purpose for which the certificate public key can be used and consists of a name and an object identifier (OID).
        public var extendedKeyUsages: [ACMClientTypes.ExtendedKeyUsage]?
        /// The reason the certificate request failed. This value exists only when the certificate status is FAILED. For more information, see [Certificate Request Failed](https://docs.aws.amazon.com/acm/latest/userguide/troubleshooting.html#troubleshooting-failed) in the Certificate Manager User Guide.
        public var failureReason: ACMClientTypes.FailureReason?
        /// The date and time when the certificate was imported. This value exists only when the certificate type is IMPORTED.
        public var importedAt: Foundation.Date?
        /// A list of ARNs for the Amazon Web Services resources that are using the certificate. A certificate can be used by multiple Amazon Web Services resources.
        public var inUseBy: [Swift.String]?
        /// The time at which the certificate was issued. This value exists only when the certificate type is AMAZON_ISSUED.
        public var issuedAt: Foundation.Date?
        /// The name of the certificate authority that issued and signed the certificate.
        public var issuer: Swift.String?
        /// The algorithm that was used to generate the public-private key pair.
        public var keyAlgorithm: ACMClientTypes.KeyAlgorithm?
        /// A list of Key Usage X.509 v3 extension objects. Each object is a string value that identifies the purpose of the public key contained in the certificate. Possible extension values include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION, and more.
        public var keyUsages: [ACMClientTypes.KeyUsage]?
        /// The time after which the certificate is not valid.
        public var notAfter: Foundation.Date?
        /// The time before which the certificate is not valid.
        public var notBefore: Foundation.Date?
        /// Value that specifies whether to add the certificate to a transparency log. Certificate transparency makes it possible to detect SSL certificates that have been mistakenly or maliciously issued. A browser might respond to certificate that has not been logged by showing an error message. The logs are cryptographically secure.
        public var options: ACMClientTypes.CertificateOptions?
        /// Specifies whether the certificate is eligible for renewal. At this time, only exported private certificates can be renewed with the [RenewCertificate] command.
        public var renewalEligibility: ACMClientTypes.RenewalEligibility?
        /// Contains information about the status of ACM's [managed renewal](https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html) for the certificate. This field exists only when the certificate type is AMAZON_ISSUED.
        public var renewalSummary: ACMClientTypes.RenewalSummary?
        /// The reason the certificate was revoked. This value exists only when the certificate status is REVOKED.
        public var revocationReason: ACMClientTypes.RevocationReason?
        /// The time at which the certificate was revoked. This value exists only when the certificate status is REVOKED.
        public var revokedAt: Foundation.Date?
        /// The serial number of the certificate.
        public var serial: Swift.String?
        /// The algorithm that was used to sign the certificate.
        public var signatureAlgorithm: Swift.String?
        /// The status of the certificate. A certificate enters status PENDING_VALIDATION upon being requested, unless it fails for any of the reasons given in the troubleshooting topic [Certificate request fails](https://docs.aws.amazon.com/acm/latest/userguide/troubleshooting-failed.html). ACM makes repeated attempts to validate a certificate for 72 hours and then times out. If a certificate shows status FAILED or VALIDATION_TIMED_OUT, delete the request, correct the issue with [DNS validation](https://docs.aws.amazon.com/acm/latest/userguide/dns-validation.html) or [Email validation](https://docs.aws.amazon.com/acm/latest/userguide/email-validation.html), and try again. If validation succeeds, the certificate enters status ISSUED.
        public var status: ACMClientTypes.CertificateStatus?
        /// The name of the entity that is associated with the public key contained in the certificate.
        public var subject: Swift.String?
        /// One or more domain names (subject alternative names) included in the certificate. This list contains the domain names that are bound to the public key that is contained in the certificate. The subject alternative names include the canonical domain name (CN) of the certificate and additional domain names that can be used to connect to the website.
        public var subjectAlternativeNames: [Swift.String]?
        /// The source of the certificate. For certificates provided by ACM, this value is AMAZON_ISSUED. For certificates that you imported with [ImportCertificate], this value is IMPORTED. ACM does not provide [managed renewal](https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html) for imported certificates. For more information about the differences between certificates that you import and those that ACM provides, see [Importing Certificates](https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html) in the Certificate Manager User Guide.
        public var type: ACMClientTypes.CertificateType?

        public init(
            certificateArn: Swift.String? = nil,
            certificateAuthorityArn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            domainName: Swift.String? = nil,
            domainValidationOptions: [ACMClientTypes.DomainValidation]? = nil,
            extendedKeyUsages: [ACMClientTypes.ExtendedKeyUsage]? = nil,
            failureReason: ACMClientTypes.FailureReason? = nil,
            importedAt: Foundation.Date? = nil,
            inUseBy: [Swift.String]? = nil,
            issuedAt: Foundation.Date? = nil,
            issuer: Swift.String? = nil,
            keyAlgorithm: ACMClientTypes.KeyAlgorithm? = nil,
            keyUsages: [ACMClientTypes.KeyUsage]? = nil,
            notAfter: Foundation.Date? = nil,
            notBefore: Foundation.Date? = nil,
            options: ACMClientTypes.CertificateOptions? = nil,
            renewalEligibility: ACMClientTypes.RenewalEligibility? = nil,
            renewalSummary: ACMClientTypes.RenewalSummary? = nil,
            revocationReason: ACMClientTypes.RevocationReason? = nil,
            revokedAt: Foundation.Date? = nil,
            serial: Swift.String? = nil,
            signatureAlgorithm: Swift.String? = nil,
            status: ACMClientTypes.CertificateStatus? = nil,
            subject: Swift.String? = nil,
            subjectAlternativeNames: [Swift.String]? = nil,
            type: ACMClientTypes.CertificateType? = nil
        )
        {
            self.certificateArn = certificateArn
            self.certificateAuthorityArn = certificateAuthorityArn
            self.createdAt = createdAt
            self.domainName = domainName
            self.domainValidationOptions = domainValidationOptions
            self.extendedKeyUsages = extendedKeyUsages
            self.failureReason = failureReason
            self.importedAt = importedAt
            self.inUseBy = inUseBy
            self.issuedAt = issuedAt
            self.issuer = issuer
            self.keyAlgorithm = keyAlgorithm
            self.keyUsages = keyUsages
            self.notAfter = notAfter
            self.notBefore = notBefore
            self.options = options
            self.renewalEligibility = renewalEligibility
            self.renewalSummary = renewalSummary
            self.revocationReason = revocationReason
            self.revokedAt = revokedAt
            self.serial = serial
            self.signatureAlgorithm = signatureAlgorithm
            self.status = status
            self.subject = subject
            self.subjectAlternativeNames = subjectAlternativeNames
            self.type = type
        }
    }
}

/// You are trying to update a resource or configuration that is already being created or updated. Wait for the previous operation to finish and try again.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The certificate is in use by another Amazon Web Services service in the caller's account. Remove the association and try again.
public struct ResourceInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteCertificateInput: Swift.Sendable {
    /// String that contains the ARN of the ACM certificate to be deleted. This must be of the form: arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012 For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
    /// This member is required.
    public var certificateArn: Swift.String?

    public init(
        certificateArn: Swift.String? = nil
    )
    {
        self.certificateArn = certificateArn
    }
}

public struct DescribeCertificateInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the ACM certificate. The ARN must have the following form: arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012 For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
    /// This member is required.
    public var certificateArn: Swift.String?

    public init(
        certificateArn: Swift.String? = nil
    )
    {
        self.certificateArn = certificateArn
    }
}

public struct DescribeCertificateOutput: Swift.Sendable {
    /// Metadata about an ACM certificate.
    public var certificate: ACMClientTypes.CertificateDetail?

    public init(
        certificate: ACMClientTypes.CertificateDetail? = nil
    )
    {
        self.certificate = certificate
    }
}

/// The certificate request is in process and the certificate in your account has not yet been issued.
public struct RequestInProgressException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RequestInProgressException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ExportCertificateInput: Swift.Sendable {
    /// An Amazon Resource Name (ARN) of the issued certificate. This must be of the form: arn:aws:acm:region:account:certificate/12345678-1234-1234-1234-123456789012
    /// This member is required.
    public var certificateArn: Swift.String?
    /// Passphrase to associate with the encrypted exported private key. When creating your passphrase, you can use any ASCII character except #, $, or %. If you want to later decrypt the private key, you must have the passphrase. You can use the following OpenSSL command to decrypt a private key. After entering the command, you are prompted for the passphrase. openssl rsa -in encrypted_key.pem -out decrypted_key.pem
    /// This member is required.
    public var passphrase: Foundation.Data?

    public init(
        certificateArn: Swift.String? = nil,
        passphrase: Foundation.Data? = nil
    )
    {
        self.certificateArn = certificateArn
        self.passphrase = passphrase
    }
}

extension ExportCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportCertificateInput(certificateArn: \(Swift.String(describing: certificateArn)), passphrase: \"CONTENT_REDACTED\")"}
}

public struct ExportCertificateOutput: Swift.Sendable {
    /// The base64 PEM-encoded certificate.
    public var certificate: Swift.String?
    /// The base64 PEM-encoded certificate chain. This does not include the certificate that you are exporting.
    public var certificateChain: Swift.String?
    /// The encrypted private key associated with the public key in the certificate. The key is output in PKCS #8 format and is base64 PEM-encoded.
    public var privateKey: Swift.String?

    public init(
        certificate: Swift.String? = nil,
        certificateChain: Swift.String? = nil,
        privateKey: Swift.String? = nil
    )
    {
        self.certificate = certificate
        self.certificateChain = certificateChain
        self.privateKey = privateKey
    }
}

extension ExportCertificateOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportCertificateOutput(certificate: \(Swift.String(describing: certificate)), certificateChain: \(Swift.String(describing: certificateChain)), privateKey: \"CONTENT_REDACTED\")"}
}

extension ACMClientTypes {

    /// Object containing expiration events options associated with an Amazon Web Services account.
    public struct ExpiryEventsConfiguration: Swift.Sendable {
        /// Specifies the number of days prior to certificate expiration when ACM starts generating EventBridge events. ACM sends one event per day per certificate until the certificate expires. By default, accounts receive events starting 45 days before certificate expiration.
        public var daysBeforeExpiry: Swift.Int?

        public init(
            daysBeforeExpiry: Swift.Int? = nil
        )
        {
            self.daysBeforeExpiry = daysBeforeExpiry
        }
    }
}

public struct GetAccountConfigurationOutput: Swift.Sendable {
    /// Expiration events configuration options associated with the Amazon Web Services account.
    public var expiryEvents: ACMClientTypes.ExpiryEventsConfiguration?

    public init(
        expiryEvents: ACMClientTypes.ExpiryEventsConfiguration? = nil
    )
    {
        self.expiryEvents = expiryEvents
    }
}

public struct GetCertificateInput: Swift.Sendable {
    /// String that contains a certificate ARN in the following format: arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012 For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
    /// This member is required.
    public var certificateArn: Swift.String?

    public init(
        certificateArn: Swift.String? = nil
    )
    {
        self.certificateArn = certificateArn
    }
}

public struct GetCertificateOutput: Swift.Sendable {
    /// The ACM-issued certificate corresponding to the ARN specified as input.
    public var certificate: Swift.String?
    /// Certificates forming the requested certificate's chain of trust. The chain consists of the certificate of the issuing CA and the intermediate certificates of any other subordinate CAs.
    public var certificateChain: Swift.String?

    public init(
        certificate: Swift.String? = nil,
        certificateChain: Swift.String? = nil
    )
    {
        self.certificate = certificate
        self.certificateChain = certificateChain
    }
}

/// An ACM quota has been exceeded.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ImportCertificateInput: Swift.Sendable {
    /// The certificate to import.
    /// This member is required.
    public var certificate: Foundation.Data?
    /// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of an imported certificate to replace. To import a new certificate, omit this field.
    public var certificateArn: Swift.String?
    /// The PEM encoded certificate chain.
    public var certificateChain: Foundation.Data?
    /// The private key that matches the public key in the certificate.
    /// This member is required.
    public var privateKey: Foundation.Data?
    /// One or more resource tags to associate with the imported certificate. Note: You cannot apply tags when reimporting a certificate.
    public var tags: [ACMClientTypes.Tag]?

    public init(
        certificate: Foundation.Data? = nil,
        certificateArn: Swift.String? = nil,
        certificateChain: Foundation.Data? = nil,
        privateKey: Foundation.Data? = nil,
        tags: [ACMClientTypes.Tag]? = nil
    )
    {
        self.certificate = certificate
        self.certificateArn = certificateArn
        self.certificateChain = certificateChain
        self.privateKey = privateKey
        self.tags = tags
    }
}

extension ImportCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ImportCertificateInput(certificate: \(Swift.String(describing: certificate)), certificateArn: \(Swift.String(describing: certificateArn)), certificateChain: \(Swift.String(describing: certificateChain)), tags: \(Swift.String(describing: tags)), privateKey: \"CONTENT_REDACTED\")"}
}

public struct ImportCertificateOutput: Swift.Sendable {
    /// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the imported certificate.
    public var certificateArn: Swift.String?

    public init(
        certificateArn: Swift.String? = nil
    )
    {
        self.certificateArn = certificateArn
    }
}

/// One or more of of request parameters specified is not valid.
public struct InvalidArgsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidArgsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The supplied input failed to satisfy constraints of an Amazon Web Services service.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationError" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ACMClientTypes {

    /// This structure can be used in the [ListCertificates] action to filter the output of the certificate list.
    public struct Filters: Swift.Sendable {
        /// Specify one or more [ExtendedKeyUsage] extension values.
        public var extendedKeyUsage: [ACMClientTypes.ExtendedKeyUsageName]?
        /// Specify one or more algorithms that can be used to generate key pairs. Default filtering returns only RSA_1024 and RSA_2048 certificates that have at least one domain. To return other certificate types, provide the desired type signatures in a comma-separated list. For example, "keyTypes": ["RSA_2048","RSA_4096"] returns both RSA_2048 and RSA_4096 certificates.
        public var keyTypes: [ACMClientTypes.KeyAlgorithm]?
        /// Specify one or more [KeyUsage] extension values.
        public var keyUsage: [ACMClientTypes.KeyUsageName]?

        public init(
            extendedKeyUsage: [ACMClientTypes.ExtendedKeyUsageName]? = nil,
            keyTypes: [ACMClientTypes.KeyAlgorithm]? = nil,
            keyUsage: [ACMClientTypes.KeyUsageName]? = nil
        )
        {
            self.extendedKeyUsage = extendedKeyUsage
            self.keyTypes = keyTypes
            self.keyUsage = keyUsage
        }
    }
}

extension ACMClientTypes {

    public enum SortBy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createdAt
        case sdkUnknown(Swift.String)

        public static var allCases: [SortBy] {
            return [
                .createdAt
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createdAt: return "CREATED_AT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMClientTypes {

    public enum SortOrder: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ASCENDING"
            case .descending: return "DESCENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListCertificatesInput: Swift.Sendable {
    /// Filter the certificate list by status value.
    public var certificateStatuses: [ACMClientTypes.CertificateStatus]?
    /// Filter the certificate list. For more information, see the [Filters] structure.
    public var includes: ACMClientTypes.Filters?
    /// Use this parameter when paginating results to specify the maximum number of items to return in the response. If additional items exist beyond the number you specify, the NextToken element is sent in the response. Use this NextToken value in a subsequent request to retrieve additional items.
    public var maxItems: Swift.Int?
    /// Use this parameter only when paginating results and only in a subsequent request after you receive a response with truncated results. Set it to the value of NextToken from the response you just received.
    public var nextToken: Swift.String?
    /// Specifies the field to sort results by. If you specify SortBy, you must also specify SortOrder.
    public var sortBy: ACMClientTypes.SortBy?
    /// Specifies the order of sorted results. If you specify SortOrder, you must also specify SortBy.
    public var sortOrder: ACMClientTypes.SortOrder?

    public init(
        certificateStatuses: [ACMClientTypes.CertificateStatus]? = nil,
        includes: ACMClientTypes.Filters? = nil,
        maxItems: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: ACMClientTypes.SortBy? = nil,
        sortOrder: ACMClientTypes.SortOrder? = nil
    )
    {
        self.certificateStatuses = certificateStatuses
        self.includes = includes
        self.maxItems = maxItems
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

extension ACMClientTypes {

    /// This structure is returned in the response object of [ListCertificates] action.
    public struct CertificateSummary: Swift.Sendable {
        /// Amazon Resource Name (ARN) of the certificate. This is of the form: arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012 For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        public var certificateArn: Swift.String?
        /// The time at which the certificate was requested.
        public var createdAt: Foundation.Date?
        /// Fully qualified domain name (FQDN), such as www.example.com or example.com, for the certificate.
        public var domainName: Swift.String?
        /// Indicates whether the certificate has been exported. This value exists only when the certificate type is PRIVATE.
        public var exported: Swift.Bool?
        /// Contains a list of Extended Key Usage X.509 v3 extension objects. Each object specifies a purpose for which the certificate public key can be used and consists of a name and an object identifier (OID).
        public var extendedKeyUsages: [ACMClientTypes.ExtendedKeyUsageName]?
        /// When called by [ListCertificates], indicates whether the full list of subject alternative names has been included in the response. If false, the response includes all of the subject alternative names included in the certificate. If true, the response only includes the first 100 subject alternative names included in the certificate. To display the full list of subject alternative names, use [DescribeCertificate].
        public var hasAdditionalSubjectAlternativeNames: Swift.Bool?
        /// The date and time when the certificate was imported. This value exists only when the certificate type is IMPORTED.
        public var importedAt: Foundation.Date?
        /// Indicates whether the certificate is currently in use by any Amazon Web Services resources.
        public var inUse: Swift.Bool?
        /// The time at which the certificate was issued. This value exists only when the certificate type is AMAZON_ISSUED.
        public var issuedAt: Foundation.Date?
        /// The algorithm that was used to generate the public-private key pair.
        public var keyAlgorithm: ACMClientTypes.KeyAlgorithm?
        /// A list of Key Usage X.509 v3 extension objects. Each object is a string value that identifies the purpose of the public key contained in the certificate. Possible extension values include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION, and more.
        public var keyUsages: [ACMClientTypes.KeyUsageName]?
        /// The time after which the certificate is not valid.
        public var notAfter: Foundation.Date?
        /// The time before which the certificate is not valid.
        public var notBefore: Foundation.Date?
        /// Specifies whether the certificate is eligible for renewal. At this time, only exported private certificates can be renewed with the [RenewCertificate] command.
        public var renewalEligibility: ACMClientTypes.RenewalEligibility?
        /// The time at which the certificate was revoked. This value exists only when the certificate status is REVOKED.
        public var revokedAt: Foundation.Date?
        /// The status of the certificate. A certificate enters status PENDING_VALIDATION upon being requested, unless it fails for any of the reasons given in the troubleshooting topic [Certificate request fails](https://docs.aws.amazon.com/acm/latest/userguide/troubleshooting-failed.html). ACM makes repeated attempts to validate a certificate for 72 hours and then times out. If a certificate shows status FAILED or VALIDATION_TIMED_OUT, delete the request, correct the issue with [DNS validation](https://docs.aws.amazon.com/acm/latest/userguide/dns-validation.html) or [Email validation](https://docs.aws.amazon.com/acm/latest/userguide/email-validation.html), and try again. If validation succeeds, the certificate enters status ISSUED.
        public var status: ACMClientTypes.CertificateStatus?
        /// One or more domain names (subject alternative names) included in the certificate. This list contains the domain names that are bound to the public key that is contained in the certificate. The subject alternative names include the canonical domain name (CN) of the certificate and additional domain names that can be used to connect to the website. When called by [ListCertificates], this parameter will only return the first 100 subject alternative names included in the certificate. To display the full list of subject alternative names, use [DescribeCertificate].
        public var subjectAlternativeNameSummaries: [Swift.String]?
        /// The source of the certificate. For certificates provided by ACM, this value is AMAZON_ISSUED. For certificates that you imported with [ImportCertificate], this value is IMPORTED. ACM does not provide [managed renewal](https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html) for imported certificates. For more information about the differences between certificates that you import and those that ACM provides, see [Importing Certificates](https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html) in the Certificate Manager User Guide.
        public var type: ACMClientTypes.CertificateType?

        public init(
            certificateArn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            domainName: Swift.String? = nil,
            exported: Swift.Bool? = nil,
            extendedKeyUsages: [ACMClientTypes.ExtendedKeyUsageName]? = nil,
            hasAdditionalSubjectAlternativeNames: Swift.Bool? = nil,
            importedAt: Foundation.Date? = nil,
            inUse: Swift.Bool? = nil,
            issuedAt: Foundation.Date? = nil,
            keyAlgorithm: ACMClientTypes.KeyAlgorithm? = nil,
            keyUsages: [ACMClientTypes.KeyUsageName]? = nil,
            notAfter: Foundation.Date? = nil,
            notBefore: Foundation.Date? = nil,
            renewalEligibility: ACMClientTypes.RenewalEligibility? = nil,
            revokedAt: Foundation.Date? = nil,
            status: ACMClientTypes.CertificateStatus? = nil,
            subjectAlternativeNameSummaries: [Swift.String]? = nil,
            type: ACMClientTypes.CertificateType? = nil
        )
        {
            self.certificateArn = certificateArn
            self.createdAt = createdAt
            self.domainName = domainName
            self.exported = exported
            self.extendedKeyUsages = extendedKeyUsages
            self.hasAdditionalSubjectAlternativeNames = hasAdditionalSubjectAlternativeNames
            self.importedAt = importedAt
            self.inUse = inUse
            self.issuedAt = issuedAt
            self.keyAlgorithm = keyAlgorithm
            self.keyUsages = keyUsages
            self.notAfter = notAfter
            self.notBefore = notBefore
            self.renewalEligibility = renewalEligibility
            self.revokedAt = revokedAt
            self.status = status
            self.subjectAlternativeNameSummaries = subjectAlternativeNameSummaries
            self.type = type
        }
    }
}

public struct ListCertificatesOutput: Swift.Sendable {
    /// A list of ACM certificates.
    public var certificateSummaryList: [ACMClientTypes.CertificateSummary]?
    /// When the list is truncated, this value is present and contains the value to use for the NextToken parameter in a subsequent pagination request.
    public var nextToken: Swift.String?

    public init(
        certificateSummaryList: [ACMClientTypes.CertificateSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.certificateSummaryList = certificateSummaryList
        self.nextToken = nextToken
    }
}

public struct ListTagsForCertificateInput: Swift.Sendable {
    /// String that contains the ARN of the ACM certificate for which you want to list the tags. This must have the following form: arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012 For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
    /// This member is required.
    public var certificateArn: Swift.String?

    public init(
        certificateArn: Swift.String? = nil
    )
    {
        self.certificateArn = certificateArn
    }
}

public struct ListTagsForCertificateOutput: Swift.Sendable {
    /// The key-value pairs that define the applied tags.
    public var tags: [ACMClientTypes.Tag]?

    public init(
        tags: [ACMClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

public struct PutAccountConfigurationInput: Swift.Sendable {
    /// Specifies expiration events associated with an account.
    public var expiryEvents: ACMClientTypes.ExpiryEventsConfiguration?
    /// Customer-chosen string used to distinguish between calls to PutAccountConfiguration. Idempotency tokens time out after one hour. If you call PutAccountConfiguration multiple times with the same unexpired idempotency token, ACM treats it as the same request and returns the original result. If you change the idempotency token for each call, ACM treats each call as a new request.
    /// This member is required.
    public var idempotencyToken: Swift.String?

    public init(
        expiryEvents: ACMClientTypes.ExpiryEventsConfiguration? = nil,
        idempotencyToken: Swift.String? = nil
    )
    {
        self.expiryEvents = expiryEvents
        self.idempotencyToken = idempotencyToken
    }
}

public struct RemoveTagsFromCertificateInput: Swift.Sendable {
    /// String that contains the ARN of the ACM Certificate with one or more tags that you want to remove. This must be of the form: arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012 For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
    /// This member is required.
    public var certificateArn: Swift.String?
    /// The key-value pair that defines the tag to remove.
    /// This member is required.
    public var tags: [ACMClientTypes.Tag]?

    public init(
        certificateArn: Swift.String? = nil,
        tags: [ACMClientTypes.Tag]? = nil
    )
    {
        self.certificateArn = certificateArn
        self.tags = tags
    }
}

public struct RenewCertificateInput: Swift.Sendable {
    /// String that contains the ARN of the ACM certificate to be renewed. This must be of the form: arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012 For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
    /// This member is required.
    public var certificateArn: Swift.String?

    public init(
        certificateArn: Swift.String? = nil
    )
    {
        self.certificateArn = certificateArn
    }
}

/// One or more values in the [DomainValidationOption] structure is incorrect.
public struct InvalidDomainValidationOptionsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDomainValidationOptionsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ACMClientTypes {

    /// Contains information about the domain names that you want ACM to use to send you emails that enable you to validate domain ownership.
    public struct DomainValidationOption: Swift.Sendable {
        /// A fully qualified domain name (FQDN) in the certificate request.
        /// This member is required.
        public var domainName: Swift.String?
        /// The domain name that you want ACM to use to send you validation emails. This domain name is the suffix of the email addresses that you want ACM to use. This must be the same as the DomainName value or a superdomain of the DomainName value. For example, if you request a certificate for testing.example.com, you can specify example.com for this value. In that case, ACM sends domain validation emails to the following five addresses:
        ///
        /// * admin@example.com
        ///
        /// * administrator@example.com
        ///
        /// * hostmaster@example.com
        ///
        /// * postmaster@example.com
        ///
        /// * webmaster@example.com
        /// This member is required.
        public var validationDomain: Swift.String?

        public init(
            domainName: Swift.String? = nil,
            validationDomain: Swift.String? = nil
        )
        {
            self.domainName = domainName
            self.validationDomain = validationDomain
        }
    }
}

public struct RequestCertificateInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the private certificate authority (CA) that will be used to issue the certificate. If you do not provide an ARN and you are trying to request a private certificate, ACM will attempt to issue a public certificate. For more information about private CAs, see the [Amazon Web Services Private Certificate Authority](https://docs.aws.amazon.com/privateca/latest/userguide/PcaWelcome.html) user guide. The ARN must have the following form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
    public var certificateAuthorityArn: Swift.String?
    /// Fully qualified domain name (FQDN), such as www.example.com, that you want to secure with an ACM certificate. Use an asterisk (*) to create a wildcard certificate that protects several sites in the same domain. For example, *.example.com protects www.example.com, site.example.com, and images.example.com. In compliance with [RFC 5280](https://datatracker.ietf.org/doc/html/rfc5280), the length of the domain name (technically, the Common Name) that you provide cannot exceed 64 octets (characters), including periods. To add a longer domain name, specify it in the Subject Alternative Name field, which supports names up to 253 octets in length.
    /// This member is required.
    public var domainName: Swift.String?
    /// The domain name that you want ACM to use to send you emails so that you can validate domain ownership.
    public var domainValidationOptions: [ACMClientTypes.DomainValidationOption]?
    /// Customer chosen string that can be used to distinguish between calls to RequestCertificate. Idempotency tokens time out after one hour. Therefore, if you call RequestCertificate multiple times with the same idempotency token within one hour, ACM recognizes that you are requesting only one certificate and will issue only one. If you change the idempotency token for each call, ACM recognizes that you are requesting multiple certificates.
    public var idempotencyToken: Swift.String?
    /// Specifies the algorithm of the public and private key pair that your certificate uses to encrypt data. RSA is the default key algorithm for ACM certificates. Elliptic Curve Digital Signature Algorithm (ECDSA) keys are smaller, offering security comparable to RSA keys but with greater computing efficiency. However, ECDSA is not supported by all network clients. Some Amazon Web Services services may require RSA keys, or only support ECDSA keys of a particular size, while others allow the use of either RSA and ECDSA keys to ensure that compatibility is not broken. Check the requirements for the Amazon Web Services service where you plan to deploy your certificate. For more information about selecting an algorithm, see [Key algorithms](https://docs.aws.amazon.com/acm/latest/userguide/acm-certificate.html#algorithms). Algorithms supported for an ACM certificate request include:
    ///
    /// * RSA_2048
    ///
    /// * EC_prime256v1
    ///
    /// * EC_secp384r1
    ///
    ///
    /// Other listed algorithms are for imported certificates only. When you request a private PKI certificate signed by a CA from Amazon Web Services Private CA, the specified signing algorithm family (RSA or ECDSA) must match the algorithm family of the CA's secret key. Default: RSA_2048
    public var keyAlgorithm: ACMClientTypes.KeyAlgorithm?
    /// Currently, you can use this parameter to specify whether to add the certificate to a certificate transparency log. Certificate transparency makes it possible to detect SSL/TLS certificates that have been mistakenly or maliciously issued. Certificates that have not been logged typically produce an error message in a browser. For more information, see [Opting Out of Certificate Transparency Logging](https://docs.aws.amazon.com/acm/latest/userguide/acm-bestpractices.html#best-practices-transparency).
    public var options: ACMClientTypes.CertificateOptions?
    /// Additional FQDNs to be included in the Subject Alternative Name extension of the ACM certificate. For example, add the name www.example.net to a certificate for which the DomainName field is www.example.com if users can reach your site by using either name. The maximum number of domain names that you can add to an ACM certificate is 100. However, the initial quota is 10 domain names. If you need more than 10 names, you must request a quota increase. For more information, see [Quotas](https://docs.aws.amazon.com/acm/latest/userguide/acm-limits.html). The maximum length of a SAN DNS name is 253 octets. The name is made up of multiple labels separated by periods. No label can be longer than 63 octets. Consider the following examples:
    ///
    /// * (63 octets).(63 octets).(63 octets).(61 octets) is legal because the total length is 253 octets (63+1+63+1+63+1+61) and no label exceeds 63 octets.
    ///
    /// * (64 octets).(63 octets).(63 octets).(61 octets) is not legal because the total length exceeds 253 octets (64+1+63+1+63+1+61) and the first label exceeds 63 octets.
    ///
    /// * (63 octets).(63 octets).(63 octets).(62 octets) is not legal because the total length of the DNS name (63+1+63+1+63+1+62) exceeds 253 octets.
    public var subjectAlternativeNames: [Swift.String]?
    /// One or more resource tags to associate with the certificate.
    public var tags: [ACMClientTypes.Tag]?
    /// The method you want to use if you are requesting a public certificate to validate that you own or control domain. You can [validate with DNS](https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html) or [validate with email](https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-email.html). We recommend that you use DNS validation.
    public var validationMethod: ACMClientTypes.ValidationMethod?

    public init(
        certificateAuthorityArn: Swift.String? = nil,
        domainName: Swift.String? = nil,
        domainValidationOptions: [ACMClientTypes.DomainValidationOption]? = nil,
        idempotencyToken: Swift.String? = nil,
        keyAlgorithm: ACMClientTypes.KeyAlgorithm? = nil,
        options: ACMClientTypes.CertificateOptions? = nil,
        subjectAlternativeNames: [Swift.String]? = nil,
        tags: [ACMClientTypes.Tag]? = nil,
        validationMethod: ACMClientTypes.ValidationMethod? = nil
    )
    {
        self.certificateAuthorityArn = certificateAuthorityArn
        self.domainName = domainName
        self.domainValidationOptions = domainValidationOptions
        self.idempotencyToken = idempotencyToken
        self.keyAlgorithm = keyAlgorithm
        self.options = options
        self.subjectAlternativeNames = subjectAlternativeNames
        self.tags = tags
        self.validationMethod = validationMethod
    }
}

public struct RequestCertificateOutput: Swift.Sendable {
    /// String that contains the ARN of the issued certificate. This must be of the form: arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012
    public var certificateArn: Swift.String?

    public init(
        certificateArn: Swift.String? = nil
    )
    {
        self.certificateArn = certificateArn
    }
}

/// Processing has reached an invalid state.
public struct InvalidStateException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidStateException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ResendValidationEmailInput: Swift.Sendable {
    /// String that contains the ARN of the requested certificate. The certificate ARN is generated and returned by the [RequestCertificate] action as soon as the request is made. By default, using this parameter causes email to be sent to all top-level domains you specified in the certificate request. The ARN must be of the form: arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012
    /// This member is required.
    public var certificateArn: Swift.String?
    /// The fully qualified domain name (FQDN) of the certificate that needs to be validated.
    /// This member is required.
    public var domain: Swift.String?
    /// The base validation domain that will act as the suffix of the email addresses that are used to send the emails. This must be the same as the Domain value or a superdomain of the Domain value. For example, if you requested a certificate for site.subdomain.example.com and specify a ValidationDomain of subdomain.example.com, ACM sends email to the domain registrant, technical contact, and administrative contact in WHOIS and the following five addresses:
    ///
    /// * admin@subdomain.example.com
    ///
    /// * administrator@subdomain.example.com
    ///
    /// * hostmaster@subdomain.example.com
    ///
    /// * postmaster@subdomain.example.com
    ///
    /// * webmaster@subdomain.example.com
    /// This member is required.
    public var validationDomain: Swift.String?

    public init(
        certificateArn: Swift.String? = nil,
        domain: Swift.String? = nil,
        validationDomain: Swift.String? = nil
    )
    {
        self.certificateArn = certificateArn
        self.domain = domain
        self.validationDomain = validationDomain
    }
}

public struct UpdateCertificateOptionsInput: Swift.Sendable {
    /// ARN of the requested certificate to update. This must be of the form: arn:aws:acm:us-east-1:account:certificate/12345678-1234-1234-1234-123456789012
    /// This member is required.
    public var certificateArn: Swift.String?
    /// Use to update the options for your certificate. Currently, you can specify whether to add your certificate to a transparency log. Certificate transparency makes it possible to detect SSL/TLS certificates that have been mistakenly or maliciously issued. Certificates that have not been logged typically produce an error message in a browser.
    /// This member is required.
    public var options: ACMClientTypes.CertificateOptions?

    public init(
        certificateArn: Swift.String? = nil,
        options: ACMClientTypes.CertificateOptions? = nil
    )
    {
        self.certificateArn = certificateArn
        self.options = options
    }
}

extension AddTagsToCertificateInput {

    static func urlPathProvider(_ value: AddTagsToCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteCertificateInput {

    static func urlPathProvider(_ value: DeleteCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeCertificateInput {

    static func urlPathProvider(_ value: DescribeCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension ExportCertificateInput {

    static func urlPathProvider(_ value: ExportCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension GetAccountConfigurationInput {

    static func urlPathProvider(_ value: GetAccountConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension GetCertificateInput {

    static func urlPathProvider(_ value: GetCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension ImportCertificateInput {

    static func urlPathProvider(_ value: ImportCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension ListCertificatesInput {

    static func urlPathProvider(_ value: ListCertificatesInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForCertificateInput {

    static func urlPathProvider(_ value: ListTagsForCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension PutAccountConfigurationInput {

    static func urlPathProvider(_ value: PutAccountConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension RemoveTagsFromCertificateInput {

    static func urlPathProvider(_ value: RemoveTagsFromCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension RenewCertificateInput {

    static func urlPathProvider(_ value: RenewCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension RequestCertificateInput {

    static func urlPathProvider(_ value: RequestCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension ResendValidationEmailInput {

    static func urlPathProvider(_ value: ResendValidationEmailInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateCertificateOptionsInput {

    static func urlPathProvider(_ value: UpdateCertificateOptionsInput) -> Swift.String? {
        return "/"
    }
}

extension AddTagsToCertificateInput {

    static func write(value: AddTagsToCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateArn"].write(value.certificateArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ACMClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteCertificateInput {

    static func write(value: DeleteCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateArn"].write(value.certificateArn)
    }
}

extension DescribeCertificateInput {

    static func write(value: DescribeCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateArn"].write(value.certificateArn)
    }
}

extension ExportCertificateInput {

    static func write(value: ExportCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateArn"].write(value.certificateArn)
        try writer["Passphrase"].write(value.passphrase)
    }
}

extension GetAccountConfigurationInput {

    static func write(value: GetAccountConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension GetCertificateInput {

    static func write(value: GetCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateArn"].write(value.certificateArn)
    }
}

extension ImportCertificateInput {

    static func write(value: ImportCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Certificate"].write(value.certificate)
        try writer["CertificateArn"].write(value.certificateArn)
        try writer["CertificateChain"].write(value.certificateChain)
        try writer["PrivateKey"].write(value.privateKey)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ACMClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ListCertificatesInput {

    static func write(value: ListCertificatesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateStatuses"].writeList(value.certificateStatuses, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ACMClientTypes.CertificateStatus>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Includes"].write(value.includes, with: ACMClientTypes.Filters.write(value:to:))
        try writer["MaxItems"].write(value.maxItems)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListTagsForCertificateInput {

    static func write(value: ListTagsForCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateArn"].write(value.certificateArn)
    }
}

extension PutAccountConfigurationInput {

    static func write(value: PutAccountConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExpiryEvents"].write(value.expiryEvents, with: ACMClientTypes.ExpiryEventsConfiguration.write(value:to:))
        try writer["IdempotencyToken"].write(value.idempotencyToken)
    }
}

extension RemoveTagsFromCertificateInput {

    static func write(value: RemoveTagsFromCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateArn"].write(value.certificateArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ACMClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension RenewCertificateInput {

    static func write(value: RenewCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateArn"].write(value.certificateArn)
    }
}

extension RequestCertificateInput {

    static func write(value: RequestCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateAuthorityArn"].write(value.certificateAuthorityArn)
        try writer["DomainName"].write(value.domainName)
        try writer["DomainValidationOptions"].writeList(value.domainValidationOptions, memberWritingClosure: ACMClientTypes.DomainValidationOption.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IdempotencyToken"].write(value.idempotencyToken)
        try writer["KeyAlgorithm"].write(value.keyAlgorithm)
        try writer["Options"].write(value.options, with: ACMClientTypes.CertificateOptions.write(value:to:))
        try writer["SubjectAlternativeNames"].writeList(value.subjectAlternativeNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ACMClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ValidationMethod"].write(value.validationMethod)
    }
}

extension ResendValidationEmailInput {

    static func write(value: ResendValidationEmailInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateArn"].write(value.certificateArn)
        try writer["Domain"].write(value.domain)
        try writer["ValidationDomain"].write(value.validationDomain)
    }
}

extension UpdateCertificateOptionsInput {

    static func write(value: UpdateCertificateOptionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateArn"].write(value.certificateArn)
        try writer["Options"].write(value.options, with: ACMClientTypes.CertificateOptions.write(value:to:))
    }
}

extension AddTagsToCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddTagsToCertificateOutput {
        return AddTagsToCertificateOutput()
    }
}

extension DeleteCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCertificateOutput {
        return DeleteCertificateOutput()
    }
}

extension DescribeCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeCertificateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeCertificateOutput()
        value.certificate = try reader["Certificate"].readIfPresent(with: ACMClientTypes.CertificateDetail.read(from:))
        return value
    }
}

extension ExportCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExportCertificateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ExportCertificateOutput()
        value.certificate = try reader["Certificate"].readIfPresent()
        value.certificateChain = try reader["CertificateChain"].readIfPresent()
        value.privateKey = try reader["PrivateKey"].readIfPresent()
        return value
    }
}

extension GetAccountConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAccountConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAccountConfigurationOutput()
        value.expiryEvents = try reader["ExpiryEvents"].readIfPresent(with: ACMClientTypes.ExpiryEventsConfiguration.read(from:))
        return value
    }
}

extension GetCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetCertificateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetCertificateOutput()
        value.certificate = try reader["Certificate"].readIfPresent()
        value.certificateChain = try reader["CertificateChain"].readIfPresent()
        return value
    }
}

extension ImportCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ImportCertificateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ImportCertificateOutput()
        value.certificateArn = try reader["CertificateArn"].readIfPresent()
        return value
    }
}

extension ListCertificatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListCertificatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListCertificatesOutput()
        value.certificateSummaryList = try reader["CertificateSummaryList"].readListIfPresent(memberReadingClosure: ACMClientTypes.CertificateSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListTagsForCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForCertificateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForCertificateOutput()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: ACMClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutAccountConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutAccountConfigurationOutput {
        return PutAccountConfigurationOutput()
    }
}

extension RemoveTagsFromCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveTagsFromCertificateOutput {
        return RemoveTagsFromCertificateOutput()
    }
}

extension RenewCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RenewCertificateOutput {
        return RenewCertificateOutput()
    }
}

extension RequestCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RequestCertificateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RequestCertificateOutput()
        value.certificateArn = try reader["CertificateArn"].readIfPresent()
        return value
    }
}

extension ResendValidationEmailOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ResendValidationEmailOutput {
        return ResendValidationEmailOutput()
    }
}

extension UpdateCertificateOptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateCertificateOptionsOutput {
        return UpdateCertificateOptionsOutput()
    }
}

enum AddTagsToCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidTagException": return try InvalidTagException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TagPolicyException": return try TagPolicyException.makeError(baseError: baseError)
            case "Throttling": return try ThrottlingException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDenied": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "Throttling": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExportCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "RequestInProgressException": return try RequestInProgressException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAccountConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDenied": return try AccessDeniedException.makeError(baseError: baseError)
            case "Throttling": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "RequestInProgressException": return try RequestInProgressException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ImportCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidTagException": return try InvalidTagException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TagPolicyException": return try TagPolicyException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListCertificatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArgsException": return try InvalidArgsException.makeError(baseError: baseError)
            case "ValidationError": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutAccountConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDenied": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "Throttling": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationError": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveTagsFromCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidTagException": return try InvalidTagException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TagPolicyException": return try TagPolicyException.makeError(baseError: baseError)
            case "Throttling": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RenewCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RequestCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidDomainValidationOptionsException": return try InvalidDomainValidationOptionsException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidTagException": return try InvalidTagException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "TagPolicyException": return try TagPolicyException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ResendValidationEmailOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidDomainValidationOptionsException": return try InvalidDomainValidationOptionsException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateCertificateOptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InvalidParameterException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidParameterException {
        let reader = baseError.errorBodyReader
        var value = InvalidParameterException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyTagsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TooManyTagsException {
        let reader = baseError.errorBodyReader
        var value = TooManyTagsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TagPolicyException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TagPolicyException {
        let reader = baseError.errorBodyReader
        var value = TagPolicyException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidTagException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidTagException {
        let reader = baseError.errorBodyReader
        var value = InvalidTagException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidArnException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidArnException {
        let reader = baseError.errorBodyReader
        var value = InvalidArnException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceInUseException {
        let reader = baseError.errorBodyReader
        var value = ResourceInUseException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RequestInProgressException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> RequestInProgressException {
        let reader = baseError.errorBodyReader
        var value = RequestInProgressException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidArgsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidArgsException {
        let reader = baseError.errorBodyReader
        var value = InvalidArgsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidDomainValidationOptionsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidDomainValidationOptionsException {
        let reader = baseError.errorBodyReader
        var value = InvalidDomainValidationOptionsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidStateException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidStateException {
        let reader = baseError.errorBodyReader
        var value = InvalidStateException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ACMClientTypes.CertificateDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> ACMClientTypes.CertificateDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMClientTypes.CertificateDetail()
        value.certificateArn = try reader["CertificateArn"].readIfPresent()
        value.domainName = try reader["DomainName"].readIfPresent()
        value.subjectAlternativeNames = try reader["SubjectAlternativeNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.domainValidationOptions = try reader["DomainValidationOptions"].readListIfPresent(memberReadingClosure: ACMClientTypes.DomainValidation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.serial = try reader["Serial"].readIfPresent()
        value.subject = try reader["Subject"].readIfPresent()
        value.issuer = try reader["Issuer"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.issuedAt = try reader["IssuedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.importedAt = try reader["ImportedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["Status"].readIfPresent()
        value.revokedAt = try reader["RevokedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.revocationReason = try reader["RevocationReason"].readIfPresent()
        value.notBefore = try reader["NotBefore"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.notAfter = try reader["NotAfter"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.keyAlgorithm = try reader["KeyAlgorithm"].readIfPresent()
        value.signatureAlgorithm = try reader["SignatureAlgorithm"].readIfPresent()
        value.inUseBy = try reader["InUseBy"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.renewalSummary = try reader["RenewalSummary"].readIfPresent(with: ACMClientTypes.RenewalSummary.read(from:))
        value.keyUsages = try reader["KeyUsages"].readListIfPresent(memberReadingClosure: ACMClientTypes.KeyUsage.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.extendedKeyUsages = try reader["ExtendedKeyUsages"].readListIfPresent(memberReadingClosure: ACMClientTypes.ExtendedKeyUsage.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.certificateAuthorityArn = try reader["CertificateAuthorityArn"].readIfPresent()
        value.renewalEligibility = try reader["RenewalEligibility"].readIfPresent()
        value.options = try reader["Options"].readIfPresent(with: ACMClientTypes.CertificateOptions.read(from:))
        return value
    }
}

extension ACMClientTypes.CertificateOptions {

    static func write(value: ACMClientTypes.CertificateOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateTransparencyLoggingPreference"].write(value.certificateTransparencyLoggingPreference)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ACMClientTypes.CertificateOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMClientTypes.CertificateOptions()
        value.certificateTransparencyLoggingPreference = try reader["CertificateTransparencyLoggingPreference"].readIfPresent()
        return value
    }
}

extension ACMClientTypes.ExtendedKeyUsage {

    static func read(from reader: SmithyJSON.Reader) throws -> ACMClientTypes.ExtendedKeyUsage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMClientTypes.ExtendedKeyUsage()
        value.name = try reader["Name"].readIfPresent()
        value.oid = try reader["OID"].readIfPresent()
        return value
    }
}

extension ACMClientTypes.KeyUsage {

    static func read(from reader: SmithyJSON.Reader) throws -> ACMClientTypes.KeyUsage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMClientTypes.KeyUsage()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension ACMClientTypes.RenewalSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ACMClientTypes.RenewalSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMClientTypes.RenewalSummary()
        value.renewalStatus = try reader["RenewalStatus"].readIfPresent() ?? .sdkUnknown("")
        value.domainValidationOptions = try reader["DomainValidationOptions"].readListIfPresent(memberReadingClosure: ACMClientTypes.DomainValidation.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.renewalStatusReason = try reader["RenewalStatusReason"].readIfPresent()
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension ACMClientTypes.DomainValidation {

    static func read(from reader: SmithyJSON.Reader) throws -> ACMClientTypes.DomainValidation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMClientTypes.DomainValidation()
        value.domainName = try reader["DomainName"].readIfPresent() ?? ""
        value.validationEmails = try reader["ValidationEmails"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.validationDomain = try reader["ValidationDomain"].readIfPresent()
        value.validationStatus = try reader["ValidationStatus"].readIfPresent()
        value.resourceRecord = try reader["ResourceRecord"].readIfPresent(with: ACMClientTypes.ResourceRecord.read(from:))
        value.validationMethod = try reader["ValidationMethod"].readIfPresent()
        return value
    }
}

extension ACMClientTypes.ResourceRecord {

    static func read(from reader: SmithyJSON.Reader) throws -> ACMClientTypes.ResourceRecord {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMClientTypes.ResourceRecord()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension ACMClientTypes.ExpiryEventsConfiguration {

    static func write(value: ACMClientTypes.ExpiryEventsConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DaysBeforeExpiry"].write(value.daysBeforeExpiry)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ACMClientTypes.ExpiryEventsConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMClientTypes.ExpiryEventsConfiguration()
        value.daysBeforeExpiry = try reader["DaysBeforeExpiry"].readIfPresent()
        return value
    }
}

extension ACMClientTypes.CertificateSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ACMClientTypes.CertificateSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMClientTypes.CertificateSummary()
        value.certificateArn = try reader["CertificateArn"].readIfPresent()
        value.domainName = try reader["DomainName"].readIfPresent()
        value.subjectAlternativeNameSummaries = try reader["SubjectAlternativeNameSummaries"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.hasAdditionalSubjectAlternativeNames = try reader["HasAdditionalSubjectAlternativeNames"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.keyAlgorithm = try reader["KeyAlgorithm"].readIfPresent()
        value.keyUsages = try reader["KeyUsages"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ACMClientTypes.KeyUsageName>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.extendedKeyUsages = try reader["ExtendedKeyUsages"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ACMClientTypes.ExtendedKeyUsageName>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inUse = try reader["InUse"].readIfPresent()
        value.exported = try reader["Exported"].readIfPresent()
        value.renewalEligibility = try reader["RenewalEligibility"].readIfPresent()
        value.notBefore = try reader["NotBefore"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.notAfter = try reader["NotAfter"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.issuedAt = try reader["IssuedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.importedAt = try reader["ImportedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.revokedAt = try reader["RevokedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension ACMClientTypes.Tag {

    static func write(value: ACMClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ACMClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension ACMClientTypes.Filters {

    static func write(value: ACMClientTypes.Filters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["extendedKeyUsage"].writeList(value.extendedKeyUsage, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ACMClientTypes.ExtendedKeyUsageName>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["keyTypes"].writeList(value.keyTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ACMClientTypes.KeyAlgorithm>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["keyUsage"].writeList(value.keyUsage, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ACMClientTypes.KeyUsageName>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ACMClientTypes.DomainValidationOption {

    static func write(value: ACMClientTypes.DomainValidationOption?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DomainName"].write(value.domainName)
        try writer["ValidationDomain"].write(value.validationDomain)
    }
}

public enum ACMClientTypes {}
