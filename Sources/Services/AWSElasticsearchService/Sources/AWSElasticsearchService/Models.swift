//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

public struct AddTagsOutput {

    public init() { }
}

public struct DeleteElasticsearchServiceRoleInput {

    public init() { }
}

public struct DeleteElasticsearchServiceRoleOutput {

    public init() { }
}

public struct RemoveTagsOutput {

    public init() { }
}

/// An error occured because the client wanted to access a not supported operation. Gives http status code of 409.
public struct DisabledOperationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A description of the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DisabledOperationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An exception for trying to create more than allowed resources or sub-resources. Gives http status code of 409.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A description of the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A description of the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Container for the parameters to the [AcceptInboundCrossClusterSearchConnection] operation.
public struct AcceptInboundCrossClusterSearchConnectionInput {
    /// The id of the inbound connection that you want to accept.
    /// This member is required.
    public var crossClusterSearchConnectionId: Swift.String?

    public init(
        crossClusterSearchConnectionId: Swift.String? = nil
    )
    {
        self.crossClusterSearchConnectionId = crossClusterSearchConnectionId
    }
}

extension ElasticsearchClientTypes {

    public enum InboundCrossClusterSearchConnectionStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case approved
        case deleted
        case deleting
        case pendingAcceptance
        case rejected
        case rejecting
        case sdkUnknown(Swift.String)

        public static var allCases: [InboundCrossClusterSearchConnectionStatusCode] {
            return [
                .approved,
                .deleted,
                .deleting,
                .pendingAcceptance,
                .rejected,
                .rejecting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .approved: return "APPROVED"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .pendingAcceptance: return "PENDING_ACCEPTANCE"
            case .rejected: return "REJECTED"
            case .rejecting: return "REJECTING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the coonection status of an inbound cross-cluster search connection.
    public struct InboundCrossClusterSearchConnectionStatus {
        /// Specifies verbose information for the inbound connection status.
        public var message: Swift.String?
        /// The state code for inbound connection. This can be one of the following:
        ///
        /// * PENDING_ACCEPTANCE: Inbound connection is not yet accepted by destination domain owner.
        ///
        /// * APPROVED: Inbound connection is pending acceptance by destination domain owner.
        ///
        /// * REJECTING: Inbound connection rejection is in process.
        ///
        /// * REJECTED: Inbound connection is rejected.
        ///
        /// * DELETING: Inbound connection deletion is in progress.
        ///
        /// * DELETED: Inbound connection is deleted and cannot be used further.
        public var statusCode: ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatusCode?

        public init(
            message: Swift.String? = nil,
            statusCode: ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatusCode? = nil
        )
        {
            self.message = message
            self.statusCode = statusCode
        }
    }

}

extension ElasticsearchClientTypes {
    public struct DomainInformation {
        /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
        /// This member is required.
        public var domainName: Swift.String?
        public var ownerId: Swift.String?
        public var region: Swift.String?

        public init(
            domainName: Swift.String? = nil,
            ownerId: Swift.String? = nil,
            region: Swift.String? = nil
        )
        {
            self.domainName = domainName
            self.ownerId = ownerId
            self.region = region
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies details of an inbound connection.
    public struct InboundCrossClusterSearchConnection {
        /// Specifies the [InboundCrossClusterSearchConnectionStatus] for the outbound connection.
        public var connectionStatus: ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatus?
        /// Specifies the connection id for the inbound cross-cluster search connection.
        public var crossClusterSearchConnectionId: Swift.String?
        /// Specifies the [DomainInformation] for the destination Elasticsearch domain.
        public var destinationDomainInfo: ElasticsearchClientTypes.DomainInformation?
        /// Specifies the [DomainInformation] for the source Elasticsearch domain.
        public var sourceDomainInfo: ElasticsearchClientTypes.DomainInformation?

        public init(
            connectionStatus: ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatus? = nil,
            crossClusterSearchConnectionId: Swift.String? = nil,
            destinationDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil,
            sourceDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil
        )
        {
            self.connectionStatus = connectionStatus
            self.crossClusterSearchConnectionId = crossClusterSearchConnectionId
            self.destinationDomainInfo = destinationDomainInfo
            self.sourceDomainInfo = sourceDomainInfo
        }
    }

}

/// The result of a [AcceptInboundCrossClusterSearchConnection] operation. Contains details of accepted inbound connection.
public struct AcceptInboundCrossClusterSearchConnectionOutput {
    /// Specifies the [InboundCrossClusterSearchConnection] of accepted inbound connection.
    public var crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection?

    public init(
        crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection? = nil
    )
    {
        self.crossClusterSearchConnection = crossClusterSearchConnection
    }
}

/// An error occurred because user does not have permissions to access the resource. Returns HTTP status code 403.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A description of the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticsearchClientTypes {

    /// The state of a requested change. One of the following:
    ///
    /// * Processing: The request change is still in-process.
    ///
    /// * Active: The request change is processed and deployed to the Elasticsearch domain.
    public enum OptionState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case processing
        case requiresindexdocuments
        case sdkUnknown(Swift.String)

        public static var allCases: [OptionState] {
            return [
                .active,
                .processing,
                .requiresindexdocuments
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .processing: return "Processing"
            case .requiresindexdocuments: return "RequiresIndexDocuments"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// Provides the current status of the entity.
    public struct OptionStatus {
        /// Timestamp which tells the creation date for the entity.
        /// This member is required.
        public var creationDate: Foundation.Date?
        /// Indicates whether the Elasticsearch domain is being deleted.
        public var pendingDeletion: Swift.Bool?
        /// Provides the OptionState for the Elasticsearch domain.
        /// This member is required.
        public var state: ElasticsearchClientTypes.OptionState?
        /// Timestamp which tells the last updated time for the entity.
        /// This member is required.
        public var updateDate: Foundation.Date?
        /// Specifies the latest version for the entity.
        public var updateVersion: Swift.Int

        public init(
            creationDate: Foundation.Date? = nil,
            pendingDeletion: Swift.Bool? = nil,
            state: ElasticsearchClientTypes.OptionState? = nil,
            updateDate: Foundation.Date? = nil,
            updateVersion: Swift.Int = 0
        )
        {
            self.creationDate = creationDate
            self.pendingDeletion = pendingDeletion
            self.state = state
            self.updateDate = updateDate
            self.updateVersion = updateVersion
        }
    }

}

extension ElasticsearchClientTypes {
    /// The configured access rules for the domain's document and search endpoints, and the current status of those rules.
    public struct AccessPoliciesStatus {
        /// The access policy configured for the Elasticsearch domain. Access policies may be resource-based, IP-based, or IAM-based. See [ Configuring Access Policies](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-access-policies)for more information.
        /// This member is required.
        public var options: Swift.String?
        /// The status of the access policy for the Elasticsearch domain. See OptionStatus for the status information that's included.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init(
            options: Swift.String? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {
    /// List of limits that are specific to a given InstanceType and for each of it's [InstanceRole] .
    public struct AdditionalLimit {
        /// Name of Additional Limit is specific to a given InstanceType and for each of it's [InstanceRole] etc.
        ///
        ///
        ///
        ///
        ///
        /// Attributes and their details:
        ///
        ///
        ///
        ///
        ///
        ///
        ///
        /// * MaximumNumberOfDataNodesSupported
        ///  This attribute will be present in Master node only to specify how much data nodes upto which given [ESPartitionInstanceType] can support as master node.
        /// * MaximumNumberOfDataNodesWithoutMasterNode
        ///  This attribute will be present in Data node only to specify how much data nodes of given [ESPartitionInstanceType] upto which you don't need any master nodes to govern them.
        public var limitName: Swift.String?
        /// Value for given [AdditionalLimit$LimitName] .
        public var limitValues: [Swift.String]?

        public init(
            limitName: Swift.String? = nil,
            limitValues: [Swift.String]? = nil
        )
        {
            self.limitName = limitName
            self.limitValues = limitValues
        }
    }

}

/// An error occurred while processing the request.
public struct BaseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A description of the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BaseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
public struct InternalException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A description of the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An exception for missing / invalid input fields. Gives http status code of 400.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A description of the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticsearchClientTypes {
    /// Specifies a key value pair for a resource tag.
    public struct Tag {
        /// Specifies the TagKey, the name of the tag. Tag keys must be unique for the Elasticsearch domain to which they are attached.
        /// This member is required.
        public var key: Swift.String?
        /// Specifies the TagValue, the value assigned to the corresponding tag key. Tag values can be null and do not have to be unique in a tag set. For example, you can have a key value pair in a tag set of project : Trinity and cost-center : Trinity
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

/// Container for the parameters to the [AddTags] operation. Specify the tags that you want to attach to the Elasticsearch domain.
public struct AddTagsInput {
    /// Specify the ARN for which you want to add the tags.
    /// This member is required.
    public var arn: Swift.String?
    /// List of Tag that need to be added for the Elasticsearch domain.
    /// This member is required.
    public var tagList: [ElasticsearchClientTypes.Tag]?

    public init(
        arn: Swift.String? = nil,
        tagList: [ElasticsearchClientTypes.Tag]? = nil
    )
    {
        self.arn = arn
        self.tagList = tagList
    }
}

extension ElasticsearchClientTypes {
    /// Status of the advanced options for the specified Elasticsearch domain. Currently, the following advanced options are available:
    ///
    /// * Option to allow references to indices in an HTTP request body. Must be false when configuring access to individual sub-resources. By default, the value is true. See [Configuration Advanced Options](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options) for more information.
    ///
    /// * Option to specify the percentage of heap space that is allocated to field data. By default, this setting is unbounded.
    ///
    ///
    /// For more information, see [Configuring Advanced Options](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options).
    public struct AdvancedOptionsStatus {
        /// Specifies the status of advanced options for the specified Elasticsearch domain.
        /// This member is required.
        public var options: [Swift.String: Swift.String]?
        /// Specifies the status of OptionStatus for advanced options for the specified Elasticsearch domain.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init(
            options: [Swift.String: Swift.String]? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies the SAML Identity Provider's information.
    public struct SAMLIdp {
        /// The unique Entity ID of the application in SAML Identity Provider.
        /// This member is required.
        public var entityId: Swift.String?
        /// The Metadata of the SAML application in xml format.
        /// This member is required.
        public var metadataContent: Swift.String?

        public init(
            entityId: Swift.String? = nil,
            metadataContent: Swift.String? = nil
        )
        {
            self.entityId = entityId
            self.metadataContent = metadataContent
        }
    }

}

extension ElasticsearchClientTypes {
    /// Describes the SAML application configured for the domain.
    public struct SAMLOptionsOutput {
        /// True if SAML is enabled.
        public var enabled: Swift.Bool?
        /// Describes the SAML Identity Provider's information.
        public var idp: ElasticsearchClientTypes.SAMLIdp?
        /// The key used for matching the SAML Roles attribute.
        public var rolesKey: Swift.String?
        /// The duration, in minutes, after which a user session becomes inactive.
        public var sessionTimeoutMinutes: Swift.Int?
        /// The key used for matching the SAML Subject attribute.
        public var subjectKey: Swift.String?

        public init(
            enabled: Swift.Bool? = nil,
            idp: ElasticsearchClientTypes.SAMLIdp? = nil,
            rolesKey: Swift.String? = nil,
            sessionTimeoutMinutes: Swift.Int? = nil,
            subjectKey: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.idp = idp
            self.rolesKey = rolesKey
            self.sessionTimeoutMinutes = sessionTimeoutMinutes
            self.subjectKey = subjectKey
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies the advanced security configuration: whether advanced security is enabled, whether the internal database option is enabled.
    public struct AdvancedSecurityOptions {
        /// Specifies the Anonymous Auth Disable Date when Anonymous Auth is enabled.
        public var anonymousAuthDisableDate: Foundation.Date?
        /// True if Anonymous auth is enabled. Anonymous auth can be enabled only when AdvancedSecurity is enabled on existing domains.
        public var anonymousAuthEnabled: Swift.Bool?
        /// True if advanced security is enabled.
        public var enabled: Swift.Bool?
        /// True if the internal user database is enabled.
        public var internalUserDatabaseEnabled: Swift.Bool?
        /// Describes the SAML application configured for a domain.
        public var samlOptions: ElasticsearchClientTypes.SAMLOptionsOutput?

        public init(
            anonymousAuthDisableDate: Foundation.Date? = nil,
            anonymousAuthEnabled: Swift.Bool? = nil,
            enabled: Swift.Bool? = nil,
            internalUserDatabaseEnabled: Swift.Bool? = nil,
            samlOptions: ElasticsearchClientTypes.SAMLOptionsOutput? = nil
        )
        {
            self.anonymousAuthDisableDate = anonymousAuthDisableDate
            self.anonymousAuthEnabled = anonymousAuthEnabled
            self.enabled = enabled
            self.internalUserDatabaseEnabled = internalUserDatabaseEnabled
            self.samlOptions = samlOptions
        }
    }

}

extension ElasticsearchClientTypes {
    /// Credentials for the master user: username and password, ARN, or both.
    public struct MasterUserOptions {
        /// ARN for the master user (if IAM is enabled).
        public var masterUserARN: Swift.String?
        /// The master user's username, which is stored in the Amazon Elasticsearch Service domain's internal database.
        public var masterUserName: Swift.String?
        /// The master user's password, which is stored in the Amazon Elasticsearch Service domain's internal database.
        public var masterUserPassword: Swift.String?

        public init(
            masterUserARN: Swift.String? = nil,
            masterUserName: Swift.String? = nil,
            masterUserPassword: Swift.String? = nil
        )
        {
            self.masterUserARN = masterUserARN
            self.masterUserName = masterUserName
            self.masterUserPassword = masterUserPassword
        }
    }

}

extension ElasticsearchClientTypes.MasterUserOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MasterUserOptions(masterUserARN: \(Swift.String(describing: masterUserARN)), masterUserName: \"CONTENT_REDACTED\", masterUserPassword: \"CONTENT_REDACTED\")"}
}

extension ElasticsearchClientTypes {
    /// Specifies the SAML application configuration for the domain.
    public struct SAMLOptionsInput {
        /// True if SAML is enabled.
        public var enabled: Swift.Bool?
        /// Specifies the SAML Identity Provider's information.
        public var idp: ElasticsearchClientTypes.SAMLIdp?
        /// The backend role to which the SAML master user is mapped to.
        public var masterBackendRole: Swift.String?
        /// The SAML master username, which is stored in the Amazon Elasticsearch Service domain's internal database.
        public var masterUserName: Swift.String?
        /// The key to use for matching the SAML Roles attribute.
        public var rolesKey: Swift.String?
        /// The duration, in minutes, after which a user session becomes inactive. Acceptable values are between 1 and 1440, and the default value is 60.
        public var sessionTimeoutMinutes: Swift.Int?
        /// The key to use for matching the SAML Subject attribute.
        public var subjectKey: Swift.String?

        public init(
            enabled: Swift.Bool? = nil,
            idp: ElasticsearchClientTypes.SAMLIdp? = nil,
            masterBackendRole: Swift.String? = nil,
            masterUserName: Swift.String? = nil,
            rolesKey: Swift.String? = nil,
            sessionTimeoutMinutes: Swift.Int? = nil,
            subjectKey: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.idp = idp
            self.masterBackendRole = masterBackendRole
            self.masterUserName = masterUserName
            self.rolesKey = rolesKey
            self.sessionTimeoutMinutes = sessionTimeoutMinutes
            self.subjectKey = subjectKey
        }
    }

}

extension ElasticsearchClientTypes.SAMLOptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SAMLOptionsInput(enabled: \(Swift.String(describing: enabled)), idp: \(Swift.String(describing: idp)), masterBackendRole: \(Swift.String(describing: masterBackendRole)), rolesKey: \(Swift.String(describing: rolesKey)), sessionTimeoutMinutes: \(Swift.String(describing: sessionTimeoutMinutes)), subjectKey: \(Swift.String(describing: subjectKey)), masterUserName: \"CONTENT_REDACTED\")"}
}

extension ElasticsearchClientTypes {
    /// Specifies the advanced security configuration: whether advanced security is enabled, whether the internal database option is enabled, master username and password (if internal database is enabled), and master user ARN (if IAM is enabled).
    public struct AdvancedSecurityOptionsInput {
        /// True if Anonymous auth is enabled. Anonymous auth can be enabled only when AdvancedSecurity is enabled on existing domains.
        public var anonymousAuthEnabled: Swift.Bool?
        /// True if advanced security is enabled.
        public var enabled: Swift.Bool?
        /// True if the internal user database is enabled.
        public var internalUserDatabaseEnabled: Swift.Bool?
        /// Credentials for the master user: username and password, ARN, or both.
        public var masterUserOptions: ElasticsearchClientTypes.MasterUserOptions?
        /// Specifies the SAML application configuration for the domain.
        public var samlOptions: ElasticsearchClientTypes.SAMLOptionsInput?

        public init(
            anonymousAuthEnabled: Swift.Bool? = nil,
            enabled: Swift.Bool? = nil,
            internalUserDatabaseEnabled: Swift.Bool? = nil,
            masterUserOptions: ElasticsearchClientTypes.MasterUserOptions? = nil,
            samlOptions: ElasticsearchClientTypes.SAMLOptionsInput? = nil
        )
        {
            self.anonymousAuthEnabled = anonymousAuthEnabled
            self.enabled = enabled
            self.internalUserDatabaseEnabled = internalUserDatabaseEnabled
            self.masterUserOptions = masterUserOptions
            self.samlOptions = samlOptions
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies the status of advanced security options for the specified Elasticsearch domain.
    public struct AdvancedSecurityOptionsStatus {
        /// Specifies advanced security options for the specified Elasticsearch domain.
        /// This member is required.
        public var options: ElasticsearchClientTypes.AdvancedSecurityOptions?
        /// Status of the advanced security options for the specified Elasticsearch domain.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init(
            options: ElasticsearchClientTypes.AdvancedSecurityOptions? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

/// An error occurred because the client attempts to remove a resource that is currently in use. Returns HTTP status code 409.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A description of the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Container for request parameters to [AssociatePackage] operation.
public struct AssociatePackageInput {
    /// Name of the domain that you want to associate the package with.
    /// This member is required.
    public var domainName: Swift.String?
    /// Internal ID of the package that you want to associate with a domain. Use DescribePackages to find this value.
    /// This member is required.
    public var packageID: Swift.String?

    public init(
        domainName: Swift.String? = nil,
        packageID: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.packageID = packageID
    }
}

extension ElasticsearchClientTypes {

    public enum DomainPackageStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case associating
        case associationFailed
        case dissociating
        case dissociationFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [DomainPackageStatus] {
            return [
                .active,
                .associating,
                .associationFailed,
                .dissociating,
                .dissociationFailed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .associating: return "ASSOCIATING"
            case .associationFailed: return "ASSOCIATION_FAILED"
            case .dissociating: return "DISSOCIATING"
            case .dissociationFailed: return "DISSOCIATION_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    public struct ErrorDetails {
        public var errorMessage: Swift.String?
        public var errorType: Swift.String?

        public init(
            errorMessage: Swift.String? = nil,
            errorType: Swift.String? = nil
        )
        {
            self.errorMessage = errorMessage
            self.errorType = errorType
        }
    }

}

extension ElasticsearchClientTypes {

    public enum PackageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case txtDictionary
        case sdkUnknown(Swift.String)

        public static var allCases: [PackageType] {
            return [
                .txtDictionary
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .txtDictionary: return "TXT-DICTIONARY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// Information on a package that is associated with a domain.
    public struct DomainPackageDetails {
        /// Name of the domain you've associated a package with.
        public var domainName: Swift.String?
        /// State of the association. Values are ASSOCIATING/ASSOCIATION_FAILED/ACTIVE/DISSOCIATING/DISSOCIATION_FAILED.
        public var domainPackageStatus: ElasticsearchClientTypes.DomainPackageStatus?
        /// Additional information if the package is in an error state. Null otherwise.
        public var errorDetails: ElasticsearchClientTypes.ErrorDetails?
        /// Timestamp of the most-recent update to the association status.
        public var lastUpdated: Foundation.Date?
        /// Internal ID of the package.
        public var packageID: Swift.String?
        /// User specified name of the package.
        public var packageName: Swift.String?
        /// Currently supports only TXT-DICTIONARY.
        public var packageType: ElasticsearchClientTypes.PackageType?
        public var packageVersion: Swift.String?
        /// The relative path on Amazon ES nodes, which can be used as synonym_path when the package is synonym file.
        public var referencePath: Swift.String?

        public init(
            domainName: Swift.String? = nil,
            domainPackageStatus: ElasticsearchClientTypes.DomainPackageStatus? = nil,
            errorDetails: ElasticsearchClientTypes.ErrorDetails? = nil,
            lastUpdated: Foundation.Date? = nil,
            packageID: Swift.String? = nil,
            packageName: Swift.String? = nil,
            packageType: ElasticsearchClientTypes.PackageType? = nil,
            packageVersion: Swift.String? = nil,
            referencePath: Swift.String? = nil
        )
        {
            self.domainName = domainName
            self.domainPackageStatus = domainPackageStatus
            self.errorDetails = errorDetails
            self.lastUpdated = lastUpdated
            self.packageID = packageID
            self.packageName = packageName
            self.packageType = packageType
            self.packageVersion = packageVersion
            self.referencePath = referencePath
        }
    }

}

/// Container for response returned by [AssociatePackage] operation.
public struct AssociatePackageOutput {
    ///     DomainPackageDetails
    public var domainPackageDetails: ElasticsearchClientTypes.DomainPackageDetails?

    public init(
        domainPackageDetails: ElasticsearchClientTypes.DomainPackageDetails? = nil
    )
    {
        self.domainPackageDetails = domainPackageDetails
    }
}

/// Container for request parameters to the [AuthorizeVpcEndpointAccess] operation. Specifies the account to be permitted to manage VPC endpoints against the domain.
public struct AuthorizeVpcEndpointAccessInput {
    /// The account ID to grant access to.
    /// This member is required.
    public var account: Swift.String?
    /// The name of the OpenSearch Service domain to provide access to.
    /// This member is required.
    public var domainName: Swift.String?

    public init(
        account: Swift.String? = nil,
        domainName: Swift.String? = nil
    )
    {
        self.account = account
        self.domainName = domainName
    }
}

extension ElasticsearchClientTypes {

    /// Specifies the type of AWS account permitted to manage VPC endpoints.:
    ///
    /// * AWS_ACCOUNT: Indicates that the account is owned by an AWS user.
    ///
    /// * AWS_SERVICE: Indicates the the account is owned by an AWS service.
    public enum PrincipalType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsAccount
        case awsService
        case sdkUnknown(Swift.String)

        public static var allCases: [PrincipalType] {
            return [
                .awsAccount,
                .awsService
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsAccount: return "AWS_ACCOUNT"
            case .awsService: return "AWS_SERVICE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// Information about an account or service that has access to an Amazon OpenSearch Service domain through the use of an interface VPC endpoint.
    public struct AuthorizedPrincipal {
        /// The IAM principal that is allowed access to the domain.
        public var principal: Swift.String?
        /// The type of principal.
        public var principalType: ElasticsearchClientTypes.PrincipalType?

        public init(
            principal: Swift.String? = nil,
            principalType: ElasticsearchClientTypes.PrincipalType? = nil
        )
        {
            self.principal = principal
            self.principalType = principalType
        }
    }

}

/// Container for response parameters to the [AuthorizeVpcEndpointAccess] operation. Contains the account ID and the type of the account being authorized to access the VPC endpoint.
public struct AuthorizeVpcEndpointAccessOutput {
    /// Information about the account or service that was provided access to the domain.
    /// This member is required.
    public var authorizedPrincipal: ElasticsearchClientTypes.AuthorizedPrincipal?

    public init(
        authorizedPrincipal: ElasticsearchClientTypes.AuthorizedPrincipal? = nil
    )
    {
        self.authorizedPrincipal = authorizedPrincipal
    }
}

/// Container for parameters of the CancelDomainConfigChange operation.
public struct CancelDomainConfigChangeInput {
    /// Name of the OpenSearch Service domain configuration request to cancel.
    /// This member is required.
    public var domainName: Swift.String?
    /// When set to True, returns the list of change IDs and properties that will be cancelled without actually cancelling the change.
    public var dryRun: Swift.Bool?

    public init(
        domainName: Swift.String? = nil,
        dryRun: Swift.Bool? = nil
    )
    {
        self.domainName = domainName
        self.dryRun = dryRun
    }
}

extension ElasticsearchClientTypes {
    /// A property change that was cancelled for an Amazon OpenSearch Service domain.
    public struct CancelledChangeProperty {
        /// The current value of the property, after the change was cancelled.
        public var activeValue: Swift.String?
        /// The pending value of the property that was cancelled. This would have been the eventual value of the property if the chance had not been cancelled.
        public var cancelledValue: Swift.String?
        /// The name of the property whose change was cancelled.
        public var propertyName: Swift.String?

        public init(
            activeValue: Swift.String? = nil,
            cancelledValue: Swift.String? = nil,
            propertyName: Swift.String? = nil
        )
        {
            self.activeValue = activeValue
            self.cancelledValue = cancelledValue
            self.propertyName = propertyName
        }
    }

}

/// Contains the details of the cancelled domain config change.
public struct CancelDomainConfigChangeOutput {
    /// The unique identifiers of the changes that were cancelled.
    public var cancelledChangeIds: [Swift.String]?
    /// The domain change properties that were cancelled.
    public var cancelledChangeProperties: [ElasticsearchClientTypes.CancelledChangeProperty]?
    /// Whether or not the request was a dry run. If True, the changes were not actually cancelled.
    public var dryRun: Swift.Bool?

    public init(
        cancelledChangeIds: [Swift.String]? = nil,
        cancelledChangeProperties: [ElasticsearchClientTypes.CancelledChangeProperty]? = nil,
        dryRun: Swift.Bool? = nil
    )
    {
        self.cancelledChangeIds = cancelledChangeIds
        self.cancelledChangeProperties = cancelledChangeProperties
        self.dryRun = dryRun
    }
}

/// Container for the parameters to the [CancelElasticsearchServiceSoftwareUpdate] operation. Specifies the name of the Elasticsearch domain that you wish to cancel a service software update on.
public struct CancelElasticsearchServiceSoftwareUpdateInput {
    /// The name of the domain that you want to stop the latest service software update on.
    /// This member is required.
    public var domainName: Swift.String?

    public init(
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

extension ElasticsearchClientTypes {

    public enum DeploymentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case eligible
        case inProgress
        case notEligible
        case pendingUpdate
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentStatus] {
            return [
                .completed,
                .eligible,
                .inProgress,
                .notEligible,
                .pendingUpdate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .eligible: return "ELIGIBLE"
            case .inProgress: return "IN_PROGRESS"
            case .notEligible: return "NOT_ELIGIBLE"
            case .pendingUpdate: return "PENDING_UPDATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// The current options of an Elasticsearch domain service software options.
    public struct ServiceSoftwareOptions {
        /// Timestamp, in Epoch time, until which you can manually request a service software update. After this date, we automatically update your service software.
        public var automatedUpdateDate: Foundation.Date?
        /// True if you are able to cancel your service software version update. False if you are not able to cancel your service software version.
        public var cancellable: Swift.Bool?
        /// The current service software version that is present on the domain.
        public var currentVersion: Swift.String?
        /// The description of the UpdateStatus.
        public var description: Swift.String?
        /// The new service software version if one is available.
        public var newVersion: Swift.String?
        /// True if a service software is never automatically updated. False if a service software is automatically updated after AutomatedUpdateDate.
        public var optionalDeployment: Swift.Bool?
        /// True if you are able to update you service software version. False if you are not able to update your service software version.
        public var updateAvailable: Swift.Bool?
        /// The status of your service software update. This field can take the following values: ELIGIBLE, PENDING_UPDATE, IN_PROGRESS, COMPLETED, and NOT_ELIGIBLE.
        public var updateStatus: ElasticsearchClientTypes.DeploymentStatus?

        public init(
            automatedUpdateDate: Foundation.Date? = nil,
            cancellable: Swift.Bool? = nil,
            currentVersion: Swift.String? = nil,
            description: Swift.String? = nil,
            newVersion: Swift.String? = nil,
            optionalDeployment: Swift.Bool? = nil,
            updateAvailable: Swift.Bool? = nil,
            updateStatus: ElasticsearchClientTypes.DeploymentStatus? = nil
        )
        {
            self.automatedUpdateDate = automatedUpdateDate
            self.cancellable = cancellable
            self.currentVersion = currentVersion
            self.description = description
            self.newVersion = newVersion
            self.optionalDeployment = optionalDeployment
            self.updateAvailable = updateAvailable
            self.updateStatus = updateStatus
        }
    }

}

/// The result of a CancelElasticsearchServiceSoftwareUpdate operation. Contains the status of the update.
public struct CancelElasticsearchServiceSoftwareUpdateOutput {
    /// The current status of the Elasticsearch service software update.
    public var serviceSoftwareOptions: ElasticsearchClientTypes.ServiceSoftwareOptions?

    public init(
        serviceSoftwareOptions: ElasticsearchClientTypes.ServiceSoftwareOptions? = nil
    )
    {
        self.serviceSoftwareOptions = serviceSoftwareOptions
    }
}

/// An exception for trying to create or access sub-resource that is either invalid or not supported. Gives http status code of 409.
public struct InvalidTypeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A description of the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTypeException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An exception for creating a resource that already exists. Gives http status code of 400.
public struct ResourceAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A description of the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceAlreadyExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticsearchClientTypes {

    /// Specifies the Auto-Tune desired state. Valid values are ENABLED, DISABLED.
    public enum AutoTuneDesiredState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoTuneDesiredState] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {

    /// Specifies the unit of a maintenance schedule duration. Valid value is HOUR. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
    public enum TimeUnit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hours
        case sdkUnknown(Swift.String)

        public static var allCases: [TimeUnit] {
            return [
                .hours
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hours: return "HOURS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// Specifies maintenance schedule duration: duration value and duration unit. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
    public struct Duration {
        /// Specifies the unit of a maintenance schedule duration. Valid value is HOURS. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
        public var unit: ElasticsearchClientTypes.TimeUnit?
        /// Integer to specify the value of a maintenance schedule duration. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
        public var value: Swift.Int?

        public init(
            unit: ElasticsearchClientTypes.TimeUnit? = nil,
            value: Swift.Int? = nil
        )
        {
            self.unit = unit
            self.value = value
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies Auto-Tune maitenance schedule. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
    public struct AutoTuneMaintenanceSchedule {
        /// Specifies cron expression for a recurring maintenance schedule. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
        public var cronExpressionForRecurrence: Swift.String?
        /// Specifies maintenance schedule duration: duration value and duration unit. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
        public var duration: ElasticsearchClientTypes.Duration?
        /// Specifies timestamp at which Auto-Tune maintenance schedule start.
        public var startAt: Foundation.Date?

        public init(
            cronExpressionForRecurrence: Swift.String? = nil,
            duration: ElasticsearchClientTypes.Duration? = nil,
            startAt: Foundation.Date? = nil
        )
        {
            self.cronExpressionForRecurrence = cronExpressionForRecurrence
            self.duration = duration
            self.startAt = startAt
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies the Auto-Tune options: the Auto-Tune desired state for the domain and list of maintenance schedules.
    public struct AutoTuneOptionsInput {
        /// Specifies the Auto-Tune desired state. Valid values are ENABLED, DISABLED.
        public var desiredState: ElasticsearchClientTypes.AutoTuneDesiredState?
        /// Specifies list of maitenance schedules. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
        public var maintenanceSchedules: [ElasticsearchClientTypes.AutoTuneMaintenanceSchedule]?

        public init(
            desiredState: ElasticsearchClientTypes.AutoTuneDesiredState? = nil,
            maintenanceSchedules: [ElasticsearchClientTypes.AutoTuneMaintenanceSchedule]? = nil
        )
        {
            self.desiredState = desiredState
            self.maintenanceSchedules = maintenanceSchedules
        }
    }

}

extension ElasticsearchClientTypes {
    /// Options to specify the Cognito user and identity pools for Kibana authentication. For more information, see [Amazon Cognito Authentication for Kibana](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html).
    public struct CognitoOptions {
        /// Specifies the option to enable Cognito for Kibana authentication.
        public var enabled: Swift.Bool?
        /// Specifies the Cognito identity pool ID for Kibana authentication.
        public var identityPoolId: Swift.String?
        /// Specifies the role ARN that provides Elasticsearch permissions for accessing Cognito resources.
        public var roleArn: Swift.String?
        /// Specifies the Cognito user pool ID for Kibana authentication.
        public var userPoolId: Swift.String?

        public init(
            enabled: Swift.Bool? = nil,
            identityPoolId: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            userPoolId: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.identityPoolId = identityPoolId
            self.roleArn = roleArn
            self.userPoolId = userPoolId
        }
    }

}

extension ElasticsearchClientTypes {

    public enum TLSSecurityPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case policyMinTls10201907
        case policyMinTls12201907
        case policyMinTls12Pfs202310
        case sdkUnknown(Swift.String)

        public static var allCases: [TLSSecurityPolicy] {
            return [
                .policyMinTls10201907,
                .policyMinTls12201907,
                .policyMinTls12Pfs202310
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .policyMinTls10201907: return "Policy-Min-TLS-1-0-2019-07"
            case .policyMinTls12201907: return "Policy-Min-TLS-1-2-2019-07"
            case .policyMinTls12Pfs202310: return "Policy-Min-TLS-1-2-PFS-2023-10"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// Options to configure endpoint for the Elasticsearch domain.
    public struct DomainEndpointOptions {
        /// Specify the fully qualified domain for your custom endpoint.
        public var customEndpoint: Swift.String?
        /// Specify ACM certificate ARN for your custom endpoint.
        public var customEndpointCertificateArn: Swift.String?
        /// Specify if custom endpoint should be enabled for the Elasticsearch domain.
        public var customEndpointEnabled: Swift.Bool?
        /// Specify if only HTTPS endpoint should be enabled for the Elasticsearch domain.
        public var enforceHTTPS: Swift.Bool?
        /// Specify the TLS security policy that needs to be applied to the HTTPS endpoint of Elasticsearch domain.
        ///
        ///
        ///
        ///
        ///
        /// It can be one of the following values:
        ///
        /// * Policy-Min-TLS-1-0-2019-07: TLS security policy that supports TLS version 1.0 to TLS version 1.2
        ///
        /// * Policy-Min-TLS-1-2-2019-07: TLS security policy that supports only TLS version 1.2
        ///
        /// * Policy-Min-TLS-1-2-PFS-2023-10: TLS security policy that supports TLS version 1.2 to TLS version 1.3 with perfect forward secrecy cipher suites
        public var tlsSecurityPolicy: ElasticsearchClientTypes.TLSSecurityPolicy?

        public init(
            customEndpoint: Swift.String? = nil,
            customEndpointCertificateArn: Swift.String? = nil,
            customEndpointEnabled: Swift.Bool? = nil,
            enforceHTTPS: Swift.Bool? = nil,
            tlsSecurityPolicy: ElasticsearchClientTypes.TLSSecurityPolicy? = nil
        )
        {
            self.customEndpoint = customEndpoint
            self.customEndpointCertificateArn = customEndpointCertificateArn
            self.customEndpointEnabled = customEndpointEnabled
            self.enforceHTTPS = enforceHTTPS
            self.tlsSecurityPolicy = tlsSecurityPolicy
        }
    }

}

extension ElasticsearchClientTypes {

    /// The type of EBS volume, standard, gp2, gp3 or io1. See [Configuring EBS-based Storage](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-ebs)for more information.
    public enum VolumeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case gp2
        case gp3
        case io1
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [VolumeType] {
            return [
                .gp2,
                .gp3,
                .io1,
                .standard
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .gp2: return "gp2"
            case .gp3: return "gp3"
            case .io1: return "io1"
            case .standard: return "standard"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// Options to enable, disable, and specify the properties of EBS storage volumes. For more information, see [ Configuring EBS-based Storage](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-ebs).
    public struct EBSOptions {
        /// Specifies whether EBS-based storage is enabled.
        public var ebsEnabled: Swift.Bool?
        /// Specifies the IOPS for Provisioned IOPS And GP3 EBS volume (SSD).
        public var iops: Swift.Int?
        /// Specifies the Throughput for GP3 EBS volume (SSD).
        public var throughput: Swift.Int?
        /// Integer to specify the size of an EBS volume.
        public var volumeSize: Swift.Int?
        /// Specifies the volume type for EBS-based storage.
        public var volumeType: ElasticsearchClientTypes.VolumeType?

        public init(
            ebsEnabled: Swift.Bool? = nil,
            iops: Swift.Int? = nil,
            throughput: Swift.Int? = nil,
            volumeSize: Swift.Int? = nil,
            volumeType: ElasticsearchClientTypes.VolumeType? = nil
        )
        {
            self.ebsEnabled = ebsEnabled
            self.iops = iops
            self.throughput = throughput
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies the configuration for cold storage options such as enabled
    public struct ColdStorageOptions {
        /// Enable cold storage option. Accepted values true or false
        /// This member is required.
        public var enabled: Swift.Bool?

        public init(
            enabled: Swift.Bool? = nil
        )
        {
            self.enabled = enabled
        }
    }

}

extension ElasticsearchClientTypes {

    public enum ESPartitionInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case c42xlargeElasticsearch
        case c44xlargeElasticsearch
        case c48xlargeElasticsearch
        case c4LargeElasticsearch
        case c4XlargeElasticsearch
        case c518xlargeElasticsearch
        case c52xlargeElasticsearch
        case c54xlargeElasticsearch
        case c59xlargeElasticsearch
        case c5LargeElasticsearch
        case c5XlargeElasticsearch
        case d22xlargeElasticsearch
        case d24xlargeElasticsearch
        case d28xlargeElasticsearch
        case d2XlargeElasticsearch
        case i22xlargeElasticsearch
        case i2XlargeElasticsearch
        case i316xlargeElasticsearch
        case i32xlargeElasticsearch
        case i34xlargeElasticsearch
        case i38xlargeElasticsearch
        case i3LargeElasticsearch
        case i3XlargeElasticsearch
        case m32xlargeElasticsearch
        case m3LargeElasticsearch
        case m3MediumElasticsearch
        case m3XlargeElasticsearch
        case m410xlargeElasticsearch
        case m42xlargeElasticsearch
        case m44xlargeElasticsearch
        case m4LargeElasticsearch
        case m4XlargeElasticsearch
        case m512xlargeElasticsearch
        case m52xlargeElasticsearch
        case m54xlargeElasticsearch
        case m5LargeElasticsearch
        case m5XlargeElasticsearch
        case r32xlargeElasticsearch
        case r34xlargeElasticsearch
        case r38xlargeElasticsearch
        case r3LargeElasticsearch
        case r3XlargeElasticsearch
        case r416xlargeElasticsearch
        case r42xlargeElasticsearch
        case r44xlargeElasticsearch
        case r48xlargeElasticsearch
        case r4LargeElasticsearch
        case r4XlargeElasticsearch
        case r512xlargeElasticsearch
        case r52xlargeElasticsearch
        case r54xlargeElasticsearch
        case r5LargeElasticsearch
        case r5XlargeElasticsearch
        case t2MediumElasticsearch
        case t2MicroElasticsearch
        case t2SmallElasticsearch
        case ultrawarm1LargeElasticsearch
        case ultrawarm1MediumElasticsearch
        case sdkUnknown(Swift.String)

        public static var allCases: [ESPartitionInstanceType] {
            return [
                .c42xlargeElasticsearch,
                .c44xlargeElasticsearch,
                .c48xlargeElasticsearch,
                .c4LargeElasticsearch,
                .c4XlargeElasticsearch,
                .c518xlargeElasticsearch,
                .c52xlargeElasticsearch,
                .c54xlargeElasticsearch,
                .c59xlargeElasticsearch,
                .c5LargeElasticsearch,
                .c5XlargeElasticsearch,
                .d22xlargeElasticsearch,
                .d24xlargeElasticsearch,
                .d28xlargeElasticsearch,
                .d2XlargeElasticsearch,
                .i22xlargeElasticsearch,
                .i2XlargeElasticsearch,
                .i316xlargeElasticsearch,
                .i32xlargeElasticsearch,
                .i34xlargeElasticsearch,
                .i38xlargeElasticsearch,
                .i3LargeElasticsearch,
                .i3XlargeElasticsearch,
                .m32xlargeElasticsearch,
                .m3LargeElasticsearch,
                .m3MediumElasticsearch,
                .m3XlargeElasticsearch,
                .m410xlargeElasticsearch,
                .m42xlargeElasticsearch,
                .m44xlargeElasticsearch,
                .m4LargeElasticsearch,
                .m4XlargeElasticsearch,
                .m512xlargeElasticsearch,
                .m52xlargeElasticsearch,
                .m54xlargeElasticsearch,
                .m5LargeElasticsearch,
                .m5XlargeElasticsearch,
                .r32xlargeElasticsearch,
                .r34xlargeElasticsearch,
                .r38xlargeElasticsearch,
                .r3LargeElasticsearch,
                .r3XlargeElasticsearch,
                .r416xlargeElasticsearch,
                .r42xlargeElasticsearch,
                .r44xlargeElasticsearch,
                .r48xlargeElasticsearch,
                .r4LargeElasticsearch,
                .r4XlargeElasticsearch,
                .r512xlargeElasticsearch,
                .r52xlargeElasticsearch,
                .r54xlargeElasticsearch,
                .r5LargeElasticsearch,
                .r5XlargeElasticsearch,
                .t2MediumElasticsearch,
                .t2MicroElasticsearch,
                .t2SmallElasticsearch,
                .ultrawarm1LargeElasticsearch,
                .ultrawarm1MediumElasticsearch
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .c42xlargeElasticsearch: return "c4.2xlarge.elasticsearch"
            case .c44xlargeElasticsearch: return "c4.4xlarge.elasticsearch"
            case .c48xlargeElasticsearch: return "c4.8xlarge.elasticsearch"
            case .c4LargeElasticsearch: return "c4.large.elasticsearch"
            case .c4XlargeElasticsearch: return "c4.xlarge.elasticsearch"
            case .c518xlargeElasticsearch: return "c5.18xlarge.elasticsearch"
            case .c52xlargeElasticsearch: return "c5.2xlarge.elasticsearch"
            case .c54xlargeElasticsearch: return "c5.4xlarge.elasticsearch"
            case .c59xlargeElasticsearch: return "c5.9xlarge.elasticsearch"
            case .c5LargeElasticsearch: return "c5.large.elasticsearch"
            case .c5XlargeElasticsearch: return "c5.xlarge.elasticsearch"
            case .d22xlargeElasticsearch: return "d2.2xlarge.elasticsearch"
            case .d24xlargeElasticsearch: return "d2.4xlarge.elasticsearch"
            case .d28xlargeElasticsearch: return "d2.8xlarge.elasticsearch"
            case .d2XlargeElasticsearch: return "d2.xlarge.elasticsearch"
            case .i22xlargeElasticsearch: return "i2.2xlarge.elasticsearch"
            case .i2XlargeElasticsearch: return "i2.xlarge.elasticsearch"
            case .i316xlargeElasticsearch: return "i3.16xlarge.elasticsearch"
            case .i32xlargeElasticsearch: return "i3.2xlarge.elasticsearch"
            case .i34xlargeElasticsearch: return "i3.4xlarge.elasticsearch"
            case .i38xlargeElasticsearch: return "i3.8xlarge.elasticsearch"
            case .i3LargeElasticsearch: return "i3.large.elasticsearch"
            case .i3XlargeElasticsearch: return "i3.xlarge.elasticsearch"
            case .m32xlargeElasticsearch: return "m3.2xlarge.elasticsearch"
            case .m3LargeElasticsearch: return "m3.large.elasticsearch"
            case .m3MediumElasticsearch: return "m3.medium.elasticsearch"
            case .m3XlargeElasticsearch: return "m3.xlarge.elasticsearch"
            case .m410xlargeElasticsearch: return "m4.10xlarge.elasticsearch"
            case .m42xlargeElasticsearch: return "m4.2xlarge.elasticsearch"
            case .m44xlargeElasticsearch: return "m4.4xlarge.elasticsearch"
            case .m4LargeElasticsearch: return "m4.large.elasticsearch"
            case .m4XlargeElasticsearch: return "m4.xlarge.elasticsearch"
            case .m512xlargeElasticsearch: return "m5.12xlarge.elasticsearch"
            case .m52xlargeElasticsearch: return "m5.2xlarge.elasticsearch"
            case .m54xlargeElasticsearch: return "m5.4xlarge.elasticsearch"
            case .m5LargeElasticsearch: return "m5.large.elasticsearch"
            case .m5XlargeElasticsearch: return "m5.xlarge.elasticsearch"
            case .r32xlargeElasticsearch: return "r3.2xlarge.elasticsearch"
            case .r34xlargeElasticsearch: return "r3.4xlarge.elasticsearch"
            case .r38xlargeElasticsearch: return "r3.8xlarge.elasticsearch"
            case .r3LargeElasticsearch: return "r3.large.elasticsearch"
            case .r3XlargeElasticsearch: return "r3.xlarge.elasticsearch"
            case .r416xlargeElasticsearch: return "r4.16xlarge.elasticsearch"
            case .r42xlargeElasticsearch: return "r4.2xlarge.elasticsearch"
            case .r44xlargeElasticsearch: return "r4.4xlarge.elasticsearch"
            case .r48xlargeElasticsearch: return "r4.8xlarge.elasticsearch"
            case .r4LargeElasticsearch: return "r4.large.elasticsearch"
            case .r4XlargeElasticsearch: return "r4.xlarge.elasticsearch"
            case .r512xlargeElasticsearch: return "r5.12xlarge.elasticsearch"
            case .r52xlargeElasticsearch: return "r5.2xlarge.elasticsearch"
            case .r54xlargeElasticsearch: return "r5.4xlarge.elasticsearch"
            case .r5LargeElasticsearch: return "r5.large.elasticsearch"
            case .r5XlargeElasticsearch: return "r5.xlarge.elasticsearch"
            case .t2MediumElasticsearch: return "t2.medium.elasticsearch"
            case .t2MicroElasticsearch: return "t2.micro.elasticsearch"
            case .t2SmallElasticsearch: return "t2.small.elasticsearch"
            case .ultrawarm1LargeElasticsearch: return "ultrawarm1.large.elasticsearch"
            case .ultrawarm1MediumElasticsearch: return "ultrawarm1.medium.elasticsearch"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {

    public enum ESWarmPartitionInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ultrawarm1LargeElasticsearch
        case ultrawarm1MediumElasticsearch
        case sdkUnknown(Swift.String)

        public static var allCases: [ESWarmPartitionInstanceType] {
            return [
                .ultrawarm1LargeElasticsearch,
                .ultrawarm1MediumElasticsearch
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ultrawarm1LargeElasticsearch: return "ultrawarm1.large.elasticsearch"
            case .ultrawarm1MediumElasticsearch: return "ultrawarm1.medium.elasticsearch"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the zone awareness configuration for the domain cluster, such as the number of availability zones.
    public struct ZoneAwarenessConfig {
        /// An integer value to indicate the number of availability zones for a domain when zone awareness is enabled. This should be equal to number of subnets if VPC endpoints is enabled
        public var availabilityZoneCount: Swift.Int?

        public init(
            availabilityZoneCount: Swift.Int? = nil
        )
        {
            self.availabilityZoneCount = availabilityZoneCount
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies the configuration for the domain cluster, such as the type and number of instances.
    public struct ElasticsearchClusterConfig {
        /// Specifies the ColdStorageOptions config for Elasticsearch Domain
        public var coldStorageOptions: ElasticsearchClientTypes.ColdStorageOptions?
        /// Total number of dedicated master nodes, active and on standby, for the cluster.
        public var dedicatedMasterCount: Swift.Int?
        /// A boolean value to indicate whether a dedicated master node is enabled. See [About Dedicated Master Nodes](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-managedomains.html#es-managedomains-dedicatedmasternodes) for more information.
        public var dedicatedMasterEnabled: Swift.Bool?
        /// The instance type for a dedicated master node.
        public var dedicatedMasterType: ElasticsearchClientTypes.ESPartitionInstanceType?
        /// The number of instances in the specified domain cluster.
        public var instanceCount: Swift.Int?
        /// The instance type for an Elasticsearch cluster. UltraWarm instance types are not supported for data instances.
        public var instanceType: ElasticsearchClientTypes.ESPartitionInstanceType?
        /// The number of warm nodes in the cluster.
        public var warmCount: Swift.Int?
        /// True to enable warm storage.
        public var warmEnabled: Swift.Bool?
        /// The instance type for the Elasticsearch cluster's warm nodes.
        public var warmType: ElasticsearchClientTypes.ESWarmPartitionInstanceType?
        /// Specifies the zone awareness configuration for a domain when zone awareness is enabled.
        public var zoneAwarenessConfig: ElasticsearchClientTypes.ZoneAwarenessConfig?
        /// A boolean value to indicate whether zone awareness is enabled. See [About Zone Awareness](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-managedomains.html#es-managedomains-zoneawareness) for more information.
        public var zoneAwarenessEnabled: Swift.Bool?

        public init(
            coldStorageOptions: ElasticsearchClientTypes.ColdStorageOptions? = nil,
            dedicatedMasterCount: Swift.Int? = nil,
            dedicatedMasterEnabled: Swift.Bool? = nil,
            dedicatedMasterType: ElasticsearchClientTypes.ESPartitionInstanceType? = nil,
            instanceCount: Swift.Int? = nil,
            instanceType: ElasticsearchClientTypes.ESPartitionInstanceType? = nil,
            warmCount: Swift.Int? = nil,
            warmEnabled: Swift.Bool? = nil,
            warmType: ElasticsearchClientTypes.ESWarmPartitionInstanceType? = nil,
            zoneAwarenessConfig: ElasticsearchClientTypes.ZoneAwarenessConfig? = nil,
            zoneAwarenessEnabled: Swift.Bool? = nil
        )
        {
            self.coldStorageOptions = coldStorageOptions
            self.dedicatedMasterCount = dedicatedMasterCount
            self.dedicatedMasterEnabled = dedicatedMasterEnabled
            self.dedicatedMasterType = dedicatedMasterType
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.warmCount = warmCount
            self.warmEnabled = warmEnabled
            self.warmType = warmType
            self.zoneAwarenessConfig = zoneAwarenessConfig
            self.zoneAwarenessEnabled = zoneAwarenessEnabled
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies the Encryption At Rest Options.
    public struct EncryptionAtRestOptions {
        /// Specifies the option to enable Encryption At Rest.
        public var enabled: Swift.Bool?
        /// Specifies the KMS Key ID for Encryption At Rest options.
        public var kmsKeyId: Swift.String?

        public init(
            enabled: Swift.Bool? = nil,
            kmsKeyId: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.kmsKeyId = kmsKeyId
        }
    }

}

extension ElasticsearchClientTypes {

    /// Type of Log File, it can be one of the following:
    ///
    /// * INDEX_SLOW_LOGS: Index slow logs contain insert requests that took more time than configured index query log threshold to execute.
    ///
    /// * SEARCH_SLOW_LOGS: Search slow logs contain search queries that took more time than configured search query log threshold to execute.
    ///
    /// * ES_APPLICATION_LOGS: Elasticsearch application logs contain information about errors and warnings raised during the operation of the service and can be useful for troubleshooting.
    ///
    /// * AUDIT_LOGS: Audit logs contain records of user requests for access from the domain.
    public enum LogType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auditLogs
        case esApplicationLogs
        case indexSlowLogs
        case searchSlowLogs
        case sdkUnknown(Swift.String)

        public static var allCases: [LogType] {
            return [
                .auditLogs,
                .esApplicationLogs,
                .indexSlowLogs,
                .searchSlowLogs
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auditLogs: return "AUDIT_LOGS"
            case .esApplicationLogs: return "ES_APPLICATION_LOGS"
            case .indexSlowLogs: return "INDEX_SLOW_LOGS"
            case .searchSlowLogs: return "SEARCH_SLOW_LOGS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// Log Publishing option that is set for given domain.
    ///
    ///
    ///
    ///
    ///
    /// Attributes and their details:
    ///
    /// * CloudWatchLogsLogGroupArn: ARN of the Cloudwatch log group to which log needs to be published.
    ///
    /// * Enabled: Whether the log publishing for given log type is enabled or not
    public struct LogPublishingOption {
        /// ARN of the Cloudwatch log group to which log needs to be published.
        public var cloudWatchLogsLogGroupArn: Swift.String?
        /// Specifies whether given log publishing option is enabled or not.
        public var enabled: Swift.Bool?

        public init(
            cloudWatchLogsLogGroupArn: Swift.String? = nil,
            enabled: Swift.Bool? = nil
        )
        {
            self.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn
            self.enabled = enabled
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies the node-to-node encryption options.
    public struct NodeToNodeEncryptionOptions {
        /// Specify true to enable node-to-node encryption.
        public var enabled: Swift.Bool?

        public init(
            enabled: Swift.Bool? = nil
        )
        {
            self.enabled = enabled
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies the time, in UTC format, when the service takes a daily automated snapshot of the specified Elasticsearch domain. Default value is 0 hours.
    public struct SnapshotOptions {
        /// Specifies the time, in UTC format, when the service takes a daily automated snapshot of the specified Elasticsearch domain. Default value is 0 hours.
        public var automatedSnapshotStartHour: Swift.Int?

        public init(
            automatedSnapshotStartHour: Swift.Int? = nil
        )
        {
            self.automatedSnapshotStartHour = automatedSnapshotStartHour
        }
    }

}

extension ElasticsearchClientTypes {
    /// Options to specify the subnets and security groups for VPC endpoint. For more information, see [ VPC Endpoints for Amazon Elasticsearch Service Domains](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html).
    public struct VPCOptions {
        /// Specifies the security groups for VPC endpoint.
        public var securityGroupIds: [Swift.String]?
        /// Specifies the subnets for VPC endpoint.
        public var subnetIds: [Swift.String]?

        public init(
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }
    }

}

public struct CreateElasticsearchDomainInput {
    /// IAM access policy as a JSON-formatted string.
    public var accessPolicies: Swift.String?
    /// Option to allow references to indices in an HTTP request body. Must be false when configuring access to individual sub-resources. By default, the value is true. See [Configuration Advanced Options](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options) for more information.
    public var advancedOptions: [Swift.String: Swift.String]?
    /// Specifies advanced security options.
    public var advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptionsInput?
    /// Specifies Auto-Tune options.
    public var autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptionsInput?
    /// Options to specify the Cognito user and identity pools for Kibana authentication. For more information, see [Amazon Cognito Authentication for Kibana](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html).
    public var cognitoOptions: ElasticsearchClientTypes.CognitoOptions?
    /// Options to specify configuration that will be applied to the domain endpoint.
    public var domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptions?
    /// The name of the Elasticsearch domain that you are creating. Domain names are unique across the domains owned by an account within an AWS region. Domain names must start with a lowercase letter and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
    /// This member is required.
    public var domainName: Swift.String?
    /// Options to enable, disable and specify the type and size of EBS storage volumes.
    public var ebsOptions: ElasticsearchClientTypes.EBSOptions?
    /// Configuration options for an Elasticsearch domain. Specifies the instance type and number of instances in the domain cluster.
    public var elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfig?
    /// String of format X.Y to specify version for the Elasticsearch domain eg. "1.5" or "2.3". For more information, see [Creating Elasticsearch Domains](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomains) in the Amazon Elasticsearch Service Developer Guide.
    public var elasticsearchVersion: Swift.String?
    /// Specifies the Encryption At Rest Options.
    public var encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptions?
    /// Map of LogType and LogPublishingOption, each containing options to publish a given type of Elasticsearch log.
    public var logPublishingOptions: [Swift.String: ElasticsearchClientTypes.LogPublishingOption]?
    /// Specifies the NodeToNodeEncryptionOptions.
    public var nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptions?
    /// Option to set time, in UTC format, of the daily automated snapshot. Default value is 0 hours.
    public var snapshotOptions: ElasticsearchClientTypes.SnapshotOptions?
    /// A list of Tag added during domain creation.
    public var tagList: [ElasticsearchClientTypes.Tag]?
    /// Options to specify the subnets and security groups for VPC endpoint. For more information, see [Creating a VPC](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html#es-creating-vpc) in VPC Endpoints for Amazon Elasticsearch Service Domains
    public var vpcOptions: ElasticsearchClientTypes.VPCOptions?

    public init(
        accessPolicies: Swift.String? = nil,
        advancedOptions: [Swift.String: Swift.String]? = nil,
        advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptionsInput? = nil,
        autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptionsInput? = nil,
        cognitoOptions: ElasticsearchClientTypes.CognitoOptions? = nil,
        domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptions? = nil,
        domainName: Swift.String? = nil,
        ebsOptions: ElasticsearchClientTypes.EBSOptions? = nil,
        elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfig? = nil,
        elasticsearchVersion: Swift.String? = nil,
        encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptions? = nil,
        logPublishingOptions: [Swift.String: ElasticsearchClientTypes.LogPublishingOption]? = nil,
        nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptions? = nil,
        snapshotOptions: ElasticsearchClientTypes.SnapshotOptions? = nil,
        tagList: [ElasticsearchClientTypes.Tag]? = nil,
        vpcOptions: ElasticsearchClientTypes.VPCOptions? = nil
    )
    {
        self.accessPolicies = accessPolicies
        self.advancedOptions = advancedOptions
        self.advancedSecurityOptions = advancedSecurityOptions
        self.autoTuneOptions = autoTuneOptions
        self.cognitoOptions = cognitoOptions
        self.domainEndpointOptions = domainEndpointOptions
        self.domainName = domainName
        self.ebsOptions = ebsOptions
        self.elasticsearchClusterConfig = elasticsearchClusterConfig
        self.elasticsearchVersion = elasticsearchVersion
        self.encryptionAtRestOptions = encryptionAtRestOptions
        self.logPublishingOptions = logPublishingOptions
        self.nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions
        self.snapshotOptions = snapshotOptions
        self.tagList = tagList
        self.vpcOptions = vpcOptions
    }
}

extension ElasticsearchClientTypes {

    /// Specifies the Auto-Tune state for the Elasticsearch domain. For valid states see the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html).
    public enum AutoTuneState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case disabledAndRollbackComplete
        case disabledAndRollbackError
        case disabledAndRollbackInProgress
        case disabledAndRollbackScheduled
        case disableInProgress
        case enabled
        case enableInProgress
        case error
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoTuneState] {
            return [
                .disabled,
                .disabledAndRollbackComplete,
                .disabledAndRollbackError,
                .disabledAndRollbackInProgress,
                .disabledAndRollbackScheduled,
                .disableInProgress,
                .enabled,
                .enableInProgress,
                .error
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .disabledAndRollbackComplete: return "DISABLED_AND_ROLLBACK_COMPLETE"
            case .disabledAndRollbackError: return "DISABLED_AND_ROLLBACK_ERROR"
            case .disabledAndRollbackInProgress: return "DISABLED_AND_ROLLBACK_IN_PROGRESS"
            case .disabledAndRollbackScheduled: return "DISABLED_AND_ROLLBACK_SCHEDULED"
            case .disableInProgress: return "DISABLE_IN_PROGRESS"
            case .enabled: return "ENABLED"
            case .enableInProgress: return "ENABLE_IN_PROGRESS"
            case .error: return "ERROR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the Auto-Tune options: the Auto-Tune desired state for the domain and list of maintenance schedules.
    public struct AutoTuneOptionsOutput {
        /// Specifies the error message while enabling or disabling the Auto-Tune.
        public var errorMessage: Swift.String?
        /// Specifies the AutoTuneState for the Elasticsearch domain.
        public var state: ElasticsearchClientTypes.AutoTuneState?

        public init(
            errorMessage: Swift.String? = nil,
            state: ElasticsearchClientTypes.AutoTuneState? = nil
        )
        {
            self.errorMessage = errorMessage
            self.state = state
        }
    }

}

extension ElasticsearchClientTypes {

    public enum ConfigChangeStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case applyingChanges
        case cancelled
        case completed
        case initializing
        case pending
        case pendingUserInput
        case validating
        case validationFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfigChangeStatus] {
            return [
                .applyingChanges,
                .cancelled,
                .completed,
                .initializing,
                .pending,
                .pendingUserInput,
                .validating,
                .validationFailed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .applyingChanges: return "ApplyingChanges"
            case .cancelled: return "Cancelled"
            case .completed: return "Completed"
            case .initializing: return "Initializing"
            case .pending: return "Pending"
            case .pendingUserInput: return "PendingUserInput"
            case .validating: return "Validating"
            case .validationFailed: return "ValidationFailed"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {

    public enum InitiatedBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case customer
        case service
        case sdkUnknown(Swift.String)

        public static var allCases: [InitiatedBy] {
            return [
                .customer,
                .service
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .customer: return "CUSTOMER"
            case .service: return "SERVICE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// Specifies change details of the domain configuration change.
    public struct ChangeProgressDetails {
        /// The unique change identifier associated with a specific domain configuration change.
        public var changeId: Swift.String?
        /// The current status of the configuration change.
        public var configChangeStatus: ElasticsearchClientTypes.ConfigChangeStatus?
        /// The IAM principal who initiated the configuration change.
        public var initiatedBy: ElasticsearchClientTypes.InitiatedBy?
        /// The last time that the configuration change was updated.
        public var lastUpdatedTime: Foundation.Date?
        /// Contains an optional message associated with the domain configuration change.
        public var message: Swift.String?
        /// The time that the configuration change was initiated, in Universal Coordinated Time (UTC).
        public var startTime: Foundation.Date?

        public init(
            changeId: Swift.String? = nil,
            configChangeStatus: ElasticsearchClientTypes.ConfigChangeStatus? = nil,
            initiatedBy: ElasticsearchClientTypes.InitiatedBy? = nil,
            lastUpdatedTime: Foundation.Date? = nil,
            message: Swift.String? = nil,
            startTime: Foundation.Date? = nil
        )
        {
            self.changeId = changeId
            self.configChangeStatus = configChangeStatus
            self.initiatedBy = initiatedBy
            self.lastUpdatedTime = lastUpdatedTime
            self.message = message
            self.startTime = startTime
        }
    }

}

extension ElasticsearchClientTypes {

    public enum DomainProcessingStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case isolated
        case modifying
        case updating
        case upgrading
        case sdkUnknown(Swift.String)

        public static var allCases: [DomainProcessingStatusType] {
            return [
                .active,
                .creating,
                .deleting,
                .isolated,
                .modifying,
                .updating,
                .upgrading
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .creating: return "Creating"
            case .deleting: return "Deleting"
            case .isolated: return "Isolated"
            case .modifying: return "Modifying"
            case .updating: return "UpdatingServiceSoftware"
            case .upgrading: return "UpgradingEngineVersion"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {

    public enum PropertyValueType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case plainText
        case stringifiedJson
        case sdkUnknown(Swift.String)

        public static var allCases: [PropertyValueType] {
            return [
                .plainText,
                .stringifiedJson
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .plainText: return "PLAIN_TEXT"
            case .stringifiedJson: return "STRINGIFIED_JSON"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// Information about the domain properties that are currently being modified.
    public struct ModifyingProperties {
        /// The current value of the domain property that is being modified.
        public var activeValue: Swift.String?
        /// The name of the property that is currently being modified.
        public var name: Swift.String?
        /// The value that the property that is currently being modified will eventually have.
        public var pendingValue: Swift.String?
        /// The type of value that is currently being modified. Properties can have two types:
        ///
        /// * PLAIN_TEXT: Contain direct values such as "1", "True", or "c5.large.search".
        ///
        /// * STRINGIFIED_JSON: Contain content in JSON format, such as {"Enabled":"True"}".
        public var valueType: ElasticsearchClientTypes.PropertyValueType?

        public init(
            activeValue: Swift.String? = nil,
            name: Swift.String? = nil,
            pendingValue: Swift.String? = nil,
            valueType: ElasticsearchClientTypes.PropertyValueType? = nil
        )
        {
            self.activeValue = activeValue
            self.name = name
            self.pendingValue = pendingValue
            self.valueType = valueType
        }
    }

}

extension ElasticsearchClientTypes {
    /// Options to specify the subnets and security groups for VPC endpoint. For more information, see [ VPC Endpoints for Amazon Elasticsearch Service Domains](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html).
    public struct VPCDerivedInfo {
        /// The availability zones for the Elasticsearch domain. Exists only if the domain was created with VPCOptions.
        public var availabilityZones: [Swift.String]?
        /// Specifies the security groups for VPC endpoint.
        public var securityGroupIds: [Swift.String]?
        /// Specifies the subnets for VPC endpoint.
        public var subnetIds: [Swift.String]?
        /// The VPC Id for the Elasticsearch domain. Exists only if the domain was created with VPCOptions.
        public var vpcId: Swift.String?

        public init(
            availabilityZones: [Swift.String]? = nil,
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }
    }

}

extension ElasticsearchClientTypes {
    /// The current status of an Elasticsearch domain.
    public struct ElasticsearchDomainStatus {
        /// IAM access policy as a JSON-formatted string.
        public var accessPolicies: Swift.String?
        /// Specifies the status of the AdvancedOptions
        public var advancedOptions: [Swift.String: Swift.String]?
        /// The current status of the Elasticsearch domain's advanced security options.
        public var advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptions?
        /// The Amazon resource name (ARN) of an Elasticsearch domain. See [Identifiers for IAM Entities](http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html) in Using AWS Identity and Access Management for more information.
        /// This member is required.
        public var arn: Swift.String?
        /// The current status of the Elasticsearch domain's Auto-Tune options.
        public var autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptionsOutput?
        /// Specifies change details of the domain configuration change.
        public var changeProgressDetails: ElasticsearchClientTypes.ChangeProgressDetails?
        /// The CognitoOptions for the specified domain. For more information, see [Amazon Cognito Authentication for Kibana](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html).
        public var cognitoOptions: ElasticsearchClientTypes.CognitoOptions?
        /// The domain creation status. True if the creation of an Elasticsearch domain is complete. False if domain creation is still in progress.
        public var created: Swift.Bool?
        /// The domain deletion status. True if a delete request has been received for the domain but resource cleanup is still in progress. False if the domain has not been deleted. Once domain deletion is complete, the status of the domain is no longer returned.
        public var deleted: Swift.Bool?
        /// The current status of the Elasticsearch domain's endpoint options.
        public var domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptions?
        /// The unique identifier for the specified Elasticsearch domain.
        /// This member is required.
        public var domainId: Swift.String?
        /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
        /// This member is required.
        public var domainName: Swift.String?
        /// The status of any changes that are currently in progress for the domain.
        public var domainProcessingStatus: ElasticsearchClientTypes.DomainProcessingStatusType?
        /// The EBSOptions for the specified domain. See [Configuring EBS-based Storage](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-ebs) for more information.
        public var ebsOptions: ElasticsearchClientTypes.EBSOptions?
        /// The type and number of instances in the domain cluster.
        /// This member is required.
        public var elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfig?
        public var elasticsearchVersion: Swift.String?
        /// Specifies the status of the EncryptionAtRestOptions.
        public var encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptions?
        /// The Elasticsearch domain endpoint that you use to submit index and search requests.
        public var endpoint: Swift.String?
        /// Map containing the Elasticsearch domain endpoints used to submit index and search requests. Example key, value: 'vpc','vpc-endpoint-h2dsd34efgyghrtguk5gt6j2foh4.us-east-1.es.amazonaws.com'.
        public var endpoints: [Swift.String: Swift.String]?
        /// Log publishing options for the given domain.
        public var logPublishingOptions: [Swift.String: ElasticsearchClientTypes.LogPublishingOption]?
        /// Information about the domain properties that are currently being modified.
        public var modifyingProperties: [ElasticsearchClientTypes.ModifyingProperties]?
        /// Specifies the status of the NodeToNodeEncryptionOptions.
        public var nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptions?
        /// The status of the Elasticsearch domain configuration. True if Amazon Elasticsearch Service is processing configuration changes. False if the configuration is active.
        public var processing: Swift.Bool?
        /// The current status of the Elasticsearch domain's service software.
        public var serviceSoftwareOptions: ElasticsearchClientTypes.ServiceSoftwareOptions?
        /// Specifies the status of the SnapshotOptions
        public var snapshotOptions: ElasticsearchClientTypes.SnapshotOptions?
        /// The status of an Elasticsearch domain version upgrade. True if Amazon Elasticsearch Service is undergoing a version upgrade. False if the configuration is active.
        public var upgradeProcessing: Swift.Bool?
        /// The VPCOptions for the specified domain. For more information, see [VPC Endpoints for Amazon Elasticsearch Service Domains](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html).
        public var vpcOptions: ElasticsearchClientTypes.VPCDerivedInfo?

        public init(
            accessPolicies: Swift.String? = nil,
            advancedOptions: [Swift.String: Swift.String]? = nil,
            advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptions? = nil,
            arn: Swift.String? = nil,
            autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptionsOutput? = nil,
            changeProgressDetails: ElasticsearchClientTypes.ChangeProgressDetails? = nil,
            cognitoOptions: ElasticsearchClientTypes.CognitoOptions? = nil,
            created: Swift.Bool? = nil,
            deleted: Swift.Bool? = nil,
            domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptions? = nil,
            domainId: Swift.String? = nil,
            domainName: Swift.String? = nil,
            domainProcessingStatus: ElasticsearchClientTypes.DomainProcessingStatusType? = nil,
            ebsOptions: ElasticsearchClientTypes.EBSOptions? = nil,
            elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfig? = nil,
            elasticsearchVersion: Swift.String? = nil,
            encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptions? = nil,
            endpoint: Swift.String? = nil,
            endpoints: [Swift.String: Swift.String]? = nil,
            logPublishingOptions: [Swift.String: ElasticsearchClientTypes.LogPublishingOption]? = nil,
            modifyingProperties: [ElasticsearchClientTypes.ModifyingProperties]? = nil,
            nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptions? = nil,
            processing: Swift.Bool? = nil,
            serviceSoftwareOptions: ElasticsearchClientTypes.ServiceSoftwareOptions? = nil,
            snapshotOptions: ElasticsearchClientTypes.SnapshotOptions? = nil,
            upgradeProcessing: Swift.Bool? = nil,
            vpcOptions: ElasticsearchClientTypes.VPCDerivedInfo? = nil
        )
        {
            self.accessPolicies = accessPolicies
            self.advancedOptions = advancedOptions
            self.advancedSecurityOptions = advancedSecurityOptions
            self.arn = arn
            self.autoTuneOptions = autoTuneOptions
            self.changeProgressDetails = changeProgressDetails
            self.cognitoOptions = cognitoOptions
            self.created = created
            self.deleted = deleted
            self.domainEndpointOptions = domainEndpointOptions
            self.domainId = domainId
            self.domainName = domainName
            self.domainProcessingStatus = domainProcessingStatus
            self.ebsOptions = ebsOptions
            self.elasticsearchClusterConfig = elasticsearchClusterConfig
            self.elasticsearchVersion = elasticsearchVersion
            self.encryptionAtRestOptions = encryptionAtRestOptions
            self.endpoint = endpoint
            self.endpoints = endpoints
            self.logPublishingOptions = logPublishingOptions
            self.modifyingProperties = modifyingProperties
            self.nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions
            self.processing = processing
            self.serviceSoftwareOptions = serviceSoftwareOptions
            self.snapshotOptions = snapshotOptions
            self.upgradeProcessing = upgradeProcessing
            self.vpcOptions = vpcOptions
        }
    }

}

/// The result of a CreateElasticsearchDomain operation. Contains the status of the newly created Elasticsearch domain.
public struct CreateElasticsearchDomainOutput {
    /// The status of the newly created Elasticsearch domain.
    public var domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus?

    public init(
        domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus? = nil
    )
    {
        self.domainStatus = domainStatus
    }
}

/// Container for the parameters to the [CreateOutboundCrossClusterSearchConnection] operation.
public struct CreateOutboundCrossClusterSearchConnectionInput {
    /// Specifies the connection alias that will be used by the customer for this connection.
    /// This member is required.
    public var connectionAlias: Swift.String?
    /// Specifies the [DomainInformation] for the destination Elasticsearch domain.
    /// This member is required.
    public var destinationDomainInfo: ElasticsearchClientTypes.DomainInformation?
    /// Specifies the [DomainInformation] for the source Elasticsearch domain.
    /// This member is required.
    public var sourceDomainInfo: ElasticsearchClientTypes.DomainInformation?

    public init(
        connectionAlias: Swift.String? = nil,
        destinationDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil,
        sourceDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil
    )
    {
        self.connectionAlias = connectionAlias
        self.destinationDomainInfo = destinationDomainInfo
        self.sourceDomainInfo = sourceDomainInfo
    }
}

extension ElasticsearchClientTypes {

    public enum OutboundCrossClusterSearchConnectionStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case deleted
        case deleting
        case pendingAcceptance
        case provisioning
        case rejected
        case validating
        case validationFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [OutboundCrossClusterSearchConnectionStatusCode] {
            return [
                .active,
                .deleted,
                .deleting,
                .pendingAcceptance,
                .provisioning,
                .rejected,
                .validating,
                .validationFailed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .pendingAcceptance: return "PENDING_ACCEPTANCE"
            case .provisioning: return "PROVISIONING"
            case .rejected: return "REJECTED"
            case .validating: return "VALIDATING"
            case .validationFailed: return "VALIDATION_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the connection status of an outbound cross-cluster search connection.
    public struct OutboundCrossClusterSearchConnectionStatus {
        /// Specifies verbose information for the outbound connection status.
        public var message: Swift.String?
        /// The state code for outbound connection. This can be one of the following:
        ///
        /// * VALIDATING: The outbound connection request is being validated.
        ///
        /// * VALIDATION_FAILED: Validation failed for the connection request.
        ///
        /// * PENDING_ACCEPTANCE: Outbound connection request is validated and is not yet accepted by destination domain owner.
        ///
        /// * PROVISIONING: Outbound connection request is in process.
        ///
        /// * ACTIVE: Outbound connection is active and ready to use.
        ///
        /// * REJECTED: Outbound connection request is rejected by destination domain owner.
        ///
        /// * DELETING: Outbound connection deletion is in progress.
        ///
        /// * DELETED: Outbound connection is deleted and cannot be used further.
        public var statusCode: ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatusCode?

        public init(
            message: Swift.String? = nil,
            statusCode: ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatusCode? = nil
        )
        {
            self.message = message
            self.statusCode = statusCode
        }
    }

}

/// The result of a [CreateOutboundCrossClusterSearchConnection] request. Contains the details of the newly created cross-cluster search connection.
public struct CreateOutboundCrossClusterSearchConnectionOutput {
    /// Specifies the connection alias provided during the create connection request.
    public var connectionAlias: Swift.String?
    /// Specifies the [OutboundCrossClusterSearchConnectionStatus] for the newly created connection.
    public var connectionStatus: ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus?
    /// Unique id for the created outbound connection, which is used for subsequent operations on connection.
    public var crossClusterSearchConnectionId: Swift.String?
    /// Specifies the [DomainInformation] for the destination Elasticsearch domain.
    public var destinationDomainInfo: ElasticsearchClientTypes.DomainInformation?
    /// Specifies the [DomainInformation] for the source Elasticsearch domain.
    public var sourceDomainInfo: ElasticsearchClientTypes.DomainInformation?

    public init(
        connectionAlias: Swift.String? = nil,
        connectionStatus: ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus? = nil,
        crossClusterSearchConnectionId: Swift.String? = nil,
        destinationDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil,
        sourceDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil
    )
    {
        self.connectionAlias = connectionAlias
        self.connectionStatus = connectionStatus
        self.crossClusterSearchConnectionId = crossClusterSearchConnectionId
        self.destinationDomainInfo = destinationDomainInfo
        self.sourceDomainInfo = sourceDomainInfo
    }
}

extension ElasticsearchClientTypes {
    /// The S3 location for importing the package specified as S3BucketName and S3Key
    public struct PackageSource {
        /// Name of the bucket containing the package.
        public var s3BucketName: Swift.String?
        /// Key (file name) of the package.
        public var s3Key: Swift.String?

        public init(
            s3BucketName: Swift.String? = nil,
            s3Key: Swift.String? = nil
        )
        {
            self.s3BucketName = s3BucketName
            self.s3Key = s3Key
        }
    }

}

/// Container for request parameters to [CreatePackage] operation.
public struct CreatePackageInput {
    /// Description of the package.
    public var packageDescription: Swift.String?
    /// Unique identifier for the package.
    /// This member is required.
    public var packageName: Swift.String?
    /// The customer S3 location PackageSource for importing the package.
    /// This member is required.
    public var packageSource: ElasticsearchClientTypes.PackageSource?
    /// Type of package. Currently supports only TXT-DICTIONARY.
    /// This member is required.
    public var packageType: ElasticsearchClientTypes.PackageType?

    public init(
        packageDescription: Swift.String? = nil,
        packageName: Swift.String? = nil,
        packageSource: ElasticsearchClientTypes.PackageSource? = nil,
        packageType: ElasticsearchClientTypes.PackageType? = nil
    )
    {
        self.packageDescription = packageDescription
        self.packageName = packageName
        self.packageSource = packageSource
        self.packageType = packageType
    }
}

extension ElasticsearchClientTypes {

    public enum PackageStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case copying
        case copyFailed
        case deleted
        case deleteFailed
        case deleting
        case validating
        case validationFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [PackageStatus] {
            return [
                .available,
                .copying,
                .copyFailed,
                .deleted,
                .deleteFailed,
                .deleting,
                .validating,
                .validationFailed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .copying: return "COPYING"
            case .copyFailed: return "COPY_FAILED"
            case .deleted: return "DELETED"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case .validating: return "VALIDATING"
            case .validationFailed: return "VALIDATION_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// Basic information about a package.
    public struct PackageDetails {
        public var availablePackageVersion: Swift.String?
        /// Timestamp which tells creation date of the package.
        public var createdAt: Foundation.Date?
        /// Additional information if the package is in an error state. Null otherwise.
        public var errorDetails: ElasticsearchClientTypes.ErrorDetails?
        public var lastUpdatedAt: Foundation.Date?
        /// User-specified description of the package.
        public var packageDescription: Swift.String?
        /// Internal ID of the package.
        public var packageID: Swift.String?
        /// User specified name of the package.
        public var packageName: Swift.String?
        /// Current state of the package. Values are COPYING/COPY_FAILED/AVAILABLE/DELETING/DELETE_FAILED
        public var packageStatus: ElasticsearchClientTypes.PackageStatus?
        /// Currently supports only TXT-DICTIONARY.
        public var packageType: ElasticsearchClientTypes.PackageType?

        public init(
            availablePackageVersion: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            errorDetails: ElasticsearchClientTypes.ErrorDetails? = nil,
            lastUpdatedAt: Foundation.Date? = nil,
            packageDescription: Swift.String? = nil,
            packageID: Swift.String? = nil,
            packageName: Swift.String? = nil,
            packageStatus: ElasticsearchClientTypes.PackageStatus? = nil,
            packageType: ElasticsearchClientTypes.PackageType? = nil
        )
        {
            self.availablePackageVersion = availablePackageVersion
            self.createdAt = createdAt
            self.errorDetails = errorDetails
            self.lastUpdatedAt = lastUpdatedAt
            self.packageDescription = packageDescription
            self.packageID = packageID
            self.packageName = packageName
            self.packageStatus = packageStatus
            self.packageType = packageType
        }
    }

}

/// Container for response returned by [CreatePackage] operation.
public struct CreatePackageOutput {
    /// Information about the package PackageDetails.
    public var packageDetails: ElasticsearchClientTypes.PackageDetails?

    public init(
        packageDetails: ElasticsearchClientTypes.PackageDetails? = nil
    )
    {
        self.packageDetails = packageDetails
    }
}

/// Container for the parameters to the [CreateVpcEndpointRequest] operation.
public struct CreateVpcEndpointInput {
    /// Unique, case-sensitive identifier to ensure idempotency of the request.
    public var clientToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the domain to grant access to.
    /// This member is required.
    public var domainArn: Swift.String?
    /// Options to specify the subnets and security groups for the endpoint.
    /// This member is required.
    public var vpcOptions: ElasticsearchClientTypes.VPCOptions?

    public init(
        clientToken: Swift.String? = nil,
        domainArn: Swift.String? = nil,
        vpcOptions: ElasticsearchClientTypes.VPCOptions? = nil
    )
    {
        self.clientToken = clientToken
        self.domainArn = domainArn
        self.vpcOptions = vpcOptions
    }
}

extension ElasticsearchClientTypes {

    /// Specifies the current status of the VPC endpoint:
    ///
    /// * CREATING: Indicates that the VPC endpoint is currently being created.
    ///
    /// * CREATE_FAILED: Indicates that the VPC endpoint creation failed.
    ///
    /// * ACTIVE: Indicates that the VPC endpoint is currently active.
    ///
    /// * UPDATING: Indicates that the VPC endpoint is currently being updated.
    ///
    /// * UPDATE_FAILED: Indicates that the VPC endpoint update failed.
    ///
    /// * DELETING: Indicates that the VPC endpoint is currently being deleted.
    ///
    /// * DELETE_FAILED: Indicates that the VPC endpoint deletion failed.
    public enum VpcEndpointStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case createFailed
        case creating
        case deleteFailed
        case deleting
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [VpcEndpointStatus] {
            return [
                .active,
                .createFailed,
                .creating,
                .deleteFailed,
                .deleting,
                .updateFailed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case .updateFailed: return "UPDATE_FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// The connection endpoint for connecting to an Amazon OpenSearch Service domain through a proxy.
    public struct VpcEndpoint {
        /// The Amazon Resource Name (ARN) of the domain associated with the endpoint.
        public var domainArn: Swift.String?
        /// The connection endpoint ID for connecting to the domain.
        public var endpoint: Swift.String?
        /// The current status of the endpoint.
        public var status: ElasticsearchClientTypes.VpcEndpointStatus?
        /// The unique identifier of the endpoint.
        public var vpcEndpointId: Swift.String?
        /// The creator of the endpoint.
        public var vpcEndpointOwner: Swift.String?
        /// Options to specify the subnets and security groups for an Amazon OpenSearch Service VPC endpoint.
        public var vpcOptions: ElasticsearchClientTypes.VPCDerivedInfo?

        public init(
            domainArn: Swift.String? = nil,
            endpoint: Swift.String? = nil,
            status: ElasticsearchClientTypes.VpcEndpointStatus? = nil,
            vpcEndpointId: Swift.String? = nil,
            vpcEndpointOwner: Swift.String? = nil,
            vpcOptions: ElasticsearchClientTypes.VPCDerivedInfo? = nil
        )
        {
            self.domainArn = domainArn
            self.endpoint = endpoint
            self.status = status
            self.vpcEndpointId = vpcEndpointId
            self.vpcEndpointOwner = vpcEndpointOwner
            self.vpcOptions = vpcOptions
        }
    }

}

/// Container for response parameters to the [CreateVpcEndpoint] operation. Contains the configuration and status of the VPC Endpoint being created.
public struct CreateVpcEndpointOutput {
    /// Information about the newly created VPC endpoint.
    /// This member is required.
    public var vpcEndpoint: ElasticsearchClientTypes.VpcEndpoint?

    public init(
        vpcEndpoint: ElasticsearchClientTypes.VpcEndpoint? = nil
    )
    {
        self.vpcEndpoint = vpcEndpoint
    }
}

/// Container for the parameters to the [DeleteElasticsearchDomain] operation. Specifies the name of the Elasticsearch domain that you want to delete.
public struct DeleteElasticsearchDomainInput {
    /// The name of the Elasticsearch domain that you want to permanently delete.
    /// This member is required.
    public var domainName: Swift.String?

    public init(
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

/// The result of a DeleteElasticsearchDomain request. Contains the status of the pending deletion, or no status if the domain and all of its resources have been deleted.
public struct DeleteElasticsearchDomainOutput {
    /// The status of the Elasticsearch domain being deleted.
    public var domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus?

    public init(
        domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus? = nil
    )
    {
        self.domainStatus = domainStatus
    }
}

/// Container for the parameters to the [DeleteInboundCrossClusterSearchConnection] operation.
public struct DeleteInboundCrossClusterSearchConnectionInput {
    /// The id of the inbound connection that you want to permanently delete.
    /// This member is required.
    public var crossClusterSearchConnectionId: Swift.String?

    public init(
        crossClusterSearchConnectionId: Swift.String? = nil
    )
    {
        self.crossClusterSearchConnectionId = crossClusterSearchConnectionId
    }
}

/// The result of a [DeleteInboundCrossClusterSearchConnection] operation. Contains details of deleted inbound connection.
public struct DeleteInboundCrossClusterSearchConnectionOutput {
    /// Specifies the [InboundCrossClusterSearchConnection] of deleted inbound connection.
    public var crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection?

    public init(
        crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection? = nil
    )
    {
        self.crossClusterSearchConnection = crossClusterSearchConnection
    }
}

/// Container for the parameters to the [DeleteOutboundCrossClusterSearchConnection] operation.
public struct DeleteOutboundCrossClusterSearchConnectionInput {
    /// The id of the outbound connection that you want to permanently delete.
    /// This member is required.
    public var crossClusterSearchConnectionId: Swift.String?

    public init(
        crossClusterSearchConnectionId: Swift.String? = nil
    )
    {
        self.crossClusterSearchConnectionId = crossClusterSearchConnectionId
    }
}

extension ElasticsearchClientTypes {
    /// Specifies details of an outbound connection.
    public struct OutboundCrossClusterSearchConnection {
        /// Specifies the connection alias for the outbound cross-cluster search connection.
        public var connectionAlias: Swift.String?
        /// Specifies the [OutboundCrossClusterSearchConnectionStatus] for the outbound connection.
        public var connectionStatus: ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus?
        /// Specifies the connection id for the outbound cross-cluster search connection.
        public var crossClusterSearchConnectionId: Swift.String?
        /// Specifies the [DomainInformation] for the destination Elasticsearch domain.
        public var destinationDomainInfo: ElasticsearchClientTypes.DomainInformation?
        /// Specifies the [DomainInformation] for the source Elasticsearch domain.
        public var sourceDomainInfo: ElasticsearchClientTypes.DomainInformation?

        public init(
            connectionAlias: Swift.String? = nil,
            connectionStatus: ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus? = nil,
            crossClusterSearchConnectionId: Swift.String? = nil,
            destinationDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil,
            sourceDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil
        )
        {
            self.connectionAlias = connectionAlias
            self.connectionStatus = connectionStatus
            self.crossClusterSearchConnectionId = crossClusterSearchConnectionId
            self.destinationDomainInfo = destinationDomainInfo
            self.sourceDomainInfo = sourceDomainInfo
        }
    }

}

/// The result of a [DeleteOutboundCrossClusterSearchConnection] operation. Contains details of deleted outbound connection.
public struct DeleteOutboundCrossClusterSearchConnectionOutput {
    /// Specifies the [OutboundCrossClusterSearchConnection] of deleted outbound connection.
    public var crossClusterSearchConnection: ElasticsearchClientTypes.OutboundCrossClusterSearchConnection?

    public init(
        crossClusterSearchConnection: ElasticsearchClientTypes.OutboundCrossClusterSearchConnection? = nil
    )
    {
        self.crossClusterSearchConnection = crossClusterSearchConnection
    }
}

/// Container for request parameters to [DeletePackage] operation.
public struct DeletePackageInput {
    /// Internal ID of the package that you want to delete. Use DescribePackages to find this value.
    /// This member is required.
    public var packageID: Swift.String?

    public init(
        packageID: Swift.String? = nil
    )
    {
        self.packageID = packageID
    }
}

/// Container for response parameters to [DeletePackage] operation.
public struct DeletePackageOutput {
    ///     PackageDetails
    public var packageDetails: ElasticsearchClientTypes.PackageDetails?

    public init(
        packageDetails: ElasticsearchClientTypes.PackageDetails? = nil
    )
    {
        self.packageDetails = packageDetails
    }
}

/// Deletes an Amazon OpenSearch Service-managed interface VPC endpoint.
public struct DeleteVpcEndpointInput {
    /// The unique identifier of the endpoint to be deleted.
    /// This member is required.
    public var vpcEndpointId: Swift.String?

    public init(
        vpcEndpointId: Swift.String? = nil
    )
    {
        self.vpcEndpointId = vpcEndpointId
    }
}

extension ElasticsearchClientTypes {
    /// Summary information for an Amazon OpenSearch Service-managed VPC endpoint.
    public struct VpcEndpointSummary {
        /// The Amazon Resource Name (ARN) of the domain associated with the endpoint.
        public var domainArn: Swift.String?
        /// The current status of the endpoint.
        public var status: ElasticsearchClientTypes.VpcEndpointStatus?
        /// The unique identifier of the endpoint.
        public var vpcEndpointId: Swift.String?
        /// The creator of the endpoint.
        public var vpcEndpointOwner: Swift.String?

        public init(
            domainArn: Swift.String? = nil,
            status: ElasticsearchClientTypes.VpcEndpointStatus? = nil,
            vpcEndpointId: Swift.String? = nil,
            vpcEndpointOwner: Swift.String? = nil
        )
        {
            self.domainArn = domainArn
            self.status = status
            self.vpcEndpointId = vpcEndpointId
            self.vpcEndpointOwner = vpcEndpointOwner
        }
    }

}

/// Container for response parameters to the [DeleteVpcEndpoint] operation. Contains the summarized detail of the VPC Endpoint being deleted.
public struct DeleteVpcEndpointOutput {
    /// Information about the deleted endpoint, including its current status (DELETING or DELETE_FAILED).
    /// This member is required.
    public var vpcEndpointSummary: ElasticsearchClientTypes.VpcEndpointSummary?

    public init(
        vpcEndpointSummary: ElasticsearchClientTypes.VpcEndpointSummary? = nil
    )
    {
        self.vpcEndpointSummary = vpcEndpointSummary
    }
}

/// Container for the parameters to the DescribeDomainAutoTunes operation.
public struct DescribeDomainAutoTunesInput {
    /// Specifies the domain name for which you want Auto-Tune action details.
    /// This member is required.
    public var domainName: Swift.String?
    /// Set this value to limit the number of results returned. If not specified, defaults to 100.
    public var maxResults: Swift.Int?
    /// NextToken is sent in case the earlier API call results contain the NextToken. It is used for pagination.
    public var nextToken: Swift.String?

    public init(
        domainName: Swift.String? = nil,
        maxResults: Swift.Int? = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ElasticsearchClientTypes {

    /// Specifies Auto-Tune action type. Valid values are JVM_HEAP_SIZE_TUNING and JVM_YOUNG_GEN_TUNING.
    public enum ScheduledAutoTuneActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case jvmHeapSizeTuning
        case jvmYoungGenTuning
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduledAutoTuneActionType] {
            return [
                .jvmHeapSizeTuning,
                .jvmYoungGenTuning
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .jvmHeapSizeTuning: return "JVM_HEAP_SIZE_TUNING"
            case .jvmYoungGenTuning: return "JVM_YOUNG_GEN_TUNING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {

    /// Specifies Auto-Tune action severity. Valid values are LOW, MEDIUM and HIGH.
    public enum ScheduledAutoTuneSeverityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduledAutoTuneSeverityType] {
            return [
                .high,
                .low,
                .medium
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// Specifies details of the scheduled Auto-Tune action. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
    public struct ScheduledAutoTuneDetails {
        /// Specifies Auto-Tune action description.
        public var action: Swift.String?
        /// Specifies Auto-Tune action type. Valid values are JVM_HEAP_SIZE_TUNING and JVM_YOUNG_GEN_TUNING.
        public var actionType: ElasticsearchClientTypes.ScheduledAutoTuneActionType?
        /// Specifies timestamp for the Auto-Tune action scheduled for the domain.
        public var date: Foundation.Date?
        /// Specifies Auto-Tune action severity. Valid values are LOW, MEDIUM and HIGH.
        public var severity: ElasticsearchClientTypes.ScheduledAutoTuneSeverityType?

        public init(
            action: Swift.String? = nil,
            actionType: ElasticsearchClientTypes.ScheduledAutoTuneActionType? = nil,
            date: Foundation.Date? = nil,
            severity: ElasticsearchClientTypes.ScheduledAutoTuneSeverityType? = nil
        )
        {
            self.action = action
            self.actionType = actionType
            self.date = date
            self.severity = severity
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies details of the Auto-Tune action. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
    public struct AutoTuneDetails {
        /// Specifies details of the scheduled Auto-Tune action. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
        public var scheduledAutoTuneDetails: ElasticsearchClientTypes.ScheduledAutoTuneDetails?

        public init(
            scheduledAutoTuneDetails: ElasticsearchClientTypes.ScheduledAutoTuneDetails? = nil
        )
        {
            self.scheduledAutoTuneDetails = scheduledAutoTuneDetails
        }
    }

}

extension ElasticsearchClientTypes {

    /// Specifies Auto-Tune type. Valid value is SCHEDULED_ACTION.
    public enum AutoTuneType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case scheduledAction
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoTuneType] {
            return [
                .scheduledAction
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .scheduledAction: return "SCHEDULED_ACTION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// Specifies Auto-Tune type and Auto-Tune action details.
    public struct AutoTune {
        /// Specifies details of the Auto-Tune action. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
        public var autoTuneDetails: ElasticsearchClientTypes.AutoTuneDetails?
        /// Specifies Auto-Tune type. Valid value is SCHEDULED_ACTION.
        public var autoTuneType: ElasticsearchClientTypes.AutoTuneType?

        public init(
            autoTuneDetails: ElasticsearchClientTypes.AutoTuneDetails? = nil,
            autoTuneType: ElasticsearchClientTypes.AutoTuneType? = nil
        )
        {
            self.autoTuneDetails = autoTuneDetails
            self.autoTuneType = autoTuneType
        }
    }

}

/// The result of DescribeDomainAutoTunes request. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
public struct DescribeDomainAutoTunesOutput {
    /// Specifies the list of setting adjustments that Auto-Tune has made to the domain. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
    public var autoTunes: [ElasticsearchClientTypes.AutoTune]?
    /// Specifies an identifier to allow retrieval of paginated results.
    public var nextToken: Swift.String?

    public init(
        autoTunes: [ElasticsearchClientTypes.AutoTune]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoTunes = autoTunes
        self.nextToken = nextToken
    }
}

/// Container for the parameters to the DescribeDomainChangeProgress operation. Specifies the domain name and optional change specific identity for which you want progress information.
public struct DescribeDomainChangeProgressInput {
    /// The specific change ID for which you want to get progress information. This is an optional parameter. If omitted, the service returns information about the most recent configuration change.
    public var changeId: Swift.String?
    /// The domain you want to get the progress information about.
    /// This member is required.
    public var domainName: Swift.String?

    public init(
        changeId: Swift.String? = nil,
        domainName: Swift.String? = nil
    )
    {
        self.changeId = changeId
        self.domainName = domainName
    }
}

extension ElasticsearchClientTypes {
    /// A progress stage details of a specific domain configuration change.
    public struct ChangeProgressStage {
        /// The description of the progress stage.
        public var description: Swift.String?
        /// The last updated timestamp of the progress stage.
        public var lastUpdated: Foundation.Date?
        /// The name of the specific progress stage.
        public var name: Swift.String?
        /// The overall status of a specific progress stage.
        public var status: Swift.String?

        public init(
            description: Swift.String? = nil,
            lastUpdated: Foundation.Date? = nil,
            name: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.description = description
            self.lastUpdated = lastUpdated
            self.name = name
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {

    /// The overall status value of the domain configuration change.
    public enum OverallChangeStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case pending
        case processing
        case sdkUnknown(Swift.String)

        public static var allCases: [OverallChangeStatus] {
            return [
                .completed,
                .failed,
                .pending,
                .processing
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .processing: return "PROCESSING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// The progress details of a specific domain configuration change.
    public struct ChangeProgressStatusDetails {
        /// The unique change identifier associated with a specific domain configuration change.
        public var changeId: Swift.String?
        /// The specific stages that the domain is going through to perform the configuration change.
        public var changeProgressStages: [ElasticsearchClientTypes.ChangeProgressStage]?
        /// The list of properties involved in the domain configuration change that are completed.
        public var completedProperties: [Swift.String]?
        /// The current status of the configuration change.
        public var configChangeStatus: ElasticsearchClientTypes.ConfigChangeStatus?
        /// The IAM principal who initiated the configuration change.
        public var initiatedBy: ElasticsearchClientTypes.InitiatedBy?
        /// The last time that the status of the configuration change was updated.
        public var lastUpdatedTime: Foundation.Date?
        /// The list of properties involved in the domain configuration change that are still in pending.
        public var pendingProperties: [Swift.String]?
        /// The time at which the configuration change is made on the domain.
        public var startTime: Foundation.Date?
        /// The overall status of the domain configuration change. This field can take the following values: PENDING, PROCESSING, COMPLETED and FAILED
        public var status: ElasticsearchClientTypes.OverallChangeStatus?
        /// The total number of stages required for the configuration change.
        public var totalNumberOfStages: Swift.Int

        public init(
            changeId: Swift.String? = nil,
            changeProgressStages: [ElasticsearchClientTypes.ChangeProgressStage]? = nil,
            completedProperties: [Swift.String]? = nil,
            configChangeStatus: ElasticsearchClientTypes.ConfigChangeStatus? = nil,
            initiatedBy: ElasticsearchClientTypes.InitiatedBy? = nil,
            lastUpdatedTime: Foundation.Date? = nil,
            pendingProperties: [Swift.String]? = nil,
            startTime: Foundation.Date? = nil,
            status: ElasticsearchClientTypes.OverallChangeStatus? = nil,
            totalNumberOfStages: Swift.Int = 0
        )
        {
            self.changeId = changeId
            self.changeProgressStages = changeProgressStages
            self.completedProperties = completedProperties
            self.configChangeStatus = configChangeStatus
            self.initiatedBy = initiatedBy
            self.lastUpdatedTime = lastUpdatedTime
            self.pendingProperties = pendingProperties
            self.startTime = startTime
            self.status = status
            self.totalNumberOfStages = totalNumberOfStages
        }
    }

}

/// The result of a DescribeDomainChangeProgress request. Contains the progress information of the requested domain change.
public struct DescribeDomainChangeProgressOutput {
    /// Progress information for the configuration change that is requested in the DescribeDomainChangeProgress request.
    public var changeProgressStatus: ElasticsearchClientTypes.ChangeProgressStatusDetails?

    public init(
        changeProgressStatus: ElasticsearchClientTypes.ChangeProgressStatusDetails? = nil
    )
    {
        self.changeProgressStatus = changeProgressStatus
    }
}

/// Container for the parameters to the [DescribeElasticsearchDomain] operation.
public struct DescribeElasticsearchDomainInput {
    /// The name of the Elasticsearch domain for which you want information.
    /// This member is required.
    public var domainName: Swift.String?

    public init(
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

/// The result of a DescribeElasticsearchDomain request. Contains the status of the domain specified in the request.
public struct DescribeElasticsearchDomainOutput {
    /// The current status of the Elasticsearch domain.
    /// This member is required.
    public var domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus?

    public init(
        domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus? = nil
    )
    {
        self.domainStatus = domainStatus
    }
}

/// Container for the parameters to the DescribeElasticsearchDomainConfig operation. Specifies the domain name for which you want configuration information.
public struct DescribeElasticsearchDomainConfigInput {
    /// The Elasticsearch domain that you want to get information about.
    /// This member is required.
    public var domainName: Swift.String?

    public init(
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

extension ElasticsearchClientTypes {

    /// Specifies the rollback state while disabling Auto-Tune for the domain. Valid values are NO_ROLLBACK, DEFAULT_ROLLBACK.
    public enum RollbackOnDisable: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case defaultRollback
        case noRollback
        case sdkUnknown(Swift.String)

        public static var allCases: [RollbackOnDisable] {
            return [
                .defaultRollback,
                .noRollback
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .defaultRollback: return "DEFAULT_ROLLBACK"
            case .noRollback: return "NO_ROLLBACK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the Auto-Tune options: the Auto-Tune desired state for the domain, rollback state when disabling Auto-Tune options and list of maintenance schedules.
    public struct AutoTuneOptions {
        /// Specifies the Auto-Tune desired state. Valid values are ENABLED, DISABLED.
        public var desiredState: ElasticsearchClientTypes.AutoTuneDesiredState?
        /// Specifies list of maitenance schedules. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html) for more information.
        public var maintenanceSchedules: [ElasticsearchClientTypes.AutoTuneMaintenanceSchedule]?
        /// Specifies the rollback state while disabling Auto-Tune for the domain. Valid values are NO_ROLLBACK, DEFAULT_ROLLBACK.
        public var rollbackOnDisable: ElasticsearchClientTypes.RollbackOnDisable?

        public init(
            desiredState: ElasticsearchClientTypes.AutoTuneDesiredState? = nil,
            maintenanceSchedules: [ElasticsearchClientTypes.AutoTuneMaintenanceSchedule]? = nil,
            rollbackOnDisable: ElasticsearchClientTypes.RollbackOnDisable? = nil
        )
        {
            self.desiredState = desiredState
            self.maintenanceSchedules = maintenanceSchedules
            self.rollbackOnDisable = rollbackOnDisable
        }
    }

}

extension ElasticsearchClientTypes {
    /// Provides the current status of the Auto-Tune options.
    public struct AutoTuneStatus {
        /// Timestamp which tells Auto-Tune options creation date .
        /// This member is required.
        public var creationDate: Foundation.Date?
        /// Specifies the error message while enabling or disabling the Auto-Tune options.
        public var errorMessage: Swift.String?
        /// Indicates whether the Elasticsearch domain is being deleted.
        public var pendingDeletion: Swift.Bool?
        /// Specifies the AutoTuneState for the Elasticsearch domain.
        /// This member is required.
        public var state: ElasticsearchClientTypes.AutoTuneState?
        /// Timestamp which tells Auto-Tune options last updated time.
        /// This member is required.
        public var updateDate: Foundation.Date?
        /// Specifies the Auto-Tune options latest version.
        public var updateVersion: Swift.Int

        public init(
            creationDate: Foundation.Date? = nil,
            errorMessage: Swift.String? = nil,
            pendingDeletion: Swift.Bool? = nil,
            state: ElasticsearchClientTypes.AutoTuneState? = nil,
            updateDate: Foundation.Date? = nil,
            updateVersion: Swift.Int = 0
        )
        {
            self.creationDate = creationDate
            self.errorMessage = errorMessage
            self.pendingDeletion = pendingDeletion
            self.state = state
            self.updateDate = updateDate
            self.updateVersion = updateVersion
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies the status of Auto-Tune options for the specified Elasticsearch domain.
    public struct AutoTuneOptionsStatus {
        /// Specifies Auto-Tune options for the specified Elasticsearch domain.
        public var options: ElasticsearchClientTypes.AutoTuneOptions?
        /// Specifies Status of the Auto-Tune options for the specified Elasticsearch domain.
        public var status: ElasticsearchClientTypes.AutoTuneStatus?

        public init(
            options: ElasticsearchClientTypes.AutoTuneOptions? = nil,
            status: ElasticsearchClientTypes.AutoTuneStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {
    /// Status of the Cognito options for the specified Elasticsearch domain.
    public struct CognitoOptionsStatus {
        /// Specifies the Cognito options for the specified Elasticsearch domain.
        /// This member is required.
        public var options: ElasticsearchClientTypes.CognitoOptions?
        /// Specifies the status of the Cognito options for the specified Elasticsearch domain.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init(
            options: ElasticsearchClientTypes.CognitoOptions? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {
    /// The configured endpoint options for the domain and their current status.
    public struct DomainEndpointOptionsStatus {
        /// Options to configure endpoint for the Elasticsearch domain.
        /// This member is required.
        public var options: ElasticsearchClientTypes.DomainEndpointOptions?
        /// The status of the endpoint options for the Elasticsearch domain. See OptionStatus for the status information that's included.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init(
            options: ElasticsearchClientTypes.DomainEndpointOptions? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {
    /// Status of the EBS options for the specified Elasticsearch domain.
    public struct EBSOptionsStatus {
        /// Specifies the EBS options for the specified Elasticsearch domain.
        /// This member is required.
        public var options: ElasticsearchClientTypes.EBSOptions?
        /// Specifies the status of the EBS options for the specified Elasticsearch domain.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init(
            options: ElasticsearchClientTypes.EBSOptions? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies the configuration status for the specified Elasticsearch domain.
    public struct ElasticsearchClusterConfigStatus {
        /// Specifies the cluster configuration for the specified Elasticsearch domain.
        /// This member is required.
        public var options: ElasticsearchClientTypes.ElasticsearchClusterConfig?
        /// Specifies the status of the configuration for the specified Elasticsearch domain.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init(
            options: ElasticsearchClientTypes.ElasticsearchClusterConfig? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {
    /// Status of the Elasticsearch version options for the specified Elasticsearch domain.
    public struct ElasticsearchVersionStatus {
        /// Specifies the Elasticsearch version for the specified Elasticsearch domain.
        /// This member is required.
        public var options: Swift.String?
        /// Specifies the status of the Elasticsearch version options for the specified Elasticsearch domain.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init(
            options: Swift.String? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {
    /// Status of the Encryption At Rest options for the specified Elasticsearch domain.
    public struct EncryptionAtRestOptionsStatus {
        /// Specifies the Encryption At Rest options for the specified Elasticsearch domain.
        /// This member is required.
        public var options: ElasticsearchClientTypes.EncryptionAtRestOptions?
        /// Specifies the status of the Encryption At Rest options for the specified Elasticsearch domain.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init(
            options: ElasticsearchClientTypes.EncryptionAtRestOptions? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {
    /// The configured log publishing options for the domain and their current status.
    public struct LogPublishingOptionsStatus {
        /// The log publishing options configured for the Elasticsearch domain.
        public var options: [Swift.String: ElasticsearchClientTypes.LogPublishingOption]?
        /// The status of the log publishing options for the Elasticsearch domain. See OptionStatus for the status information that's included.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init(
            options: [Swift.String: ElasticsearchClientTypes.LogPublishingOption]? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {
    /// Status of the node-to-node encryption options for the specified Elasticsearch domain.
    public struct NodeToNodeEncryptionOptionsStatus {
        /// Specifies the node-to-node encryption options for the specified Elasticsearch domain.
        /// This member is required.
        public var options: ElasticsearchClientTypes.NodeToNodeEncryptionOptions?
        /// Specifies the status of the node-to-node encryption options for the specified Elasticsearch domain.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init(
            options: ElasticsearchClientTypes.NodeToNodeEncryptionOptions? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {
    /// Status of a daily automated snapshot.
    public struct SnapshotOptionsStatus {
        /// Specifies the daily snapshot options specified for the Elasticsearch domain.
        /// This member is required.
        public var options: ElasticsearchClientTypes.SnapshotOptions?
        /// Specifies the status of a daily automated snapshot.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init(
            options: ElasticsearchClientTypes.SnapshotOptions? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {
    /// Status of the VPC options for the specified Elasticsearch domain.
    public struct VPCDerivedInfoStatus {
        /// Specifies the VPC options for the specified Elasticsearch domain.
        /// This member is required.
        public var options: ElasticsearchClientTypes.VPCDerivedInfo?
        /// Specifies the status of the VPC options for the specified Elasticsearch domain.
        /// This member is required.
        public var status: ElasticsearchClientTypes.OptionStatus?

        public init(
            options: ElasticsearchClientTypes.VPCDerivedInfo? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {
    /// The configuration of an Elasticsearch domain.
    public struct ElasticsearchDomainConfig {
        /// IAM access policy as a JSON-formatted string.
        public var accessPolicies: ElasticsearchClientTypes.AccessPoliciesStatus?
        /// Specifies the AdvancedOptions for the domain. See [Configuring Advanced Options](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options) for more information.
        public var advancedOptions: ElasticsearchClientTypes.AdvancedOptionsStatus?
        /// Specifies AdvancedSecurityOptions for the domain.
        public var advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptionsStatus?
        /// Specifies AutoTuneOptions for the domain.
        public var autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptionsStatus?
        /// Specifies change details of the domain configuration change.
        public var changeProgressDetails: ElasticsearchClientTypes.ChangeProgressDetails?
        /// The CognitoOptions for the specified domain. For more information, see [Amazon Cognito Authentication for Kibana](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html).
        public var cognitoOptions: ElasticsearchClientTypes.CognitoOptionsStatus?
        /// Specifies the DomainEndpointOptions for the Elasticsearch domain.
        public var domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptionsStatus?
        /// Specifies the EBSOptions for the Elasticsearch domain.
        public var ebsOptions: ElasticsearchClientTypes.EBSOptionsStatus?
        /// Specifies the ElasticsearchClusterConfig for the Elasticsearch domain.
        public var elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfigStatus?
        /// String of format X.Y to specify version for the Elasticsearch domain.
        public var elasticsearchVersion: ElasticsearchClientTypes.ElasticsearchVersionStatus?
        /// Specifies the EncryptionAtRestOptions for the Elasticsearch domain.
        public var encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptionsStatus?
        /// Log publishing options for the given domain.
        public var logPublishingOptions: ElasticsearchClientTypes.LogPublishingOptionsStatus?
        /// Information about the domain properties that are currently being modified.
        public var modifyingProperties: [ElasticsearchClientTypes.ModifyingProperties]?
        /// Specifies the NodeToNodeEncryptionOptions for the Elasticsearch domain.
        public var nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptionsStatus?
        /// Specifies the SnapshotOptions for the Elasticsearch domain.
        public var snapshotOptions: ElasticsearchClientTypes.SnapshotOptionsStatus?
        /// The VPCOptions for the specified domain. For more information, see [VPC Endpoints for Amazon Elasticsearch Service Domains](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html).
        public var vpcOptions: ElasticsearchClientTypes.VPCDerivedInfoStatus?

        public init(
            accessPolicies: ElasticsearchClientTypes.AccessPoliciesStatus? = nil,
            advancedOptions: ElasticsearchClientTypes.AdvancedOptionsStatus? = nil,
            advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptionsStatus? = nil,
            autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptionsStatus? = nil,
            changeProgressDetails: ElasticsearchClientTypes.ChangeProgressDetails? = nil,
            cognitoOptions: ElasticsearchClientTypes.CognitoOptionsStatus? = nil,
            domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptionsStatus? = nil,
            ebsOptions: ElasticsearchClientTypes.EBSOptionsStatus? = nil,
            elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfigStatus? = nil,
            elasticsearchVersion: ElasticsearchClientTypes.ElasticsearchVersionStatus? = nil,
            encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptionsStatus? = nil,
            logPublishingOptions: ElasticsearchClientTypes.LogPublishingOptionsStatus? = nil,
            modifyingProperties: [ElasticsearchClientTypes.ModifyingProperties]? = nil,
            nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptionsStatus? = nil,
            snapshotOptions: ElasticsearchClientTypes.SnapshotOptionsStatus? = nil,
            vpcOptions: ElasticsearchClientTypes.VPCDerivedInfoStatus? = nil
        )
        {
            self.accessPolicies = accessPolicies
            self.advancedOptions = advancedOptions
            self.advancedSecurityOptions = advancedSecurityOptions
            self.autoTuneOptions = autoTuneOptions
            self.changeProgressDetails = changeProgressDetails
            self.cognitoOptions = cognitoOptions
            self.domainEndpointOptions = domainEndpointOptions
            self.ebsOptions = ebsOptions
            self.elasticsearchClusterConfig = elasticsearchClusterConfig
            self.elasticsearchVersion = elasticsearchVersion
            self.encryptionAtRestOptions = encryptionAtRestOptions
            self.logPublishingOptions = logPublishingOptions
            self.modifyingProperties = modifyingProperties
            self.nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions
            self.snapshotOptions = snapshotOptions
            self.vpcOptions = vpcOptions
        }
    }

}

/// The result of a DescribeElasticsearchDomainConfig request. Contains the configuration information of the requested domain.
public struct DescribeElasticsearchDomainConfigOutput {
    /// The configuration information of the domain requested in the DescribeElasticsearchDomainConfig request.
    /// This member is required.
    public var domainConfig: ElasticsearchClientTypes.ElasticsearchDomainConfig?

    public init(
        domainConfig: ElasticsearchClientTypes.ElasticsearchDomainConfig? = nil
    )
    {
        self.domainConfig = domainConfig
    }
}

/// Container for the parameters to the [DescribeElasticsearchDomains] operation. By default, the API returns the status of all Elasticsearch domains.
public struct DescribeElasticsearchDomainsInput {
    /// The Elasticsearch domains for which you want information.
    /// This member is required.
    public var domainNames: [Swift.String]?

    public init(
        domainNames: [Swift.String]? = nil
    )
    {
        self.domainNames = domainNames
    }
}

/// The result of a DescribeElasticsearchDomains request. Contains the status of the specified domains or all domains owned by the account.
public struct DescribeElasticsearchDomainsOutput {
    /// The status of the domains requested in the DescribeElasticsearchDomains request.
    /// This member is required.
    public var domainStatusList: [ElasticsearchClientTypes.ElasticsearchDomainStatus]?

    public init(
        domainStatusList: [ElasticsearchClientTypes.ElasticsearchDomainStatus]? = nil
    )
    {
        self.domainStatusList = domainStatusList
    }
}

/// Container for the parameters to [DescribeElasticsearchInstanceTypeLimits] operation.
public struct DescribeElasticsearchInstanceTypeLimitsInput {
    /// DomainName represents the name of the Domain that we are trying to modify. This should be present only if we are querying for Elasticsearch [Limits] for existing domain.
    public var domainName: Swift.String?
    /// Version of Elasticsearch for which [Limits] are needed.
    /// This member is required.
    public var elasticsearchVersion: Swift.String?
    /// The instance type for an Elasticsearch cluster for which Elasticsearch [Limits] are needed.
    /// This member is required.
    public var instanceType: ElasticsearchClientTypes.ESPartitionInstanceType?

    public init(
        domainName: Swift.String? = nil,
        elasticsearchVersion: Swift.String? = nil,
        instanceType: ElasticsearchClientTypes.ESPartitionInstanceType? = nil
    )
    {
        self.domainName = domainName
        self.elasticsearchVersion = elasticsearchVersion
        self.instanceType = instanceType
    }
}

extension ElasticsearchClientTypes {
    /// InstanceCountLimits represents the limits on number of instances that be created in Amazon Elasticsearch for given InstanceType.
    public struct InstanceCountLimits {
        /// Maximum number of Instances that can be instantiated for given InstanceType.
        public var maximumInstanceCount: Swift.Int
        /// Minimum number of Instances that can be instantiated for given InstanceType.
        public var minimumInstanceCount: Swift.Int

        public init(
            maximumInstanceCount: Swift.Int = 0,
            minimumInstanceCount: Swift.Int = 0
        )
        {
            self.maximumInstanceCount = maximumInstanceCount
            self.minimumInstanceCount = minimumInstanceCount
        }
    }

}

extension ElasticsearchClientTypes {
    /// InstanceLimits represents the list of instance related attributes that are available for given InstanceType.
    public struct InstanceLimits {
        /// InstanceCountLimits represents the limits on number of instances that be created in Amazon Elasticsearch for given InstanceType.
        public var instanceCountLimits: ElasticsearchClientTypes.InstanceCountLimits?

        public init(
            instanceCountLimits: ElasticsearchClientTypes.InstanceCountLimits? = nil
        )
        {
            self.instanceCountLimits = instanceCountLimits
        }
    }

}

extension ElasticsearchClientTypes {
    /// Limits that are applicable for given storage type.
    public struct StorageTypeLimit {
        /// Name of storage limits that are applicable for given storage type. If [StorageType] is ebs, following storage options are applicable
        ///
        /// * MinimumVolumeSize
        ///  Minimum amount of volume size that is applicable for given storage type.It can be empty if it is not applicable.
        /// * MaximumVolumeSize
        ///  Maximum amount of volume size that is applicable for given storage type.It can be empty if it is not applicable.
        /// * MaximumIops
        ///  Maximum amount of Iops that is applicable for given storage type.It can be empty if it is not applicable.
        /// * MinimumIops
        ///  Minimum amount of Iops that is applicable for given storage type.It can be empty if it is not applicable.
        /// * MaximumThroughput
        ///  Maximum amount of Throughput that is applicable for given storage type.It can be empty if it is not applicable.
        /// * MinimumThroughput
        ///  Minimum amount of Throughput that is applicable for given storage type.It can be empty if it is not applicable.
        public var limitName: Swift.String?
        /// Values for the [StorageTypeLimit$LimitName] .
        public var limitValues: [Swift.String]?

        public init(
            limitName: Swift.String? = nil,
            limitValues: [Swift.String]? = nil
        )
        {
            self.limitName = limitName
            self.limitValues = limitValues
        }
    }

}

extension ElasticsearchClientTypes {
    /// StorageTypes represents the list of storage related types and their attributes that are available for given InstanceType.
    public struct StorageType {
        /// SubType of the given storage type. List of available sub-storage options: For "instance" storageType we wont have any storageSubType, in case of "ebs" storageType we will have following valid storageSubTypes
        ///
        /// * standard
        ///
        /// * gp2
        ///
        /// * gp3
        ///
        /// * io1
        ///
        ///
        /// Refer [VolumeType] for more information regarding above EBS storage options.
        public var storageSubTypeName: Swift.String?
        /// List of limits that are applicable for given storage type.
        public var storageTypeLimits: [ElasticsearchClientTypes.StorageTypeLimit]?
        /// Type of the storage. List of available storage options:
        ///
        /// * instance
        ///  Inbuilt storage available for the given Instance
        /// * ebs
        ///  Elastic block storage that would be attached to the given Instance
        public var storageTypeName: Swift.String?

        public init(
            storageSubTypeName: Swift.String? = nil,
            storageTypeLimits: [ElasticsearchClientTypes.StorageTypeLimit]? = nil,
            storageTypeName: Swift.String? = nil
        )
        {
            self.storageSubTypeName = storageSubTypeName
            self.storageTypeLimits = storageTypeLimits
            self.storageTypeName = storageTypeName
        }
    }

}

extension ElasticsearchClientTypes {
    /// Limits for given InstanceType and for each of it's role.
    ///
    ///
    ///
    ///
    ///
    /// Limits contains following [StorageTypes,][InstanceLimits] and [AdditionalLimits]
    public struct Limits {
        /// List of additional limits that are specific to a given InstanceType and for each of it's [InstanceRole] .
        public var additionalLimits: [ElasticsearchClientTypes.AdditionalLimit]?
        /// InstanceLimits represents the list of instance related attributes that are available for given InstanceType.
        public var instanceLimits: ElasticsearchClientTypes.InstanceLimits?
        /// StorageType represents the list of storage related types and attributes that are available for given InstanceType.
        public var storageTypes: [ElasticsearchClientTypes.StorageType]?

        public init(
            additionalLimits: [ElasticsearchClientTypes.AdditionalLimit]? = nil,
            instanceLimits: ElasticsearchClientTypes.InstanceLimits? = nil,
            storageTypes: [ElasticsearchClientTypes.StorageType]? = nil
        )
        {
            self.additionalLimits = additionalLimits
            self.instanceLimits = instanceLimits
            self.storageTypes = storageTypes
        }
    }

}

/// Container for the parameters received from [DescribeElasticsearchInstanceTypeLimits] operation.
public struct DescribeElasticsearchInstanceTypeLimitsOutput {
    /// Map of Role of the Instance and Limits that are applicable. Role performed by given Instance in Elasticsearch can be one of the following:
    ///
    /// * data: If the given InstanceType is used as data node
    ///
    /// * master: If the given InstanceType is used as master node
    ///
    /// * ultra_warm: If the given InstanceType is used as warm node
    public var limitsByRole: [Swift.String: ElasticsearchClientTypes.Limits]?

    public init(
        limitsByRole: [Swift.String: ElasticsearchClientTypes.Limits]? = nil
    )
    {
        self.limitsByRole = limitsByRole
    }
}

/// The request processing has failed because of invalid pagination token provided by customer. Returns an HTTP status code of 400.
public struct InvalidPaginationTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A description of the error.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidPaginationTokenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticsearchClientTypes {
    /// A filter used to limit results when describing inbound or outbound cross-cluster search connections. Multiple values can be specified per filter. A cross-cluster search connection must match at least one of the specified values for it to be returned from an operation.
    public struct Filter {
        /// Specifies the name of the filter.
        public var name: Swift.String?
        /// Contains one or more values for the filter.
        public var values: [Swift.String]?

        public init(
            name: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

/// Container for the parameters to the [DescribeInboundCrossClusterSearchConnections] operation.
public struct DescribeInboundCrossClusterSearchConnectionsInput {
    /// A list of filters used to match properties for inbound cross-cluster search connection. Available [Filter] names for this operation are:
    ///
    /// * cross-cluster-search-connection-id
    ///
    /// * source-domain-info.domain-name
    ///
    /// * source-domain-info.owner-id
    ///
    /// * source-domain-info.region
    ///
    /// * destination-domain-info.domain-name
    public var filters: [ElasticsearchClientTypes.Filter]?
    /// Set this value to limit the number of results returned. If not specified, defaults to 100.
    public var maxResults: Swift.Int?
    /// NextToken is sent in case the earlier API call results contain the NextToken. It is used for pagination.
    public var nextToken: Swift.String?

    public init(
        filters: [ElasticsearchClientTypes.Filter]? = nil,
        maxResults: Swift.Int? = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

/// The result of a [DescribeInboundCrossClusterSearchConnections] request. Contains the list of connections matching the filter criteria.
public struct DescribeInboundCrossClusterSearchConnectionsOutput {
    /// Consists of list of [InboundCrossClusterSearchConnection] matching the specified filter criteria.
    public var crossClusterSearchConnections: [ElasticsearchClientTypes.InboundCrossClusterSearchConnection]?
    /// If more results are available and NextToken is present, make the next request to the same API with the received NextToken to paginate the remaining results.
    public var nextToken: Swift.String?

    public init(
        crossClusterSearchConnections: [ElasticsearchClientTypes.InboundCrossClusterSearchConnection]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.crossClusterSearchConnections = crossClusterSearchConnections
        self.nextToken = nextToken
    }
}

/// Container for the parameters to the [DescribeOutboundCrossClusterSearchConnections] operation.
public struct DescribeOutboundCrossClusterSearchConnectionsInput {
    /// A list of filters used to match properties for outbound cross-cluster search connection. Available [Filter] names for this operation are:
    ///
    /// * cross-cluster-search-connection-id
    ///
    /// * destination-domain-info.domain-name
    ///
    /// * destination-domain-info.owner-id
    ///
    /// * destination-domain-info.region
    ///
    /// * source-domain-info.domain-name
    public var filters: [ElasticsearchClientTypes.Filter]?
    /// Set this value to limit the number of results returned. If not specified, defaults to 100.
    public var maxResults: Swift.Int?
    /// NextToken is sent in case the earlier API call results contain the NextToken. It is used for pagination.
    public var nextToken: Swift.String?

    public init(
        filters: [ElasticsearchClientTypes.Filter]? = nil,
        maxResults: Swift.Int? = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

/// The result of a [DescribeOutboundCrossClusterSearchConnections] request. Contains the list of connections matching the filter criteria.
public struct DescribeOutboundCrossClusterSearchConnectionsOutput {
    /// Consists of list of [OutboundCrossClusterSearchConnection] matching the specified filter criteria.
    public var crossClusterSearchConnections: [ElasticsearchClientTypes.OutboundCrossClusterSearchConnection]?
    /// If more results are available and NextToken is present, make the next request to the same API with the received NextToken to paginate the remaining results.
    public var nextToken: Swift.String?

    public init(
        crossClusterSearchConnections: [ElasticsearchClientTypes.OutboundCrossClusterSearchConnection]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.crossClusterSearchConnections = crossClusterSearchConnections
        self.nextToken = nextToken
    }
}

extension ElasticsearchClientTypes {

    public enum DescribePackagesFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case packageid
        case packagename
        case packagestatus
        case sdkUnknown(Swift.String)

        public static var allCases: [DescribePackagesFilterName] {
            return [
                .packageid,
                .packagename,
                .packagestatus
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .packageid: return "PackageID"
            case .packagename: return "PackageName"
            case .packagestatus: return "PackageStatus"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// Filter to apply in DescribePackage response.
    public struct DescribePackagesFilter {
        /// Any field from PackageDetails.
        public var name: ElasticsearchClientTypes.DescribePackagesFilterName?
        /// A non-empty list of values for the specified field.
        public var value: [Swift.String]?

        public init(
            name: ElasticsearchClientTypes.DescribePackagesFilterName? = nil,
            value: [Swift.String]? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

/// Container for request parameters to [DescribePackage] operation.
public struct DescribePackagesInput {
    /// Only returns packages that match the DescribePackagesFilterList values.
    public var filters: [ElasticsearchClientTypes.DescribePackagesFilter]?
    /// Limits results to a maximum number of packages.
    public var maxResults: Swift.Int?
    /// Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.
    public var nextToken: Swift.String?

    public init(
        filters: [ElasticsearchClientTypes.DescribePackagesFilter]? = nil,
        maxResults: Swift.Int? = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

/// Container for response returned by [DescribePackages] operation.
public struct DescribePackagesOutput {
    public var nextToken: Swift.String?
    /// List of PackageDetails objects.
    public var packageDetailsList: [ElasticsearchClientTypes.PackageDetails]?

    public init(
        nextToken: Swift.String? = nil,
        packageDetailsList: [ElasticsearchClientTypes.PackageDetails]? = nil
    )
    {
        self.nextToken = nextToken
        self.packageDetailsList = packageDetailsList
    }
}

/// Container for parameters to DescribeReservedElasticsearchInstanceOfferings
public struct DescribeReservedElasticsearchInstanceOfferingsInput {
    /// Set this value to limit the number of results returned. If not specified, defaults to 100.
    public var maxResults: Swift.Int?
    /// NextToken should be sent in case if earlier API call produced result containing NextToken. It is used for pagination.
    public var nextToken: Swift.String?
    /// The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.
    public var reservedElasticsearchInstanceOfferingId: Swift.String?

    public init(
        maxResults: Swift.Int? = 0,
        nextToken: Swift.String? = nil,
        reservedElasticsearchInstanceOfferingId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId
    }
}

extension ElasticsearchClientTypes {

    public enum ReservedElasticsearchInstancePaymentOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allUpfront
        case noUpfront
        case partialUpfront
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservedElasticsearchInstancePaymentOption] {
            return [
                .allUpfront,
                .noUpfront,
                .partialUpfront
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allUpfront: return "ALL_UPFRONT"
            case .noUpfront: return "NO_UPFRONT"
            case .partialUpfront: return "PARTIAL_UPFRONT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// Contains the specific price and frequency of a recurring charges for a reserved Elasticsearch instance, or for a reserved Elasticsearch instance offering.
    public struct RecurringCharge {
        /// The monetary amount of the recurring charge.
        public var recurringChargeAmount: Swift.Double?
        /// The frequency of the recurring charge.
        public var recurringChargeFrequency: Swift.String?

        public init(
            recurringChargeAmount: Swift.Double? = nil,
            recurringChargeFrequency: Swift.String? = nil
        )
        {
            self.recurringChargeAmount = recurringChargeAmount
            self.recurringChargeFrequency = recurringChargeFrequency
        }
    }

}

extension ElasticsearchClientTypes {
    /// Details of a reserved Elasticsearch instance offering.
    public struct ReservedElasticsearchInstanceOffering {
        /// The currency code for the reserved Elasticsearch instance offering.
        public var currencyCode: Swift.String?
        /// The duration, in seconds, for which the offering will reserve the Elasticsearch instance.
        public var duration: Swift.Int
        /// The Elasticsearch instance type offered by the reserved instance offering.
        public var elasticsearchInstanceType: ElasticsearchClientTypes.ESPartitionInstanceType?
        /// The upfront fixed charge you will pay to purchase the specific reserved Elasticsearch instance offering.
        public var fixedPrice: Swift.Double?
        /// Payment option for the reserved Elasticsearch instance offering
        public var paymentOption: ElasticsearchClientTypes.ReservedElasticsearchInstancePaymentOption?
        /// The charge to your account regardless of whether you are creating any domains using the instance offering.
        public var recurringCharges: [ElasticsearchClientTypes.RecurringCharge]?
        /// The Elasticsearch reserved instance offering identifier.
        public var reservedElasticsearchInstanceOfferingId: Swift.String?
        /// The rate you are charged for each hour the domain that is using the offering is running.
        public var usagePrice: Swift.Double?

        public init(
            currencyCode: Swift.String? = nil,
            duration: Swift.Int = 0,
            elasticsearchInstanceType: ElasticsearchClientTypes.ESPartitionInstanceType? = nil,
            fixedPrice: Swift.Double? = nil,
            paymentOption: ElasticsearchClientTypes.ReservedElasticsearchInstancePaymentOption? = nil,
            recurringCharges: [ElasticsearchClientTypes.RecurringCharge]? = nil,
            reservedElasticsearchInstanceOfferingId: Swift.String? = nil,
            usagePrice: Swift.Double? = nil
        )
        {
            self.currencyCode = currencyCode
            self.duration = duration
            self.elasticsearchInstanceType = elasticsearchInstanceType
            self.fixedPrice = fixedPrice
            self.paymentOption = paymentOption
            self.recurringCharges = recurringCharges
            self.reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId
            self.usagePrice = usagePrice
        }
    }

}

/// Container for results from DescribeReservedElasticsearchInstanceOfferings
public struct DescribeReservedElasticsearchInstanceOfferingsOutput {
    /// Provides an identifier to allow retrieval of paginated results.
    public var nextToken: Swift.String?
    /// List of reserved Elasticsearch instance offerings
    public var reservedElasticsearchInstanceOfferings: [ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering]?

    public init(
        nextToken: Swift.String? = nil,
        reservedElasticsearchInstanceOfferings: [ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering]? = nil
    )
    {
        self.nextToken = nextToken
        self.reservedElasticsearchInstanceOfferings = reservedElasticsearchInstanceOfferings
    }
}

/// Container for parameters to DescribeReservedElasticsearchInstances
public struct DescribeReservedElasticsearchInstancesInput {
    /// Set this value to limit the number of results returned. If not specified, defaults to 100.
    public var maxResults: Swift.Int?
    /// NextToken should be sent in case if earlier API call produced result containing NextToken. It is used for pagination.
    public var nextToken: Swift.String?
    /// The reserved instance identifier filter value. Use this parameter to show only the reservation that matches the specified reserved Elasticsearch instance ID.
    public var reservedElasticsearchInstanceId: Swift.String?

    public init(
        maxResults: Swift.Int? = 0,
        nextToken: Swift.String? = nil,
        reservedElasticsearchInstanceId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.reservedElasticsearchInstanceId = reservedElasticsearchInstanceId
    }
}

extension ElasticsearchClientTypes {
    /// Details of a reserved Elasticsearch instance.
    public struct ReservedElasticsearchInstance {
        /// The currency code for the reserved Elasticsearch instance offering.
        public var currencyCode: Swift.String?
        /// The duration, in seconds, for which the Elasticsearch instance is reserved.
        public var duration: Swift.Int
        /// The number of Elasticsearch instances that have been reserved.
        public var elasticsearchInstanceCount: Swift.Int
        /// The Elasticsearch instance type offered by the reserved instance offering.
        public var elasticsearchInstanceType: ElasticsearchClientTypes.ESPartitionInstanceType?
        /// The upfront fixed charge you will paid to purchase the specific reserved Elasticsearch instance offering.
        public var fixedPrice: Swift.Double?
        /// The payment option as defined in the reserved Elasticsearch instance offering.
        public var paymentOption: ElasticsearchClientTypes.ReservedElasticsearchInstancePaymentOption?
        /// The charge to your account regardless of whether you are creating any domains using the instance offering.
        public var recurringCharges: [ElasticsearchClientTypes.RecurringCharge]?
        /// The customer-specified identifier to track this reservation.
        public var reservationName: Swift.String?
        /// The unique identifier for the reservation.
        public var reservedElasticsearchInstanceId: Swift.String?
        /// The offering identifier.
        public var reservedElasticsearchInstanceOfferingId: Swift.String?
        /// The time the reservation started.
        public var startTime: Foundation.Date?
        /// The state of the reserved Elasticsearch instance.
        public var state: Swift.String?
        /// The rate you are charged for each hour for the domain that is using this reserved instance.
        public var usagePrice: Swift.Double?

        public init(
            currencyCode: Swift.String? = nil,
            duration: Swift.Int = 0,
            elasticsearchInstanceCount: Swift.Int = 0,
            elasticsearchInstanceType: ElasticsearchClientTypes.ESPartitionInstanceType? = nil,
            fixedPrice: Swift.Double? = nil,
            paymentOption: ElasticsearchClientTypes.ReservedElasticsearchInstancePaymentOption? = nil,
            recurringCharges: [ElasticsearchClientTypes.RecurringCharge]? = nil,
            reservationName: Swift.String? = nil,
            reservedElasticsearchInstanceId: Swift.String? = nil,
            reservedElasticsearchInstanceOfferingId: Swift.String? = nil,
            startTime: Foundation.Date? = nil,
            state: Swift.String? = nil,
            usagePrice: Swift.Double? = nil
        )
        {
            self.currencyCode = currencyCode
            self.duration = duration
            self.elasticsearchInstanceCount = elasticsearchInstanceCount
            self.elasticsearchInstanceType = elasticsearchInstanceType
            self.fixedPrice = fixedPrice
            self.paymentOption = paymentOption
            self.recurringCharges = recurringCharges
            self.reservationName = reservationName
            self.reservedElasticsearchInstanceId = reservedElasticsearchInstanceId
            self.reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId
            self.startTime = startTime
            self.state = state
            self.usagePrice = usagePrice
        }
    }

}

/// Container for results from DescribeReservedElasticsearchInstances
public struct DescribeReservedElasticsearchInstancesOutput {
    /// Provides an identifier to allow retrieval of paginated results.
    public var nextToken: Swift.String?
    /// List of reserved Elasticsearch instances.
    public var reservedElasticsearchInstances: [ElasticsearchClientTypes.ReservedElasticsearchInstance]?

    public init(
        nextToken: Swift.String? = nil,
        reservedElasticsearchInstances: [ElasticsearchClientTypes.ReservedElasticsearchInstance]? = nil
    )
    {
        self.nextToken = nextToken
        self.reservedElasticsearchInstances = reservedElasticsearchInstances
    }
}

/// Container for request parameters to the [DescribeVpcEndpoints] operation. Specifies the list of VPC endpoints to be described.
public struct DescribeVpcEndpointsInput {
    /// The unique identifiers of the endpoints to get information about.
    /// This member is required.
    public var vpcEndpointIds: [Swift.String]?

    public init(
        vpcEndpointIds: [Swift.String]? = nil
    )
    {
        self.vpcEndpointIds = vpcEndpointIds
    }
}

extension ElasticsearchClientTypes {

    /// Specifies the error code of the failure encountered while describing the VPC endpoint:
    ///
    /// * ENDPOINT_NOT_FOUND: Indicates that the requested VPC endpoint does not exist.
    ///
    /// * SERVER_ERROR: Indicates the describe endpoint operation failed due to an internal server error.
    public enum VpcEndpointErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case endpointNotFound
        case serverError
        case sdkUnknown(Swift.String)

        public static var allCases: [VpcEndpointErrorCode] {
            return [
                .endpointNotFound,
                .serverError
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .endpointNotFound: return "ENDPOINT_NOT_FOUND"
            case .serverError: return "SERVER_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// Error information when attempting to describe an Amazon OpenSearch Service-managed VPC endpoint.
    public struct VpcEndpointError {
        /// The code associated with the error.
        public var errorCode: ElasticsearchClientTypes.VpcEndpointErrorCode?
        /// A message describing the error.
        public var errorMessage: Swift.String?
        /// The unique identifier of the endpoint.
        public var vpcEndpointId: Swift.String?

        public init(
            errorCode: ElasticsearchClientTypes.VpcEndpointErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            vpcEndpointId: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.vpcEndpointId = vpcEndpointId
        }
    }

}

/// Container for response parameters to the [DescribeVpcEndpoints] operation. Returns a list containing configuration details and status of the VPC Endpoints as well as a list containing error responses of the endpoints that could not be described
public struct DescribeVpcEndpointsOutput {
    /// Any errors associated with the request.
    /// This member is required.
    public var vpcEndpointErrors: [ElasticsearchClientTypes.VpcEndpointError]?
    /// Information about each requested VPC endpoint.
    /// This member is required.
    public var vpcEndpoints: [ElasticsearchClientTypes.VpcEndpoint]?

    public init(
        vpcEndpointErrors: [ElasticsearchClientTypes.VpcEndpointError]? = nil,
        vpcEndpoints: [ElasticsearchClientTypes.VpcEndpoint]? = nil
    )
    {
        self.vpcEndpointErrors = vpcEndpointErrors
        self.vpcEndpoints = vpcEndpoints
    }
}

/// Container for request parameters to [DissociatePackage] operation.
public struct DissociatePackageInput {
    /// Name of the domain that you want to associate the package with.
    /// This member is required.
    public var domainName: Swift.String?
    /// Internal ID of the package that you want to associate with a domain. Use DescribePackages to find this value.
    /// This member is required.
    public var packageID: Swift.String?

    public init(
        domainName: Swift.String? = nil,
        packageID: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.packageID = packageID
    }
}

/// Container for response returned by [DissociatePackage] operation.
public struct DissociatePackageOutput {
    ///     DomainPackageDetails
    public var domainPackageDetails: ElasticsearchClientTypes.DomainPackageDetails?

    public init(
        domainPackageDetails: ElasticsearchClientTypes.DomainPackageDetails? = nil
    )
    {
        self.domainPackageDetails = domainPackageDetails
    }
}

/// Container for request parameters to [GetCompatibleElasticsearchVersions] operation.
public struct GetCompatibleElasticsearchVersionsInput {
    /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
    public var domainName: Swift.String?

    public init(
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

extension ElasticsearchClientTypes {
    /// A map from an [ElasticsearchVersion] to a list of compatible [ElasticsearchVersion] s to which the domain can be upgraded.
    public struct CompatibleVersionsMap {
        /// The current version of Elasticsearch on which a domain is.
        public var sourceVersion: Swift.String?
        /// List of supported elastic search versions.
        public var targetVersions: [Swift.String]?

        public init(
            sourceVersion: Swift.String? = nil,
            targetVersions: [Swift.String]? = nil
        )
        {
            self.sourceVersion = sourceVersion
            self.targetVersions = targetVersions
        }
    }

}

/// Container for response returned by [GetCompatibleElasticsearchVersions] operation.
public struct GetCompatibleElasticsearchVersionsOutput {
    /// A map of compatible Elasticsearch versions returned as part of the [GetCompatibleElasticsearchVersions] operation.
    public var compatibleElasticsearchVersions: [ElasticsearchClientTypes.CompatibleVersionsMap]?

    public init(
        compatibleElasticsearchVersions: [ElasticsearchClientTypes.CompatibleVersionsMap]? = nil
    )
    {
        self.compatibleElasticsearchVersions = compatibleElasticsearchVersions
    }
}

/// Container for request parameters to [GetPackageVersionHistory] operation.
public struct GetPackageVersionHistoryInput {
    /// Limits results to a maximum number of versions.
    public var maxResults: Swift.Int?
    /// Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.
    public var nextToken: Swift.String?
    /// Returns an audit history of versions of the package.
    /// This member is required.
    public var packageID: Swift.String?

    public init(
        maxResults: Swift.Int? = 0,
        nextToken: Swift.String? = nil,
        packageID: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.packageID = packageID
    }
}

extension ElasticsearchClientTypes {
    /// Details of a package version.
    public struct PackageVersionHistory {
        /// A message associated with the version.
        public var commitMessage: Swift.String?
        /// Timestamp which tells creation time of the package version.
        public var createdAt: Foundation.Date?
        /// Version of the package.
        public var packageVersion: Swift.String?

        public init(
            commitMessage: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            packageVersion: Swift.String? = nil
        )
        {
            self.commitMessage = commitMessage
            self.createdAt = createdAt
            self.packageVersion = packageVersion
        }
    }

}

/// Container for response returned by [GetPackageVersionHistory] operation.
public struct GetPackageVersionHistoryOutput {
    public var nextToken: Swift.String?
    public var packageID: Swift.String?
    /// List of PackageVersionHistory objects.
    public var packageVersionHistoryList: [ElasticsearchClientTypes.PackageVersionHistory]?

    public init(
        nextToken: Swift.String? = nil,
        packageID: Swift.String? = nil,
        packageVersionHistoryList: [ElasticsearchClientTypes.PackageVersionHistory]? = nil
    )
    {
        self.nextToken = nextToken
        self.packageID = packageID
        self.packageVersionHistoryList = packageVersionHistoryList
    }
}

/// Container for request parameters to [GetUpgradeHistory] operation.
public struct GetUpgradeHistoryInput {
    /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
    /// This member is required.
    public var domainName: Swift.String?
    /// Set this value to limit the number of results returned.
    public var maxResults: Swift.Int?
    /// Paginated APIs accepts NextToken input to returns next page results and provides a NextToken output in the response which can be used by the client to retrieve more results.
    public var nextToken: Swift.String?

    public init(
        domainName: Swift.String? = nil,
        maxResults: Swift.Int? = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ElasticsearchClientTypes {

    public enum UpgradeStep: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case preUpgradeCheck
        case snapshot
        case upgrade
        case sdkUnknown(Swift.String)

        public static var allCases: [UpgradeStep] {
            return [
                .preUpgradeCheck,
                .snapshot,
                .upgrade
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .preUpgradeCheck: return "PRE_UPGRADE_CHECK"
            case .snapshot: return "SNAPSHOT"
            case .upgrade: return "UPGRADE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {

    public enum UpgradeStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inProgress
        case succeeded
        case succeededWithIssues
        case sdkUnknown(Swift.String)

        public static var allCases: [UpgradeStatus] {
            return [
                .failed,
                .inProgress,
                .succeeded,
                .succeededWithIssues
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .succeeded: return "SUCCEEDED"
            case .succeededWithIssues: return "SUCCEEDED_WITH_ISSUES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticsearchClientTypes {
    /// Represents a single step of the Upgrade or Upgrade Eligibility Check workflow.
    public struct UpgradeStepItem {
        /// A list of strings containing detailed information about the errors encountered in a particular step.
        public var issues: [Swift.String]?
        /// The Floating point value representing progress percentage of a particular step.
        public var progressPercent: Swift.Double?
        /// Represents one of 3 steps that an Upgrade or Upgrade Eligibility Check does through:
        ///
        /// * PreUpgradeCheck
        ///
        /// * Snapshot
        ///
        /// * Upgrade
        public var upgradeStep: ElasticsearchClientTypes.UpgradeStep?
        /// The status of a particular step during an upgrade. The status can take one of the following values:
        ///
        /// * In Progress
        ///
        /// * Succeeded
        ///
        /// * Succeeded with Issues
        ///
        /// * Failed
        public var upgradeStepStatus: ElasticsearchClientTypes.UpgradeStatus?

        public init(
            issues: [Swift.String]? = nil,
            progressPercent: Swift.Double? = nil,
            upgradeStep: ElasticsearchClientTypes.UpgradeStep? = nil,
            upgradeStepStatus: ElasticsearchClientTypes.UpgradeStatus? = nil
        )
        {
            self.issues = issues
            self.progressPercent = progressPercent
            self.upgradeStep = upgradeStep
            self.upgradeStepStatus = upgradeStepStatus
        }
    }

}

extension ElasticsearchClientTypes {
    /// History of the last 10 Upgrades and Upgrade Eligibility Checks.
    public struct UpgradeHistory {
        /// UTC Timestamp at which the Upgrade API call was made in "yyyy-MM-ddTHH:mm:ssZ" format.
        public var startTimestamp: Foundation.Date?
        /// A list of [UpgradeStepItem] s representing information about each step performed as pard of a specific Upgrade or Upgrade Eligibility Check.
        public var stepsList: [ElasticsearchClientTypes.UpgradeStepItem]?
        /// A string that describes the update briefly
        public var upgradeName: Swift.String?
        /// The overall status of the update. The status can take one of the following values:
        ///
        /// * In Progress
        ///
        /// * Succeeded
        ///
        /// * Succeeded with Issues
        ///
        /// * Failed
        public var upgradeStatus: ElasticsearchClientTypes.UpgradeStatus?

        public init(
            startTimestamp: Foundation.Date? = nil,
            stepsList: [ElasticsearchClientTypes.UpgradeStepItem]? = nil,
            upgradeName: Swift.String? = nil,
            upgradeStatus: ElasticsearchClientTypes.UpgradeStatus? = nil
        )
        {
            self.startTimestamp = startTimestamp
            self.stepsList = stepsList
            self.upgradeName = upgradeName
            self.upgradeStatus = upgradeStatus
        }
    }

}

/// Container for response returned by [GetUpgradeHistory] operation.
public struct GetUpgradeHistoryOutput {
    /// Pagination token that needs to be supplied to the next call to get the next page of results
    public var nextToken: Swift.String?
    /// A list of [UpgradeHistory] objects corresponding to each Upgrade or Upgrade Eligibility Check performed on a domain returned as part of [GetUpgradeHistoryResponse] object.
    public var upgradeHistories: [ElasticsearchClientTypes.UpgradeHistory]?

    public init(
        nextToken: Swift.String? = nil,
        upgradeHistories: [ElasticsearchClientTypes.UpgradeHistory]? = nil
    )
    {
        self.nextToken = nextToken
        self.upgradeHistories = upgradeHistories
    }
}

/// Container for request parameters to [GetUpgradeStatus] operation.
public struct GetUpgradeStatusInput {
    /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
    /// This member is required.
    public var domainName: Swift.String?

    public init(
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

/// Container for response returned by [GetUpgradeStatus] operation.
public struct GetUpgradeStatusOutput {
    /// One of 4 statuses that a step can go through returned as part of the [GetUpgradeStatusResponse] object. The status can take one of the following values:
    ///
    /// * In Progress
    ///
    /// * Succeeded
    ///
    /// * Succeeded with Issues
    ///
    /// * Failed
    public var stepStatus: ElasticsearchClientTypes.UpgradeStatus?
    /// A string that describes the update briefly
    public var upgradeName: Swift.String?
    /// Represents one of 3 steps that an Upgrade or Upgrade Eligibility Check does through:
    ///
    /// * PreUpgradeCheck
    ///
    /// * Snapshot
    ///
    /// * Upgrade
    public var upgradeStep: ElasticsearchClientTypes.UpgradeStep?

    public init(
        stepStatus: ElasticsearchClientTypes.UpgradeStatus? = nil,
        upgradeName: Swift.String? = nil,
        upgradeStep: ElasticsearchClientTypes.UpgradeStep? = nil
    )
    {
        self.stepStatus = stepStatus
        self.upgradeName = upgradeName
        self.upgradeStep = upgradeStep
    }
}

extension ElasticsearchClientTypes {

    public enum EngineType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case elasticsearch
        case opensearch
        case sdkUnknown(Swift.String)

        public static var allCases: [EngineType] {
            return [
                .elasticsearch,
                .opensearch
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .elasticsearch: return "Elasticsearch"
            case .opensearch: return "OpenSearch"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Container for the parameters to the [ListDomainNames] operation.
public struct ListDomainNamesInput {
    /// Optional parameter to filter the output by domain engine type. Acceptable values are 'Elasticsearch' and 'OpenSearch'.
    public var engineType: ElasticsearchClientTypes.EngineType?

    public init(
        engineType: ElasticsearchClientTypes.EngineType? = nil
    )
    {
        self.engineType = engineType
    }
}

extension ElasticsearchClientTypes {
    public struct DomainInfo {
        /// Specifies the DomainName.
        public var domainName: Swift.String?
        /// Specifies the EngineType of the domain.
        public var engineType: ElasticsearchClientTypes.EngineType?

        public init(
            domainName: Swift.String? = nil,
            engineType: ElasticsearchClientTypes.EngineType? = nil
        )
        {
            self.domainName = domainName
            self.engineType = engineType
        }
    }

}

/// The result of a ListDomainNames operation. Contains the names of all domains owned by this account and their respective engine types.
public struct ListDomainNamesOutput {
    /// List of domain names and respective engine types.
    public var domainNames: [ElasticsearchClientTypes.DomainInfo]?

    public init(
        domainNames: [ElasticsearchClientTypes.DomainInfo]? = nil
    )
    {
        self.domainNames = domainNames
    }
}

/// Container for request parameters to [ListDomainsForPackage] operation.
public struct ListDomainsForPackageInput {
    /// Limits results to a maximum number of domains.
    public var maxResults: Swift.Int?
    /// Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.
    public var nextToken: Swift.String?
    /// The package for which to list domains.
    /// This member is required.
    public var packageID: Swift.String?

    public init(
        maxResults: Swift.Int? = 0,
        nextToken: Swift.String? = nil,
        packageID: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.packageID = packageID
    }
}

/// Container for response parameters to [ListDomainsForPackage] operation.
public struct ListDomainsForPackageOutput {
    /// List of DomainPackageDetails objects.
    public var domainPackageDetailsList: [ElasticsearchClientTypes.DomainPackageDetails]?
    public var nextToken: Swift.String?

    public init(
        domainPackageDetailsList: [ElasticsearchClientTypes.DomainPackageDetails]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainPackageDetailsList = domainPackageDetailsList
        self.nextToken = nextToken
    }
}

/// Container for the parameters to the [ListElasticsearchInstanceTypes] operation.
public struct ListElasticsearchInstanceTypesInput {
    /// DomainName represents the name of the Domain that we are trying to modify. This should be present only if we are querying for list of available Elasticsearch instance types when modifying existing domain.
    public var domainName: Swift.String?
    /// Version of Elasticsearch for which list of supported elasticsearch instance types are needed.
    /// This member is required.
    public var elasticsearchVersion: Swift.String?
    /// Set this value to limit the number of results returned. Value provided must be greater than 30 else it wont be honored.
    public var maxResults: Swift.Int?
    /// NextToken should be sent in case if earlier API call produced result containing NextToken. It is used for pagination.
    public var nextToken: Swift.String?

    public init(
        domainName: Swift.String? = nil,
        elasticsearchVersion: Swift.String? = nil,
        maxResults: Swift.Int? = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.elasticsearchVersion = elasticsearchVersion
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

/// Container for the parameters returned by [ListElasticsearchInstanceTypes] operation.
public struct ListElasticsearchInstanceTypesOutput {
    /// List of instance types supported by Amazon Elasticsearch service for given [ElasticsearchVersion]
    public var elasticsearchInstanceTypes: [ElasticsearchClientTypes.ESPartitionInstanceType]?
    /// In case if there are more results available NextToken would be present, make further request to the same API with received NextToken to paginate remaining results.
    public var nextToken: Swift.String?

    public init(
        elasticsearchInstanceTypes: [ElasticsearchClientTypes.ESPartitionInstanceType]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.elasticsearchInstanceTypes = elasticsearchInstanceTypes
        self.nextToken = nextToken
    }
}

/// Container for the parameters to the [ListElasticsearchVersions] operation. Use [MaxResults] to control the maximum number of results to retrieve in a single call. Use [NextToken] in response to retrieve more results. If the received response does not contain a NextToken, then there are no more results to retrieve.
public struct ListElasticsearchVersionsInput {
    /// Set this value to limit the number of results returned. Value provided must be greater than 10 else it wont be honored.
    public var maxResults: Swift.Int?
    /// Paginated APIs accepts NextToken input to returns next page results and provides a NextToken output in the response which can be used by the client to retrieve more results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

/// Container for the parameters for response received from [ListElasticsearchVersions] operation.
public struct ListElasticsearchVersionsOutput {
    /// List of supported elastic search versions.
    public var elasticsearchVersions: [Swift.String]?
    /// Paginated APIs accepts NextToken input to returns next page results and provides a NextToken output in the response which can be used by the client to retrieve more results.
    public var nextToken: Swift.String?

    public init(
        elasticsearchVersions: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.elasticsearchVersions = elasticsearchVersions
        self.nextToken = nextToken
    }
}

/// Container for request parameters to [ListPackagesForDomain] operation.
public struct ListPackagesForDomainInput {
    /// The name of the domain for which you want to list associated packages.
    /// This member is required.
    public var domainName: Swift.String?
    /// Limits results to a maximum number of packages.
    public var maxResults: Swift.Int?
    /// Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.
    public var nextToken: Swift.String?

    public init(
        domainName: Swift.String? = nil,
        maxResults: Swift.Int? = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

/// Container for response parameters to [ListPackagesForDomain] operation.
public struct ListPackagesForDomainOutput {
    /// List of DomainPackageDetails objects.
    public var domainPackageDetailsList: [ElasticsearchClientTypes.DomainPackageDetails]?
    /// Pagination token that needs to be supplied to the next call to get the next page of results.
    public var nextToken: Swift.String?

    public init(
        domainPackageDetailsList: [ElasticsearchClientTypes.DomainPackageDetails]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainPackageDetailsList = domainPackageDetailsList
        self.nextToken = nextToken
    }
}

/// Container for the parameters to the [ListTags] operation. Specify the ARN for the Elasticsearch domain to which the tags are attached that you want to view are attached.
public struct ListTagsInput {
    /// Specify the ARN for the Elasticsearch domain to which the tags are attached that you want to view.
    /// This member is required.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

/// The result of a ListTags operation. Contains tags for all requested Elasticsearch domains.
public struct ListTagsOutput {
    /// List of Tag for the requested Elasticsearch domain.
    public var tagList: [ElasticsearchClientTypes.Tag]?

    public init(
        tagList: [ElasticsearchClientTypes.Tag]? = nil
    )
    {
        self.tagList = tagList
    }
}

/// Retrieves information about each principal that is allowed to access a given Amazon OpenSearch Service domain through the use of an interface VPC endpoint
public struct ListVpcEndpointAccessInput {
    /// The name of the OpenSearch Service domain to retrieve access information for.
    /// This member is required.
    public var domainName: Swift.String?
    /// Provides an identifier to allow retrieval of paginated results.
    public var nextToken: Swift.String?

    public init(
        domainName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.nextToken = nextToken
    }
}

/// Container for response parameters to the [ListVpcEndpointAccess] operation. Returns a list of accounts id and account type authorized to manage VPC endpoints.
public struct ListVpcEndpointAccessOutput {
    /// List of AuthorizedPrincipal describing the details of the permissions to manage VPC endpoints against the specified domain.
    /// This member is required.
    public var authorizedPrincipalList: [ElasticsearchClientTypes.AuthorizedPrincipal]?
    /// Provides an identifier to allow retrieval of paginated results.
    /// This member is required.
    public var nextToken: Swift.String?

    public init(
        authorizedPrincipalList: [ElasticsearchClientTypes.AuthorizedPrincipal]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.authorizedPrincipalList = authorizedPrincipalList
        self.nextToken = nextToken
    }
}

/// Container for request parameters to the [ListVpcEndpoints] operation.
public struct ListVpcEndpointsInput {
    /// Identifier to allow retrieval of paginated results.
    public var nextToken: Swift.String?

    public init(
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

/// Container for response parameters to the [ListVpcEndpoints] operation. Returns a list containing summarized details of the VPC endpoints.
public struct ListVpcEndpointsOutput {
    /// Provides an identifier to allow retrieval of paginated results.
    /// This member is required.
    public var nextToken: Swift.String?
    /// Information about each endpoint.
    /// This member is required.
    public var vpcEndpointSummaryList: [ElasticsearchClientTypes.VpcEndpointSummary]?

    public init(
        nextToken: Swift.String? = nil,
        vpcEndpointSummaryList: [ElasticsearchClientTypes.VpcEndpointSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.vpcEndpointSummaryList = vpcEndpointSummaryList
    }
}

/// Container for request parameters to the [ListVpcEndpointsForDomain] operation. Specifies the domain whose VPC endpoints will be listed.
public struct ListVpcEndpointsForDomainInput {
    /// Name of the ElasticSearch domain whose VPC endpoints are to be listed.
    /// This member is required.
    public var domainName: Swift.String?
    /// Provides an identifier to allow retrieval of paginated results.
    public var nextToken: Swift.String?

    public init(
        domainName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.nextToken = nextToken
    }
}

/// Container for response parameters to the [ListVpcEndpointsForDomain] operation. Returns a list containing summarized details of the VPC endpoints.
public struct ListVpcEndpointsForDomainOutput {
    /// Information about each endpoint associated with the domain.
    /// This member is required.
    public var nextToken: Swift.String?
    /// Provides list of VpcEndpointSummary summarizing details of the VPC endpoints.
    /// This member is required.
    public var vpcEndpointSummaryList: [ElasticsearchClientTypes.VpcEndpointSummary]?

    public init(
        nextToken: Swift.String? = nil,
        vpcEndpointSummaryList: [ElasticsearchClientTypes.VpcEndpointSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.vpcEndpointSummaryList = vpcEndpointSummaryList
    }
}

/// Container for parameters to PurchaseReservedElasticsearchInstanceOffering
public struct PurchaseReservedElasticsearchInstanceOfferingInput {
    /// The number of Elasticsearch instances to reserve.
    public var instanceCount: Swift.Int?
    /// A customer-specified identifier to track this reservation.
    /// This member is required.
    public var reservationName: Swift.String?
    /// The ID of the reserved Elasticsearch instance offering to purchase.
    /// This member is required.
    public var reservedElasticsearchInstanceOfferingId: Swift.String?

    public init(
        instanceCount: Swift.Int? = nil,
        reservationName: Swift.String? = nil,
        reservedElasticsearchInstanceOfferingId: Swift.String? = nil
    )
    {
        self.instanceCount = instanceCount
        self.reservationName = reservationName
        self.reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId
    }
}

/// Represents the output of a PurchaseReservedElasticsearchInstanceOffering operation.
public struct PurchaseReservedElasticsearchInstanceOfferingOutput {
    /// The customer-specified identifier used to track this reservation.
    public var reservationName: Swift.String?
    /// Details of the reserved Elasticsearch instance which was purchased.
    public var reservedElasticsearchInstanceId: Swift.String?

    public init(
        reservationName: Swift.String? = nil,
        reservedElasticsearchInstanceId: Swift.String? = nil
    )
    {
        self.reservationName = reservationName
        self.reservedElasticsearchInstanceId = reservedElasticsearchInstanceId
    }
}

/// Container for the parameters to the [RejectInboundCrossClusterSearchConnection] operation.
public struct RejectInboundCrossClusterSearchConnectionInput {
    /// The id of the inbound connection that you want to reject.
    /// This member is required.
    public var crossClusterSearchConnectionId: Swift.String?

    public init(
        crossClusterSearchConnectionId: Swift.String? = nil
    )
    {
        self.crossClusterSearchConnectionId = crossClusterSearchConnectionId
    }
}

/// The result of a [RejectInboundCrossClusterSearchConnection] operation. Contains details of rejected inbound connection.
public struct RejectInboundCrossClusterSearchConnectionOutput {
    /// Specifies the [InboundCrossClusterSearchConnection] of rejected inbound connection.
    public var crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection?

    public init(
        crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection? = nil
    )
    {
        self.crossClusterSearchConnection = crossClusterSearchConnection
    }
}

/// Container for the parameters to the [RemoveTags] operation. Specify the ARN for the Elasticsearch domain from which you want to remove the specified TagKey.
public struct RemoveTagsInput {
    /// Specifies the ARN for the Elasticsearch domain from which you want to delete the specified tags.
    /// This member is required.
    public var arn: Swift.String?
    /// Specifies the TagKey list which you want to remove from the Elasticsearch domain.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        arn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.arn = arn
        self.tagKeys = tagKeys
    }
}

/// Revokes access to an Amazon OpenSearch Service domain that was provided through an interface VPC endpoint.
public struct RevokeVpcEndpointAccessInput {
    /// The account ID to revoke access from.
    /// This member is required.
    public var account: Swift.String?
    /// The name of the OpenSearch Service domain.
    /// This member is required.
    public var domainName: Swift.String?

    public init(
        account: Swift.String? = nil,
        domainName: Swift.String? = nil
    )
    {
        self.account = account
        self.domainName = domainName
    }
}

/// Container for response parameters to the [RevokeVpcEndpointAccess] operation. The response body for this operation is empty.
public struct RevokeVpcEndpointAccessOutput {

    public init() { }
}

/// Container for the parameters to the [StartElasticsearchServiceSoftwareUpdate] operation. Specifies the name of the Elasticsearch domain that you wish to schedule a service software update on.
public struct StartElasticsearchServiceSoftwareUpdateInput {
    /// The name of the domain that you want to update to the latest service software.
    /// This member is required.
    public var domainName: Swift.String?

    public init(
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

/// The result of a StartElasticsearchServiceSoftwareUpdate operation. Contains the status of the update.
public struct StartElasticsearchServiceSoftwareUpdateOutput {
    /// The current status of the Elasticsearch service software update.
    public var serviceSoftwareOptions: ElasticsearchClientTypes.ServiceSoftwareOptions?

    public init(
        serviceSoftwareOptions: ElasticsearchClientTypes.ServiceSoftwareOptions? = nil
    )
    {
        self.serviceSoftwareOptions = serviceSoftwareOptions
    }
}

/// Container for the parameters to the [UpdateElasticsearchDomain] operation. Specifies the type and number of instances in the domain cluster.
public struct UpdateElasticsearchDomainConfigInput {
    /// IAM access policy as a JSON-formatted string.
    public var accessPolicies: Swift.String?
    /// Modifies the advanced option to allow references to indices in an HTTP request body. Must be false when configuring access to individual sub-resources. By default, the value is true. See [Configuration Advanced Options](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options) for more information.
    public var advancedOptions: [Swift.String: Swift.String]?
    /// Specifies advanced security options.
    public var advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptionsInput?
    /// Specifies Auto-Tune options.
    public var autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptions?
    /// Options to specify the Cognito user and identity pools for Kibana authentication. For more information, see [Amazon Cognito Authentication for Kibana](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html).
    public var cognitoOptions: ElasticsearchClientTypes.CognitoOptions?
    /// Options to specify configuration that will be applied to the domain endpoint.
    public var domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptions?
    /// The name of the Elasticsearch domain that you are updating.
    /// This member is required.
    public var domainName: Swift.String?
    /// This flag, when set to True, specifies whether the UpdateElasticsearchDomain request should return the results of validation checks without actually applying the change. This flag, when set to True, specifies the deployment mechanism through which the update shall be applied on the domain. This will not actually perform the Update.
    public var dryRun: Swift.Bool?
    /// Specify the type and size of the EBS volume that you want to use.
    public var ebsOptions: ElasticsearchClientTypes.EBSOptions?
    /// The type and number of instances to instantiate for the domain cluster.
    public var elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfig?
    /// Specifies the Encryption At Rest Options.
    public var encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptions?
    /// Map of LogType and LogPublishingOption, each containing options to publish a given type of Elasticsearch log.
    public var logPublishingOptions: [Swift.String: ElasticsearchClientTypes.LogPublishingOption]?
    /// Specifies the NodeToNodeEncryptionOptions.
    public var nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptions?
    /// Option to set the time, in UTC format, for the daily automated snapshot. Default value is 0 hours.
    public var snapshotOptions: ElasticsearchClientTypes.SnapshotOptions?
    /// Options to specify the subnets and security groups for VPC endpoint. For more information, see [Creating a VPC](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html#es-creating-vpc) in VPC Endpoints for Amazon Elasticsearch Service Domains
    public var vpcOptions: ElasticsearchClientTypes.VPCOptions?

    public init(
        accessPolicies: Swift.String? = nil,
        advancedOptions: [Swift.String: Swift.String]? = nil,
        advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptionsInput? = nil,
        autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptions? = nil,
        cognitoOptions: ElasticsearchClientTypes.CognitoOptions? = nil,
        domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptions? = nil,
        domainName: Swift.String? = nil,
        dryRun: Swift.Bool? = nil,
        ebsOptions: ElasticsearchClientTypes.EBSOptions? = nil,
        elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfig? = nil,
        encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptions? = nil,
        logPublishingOptions: [Swift.String: ElasticsearchClientTypes.LogPublishingOption]? = nil,
        nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptions? = nil,
        snapshotOptions: ElasticsearchClientTypes.SnapshotOptions? = nil,
        vpcOptions: ElasticsearchClientTypes.VPCOptions? = nil
    )
    {
        self.accessPolicies = accessPolicies
        self.advancedOptions = advancedOptions
        self.advancedSecurityOptions = advancedSecurityOptions
        self.autoTuneOptions = autoTuneOptions
        self.cognitoOptions = cognitoOptions
        self.domainEndpointOptions = domainEndpointOptions
        self.domainName = domainName
        self.dryRun = dryRun
        self.ebsOptions = ebsOptions
        self.elasticsearchClusterConfig = elasticsearchClusterConfig
        self.encryptionAtRestOptions = encryptionAtRestOptions
        self.logPublishingOptions = logPublishingOptions
        self.nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions
        self.snapshotOptions = snapshotOptions
        self.vpcOptions = vpcOptions
    }
}

extension ElasticsearchClientTypes {
    public struct DryRunResults {
        /// Specifies the deployment mechanism through which the update shall be applied on the domain. Possible responses are Blue/Green (The update will require a blue/green deployment.) DynamicUpdate (The update can be applied in-place without a Blue/Green deployment required.) Undetermined (The domain is undergoing an update which needs to complete before the deployment type can be predicted.) None (The configuration change matches the current configuration and will not result in any update.)
        public var deploymentType: Swift.String?
        /// Contains an optional message associated with the DryRunResults.
        public var message: Swift.String?

        public init(
            deploymentType: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.deploymentType = deploymentType
            self.message = message
        }
    }

}

/// The result of an UpdateElasticsearchDomain request. Contains the status of the Elasticsearch domain being updated.
public struct UpdateElasticsearchDomainConfigOutput {
    /// The status of the updated Elasticsearch domain.
    /// This member is required.
    public var domainConfig: ElasticsearchClientTypes.ElasticsearchDomainConfig?
    /// Contains result of DryRun.
    public var dryRunResults: ElasticsearchClientTypes.DryRunResults?

    public init(
        domainConfig: ElasticsearchClientTypes.ElasticsearchDomainConfig? = nil,
        dryRunResults: ElasticsearchClientTypes.DryRunResults? = nil
    )
    {
        self.domainConfig = domainConfig
        self.dryRunResults = dryRunResults
    }
}

/// Container for request parameters to [UpdatePackage] operation.
public struct UpdatePackageInput {
    /// An info message for the new version which will be shown as part of GetPackageVersionHistoryResponse.
    public var commitMessage: Swift.String?
    /// New description of the package.
    public var packageDescription: Swift.String?
    /// Unique identifier for the package.
    /// This member is required.
    public var packageID: Swift.String?
    /// The S3 location for importing the package specified as S3BucketName and S3Key
    /// This member is required.
    public var packageSource: ElasticsearchClientTypes.PackageSource?

    public init(
        commitMessage: Swift.String? = nil,
        packageDescription: Swift.String? = nil,
        packageID: Swift.String? = nil,
        packageSource: ElasticsearchClientTypes.PackageSource? = nil
    )
    {
        self.commitMessage = commitMessage
        self.packageDescription = packageDescription
        self.packageID = packageID
        self.packageSource = packageSource
    }
}

/// Container for response returned by [UpdatePackage] operation.
public struct UpdatePackageOutput {
    /// Information about the package PackageDetails.
    public var packageDetails: ElasticsearchClientTypes.PackageDetails?

    public init(
        packageDetails: ElasticsearchClientTypes.PackageDetails? = nil
    )
    {
        self.packageDetails = packageDetails
    }
}

/// Modifies an Amazon OpenSearch Service-managed interface VPC endpoint.
public struct UpdateVpcEndpointInput {
    /// Unique identifier of the VPC endpoint to be updated.
    /// This member is required.
    public var vpcEndpointId: Swift.String?
    /// The security groups and/or subnets to add, remove, or modify.
    /// This member is required.
    public var vpcOptions: ElasticsearchClientTypes.VPCOptions?

    public init(
        vpcEndpointId: Swift.String? = nil,
        vpcOptions: ElasticsearchClientTypes.VPCOptions? = nil
    )
    {
        self.vpcEndpointId = vpcEndpointId
        self.vpcOptions = vpcOptions
    }
}

/// Contains the configuration and status of the VPC endpoint being updated.
public struct UpdateVpcEndpointOutput {
    /// The endpoint to be updated.
    /// This member is required.
    public var vpcEndpoint: ElasticsearchClientTypes.VpcEndpoint?

    public init(
        vpcEndpoint: ElasticsearchClientTypes.VpcEndpoint? = nil
    )
    {
        self.vpcEndpoint = vpcEndpoint
    }
}

/// Container for request parameters to [UpgradeElasticsearchDomain] operation.
public struct UpgradeElasticsearchDomainInput {
    /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
    /// This member is required.
    public var domainName: Swift.String?
    /// This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed. This will not actually perform the Upgrade.
    public var performCheckOnly: Swift.Bool?
    /// The version of Elasticsearch that you intend to upgrade the domain to.
    /// This member is required.
    public var targetVersion: Swift.String?

    public init(
        domainName: Swift.String? = nil,
        performCheckOnly: Swift.Bool? = nil,
        targetVersion: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.performCheckOnly = performCheckOnly
        self.targetVersion = targetVersion
    }
}

/// Container for response returned by [UpgradeElasticsearchDomain] operation.
public struct UpgradeElasticsearchDomainOutput {
    /// Specifies change details of the domain configuration change.
    public var changeProgressDetails: ElasticsearchClientTypes.ChangeProgressDetails?
    /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
    public var domainName: Swift.String?
    /// This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed. This will not actually perform the Upgrade.
    public var performCheckOnly: Swift.Bool?
    /// The version of Elasticsearch that you intend to upgrade the domain to.
    public var targetVersion: Swift.String?

    public init(
        changeProgressDetails: ElasticsearchClientTypes.ChangeProgressDetails? = nil,
        domainName: Swift.String? = nil,
        performCheckOnly: Swift.Bool? = nil,
        targetVersion: Swift.String? = nil
    )
    {
        self.changeProgressDetails = changeProgressDetails
        self.domainName = domainName
        self.performCheckOnly = performCheckOnly
        self.targetVersion = targetVersion
    }
}

extension AcceptInboundCrossClusterSearchConnectionInput {

    static func urlPathProvider(_ value: AcceptInboundCrossClusterSearchConnectionInput) -> Swift.String? {
        guard let crossClusterSearchConnectionId = value.crossClusterSearchConnectionId else {
            return nil
        }
        return "/2015-01-01/es/ccs/inboundConnection/\(crossClusterSearchConnectionId.urlPercentEncoding())/accept"
    }
}

extension AddTagsInput {

    static func urlPathProvider(_ value: AddTagsInput) -> Swift.String? {
        return "/2015-01-01/tags"
    }
}

extension AssociatePackageInput {

    static func urlPathProvider(_ value: AssociatePackageInput) -> Swift.String? {
        guard let packageID = value.packageID else {
            return nil
        }
        guard let domainName = value.domainName else {
            return nil
        }
        return "/2015-01-01/packages/associate/\(packageID.urlPercentEncoding())/\(domainName.urlPercentEncoding())"
    }
}

extension AuthorizeVpcEndpointAccessInput {

    static func urlPathProvider(_ value: AuthorizeVpcEndpointAccessInput) -> Swift.String? {
        guard let domainName = value.domainName else {
            return nil
        }
        return "/2015-01-01/es/domain/\(domainName.urlPercentEncoding())/authorizeVpcEndpointAccess"
    }
}

extension CancelDomainConfigChangeInput {

    static func urlPathProvider(_ value: CancelDomainConfigChangeInput) -> Swift.String? {
        guard let domainName = value.domainName else {
            return nil
        }
        return "/2015-01-01/es/domain/\(domainName.urlPercentEncoding())/config/cancel"
    }
}

extension CancelElasticsearchServiceSoftwareUpdateInput {

    static func urlPathProvider(_ value: CancelElasticsearchServiceSoftwareUpdateInput) -> Swift.String? {
        return "/2015-01-01/es/serviceSoftwareUpdate/cancel"
    }
}

extension CreateElasticsearchDomainInput {

    static func urlPathProvider(_ value: CreateElasticsearchDomainInput) -> Swift.String? {
        return "/2015-01-01/es/domain"
    }
}

extension CreateOutboundCrossClusterSearchConnectionInput {

    static func urlPathProvider(_ value: CreateOutboundCrossClusterSearchConnectionInput) -> Swift.String? {
        return "/2015-01-01/es/ccs/outboundConnection"
    }
}

extension CreatePackageInput {

    static func urlPathProvider(_ value: CreatePackageInput) -> Swift.String? {
        return "/2015-01-01/packages"
    }
}

extension CreateVpcEndpointInput {

    static func urlPathProvider(_ value: CreateVpcEndpointInput) -> Swift.String? {
        return "/2015-01-01/es/vpcEndpoints"
    }
}

extension DeleteElasticsearchDomainInput {

    static func urlPathProvider(_ value: DeleteElasticsearchDomainInput) -> Swift.String? {
        guard let domainName = value.domainName else {
            return nil
        }
        return "/2015-01-01/es/domain/\(domainName.urlPercentEncoding())"
    }
}

extension DeleteElasticsearchServiceRoleInput {

    static func urlPathProvider(_ value: DeleteElasticsearchServiceRoleInput) -> Swift.String? {
        return "/2015-01-01/es/role"
    }
}

extension DeleteInboundCrossClusterSearchConnectionInput {

    static func urlPathProvider(_ value: DeleteInboundCrossClusterSearchConnectionInput) -> Swift.String? {
        guard let crossClusterSearchConnectionId = value.crossClusterSearchConnectionId else {
            return nil
        }
        return "/2015-01-01/es/ccs/inboundConnection/\(crossClusterSearchConnectionId.urlPercentEncoding())"
    }
}

extension DeleteOutboundCrossClusterSearchConnectionInput {

    static func urlPathProvider(_ value: DeleteOutboundCrossClusterSearchConnectionInput) -> Swift.String? {
        guard let crossClusterSearchConnectionId = value.crossClusterSearchConnectionId else {
            return nil
        }
        return "/2015-01-01/es/ccs/outboundConnection/\(crossClusterSearchConnectionId.urlPercentEncoding())"
    }
}

extension DeletePackageInput {

    static func urlPathProvider(_ value: DeletePackageInput) -> Swift.String? {
        guard let packageID = value.packageID else {
            return nil
        }
        return "/2015-01-01/packages/\(packageID.urlPercentEncoding())"
    }
}

extension DeleteVpcEndpointInput {

    static func urlPathProvider(_ value: DeleteVpcEndpointInput) -> Swift.String? {
        guard let vpcEndpointId = value.vpcEndpointId else {
            return nil
        }
        return "/2015-01-01/es/vpcEndpoints/\(vpcEndpointId.urlPercentEncoding())"
    }
}

extension DescribeDomainAutoTunesInput {

    static func urlPathProvider(_ value: DescribeDomainAutoTunesInput) -> Swift.String? {
        guard let domainName = value.domainName else {
            return nil
        }
        return "/2015-01-01/es/domain/\(domainName.urlPercentEncoding())/autoTunes"
    }
}

extension DescribeDomainChangeProgressInput {

    static func urlPathProvider(_ value: DescribeDomainChangeProgressInput) -> Swift.String? {
        guard let domainName = value.domainName else {
            return nil
        }
        return "/2015-01-01/es/domain/\(domainName.urlPercentEncoding())/progress"
    }
}

extension DescribeDomainChangeProgressInput {

    static func queryItemProvider(_ value: DescribeDomainChangeProgressInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let changeId = value.changeId {
            let changeIdQueryItem = Smithy.URIQueryItem(name: "changeid".urlPercentEncoding(), value: Swift.String(changeId).urlPercentEncoding())
            items.append(changeIdQueryItem)
        }
        return items
    }
}

extension DescribeElasticsearchDomainInput {

    static func urlPathProvider(_ value: DescribeElasticsearchDomainInput) -> Swift.String? {
        guard let domainName = value.domainName else {
            return nil
        }
        return "/2015-01-01/es/domain/\(domainName.urlPercentEncoding())"
    }
}

extension DescribeElasticsearchDomainConfigInput {

    static func urlPathProvider(_ value: DescribeElasticsearchDomainConfigInput) -> Swift.String? {
        guard let domainName = value.domainName else {
            return nil
        }
        return "/2015-01-01/es/domain/\(domainName.urlPercentEncoding())/config"
    }
}

extension DescribeElasticsearchDomainsInput {

    static func urlPathProvider(_ value: DescribeElasticsearchDomainsInput) -> Swift.String? {
        return "/2015-01-01/es/domain-info"
    }
}

extension DescribeElasticsearchInstanceTypeLimitsInput {

    static func urlPathProvider(_ value: DescribeElasticsearchInstanceTypeLimitsInput) -> Swift.String? {
        guard let elasticsearchVersion = value.elasticsearchVersion else {
            return nil
        }
        guard let instanceType = value.instanceType else {
            return nil
        }
        return "/2015-01-01/es/instanceTypeLimits/\(elasticsearchVersion.urlPercentEncoding())/\(instanceType.rawValue.urlPercentEncoding())"
    }
}

extension DescribeElasticsearchInstanceTypeLimitsInput {

    static func queryItemProvider(_ value: DescribeElasticsearchInstanceTypeLimitsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let domainName = value.domainName {
            let domainNameQueryItem = Smithy.URIQueryItem(name: "domainName".urlPercentEncoding(), value: Swift.String(domainName).urlPercentEncoding())
            items.append(domainNameQueryItem)
        }
        return items
    }
}

extension DescribeInboundCrossClusterSearchConnectionsInput {

    static func urlPathProvider(_ value: DescribeInboundCrossClusterSearchConnectionsInput) -> Swift.String? {
        return "/2015-01-01/es/ccs/inboundConnection/search"
    }
}

extension DescribeOutboundCrossClusterSearchConnectionsInput {

    static func urlPathProvider(_ value: DescribeOutboundCrossClusterSearchConnectionsInput) -> Swift.String? {
        return "/2015-01-01/es/ccs/outboundConnection/search"
    }
}

extension DescribePackagesInput {

    static func urlPathProvider(_ value: DescribePackagesInput) -> Swift.String? {
        return "/2015-01-01/packages/describe"
    }
}

extension DescribeReservedElasticsearchInstanceOfferingsInput {

    static func urlPathProvider(_ value: DescribeReservedElasticsearchInstanceOfferingsInput) -> Swift.String? {
        return "/2015-01-01/es/reservedInstanceOfferings"
    }
}

extension DescribeReservedElasticsearchInstanceOfferingsInput {

    static func queryItemProvider(_ value: DescribeReservedElasticsearchInstanceOfferingsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let reservedElasticsearchInstanceOfferingId = value.reservedElasticsearchInstanceOfferingId {
            let reservedElasticsearchInstanceOfferingIdQueryItem = Smithy.URIQueryItem(name: "offeringId".urlPercentEncoding(), value: Swift.String(reservedElasticsearchInstanceOfferingId).urlPercentEncoding())
            items.append(reservedElasticsearchInstanceOfferingIdQueryItem)
        }
        return items
    }
}

extension DescribeReservedElasticsearchInstancesInput {

    static func urlPathProvider(_ value: DescribeReservedElasticsearchInstancesInput) -> Swift.String? {
        return "/2015-01-01/es/reservedInstances"
    }
}

extension DescribeReservedElasticsearchInstancesInput {

    static func queryItemProvider(_ value: DescribeReservedElasticsearchInstancesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let reservedElasticsearchInstanceId = value.reservedElasticsearchInstanceId {
            let reservedElasticsearchInstanceIdQueryItem = Smithy.URIQueryItem(name: "reservationId".urlPercentEncoding(), value: Swift.String(reservedElasticsearchInstanceId).urlPercentEncoding())
            items.append(reservedElasticsearchInstanceIdQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension DescribeVpcEndpointsInput {

    static func urlPathProvider(_ value: DescribeVpcEndpointsInput) -> Swift.String? {
        return "/2015-01-01/es/vpcEndpoints/describe"
    }
}

extension DissociatePackageInput {

    static func urlPathProvider(_ value: DissociatePackageInput) -> Swift.String? {
        guard let packageID = value.packageID else {
            return nil
        }
        guard let domainName = value.domainName else {
            return nil
        }
        return "/2015-01-01/packages/dissociate/\(packageID.urlPercentEncoding())/\(domainName.urlPercentEncoding())"
    }
}

extension GetCompatibleElasticsearchVersionsInput {

    static func urlPathProvider(_ value: GetCompatibleElasticsearchVersionsInput) -> Swift.String? {
        return "/2015-01-01/es/compatibleVersions"
    }
}

extension GetCompatibleElasticsearchVersionsInput {

    static func queryItemProvider(_ value: GetCompatibleElasticsearchVersionsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let domainName = value.domainName {
            let domainNameQueryItem = Smithy.URIQueryItem(name: "domainName".urlPercentEncoding(), value: Swift.String(domainName).urlPercentEncoding())
            items.append(domainNameQueryItem)
        }
        return items
    }
}

extension GetPackageVersionHistoryInput {

    static func urlPathProvider(_ value: GetPackageVersionHistoryInput) -> Swift.String? {
        guard let packageID = value.packageID else {
            return nil
        }
        return "/2015-01-01/packages/\(packageID.urlPercentEncoding())/history"
    }
}

extension GetPackageVersionHistoryInput {

    static func queryItemProvider(_ value: GetPackageVersionHistoryInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension GetUpgradeHistoryInput {

    static func urlPathProvider(_ value: GetUpgradeHistoryInput) -> Swift.String? {
        guard let domainName = value.domainName else {
            return nil
        }
        return "/2015-01-01/es/upgradeDomain/\(domainName.urlPercentEncoding())/history"
    }
}

extension GetUpgradeHistoryInput {

    static func queryItemProvider(_ value: GetUpgradeHistoryInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension GetUpgradeStatusInput {

    static func urlPathProvider(_ value: GetUpgradeStatusInput) -> Swift.String? {
        guard let domainName = value.domainName else {
            return nil
        }
        return "/2015-01-01/es/upgradeDomain/\(domainName.urlPercentEncoding())/status"
    }
}

extension ListDomainNamesInput {

    static func urlPathProvider(_ value: ListDomainNamesInput) -> Swift.String? {
        return "/2015-01-01/domain"
    }
}

extension ListDomainNamesInput {

    static func queryItemProvider(_ value: ListDomainNamesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let engineType = value.engineType {
            let engineTypeQueryItem = Smithy.URIQueryItem(name: "engineType".urlPercentEncoding(), value: Swift.String(engineType.rawValue).urlPercentEncoding())
            items.append(engineTypeQueryItem)
        }
        return items
    }
}

extension ListDomainsForPackageInput {

    static func urlPathProvider(_ value: ListDomainsForPackageInput) -> Swift.String? {
        guard let packageID = value.packageID else {
            return nil
        }
        return "/2015-01-01/packages/\(packageID.urlPercentEncoding())/domains"
    }
}

extension ListDomainsForPackageInput {

    static func queryItemProvider(_ value: ListDomainsForPackageInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListElasticsearchInstanceTypesInput {

    static func urlPathProvider(_ value: ListElasticsearchInstanceTypesInput) -> Swift.String? {
        guard let elasticsearchVersion = value.elasticsearchVersion else {
            return nil
        }
        return "/2015-01-01/es/instanceTypes/\(elasticsearchVersion.urlPercentEncoding())"
    }
}

extension ListElasticsearchInstanceTypesInput {

    static func queryItemProvider(_ value: ListElasticsearchInstanceTypesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let domainName = value.domainName {
            let domainNameQueryItem = Smithy.URIQueryItem(name: "domainName".urlPercentEncoding(), value: Swift.String(domainName).urlPercentEncoding())
            items.append(domainNameQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListElasticsearchVersionsInput {

    static func urlPathProvider(_ value: ListElasticsearchVersionsInput) -> Swift.String? {
        return "/2015-01-01/es/versions"
    }
}

extension ListElasticsearchVersionsInput {

    static func queryItemProvider(_ value: ListElasticsearchVersionsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListPackagesForDomainInput {

    static func urlPathProvider(_ value: ListPackagesForDomainInput) -> Swift.String? {
        guard let domainName = value.domainName else {
            return nil
        }
        return "/2015-01-01/domain/\(domainName.urlPercentEncoding())/packages"
    }
}

extension ListPackagesForDomainInput {

    static func queryItemProvider(_ value: ListPackagesForDomainInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListTagsInput {

    static func urlPathProvider(_ value: ListTagsInput) -> Swift.String? {
        return "/2015-01-01/tags"
    }
}

extension ListTagsInput {

    static func queryItemProvider(_ value: ListTagsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let arn = value.arn else {
            let message = "Creating a URL Query Item failed. arn is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let arnQueryItem = Smithy.URIQueryItem(name: "arn".urlPercentEncoding(), value: Swift.String(arn).urlPercentEncoding())
        items.append(arnQueryItem)
        return items
    }
}

extension ListVpcEndpointAccessInput {

    static func urlPathProvider(_ value: ListVpcEndpointAccessInput) -> Swift.String? {
        guard let domainName = value.domainName else {
            return nil
        }
        return "/2015-01-01/es/domain/\(domainName.urlPercentEncoding())/listVpcEndpointAccess"
    }
}

extension ListVpcEndpointAccessInput {

    static func queryItemProvider(_ value: ListVpcEndpointAccessInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListVpcEndpointsInput {

    static func urlPathProvider(_ value: ListVpcEndpointsInput) -> Swift.String? {
        return "/2015-01-01/es/vpcEndpoints"
    }
}

extension ListVpcEndpointsInput {

    static func queryItemProvider(_ value: ListVpcEndpointsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListVpcEndpointsForDomainInput {

    static func urlPathProvider(_ value: ListVpcEndpointsForDomainInput) -> Swift.String? {
        guard let domainName = value.domainName else {
            return nil
        }
        return "/2015-01-01/es/domain/\(domainName.urlPercentEncoding())/vpcEndpoints"
    }
}

extension ListVpcEndpointsForDomainInput {

    static func queryItemProvider(_ value: ListVpcEndpointsForDomainInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension PurchaseReservedElasticsearchInstanceOfferingInput {

    static func urlPathProvider(_ value: PurchaseReservedElasticsearchInstanceOfferingInput) -> Swift.String? {
        return "/2015-01-01/es/purchaseReservedInstanceOffering"
    }
}

extension RejectInboundCrossClusterSearchConnectionInput {

    static func urlPathProvider(_ value: RejectInboundCrossClusterSearchConnectionInput) -> Swift.String? {
        guard let crossClusterSearchConnectionId = value.crossClusterSearchConnectionId else {
            return nil
        }
        return "/2015-01-01/es/ccs/inboundConnection/\(crossClusterSearchConnectionId.urlPercentEncoding())/reject"
    }
}

extension RemoveTagsInput {

    static func urlPathProvider(_ value: RemoveTagsInput) -> Swift.String? {
        return "/2015-01-01/tags-removal"
    }
}

extension RevokeVpcEndpointAccessInput {

    static func urlPathProvider(_ value: RevokeVpcEndpointAccessInput) -> Swift.String? {
        guard let domainName = value.domainName else {
            return nil
        }
        return "/2015-01-01/es/domain/\(domainName.urlPercentEncoding())/revokeVpcEndpointAccess"
    }
}

extension StartElasticsearchServiceSoftwareUpdateInput {

    static func urlPathProvider(_ value: StartElasticsearchServiceSoftwareUpdateInput) -> Swift.String? {
        return "/2015-01-01/es/serviceSoftwareUpdate/start"
    }
}

extension UpdateElasticsearchDomainConfigInput {

    static func urlPathProvider(_ value: UpdateElasticsearchDomainConfigInput) -> Swift.String? {
        guard let domainName = value.domainName else {
            return nil
        }
        return "/2015-01-01/es/domain/\(domainName.urlPercentEncoding())/config"
    }
}

extension UpdatePackageInput {

    static func urlPathProvider(_ value: UpdatePackageInput) -> Swift.String? {
        return "/2015-01-01/packages/update"
    }
}

extension UpdateVpcEndpointInput {

    static func urlPathProvider(_ value: UpdateVpcEndpointInput) -> Swift.String? {
        return "/2015-01-01/es/vpcEndpoints/update"
    }
}

extension UpgradeElasticsearchDomainInput {

    static func urlPathProvider(_ value: UpgradeElasticsearchDomainInput) -> Swift.String? {
        return "/2015-01-01/es/upgradeDomain"
    }
}

extension AddTagsInput {

    static func write(value: AddTagsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ARN"].write(value.arn)
        try writer["TagList"].writeList(value.tagList, memberWritingClosure: ElasticsearchClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension AuthorizeVpcEndpointAccessInput {

    static func write(value: AuthorizeVpcEndpointAccessInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Account"].write(value.account)
    }
}

extension CancelDomainConfigChangeInput {

    static func write(value: CancelDomainConfigChangeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DryRun"].write(value.dryRun)
    }
}

extension CancelElasticsearchServiceSoftwareUpdateInput {

    static func write(value: CancelElasticsearchServiceSoftwareUpdateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DomainName"].write(value.domainName)
    }
}

extension CreateElasticsearchDomainInput {

    static func write(value: CreateElasticsearchDomainInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessPolicies"].write(value.accessPolicies)
        try writer["AdvancedOptions"].writeMap(value.advancedOptions, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["AdvancedSecurityOptions"].write(value.advancedSecurityOptions, with: ElasticsearchClientTypes.AdvancedSecurityOptionsInput.write(value:to:))
        try writer["AutoTuneOptions"].write(value.autoTuneOptions, with: ElasticsearchClientTypes.AutoTuneOptionsInput.write(value:to:))
        try writer["CognitoOptions"].write(value.cognitoOptions, with: ElasticsearchClientTypes.CognitoOptions.write(value:to:))
        try writer["DomainEndpointOptions"].write(value.domainEndpointOptions, with: ElasticsearchClientTypes.DomainEndpointOptions.write(value:to:))
        try writer["DomainName"].write(value.domainName)
        try writer["EBSOptions"].write(value.ebsOptions, with: ElasticsearchClientTypes.EBSOptions.write(value:to:))
        try writer["ElasticsearchClusterConfig"].write(value.elasticsearchClusterConfig, with: ElasticsearchClientTypes.ElasticsearchClusterConfig.write(value:to:))
        try writer["ElasticsearchVersion"].write(value.elasticsearchVersion)
        try writer["EncryptionAtRestOptions"].write(value.encryptionAtRestOptions, with: ElasticsearchClientTypes.EncryptionAtRestOptions.write(value:to:))
        try writer["LogPublishingOptions"].writeMap(value.logPublishingOptions, valueWritingClosure: ElasticsearchClientTypes.LogPublishingOption.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["NodeToNodeEncryptionOptions"].write(value.nodeToNodeEncryptionOptions, with: ElasticsearchClientTypes.NodeToNodeEncryptionOptions.write(value:to:))
        try writer["SnapshotOptions"].write(value.snapshotOptions, with: ElasticsearchClientTypes.SnapshotOptions.write(value:to:))
        try writer["TagList"].writeList(value.tagList, memberWritingClosure: ElasticsearchClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VPCOptions"].write(value.vpcOptions, with: ElasticsearchClientTypes.VPCOptions.write(value:to:))
    }
}

extension CreateOutboundCrossClusterSearchConnectionInput {

    static func write(value: CreateOutboundCrossClusterSearchConnectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConnectionAlias"].write(value.connectionAlias)
        try writer["DestinationDomainInfo"].write(value.destinationDomainInfo, with: ElasticsearchClientTypes.DomainInformation.write(value:to:))
        try writer["SourceDomainInfo"].write(value.sourceDomainInfo, with: ElasticsearchClientTypes.DomainInformation.write(value:to:))
    }
}

extension CreatePackageInput {

    static func write(value: CreatePackageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PackageDescription"].write(value.packageDescription)
        try writer["PackageName"].write(value.packageName)
        try writer["PackageSource"].write(value.packageSource, with: ElasticsearchClientTypes.PackageSource.write(value:to:))
        try writer["PackageType"].write(value.packageType)
    }
}

extension CreateVpcEndpointInput {

    static func write(value: CreateVpcEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["DomainArn"].write(value.domainArn)
        try writer["VpcOptions"].write(value.vpcOptions, with: ElasticsearchClientTypes.VPCOptions.write(value:to:))
    }
}

extension DescribeDomainAutoTunesInput {

    static func write(value: DescribeDomainAutoTunesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeElasticsearchDomainsInput {

    static func write(value: DescribeElasticsearchDomainsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DomainNames"].writeList(value.domainNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DescribeInboundCrossClusterSearchConnectionsInput {

    static func write(value: DescribeInboundCrossClusterSearchConnectionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: ElasticsearchClientTypes.Filter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeOutboundCrossClusterSearchConnectionsInput {

    static func write(value: DescribeOutboundCrossClusterSearchConnectionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: ElasticsearchClientTypes.Filter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribePackagesInput {

    static func write(value: DescribePackagesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: ElasticsearchClientTypes.DescribePackagesFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeVpcEndpointsInput {

    static func write(value: DescribeVpcEndpointsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["VpcEndpointIds"].writeList(value.vpcEndpointIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PurchaseReservedElasticsearchInstanceOfferingInput {

    static func write(value: PurchaseReservedElasticsearchInstanceOfferingInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InstanceCount"].write(value.instanceCount)
        try writer["ReservationName"].write(value.reservationName)
        try writer["ReservedElasticsearchInstanceOfferingId"].write(value.reservedElasticsearchInstanceOfferingId)
    }
}

extension RemoveTagsInput {

    static func write(value: RemoveTagsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ARN"].write(value.arn)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension RevokeVpcEndpointAccessInput {

    static func write(value: RevokeVpcEndpointAccessInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Account"].write(value.account)
    }
}

extension StartElasticsearchServiceSoftwareUpdateInput {

    static func write(value: StartElasticsearchServiceSoftwareUpdateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DomainName"].write(value.domainName)
    }
}

extension UpdateElasticsearchDomainConfigInput {

    static func write(value: UpdateElasticsearchDomainConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessPolicies"].write(value.accessPolicies)
        try writer["AdvancedOptions"].writeMap(value.advancedOptions, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["AdvancedSecurityOptions"].write(value.advancedSecurityOptions, with: ElasticsearchClientTypes.AdvancedSecurityOptionsInput.write(value:to:))
        try writer["AutoTuneOptions"].write(value.autoTuneOptions, with: ElasticsearchClientTypes.AutoTuneOptions.write(value:to:))
        try writer["CognitoOptions"].write(value.cognitoOptions, with: ElasticsearchClientTypes.CognitoOptions.write(value:to:))
        try writer["DomainEndpointOptions"].write(value.domainEndpointOptions, with: ElasticsearchClientTypes.DomainEndpointOptions.write(value:to:))
        try writer["DryRun"].write(value.dryRun)
        try writer["EBSOptions"].write(value.ebsOptions, with: ElasticsearchClientTypes.EBSOptions.write(value:to:))
        try writer["ElasticsearchClusterConfig"].write(value.elasticsearchClusterConfig, with: ElasticsearchClientTypes.ElasticsearchClusterConfig.write(value:to:))
        try writer["EncryptionAtRestOptions"].write(value.encryptionAtRestOptions, with: ElasticsearchClientTypes.EncryptionAtRestOptions.write(value:to:))
        try writer["LogPublishingOptions"].writeMap(value.logPublishingOptions, valueWritingClosure: ElasticsearchClientTypes.LogPublishingOption.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["NodeToNodeEncryptionOptions"].write(value.nodeToNodeEncryptionOptions, with: ElasticsearchClientTypes.NodeToNodeEncryptionOptions.write(value:to:))
        try writer["SnapshotOptions"].write(value.snapshotOptions, with: ElasticsearchClientTypes.SnapshotOptions.write(value:to:))
        try writer["VPCOptions"].write(value.vpcOptions, with: ElasticsearchClientTypes.VPCOptions.write(value:to:))
    }
}

extension UpdatePackageInput {

    static func write(value: UpdatePackageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CommitMessage"].write(value.commitMessage)
        try writer["PackageDescription"].write(value.packageDescription)
        try writer["PackageID"].write(value.packageID)
        try writer["PackageSource"].write(value.packageSource, with: ElasticsearchClientTypes.PackageSource.write(value:to:))
    }
}

extension UpdateVpcEndpointInput {

    static func write(value: UpdateVpcEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["VpcEndpointId"].write(value.vpcEndpointId)
        try writer["VpcOptions"].write(value.vpcOptions, with: ElasticsearchClientTypes.VPCOptions.write(value:to:))
    }
}

extension UpgradeElasticsearchDomainInput {

    static func write(value: UpgradeElasticsearchDomainInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DomainName"].write(value.domainName)
        try writer["PerformCheckOnly"].write(value.performCheckOnly)
        try writer["TargetVersion"].write(value.targetVersion)
    }
}

extension AcceptInboundCrossClusterSearchConnectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AcceptInboundCrossClusterSearchConnectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AcceptInboundCrossClusterSearchConnectionOutput()
        value.crossClusterSearchConnection = try reader["CrossClusterSearchConnection"].readIfPresent(with: ElasticsearchClientTypes.InboundCrossClusterSearchConnection.read(from:))
        return value
    }
}

extension AddTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddTagsOutput {
        return AddTagsOutput()
    }
}

extension AssociatePackageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociatePackageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AssociatePackageOutput()
        value.domainPackageDetails = try reader["DomainPackageDetails"].readIfPresent(with: ElasticsearchClientTypes.DomainPackageDetails.read(from:))
        return value
    }
}

extension AuthorizeVpcEndpointAccessOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AuthorizeVpcEndpointAccessOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AuthorizeVpcEndpointAccessOutput()
        value.authorizedPrincipal = try reader["AuthorizedPrincipal"].readIfPresent(with: ElasticsearchClientTypes.AuthorizedPrincipal.read(from:))
        return value
    }
}

extension CancelDomainConfigChangeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelDomainConfigChangeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CancelDomainConfigChangeOutput()
        value.cancelledChangeIds = try reader["CancelledChangeIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.cancelledChangeProperties = try reader["CancelledChangeProperties"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.CancelledChangeProperty.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.dryRun = try reader["DryRun"].readIfPresent()
        return value
    }
}

extension CancelElasticsearchServiceSoftwareUpdateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelElasticsearchServiceSoftwareUpdateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CancelElasticsearchServiceSoftwareUpdateOutput()
        value.serviceSoftwareOptions = try reader["ServiceSoftwareOptions"].readIfPresent(with: ElasticsearchClientTypes.ServiceSoftwareOptions.read(from:))
        return value
    }
}

extension CreateElasticsearchDomainOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateElasticsearchDomainOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateElasticsearchDomainOutput()
        value.domainStatus = try reader["DomainStatus"].readIfPresent(with: ElasticsearchClientTypes.ElasticsearchDomainStatus.read(from:))
        return value
    }
}

extension CreateOutboundCrossClusterSearchConnectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateOutboundCrossClusterSearchConnectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateOutboundCrossClusterSearchConnectionOutput()
        value.connectionAlias = try reader["ConnectionAlias"].readIfPresent()
        value.connectionStatus = try reader["ConnectionStatus"].readIfPresent(with: ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus.read(from:))
        value.crossClusterSearchConnectionId = try reader["CrossClusterSearchConnectionId"].readIfPresent()
        value.destinationDomainInfo = try reader["DestinationDomainInfo"].readIfPresent(with: ElasticsearchClientTypes.DomainInformation.read(from:))
        value.sourceDomainInfo = try reader["SourceDomainInfo"].readIfPresent(with: ElasticsearchClientTypes.DomainInformation.read(from:))
        return value
    }
}

extension CreatePackageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePackageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePackageOutput()
        value.packageDetails = try reader["PackageDetails"].readIfPresent(with: ElasticsearchClientTypes.PackageDetails.read(from:))
        return value
    }
}

extension CreateVpcEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateVpcEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateVpcEndpointOutput()
        value.vpcEndpoint = try reader["VpcEndpoint"].readIfPresent(with: ElasticsearchClientTypes.VpcEndpoint.read(from:))
        return value
    }
}

extension DeleteElasticsearchDomainOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteElasticsearchDomainOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteElasticsearchDomainOutput()
        value.domainStatus = try reader["DomainStatus"].readIfPresent(with: ElasticsearchClientTypes.ElasticsearchDomainStatus.read(from:))
        return value
    }
}

extension DeleteElasticsearchServiceRoleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteElasticsearchServiceRoleOutput {
        return DeleteElasticsearchServiceRoleOutput()
    }
}

extension DeleteInboundCrossClusterSearchConnectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteInboundCrossClusterSearchConnectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteInboundCrossClusterSearchConnectionOutput()
        value.crossClusterSearchConnection = try reader["CrossClusterSearchConnection"].readIfPresent(with: ElasticsearchClientTypes.InboundCrossClusterSearchConnection.read(from:))
        return value
    }
}

extension DeleteOutboundCrossClusterSearchConnectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteOutboundCrossClusterSearchConnectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteOutboundCrossClusterSearchConnectionOutput()
        value.crossClusterSearchConnection = try reader["CrossClusterSearchConnection"].readIfPresent(with: ElasticsearchClientTypes.OutboundCrossClusterSearchConnection.read(from:))
        return value
    }
}

extension DeletePackageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePackageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeletePackageOutput()
        value.packageDetails = try reader["PackageDetails"].readIfPresent(with: ElasticsearchClientTypes.PackageDetails.read(from:))
        return value
    }
}

extension DeleteVpcEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteVpcEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteVpcEndpointOutput()
        value.vpcEndpointSummary = try reader["VpcEndpointSummary"].readIfPresent(with: ElasticsearchClientTypes.VpcEndpointSummary.read(from:))
        return value
    }
}

extension DescribeDomainAutoTunesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDomainAutoTunesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDomainAutoTunesOutput()
        value.autoTunes = try reader["AutoTunes"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.AutoTune.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeDomainChangeProgressOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDomainChangeProgressOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDomainChangeProgressOutput()
        value.changeProgressStatus = try reader["ChangeProgressStatus"].readIfPresent(with: ElasticsearchClientTypes.ChangeProgressStatusDetails.read(from:))
        return value
    }
}

extension DescribeElasticsearchDomainOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeElasticsearchDomainOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeElasticsearchDomainOutput()
        value.domainStatus = try reader["DomainStatus"].readIfPresent(with: ElasticsearchClientTypes.ElasticsearchDomainStatus.read(from:))
        return value
    }
}

extension DescribeElasticsearchDomainConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeElasticsearchDomainConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeElasticsearchDomainConfigOutput()
        value.domainConfig = try reader["DomainConfig"].readIfPresent(with: ElasticsearchClientTypes.ElasticsearchDomainConfig.read(from:))
        return value
    }
}

extension DescribeElasticsearchDomainsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeElasticsearchDomainsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeElasticsearchDomainsOutput()
        value.domainStatusList = try reader["DomainStatusList"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.ElasticsearchDomainStatus.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension DescribeElasticsearchInstanceTypeLimitsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeElasticsearchInstanceTypeLimitsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeElasticsearchInstanceTypeLimitsOutput()
        value.limitsByRole = try reader["LimitsByRole"].readMapIfPresent(valueReadingClosure: ElasticsearchClientTypes.Limits.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension DescribeInboundCrossClusterSearchConnectionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeInboundCrossClusterSearchConnectionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeInboundCrossClusterSearchConnectionsOutput()
        value.crossClusterSearchConnections = try reader["CrossClusterSearchConnections"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.InboundCrossClusterSearchConnection.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeOutboundCrossClusterSearchConnectionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeOutboundCrossClusterSearchConnectionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeOutboundCrossClusterSearchConnectionsOutput()
        value.crossClusterSearchConnections = try reader["CrossClusterSearchConnections"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.OutboundCrossClusterSearchConnection.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribePackagesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribePackagesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribePackagesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.packageDetailsList = try reader["PackageDetailsList"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.PackageDetails.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeReservedElasticsearchInstanceOfferingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeReservedElasticsearchInstanceOfferingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeReservedElasticsearchInstanceOfferingsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.reservedElasticsearchInstanceOfferings = try reader["ReservedElasticsearchInstanceOfferings"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeReservedElasticsearchInstancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeReservedElasticsearchInstancesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeReservedElasticsearchInstancesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.reservedElasticsearchInstances = try reader["ReservedElasticsearchInstances"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.ReservedElasticsearchInstance.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeVpcEndpointsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeVpcEndpointsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeVpcEndpointsOutput()
        value.vpcEndpointErrors = try reader["VpcEndpointErrors"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.VpcEndpointError.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.vpcEndpoints = try reader["VpcEndpoints"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.VpcEndpoint.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension DissociatePackageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DissociatePackageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DissociatePackageOutput()
        value.domainPackageDetails = try reader["DomainPackageDetails"].readIfPresent(with: ElasticsearchClientTypes.DomainPackageDetails.read(from:))
        return value
    }
}

extension GetCompatibleElasticsearchVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetCompatibleElasticsearchVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetCompatibleElasticsearchVersionsOutput()
        value.compatibleElasticsearchVersions = try reader["CompatibleElasticsearchVersions"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.CompatibleVersionsMap.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetPackageVersionHistoryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPackageVersionHistoryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetPackageVersionHistoryOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.packageID = try reader["PackageID"].readIfPresent()
        value.packageVersionHistoryList = try reader["PackageVersionHistoryList"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.PackageVersionHistory.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetUpgradeHistoryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetUpgradeHistoryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetUpgradeHistoryOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.upgradeHistories = try reader["UpgradeHistories"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.UpgradeHistory.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetUpgradeStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetUpgradeStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetUpgradeStatusOutput()
        value.stepStatus = try reader["StepStatus"].readIfPresent()
        value.upgradeName = try reader["UpgradeName"].readIfPresent()
        value.upgradeStep = try reader["UpgradeStep"].readIfPresent()
        return value
    }
}

extension ListDomainNamesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDomainNamesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDomainNamesOutput()
        value.domainNames = try reader["DomainNames"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.DomainInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListDomainsForPackageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDomainsForPackageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDomainsForPackageOutput()
        value.domainPackageDetailsList = try reader["DomainPackageDetailsList"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.DomainPackageDetails.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListElasticsearchInstanceTypesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListElasticsearchInstanceTypesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListElasticsearchInstanceTypesOutput()
        value.elasticsearchInstanceTypes = try reader["ElasticsearchInstanceTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ElasticsearchClientTypes.ESPartitionInstanceType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListElasticsearchVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListElasticsearchVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListElasticsearchVersionsOutput()
        value.elasticsearchVersions = try reader["ElasticsearchVersions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListPackagesForDomainOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPackagesForDomainOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPackagesForDomainOutput()
        value.domainPackageDetailsList = try reader["DomainPackageDetailsList"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.DomainPackageDetails.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsOutput()
        value.tagList = try reader["TagList"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListVpcEndpointAccessOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListVpcEndpointAccessOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListVpcEndpointAccessOutput()
        value.authorizedPrincipalList = try reader["AuthorizedPrincipalList"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.AuthorizedPrincipal.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent() ?? ""
        return value
    }
}

extension ListVpcEndpointsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListVpcEndpointsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListVpcEndpointsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent() ?? ""
        value.vpcEndpointSummaryList = try reader["VpcEndpointSummaryList"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.VpcEndpointSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListVpcEndpointsForDomainOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListVpcEndpointsForDomainOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListVpcEndpointsForDomainOutput()
        value.nextToken = try reader["NextToken"].readIfPresent() ?? ""
        value.vpcEndpointSummaryList = try reader["VpcEndpointSummaryList"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.VpcEndpointSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension PurchaseReservedElasticsearchInstanceOfferingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PurchaseReservedElasticsearchInstanceOfferingOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PurchaseReservedElasticsearchInstanceOfferingOutput()
        value.reservationName = try reader["ReservationName"].readIfPresent()
        value.reservedElasticsearchInstanceId = try reader["ReservedElasticsearchInstanceId"].readIfPresent()
        return value
    }
}

extension RejectInboundCrossClusterSearchConnectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RejectInboundCrossClusterSearchConnectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RejectInboundCrossClusterSearchConnectionOutput()
        value.crossClusterSearchConnection = try reader["CrossClusterSearchConnection"].readIfPresent(with: ElasticsearchClientTypes.InboundCrossClusterSearchConnection.read(from:))
        return value
    }
}

extension RemoveTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveTagsOutput {
        return RemoveTagsOutput()
    }
}

extension RevokeVpcEndpointAccessOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RevokeVpcEndpointAccessOutput {
        return RevokeVpcEndpointAccessOutput()
    }
}

extension StartElasticsearchServiceSoftwareUpdateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartElasticsearchServiceSoftwareUpdateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartElasticsearchServiceSoftwareUpdateOutput()
        value.serviceSoftwareOptions = try reader["ServiceSoftwareOptions"].readIfPresent(with: ElasticsearchClientTypes.ServiceSoftwareOptions.read(from:))
        return value
    }
}

extension UpdateElasticsearchDomainConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateElasticsearchDomainConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateElasticsearchDomainConfigOutput()
        value.domainConfig = try reader["DomainConfig"].readIfPresent(with: ElasticsearchClientTypes.ElasticsearchDomainConfig.read(from:))
        value.dryRunResults = try reader["DryRunResults"].readIfPresent(with: ElasticsearchClientTypes.DryRunResults.read(from:))
        return value
    }
}

extension UpdatePackageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdatePackageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdatePackageOutput()
        value.packageDetails = try reader["PackageDetails"].readIfPresent(with: ElasticsearchClientTypes.PackageDetails.read(from:))
        return value
    }
}

extension UpdateVpcEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateVpcEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateVpcEndpointOutput()
        value.vpcEndpoint = try reader["VpcEndpoint"].readIfPresent(with: ElasticsearchClientTypes.VpcEndpoint.read(from:))
        return value
    }
}

extension UpgradeElasticsearchDomainOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpgradeElasticsearchDomainOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpgradeElasticsearchDomainOutput()
        value.changeProgressDetails = try reader["ChangeProgressDetails"].readIfPresent(with: ElasticsearchClientTypes.ChangeProgressDetails.read(from:))
        value.domainName = try reader["DomainName"].readIfPresent()
        value.performCheckOnly = try reader["PerformCheckOnly"].readIfPresent()
        value.targetVersion = try reader["TargetVersion"].readIfPresent()
        return value
    }
}

enum AcceptInboundCrossClusterSearchConnectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AddTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AssociatePackageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AuthorizeVpcEndpointAccessOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CancelDomainConfigChangeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CancelElasticsearchServiceSoftwareUpdateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateElasticsearchDomainOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "InvalidTypeException": return try InvalidTypeException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateOutboundCrossClusterSearchConnectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePackageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "InvalidTypeException": return try InvalidTypeException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateVpcEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteElasticsearchDomainOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteElasticsearchServiceRoleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteInboundCrossClusterSearchConnectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteOutboundCrossClusterSearchConnectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePackageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteVpcEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDomainAutoTunesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDomainChangeProgressOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeElasticsearchDomainOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeElasticsearchDomainConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeElasticsearchDomainsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeElasticsearchInstanceTypeLimitsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "InvalidTypeException": return try InvalidTypeException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeInboundCrossClusterSearchConnectionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "InvalidPaginationTokenException": return try InvalidPaginationTokenException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeOutboundCrossClusterSearchConnectionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "InvalidPaginationTokenException": return try InvalidPaginationTokenException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribePackagesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeReservedElasticsearchInstanceOfferingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeReservedElasticsearchInstancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeVpcEndpointsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DissociatePackageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetCompatibleElasticsearchVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPackageVersionHistoryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetUpgradeHistoryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetUpgradeStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDomainNamesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDomainsForPackageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListElasticsearchInstanceTypesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListElasticsearchVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPackagesForDomainOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListVpcEndpointAccessOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListVpcEndpointsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListVpcEndpointsForDomainOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PurchaseReservedElasticsearchInstanceOfferingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RejectInboundCrossClusterSearchConnectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RevokeVpcEndpointAccessOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartElasticsearchServiceSoftwareUpdateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateElasticsearchDomainConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "InvalidTypeException": return try InvalidTypeException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdatePackageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateVpcEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpgradeElasticsearchDomainOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BaseException": return try BaseException.makeError(baseError: baseError)
            case "DisabledOperationException": return try DisabledOperationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DisabledOperationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> DisabledOperationException {
        let reader = baseError.errorBodyReader
        var value = DisabledOperationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BaseException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> BaseException {
        let reader = baseError.errorBodyReader
        var value = BaseException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalException {
        let reader = baseError.errorBodyReader
        var value = InternalException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceAlreadyExistsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceAlreadyExistsException {
        let reader = baseError.errorBodyReader
        var value = ResourceAlreadyExistsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidTypeException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidTypeException {
        let reader = baseError.errorBodyReader
        var value = InvalidTypeException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidPaginationTokenException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidPaginationTokenException {
        let reader = baseError.errorBodyReader
        var value = InvalidPaginationTokenException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ElasticsearchClientTypes.InboundCrossClusterSearchConnection {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.InboundCrossClusterSearchConnection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.InboundCrossClusterSearchConnection()
        value.sourceDomainInfo = try reader["SourceDomainInfo"].readIfPresent(with: ElasticsearchClientTypes.DomainInformation.read(from:))
        value.destinationDomainInfo = try reader["DestinationDomainInfo"].readIfPresent(with: ElasticsearchClientTypes.DomainInformation.read(from:))
        value.crossClusterSearchConnectionId = try reader["CrossClusterSearchConnectionId"].readIfPresent()
        value.connectionStatus = try reader["ConnectionStatus"].readIfPresent(with: ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatus.read(from:))
        return value
    }
}

extension ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatus()
        value.statusCode = try reader["StatusCode"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.DomainInformation {

    static func write(value: ElasticsearchClientTypes.DomainInformation?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DomainName"].write(value.domainName)
        try writer["OwnerId"].write(value.ownerId)
        try writer["Region"].write(value.region)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.DomainInformation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.DomainInformation()
        value.ownerId = try reader["OwnerId"].readIfPresent()
        value.domainName = try reader["DomainName"].readIfPresent() ?? ""
        value.region = try reader["Region"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.DomainPackageDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.DomainPackageDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.DomainPackageDetails()
        value.packageID = try reader["PackageID"].readIfPresent()
        value.packageName = try reader["PackageName"].readIfPresent()
        value.packageType = try reader["PackageType"].readIfPresent()
        value.lastUpdated = try reader["LastUpdated"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.domainName = try reader["DomainName"].readIfPresent()
        value.domainPackageStatus = try reader["DomainPackageStatus"].readIfPresent()
        value.packageVersion = try reader["PackageVersion"].readIfPresent()
        value.referencePath = try reader["ReferencePath"].readIfPresent()
        value.errorDetails = try reader["ErrorDetails"].readIfPresent(with: ElasticsearchClientTypes.ErrorDetails.read(from:))
        return value
    }
}

extension ElasticsearchClientTypes.ErrorDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.ErrorDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.ErrorDetails()
        value.errorType = try reader["ErrorType"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.AuthorizedPrincipal {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.AuthorizedPrincipal {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.AuthorizedPrincipal()
        value.principalType = try reader["PrincipalType"].readIfPresent()
        value.principal = try reader["Principal"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.CancelledChangeProperty {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.CancelledChangeProperty {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.CancelledChangeProperty()
        value.propertyName = try reader["PropertyName"].readIfPresent()
        value.cancelledValue = try reader["CancelledValue"].readIfPresent()
        value.activeValue = try reader["ActiveValue"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.ServiceSoftwareOptions {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.ServiceSoftwareOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.ServiceSoftwareOptions()
        value.currentVersion = try reader["CurrentVersion"].readIfPresent()
        value.newVersion = try reader["NewVersion"].readIfPresent()
        value.updateAvailable = try reader["UpdateAvailable"].readIfPresent()
        value.cancellable = try reader["Cancellable"].readIfPresent()
        value.updateStatus = try reader["UpdateStatus"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.automatedUpdateDate = try reader["AutomatedUpdateDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.optionalDeployment = try reader["OptionalDeployment"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.ElasticsearchDomainStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.ElasticsearchDomainStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.ElasticsearchDomainStatus()
        value.domainId = try reader["DomainId"].readIfPresent() ?? ""
        value.domainName = try reader["DomainName"].readIfPresent() ?? ""
        value.arn = try reader["ARN"].readIfPresent() ?? ""
        value.created = try reader["Created"].readIfPresent()
        value.deleted = try reader["Deleted"].readIfPresent()
        value.endpoint = try reader["Endpoint"].readIfPresent()
        value.endpoints = try reader["Endpoints"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.processing = try reader["Processing"].readIfPresent()
        value.upgradeProcessing = try reader["UpgradeProcessing"].readIfPresent()
        value.elasticsearchVersion = try reader["ElasticsearchVersion"].readIfPresent()
        value.elasticsearchClusterConfig = try reader["ElasticsearchClusterConfig"].readIfPresent(with: ElasticsearchClientTypes.ElasticsearchClusterConfig.read(from:))
        value.ebsOptions = try reader["EBSOptions"].readIfPresent(with: ElasticsearchClientTypes.EBSOptions.read(from:))
        value.accessPolicies = try reader["AccessPolicies"].readIfPresent()
        value.snapshotOptions = try reader["SnapshotOptions"].readIfPresent(with: ElasticsearchClientTypes.SnapshotOptions.read(from:))
        value.vpcOptions = try reader["VPCOptions"].readIfPresent(with: ElasticsearchClientTypes.VPCDerivedInfo.read(from:))
        value.cognitoOptions = try reader["CognitoOptions"].readIfPresent(with: ElasticsearchClientTypes.CognitoOptions.read(from:))
        value.encryptionAtRestOptions = try reader["EncryptionAtRestOptions"].readIfPresent(with: ElasticsearchClientTypes.EncryptionAtRestOptions.read(from:))
        value.nodeToNodeEncryptionOptions = try reader["NodeToNodeEncryptionOptions"].readIfPresent(with: ElasticsearchClientTypes.NodeToNodeEncryptionOptions.read(from:))
        value.advancedOptions = try reader["AdvancedOptions"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.logPublishingOptions = try reader["LogPublishingOptions"].readMapIfPresent(valueReadingClosure: ElasticsearchClientTypes.LogPublishingOption.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.serviceSoftwareOptions = try reader["ServiceSoftwareOptions"].readIfPresent(with: ElasticsearchClientTypes.ServiceSoftwareOptions.read(from:))
        value.domainEndpointOptions = try reader["DomainEndpointOptions"].readIfPresent(with: ElasticsearchClientTypes.DomainEndpointOptions.read(from:))
        value.advancedSecurityOptions = try reader["AdvancedSecurityOptions"].readIfPresent(with: ElasticsearchClientTypes.AdvancedSecurityOptions.read(from:))
        value.autoTuneOptions = try reader["AutoTuneOptions"].readIfPresent(with: ElasticsearchClientTypes.AutoTuneOptionsOutput.read(from:))
        value.changeProgressDetails = try reader["ChangeProgressDetails"].readIfPresent(with: ElasticsearchClientTypes.ChangeProgressDetails.read(from:))
        value.domainProcessingStatus = try reader["DomainProcessingStatus"].readIfPresent()
        value.modifyingProperties = try reader["ModifyingProperties"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.ModifyingProperties.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticsearchClientTypes.ModifyingProperties {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.ModifyingProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.ModifyingProperties()
        value.name = try reader["Name"].readIfPresent()
        value.activeValue = try reader["ActiveValue"].readIfPresent()
        value.pendingValue = try reader["PendingValue"].readIfPresent()
        value.valueType = try reader["ValueType"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.ChangeProgressDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.ChangeProgressDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.ChangeProgressDetails()
        value.changeId = try reader["ChangeId"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.configChangeStatus = try reader["ConfigChangeStatus"].readIfPresent()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.initiatedBy = try reader["InitiatedBy"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.AutoTuneOptionsOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.AutoTuneOptionsOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.AutoTuneOptionsOutput()
        value.state = try reader["State"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.AdvancedSecurityOptions {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.AdvancedSecurityOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.AdvancedSecurityOptions()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.internalUserDatabaseEnabled = try reader["InternalUserDatabaseEnabled"].readIfPresent()
        value.samlOptions = try reader["SAMLOptions"].readIfPresent(with: ElasticsearchClientTypes.SAMLOptionsOutput.read(from:))
        value.anonymousAuthDisableDate = try reader["AnonymousAuthDisableDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.anonymousAuthEnabled = try reader["AnonymousAuthEnabled"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.SAMLOptionsOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.SAMLOptionsOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.SAMLOptionsOutput()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.idp = try reader["Idp"].readIfPresent(with: ElasticsearchClientTypes.SAMLIdp.read(from:))
        value.subjectKey = try reader["SubjectKey"].readIfPresent()
        value.rolesKey = try reader["RolesKey"].readIfPresent()
        value.sessionTimeoutMinutes = try reader["SessionTimeoutMinutes"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.SAMLIdp {

    static func write(value: ElasticsearchClientTypes.SAMLIdp?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EntityId"].write(value.entityId)
        try writer["MetadataContent"].write(value.metadataContent)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.SAMLIdp {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.SAMLIdp()
        value.metadataContent = try reader["MetadataContent"].readIfPresent() ?? ""
        value.entityId = try reader["EntityId"].readIfPresent() ?? ""
        return value
    }
}

extension ElasticsearchClientTypes.DomainEndpointOptions {

    static func write(value: ElasticsearchClientTypes.DomainEndpointOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomEndpoint"].write(value.customEndpoint)
        try writer["CustomEndpointCertificateArn"].write(value.customEndpointCertificateArn)
        try writer["CustomEndpointEnabled"].write(value.customEndpointEnabled)
        try writer["EnforceHTTPS"].write(value.enforceHTTPS)
        try writer["TLSSecurityPolicy"].write(value.tlsSecurityPolicy)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.DomainEndpointOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.DomainEndpointOptions()
        value.enforceHTTPS = try reader["EnforceHTTPS"].readIfPresent()
        value.tlsSecurityPolicy = try reader["TLSSecurityPolicy"].readIfPresent()
        value.customEndpointEnabled = try reader["CustomEndpointEnabled"].readIfPresent()
        value.customEndpoint = try reader["CustomEndpoint"].readIfPresent()
        value.customEndpointCertificateArn = try reader["CustomEndpointCertificateArn"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.LogPublishingOption {

    static func write(value: ElasticsearchClientTypes.LogPublishingOption?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CloudWatchLogsLogGroupArn"].write(value.cloudWatchLogsLogGroupArn)
        try writer["Enabled"].write(value.enabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.LogPublishingOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.LogPublishingOption()
        value.cloudWatchLogsLogGroupArn = try reader["CloudWatchLogsLogGroupArn"].readIfPresent()
        value.enabled = try reader["Enabled"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.NodeToNodeEncryptionOptions {

    static func write(value: ElasticsearchClientTypes.NodeToNodeEncryptionOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.NodeToNodeEncryptionOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.NodeToNodeEncryptionOptions()
        value.enabled = try reader["Enabled"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.EncryptionAtRestOptions {

    static func write(value: ElasticsearchClientTypes.EncryptionAtRestOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["KmsKeyId"].write(value.kmsKeyId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.EncryptionAtRestOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.EncryptionAtRestOptions()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.CognitoOptions {

    static func write(value: ElasticsearchClientTypes.CognitoOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["IdentityPoolId"].write(value.identityPoolId)
        try writer["RoleArn"].write(value.roleArn)
        try writer["UserPoolId"].write(value.userPoolId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.CognitoOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.CognitoOptions()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.userPoolId = try reader["UserPoolId"].readIfPresent()
        value.identityPoolId = try reader["IdentityPoolId"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.VPCDerivedInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.VPCDerivedInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.VPCDerivedInfo()
        value.vpcId = try reader["VPCId"].readIfPresent()
        value.subnetIds = try reader["SubnetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.availabilityZones = try reader["AvailabilityZones"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.securityGroupIds = try reader["SecurityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticsearchClientTypes.SnapshotOptions {

    static func write(value: ElasticsearchClientTypes.SnapshotOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutomatedSnapshotStartHour"].write(value.automatedSnapshotStartHour)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.SnapshotOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.SnapshotOptions()
        value.automatedSnapshotStartHour = try reader["AutomatedSnapshotStartHour"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.EBSOptions {

    static func write(value: ElasticsearchClientTypes.EBSOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EBSEnabled"].write(value.ebsEnabled)
        try writer["Iops"].write(value.iops)
        try writer["Throughput"].write(value.throughput)
        try writer["VolumeSize"].write(value.volumeSize)
        try writer["VolumeType"].write(value.volumeType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.EBSOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.EBSOptions()
        value.ebsEnabled = try reader["EBSEnabled"].readIfPresent()
        value.volumeType = try reader["VolumeType"].readIfPresent()
        value.volumeSize = try reader["VolumeSize"].readIfPresent()
        value.iops = try reader["Iops"].readIfPresent()
        value.throughput = try reader["Throughput"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.ElasticsearchClusterConfig {

    static func write(value: ElasticsearchClientTypes.ElasticsearchClusterConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ColdStorageOptions"].write(value.coldStorageOptions, with: ElasticsearchClientTypes.ColdStorageOptions.write(value:to:))
        try writer["DedicatedMasterCount"].write(value.dedicatedMasterCount)
        try writer["DedicatedMasterEnabled"].write(value.dedicatedMasterEnabled)
        try writer["DedicatedMasterType"].write(value.dedicatedMasterType)
        try writer["InstanceCount"].write(value.instanceCount)
        try writer["InstanceType"].write(value.instanceType)
        try writer["WarmCount"].write(value.warmCount)
        try writer["WarmEnabled"].write(value.warmEnabled)
        try writer["WarmType"].write(value.warmType)
        try writer["ZoneAwarenessConfig"].write(value.zoneAwarenessConfig, with: ElasticsearchClientTypes.ZoneAwarenessConfig.write(value:to:))
        try writer["ZoneAwarenessEnabled"].write(value.zoneAwarenessEnabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.ElasticsearchClusterConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.ElasticsearchClusterConfig()
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.instanceCount = try reader["InstanceCount"].readIfPresent()
        value.dedicatedMasterEnabled = try reader["DedicatedMasterEnabled"].readIfPresent()
        value.zoneAwarenessEnabled = try reader["ZoneAwarenessEnabled"].readIfPresent()
        value.zoneAwarenessConfig = try reader["ZoneAwarenessConfig"].readIfPresent(with: ElasticsearchClientTypes.ZoneAwarenessConfig.read(from:))
        value.dedicatedMasterType = try reader["DedicatedMasterType"].readIfPresent()
        value.dedicatedMasterCount = try reader["DedicatedMasterCount"].readIfPresent()
        value.warmEnabled = try reader["WarmEnabled"].readIfPresent()
        value.warmType = try reader["WarmType"].readIfPresent()
        value.warmCount = try reader["WarmCount"].readIfPresent()
        value.coldStorageOptions = try reader["ColdStorageOptions"].readIfPresent(with: ElasticsearchClientTypes.ColdStorageOptions.read(from:))
        return value
    }
}

extension ElasticsearchClientTypes.ColdStorageOptions {

    static func write(value: ElasticsearchClientTypes.ColdStorageOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.ColdStorageOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.ColdStorageOptions()
        value.enabled = try reader["Enabled"].readIfPresent() ?? false
        return value
    }
}

extension ElasticsearchClientTypes.ZoneAwarenessConfig {

    static func write(value: ElasticsearchClientTypes.ZoneAwarenessConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AvailabilityZoneCount"].write(value.availabilityZoneCount)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.ZoneAwarenessConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.ZoneAwarenessConfig()
        value.availabilityZoneCount = try reader["AvailabilityZoneCount"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus()
        value.statusCode = try reader["StatusCode"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.PackageDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.PackageDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.PackageDetails()
        value.packageID = try reader["PackageID"].readIfPresent()
        value.packageName = try reader["PackageName"].readIfPresent()
        value.packageType = try reader["PackageType"].readIfPresent()
        value.packageDescription = try reader["PackageDescription"].readIfPresent()
        value.packageStatus = try reader["PackageStatus"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedAt = try reader["LastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.availablePackageVersion = try reader["AvailablePackageVersion"].readIfPresent()
        value.errorDetails = try reader["ErrorDetails"].readIfPresent(with: ElasticsearchClientTypes.ErrorDetails.read(from:))
        return value
    }
}

extension ElasticsearchClientTypes.VpcEndpoint {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.VpcEndpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.VpcEndpoint()
        value.vpcEndpointId = try reader["VpcEndpointId"].readIfPresent()
        value.vpcEndpointOwner = try reader["VpcEndpointOwner"].readIfPresent()
        value.domainArn = try reader["DomainArn"].readIfPresent()
        value.vpcOptions = try reader["VpcOptions"].readIfPresent(with: ElasticsearchClientTypes.VPCDerivedInfo.read(from:))
        value.status = try reader["Status"].readIfPresent()
        value.endpoint = try reader["Endpoint"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.OutboundCrossClusterSearchConnection {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.OutboundCrossClusterSearchConnection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.OutboundCrossClusterSearchConnection()
        value.sourceDomainInfo = try reader["SourceDomainInfo"].readIfPresent(with: ElasticsearchClientTypes.DomainInformation.read(from:))
        value.destinationDomainInfo = try reader["DestinationDomainInfo"].readIfPresent(with: ElasticsearchClientTypes.DomainInformation.read(from:))
        value.crossClusterSearchConnectionId = try reader["CrossClusterSearchConnectionId"].readIfPresent()
        value.connectionAlias = try reader["ConnectionAlias"].readIfPresent()
        value.connectionStatus = try reader["ConnectionStatus"].readIfPresent(with: ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus.read(from:))
        return value
    }
}

extension ElasticsearchClientTypes.VpcEndpointSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.VpcEndpointSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.VpcEndpointSummary()
        value.vpcEndpointId = try reader["VpcEndpointId"].readIfPresent()
        value.vpcEndpointOwner = try reader["VpcEndpointOwner"].readIfPresent()
        value.domainArn = try reader["DomainArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.AutoTune {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.AutoTune {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.AutoTune()
        value.autoTuneType = try reader["AutoTuneType"].readIfPresent()
        value.autoTuneDetails = try reader["AutoTuneDetails"].readIfPresent(with: ElasticsearchClientTypes.AutoTuneDetails.read(from:))
        return value
    }
}

extension ElasticsearchClientTypes.AutoTuneDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.AutoTuneDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.AutoTuneDetails()
        value.scheduledAutoTuneDetails = try reader["ScheduledAutoTuneDetails"].readIfPresent(with: ElasticsearchClientTypes.ScheduledAutoTuneDetails.read(from:))
        return value
    }
}

extension ElasticsearchClientTypes.ScheduledAutoTuneDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.ScheduledAutoTuneDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.ScheduledAutoTuneDetails()
        value.date = try reader["Date"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.actionType = try reader["ActionType"].readIfPresent()
        value.action = try reader["Action"].readIfPresent()
        value.severity = try reader["Severity"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.ChangeProgressStatusDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.ChangeProgressStatusDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.ChangeProgressStatusDetails()
        value.changeId = try reader["ChangeId"].readIfPresent()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["Status"].readIfPresent()
        value.pendingProperties = try reader["PendingProperties"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.completedProperties = try reader["CompletedProperties"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.totalNumberOfStages = try reader["TotalNumberOfStages"].readIfPresent() ?? 0
        value.changeProgressStages = try reader["ChangeProgressStages"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.ChangeProgressStage.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.configChangeStatus = try reader["ConfigChangeStatus"].readIfPresent()
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.initiatedBy = try reader["InitiatedBy"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.ChangeProgressStage {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.ChangeProgressStage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.ChangeProgressStage()
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.lastUpdated = try reader["LastUpdated"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension ElasticsearchClientTypes.ElasticsearchDomainConfig {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.ElasticsearchDomainConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.ElasticsearchDomainConfig()
        value.elasticsearchVersion = try reader["ElasticsearchVersion"].readIfPresent(with: ElasticsearchClientTypes.ElasticsearchVersionStatus.read(from:))
        value.elasticsearchClusterConfig = try reader["ElasticsearchClusterConfig"].readIfPresent(with: ElasticsearchClientTypes.ElasticsearchClusterConfigStatus.read(from:))
        value.ebsOptions = try reader["EBSOptions"].readIfPresent(with: ElasticsearchClientTypes.EBSOptionsStatus.read(from:))
        value.accessPolicies = try reader["AccessPolicies"].readIfPresent(with: ElasticsearchClientTypes.AccessPoliciesStatus.read(from:))
        value.snapshotOptions = try reader["SnapshotOptions"].readIfPresent(with: ElasticsearchClientTypes.SnapshotOptionsStatus.read(from:))
        value.vpcOptions = try reader["VPCOptions"].readIfPresent(with: ElasticsearchClientTypes.VPCDerivedInfoStatus.read(from:))
        value.cognitoOptions = try reader["CognitoOptions"].readIfPresent(with: ElasticsearchClientTypes.CognitoOptionsStatus.read(from:))
        value.encryptionAtRestOptions = try reader["EncryptionAtRestOptions"].readIfPresent(with: ElasticsearchClientTypes.EncryptionAtRestOptionsStatus.read(from:))
        value.nodeToNodeEncryptionOptions = try reader["NodeToNodeEncryptionOptions"].readIfPresent(with: ElasticsearchClientTypes.NodeToNodeEncryptionOptionsStatus.read(from:))
        value.advancedOptions = try reader["AdvancedOptions"].readIfPresent(with: ElasticsearchClientTypes.AdvancedOptionsStatus.read(from:))
        value.logPublishingOptions = try reader["LogPublishingOptions"].readIfPresent(with: ElasticsearchClientTypes.LogPublishingOptionsStatus.read(from:))
        value.domainEndpointOptions = try reader["DomainEndpointOptions"].readIfPresent(with: ElasticsearchClientTypes.DomainEndpointOptionsStatus.read(from:))
        value.advancedSecurityOptions = try reader["AdvancedSecurityOptions"].readIfPresent(with: ElasticsearchClientTypes.AdvancedSecurityOptionsStatus.read(from:))
        value.autoTuneOptions = try reader["AutoTuneOptions"].readIfPresent(with: ElasticsearchClientTypes.AutoTuneOptionsStatus.read(from:))
        value.changeProgressDetails = try reader["ChangeProgressDetails"].readIfPresent(with: ElasticsearchClientTypes.ChangeProgressDetails.read(from:))
        value.modifyingProperties = try reader["ModifyingProperties"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.ModifyingProperties.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticsearchClientTypes.AutoTuneOptionsStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.AutoTuneOptionsStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.AutoTuneOptionsStatus()
        value.options = try reader["Options"].readIfPresent(with: ElasticsearchClientTypes.AutoTuneOptions.read(from:))
        value.status = try reader["Status"].readIfPresent(with: ElasticsearchClientTypes.AutoTuneStatus.read(from:))
        return value
    }
}

extension ElasticsearchClientTypes.AutoTuneStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.AutoTuneStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.AutoTuneStatus()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.updateDate = try reader["UpdateDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.updateVersion = try reader["UpdateVersion"].readIfPresent() ?? 0
        value.state = try reader["State"].readIfPresent() ?? .sdkUnknown("")
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        value.pendingDeletion = try reader["PendingDeletion"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.AutoTuneOptions {

    static func write(value: ElasticsearchClientTypes.AutoTuneOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DesiredState"].write(value.desiredState)
        try writer["MaintenanceSchedules"].writeList(value.maintenanceSchedules, memberWritingClosure: ElasticsearchClientTypes.AutoTuneMaintenanceSchedule.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["RollbackOnDisable"].write(value.rollbackOnDisable)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.AutoTuneOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.AutoTuneOptions()
        value.desiredState = try reader["DesiredState"].readIfPresent()
        value.rollbackOnDisable = try reader["RollbackOnDisable"].readIfPresent()
        value.maintenanceSchedules = try reader["MaintenanceSchedules"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.AutoTuneMaintenanceSchedule.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticsearchClientTypes.AutoTuneMaintenanceSchedule {

    static func write(value: ElasticsearchClientTypes.AutoTuneMaintenanceSchedule?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CronExpressionForRecurrence"].write(value.cronExpressionForRecurrence)
        try writer["Duration"].write(value.duration, with: ElasticsearchClientTypes.Duration.write(value:to:))
        try writer["StartAt"].writeTimestamp(value.startAt, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.AutoTuneMaintenanceSchedule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.AutoTuneMaintenanceSchedule()
        value.startAt = try reader["StartAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.duration = try reader["Duration"].readIfPresent(with: ElasticsearchClientTypes.Duration.read(from:))
        value.cronExpressionForRecurrence = try reader["CronExpressionForRecurrence"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.Duration {

    static func write(value: ElasticsearchClientTypes.Duration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Unit"].write(value.unit)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.Duration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.Duration()
        value.value = try reader["Value"].readIfPresent()
        value.unit = try reader["Unit"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.AdvancedSecurityOptionsStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.AdvancedSecurityOptionsStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.AdvancedSecurityOptionsStatus()
        value.options = try reader["Options"].readIfPresent(with: ElasticsearchClientTypes.AdvancedSecurityOptions.read(from:))
        value.status = try reader["Status"].readIfPresent(with: ElasticsearchClientTypes.OptionStatus.read(from:))
        return value
    }
}

extension ElasticsearchClientTypes.OptionStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.OptionStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.OptionStatus()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.updateDate = try reader["UpdateDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.updateVersion = try reader["UpdateVersion"].readIfPresent() ?? 0
        value.state = try reader["State"].readIfPresent() ?? .sdkUnknown("")
        value.pendingDeletion = try reader["PendingDeletion"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.DomainEndpointOptionsStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.DomainEndpointOptionsStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.DomainEndpointOptionsStatus()
        value.options = try reader["Options"].readIfPresent(with: ElasticsearchClientTypes.DomainEndpointOptions.read(from:))
        value.status = try reader["Status"].readIfPresent(with: ElasticsearchClientTypes.OptionStatus.read(from:))
        return value
    }
}

extension ElasticsearchClientTypes.LogPublishingOptionsStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.LogPublishingOptionsStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.LogPublishingOptionsStatus()
        value.options = try reader["Options"].readMapIfPresent(valueReadingClosure: ElasticsearchClientTypes.LogPublishingOption.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.status = try reader["Status"].readIfPresent(with: ElasticsearchClientTypes.OptionStatus.read(from:))
        return value
    }
}

extension ElasticsearchClientTypes.AdvancedOptionsStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.AdvancedOptionsStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.AdvancedOptionsStatus()
        value.options = try reader["Options"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        value.status = try reader["Status"].readIfPresent(with: ElasticsearchClientTypes.OptionStatus.read(from:))
        return value
    }
}

extension ElasticsearchClientTypes.NodeToNodeEncryptionOptionsStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.NodeToNodeEncryptionOptionsStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.NodeToNodeEncryptionOptionsStatus()
        value.options = try reader["Options"].readIfPresent(with: ElasticsearchClientTypes.NodeToNodeEncryptionOptions.read(from:))
        value.status = try reader["Status"].readIfPresent(with: ElasticsearchClientTypes.OptionStatus.read(from:))
        return value
    }
}

extension ElasticsearchClientTypes.EncryptionAtRestOptionsStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.EncryptionAtRestOptionsStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.EncryptionAtRestOptionsStatus()
        value.options = try reader["Options"].readIfPresent(with: ElasticsearchClientTypes.EncryptionAtRestOptions.read(from:))
        value.status = try reader["Status"].readIfPresent(with: ElasticsearchClientTypes.OptionStatus.read(from:))
        return value
    }
}

extension ElasticsearchClientTypes.CognitoOptionsStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.CognitoOptionsStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.CognitoOptionsStatus()
        value.options = try reader["Options"].readIfPresent(with: ElasticsearchClientTypes.CognitoOptions.read(from:))
        value.status = try reader["Status"].readIfPresent(with: ElasticsearchClientTypes.OptionStatus.read(from:))
        return value
    }
}

extension ElasticsearchClientTypes.VPCDerivedInfoStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.VPCDerivedInfoStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.VPCDerivedInfoStatus()
        value.options = try reader["Options"].readIfPresent(with: ElasticsearchClientTypes.VPCDerivedInfo.read(from:))
        value.status = try reader["Status"].readIfPresent(with: ElasticsearchClientTypes.OptionStatus.read(from:))
        return value
    }
}

extension ElasticsearchClientTypes.SnapshotOptionsStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.SnapshotOptionsStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.SnapshotOptionsStatus()
        value.options = try reader["Options"].readIfPresent(with: ElasticsearchClientTypes.SnapshotOptions.read(from:))
        value.status = try reader["Status"].readIfPresent(with: ElasticsearchClientTypes.OptionStatus.read(from:))
        return value
    }
}

extension ElasticsearchClientTypes.AccessPoliciesStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.AccessPoliciesStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.AccessPoliciesStatus()
        value.options = try reader["Options"].readIfPresent() ?? ""
        value.status = try reader["Status"].readIfPresent(with: ElasticsearchClientTypes.OptionStatus.read(from:))
        return value
    }
}

extension ElasticsearchClientTypes.EBSOptionsStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.EBSOptionsStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.EBSOptionsStatus()
        value.options = try reader["Options"].readIfPresent(with: ElasticsearchClientTypes.EBSOptions.read(from:))
        value.status = try reader["Status"].readIfPresent(with: ElasticsearchClientTypes.OptionStatus.read(from:))
        return value
    }
}

extension ElasticsearchClientTypes.ElasticsearchClusterConfigStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.ElasticsearchClusterConfigStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.ElasticsearchClusterConfigStatus()
        value.options = try reader["Options"].readIfPresent(with: ElasticsearchClientTypes.ElasticsearchClusterConfig.read(from:))
        value.status = try reader["Status"].readIfPresent(with: ElasticsearchClientTypes.OptionStatus.read(from:))
        return value
    }
}

extension ElasticsearchClientTypes.ElasticsearchVersionStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.ElasticsearchVersionStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.ElasticsearchVersionStatus()
        value.options = try reader["Options"].readIfPresent() ?? ""
        value.status = try reader["Status"].readIfPresent(with: ElasticsearchClientTypes.OptionStatus.read(from:))
        return value
    }
}

extension ElasticsearchClientTypes.Limits {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.Limits {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.Limits()
        value.storageTypes = try reader["StorageTypes"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.StorageType.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.instanceLimits = try reader["InstanceLimits"].readIfPresent(with: ElasticsearchClientTypes.InstanceLimits.read(from:))
        value.additionalLimits = try reader["AdditionalLimits"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.AdditionalLimit.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticsearchClientTypes.AdditionalLimit {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.AdditionalLimit {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.AdditionalLimit()
        value.limitName = try reader["LimitName"].readIfPresent()
        value.limitValues = try reader["LimitValues"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticsearchClientTypes.InstanceLimits {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.InstanceLimits {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.InstanceLimits()
        value.instanceCountLimits = try reader["InstanceCountLimits"].readIfPresent(with: ElasticsearchClientTypes.InstanceCountLimits.read(from:))
        return value
    }
}

extension ElasticsearchClientTypes.InstanceCountLimits {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.InstanceCountLimits {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.InstanceCountLimits()
        value.minimumInstanceCount = try reader["MinimumInstanceCount"].readIfPresent() ?? 0
        value.maximumInstanceCount = try reader["MaximumInstanceCount"].readIfPresent() ?? 0
        return value
    }
}

extension ElasticsearchClientTypes.StorageType {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.StorageType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.StorageType()
        value.storageTypeName = try reader["StorageTypeName"].readIfPresent()
        value.storageSubTypeName = try reader["StorageSubTypeName"].readIfPresent()
        value.storageTypeLimits = try reader["StorageTypeLimits"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.StorageTypeLimit.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticsearchClientTypes.StorageTypeLimit {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.StorageTypeLimit {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.StorageTypeLimit()
        value.limitName = try reader["LimitName"].readIfPresent()
        value.limitValues = try reader["LimitValues"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering()
        value.reservedElasticsearchInstanceOfferingId = try reader["ReservedElasticsearchInstanceOfferingId"].readIfPresent()
        value.elasticsearchInstanceType = try reader["ElasticsearchInstanceType"].readIfPresent()
        value.duration = try reader["Duration"].readIfPresent() ?? 0
        value.fixedPrice = try reader["FixedPrice"].readIfPresent()
        value.usagePrice = try reader["UsagePrice"].readIfPresent()
        value.currencyCode = try reader["CurrencyCode"].readIfPresent()
        value.paymentOption = try reader["PaymentOption"].readIfPresent()
        value.recurringCharges = try reader["RecurringCharges"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.RecurringCharge.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticsearchClientTypes.RecurringCharge {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.RecurringCharge {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.RecurringCharge()
        value.recurringChargeAmount = try reader["RecurringChargeAmount"].readIfPresent()
        value.recurringChargeFrequency = try reader["RecurringChargeFrequency"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.ReservedElasticsearchInstance {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.ReservedElasticsearchInstance {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.ReservedElasticsearchInstance()
        value.reservationName = try reader["ReservationName"].readIfPresent()
        value.reservedElasticsearchInstanceId = try reader["ReservedElasticsearchInstanceId"].readIfPresent()
        value.reservedElasticsearchInstanceOfferingId = try reader["ReservedElasticsearchInstanceOfferingId"].readIfPresent()
        value.elasticsearchInstanceType = try reader["ElasticsearchInstanceType"].readIfPresent()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.duration = try reader["Duration"].readIfPresent() ?? 0
        value.fixedPrice = try reader["FixedPrice"].readIfPresent()
        value.usagePrice = try reader["UsagePrice"].readIfPresent()
        value.currencyCode = try reader["CurrencyCode"].readIfPresent()
        value.elasticsearchInstanceCount = try reader["ElasticsearchInstanceCount"].readIfPresent() ?? 0
        value.state = try reader["State"].readIfPresent()
        value.paymentOption = try reader["PaymentOption"].readIfPresent()
        value.recurringCharges = try reader["RecurringCharges"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.RecurringCharge.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticsearchClientTypes.VpcEndpointError {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.VpcEndpointError {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.VpcEndpointError()
        value.vpcEndpointId = try reader["VpcEndpointId"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.CompatibleVersionsMap {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.CompatibleVersionsMap {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.CompatibleVersionsMap()
        value.sourceVersion = try reader["SourceVersion"].readIfPresent()
        value.targetVersions = try reader["TargetVersions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticsearchClientTypes.PackageVersionHistory {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.PackageVersionHistory {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.PackageVersionHistory()
        value.packageVersion = try reader["PackageVersion"].readIfPresent()
        value.commitMessage = try reader["CommitMessage"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension ElasticsearchClientTypes.UpgradeHistory {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.UpgradeHistory {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.UpgradeHistory()
        value.upgradeName = try reader["UpgradeName"].readIfPresent()
        value.startTimestamp = try reader["StartTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.upgradeStatus = try reader["UpgradeStatus"].readIfPresent()
        value.stepsList = try reader["StepsList"].readListIfPresent(memberReadingClosure: ElasticsearchClientTypes.UpgradeStepItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticsearchClientTypes.UpgradeStepItem {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.UpgradeStepItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.UpgradeStepItem()
        value.upgradeStep = try reader["UpgradeStep"].readIfPresent()
        value.upgradeStepStatus = try reader["UpgradeStepStatus"].readIfPresent()
        value.issues = try reader["Issues"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.progressPercent = try reader["ProgressPercent"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.DomainInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.DomainInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.DomainInfo()
        value.domainName = try reader["DomainName"].readIfPresent()
        value.engineType = try reader["EngineType"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.Tag {

    static func write(value: ElasticsearchClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension ElasticsearchClientTypes.DryRunResults {

    static func read(from reader: SmithyJSON.Reader) throws -> ElasticsearchClientTypes.DryRunResults {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticsearchClientTypes.DryRunResults()
        value.deploymentType = try reader["DeploymentType"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension ElasticsearchClientTypes.VPCOptions {

    static func write(value: ElasticsearchClientTypes.VPCOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SubnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ElasticsearchClientTypes.AdvancedSecurityOptionsInput {

    static func write(value: ElasticsearchClientTypes.AdvancedSecurityOptionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AnonymousAuthEnabled"].write(value.anonymousAuthEnabled)
        try writer["Enabled"].write(value.enabled)
        try writer["InternalUserDatabaseEnabled"].write(value.internalUserDatabaseEnabled)
        try writer["MasterUserOptions"].write(value.masterUserOptions, with: ElasticsearchClientTypes.MasterUserOptions.write(value:to:))
        try writer["SAMLOptions"].write(value.samlOptions, with: ElasticsearchClientTypes.SAMLOptionsInput.write(value:to:))
    }
}

extension ElasticsearchClientTypes.SAMLOptionsInput {

    static func write(value: ElasticsearchClientTypes.SAMLOptionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["Idp"].write(value.idp, with: ElasticsearchClientTypes.SAMLIdp.write(value:to:))
        try writer["MasterBackendRole"].write(value.masterBackendRole)
        try writer["MasterUserName"].write(value.masterUserName)
        try writer["RolesKey"].write(value.rolesKey)
        try writer["SessionTimeoutMinutes"].write(value.sessionTimeoutMinutes)
        try writer["SubjectKey"].write(value.subjectKey)
    }
}

extension ElasticsearchClientTypes.MasterUserOptions {

    static func write(value: ElasticsearchClientTypes.MasterUserOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MasterUserARN"].write(value.masterUserARN)
        try writer["MasterUserName"].write(value.masterUserName)
        try writer["MasterUserPassword"].write(value.masterUserPassword)
    }
}

extension ElasticsearchClientTypes.AutoTuneOptionsInput {

    static func write(value: ElasticsearchClientTypes.AutoTuneOptionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DesiredState"].write(value.desiredState)
        try writer["MaintenanceSchedules"].writeList(value.maintenanceSchedules, memberWritingClosure: ElasticsearchClientTypes.AutoTuneMaintenanceSchedule.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ElasticsearchClientTypes.PackageSource {

    static func write(value: ElasticsearchClientTypes.PackageSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3BucketName"].write(value.s3BucketName)
        try writer["S3Key"].write(value.s3Key)
    }
}

extension ElasticsearchClientTypes.Filter {

    static func write(value: ElasticsearchClientTypes.Filter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ElasticsearchClientTypes.DescribePackagesFilter {

    static func write(value: ElasticsearchClientTypes.DescribePackagesFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Value"].writeList(value.value, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public enum ElasticsearchClientTypes {}
