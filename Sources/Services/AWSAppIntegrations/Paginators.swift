// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppIntegrationsClient {
    /// Paginate over `[ListApplicationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListApplicationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListApplicationsOutput`
    public func listApplicationsPaginated(input: ListApplicationsInput) -> ClientRuntime.PaginatorSequence<ListApplicationsInput, ListApplicationsOutput> {
        return ClientRuntime.PaginatorSequence<ListApplicationsInput, ListApplicationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listApplications(input:))
    }
}

extension ListApplicationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListApplicationsInput {
        return ListApplicationsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListApplicationsInput, OperationStackOutput == ListApplicationsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listApplicationsPaginated`
    /// to access the nested member `[AppIntegrationsClientTypes.ApplicationSummary]`
    /// - Returns: `[AppIntegrationsClientTypes.ApplicationSummary]`
    public func applications() async throws -> [AppIntegrationsClientTypes.ApplicationSummary] {
        return try await self.asyncCompactMap { item in item.applications }
    }
}
extension AppIntegrationsClient {
    /// Paginate over `[ListDataIntegrationAssociationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDataIntegrationAssociationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDataIntegrationAssociationsOutput`
    public func listDataIntegrationAssociationsPaginated(input: ListDataIntegrationAssociationsInput) -> ClientRuntime.PaginatorSequence<ListDataIntegrationAssociationsInput, ListDataIntegrationAssociationsOutput> {
        return ClientRuntime.PaginatorSequence<ListDataIntegrationAssociationsInput, ListDataIntegrationAssociationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listDataIntegrationAssociations(input:))
    }
}

extension ListDataIntegrationAssociationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDataIntegrationAssociationsInput {
        return ListDataIntegrationAssociationsInput(
            dataIntegrationIdentifier: self.dataIntegrationIdentifier,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListDataIntegrationAssociationsInput, OperationStackOutput == ListDataIntegrationAssociationsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listDataIntegrationAssociationsPaginated`
    /// to access the nested member `[AppIntegrationsClientTypes.DataIntegrationAssociationSummary]`
    /// - Returns: `[AppIntegrationsClientTypes.DataIntegrationAssociationSummary]`
    public func dataIntegrationAssociations() async throws -> [AppIntegrationsClientTypes.DataIntegrationAssociationSummary] {
        return try await self.asyncCompactMap { item in item.dataIntegrationAssociations }
    }
}
extension AppIntegrationsClient {
    /// Paginate over `[ListDataIntegrationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDataIntegrationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDataIntegrationsOutput`
    public func listDataIntegrationsPaginated(input: ListDataIntegrationsInput) -> ClientRuntime.PaginatorSequence<ListDataIntegrationsInput, ListDataIntegrationsOutput> {
        return ClientRuntime.PaginatorSequence<ListDataIntegrationsInput, ListDataIntegrationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listDataIntegrations(input:))
    }
}

extension ListDataIntegrationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDataIntegrationsInput {
        return ListDataIntegrationsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListDataIntegrationsInput, OperationStackOutput == ListDataIntegrationsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listDataIntegrationsPaginated`
    /// to access the nested member `[AppIntegrationsClientTypes.DataIntegrationSummary]`
    /// - Returns: `[AppIntegrationsClientTypes.DataIntegrationSummary]`
    public func dataIntegrations() async throws -> [AppIntegrationsClientTypes.DataIntegrationSummary] {
        return try await self.asyncCompactMap { item in item.dataIntegrations }
    }
}
extension AppIntegrationsClient {
    /// Paginate over `[ListEventIntegrationAssociationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListEventIntegrationAssociationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListEventIntegrationAssociationsOutput`
    public func listEventIntegrationAssociationsPaginated(input: ListEventIntegrationAssociationsInput) -> ClientRuntime.PaginatorSequence<ListEventIntegrationAssociationsInput, ListEventIntegrationAssociationsOutput> {
        return ClientRuntime.PaginatorSequence<ListEventIntegrationAssociationsInput, ListEventIntegrationAssociationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listEventIntegrationAssociations(input:))
    }
}

extension ListEventIntegrationAssociationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListEventIntegrationAssociationsInput {
        return ListEventIntegrationAssociationsInput(
            eventIntegrationName: self.eventIntegrationName,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListEventIntegrationAssociationsInput, OperationStackOutput == ListEventIntegrationAssociationsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listEventIntegrationAssociationsPaginated`
    /// to access the nested member `[AppIntegrationsClientTypes.EventIntegrationAssociation]`
    /// - Returns: `[AppIntegrationsClientTypes.EventIntegrationAssociation]`
    public func eventIntegrationAssociations() async throws -> [AppIntegrationsClientTypes.EventIntegrationAssociation] {
        return try await self.asyncCompactMap { item in item.eventIntegrationAssociations }
    }
}
extension AppIntegrationsClient {
    /// Paginate over `[ListEventIntegrationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListEventIntegrationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListEventIntegrationsOutput`
    public func listEventIntegrationsPaginated(input: ListEventIntegrationsInput) -> ClientRuntime.PaginatorSequence<ListEventIntegrationsInput, ListEventIntegrationsOutput> {
        return ClientRuntime.PaginatorSequence<ListEventIntegrationsInput, ListEventIntegrationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listEventIntegrations(input:))
    }
}

extension ListEventIntegrationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListEventIntegrationsInput {
        return ListEventIntegrationsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListEventIntegrationsInput, OperationStackOutput == ListEventIntegrationsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listEventIntegrationsPaginated`
    /// to access the nested member `[AppIntegrationsClientTypes.EventIntegration]`
    /// - Returns: `[AppIntegrationsClientTypes.EventIntegration]`
    public func eventIntegrations() async throws -> [AppIntegrationsClientTypes.EventIntegration] {
        return try await self.asyncCompactMap { item in item.eventIntegrations }
    }
}
