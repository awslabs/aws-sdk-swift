// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FinspacedataClient {
    /// Paginate over `[ListChangesetsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListChangesetsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListChangesetsOutput`
    public func listChangesetsPaginated(input: ListChangesetsInput) -> ClientRuntime.PaginatorSequence<ListChangesetsInput, ListChangesetsOutput> {
        return ClientRuntime.PaginatorSequence<ListChangesetsInput, ListChangesetsOutput>(input: input, inputKey: \ListChangesetsInput.nextToken, outputKey: \ListChangesetsOutput.nextToken, paginationFunction: self.listChangesets(input:))
    }
}

extension ListChangesetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListChangesetsInput {
        return ListChangesetsInput(
            datasetId: self.datasetId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListChangesetsInput, Output == ListChangesetsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listChangesetsPaginated`
    /// to access the nested member `[FinspacedataClientTypes.ChangesetSummary]`
    /// - Returns: `[FinspacedataClientTypes.ChangesetSummary]`
    public func changesets() async throws -> [FinspacedataClientTypes.ChangesetSummary] {
        return try await self.asyncCompactMap { item in item.changesets }
    }
}
extension FinspacedataClient {
    /// Paginate over `[ListDatasetsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDatasetsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDatasetsOutput`
    public func listDatasetsPaginated(input: ListDatasetsInput) -> ClientRuntime.PaginatorSequence<ListDatasetsInput, ListDatasetsOutput> {
        return ClientRuntime.PaginatorSequence<ListDatasetsInput, ListDatasetsOutput>(input: input, inputKey: \ListDatasetsInput.nextToken, outputKey: \ListDatasetsOutput.nextToken, paginationFunction: self.listDatasets(input:))
    }
}

extension ListDatasetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDatasetsInput {
        return ListDatasetsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListDatasetsInput, Output == ListDatasetsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listDatasetsPaginated`
    /// to access the nested member `[FinspacedataClientTypes.Dataset]`
    /// - Returns: `[FinspacedataClientTypes.Dataset]`
    public func datasets() async throws -> [FinspacedataClientTypes.Dataset] {
        return try await self.asyncCompactMap { item in item.datasets }
    }
}
extension FinspacedataClient {
    /// Paginate over `[ListDataViewsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDataViewsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDataViewsOutput`
    public func listDataViewsPaginated(input: ListDataViewsInput) -> ClientRuntime.PaginatorSequence<ListDataViewsInput, ListDataViewsOutput> {
        return ClientRuntime.PaginatorSequence<ListDataViewsInput, ListDataViewsOutput>(input: input, inputKey: \ListDataViewsInput.nextToken, outputKey: \ListDataViewsOutput.nextToken, paginationFunction: self.listDataViews(input:))
    }
}

extension ListDataViewsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDataViewsInput {
        return ListDataViewsInput(
            datasetId: self.datasetId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListDataViewsInput, Output == ListDataViewsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listDataViewsPaginated`
    /// to access the nested member `[FinspacedataClientTypes.DataViewSummary]`
    /// - Returns: `[FinspacedataClientTypes.DataViewSummary]`
    public func dataViews() async throws -> [FinspacedataClientTypes.DataViewSummary] {
        return try await self.asyncCompactMap { item in item.dataViews }
    }
}
extension FinspacedataClient {
    /// Paginate over `[ListPermissionGroupsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListPermissionGroupsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListPermissionGroupsOutput`
    public func listPermissionGroupsPaginated(input: ListPermissionGroupsInput) -> ClientRuntime.PaginatorSequence<ListPermissionGroupsInput, ListPermissionGroupsOutput> {
        return ClientRuntime.PaginatorSequence<ListPermissionGroupsInput, ListPermissionGroupsOutput>(input: input, inputKey: \ListPermissionGroupsInput.nextToken, outputKey: \ListPermissionGroupsOutput.nextToken, paginationFunction: self.listPermissionGroups(input:))
    }
}

extension ListPermissionGroupsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPermissionGroupsInput {
        return ListPermissionGroupsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListPermissionGroupsInput, Output == ListPermissionGroupsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listPermissionGroupsPaginated`
    /// to access the nested member `[FinspacedataClientTypes.PermissionGroup]`
    /// - Returns: `[FinspacedataClientTypes.PermissionGroup]`
    public func permissionGroups() async throws -> [FinspacedataClientTypes.PermissionGroup] {
        return try await self.asyncCompactMap { item in item.permissionGroups }
    }
}
extension FinspacedataClient {
    /// Paginate over `[ListUsersOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListUsersInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListUsersOutput`
    public func listUsersPaginated(input: ListUsersInput) -> ClientRuntime.PaginatorSequence<ListUsersInput, ListUsersOutput> {
        return ClientRuntime.PaginatorSequence<ListUsersInput, ListUsersOutput>(input: input, inputKey: \ListUsersInput.nextToken, outputKey: \ListUsersOutput.nextToken, paginationFunction: self.listUsers(input:))
    }
}

extension ListUsersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListUsersInput {
        return ListUsersInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListUsersInput, Output == ListUsersOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listUsersPaginated`
    /// to access the nested member `[FinspacedataClientTypes.User]`
    /// - Returns: `[FinspacedataClientTypes.User]`
    public func users() async throws -> [FinspacedataClientTypes.User] {
        return try await self.asyncCompactMap { item in item.users }
    }
}
