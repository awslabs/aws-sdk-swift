//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

/// You do not have sufficient access to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension FinspacedataClientTypes {

    public enum ApiAccess: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ApiAccess] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FinspacedataClientTypes {

    public enum ApplicationPermission: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accessnotebooks
        case createdataset
        case gettemporarycredentials
        case manageattributesets
        case manageclusters
        case manageusersandgroups
        case viewauditdata
        case sdkUnknown(Swift.String)

        public static var allCases: [ApplicationPermission] {
            return [
                .accessnotebooks,
                .createdataset,
                .gettemporarycredentials,
                .manageattributesets,
                .manageclusters,
                .manageusersandgroups,
                .viewauditdata
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accessnotebooks: return "AccessNotebooks"
            case .createdataset: return "CreateDataset"
            case .gettemporarycredentials: return "GetTemporaryCredentials"
            case .manageattributesets: return "ManageAttributeSets"
            case .manageclusters: return "ManageClusters"
            case .manageusersandgroups: return "ManageUsersAndGroups"
            case .viewauditdata: return "ViewAuditData"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The request conflicts with an existing resource.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        public internal(set) var reason: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        reason: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.reason = reason
    }
}

/// The request processing has failed because of an unknown error, exception or failure.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// One or more resources can't be found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        public internal(set) var reason: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        reason: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.reason = reason
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

/// The input fails to satisfy the constraints specified by an AWS service.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        public internal(set) var reason: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        reason: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.reason = reason
    }
}

public struct AssociateUserToPermissionGroupInput {
    /// A token that ensures idempotency. This token expires in 10 minutes.
    public var clientToken: Swift.String?
    /// The unique identifier for the permission group.
    /// This member is required.
    public var permissionGroupId: Swift.String?
    /// The unique identifier for the user.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        permissionGroupId: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.permissionGroupId = permissionGroupId
        self.userId = userId
    }
}

public struct AssociateUserToPermissionGroupOutput {
    /// The returned status code of the response.
    public var statusCode: Swift.Int

    public init(
        statusCode: Swift.Int = 0
    )
    {
        self.statusCode = statusCode
    }
}

extension FinspacedataClientTypes {
    /// The credentials required to access the external Dataview from the S3 location.
    public struct AwsCredentials {
        /// The unique identifier for the security credentials.
        public var accessKeyId: Swift.String?
        /// The Epoch time when the current credentials expire.
        public var expiration: Swift.Int
        /// The secret access key that can be used to sign requests.
        public var secretAccessKey: Swift.String?
        /// The token that users must pass to use the credentials.
        public var sessionToken: Swift.String?

        public init(
            accessKeyId: Swift.String? = nil,
            expiration: Swift.Int = 0,
            secretAccessKey: Swift.String? = nil,
            sessionToken: Swift.String? = nil
        )
        {
            self.accessKeyId = accessKeyId
            self.expiration = expiration
            self.secretAccessKey = secretAccessKey
            self.sessionToken = sessionToken
        }
    }

}

extension FinspacedataClientTypes.AwsCredentials: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

/// A limit has exceeded.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension FinspacedataClientTypes {

    /// Indicates how the given change will be applied to the dataset.
    public enum ChangeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case append
        case modify
        case replace
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeType] {
            return [
                .append,
                .modify,
                .replace
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .append: return "APPEND"
            case .modify: return "MODIFY"
            case .replace: return "REPLACE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The request for a CreateChangeset operation.
public struct CreateChangesetInput {
    /// The option to indicate how a Changeset will be applied to a Dataset.
    ///
    /// * REPLACE – Changeset will be considered as a replacement to all prior loaded Changesets.
    ///
    /// * APPEND – Changeset will be considered as an addition to the end of all prior loaded Changesets.
    ///
    /// * MODIFY – Changeset is considered as a replacement to a specific prior ingested Changeset.
    /// This member is required.
    public var changeType: FinspacedataClientTypes.ChangeType?
    /// A token that ensures idempotency. This token expires in 10 minutes.
    public var clientToken: Swift.String?
    /// The unique identifier for the FinSpace Dataset where the Changeset will be created.
    /// This member is required.
    public var datasetId: Swift.String?
    /// Options that define the structure of the source file(s) including the format type (formatType), header row (withHeader), data separation character (separator) and the type of compression (compression). formatType is a required attribute and can have the following values:
    ///
    /// * PARQUET – Parquet source file format.
    ///
    /// * CSV – CSV source file format.
    ///
    /// * JSON – JSON source file format.
    ///
    /// * XML – XML source file format.
    ///
    ///
    /// Here is an example of how you could specify the formatParams:  "formatParams": { "formatType": "CSV", "withHeader": "true", "separator": ",", "compression":"None" }  Note that if you only provide formatType as CSV, the rest of the attributes will automatically default to CSV values as following:  { "withHeader": "true", "separator": "," }  For more information about supported file formats, see [Supported Data Types and File Formats](https://docs.aws.amazon.com/finspace/latest/userguide/supported-data-types.html) in the FinSpace User Guide.
    /// This member is required.
    public var formatParams: [Swift.String: Swift.String]?
    /// Options that define the location of the data being ingested (s3SourcePath) and the source of the changeset (sourceType). Both s3SourcePath and sourceType are required attributes. Here is an example of how you could specify the sourceParams:  "sourceParams": { "s3SourcePath": "s3://finspace-landing-us-east-2-bk7gcfvitndqa6ebnvys4d/scratch/wr5hh8pwkpqqkxa4sxrmcw/ingestion/equity.csv", "sourceType": "S3" }  The S3 path that you specify must allow the FinSpace role access. To do that, you first need to configure the IAM policy on S3 bucket. For more information, see [Loading data from an Amazon S3 Bucket using the FinSpace API](https://docs.aws.amazon.com/finspace/latest/data-api/fs-using-the-finspace-api.html#access-s3-buckets) section.
    /// This member is required.
    public var sourceParams: [Swift.String: Swift.String]?

    public init(
        changeType: FinspacedataClientTypes.ChangeType? = nil,
        clientToken: Swift.String? = nil,
        datasetId: Swift.String? = nil,
        formatParams: [Swift.String: Swift.String]? = nil,
        sourceParams: [Swift.String: Swift.String]? = nil
    )
    {
        self.changeType = changeType
        self.clientToken = clientToken
        self.datasetId = datasetId
        self.formatParams = formatParams
        self.sourceParams = sourceParams
    }
}

/// The response from a CreateChangeset operation.
public struct CreateChangesetOutput {
    /// The unique identifier of the Changeset that is created.
    public var changesetId: Swift.String?
    /// The unique identifier for the FinSpace Dataset where the Changeset is created.
    public var datasetId: Swift.String?

    public init(
        changesetId: Swift.String? = nil,
        datasetId: Swift.String? = nil
    )
    {
        self.changesetId = changesetId
        self.datasetId = datasetId
    }
}

extension FinspacedataClientTypes {

    /// Dataset Kind
    public enum DatasetKind: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case nonTabular
        case tabular
        case sdkUnknown(Swift.String)

        public static var allCases: [DatasetKind] {
            return [
                .nonTabular,
                .tabular
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .nonTabular: return "NON_TABULAR"
            case .tabular: return "TABULAR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FinspacedataClientTypes {
    /// A structure for Dataset owner info.
    public struct DatasetOwnerInfo {
        /// Email address for the Dataset owner.
        public var email: Swift.String?
        /// The name of the Dataset owner.
        public var name: Swift.String?
        /// Phone number for the Dataset owner.
        public var phoneNumber: Swift.String?

        public init(
            email: Swift.String? = nil,
            name: Swift.String? = nil,
            phoneNumber: Swift.String? = nil
        )
        {
            self.email = email
            self.name = name
            self.phoneNumber = phoneNumber
        }
    }

}

extension FinspacedataClientTypes.DatasetOwnerInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DatasetOwnerInfo(name: \(Swift.String(describing: name)), phoneNumber: \(Swift.String(describing: phoneNumber)), email: \"CONTENT_REDACTED\")"}
}

extension FinspacedataClientTypes {
    /// Resource permission for a dataset. When you create a dataset, all the other members of the same user group inherit access to the dataset. You can only create a dataset if your user group has application permission for Create Datasets. The following is a list of valid dataset permissions that you can apply:
    ///
    /// * ViewDatasetDetails
    ///
    /// * ReadDatasetDetails
    ///
    /// * AddDatasetData
    ///
    /// * CreateDataView
    ///
    /// * EditDatasetMetadata
    ///
    /// * DeleteDataset
    ///
    ///
    /// For more information on the dataset permissions, see [Supported Dataset Permissions](https://docs.aws.amazon.com/finspace/latest/userguide/managing-user-permissions.html#supported-dataset-permissions) in the FinSpace User Guide.
    public struct ResourcePermission {
        /// Permission for a resource.
        public var permission: Swift.String?

        public init(
            permission: Swift.String? = nil
        )
        {
            self.permission = permission
        }
    }

}

extension FinspacedataClientTypes {
    /// Permission group parameters for Dataset permissions. Here is an example of how you could specify the PermissionGroupParams:  { "permissionGroupId": "0r6fCRtSTUk4XPfXQe3M0g", "datasetPermissions": [ {"permission": "ViewDatasetDetails"}, {"permission": "AddDatasetData"}, {"permission": "EditDatasetMetadata"}, {"permission": "DeleteDataset"} ] }
    public struct PermissionGroupParams {
        /// List of resource permissions.
        public var datasetPermissions: [FinspacedataClientTypes.ResourcePermission]?
        /// The unique identifier for the PermissionGroup.
        public var permissionGroupId: Swift.String?

        public init(
            datasetPermissions: [FinspacedataClientTypes.ResourcePermission]? = nil,
            permissionGroupId: Swift.String? = nil
        )
        {
            self.datasetPermissions = datasetPermissions
            self.permissionGroupId = permissionGroupId
        }
    }

}

extension FinspacedataClientTypes {

    /// Data type of a column.
    public enum ColumnDataType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bigint
        case binary
        case boolean
        case char
        case date
        case datetime
        case double
        case float
        case integer
        case smallint
        case string
        case tinyint
        case sdkUnknown(Swift.String)

        public static var allCases: [ColumnDataType] {
            return [
                .bigint,
                .binary,
                .boolean,
                .char,
                .date,
                .datetime,
                .double,
                .float,
                .integer,
                .smallint,
                .string,
                .tinyint
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bigint: return "BIGINT"
            case .binary: return "BINARY"
            case .boolean: return "BOOLEAN"
            case .char: return "CHAR"
            case .date: return "DATE"
            case .datetime: return "DATETIME"
            case .double: return "DOUBLE"
            case .float: return "FLOAT"
            case .integer: return "INTEGER"
            case .smallint: return "SMALLINT"
            case .string: return "STRING"
            case .tinyint: return "TINYINT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FinspacedataClientTypes {
    /// The definition of a column in a tabular Dataset.
    public struct ColumnDefinition {
        /// Description for a column.
        public var columnDescription: Swift.String?
        /// The name of a column.
        public var columnName: Swift.String?
        /// Data type of a column.
        ///
        /// * STRING – A String data type. CHAR – A char data type. INTEGER – An integer data type. TINYINT – A tinyint data type. SMALLINT – A smallint data type. BIGINT – A bigint data type. FLOAT – A float data type. DOUBLE – A double data type. DATE – A date data type. DATETIME – A datetime data type. BOOLEAN – A boolean data type. BINARY – A binary data type.
        public var dataType: FinspacedataClientTypes.ColumnDataType?

        public init(
            columnDescription: Swift.String? = nil,
            columnName: Swift.String? = nil,
            dataType: FinspacedataClientTypes.ColumnDataType? = nil
        )
        {
            self.columnDescription = columnDescription
            self.columnName = columnName
            self.dataType = dataType
        }
    }

}

extension FinspacedataClientTypes {
    /// Definition for a schema on a tabular Dataset.
    public struct SchemaDefinition {
        /// List of column definitions.
        public var columns: [FinspacedataClientTypes.ColumnDefinition]?
        /// List of column names used for primary key.
        public var primaryKeyColumns: [Swift.String]?

        public init(
            columns: [FinspacedataClientTypes.ColumnDefinition]? = nil,
            primaryKeyColumns: [Swift.String]? = nil
        )
        {
            self.columns = columns
            self.primaryKeyColumns = primaryKeyColumns
        }
    }

}

extension FinspacedataClientTypes {
    /// A union of schema types.
    public struct SchemaUnion {
        /// The configuration for a schema on a tabular Dataset.
        public var tabularSchemaConfig: FinspacedataClientTypes.SchemaDefinition?

        public init(
            tabularSchemaConfig: FinspacedataClientTypes.SchemaDefinition? = nil
        )
        {
            self.tabularSchemaConfig = tabularSchemaConfig
        }
    }

}

/// The request for a CreateDataset operation
public struct CreateDatasetInput {
    /// The unique resource identifier for a Dataset.
    public var alias: Swift.String?
    /// A token that ensures idempotency. This token expires in 10 minutes.
    public var clientToken: Swift.String?
    /// Description of a Dataset.
    public var datasetDescription: Swift.String?
    /// Display title for a FinSpace Dataset.
    /// This member is required.
    public var datasetTitle: Swift.String?
    /// The format in which Dataset data is structured.
    ///
    /// * TABULAR – Data is structured in a tabular format.
    ///
    /// * NON_TABULAR – Data is structured in a non-tabular format.
    /// This member is required.
    public var kind: FinspacedataClientTypes.DatasetKind?
    /// Contact information for a Dataset owner.
    public var ownerInfo: FinspacedataClientTypes.DatasetOwnerInfo?
    /// Permission group parameters for Dataset permissions.
    /// This member is required.
    public var permissionGroupParams: FinspacedataClientTypes.PermissionGroupParams?
    /// Definition for a schema on a tabular Dataset.
    public var schemaDefinition: FinspacedataClientTypes.SchemaUnion?

    public init(
        alias: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        datasetDescription: Swift.String? = nil,
        datasetTitle: Swift.String? = nil,
        kind: FinspacedataClientTypes.DatasetKind? = nil,
        ownerInfo: FinspacedataClientTypes.DatasetOwnerInfo? = nil,
        permissionGroupParams: FinspacedataClientTypes.PermissionGroupParams? = nil,
        schemaDefinition: FinspacedataClientTypes.SchemaUnion? = nil
    )
    {
        self.alias = alias
        self.clientToken = clientToken
        self.datasetDescription = datasetDescription
        self.datasetTitle = datasetTitle
        self.kind = kind
        self.ownerInfo = ownerInfo
        self.permissionGroupParams = permissionGroupParams
        self.schemaDefinition = schemaDefinition
    }
}

/// The response from a CreateDataset operation
public struct CreateDatasetOutput {
    /// The unique identifier for the created Dataset.
    public var datasetId: Swift.String?

    public init(
        datasetId: Swift.String? = nil
    )
    {
        self.datasetId = datasetId
    }
}

extension FinspacedataClientTypes {

    /// Data View Export File Format
    public enum ExportFileFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case delimitedText
        case parquet
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportFileFormat] {
            return [
                .delimitedText,
                .parquet
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .delimitedText: return "DELIMITED_TEXT"
            case .parquet: return "PARQUET"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FinspacedataClientTypes {
    /// Structure for the Dataview destination type parameters.
    public struct DataViewDestinationTypeParams {
        /// Destination type for a Dataview.
        ///
        /// * GLUE_TABLE – Glue table destination type.
        ///
        /// * S3 – S3 destination type.
        /// This member is required.
        public var destinationType: Swift.String?
        /// Dataview export file format.
        ///
        /// * PARQUET – Parquet export file format.
        ///
        /// * DELIMITED_TEXT – Delimited text export file format.
        public var s3DestinationExportFileFormat: FinspacedataClientTypes.ExportFileFormat?
        /// Format Options for S3 Destination type. Here is an example of how you could specify the s3DestinationExportFileFormatOptions
        ///     { "header": "true", "delimiter": ",", "compression": "gzip" }
        public var s3DestinationExportFileFormatOptions: [Swift.String: Swift.String]?

        public init(
            destinationType: Swift.String? = nil,
            s3DestinationExportFileFormat: FinspacedataClientTypes.ExportFileFormat? = nil,
            s3DestinationExportFileFormatOptions: [Swift.String: Swift.String]? = nil
        )
        {
            self.destinationType = destinationType
            self.s3DestinationExportFileFormat = s3DestinationExportFileFormat
            self.s3DestinationExportFileFormatOptions = s3DestinationExportFileFormatOptions
        }
    }

}

/// Request for creating a data view.
public struct CreateDataViewInput {
    /// Beginning time to use for the Dataview. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
    public var asOfTimestamp: Swift.Int?
    /// Flag to indicate Dataview should be updated automatically.
    public var autoUpdate: Swift.Bool?
    /// A token that ensures idempotency. This token expires in 10 minutes.
    public var clientToken: Swift.String?
    /// The unique Dataset identifier that is used to create a Dataview.
    /// This member is required.
    public var datasetId: Swift.String?
    /// Options that define the destination type for the Dataview.
    /// This member is required.
    public var destinationTypeParams: FinspacedataClientTypes.DataViewDestinationTypeParams?
    /// Ordered set of column names used to partition data.
    public var partitionColumns: [Swift.String]?
    /// Columns to be used for sorting the data.
    public var sortColumns: [Swift.String]?

    public init(
        asOfTimestamp: Swift.Int? = 0,
        autoUpdate: Swift.Bool? = false,
        clientToken: Swift.String? = nil,
        datasetId: Swift.String? = nil,
        destinationTypeParams: FinspacedataClientTypes.DataViewDestinationTypeParams? = nil,
        partitionColumns: [Swift.String]? = nil,
        sortColumns: [Swift.String]? = nil
    )
    {
        self.asOfTimestamp = asOfTimestamp
        self.autoUpdate = autoUpdate
        self.clientToken = clientToken
        self.datasetId = datasetId
        self.destinationTypeParams = destinationTypeParams
        self.partitionColumns = partitionColumns
        self.sortColumns = sortColumns
    }
}

/// Response for creating a data view.
public struct CreateDataViewOutput {
    /// The unique identifier for the created Dataview.
    public var dataViewId: Swift.String?
    /// The unique identifier of the Dataset used for the Dataview.
    public var datasetId: Swift.String?

    public init(
        dataViewId: Swift.String? = nil,
        datasetId: Swift.String? = nil
    )
    {
        self.dataViewId = dataViewId
        self.datasetId = datasetId
    }
}

public struct CreatePermissionGroupInput {
    /// The option to indicate FinSpace application permissions that are granted to a specific group. When assigning application permissions, be aware that the permission ManageUsersAndGroups allows users to grant themselves or others access to any functionality in their FinSpace environment's application. It should only be granted to trusted users.
    ///
    /// * CreateDataset – Group members can create new datasets.
    ///
    /// * ManageClusters – Group members can manage Apache Spark clusters from FinSpace notebooks.
    ///
    /// * ManageUsersAndGroups – Group members can manage users and permission groups. This is a privileged permission that allows users to grant themselves or others access to any functionality in the application. It should only be granted to trusted users.
    ///
    /// * ManageAttributeSets – Group members can manage attribute sets.
    ///
    /// * ViewAuditData – Group members can view audit data.
    ///
    /// * AccessNotebooks – Group members will have access to FinSpace notebooks.
    ///
    /// * GetTemporaryCredentials – Group members can get temporary API credentials.
    /// This member is required.
    public var applicationPermissions: [FinspacedataClientTypes.ApplicationPermission]?
    /// A token that ensures idempotency. This token expires in 10 minutes.
    public var clientToken: Swift.String?
    /// A brief description for the permission group.
    public var description: Swift.String?
    /// The name of the permission group.
    /// This member is required.
    public var name: Swift.String?

    public init(
        applicationPermissions: [FinspacedataClientTypes.ApplicationPermission]? = nil,
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.applicationPermissions = applicationPermissions
        self.clientToken = clientToken
        self.description = description
        self.name = name
    }
}

extension CreatePermissionGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatePermissionGroupInput(applicationPermissions: \(Swift.String(describing: applicationPermissions)), clientToken: \(Swift.String(describing: clientToken)), description: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

public struct CreatePermissionGroupOutput {
    /// The unique identifier for the permission group.
    public var permissionGroupId: Swift.String?

    public init(
        permissionGroupId: Swift.String? = nil
    )
    {
        self.permissionGroupId = permissionGroupId
    }
}

extension FinspacedataClientTypes {

    public enum UserType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case appUser
        case superUser
        case sdkUnknown(Swift.String)

        public static var allCases: [UserType] {
            return [
                .appUser,
                .superUser
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .appUser: return "APP_USER"
            case .superUser: return "SUPER_USER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateUserInput {
    /// The option to indicate whether the user can use the GetProgrammaticAccessCredentials API to obtain credentials that can then be used to access other FinSpace Data API operations.
    ///
    /// * ENABLED – The user has permissions to use the APIs.
    ///
    /// * DISABLED – The user does not have permissions to use any APIs.
    public var apiAccess: FinspacedataClientTypes.ApiAccess?
    /// The ARN identifier of an AWS user or role that is allowed to call the GetProgrammaticAccessCredentials API to obtain a credentials token for a specific FinSpace user. This must be an IAM role within your FinSpace account.
    public var apiAccessPrincipalArn: Swift.String?
    /// A token that ensures idempotency. This token expires in 10 minutes.
    public var clientToken: Swift.String?
    /// The email address of the user that you want to register. The email address serves as a uniquer identifier for each user and cannot be changed after it's created.
    /// This member is required.
    public var emailAddress: Swift.String?
    /// The first name of the user that you want to register.
    public var firstName: Swift.String?
    /// The last name of the user that you want to register.
    public var lastName: Swift.String?
    /// The option to indicate the type of user. Use one of the following options to specify this parameter:
    ///
    /// * SUPER_USER – A user with permission to all the functionality and data in FinSpace.
    ///
    /// * APP_USER – A user with specific permissions in FinSpace. The users are assigned permissions by adding them to a permission group.
    /// This member is required.
    public var type: FinspacedataClientTypes.UserType?

    public init(
        apiAccess: FinspacedataClientTypes.ApiAccess? = nil,
        apiAccessPrincipalArn: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        emailAddress: Swift.String? = nil,
        firstName: Swift.String? = nil,
        lastName: Swift.String? = nil,
        type: FinspacedataClientTypes.UserType? = nil
    )
    {
        self.apiAccess = apiAccess
        self.apiAccessPrincipalArn = apiAccessPrincipalArn
        self.clientToken = clientToken
        self.emailAddress = emailAddress
        self.firstName = firstName
        self.lastName = lastName
        self.type = type
    }
}

extension CreateUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateUserInput(apiAccess: \(Swift.String(describing: apiAccess)), apiAccessPrincipalArn: \(Swift.String(describing: apiAccessPrincipalArn)), clientToken: \(Swift.String(describing: clientToken)), type: \(Swift.String(describing: type)), emailAddress: \"CONTENT_REDACTED\", firstName: \"CONTENT_REDACTED\", lastName: \"CONTENT_REDACTED\")"}
}

public struct CreateUserOutput {
    /// The unique identifier for the user.
    public var userId: Swift.String?

    public init(
        userId: Swift.String? = nil
    )
    {
        self.userId = userId
    }
}

/// The request for a DeleteDataset operation.
public struct DeleteDatasetInput {
    /// A token that ensures idempotency. This token expires in 10 minutes.
    public var clientToken: Swift.String?
    /// The unique identifier of the Dataset to be deleted.
    /// This member is required.
    public var datasetId: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        datasetId: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.datasetId = datasetId
    }
}

/// The response from an DeleteDataset operation
public struct DeleteDatasetOutput {
    /// The unique identifier for the deleted Dataset.
    public var datasetId: Swift.String?

    public init(
        datasetId: Swift.String? = nil
    )
    {
        self.datasetId = datasetId
    }
}

public struct DeletePermissionGroupInput {
    /// A token that ensures idempotency. This token expires in 10 minutes.
    public var clientToken: Swift.String?
    /// The unique identifier for the permission group that you want to delete.
    /// This member is required.
    public var permissionGroupId: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        permissionGroupId: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.permissionGroupId = permissionGroupId
    }
}

public struct DeletePermissionGroupOutput {
    /// The unique identifier for the deleted permission group.
    public var permissionGroupId: Swift.String?

    public init(
        permissionGroupId: Swift.String? = nil
    )
    {
        self.permissionGroupId = permissionGroupId
    }
}

public struct DisableUserInput {
    /// A token that ensures idempotency. This token expires in 10 minutes.
    public var clientToken: Swift.String?
    /// The unique identifier for the user that you want to deactivate.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.userId = userId
    }
}

public struct DisableUserOutput {
    /// The unique identifier for the deactivated user.
    public var userId: Swift.String?

    public init(
        userId: Swift.String? = nil
    )
    {
        self.userId = userId
    }
}

public struct DisassociateUserFromPermissionGroupInput {
    /// A token that ensures idempotency. This token expires in 10 minutes.
    public var clientToken: Swift.String?
    /// The unique identifier for the permission group.
    /// This member is required.
    public var permissionGroupId: Swift.String?
    /// The unique identifier for the user.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        permissionGroupId: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.permissionGroupId = permissionGroupId
        self.userId = userId
    }
}

public struct DisassociateUserFromPermissionGroupOutput {
    /// The returned status code of the response.
    public var statusCode: Swift.Int

    public init(
        statusCode: Swift.Int = 0
    )
    {
        self.statusCode = statusCode
    }
}

public struct EnableUserInput {
    /// A token that ensures idempotency. This token expires in 10 minutes.
    public var clientToken: Swift.String?
    /// The unique identifier for the user that you want to activate.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.userId = userId
    }
}

public struct EnableUserOutput {
    /// The unique identifier for the active user.
    public var userId: Swift.String?

    public init(
        userId: Swift.String? = nil
    )
    {
        self.userId = userId
    }
}

/// Request to describe a changeset.
public struct GetChangesetInput {
    /// The unique identifier of the Changeset for which to get data.
    /// This member is required.
    public var changesetId: Swift.String?
    /// The unique identifier for the FinSpace Dataset where the Changeset is created.
    /// This member is required.
    public var datasetId: Swift.String?

    public init(
        changesetId: Swift.String? = nil,
        datasetId: Swift.String? = nil
    )
    {
        self.changesetId = changesetId
        self.datasetId = datasetId
    }
}

extension FinspacedataClientTypes {

    /// Changeset Error Category
    public enum ErrorCategory: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accessDenied
        case cancelled
        case internalServiceException
        case resourceNotFound
        case serviceQuotaExceeded
        case throttling
        case userRecoverable
        case validation
        case sdkUnknown(Swift.String)

        public static var allCases: [ErrorCategory] {
            return [
                .accessDenied,
                .cancelled,
                .internalServiceException,
                .resourceNotFound,
                .serviceQuotaExceeded,
                .throttling,
                .userRecoverable,
                .validation
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accessDenied: return "ACCESS_DENIED"
            case .cancelled: return "CANCELLED"
            case .internalServiceException: return "INTERNAL_SERVICE_EXCEPTION"
            case .resourceNotFound: return "RESOURCE_NOT_FOUND"
            case .serviceQuotaExceeded: return "SERVICE_QUOTA_EXCEEDED"
            case .throttling: return "THROTTLING"
            case .userRecoverable: return "USER_RECOVERABLE"
            case .validation: return "VALIDATION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FinspacedataClientTypes {
    /// The structure with error messages.
    public struct ChangesetErrorInfo {
        /// The category of the error.
        ///
        /// * VALIDATION – The inputs to this request are invalid.
        ///
        /// * SERVICE_QUOTA_EXCEEDED – Service quotas have been exceeded. Please contact AWS support to increase quotas.
        ///
        /// * ACCESS_DENIED – Missing required permission to perform this request.
        ///
        /// * RESOURCE_NOT_FOUND – One or more inputs to this request were not found.
        ///
        /// * THROTTLING – The system temporarily lacks sufficient resources to process the request.
        ///
        /// * INTERNAL_SERVICE_EXCEPTION – An internal service error has occurred.
        ///
        /// * CANCELLED – Cancelled.
        ///
        /// * USER_RECOVERABLE – A user recoverable error has occurred.
        public var errorCategory: FinspacedataClientTypes.ErrorCategory?
        /// The text of the error message.
        public var errorMessage: Swift.String?

        public init(
            errorCategory: FinspacedataClientTypes.ErrorCategory? = nil,
            errorMessage: Swift.String? = nil
        )
        {
            self.errorCategory = errorCategory
            self.errorMessage = errorMessage
        }
    }

}

extension FinspacedataClientTypes {

    /// Status of the ingestion process returned from scheduler service.
    public enum IngestionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case pending
        case running
        case stopRequested
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [IngestionStatus] {
            return [
                .failed,
                .pending,
                .running,
                .stopRequested,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .running: return "RUNNING"
            case .stopRequested: return "STOP_REQUESTED"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The response from a describe changeset operation
public struct GetChangesetOutput {
    /// Beginning time from which the Changeset is active. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
    public var activeFromTimestamp: Swift.Int?
    /// Time until which the Changeset is active. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
    public var activeUntilTimestamp: Swift.Int?
    /// Type that indicates how a Changeset is applied to a Dataset.
    ///
    /// * REPLACE – Changeset is considered as a replacement to all prior loaded Changesets.
    ///
    /// * APPEND – Changeset is considered as an addition to the end of all prior loaded Changesets.
    ///
    /// * MODIFY – Changeset is considered as a replacement to a specific prior ingested Changeset.
    public var changeType: FinspacedataClientTypes.ChangeType?
    /// The ARN identifier of the Changeset.
    public var changesetArn: Swift.String?
    /// The unique identifier for a Changeset.
    public var changesetId: Swift.String?
    /// The timestamp at which the Changeset was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
    public var createTime: Swift.Int
    /// The unique identifier for the FinSpace Dataset where the Changeset is created.
    public var datasetId: Swift.String?
    /// The structure with error messages.
    public var errorInfo: FinspacedataClientTypes.ChangesetErrorInfo?
    /// Structure of the source file(s).
    public var formatParams: [Swift.String: Swift.String]?
    /// Options that define the location of the data being ingested.
    public var sourceParams: [Swift.String: Swift.String]?
    /// The status of Changeset creation operation.
    public var status: FinspacedataClientTypes.IngestionStatus?
    /// The unique identifier of the updated Changeset.
    public var updatedByChangesetId: Swift.String?
    /// The unique identifier of the Changeset that is being updated.
    public var updatesChangesetId: Swift.String?

    public init(
        activeFromTimestamp: Swift.Int? = 0,
        activeUntilTimestamp: Swift.Int? = 0,
        changeType: FinspacedataClientTypes.ChangeType? = nil,
        changesetArn: Swift.String? = nil,
        changesetId: Swift.String? = nil,
        createTime: Swift.Int = 0,
        datasetId: Swift.String? = nil,
        errorInfo: FinspacedataClientTypes.ChangesetErrorInfo? = nil,
        formatParams: [Swift.String: Swift.String]? = nil,
        sourceParams: [Swift.String: Swift.String]? = nil,
        status: FinspacedataClientTypes.IngestionStatus? = nil,
        updatedByChangesetId: Swift.String? = nil,
        updatesChangesetId: Swift.String? = nil
    )
    {
        self.activeFromTimestamp = activeFromTimestamp
        self.activeUntilTimestamp = activeUntilTimestamp
        self.changeType = changeType
        self.changesetArn = changesetArn
        self.changesetId = changesetId
        self.createTime = createTime
        self.datasetId = datasetId
        self.errorInfo = errorInfo
        self.formatParams = formatParams
        self.sourceParams = sourceParams
        self.status = status
        self.updatedByChangesetId = updatedByChangesetId
        self.updatesChangesetId = updatesChangesetId
    }
}

/// Request for the GetDataset operation.
public struct GetDatasetInput {
    /// The unique identifier for a Dataset.
    /// This member is required.
    public var datasetId: Swift.String?

    public init(
        datasetId: Swift.String? = nil
    )
    {
        self.datasetId = datasetId
    }
}

extension FinspacedataClientTypes {

    /// Status of the dataset process returned from scheduler service.
    public enum DatasetStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case pending
        case running
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [DatasetStatus] {
            return [
                .failed,
                .pending,
                .running,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .running: return "RUNNING"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Response for the GetDataset operation
public struct GetDatasetOutput {
    /// The unique resource identifier for a Dataset.
    public var alias: Swift.String?
    /// The timestamp at which the Dataset was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
    public var createTime: Swift.Int
    /// The ARN identifier of the Dataset.
    public var datasetArn: Swift.String?
    /// A description of the Dataset.
    public var datasetDescription: Swift.String?
    /// The unique identifier for a Dataset.
    public var datasetId: Swift.String?
    /// Display title for a Dataset.
    public var datasetTitle: Swift.String?
    /// The format in which Dataset data is structured.
    ///
    /// * TABULAR – Data is structured in a tabular format.
    ///
    /// * NON_TABULAR – Data is structured in a non-tabular format.
    public var kind: FinspacedataClientTypes.DatasetKind?
    /// The last time that the Dataset was modified. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
    public var lastModifiedTime: Swift.Int
    /// Definition for a schema on a tabular Dataset.
    public var schemaDefinition: FinspacedataClientTypes.SchemaUnion?
    /// Status of the Dataset creation.
    ///
    /// * PENDING – Dataset is pending creation.
    ///
    /// * FAILED – Dataset creation has failed.
    ///
    /// * SUCCESS – Dataset creation has succeeded.
    ///
    /// * RUNNING – Dataset creation is running.
    public var status: FinspacedataClientTypes.DatasetStatus?

    public init(
        alias: Swift.String? = nil,
        createTime: Swift.Int = 0,
        datasetArn: Swift.String? = nil,
        datasetDescription: Swift.String? = nil,
        datasetId: Swift.String? = nil,
        datasetTitle: Swift.String? = nil,
        kind: FinspacedataClientTypes.DatasetKind? = nil,
        lastModifiedTime: Swift.Int = 0,
        schemaDefinition: FinspacedataClientTypes.SchemaUnion? = nil,
        status: FinspacedataClientTypes.DatasetStatus? = nil
    )
    {
        self.alias = alias
        self.createTime = createTime
        self.datasetArn = datasetArn
        self.datasetDescription = datasetDescription
        self.datasetId = datasetId
        self.datasetTitle = datasetTitle
        self.kind = kind
        self.lastModifiedTime = lastModifiedTime
        self.schemaDefinition = schemaDefinition
        self.status = status
    }
}

/// Request for retrieving a data view detail. Grouped / accessible within a dataset by its dataset id.
public struct GetDataViewInput {
    /// The unique identifier for the Dataview.
    /// This member is required.
    public var dataViewId: Swift.String?
    /// The unique identifier for the Dataset used in the Dataview.
    /// This member is required.
    public var datasetId: Swift.String?

    public init(
        dataViewId: Swift.String? = nil,
        datasetId: Swift.String? = nil
    )
    {
        self.dataViewId = dataViewId
        self.datasetId = datasetId
    }
}

extension FinspacedataClientTypes {
    /// The structure with error messages.
    public struct DataViewErrorInfo {
        /// The category of the error.
        ///
        /// * VALIDATION – The inputs to this request are invalid.
        ///
        /// * SERVICE_QUOTA_EXCEEDED – Service quotas have been exceeded. Please contact AWS support to increase quotas.
        ///
        /// * ACCESS_DENIED – Missing required permission to perform this request.
        ///
        /// * RESOURCE_NOT_FOUND – One or more inputs to this request were not found.
        ///
        /// * THROTTLING – The system temporarily lacks sufficient resources to process the request.
        ///
        /// * INTERNAL_SERVICE_EXCEPTION – An internal service error has occurred.
        ///
        /// * CANCELLED – Cancelled.
        ///
        /// * USER_RECOVERABLE – A user recoverable error has occurred.
        public var errorCategory: FinspacedataClientTypes.ErrorCategory?
        /// The text of the error message.
        public var errorMessage: Swift.String?

        public init(
            errorCategory: FinspacedataClientTypes.ErrorCategory? = nil,
            errorMessage: Swift.String? = nil
        )
        {
            self.errorCategory = errorCategory
            self.errorMessage = errorMessage
        }
    }

}

extension FinspacedataClientTypes {

    /// Status of a DataView
    public enum DataViewStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelled
        case failed
        case failedCleanupFailed
        case pending
        case running
        case starting
        case success
        case timeout
        case sdkUnknown(Swift.String)

        public static var allCases: [DataViewStatus] {
            return [
                .cancelled,
                .failed,
                .failedCleanupFailed,
                .pending,
                .running,
                .starting,
                .success,
                .timeout
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .failed: return "FAILED"
            case .failedCleanupFailed: return "FAILED_CLEANUP_FAILED"
            case .pending: return "PENDING"
            case .running: return "RUNNING"
            case .starting: return "STARTING"
            case .success: return "SUCCESS"
            case .timeout: return "TIMEOUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Response from retrieving a dataview, which includes details on the target database and table name
public struct GetDataViewOutput {
    /// Time range to use for the Dataview. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
    public var asOfTimestamp: Swift.Int?
    /// Flag to indicate Dataview should be updated automatically.
    public var autoUpdate: Swift.Bool
    /// The timestamp at which the Dataview was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
    public var createTime: Swift.Int
    /// The ARN identifier of the Dataview.
    public var dataViewArn: Swift.String?
    /// The unique identifier for the Dataview.
    public var dataViewId: Swift.String?
    /// The unique identifier for the Dataset used in the Dataview.
    public var datasetId: Swift.String?
    /// Options that define the destination type for the Dataview.
    public var destinationTypeParams: FinspacedataClientTypes.DataViewDestinationTypeParams?
    /// Information about an error that occurred for the Dataview.
    public var errorInfo: FinspacedataClientTypes.DataViewErrorInfo?
    /// The last time that a Dataview was modified. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
    public var lastModifiedTime: Swift.Int
    /// Ordered set of column names used to partition data.
    public var partitionColumns: [Swift.String]?
    /// Columns to be used for sorting the data.
    public var sortColumns: [Swift.String]?
    /// The status of a Dataview creation.
    ///
    /// * RUNNING – Dataview creation is running.
    ///
    /// * STARTING – Dataview creation is starting.
    ///
    /// * FAILED – Dataview creation has failed.
    ///
    /// * CANCELLED – Dataview creation has been cancelled.
    ///
    /// * TIMEOUT – Dataview creation has timed out.
    ///
    /// * SUCCESS – Dataview creation has succeeded.
    ///
    /// * PENDING – Dataview creation is pending.
    ///
    /// * FAILED_CLEANUP_FAILED – Dataview creation failed and resource cleanup failed.
    public var status: FinspacedataClientTypes.DataViewStatus?

    public init(
        asOfTimestamp: Swift.Int? = 0,
        autoUpdate: Swift.Bool = false,
        createTime: Swift.Int = 0,
        dataViewArn: Swift.String? = nil,
        dataViewId: Swift.String? = nil,
        datasetId: Swift.String? = nil,
        destinationTypeParams: FinspacedataClientTypes.DataViewDestinationTypeParams? = nil,
        errorInfo: FinspacedataClientTypes.DataViewErrorInfo? = nil,
        lastModifiedTime: Swift.Int = 0,
        partitionColumns: [Swift.String]? = nil,
        sortColumns: [Swift.String]? = nil,
        status: FinspacedataClientTypes.DataViewStatus? = nil
    )
    {
        self.asOfTimestamp = asOfTimestamp
        self.autoUpdate = autoUpdate
        self.createTime = createTime
        self.dataViewArn = dataViewArn
        self.dataViewId = dataViewId
        self.datasetId = datasetId
        self.destinationTypeParams = destinationTypeParams
        self.errorInfo = errorInfo
        self.lastModifiedTime = lastModifiedTime
        self.partitionColumns = partitionColumns
        self.sortColumns = sortColumns
        self.status = status
    }
}

public struct GetExternalDataViewAccessDetailsInput {
    /// The unique identifier for the Dataview that you want to access.
    /// This member is required.
    public var dataViewId: Swift.String?
    /// The unique identifier for the Dataset.
    /// This member is required.
    public var datasetId: Swift.String?

    public init(
        dataViewId: Swift.String? = nil,
        datasetId: Swift.String? = nil
    )
    {
        self.dataViewId = dataViewId
        self.datasetId = datasetId
    }
}

extension FinspacedataClientTypes {
    /// The location of an external Dataview in an S3 bucket.
    public struct S3Location {
        /// The name of the S3 bucket.
        /// This member is required.
        public var bucket: Swift.String?
        /// The path of the folder, within the S3 bucket that contains the Dataset.
        /// This member is required.
        public var key: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            key: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.key = key
        }
    }

}

public struct GetExternalDataViewAccessDetailsOutput {
    /// The credentials required to access the external Dataview from the S3 location.
    public var credentials: FinspacedataClientTypes.AwsCredentials?
    /// The location where the external Dataview is stored.
    public var s3Location: FinspacedataClientTypes.S3Location?

    public init(
        credentials: FinspacedataClientTypes.AwsCredentials? = nil,
        s3Location: FinspacedataClientTypes.S3Location? = nil
    )
    {
        self.credentials = credentials
        self.s3Location = s3Location
    }
}

extension GetExternalDataViewAccessDetailsOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetExternalDataViewAccessDetailsOutput(s3Location: \(Swift.String(describing: s3Location)), credentials: \"CONTENT_REDACTED\")"}
}

public struct GetPermissionGroupInput {
    /// The unique identifier for the permission group.
    /// This member is required.
    public var permissionGroupId: Swift.String?

    public init(
        permissionGroupId: Swift.String? = nil
    )
    {
        self.permissionGroupId = permissionGroupId
    }
}

extension FinspacedataClientTypes {

    public enum PermissionGroupMembershipStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case additionInProgress
        case additionSuccess
        case removalInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [PermissionGroupMembershipStatus] {
            return [
                .additionInProgress,
                .additionSuccess,
                .removalInProgress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .additionInProgress: return "ADDITION_IN_PROGRESS"
            case .additionSuccess: return "ADDITION_SUCCESS"
            case .removalInProgress: return "REMOVAL_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension FinspacedataClientTypes {
    /// The structure for a permission group.
    public struct PermissionGroup {
        /// Indicates the permissions that are granted to a specific group for accessing the FinSpace application. When assigning application permissions, be aware that the permission ManageUsersAndGroups allows users to grant themselves or others access to any functionality in their FinSpace environment's application. It should only be granted to trusted users.
        ///
        /// * CreateDataset – Group members can create new datasets.
        ///
        /// * ManageClusters – Group members can manage Apache Spark clusters from FinSpace notebooks.
        ///
        /// * ManageUsersAndGroups – Group members can manage users and permission groups. This is a privileged permission that allows users to grant themselves or others access to any functionality in the application. It should only be granted to trusted users.
        ///
        /// * ManageAttributeSets – Group members can manage attribute sets.
        ///
        /// * ViewAuditData – Group members can view audit data.
        ///
        /// * AccessNotebooks – Group members will have access to FinSpace notebooks.
        ///
        /// * GetTemporaryCredentials – Group members can get temporary API credentials.
        public var applicationPermissions: [FinspacedataClientTypes.ApplicationPermission]?
        /// The timestamp at which the group was created in FinSpace. The value is determined as epoch time in milliseconds.
        public var createTime: Swift.Int
        /// A brief description for the permission group.
        public var description: Swift.String?
        /// Describes the last time the permission group was updated. The value is determined as epoch time in milliseconds.
        public var lastModifiedTime: Swift.Int
        /// Indicates the status of the user within a permission group.
        ///
        /// * ADDITION_IN_PROGRESS – The user is currently being added to the permission group.
        ///
        /// * ADDITION_SUCCESS – The user is successfully added to the permission group.
        ///
        /// * REMOVAL_IN_PROGRESS – The user is currently being removed from the permission group.
        public var membershipStatus: FinspacedataClientTypes.PermissionGroupMembershipStatus?
        /// The name of the permission group.
        public var name: Swift.String?
        /// The unique identifier for the permission group.
        public var permissionGroupId: Swift.String?

        public init(
            applicationPermissions: [FinspacedataClientTypes.ApplicationPermission]? = nil,
            createTime: Swift.Int = 0,
            description: Swift.String? = nil,
            lastModifiedTime: Swift.Int = 0,
            membershipStatus: FinspacedataClientTypes.PermissionGroupMembershipStatus? = nil,
            name: Swift.String? = nil,
            permissionGroupId: Swift.String? = nil
        )
        {
            self.applicationPermissions = applicationPermissions
            self.createTime = createTime
            self.description = description
            self.lastModifiedTime = lastModifiedTime
            self.membershipStatus = membershipStatus
            self.name = name
            self.permissionGroupId = permissionGroupId
        }
    }

}

extension FinspacedataClientTypes.PermissionGroup: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PermissionGroup(applicationPermissions: \(Swift.String(describing: applicationPermissions)), createTime: \(Swift.String(describing: createTime)), lastModifiedTime: \(Swift.String(describing: lastModifiedTime)), membershipStatus: \(Swift.String(describing: membershipStatus)), permissionGroupId: \(Swift.String(describing: permissionGroupId)), description: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

public struct GetPermissionGroupOutput {
    /// The structure for a permission group.
    public var permissionGroup: FinspacedataClientTypes.PermissionGroup?

    public init(
        permissionGroup: FinspacedataClientTypes.PermissionGroup? = nil
    )
    {
        self.permissionGroup = permissionGroup
    }
}

/// Request for GetProgrammaticAccessCredentials operation
public struct GetProgrammaticAccessCredentialsInput {
    /// The time duration in which the credentials remain valid.
    public var durationInMinutes: Swift.Int?
    /// The FinSpace environment identifier.
    /// This member is required.
    public var environmentId: Swift.String?

    public init(
        durationInMinutes: Swift.Int? = nil,
        environmentId: Swift.String? = nil
    )
    {
        self.durationInMinutes = durationInMinutes
        self.environmentId = environmentId
    }
}

extension FinspacedataClientTypes {
    /// Short term API credentials.
    public struct Credentials {
        /// The access key identifier.
        public var accessKeyId: Swift.String?
        /// The access key.
        public var secretAccessKey: Swift.String?
        /// The session token.
        public var sessionToken: Swift.String?

        public init(
            accessKeyId: Swift.String? = nil,
            secretAccessKey: Swift.String? = nil,
            sessionToken: Swift.String? = nil
        )
        {
            self.accessKeyId = accessKeyId
            self.secretAccessKey = secretAccessKey
            self.sessionToken = sessionToken
        }
    }

}

extension FinspacedataClientTypes.Credentials: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

/// Response for GetProgrammaticAccessCredentials operation
public struct GetProgrammaticAccessCredentialsOutput {
    /// Returns the programmatic credentials.
    public var credentials: FinspacedataClientTypes.Credentials?
    /// Returns the duration in which the credentials will remain valid.
    public var durationInMinutes: Swift.Int?

    public init(
        credentials: FinspacedataClientTypes.Credentials? = nil,
        durationInMinutes: Swift.Int? = nil
    )
    {
        self.credentials = credentials
        self.durationInMinutes = durationInMinutes
    }
}

extension GetProgrammaticAccessCredentialsOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetProgrammaticAccessCredentialsOutput(durationInMinutes: \(Swift.String(describing: durationInMinutes)), credentials: \"CONTENT_REDACTED\")"}
}

public struct GetUserInput {
    /// The unique identifier of the user to get data for.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        userId: Swift.String? = nil
    )
    {
        self.userId = userId
    }
}

extension FinspacedataClientTypes {

    public enum UserStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creating
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [UserStatus] {
            return [
                .creating,
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creating: return "CREATING"
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetUserOutput {
    /// Indicates whether the user can use the GetProgrammaticAccessCredentials API to obtain credentials that can then be used to access other FinSpace Data API operations.
    ///
    /// * ENABLED – The user has permissions to use the APIs.
    ///
    /// * DISABLED – The user does not have permissions to use any APIs.
    public var apiAccess: FinspacedataClientTypes.ApiAccess?
    /// The ARN identifier of an AWS user or role that is allowed to call the GetProgrammaticAccessCredentials API to obtain a credentials token for a specific FinSpace user. This must be an IAM role within your FinSpace account.
    public var apiAccessPrincipalArn: Swift.String?
    /// The timestamp at which the user was created in FinSpace. The value is determined as epoch time in milliseconds.
    public var createTime: Swift.Int
    /// The email address that is associated with the user.
    public var emailAddress: Swift.String?
    /// The first name of the user.
    public var firstName: Swift.String?
    /// Describes the last time the user was deactivated. The value is determined as epoch time in milliseconds.
    public var lastDisabledTime: Swift.Int
    /// Describes the last time the user was activated. The value is determined as epoch time in milliseconds.
    public var lastEnabledTime: Swift.Int
    /// Describes the last time that the user logged into their account. The value is determined as epoch time in milliseconds.
    public var lastLoginTime: Swift.Int
    /// Describes the last time the user details were updated. The value is determined as epoch time in milliseconds.
    public var lastModifiedTime: Swift.Int
    /// The last name of the user.
    public var lastName: Swift.String?
    /// The current status of the user.
    ///
    /// * CREATING – The creation is in progress.
    ///
    /// * ENABLED – The user is created and is currently active.
    ///
    /// * DISABLED – The user is currently inactive.
    public var status: FinspacedataClientTypes.UserStatus?
    /// Indicates the type of user.
    ///
    /// * SUPER_USER – A user with permission to all the functionality and data in FinSpace.
    ///
    ///
    ///
    ///
    /// * APP_USER – A user with specific permissions in FinSpace. The users are assigned permissions by adding them to a permission group.
    public var type: FinspacedataClientTypes.UserType?
    /// The unique identifier for the user that is retrieved.
    public var userId: Swift.String?

    public init(
        apiAccess: FinspacedataClientTypes.ApiAccess? = nil,
        apiAccessPrincipalArn: Swift.String? = nil,
        createTime: Swift.Int = 0,
        emailAddress: Swift.String? = nil,
        firstName: Swift.String? = nil,
        lastDisabledTime: Swift.Int = 0,
        lastEnabledTime: Swift.Int = 0,
        lastLoginTime: Swift.Int = 0,
        lastModifiedTime: Swift.Int = 0,
        lastName: Swift.String? = nil,
        status: FinspacedataClientTypes.UserStatus? = nil,
        type: FinspacedataClientTypes.UserType? = nil,
        userId: Swift.String? = nil
    )
    {
        self.apiAccess = apiAccess
        self.apiAccessPrincipalArn = apiAccessPrincipalArn
        self.createTime = createTime
        self.emailAddress = emailAddress
        self.firstName = firstName
        self.lastDisabledTime = lastDisabledTime
        self.lastEnabledTime = lastEnabledTime
        self.lastLoginTime = lastLoginTime
        self.lastModifiedTime = lastModifiedTime
        self.lastName = lastName
        self.status = status
        self.type = type
        self.userId = userId
    }
}

extension GetUserOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetUserOutput(apiAccess: \(Swift.String(describing: apiAccess)), apiAccessPrincipalArn: \(Swift.String(describing: apiAccessPrincipalArn)), createTime: \(Swift.String(describing: createTime)), lastDisabledTime: \(Swift.String(describing: lastDisabledTime)), lastEnabledTime: \(Swift.String(describing: lastEnabledTime)), lastLoginTime: \(Swift.String(describing: lastLoginTime)), lastModifiedTime: \(Swift.String(describing: lastModifiedTime)), status: \(Swift.String(describing: status)), type: \(Swift.String(describing: type)), userId: \(Swift.String(describing: userId)), emailAddress: \"CONTENT_REDACTED\", firstName: \"CONTENT_REDACTED\", lastName: \"CONTENT_REDACTED\")"}
}

extension FinspacedataClientTypes {

    public enum LocationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ingestion
        case sagemaker
        case sdkUnknown(Swift.String)

        public static var allCases: [LocationType] {
            return [
                .ingestion,
                .sagemaker
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ingestion: return "INGESTION"
            case .sagemaker: return "SAGEMAKER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetWorkingLocationInput {
    /// Specify the type of the working location.
    ///
    /// * SAGEMAKER – Use the Amazon S3 location as a temporary location to store data content when working with FinSpace Notebooks that run on SageMaker studio.
    ///
    /// * INGESTION – Use the Amazon S3 location as a staging location to copy your data content and then use the location with the Changeset creation operation.
    public var locationType: FinspacedataClientTypes.LocationType?

    public init(
        locationType: FinspacedataClientTypes.LocationType? = nil
    )
    {
        self.locationType = locationType
    }
}

public struct GetWorkingLocationOutput {
    /// Returns the Amazon S3 bucket name for the working location.
    public var s3Bucket: Swift.String?
    /// Returns the Amazon S3 Path for the working location.
    public var s3Path: Swift.String?
    /// Returns the Amazon S3 URI for the working location.
    public var s3Uri: Swift.String?

    public init(
        s3Bucket: Swift.String? = nil,
        s3Path: Swift.String? = nil,
        s3Uri: Swift.String? = nil
    )
    {
        self.s3Bucket = s3Bucket
        self.s3Path = s3Path
        self.s3Uri = s3Uri
    }
}

/// Request to ListChangesetsRequest. It exposes minimal query filters.
public struct ListChangesetsInput {
    /// The unique identifier for the FinSpace Dataset to which the Changeset belongs.
    /// This member is required.
    public var datasetId: Swift.String?
    /// The maximum number of results per page.
    public var maxResults: Swift.Int?
    /// A token that indicates where a results page should begin.
    public var nextToken: Swift.String?

    public init(
        datasetId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetId = datasetId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension FinspacedataClientTypes {
    /// A Changeset is unit of data in a Dataset.
    public struct ChangesetSummary {
        /// Beginning time from which the Changeset is active. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        public var activeFromTimestamp: Swift.Int?
        /// Time until which the Changeset is active. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        public var activeUntilTimestamp: Swift.Int?
        /// Type that indicates how a Changeset is applied to a Dataset.
        ///
        /// * REPLACE – Changeset is considered as a replacement to all prior loaded Changesets.
        ///
        /// * APPEND – Changeset is considered as an addition to the end of all prior loaded Changesets.
        ///
        /// * MODIFY – Changeset is considered as a replacement to a specific prior ingested Changeset.
        public var changeType: FinspacedataClientTypes.ChangeType?
        /// The ARN identifier of the Changeset.
        public var changesetArn: Swift.String?
        /// The unique identifier for a Changeset.
        public var changesetId: Swift.String?
        /// The timestamp at which the Changeset was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        public var createTime: Swift.Int
        /// The unique identifier for the FinSpace Dataset in which the Changeset is created.
        public var datasetId: Swift.String?
        /// The structure with error messages.
        public var errorInfo: FinspacedataClientTypes.ChangesetErrorInfo?
        /// Options that define the structure of the source file(s).
        public var formatParams: [Swift.String: Swift.String]?
        /// Options that define the location of the data being ingested.
        public var sourceParams: [Swift.String: Swift.String]?
        /// Status of the Changeset ingestion.
        ///
        /// * PENDING – Changeset is pending creation.
        ///
        /// * FAILED – Changeset creation has failed.
        ///
        /// * SUCCESS – Changeset creation has succeeded.
        ///
        /// * RUNNING – Changeset creation is running.
        ///
        /// * STOP_REQUESTED – User requested Changeset creation to stop.
        public var status: FinspacedataClientTypes.IngestionStatus?
        /// The unique identifier of the updated Changeset.
        public var updatedByChangesetId: Swift.String?
        /// The unique identifier of the Changeset that is updated.
        public var updatesChangesetId: Swift.String?

        public init(
            activeFromTimestamp: Swift.Int? = 0,
            activeUntilTimestamp: Swift.Int? = 0,
            changeType: FinspacedataClientTypes.ChangeType? = nil,
            changesetArn: Swift.String? = nil,
            changesetId: Swift.String? = nil,
            createTime: Swift.Int = 0,
            datasetId: Swift.String? = nil,
            errorInfo: FinspacedataClientTypes.ChangesetErrorInfo? = nil,
            formatParams: [Swift.String: Swift.String]? = nil,
            sourceParams: [Swift.String: Swift.String]? = nil,
            status: FinspacedataClientTypes.IngestionStatus? = nil,
            updatedByChangesetId: Swift.String? = nil,
            updatesChangesetId: Swift.String? = nil
        )
        {
            self.activeFromTimestamp = activeFromTimestamp
            self.activeUntilTimestamp = activeUntilTimestamp
            self.changeType = changeType
            self.changesetArn = changesetArn
            self.changesetId = changesetId
            self.createTime = createTime
            self.datasetId = datasetId
            self.errorInfo = errorInfo
            self.formatParams = formatParams
            self.sourceParams = sourceParams
            self.status = status
            self.updatedByChangesetId = updatedByChangesetId
            self.updatesChangesetId = updatesChangesetId
        }
    }

}

/// Response to ListChangesetsResponse. This returns a list of dataset changesets that match the query criteria.
public struct ListChangesetsOutput {
    /// List of Changesets found.
    public var changesets: [FinspacedataClientTypes.ChangesetSummary]?
    /// A token that indicates where a results page should begin.
    public var nextToken: Swift.String?

    public init(
        changesets: [FinspacedataClientTypes.ChangesetSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.changesets = changesets
        self.nextToken = nextToken
    }
}

/// Request for the ListDatasets operation.
public struct ListDatasetsInput {
    /// The maximum number of results per page.
    public var maxResults: Swift.Int?
    /// A token that indicates where a results page should begin.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension FinspacedataClientTypes {
    /// The structure for a Dataset.
    public struct Dataset {
        /// The unique resource identifier for a Dataset.
        public var alias: Swift.String?
        /// The timestamp at which the Dataset was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        public var createTime: Swift.Int
        /// The ARN identifier of the Dataset.
        public var datasetArn: Swift.String?
        /// Description for a Dataset.
        public var datasetDescription: Swift.String?
        /// An identifier for a Dataset.
        public var datasetId: Swift.String?
        /// Display title for a Dataset.
        public var datasetTitle: Swift.String?
        /// The format in which Dataset data is structured.
        ///
        /// * TABULAR – Data is structured in a tabular format.
        ///
        /// * NON_TABULAR – Data is structured in a non-tabular format.
        public var kind: FinspacedataClientTypes.DatasetKind?
        /// The last time that the Dataset was modified. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        public var lastModifiedTime: Swift.Int
        /// Contact information for a Dataset owner.
        public var ownerInfo: FinspacedataClientTypes.DatasetOwnerInfo?
        /// Definition for a schema on a tabular Dataset.
        public var schemaDefinition: FinspacedataClientTypes.SchemaUnion?

        public init(
            alias: Swift.String? = nil,
            createTime: Swift.Int = 0,
            datasetArn: Swift.String? = nil,
            datasetDescription: Swift.String? = nil,
            datasetId: Swift.String? = nil,
            datasetTitle: Swift.String? = nil,
            kind: FinspacedataClientTypes.DatasetKind? = nil,
            lastModifiedTime: Swift.Int = 0,
            ownerInfo: FinspacedataClientTypes.DatasetOwnerInfo? = nil,
            schemaDefinition: FinspacedataClientTypes.SchemaUnion? = nil
        )
        {
            self.alias = alias
            self.createTime = createTime
            self.datasetArn = datasetArn
            self.datasetDescription = datasetDescription
            self.datasetId = datasetId
            self.datasetTitle = datasetTitle
            self.kind = kind
            self.lastModifiedTime = lastModifiedTime
            self.ownerInfo = ownerInfo
            self.schemaDefinition = schemaDefinition
        }
    }

}

/// Response for the ListDatasets operation
public struct ListDatasetsOutput {
    /// List of Datasets.
    public var datasets: [FinspacedataClientTypes.Dataset]?
    /// A token that indicates where a results page should begin.
    public var nextToken: Swift.String?

    public init(
        datasets: [FinspacedataClientTypes.Dataset]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasets = datasets
        self.nextToken = nextToken
    }
}

/// Request for a list data views.
public struct ListDataViewsInput {
    /// The unique identifier of the Dataset for which to retrieve Dataviews.
    /// This member is required.
    public var datasetId: Swift.String?
    /// The maximum number of results per page.
    public var maxResults: Swift.Int?
    /// A token that indicates where a results page should begin.
    public var nextToken: Swift.String?

    public init(
        datasetId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetId = datasetId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension FinspacedataClientTypes {
    /// Structure for the summary of a Dataview.
    public struct DataViewSummary {
        /// Time range to use for the Dataview. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        public var asOfTimestamp: Swift.Int?
        /// The flag to indicate Dataview should be updated automatically.
        public var autoUpdate: Swift.Bool
        /// The timestamp at which the Dataview was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        public var createTime: Swift.Int
        /// The ARN identifier of the Dataview.
        public var dataViewArn: Swift.String?
        /// The unique identifier for the Dataview.
        public var dataViewId: Swift.String?
        /// Th unique identifier for the Dataview Dataset.
        public var datasetId: Swift.String?
        /// Information about the Dataview destination.
        public var destinationTypeProperties: FinspacedataClientTypes.DataViewDestinationTypeParams?
        /// The structure with error messages.
        public var errorInfo: FinspacedataClientTypes.DataViewErrorInfo?
        /// The last time that a Dataview was modified. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        public var lastModifiedTime: Swift.Int
        /// Ordered set of column names used to partition data.
        public var partitionColumns: [Swift.String]?
        /// Columns to be used for sorting the data.
        public var sortColumns: [Swift.String]?
        /// The status of a Dataview creation.
        ///
        /// * RUNNING – Dataview creation is running.
        ///
        /// * STARTING – Dataview creation is starting.
        ///
        /// * FAILED – Dataview creation has failed.
        ///
        /// * CANCELLED – Dataview creation has been cancelled.
        ///
        /// * TIMEOUT – Dataview creation has timed out.
        ///
        /// * SUCCESS – Dataview creation has succeeded.
        ///
        /// * PENDING – Dataview creation is pending.
        ///
        /// * FAILED_CLEANUP_FAILED – Dataview creation failed and resource cleanup failed.
        public var status: FinspacedataClientTypes.DataViewStatus?

        public init(
            asOfTimestamp: Swift.Int? = 0,
            autoUpdate: Swift.Bool = false,
            createTime: Swift.Int = 0,
            dataViewArn: Swift.String? = nil,
            dataViewId: Swift.String? = nil,
            datasetId: Swift.String? = nil,
            destinationTypeProperties: FinspacedataClientTypes.DataViewDestinationTypeParams? = nil,
            errorInfo: FinspacedataClientTypes.DataViewErrorInfo? = nil,
            lastModifiedTime: Swift.Int = 0,
            partitionColumns: [Swift.String]? = nil,
            sortColumns: [Swift.String]? = nil,
            status: FinspacedataClientTypes.DataViewStatus? = nil
        )
        {
            self.asOfTimestamp = asOfTimestamp
            self.autoUpdate = autoUpdate
            self.createTime = createTime
            self.dataViewArn = dataViewArn
            self.dataViewId = dataViewId
            self.datasetId = datasetId
            self.destinationTypeProperties = destinationTypeProperties
            self.errorInfo = errorInfo
            self.lastModifiedTime = lastModifiedTime
            self.partitionColumns = partitionColumns
            self.sortColumns = sortColumns
            self.status = status
        }
    }

}

public struct ListDataViewsOutput {
    /// A list of Dataviews.
    public var dataViews: [FinspacedataClientTypes.DataViewSummary]?
    /// A token that indicates where a results page should begin.
    public var nextToken: Swift.String?

    public init(
        dataViews: [FinspacedataClientTypes.DataViewSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dataViews = dataViews
        self.nextToken = nextToken
    }
}

public struct ListPermissionGroupsInput {
    /// The maximum number of results per page.
    /// This member is required.
    public var maxResults: Swift.Int?
    /// A token that indicates where a results page should begin.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListPermissionGroupsOutput {
    /// A token that indicates where a results page should begin.
    public var nextToken: Swift.String?
    /// A list of all the permission groups.
    public var permissionGroups: [FinspacedataClientTypes.PermissionGroup]?

    public init(
        nextToken: Swift.String? = nil,
        permissionGroups: [FinspacedataClientTypes.PermissionGroup]? = nil
    )
    {
        self.nextToken = nextToken
        self.permissionGroups = permissionGroups
    }
}

public struct ListPermissionGroupsByUserInput {
    /// The maximum number of results per page.
    /// This member is required.
    public var maxResults: Swift.Int?
    /// A token that indicates where a results page should begin.
    public var nextToken: Swift.String?
    /// The unique identifier for the user.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.userId = userId
    }
}

extension FinspacedataClientTypes {
    /// The structure of a permission group associated with a user.
    public struct PermissionGroupByUser {
        /// Indicates the status of the user within a permission group.
        ///
        /// * ADDITION_IN_PROGRESS – The user is currently being added to the permission group.
        ///
        /// * ADDITION_SUCCESS – The user is successfully added to the permission group.
        ///
        /// * REMOVAL_IN_PROGRESS – The user is currently being removed from the permission group.
        public var membershipStatus: FinspacedataClientTypes.PermissionGroupMembershipStatus?
        /// The name of the permission group.
        public var name: Swift.String?
        /// The unique identifier for the permission group.
        public var permissionGroupId: Swift.String?

        public init(
            membershipStatus: FinspacedataClientTypes.PermissionGroupMembershipStatus? = nil,
            name: Swift.String? = nil,
            permissionGroupId: Swift.String? = nil
        )
        {
            self.membershipStatus = membershipStatus
            self.name = name
            self.permissionGroupId = permissionGroupId
        }
    }

}

extension FinspacedataClientTypes.PermissionGroupByUser: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PermissionGroupByUser(membershipStatus: \(Swift.String(describing: membershipStatus)), permissionGroupId: \(Swift.String(describing: permissionGroupId)), name: \"CONTENT_REDACTED\")"}
}

public struct ListPermissionGroupsByUserOutput {
    /// A token that indicates where a results page should begin.
    public var nextToken: Swift.String?
    /// A list of returned permission groups.
    public var permissionGroups: [FinspacedataClientTypes.PermissionGroupByUser]?

    public init(
        nextToken: Swift.String? = nil,
        permissionGroups: [FinspacedataClientTypes.PermissionGroupByUser]? = nil
    )
    {
        self.nextToken = nextToken
        self.permissionGroups = permissionGroups
    }
}

public struct ListUsersInput {
    /// The maximum number of results per page.
    /// This member is required.
    public var maxResults: Swift.Int?
    /// A token that indicates where a results page should begin.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension FinspacedataClientTypes {
    /// The details of the user.
    public struct User {
        /// Indicates whether the user can use the GetProgrammaticAccessCredentials API to obtain credentials that can then be used to access other FinSpace Data API operations.
        ///
        /// * ENABLED – The user has permissions to use the APIs.
        ///
        /// * DISABLED – The user does not have permissions to use any APIs.
        public var apiAccess: FinspacedataClientTypes.ApiAccess?
        /// The ARN identifier of an AWS user or role that is allowed to call the GetProgrammaticAccessCredentials API to obtain a credentials token for a specific FinSpace user. This must be an IAM role within your FinSpace account.
        public var apiAccessPrincipalArn: Swift.String?
        /// The timestamp at which the user was created in FinSpace. The value is determined as epoch time in milliseconds.
        public var createTime: Swift.Int
        /// The email address of the user. The email address serves as a uniquer identifier for each user and cannot be changed after it's created.
        public var emailAddress: Swift.String?
        /// The first name of the user.
        public var firstName: Swift.String?
        /// Describes the last time the user was deactivated. The value is determined as epoch time in milliseconds.
        public var lastDisabledTime: Swift.Int
        /// Describes the last time the user was activated. The value is determined as epoch time in milliseconds.
        public var lastEnabledTime: Swift.Int
        /// Describes the last time that the user logged into their account. The value is determined as epoch time in milliseconds.
        public var lastLoginTime: Swift.Int
        /// Describes the last time the user was updated. The value is determined as epoch time in milliseconds.
        public var lastModifiedTime: Swift.Int
        /// The last name of the user.
        public var lastName: Swift.String?
        /// The current status of the user.
        ///
        /// * CREATING – The user creation is in progress.
        ///
        /// * ENABLED – The user is created and is currently active.
        ///
        /// * DISABLED – The user is currently inactive.
        public var status: FinspacedataClientTypes.UserStatus?
        /// Indicates the type of user.
        ///
        /// * SUPER_USER – A user with permission to all the functionality and data in FinSpace.
        ///
        /// * APP_USER – A user with specific permissions in FinSpace. The users are assigned permissions by adding them to a permission group.
        public var type: FinspacedataClientTypes.UserType?
        /// The unique identifier for the user.
        public var userId: Swift.String?

        public init(
            apiAccess: FinspacedataClientTypes.ApiAccess? = nil,
            apiAccessPrincipalArn: Swift.String? = nil,
            createTime: Swift.Int = 0,
            emailAddress: Swift.String? = nil,
            firstName: Swift.String? = nil,
            lastDisabledTime: Swift.Int = 0,
            lastEnabledTime: Swift.Int = 0,
            lastLoginTime: Swift.Int = 0,
            lastModifiedTime: Swift.Int = 0,
            lastName: Swift.String? = nil,
            status: FinspacedataClientTypes.UserStatus? = nil,
            type: FinspacedataClientTypes.UserType? = nil,
            userId: Swift.String? = nil
        )
        {
            self.apiAccess = apiAccess
            self.apiAccessPrincipalArn = apiAccessPrincipalArn
            self.createTime = createTime
            self.emailAddress = emailAddress
            self.firstName = firstName
            self.lastDisabledTime = lastDisabledTime
            self.lastEnabledTime = lastEnabledTime
            self.lastLoginTime = lastLoginTime
            self.lastModifiedTime = lastModifiedTime
            self.lastName = lastName
            self.status = status
            self.type = type
            self.userId = userId
        }
    }

}

extension FinspacedataClientTypes.User: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "User(apiAccess: \(Swift.String(describing: apiAccess)), apiAccessPrincipalArn: \(Swift.String(describing: apiAccessPrincipalArn)), createTime: \(Swift.String(describing: createTime)), lastDisabledTime: \(Swift.String(describing: lastDisabledTime)), lastEnabledTime: \(Swift.String(describing: lastEnabledTime)), lastLoginTime: \(Swift.String(describing: lastLoginTime)), lastModifiedTime: \(Swift.String(describing: lastModifiedTime)), status: \(Swift.String(describing: status)), type: \(Swift.String(describing: type)), userId: \(Swift.String(describing: userId)), emailAddress: \"CONTENT_REDACTED\", firstName: \"CONTENT_REDACTED\", lastName: \"CONTENT_REDACTED\")"}
}

public struct ListUsersOutput {
    /// A token that indicates where a results page should begin.
    public var nextToken: Swift.String?
    /// A list of all the users.
    public var users: [FinspacedataClientTypes.User]?

    public init(
        nextToken: Swift.String? = nil,
        users: [FinspacedataClientTypes.User]? = nil
    )
    {
        self.nextToken = nextToken
        self.users = users
    }
}

public struct ListUsersByPermissionGroupInput {
    /// The maximum number of results per page.
    /// This member is required.
    public var maxResults: Swift.Int?
    /// A token that indicates where a results page should begin.
    public var nextToken: Swift.String?
    /// The unique identifier for the permission group.
    /// This member is required.
    public var permissionGroupId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        permissionGroupId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.permissionGroupId = permissionGroupId
    }
}

extension FinspacedataClientTypes {
    /// The structure of a user associated with a permission group.
    public struct UserByPermissionGroup {
        /// Indicates whether the user can access FinSpace API operations.
        ///
        /// * ENABLED – The user has permissions to use the API operations.
        ///
        /// * DISABLED – The user does not have permissions to use any API operations.
        public var apiAccess: FinspacedataClientTypes.ApiAccess?
        /// The IAM ARN identifier that is attached to FinSpace API calls.
        public var apiAccessPrincipalArn: Swift.String?
        /// The email address of the user. The email address serves as a unique identifier for each user and cannot be changed after it's created.
        public var emailAddress: Swift.String?
        /// The first name of the user.
        public var firstName: Swift.String?
        /// The last name of the user.
        public var lastName: Swift.String?
        /// Indicates the status of the user within a permission group.
        ///
        /// * ADDITION_IN_PROGRESS – The user is currently being added to the permission group.
        ///
        /// * ADDITION_SUCCESS – The user is successfully added to the permission group.
        ///
        /// * REMOVAL_IN_PROGRESS – The user is currently being removed from the permission group.
        public var membershipStatus: FinspacedataClientTypes.PermissionGroupMembershipStatus?
        /// The current status of the user.
        ///
        /// * CREATING – The user creation is in progress.
        ///
        /// * ENABLED – The user is created and is currently active.
        ///
        /// * DISABLED – The user is currently inactive.
        public var status: FinspacedataClientTypes.UserStatus?
        /// Indicates the type of user.
        ///
        /// * SUPER_USER – A user with permission to all the functionality and data in FinSpace.
        ///
        /// * APP_USER – A user with specific permissions in FinSpace. The users are assigned permissions by adding them to a permission group.
        public var type: FinspacedataClientTypes.UserType?
        /// The unique identifier for the user.
        public var userId: Swift.String?

        public init(
            apiAccess: FinspacedataClientTypes.ApiAccess? = nil,
            apiAccessPrincipalArn: Swift.String? = nil,
            emailAddress: Swift.String? = nil,
            firstName: Swift.String? = nil,
            lastName: Swift.String? = nil,
            membershipStatus: FinspacedataClientTypes.PermissionGroupMembershipStatus? = nil,
            status: FinspacedataClientTypes.UserStatus? = nil,
            type: FinspacedataClientTypes.UserType? = nil,
            userId: Swift.String? = nil
        )
        {
            self.apiAccess = apiAccess
            self.apiAccessPrincipalArn = apiAccessPrincipalArn
            self.emailAddress = emailAddress
            self.firstName = firstName
            self.lastName = lastName
            self.membershipStatus = membershipStatus
            self.status = status
            self.type = type
            self.userId = userId
        }
    }

}

extension FinspacedataClientTypes.UserByPermissionGroup: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UserByPermissionGroup(apiAccess: \(Swift.String(describing: apiAccess)), apiAccessPrincipalArn: \(Swift.String(describing: apiAccessPrincipalArn)), membershipStatus: \(Swift.String(describing: membershipStatus)), status: \(Swift.String(describing: status)), type: \(Swift.String(describing: type)), userId: \(Swift.String(describing: userId)), emailAddress: \"CONTENT_REDACTED\", firstName: \"CONTENT_REDACTED\", lastName: \"CONTENT_REDACTED\")"}
}

public struct ListUsersByPermissionGroupOutput {
    /// A token that indicates where a results page should begin.
    public var nextToken: Swift.String?
    /// Lists details of all users in a specific permission group.
    public var users: [FinspacedataClientTypes.UserByPermissionGroup]?

    public init(
        nextToken: Swift.String? = nil,
        users: [FinspacedataClientTypes.UserByPermissionGroup]? = nil
    )
    {
        self.nextToken = nextToken
        self.users = users
    }
}

public struct ResetUserPasswordInput {
    /// A token that ensures idempotency. This token expires in 10 minutes.
    public var clientToken: Swift.String?
    /// The unique identifier of the user that a temporary password is requested for.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.userId = userId
    }
}

public struct ResetUserPasswordOutput {
    /// A randomly generated temporary password for the requested user. This password expires in 7 days.
    public var temporaryPassword: Swift.String?
    /// The unique identifier of the user that a new password is generated for.
    public var userId: Swift.String?

    public init(
        temporaryPassword: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.temporaryPassword = temporaryPassword
        self.userId = userId
    }
}

extension ResetUserPasswordOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResetUserPasswordOutput(userId: \(Swift.String(describing: userId)), temporaryPassword: \"CONTENT_REDACTED\")"}
}

/// Request to update an existing changeset.
public struct UpdateChangesetInput {
    /// The unique identifier for the Changeset to update.
    /// This member is required.
    public var changesetId: Swift.String?
    /// A token that ensures idempotency. This token expires in 10 minutes.
    public var clientToken: Swift.String?
    /// The unique identifier for the FinSpace Dataset in which the Changeset is created.
    /// This member is required.
    public var datasetId: Swift.String?
    /// Options that define the structure of the source file(s) including the format type (formatType), header row (withHeader), data separation character (separator) and the type of compression (compression). formatType is a required attribute and can have the following values:
    ///
    /// * PARQUET – Parquet source file format.
    ///
    /// * CSV – CSV source file format.
    ///
    /// * JSON – JSON source file format.
    ///
    /// * XML – XML source file format.
    ///
    ///
    /// Here is an example of how you could specify the formatParams:  "formatParams": { "formatType": "CSV", "withHeader": "true", "separator": ",", "compression":"None" }  Note that if you only provide formatType as CSV, the rest of the attributes will automatically default to CSV values as following:  { "withHeader": "true", "separator": "," }  For more information about supported file formats, see [Supported Data Types and File Formats](https://docs.aws.amazon.com/finspace/latest/userguide/supported-data-types.html) in the FinSpace User Guide.
    /// This member is required.
    public var formatParams: [Swift.String: Swift.String]?
    /// Options that define the location of the data being ingested (s3SourcePath) and the source of the changeset (sourceType). Both s3SourcePath and sourceType are required attributes. Here is an example of how you could specify the sourceParams:  "sourceParams": { "s3SourcePath": "s3://finspace-landing-us-east-2-bk7gcfvitndqa6ebnvys4d/scratch/wr5hh8pwkpqqkxa4sxrmcw/ingestion/equity.csv", "sourceType": "S3" }  The S3 path that you specify must allow the FinSpace role access. To do that, you first need to configure the IAM policy on S3 bucket. For more information, see [Loading data from an Amazon S3 Bucket using the FinSpace API](https://docs.aws.amazon.com/finspace/latest/data-api/fs-using-the-finspace-api.html#access-s3-buckets)section.
    /// This member is required.
    public var sourceParams: [Swift.String: Swift.String]?

    public init(
        changesetId: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        datasetId: Swift.String? = nil,
        formatParams: [Swift.String: Swift.String]? = nil,
        sourceParams: [Swift.String: Swift.String]? = nil
    )
    {
        self.changesetId = changesetId
        self.clientToken = clientToken
        self.datasetId = datasetId
        self.formatParams = formatParams
        self.sourceParams = sourceParams
    }
}

/// The response from a update changeset operation.
public struct UpdateChangesetOutput {
    /// The unique identifier for the Changeset to update.
    public var changesetId: Swift.String?
    /// The unique identifier for the FinSpace Dataset in which the Changeset is created.
    public var datasetId: Swift.String?

    public init(
        changesetId: Swift.String? = nil,
        datasetId: Swift.String? = nil
    )
    {
        self.changesetId = changesetId
        self.datasetId = datasetId
    }
}

/// The request for an UpdateDataset operation
public struct UpdateDatasetInput {
    /// The unique resource identifier for a Dataset.
    public var alias: Swift.String?
    /// A token that ensures idempotency. This token expires in 10 minutes.
    public var clientToken: Swift.String?
    /// A description for the Dataset.
    public var datasetDescription: Swift.String?
    /// The unique identifier for the Dataset to update.
    /// This member is required.
    public var datasetId: Swift.String?
    /// A display title for the Dataset.
    /// This member is required.
    public var datasetTitle: Swift.String?
    /// The format in which the Dataset data is structured.
    ///
    /// * TABULAR – Data is structured in a tabular format.
    ///
    /// * NON_TABULAR – Data is structured in a non-tabular format.
    /// This member is required.
    public var kind: FinspacedataClientTypes.DatasetKind?
    /// Definition for a schema on a tabular Dataset.
    public var schemaDefinition: FinspacedataClientTypes.SchemaUnion?

    public init(
        alias: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        datasetDescription: Swift.String? = nil,
        datasetId: Swift.String? = nil,
        datasetTitle: Swift.String? = nil,
        kind: FinspacedataClientTypes.DatasetKind? = nil,
        schemaDefinition: FinspacedataClientTypes.SchemaUnion? = nil
    )
    {
        self.alias = alias
        self.clientToken = clientToken
        self.datasetDescription = datasetDescription
        self.datasetId = datasetId
        self.datasetTitle = datasetTitle
        self.kind = kind
        self.schemaDefinition = schemaDefinition
    }
}

/// The response from an UpdateDataset operation
public struct UpdateDatasetOutput {
    /// The unique identifier for updated Dataset.
    public var datasetId: Swift.String?

    public init(
        datasetId: Swift.String? = nil
    )
    {
        self.datasetId = datasetId
    }
}

public struct UpdatePermissionGroupInput {
    /// The permissions that are granted to a specific group for accessing the FinSpace application. When assigning application permissions, be aware that the permission ManageUsersAndGroups allows users to grant themselves or others access to any functionality in their FinSpace environment's application. It should only be granted to trusted users.
    ///
    /// * CreateDataset – Group members can create new datasets.
    ///
    /// * ManageClusters – Group members can manage Apache Spark clusters from FinSpace notebooks.
    ///
    /// * ManageUsersAndGroups – Group members can manage users and permission groups. This is a privileged permission that allows users to grant themselves or others access to any functionality in the application. It should only be granted to trusted users.
    ///
    /// * ManageAttributeSets – Group members can manage attribute sets.
    ///
    /// * ViewAuditData – Group members can view audit data.
    ///
    /// * AccessNotebooks – Group members will have access to FinSpace notebooks.
    ///
    /// * GetTemporaryCredentials – Group members can get temporary API credentials.
    public var applicationPermissions: [FinspacedataClientTypes.ApplicationPermission]?
    /// A token that ensures idempotency. This token expires in 10 minutes.
    public var clientToken: Swift.String?
    /// A brief description for the permission group.
    public var description: Swift.String?
    /// The name of the permission group.
    public var name: Swift.String?
    /// The unique identifier for the permission group to update.
    /// This member is required.
    public var permissionGroupId: Swift.String?

    public init(
        applicationPermissions: [FinspacedataClientTypes.ApplicationPermission]? = nil,
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        permissionGroupId: Swift.String? = nil
    )
    {
        self.applicationPermissions = applicationPermissions
        self.clientToken = clientToken
        self.description = description
        self.name = name
        self.permissionGroupId = permissionGroupId
    }
}

extension UpdatePermissionGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdatePermissionGroupInput(applicationPermissions: \(Swift.String(describing: applicationPermissions)), clientToken: \(Swift.String(describing: clientToken)), permissionGroupId: \(Swift.String(describing: permissionGroupId)), description: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

public struct UpdatePermissionGroupOutput {
    /// The unique identifier for the updated permission group.
    public var permissionGroupId: Swift.String?

    public init(
        permissionGroupId: Swift.String? = nil
    )
    {
        self.permissionGroupId = permissionGroupId
    }
}

public struct UpdateUserInput {
    /// The option to indicate whether the user can use the GetProgrammaticAccessCredentials API to obtain credentials that can then be used to access other FinSpace Data API operations.
    ///
    /// * ENABLED – The user has permissions to use the APIs.
    ///
    /// * DISABLED – The user does not have permissions to use any APIs.
    public var apiAccess: FinspacedataClientTypes.ApiAccess?
    /// The ARN identifier of an AWS user or role that is allowed to call the GetProgrammaticAccessCredentials API to obtain a credentials token for a specific FinSpace user. This must be an IAM role within your FinSpace account.
    public var apiAccessPrincipalArn: Swift.String?
    /// A token that ensures idempotency. This token expires in 10 minutes.
    public var clientToken: Swift.String?
    /// The first name of the user.
    public var firstName: Swift.String?
    /// The last name of the user.
    public var lastName: Swift.String?
    /// The option to indicate the type of user.
    ///
    /// * SUPER_USER– A user with permission to all the functionality and data in FinSpace.
    ///
    /// * APP_USER – A user with specific permissions in FinSpace. The users are assigned permissions by adding them to a permission group.
    public var type: FinspacedataClientTypes.UserType?
    /// The unique identifier for the user that you want to update.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        apiAccess: FinspacedataClientTypes.ApiAccess? = nil,
        apiAccessPrincipalArn: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        firstName: Swift.String? = nil,
        lastName: Swift.String? = nil,
        type: FinspacedataClientTypes.UserType? = nil,
        userId: Swift.String? = nil
    )
    {
        self.apiAccess = apiAccess
        self.apiAccessPrincipalArn = apiAccessPrincipalArn
        self.clientToken = clientToken
        self.firstName = firstName
        self.lastName = lastName
        self.type = type
        self.userId = userId
    }
}

extension UpdateUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateUserInput(apiAccess: \(Swift.String(describing: apiAccess)), apiAccessPrincipalArn: \(Swift.String(describing: apiAccessPrincipalArn)), clientToken: \(Swift.String(describing: clientToken)), type: \(Swift.String(describing: type)), userId: \(Swift.String(describing: userId)), firstName: \"CONTENT_REDACTED\", lastName: \"CONTENT_REDACTED\")"}
}

public struct UpdateUserOutput {
    /// The unique identifier of the updated user.
    public var userId: Swift.String?

    public init(
        userId: Swift.String? = nil
    )
    {
        self.userId = userId
    }
}

extension AssociateUserToPermissionGroupInput {

    static func urlPathProvider(_ value: AssociateUserToPermissionGroupInput) -> Swift.String? {
        guard let permissionGroupId = value.permissionGroupId else {
            return nil
        }
        guard let userId = value.userId else {
            return nil
        }
        return "/permission-group/\(permissionGroupId.urlPercentEncoding())/users/\(userId.urlPercentEncoding())"
    }
}

extension CreateChangesetInput {

    static func urlPathProvider(_ value: CreateChangesetInput) -> Swift.String? {
        guard let datasetId = value.datasetId else {
            return nil
        }
        return "/datasets/\(datasetId.urlPercentEncoding())/changesetsv2"
    }
}

extension CreateDatasetInput {

    static func urlPathProvider(_ value: CreateDatasetInput) -> Swift.String? {
        return "/datasetsv2"
    }
}

extension CreateDataViewInput {

    static func urlPathProvider(_ value: CreateDataViewInput) -> Swift.String? {
        guard let datasetId = value.datasetId else {
            return nil
        }
        return "/datasets/\(datasetId.urlPercentEncoding())/dataviewsv2"
    }
}

extension CreatePermissionGroupInput {

    static func urlPathProvider(_ value: CreatePermissionGroupInput) -> Swift.String? {
        return "/permission-group"
    }
}

extension CreateUserInput {

    static func urlPathProvider(_ value: CreateUserInput) -> Swift.String? {
        return "/user"
    }
}

extension DeleteDatasetInput {

    static func urlPathProvider(_ value: DeleteDatasetInput) -> Swift.String? {
        guard let datasetId = value.datasetId else {
            return nil
        }
        return "/datasetsv2/\(datasetId.urlPercentEncoding())"
    }
}

extension DeleteDatasetInput {

    static func queryItemProvider(_ value: DeleteDatasetInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let clientToken = value.clientToken {
            let clientTokenQueryItem = Smithy.URIQueryItem(name: "clientToken".urlPercentEncoding(), value: Swift.String(clientToken).urlPercentEncoding())
            items.append(clientTokenQueryItem)
        }
        return items
    }
}

extension DeletePermissionGroupInput {

    static func urlPathProvider(_ value: DeletePermissionGroupInput) -> Swift.String? {
        guard let permissionGroupId = value.permissionGroupId else {
            return nil
        }
        return "/permission-group/\(permissionGroupId.urlPercentEncoding())"
    }
}

extension DeletePermissionGroupInput {

    static func queryItemProvider(_ value: DeletePermissionGroupInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let clientToken = value.clientToken {
            let clientTokenQueryItem = Smithy.URIQueryItem(name: "clientToken".urlPercentEncoding(), value: Swift.String(clientToken).urlPercentEncoding())
            items.append(clientTokenQueryItem)
        }
        return items
    }
}

extension DisableUserInput {

    static func urlPathProvider(_ value: DisableUserInput) -> Swift.String? {
        guard let userId = value.userId else {
            return nil
        }
        return "/user/\(userId.urlPercentEncoding())/disable"
    }
}

extension DisassociateUserFromPermissionGroupInput {

    static func urlPathProvider(_ value: DisassociateUserFromPermissionGroupInput) -> Swift.String? {
        guard let permissionGroupId = value.permissionGroupId else {
            return nil
        }
        guard let userId = value.userId else {
            return nil
        }
        return "/permission-group/\(permissionGroupId.urlPercentEncoding())/users/\(userId.urlPercentEncoding())"
    }
}

extension DisassociateUserFromPermissionGroupInput {

    static func queryItemProvider(_ value: DisassociateUserFromPermissionGroupInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let clientToken = value.clientToken {
            let clientTokenQueryItem = Smithy.URIQueryItem(name: "clientToken".urlPercentEncoding(), value: Swift.String(clientToken).urlPercentEncoding())
            items.append(clientTokenQueryItem)
        }
        return items
    }
}

extension EnableUserInput {

    static func urlPathProvider(_ value: EnableUserInput) -> Swift.String? {
        guard let userId = value.userId else {
            return nil
        }
        return "/user/\(userId.urlPercentEncoding())/enable"
    }
}

extension GetChangesetInput {

    static func urlPathProvider(_ value: GetChangesetInput) -> Swift.String? {
        guard let datasetId = value.datasetId else {
            return nil
        }
        guard let changesetId = value.changesetId else {
            return nil
        }
        return "/datasets/\(datasetId.urlPercentEncoding())/changesetsv2/\(changesetId.urlPercentEncoding())"
    }
}

extension GetDatasetInput {

    static func urlPathProvider(_ value: GetDatasetInput) -> Swift.String? {
        guard let datasetId = value.datasetId else {
            return nil
        }
        return "/datasetsv2/\(datasetId.urlPercentEncoding())"
    }
}

extension GetDataViewInput {

    static func urlPathProvider(_ value: GetDataViewInput) -> Swift.String? {
        guard let datasetId = value.datasetId else {
            return nil
        }
        guard let dataViewId = value.dataViewId else {
            return nil
        }
        return "/datasets/\(datasetId.urlPercentEncoding())/dataviewsv2/\(dataViewId.urlPercentEncoding())"
    }
}

extension GetExternalDataViewAccessDetailsInput {

    static func urlPathProvider(_ value: GetExternalDataViewAccessDetailsInput) -> Swift.String? {
        guard let datasetId = value.datasetId else {
            return nil
        }
        guard let dataViewId = value.dataViewId else {
            return nil
        }
        return "/datasets/\(datasetId.urlPercentEncoding())/dataviewsv2/\(dataViewId.urlPercentEncoding())/external-access-details"
    }
}

extension GetPermissionGroupInput {

    static func urlPathProvider(_ value: GetPermissionGroupInput) -> Swift.String? {
        guard let permissionGroupId = value.permissionGroupId else {
            return nil
        }
        return "/permission-group/\(permissionGroupId.urlPercentEncoding())"
    }
}

extension GetProgrammaticAccessCredentialsInput {

    static func urlPathProvider(_ value: GetProgrammaticAccessCredentialsInput) -> Swift.String? {
        return "/credentials/programmatic"
    }
}

extension GetProgrammaticAccessCredentialsInput {

    static func queryItemProvider(_ value: GetProgrammaticAccessCredentialsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let environmentId = value.environmentId else {
            let message = "Creating a URL Query Item failed. environmentId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let environmentIdQueryItem = Smithy.URIQueryItem(name: "environmentId".urlPercentEncoding(), value: Swift.String(environmentId).urlPercentEncoding())
        items.append(environmentIdQueryItem)
        if let durationInMinutes = value.durationInMinutes {
            let durationInMinutesQueryItem = Smithy.URIQueryItem(name: "durationInMinutes".urlPercentEncoding(), value: Swift.String(durationInMinutes).urlPercentEncoding())
            items.append(durationInMinutesQueryItem)
        }
        return items
    }
}

extension GetUserInput {

    static func urlPathProvider(_ value: GetUserInput) -> Swift.String? {
        guard let userId = value.userId else {
            return nil
        }
        return "/user/\(userId.urlPercentEncoding())"
    }
}

extension GetWorkingLocationInput {

    static func urlPathProvider(_ value: GetWorkingLocationInput) -> Swift.String? {
        return "/workingLocationV1"
    }
}

extension ListChangesetsInput {

    static func urlPathProvider(_ value: ListChangesetsInput) -> Swift.String? {
        guard let datasetId = value.datasetId else {
            return nil
        }
        return "/datasets/\(datasetId.urlPercentEncoding())/changesetsv2"
    }
}

extension ListChangesetsInput {

    static func queryItemProvider(_ value: ListChangesetsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListDatasetsInput {

    static func urlPathProvider(_ value: ListDatasetsInput) -> Swift.String? {
        return "/datasetsv2"
    }
}

extension ListDatasetsInput {

    static func queryItemProvider(_ value: ListDatasetsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListDataViewsInput {

    static func urlPathProvider(_ value: ListDataViewsInput) -> Swift.String? {
        guard let datasetId = value.datasetId else {
            return nil
        }
        return "/datasets/\(datasetId.urlPercentEncoding())/dataviewsv2"
    }
}

extension ListDataViewsInput {

    static func queryItemProvider(_ value: ListDataViewsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListPermissionGroupsInput {

    static func urlPathProvider(_ value: ListPermissionGroupsInput) -> Swift.String? {
        return "/permission-group"
    }
}

extension ListPermissionGroupsInput {

    static func queryItemProvider(_ value: ListPermissionGroupsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        guard let maxResults = value.maxResults else {
            let message = "Creating a URL Query Item failed. maxResults is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
        items.append(maxResultsQueryItem)
        return items
    }
}

extension ListPermissionGroupsByUserInput {

    static func urlPathProvider(_ value: ListPermissionGroupsByUserInput) -> Swift.String? {
        guard let userId = value.userId else {
            return nil
        }
        return "/user/\(userId.urlPercentEncoding())/permission-groups"
    }
}

extension ListPermissionGroupsByUserInput {

    static func queryItemProvider(_ value: ListPermissionGroupsByUserInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        guard let maxResults = value.maxResults else {
            let message = "Creating a URL Query Item failed. maxResults is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
        items.append(maxResultsQueryItem)
        return items
    }
}

extension ListUsersInput {

    static func urlPathProvider(_ value: ListUsersInput) -> Swift.String? {
        return "/user"
    }
}

extension ListUsersInput {

    static func queryItemProvider(_ value: ListUsersInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        guard let maxResults = value.maxResults else {
            let message = "Creating a URL Query Item failed. maxResults is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
        items.append(maxResultsQueryItem)
        return items
    }
}

extension ListUsersByPermissionGroupInput {

    static func urlPathProvider(_ value: ListUsersByPermissionGroupInput) -> Swift.String? {
        guard let permissionGroupId = value.permissionGroupId else {
            return nil
        }
        return "/permission-group/\(permissionGroupId.urlPercentEncoding())/users"
    }
}

extension ListUsersByPermissionGroupInput {

    static func queryItemProvider(_ value: ListUsersByPermissionGroupInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        guard let maxResults = value.maxResults else {
            let message = "Creating a URL Query Item failed. maxResults is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
        items.append(maxResultsQueryItem)
        return items
    }
}

extension ResetUserPasswordInput {

    static func urlPathProvider(_ value: ResetUserPasswordInput) -> Swift.String? {
        guard let userId = value.userId else {
            return nil
        }
        return "/user/\(userId.urlPercentEncoding())/password"
    }
}

extension UpdateChangesetInput {

    static func urlPathProvider(_ value: UpdateChangesetInput) -> Swift.String? {
        guard let datasetId = value.datasetId else {
            return nil
        }
        guard let changesetId = value.changesetId else {
            return nil
        }
        return "/datasets/\(datasetId.urlPercentEncoding())/changesetsv2/\(changesetId.urlPercentEncoding())"
    }
}

extension UpdateDatasetInput {

    static func urlPathProvider(_ value: UpdateDatasetInput) -> Swift.String? {
        guard let datasetId = value.datasetId else {
            return nil
        }
        return "/datasetsv2/\(datasetId.urlPercentEncoding())"
    }
}

extension UpdatePermissionGroupInput {

    static func urlPathProvider(_ value: UpdatePermissionGroupInput) -> Swift.String? {
        guard let permissionGroupId = value.permissionGroupId else {
            return nil
        }
        return "/permission-group/\(permissionGroupId.urlPercentEncoding())"
    }
}

extension UpdateUserInput {

    static func urlPathProvider(_ value: UpdateUserInput) -> Swift.String? {
        guard let userId = value.userId else {
            return nil
        }
        return "/user/\(userId.urlPercentEncoding())"
    }
}

extension AssociateUserToPermissionGroupInput {

    static func write(value: AssociateUserToPermissionGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
    }
}

extension CreateChangesetInput {

    static func write(value: CreateChangesetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["changeType"].write(value.changeType)
        try writer["clientToken"].write(value.clientToken)
        try writer["formatParams"].writeMap(value.formatParams, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["sourceParams"].writeMap(value.sourceParams, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateDatasetInput {

    static func write(value: CreateDatasetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["alias"].write(value.alias)
        try writer["clientToken"].write(value.clientToken)
        try writer["datasetDescription"].write(value.datasetDescription)
        try writer["datasetTitle"].write(value.datasetTitle)
        try writer["kind"].write(value.kind)
        try writer["ownerInfo"].write(value.ownerInfo, with: FinspacedataClientTypes.DatasetOwnerInfo.write(value:to:))
        try writer["permissionGroupParams"].write(value.permissionGroupParams, with: FinspacedataClientTypes.PermissionGroupParams.write(value:to:))
        try writer["schemaDefinition"].write(value.schemaDefinition, with: FinspacedataClientTypes.SchemaUnion.write(value:to:))
    }
}

extension CreateDataViewInput {

    static func write(value: CreateDataViewInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["asOfTimestamp"].write(value.asOfTimestamp)
        try writer["autoUpdate"].write(value.autoUpdate)
        try writer["clientToken"].write(value.clientToken)
        try writer["destinationTypeParams"].write(value.destinationTypeParams, with: FinspacedataClientTypes.DataViewDestinationTypeParams.write(value:to:))
        try writer["partitionColumns"].writeList(value.partitionColumns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["sortColumns"].writeList(value.sortColumns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreatePermissionGroupInput {

    static func write(value: CreatePermissionGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["applicationPermissions"].writeList(value.applicationPermissions, memberWritingClosure: SmithyReadWrite.WritingClosureBox<FinspacedataClientTypes.ApplicationPermission>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["clientToken"].write(value.clientToken)
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
    }
}

extension CreateUserInput {

    static func write(value: CreateUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["apiAccess"].write(value.apiAccess)
        try writer["apiAccessPrincipalArn"].write(value.apiAccessPrincipalArn)
        try writer["clientToken"].write(value.clientToken)
        try writer["emailAddress"].write(value.emailAddress)
        try writer["firstName"].write(value.firstName)
        try writer["lastName"].write(value.lastName)
        try writer["type"].write(value.type)
    }
}

extension DisableUserInput {

    static func write(value: DisableUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
    }
}

extension EnableUserInput {

    static func write(value: EnableUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
    }
}

extension GetWorkingLocationInput {

    static func write(value: GetWorkingLocationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["locationType"].write(value.locationType)
    }
}

extension ResetUserPasswordInput {

    static func write(value: ResetUserPasswordInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
    }
}

extension UpdateChangesetInput {

    static func write(value: UpdateChangesetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["formatParams"].writeMap(value.formatParams, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["sourceParams"].writeMap(value.sourceParams, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UpdateDatasetInput {

    static func write(value: UpdateDatasetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["alias"].write(value.alias)
        try writer["clientToken"].write(value.clientToken)
        try writer["datasetDescription"].write(value.datasetDescription)
        try writer["datasetTitle"].write(value.datasetTitle)
        try writer["kind"].write(value.kind)
        try writer["schemaDefinition"].write(value.schemaDefinition, with: FinspacedataClientTypes.SchemaUnion.write(value:to:))
    }
}

extension UpdatePermissionGroupInput {

    static func write(value: UpdatePermissionGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["applicationPermissions"].writeList(value.applicationPermissions, memberWritingClosure: SmithyReadWrite.WritingClosureBox<FinspacedataClientTypes.ApplicationPermission>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["clientToken"].write(value.clientToken)
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
    }
}

extension UpdateUserInput {

    static func write(value: UpdateUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["apiAccess"].write(value.apiAccess)
        try writer["apiAccessPrincipalArn"].write(value.apiAccessPrincipalArn)
        try writer["clientToken"].write(value.clientToken)
        try writer["firstName"].write(value.firstName)
        try writer["lastName"].write(value.lastName)
        try writer["type"].write(value.type)
    }
}

extension AssociateUserToPermissionGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateUserToPermissionGroupOutput {
        var value = AssociateUserToPermissionGroupOutput()
        value.statusCode = httpResponse.statusCode.rawValue
        return value
    }
}

extension CreateChangesetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateChangesetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateChangesetOutput()
        value.changesetId = try reader["changesetId"].readIfPresent()
        value.datasetId = try reader["datasetId"].readIfPresent()
        return value
    }
}

extension CreateDatasetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDatasetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDatasetOutput()
        value.datasetId = try reader["datasetId"].readIfPresent()
        return value
    }
}

extension CreateDataViewOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDataViewOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDataViewOutput()
        value.dataViewId = try reader["dataViewId"].readIfPresent()
        value.datasetId = try reader["datasetId"].readIfPresent()
        return value
    }
}

extension CreatePermissionGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePermissionGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePermissionGroupOutput()
        value.permissionGroupId = try reader["permissionGroupId"].readIfPresent()
        return value
    }
}

extension CreateUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateUserOutput()
        value.userId = try reader["userId"].readIfPresent()
        return value
    }
}

extension DeleteDatasetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDatasetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteDatasetOutput()
        value.datasetId = try reader["datasetId"].readIfPresent()
        return value
    }
}

extension DeletePermissionGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePermissionGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeletePermissionGroupOutput()
        value.permissionGroupId = try reader["permissionGroupId"].readIfPresent()
        return value
    }
}

extension DisableUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisableUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DisableUserOutput()
        value.userId = try reader["userId"].readIfPresent()
        return value
    }
}

extension DisassociateUserFromPermissionGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateUserFromPermissionGroupOutput {
        var value = DisassociateUserFromPermissionGroupOutput()
        value.statusCode = httpResponse.statusCode.rawValue
        return value
    }
}

extension EnableUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnableUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = EnableUserOutput()
        value.userId = try reader["userId"].readIfPresent()
        return value
    }
}

extension GetChangesetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetChangesetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetChangesetOutput()
        value.activeFromTimestamp = try reader["activeFromTimestamp"].readIfPresent()
        value.activeUntilTimestamp = try reader["activeUntilTimestamp"].readIfPresent()
        value.changeType = try reader["changeType"].readIfPresent()
        value.changesetArn = try reader["changesetArn"].readIfPresent()
        value.changesetId = try reader["changesetId"].readIfPresent()
        value.createTime = try reader["createTime"].readIfPresent() ?? 0
        value.datasetId = try reader["datasetId"].readIfPresent()
        value.errorInfo = try reader["errorInfo"].readIfPresent(with: FinspacedataClientTypes.ChangesetErrorInfo.read(from:))
        value.formatParams = try reader["formatParams"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.sourceParams = try reader["sourceParams"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.status = try reader["status"].readIfPresent()
        value.updatedByChangesetId = try reader["updatedByChangesetId"].readIfPresent()
        value.updatesChangesetId = try reader["updatesChangesetId"].readIfPresent()
        return value
    }
}

extension GetDatasetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDatasetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDatasetOutput()
        value.alias = try reader["alias"].readIfPresent()
        value.createTime = try reader["createTime"].readIfPresent() ?? 0
        value.datasetArn = try reader["datasetArn"].readIfPresent()
        value.datasetDescription = try reader["datasetDescription"].readIfPresent()
        value.datasetId = try reader["datasetId"].readIfPresent()
        value.datasetTitle = try reader["datasetTitle"].readIfPresent()
        value.kind = try reader["kind"].readIfPresent()
        value.lastModifiedTime = try reader["lastModifiedTime"].readIfPresent() ?? 0
        value.schemaDefinition = try reader["schemaDefinition"].readIfPresent(with: FinspacedataClientTypes.SchemaUnion.read(from:))
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension GetDataViewOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDataViewOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDataViewOutput()
        value.asOfTimestamp = try reader["asOfTimestamp"].readIfPresent()
        value.autoUpdate = try reader["autoUpdate"].readIfPresent() ?? false
        value.createTime = try reader["createTime"].readIfPresent() ?? 0
        value.dataViewArn = try reader["dataViewArn"].readIfPresent()
        value.dataViewId = try reader["dataViewId"].readIfPresent()
        value.datasetId = try reader["datasetId"].readIfPresent()
        value.destinationTypeParams = try reader["destinationTypeParams"].readIfPresent(with: FinspacedataClientTypes.DataViewDestinationTypeParams.read(from:))
        value.errorInfo = try reader["errorInfo"].readIfPresent(with: FinspacedataClientTypes.DataViewErrorInfo.read(from:))
        value.lastModifiedTime = try reader["lastModifiedTime"].readIfPresent() ?? 0
        value.partitionColumns = try reader["partitionColumns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.sortColumns = try reader["sortColumns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension GetExternalDataViewAccessDetailsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetExternalDataViewAccessDetailsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetExternalDataViewAccessDetailsOutput()
        value.credentials = try reader["credentials"].readIfPresent(with: FinspacedataClientTypes.AwsCredentials.read(from:))
        value.s3Location = try reader["s3Location"].readIfPresent(with: FinspacedataClientTypes.S3Location.read(from:))
        return value
    }
}

extension GetPermissionGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPermissionGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetPermissionGroupOutput()
        value.permissionGroup = try reader["permissionGroup"].readIfPresent(with: FinspacedataClientTypes.PermissionGroup.read(from:))
        return value
    }
}

extension GetProgrammaticAccessCredentialsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetProgrammaticAccessCredentialsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetProgrammaticAccessCredentialsOutput()
        value.credentials = try reader["credentials"].readIfPresent(with: FinspacedataClientTypes.Credentials.read(from:))
        value.durationInMinutes = try reader["durationInMinutes"].readIfPresent()
        return value
    }
}

extension GetUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetUserOutput()
        value.apiAccess = try reader["apiAccess"].readIfPresent()
        value.apiAccessPrincipalArn = try reader["apiAccessPrincipalArn"].readIfPresent()
        value.createTime = try reader["createTime"].readIfPresent() ?? 0
        value.emailAddress = try reader["emailAddress"].readIfPresent()
        value.firstName = try reader["firstName"].readIfPresent()
        value.lastDisabledTime = try reader["lastDisabledTime"].readIfPresent() ?? 0
        value.lastEnabledTime = try reader["lastEnabledTime"].readIfPresent() ?? 0
        value.lastLoginTime = try reader["lastLoginTime"].readIfPresent() ?? 0
        value.lastModifiedTime = try reader["lastModifiedTime"].readIfPresent() ?? 0
        value.lastName = try reader["lastName"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        value.userId = try reader["userId"].readIfPresent()
        return value
    }
}

extension GetWorkingLocationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetWorkingLocationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetWorkingLocationOutput()
        value.s3Bucket = try reader["s3Bucket"].readIfPresent()
        value.s3Path = try reader["s3Path"].readIfPresent()
        value.s3Uri = try reader["s3Uri"].readIfPresent()
        return value
    }
}

extension ListChangesetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListChangesetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListChangesetsOutput()
        value.changesets = try reader["changesets"].readListIfPresent(memberReadingClosure: FinspacedataClientTypes.ChangesetSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListDatasetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDatasetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDatasetsOutput()
        value.datasets = try reader["datasets"].readListIfPresent(memberReadingClosure: FinspacedataClientTypes.Dataset.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListDataViewsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDataViewsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDataViewsOutput()
        value.dataViews = try reader["dataViews"].readListIfPresent(memberReadingClosure: FinspacedataClientTypes.DataViewSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListPermissionGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPermissionGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPermissionGroupsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.permissionGroups = try reader["permissionGroups"].readListIfPresent(memberReadingClosure: FinspacedataClientTypes.PermissionGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListPermissionGroupsByUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPermissionGroupsByUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPermissionGroupsByUserOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.permissionGroups = try reader["permissionGroups"].readListIfPresent(memberReadingClosure: FinspacedataClientTypes.PermissionGroupByUser.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListUsersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListUsersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListUsersOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.users = try reader["users"].readListIfPresent(memberReadingClosure: FinspacedataClientTypes.User.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListUsersByPermissionGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListUsersByPermissionGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListUsersByPermissionGroupOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.users = try reader["users"].readListIfPresent(memberReadingClosure: FinspacedataClientTypes.UserByPermissionGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ResetUserPasswordOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ResetUserPasswordOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ResetUserPasswordOutput()
        value.temporaryPassword = try reader["temporaryPassword"].readIfPresent()
        value.userId = try reader["userId"].readIfPresent()
        return value
    }
}

extension UpdateChangesetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateChangesetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateChangesetOutput()
        value.changesetId = try reader["changesetId"].readIfPresent()
        value.datasetId = try reader["datasetId"].readIfPresent()
        return value
    }
}

extension UpdateDatasetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateDatasetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateDatasetOutput()
        value.datasetId = try reader["datasetId"].readIfPresent()
        return value
    }
}

extension UpdatePermissionGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdatePermissionGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdatePermissionGroupOutput()
        value.permissionGroupId = try reader["permissionGroupId"].readIfPresent()
        return value
    }
}

extension UpdateUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateUserOutput()
        value.userId = try reader["userId"].readIfPresent()
        return value
    }
}

enum AssociateUserToPermissionGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateChangesetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDatasetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDataViewOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePermissionGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDatasetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePermissionGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisableUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateUserFromPermissionGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnableUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetChangesetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDatasetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDataViewOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetExternalDataViewAccessDetailsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPermissionGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetProgrammaticAccessCredentialsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetWorkingLocationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListChangesetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDatasetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDataViewsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPermissionGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPermissionGroupsByUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListUsersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListUsersByPermissionGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ResetUserPasswordOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateChangesetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateDatasetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdatePermissionGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.reason = try reader["reason"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.reason = try reader["reason"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.reason = try reader["reason"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        var value = ThrottlingException()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension FinspacedataClientTypes.ChangesetErrorInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> FinspacedataClientTypes.ChangesetErrorInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FinspacedataClientTypes.ChangesetErrorInfo()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        value.errorCategory = try reader["errorCategory"].readIfPresent()
        return value
    }
}

extension FinspacedataClientTypes.SchemaUnion {

    static func write(value: FinspacedataClientTypes.SchemaUnion?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tabularSchemaConfig"].write(value.tabularSchemaConfig, with: FinspacedataClientTypes.SchemaDefinition.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FinspacedataClientTypes.SchemaUnion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FinspacedataClientTypes.SchemaUnion()
        value.tabularSchemaConfig = try reader["tabularSchemaConfig"].readIfPresent(with: FinspacedataClientTypes.SchemaDefinition.read(from:))
        return value
    }
}

extension FinspacedataClientTypes.SchemaDefinition {

    static func write(value: FinspacedataClientTypes.SchemaDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["columns"].writeList(value.columns, memberWritingClosure: FinspacedataClientTypes.ColumnDefinition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["primaryKeyColumns"].writeList(value.primaryKeyColumns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FinspacedataClientTypes.SchemaDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FinspacedataClientTypes.SchemaDefinition()
        value.columns = try reader["columns"].readListIfPresent(memberReadingClosure: FinspacedataClientTypes.ColumnDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.primaryKeyColumns = try reader["primaryKeyColumns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension FinspacedataClientTypes.ColumnDefinition {

    static func write(value: FinspacedataClientTypes.ColumnDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["columnDescription"].write(value.columnDescription)
        try writer["columnName"].write(value.columnName)
        try writer["dataType"].write(value.dataType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FinspacedataClientTypes.ColumnDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FinspacedataClientTypes.ColumnDefinition()
        value.dataType = try reader["dataType"].readIfPresent()
        value.columnName = try reader["columnName"].readIfPresent()
        value.columnDescription = try reader["columnDescription"].readIfPresent()
        return value
    }
}

extension FinspacedataClientTypes.DataViewErrorInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> FinspacedataClientTypes.DataViewErrorInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FinspacedataClientTypes.DataViewErrorInfo()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        value.errorCategory = try reader["errorCategory"].readIfPresent()
        return value
    }
}

extension FinspacedataClientTypes.DataViewDestinationTypeParams {

    static func write(value: FinspacedataClientTypes.DataViewDestinationTypeParams?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destinationType"].write(value.destinationType)
        try writer["s3DestinationExportFileFormat"].write(value.s3DestinationExportFileFormat)
        try writer["s3DestinationExportFileFormatOptions"].writeMap(value.s3DestinationExportFileFormatOptions, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FinspacedataClientTypes.DataViewDestinationTypeParams {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FinspacedataClientTypes.DataViewDestinationTypeParams()
        value.destinationType = try reader["destinationType"].readIfPresent() ?? ""
        value.s3DestinationExportFileFormat = try reader["s3DestinationExportFileFormat"].readIfPresent()
        value.s3DestinationExportFileFormatOptions = try reader["s3DestinationExportFileFormatOptions"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension FinspacedataClientTypes.AwsCredentials {

    static func read(from reader: SmithyJSON.Reader) throws -> FinspacedataClientTypes.AwsCredentials {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FinspacedataClientTypes.AwsCredentials()
        value.accessKeyId = try reader["accessKeyId"].readIfPresent()
        value.secretAccessKey = try reader["secretAccessKey"].readIfPresent()
        value.sessionToken = try reader["sessionToken"].readIfPresent()
        value.expiration = try reader["expiration"].readIfPresent() ?? 0
        return value
    }
}

extension FinspacedataClientTypes.S3Location {

    static func read(from reader: SmithyJSON.Reader) throws -> FinspacedataClientTypes.S3Location {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FinspacedataClientTypes.S3Location()
        value.bucket = try reader["bucket"].readIfPresent() ?? ""
        value.key = try reader["key"].readIfPresent() ?? ""
        return value
    }
}

extension FinspacedataClientTypes.PermissionGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> FinspacedataClientTypes.PermissionGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FinspacedataClientTypes.PermissionGroup()
        value.permissionGroupId = try reader["permissionGroupId"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.applicationPermissions = try reader["applicationPermissions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<FinspacedataClientTypes.ApplicationPermission>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.createTime = try reader["createTime"].readIfPresent() ?? 0
        value.lastModifiedTime = try reader["lastModifiedTime"].readIfPresent() ?? 0
        value.membershipStatus = try reader["membershipStatus"].readIfPresent()
        return value
    }
}

extension FinspacedataClientTypes.Credentials {

    static func read(from reader: SmithyJSON.Reader) throws -> FinspacedataClientTypes.Credentials {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FinspacedataClientTypes.Credentials()
        value.accessKeyId = try reader["accessKeyId"].readIfPresent()
        value.secretAccessKey = try reader["secretAccessKey"].readIfPresent()
        value.sessionToken = try reader["sessionToken"].readIfPresent()
        return value
    }
}

extension FinspacedataClientTypes.ChangesetSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> FinspacedataClientTypes.ChangesetSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FinspacedataClientTypes.ChangesetSummary()
        value.changesetId = try reader["changesetId"].readIfPresent()
        value.changesetArn = try reader["changesetArn"].readIfPresent()
        value.datasetId = try reader["datasetId"].readIfPresent()
        value.changeType = try reader["changeType"].readIfPresent()
        value.sourceParams = try reader["sourceParams"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.formatParams = try reader["formatParams"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.createTime = try reader["createTime"].readIfPresent() ?? 0
        value.status = try reader["status"].readIfPresent()
        value.errorInfo = try reader["errorInfo"].readIfPresent(with: FinspacedataClientTypes.ChangesetErrorInfo.read(from:))
        value.activeUntilTimestamp = try reader["activeUntilTimestamp"].readIfPresent()
        value.activeFromTimestamp = try reader["activeFromTimestamp"].readIfPresent()
        value.updatesChangesetId = try reader["updatesChangesetId"].readIfPresent()
        value.updatedByChangesetId = try reader["updatedByChangesetId"].readIfPresent()
        return value
    }
}

extension FinspacedataClientTypes.Dataset {

    static func read(from reader: SmithyJSON.Reader) throws -> FinspacedataClientTypes.Dataset {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FinspacedataClientTypes.Dataset()
        value.datasetId = try reader["datasetId"].readIfPresent()
        value.datasetArn = try reader["datasetArn"].readIfPresent()
        value.datasetTitle = try reader["datasetTitle"].readIfPresent()
        value.kind = try reader["kind"].readIfPresent()
        value.datasetDescription = try reader["datasetDescription"].readIfPresent()
        value.ownerInfo = try reader["ownerInfo"].readIfPresent(with: FinspacedataClientTypes.DatasetOwnerInfo.read(from:))
        value.createTime = try reader["createTime"].readIfPresent() ?? 0
        value.lastModifiedTime = try reader["lastModifiedTime"].readIfPresent() ?? 0
        value.schemaDefinition = try reader["schemaDefinition"].readIfPresent(with: FinspacedataClientTypes.SchemaUnion.read(from:))
        value.alias = try reader["alias"].readIfPresent()
        return value
    }
}

extension FinspacedataClientTypes.DatasetOwnerInfo {

    static func write(value: FinspacedataClientTypes.DatasetOwnerInfo?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["email"].write(value.email)
        try writer["name"].write(value.name)
        try writer["phoneNumber"].write(value.phoneNumber)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> FinspacedataClientTypes.DatasetOwnerInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FinspacedataClientTypes.DatasetOwnerInfo()
        value.name = try reader["name"].readIfPresent()
        value.phoneNumber = try reader["phoneNumber"].readIfPresent()
        value.email = try reader["email"].readIfPresent()
        return value
    }
}

extension FinspacedataClientTypes.DataViewSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> FinspacedataClientTypes.DataViewSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FinspacedataClientTypes.DataViewSummary()
        value.dataViewId = try reader["dataViewId"].readIfPresent()
        value.dataViewArn = try reader["dataViewArn"].readIfPresent()
        value.datasetId = try reader["datasetId"].readIfPresent()
        value.asOfTimestamp = try reader["asOfTimestamp"].readIfPresent()
        value.partitionColumns = try reader["partitionColumns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.sortColumns = try reader["sortColumns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["status"].readIfPresent()
        value.errorInfo = try reader["errorInfo"].readIfPresent(with: FinspacedataClientTypes.DataViewErrorInfo.read(from:))
        value.destinationTypeProperties = try reader["destinationTypeProperties"].readIfPresent(with: FinspacedataClientTypes.DataViewDestinationTypeParams.read(from:))
        value.autoUpdate = try reader["autoUpdate"].readIfPresent() ?? false
        value.createTime = try reader["createTime"].readIfPresent() ?? 0
        value.lastModifiedTime = try reader["lastModifiedTime"].readIfPresent() ?? 0
        return value
    }
}

extension FinspacedataClientTypes.PermissionGroupByUser {

    static func read(from reader: SmithyJSON.Reader) throws -> FinspacedataClientTypes.PermissionGroupByUser {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FinspacedataClientTypes.PermissionGroupByUser()
        value.permissionGroupId = try reader["permissionGroupId"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.membershipStatus = try reader["membershipStatus"].readIfPresent()
        return value
    }
}

extension FinspacedataClientTypes.User {

    static func read(from reader: SmithyJSON.Reader) throws -> FinspacedataClientTypes.User {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FinspacedataClientTypes.User()
        value.userId = try reader["userId"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.firstName = try reader["firstName"].readIfPresent()
        value.lastName = try reader["lastName"].readIfPresent()
        value.emailAddress = try reader["emailAddress"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        value.apiAccess = try reader["apiAccess"].readIfPresent()
        value.apiAccessPrincipalArn = try reader["apiAccessPrincipalArn"].readIfPresent()
        value.createTime = try reader["createTime"].readIfPresent() ?? 0
        value.lastEnabledTime = try reader["lastEnabledTime"].readIfPresent() ?? 0
        value.lastDisabledTime = try reader["lastDisabledTime"].readIfPresent() ?? 0
        value.lastModifiedTime = try reader["lastModifiedTime"].readIfPresent() ?? 0
        value.lastLoginTime = try reader["lastLoginTime"].readIfPresent() ?? 0
        return value
    }
}

extension FinspacedataClientTypes.UserByPermissionGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> FinspacedataClientTypes.UserByPermissionGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = FinspacedataClientTypes.UserByPermissionGroup()
        value.userId = try reader["userId"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.firstName = try reader["firstName"].readIfPresent()
        value.lastName = try reader["lastName"].readIfPresent()
        value.emailAddress = try reader["emailAddress"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        value.apiAccess = try reader["apiAccess"].readIfPresent()
        value.apiAccessPrincipalArn = try reader["apiAccessPrincipalArn"].readIfPresent()
        value.membershipStatus = try reader["membershipStatus"].readIfPresent()
        return value
    }
}

extension FinspacedataClientTypes.PermissionGroupParams {

    static func write(value: FinspacedataClientTypes.PermissionGroupParams?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["datasetPermissions"].writeList(value.datasetPermissions, memberWritingClosure: FinspacedataClientTypes.ResourcePermission.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["permissionGroupId"].write(value.permissionGroupId)
    }
}

extension FinspacedataClientTypes.ResourcePermission {

    static func write(value: FinspacedataClientTypes.ResourcePermission?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["permission"].write(value.permission)
    }
}

public enum FinspacedataClientTypes {}
