// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SupportClient {
    /// Paginate over `[DescribeCasesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeCasesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeCasesOutputResponse`
    public func describeCasesPaginated(input: DescribeCasesInput) -> ClientRuntime.PaginatorSequence<DescribeCasesInput, DescribeCasesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeCasesInput, DescribeCasesOutputResponse>(input: input, inputKey: \DescribeCasesInput.nextToken, outputKey: \DescribeCasesOutputResponse.nextToken, paginationFunction: self.describeCases(input:))
    }
}

extension DescribeCasesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeCasesInput {
        return DescribeCasesInput(
            afterTime: self.afterTime,
            beforeTime: self.beforeTime,
            caseIdList: self.caseIdList,
            displayId: self.displayId,
            includeCommunications: self.includeCommunications,
            includeResolvedCases: self.includeResolvedCases,
            language: self.language,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeCasesInput, Output == DescribeCasesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeCasesPaginated`
    /// to access the nested member `[SupportClientTypes.CaseDetails]`
    /// - Returns: `[SupportClientTypes.CaseDetails]`
    public func cases() async throws -> [SupportClientTypes.CaseDetails] {
        return try await self.asyncCompactMap { item in item.cases }
    }
}
extension SupportClient {
    /// Paginate over `[DescribeCommunicationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeCommunicationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeCommunicationsOutputResponse`
    public func describeCommunicationsPaginated(input: DescribeCommunicationsInput) -> ClientRuntime.PaginatorSequence<DescribeCommunicationsInput, DescribeCommunicationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeCommunicationsInput, DescribeCommunicationsOutputResponse>(input: input, inputKey: \DescribeCommunicationsInput.nextToken, outputKey: \DescribeCommunicationsOutputResponse.nextToken, paginationFunction: self.describeCommunications(input:))
    }
}

extension DescribeCommunicationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeCommunicationsInput {
        return DescribeCommunicationsInput(
            afterTime: self.afterTime,
            beforeTime: self.beforeTime,
            caseId: self.caseId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeCommunicationsInput, Output == DescribeCommunicationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeCommunicationsPaginated`
    /// to access the nested member `[SupportClientTypes.Communication]`
    /// - Returns: `[SupportClientTypes.Communication]`
    public func communications() async throws -> [SupportClientTypes.Communication] {
        return try await self.asyncCompactMap { item in item.communications }
    }
}
