//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

extension ResourceGroupsTaggingAPIClientTypes {
    /// Information that shows whether a resource is compliant with the effective tag policy, including details on any noncompliant tag keys.
    public struct ComplianceDetails {
        /// Whether a resource is compliant with the effective tag policy.
        public var complianceStatus: Swift.Bool?
        /// These are keys defined in the effective policy that are on the resource with either incorrect case treatment or noncompliant values.
        public var keysWithNoncompliantValues: [Swift.String]?
        /// These tag keys on the resource are noncompliant with the effective tag policy.
        public var noncompliantKeys: [Swift.String]?

        public init(
            complianceStatus: Swift.Bool? = nil,
            keysWithNoncompliantValues: [Swift.String]? = nil,
            noncompliantKeys: [Swift.String]? = nil
        )
        {
            self.complianceStatus = complianceStatus
            self.keysWithNoncompliantValues = keysWithNoncompliantValues
            self.noncompliantKeys = noncompliantKeys
        }
    }

}

/// The target of the operation is currently being modified by a different request. Try again later.
public struct ConcurrentModificationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConcurrentModificationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was denied because performing this operation violates a constraint. Some of the reasons in the following list might not apply to this specific operation.
///
/// * You must meet the prerequisites for using tag policies. For information, see [Prerequisites and Permissions for Using Tag Policies](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies-prereqs.html) in the Organizations User Guide.
///
/// * You must enable the tag policies service principal (tagpolicies.tag.amazonaws.com) to integrate with Organizations For information, see [EnableAWSServiceAccess](https://docs.aws.amazon.com/organizations/latest/APIReference/API_EnableAWSServiceAccess.html).
///
/// * You must have a tag policy attached to the organization root, an OU, or an account.
public struct ConstraintViolationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConstraintViolationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request processing failed because of an unknown error, exception, or failure. You can retry the request.
public struct InternalServiceException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServiceException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This error indicates one of the following:
///
/// * A parameter is missing.
///
/// * A malformed string was supplied for the request parameter.
///
/// * An out-of-range value was supplied for the request parameter.
///
/// * The target ID is invalid, unsupported, or doesn't exist.
///
/// * You can't access the Amazon S3 bucket for report storage. For more information, see [Additional Requirements for Organization-wide Tag Compliance Reports](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies-prereqs.html#bucket-policies-org-report) in the Organizations User Guide.
public struct InvalidParameterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParameterException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was denied to limit the frequency of submitted requests.
public struct ThrottledException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottledException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DescribeReportCreationInput {

    public init() { }
}

public struct DescribeReportCreationOutput {
    /// Details of the common errors that all operations return.
    public var errorMessage: Swift.String?
    /// The path to the Amazon S3 bucket where the report was stored on creation.
    public var s3Location: Swift.String?
    /// The date and time that the report was started.
    public var startDate: Swift.String?
    /// Reports the status of the operation. The operation status can be one of the following:
    ///
    /// * RUNNING - Report creation is in progress.
    ///
    /// * SUCCEEDED - Report creation is complete. You can open the report from the Amazon S3 bucket that you specified when you ran StartReportCreation.
    ///
    /// * FAILED - Report creation timed out or the Amazon S3 bucket is not accessible.
    ///
    /// * NO REPORT - No report was generated in the last 90 days.
    public var status: Swift.String?

    public init(
        errorMessage: Swift.String? = nil,
        s3Location: Swift.String? = nil,
        startDate: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.errorMessage = errorMessage
        self.s3Location = s3Location
        self.startDate = startDate
        self.status = status
    }
}

extension ResourceGroupsTaggingAPIClientTypes {

    public enum ErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case internalServiceException
        case invalidParameterException
        case sdkUnknown(Swift.String)

        public static var allCases: [ErrorCode] {
            return [
                .internalServiceException,
                .invalidParameterException
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .internalServiceException: return "InternalServiceException"
            case .invalidParameterException: return "InvalidParameterException"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResourceGroupsTaggingAPIClientTypes {
    /// Information about the errors that are returned for each failed resource. This information can include InternalServiceException and InvalidParameterException errors. It can also include any valid error code returned by the Amazon Web Services service that hosts the resource that the ARN key represents. The following are common error codes that you might receive from other Amazon Web Services services:
    ///
    /// * InternalServiceException – This can mean that the Resource Groups Tagging API didn't receive a response from another Amazon Web Services service. It can also mean that the resource type in the request is not supported by the Resource Groups Tagging API. In these cases, it's safe to retry the request and then call [GetResources](https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/API_GetResources.html) to verify the changes.
    ///
    /// * AccessDeniedException – This can mean that you need permission to call the tagging operations in the Amazon Web Services service that contains the resource. For example, to use the Resource Groups Tagging API to tag a Amazon CloudWatch alarm resource, you need permission to call both [TagResources](https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/API_TagResources.html) and [TagResource](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html) in the CloudWatch API.
    ///
    ///
    /// For more information on errors that are generated from other Amazon Web Services services, see the documentation for that service.
    public struct FailureInfo {
        /// The code of the common error. Valid values include InternalServiceException, InvalidParameterException, and any valid error code returned by the Amazon Web Services service that hosts the resource that you want to tag.
        public var errorCode: ResourceGroupsTaggingAPIClientTypes.ErrorCode?
        /// The message of the common error.
        public var errorMessage: Swift.String?
        /// The HTTP status code of the common error.
        public var statusCode: Swift.Int

        public init(
            errorCode: ResourceGroupsTaggingAPIClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            statusCode: Swift.Int = 0
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.statusCode = statusCode
        }
    }

}

extension ResourceGroupsTaggingAPIClientTypes {

    public enum GroupByAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case region
        case resourceType
        case targetId
        case sdkUnknown(Swift.String)

        public static var allCases: [GroupByAttribute] {
            return [
                .region,
                .resourceType,
                .targetId
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .region: return "REGION"
            case .resourceType: return "RESOURCE_TYPE"
            case .targetId: return "TARGET_ID"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetComplianceSummaryInput {
    /// Specifies a list of attributes to group the counts of noncompliant resources by. If supplied, the counts are sorted by those attributes.
    public var groupBy: [ResourceGroupsTaggingAPIClientTypes.GroupByAttribute]?
    /// Specifies the maximum number of results to be returned in each page. A query can return fewer than this maximum, even if there are more results still to return. You should always check the PaginationToken response value to see if there are more results. You can specify a minimum of 1 and a maximum value of 100.
    public var maxResults: Swift.Int?
    /// Specifies a PaginationToken response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.
    public var paginationToken: Swift.String?
    /// Specifies a list of Amazon Web Services Regions to limit the output to. If you use this parameter, the count of returned noncompliant resources includes only resources in the specified Regions.
    public var regionFilters: [Swift.String]?
    /// Specifies that you want the response to include information for only resources of the specified types. The format of each resource type is service[:resourceType]. For example, specifying a resource type of ec2 returns all Amazon EC2 resources (which includes EC2 instances). Specifying a resource type of ec2:instance returns only EC2 instances. The string for each service name and resource type is the same as that embedded in a resource's Amazon Resource Name (ARN). Consult the [Amazon Web Services General Reference](https://docs.aws.amazon.com/general/latest/gr/) for the following:
    ///
    /// * For a list of service name strings, see [Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces).
    ///
    /// * For resource type strings, see [Example ARNs](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arns-syntax).
    ///
    /// * For more information about ARNs, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
    ///
    ///
    /// You can specify multiple resource types by using a comma separated array. The array can include up to 100 items. Note that the length constraint requirement applies to each resource type filter.
    public var resourceTypeFilters: [Swift.String]?
    /// Specifies that you want the response to include information for only resources that have tags with the specified tag keys. If you use this parameter, the count of returned noncompliant resources includes only resources that have the specified tag keys.
    public var tagKeyFilters: [Swift.String]?
    /// Specifies target identifiers (usually, specific account IDs) to limit the output by. If you use this parameter, the count of returned noncompliant resources includes only resources with the specified target IDs.
    public var targetIdFilters: [Swift.String]?

    public init(
        groupBy: [ResourceGroupsTaggingAPIClientTypes.GroupByAttribute]? = nil,
        maxResults: Swift.Int? = nil,
        paginationToken: Swift.String? = nil,
        regionFilters: [Swift.String]? = nil,
        resourceTypeFilters: [Swift.String]? = nil,
        tagKeyFilters: [Swift.String]? = nil,
        targetIdFilters: [Swift.String]? = nil
    )
    {
        self.groupBy = groupBy
        self.maxResults = maxResults
        self.paginationToken = paginationToken
        self.regionFilters = regionFilters
        self.resourceTypeFilters = resourceTypeFilters
        self.tagKeyFilters = tagKeyFilters
        self.targetIdFilters = targetIdFilters
    }
}

extension ResourceGroupsTaggingAPIClientTypes {

    public enum TargetIdType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case account
        case ou
        case root
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetIdType] {
            return [
                .account,
                .ou,
                .root
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .account: return "ACCOUNT"
            case .ou: return "OU"
            case .root: return "ROOT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResourceGroupsTaggingAPIClientTypes {
    /// A count of noncompliant resources.
    public struct Summary {
        /// The timestamp that shows when this summary was generated in this Region.
        public var lastUpdated: Swift.String?
        /// The count of noncompliant resources.
        public var nonCompliantResources: Swift.Int
        /// The Amazon Web Services Region that the summary applies to.
        public var region: Swift.String?
        /// The Amazon Web Services resource type.
        public var resourceType: Swift.String?
        /// The account identifier or the root identifier of the organization. If you don't know the root ID, you can call the Organizations [ListRoots](https://docs.aws.amazon.com/organizations/latest/APIReference/API_ListRoots.html) API.
        public var targetId: Swift.String?
        /// Whether the target is an account, an OU, or the organization root.
        public var targetIdType: ResourceGroupsTaggingAPIClientTypes.TargetIdType?

        public init(
            lastUpdated: Swift.String? = nil,
            nonCompliantResources: Swift.Int = 0,
            region: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            targetId: Swift.String? = nil,
            targetIdType: ResourceGroupsTaggingAPIClientTypes.TargetIdType? = nil
        )
        {
            self.lastUpdated = lastUpdated
            self.nonCompliantResources = nonCompliantResources
            self.region = region
            self.resourceType = resourceType
            self.targetId = targetId
            self.targetIdType = targetIdType
        }
    }

}

public struct GetComplianceSummaryOutput {
    /// A string that indicates that there is more data available than this response contains. To receive the next part of the response, specify this response value as the PaginationToken value in the request for the next page.
    public var paginationToken: Swift.String?
    /// A table that shows counts of noncompliant resources.
    public var summaryList: [ResourceGroupsTaggingAPIClientTypes.Summary]?

    public init(
        paginationToken: Swift.String? = nil,
        summaryList: [ResourceGroupsTaggingAPIClientTypes.Summary]? = nil
    )
    {
        self.paginationToken = paginationToken
        self.summaryList = summaryList
    }
}

/// A PaginationToken is valid for a maximum of 15 minutes. Your request was denied because the specified PaginationToken has expired.
public struct PaginationTokenExpiredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PaginationTokenExpiredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ResourceGroupsTaggingAPIClientTypes {
    /// A list of tags (keys and values) that are used to specify the associated resources.
    public struct TagFilter {
        /// One part of a key-value pair that makes up a tag. A key is a general label that acts like a category for more specific tag values.
        public var key: Swift.String?
        /// One part of a key-value pair that make up a tag. A value acts as a descriptor within a tag category (key). The value can be empty or null.
        public var values: [Swift.String]?

        public init(
            key: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.key = key
            self.values = values
        }
    }

}

public struct GetResourcesInput {
    /// Specifies whether to exclude resources that are compliant with the tag policy. Set this to true if you are interested in retrieving information on noncompliant resources only. You can use this parameter only if the IncludeComplianceDetails parameter is also set to true.
    public var excludeCompliantResources: Swift.Bool?
    /// Specifies whether to include details regarding the compliance with the effective tag policy. Set this to true to determine whether resources are compliant with the tag policy and to get details.
    public var includeComplianceDetails: Swift.Bool?
    /// Specifies a PaginationToken response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.
    public var paginationToken: Swift.String?
    /// Specifies a list of ARNs of resources for which you want to retrieve tag data. You can't specify both this parameter and any of the pagination parameters (ResourcesPerPage, TagsPerPage, PaginationToken) in the same request. If you specify both, you get an Invalid Parameter exception. If a resource specified by this parameter doesn't exist, it doesn't generate an error; it simply isn't included in the response. An ARN (Amazon Resource Name) uniquely identifies a resource. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    public var resourceARNList: [Swift.String]?
    /// Specifies the resource types that you want included in the response. The format of each resource type is service[:resourceType]. For example, specifying a resource type of ec2 returns all Amazon EC2 resources (which includes EC2 instances). Specifying a resource type of ec2:instance returns only EC2 instances. The string for each service name and resource type is the same as that embedded in a resource's Amazon Resource Name (ARN). For the list of services whose resources you can use in this parameter, see [Services that support the Resource Groups Tagging API](https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/supported-services.html). You can specify multiple resource types by using an array. The array can include up to 100 items. Note that the length constraint requirement applies to each resource type filter. For example, the following string would limit the response to only Amazon EC2 instances, Amazon S3 buckets, or any Audit Manager resource: ec2:instance,s3:bucket,auditmanager
    public var resourceTypeFilters: [Swift.String]?
    /// Specifies the maximum number of results to be returned in each page. A query can return fewer than this maximum, even if there are more results still to return. You should always check the PaginationToken response value to see if there are more results. You can specify a minimum of 1 and a maximum value of 100.
    public var resourcesPerPage: Swift.Int?
    /// Specifies a list of TagFilters (keys and values) to restrict the output to only those resources that have tags with the specified keys and, if included, the specified values. Each TagFilter must contain a key with values optional. A request can include up to 50 keys, and each key can include up to 20 values. Note the following when deciding how to use TagFilters:
    ///
    /// * If you don't specify a TagFilter, the response includes all resources that are currently tagged or ever had a tag. Resources that currently don't have tags are shown with an empty tag set, like this: "Tags": [].
    ///
    /// * If you specify more than one filter in a single request, the response returns only those resources that satisfy all filters.
    ///
    /// * If you specify a filter that contains more than one value for a key, the response returns resources that match any of the specified values for that key.
    ///
    /// * If you don't specify a value for a key, the response returns all resources that are tagged with that key, with any or no value. For example, for the following filters: filter1= {keyA,{value1}}, filter2={keyB,{value2,value3,value4}}, filter3= {keyC}:
    ///
    /// * GetResources({filter1}) returns resources tagged with key1=value1
    ///
    /// * GetResources({filter2}) returns resources tagged with key2=value2 or key2=value3 or key2=value4
    ///
    /// * GetResources({filter3}) returns resources tagged with any tag with the key key3, and with any or no value
    ///
    /// * GetResources({filter1,filter2,filter3}) returns resources tagged with (key1=value1) and (key2=value2 or key2=value3 or key2=value4) and (key3, any or no value)
    public var tagFilters: [ResourceGroupsTaggingAPIClientTypes.TagFilter]?
    /// Amazon Web Services recommends using ResourcesPerPage instead of this parameter. A limit that restricts the number of tags (key and value pairs) returned by GetResources in paginated output. A resource with no tags is counted as having one tag (one key and value pair). GetResources does not split a resource and its associated tags across pages. If the specified TagsPerPage would cause such a break, a PaginationToken is returned in place of the affected resource and its tags. Use that token in another request to get the remaining data. For example, if you specify a TagsPerPage of 100 and the account has 22 resources with 10 tags each (meaning that each resource has 10 key and value pairs), the output will consist of three pages. The first page displays the first 10 resources, each with its 10 tags. The second page displays the next 10 resources, each with its 10 tags. The third page displays the remaining 2 resources, each with its 10 tags. You can set TagsPerPage to a minimum of 100 items up to a maximum of 500 items.
    public var tagsPerPage: Swift.Int?

    public init(
        excludeCompliantResources: Swift.Bool? = nil,
        includeComplianceDetails: Swift.Bool? = nil,
        paginationToken: Swift.String? = nil,
        resourceARNList: [Swift.String]? = nil,
        resourceTypeFilters: [Swift.String]? = nil,
        resourcesPerPage: Swift.Int? = nil,
        tagFilters: [ResourceGroupsTaggingAPIClientTypes.TagFilter]? = nil,
        tagsPerPage: Swift.Int? = nil
    )
    {
        self.excludeCompliantResources = excludeCompliantResources
        self.includeComplianceDetails = includeComplianceDetails
        self.paginationToken = paginationToken
        self.resourceARNList = resourceARNList
        self.resourceTypeFilters = resourceTypeFilters
        self.resourcesPerPage = resourcesPerPage
        self.tagFilters = tagFilters
        self.tagsPerPage = tagsPerPage
    }
}

extension ResourceGroupsTaggingAPIClientTypes {
    /// The metadata that you apply to Amazon Web Services resources to help you categorize and organize them. Each tag consists of a key and a value, both of which you define. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference.
    public struct Tag {
        /// One part of a key-value pair that makes up a tag. A key is a general label that acts like a category for more specific tag values.
        /// This member is required.
        public var key: Swift.String?
        /// One part of a key-value pair that make up a tag. A value acts as a descriptor within a tag category (key). The value can be empty or null.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension ResourceGroupsTaggingAPIClientTypes {
    /// A list of resource ARNs and the tags (keys and values) that are associated with each.
    public struct ResourceTagMapping {
        /// Information that shows whether a resource is compliant with the effective tag policy, including details on any noncompliant tag keys.
        public var complianceDetails: ResourceGroupsTaggingAPIClientTypes.ComplianceDetails?
        /// The ARN of the resource.
        public var resourceARN: Swift.String?
        /// The tags that have been applied to one or more Amazon Web Services resources.
        public var tags: [ResourceGroupsTaggingAPIClientTypes.Tag]?

        public init(
            complianceDetails: ResourceGroupsTaggingAPIClientTypes.ComplianceDetails? = nil,
            resourceARN: Swift.String? = nil,
            tags: [ResourceGroupsTaggingAPIClientTypes.Tag]? = nil
        )
        {
            self.complianceDetails = complianceDetails
            self.resourceARN = resourceARN
            self.tags = tags
        }
    }

}

public struct GetResourcesOutput {
    /// A string that indicates that there is more data available than this response contains. To receive the next part of the response, specify this response value as the PaginationToken value in the request for the next page.
    public var paginationToken: Swift.String?
    /// A list of resource ARNs and the tags (keys and values) associated with each.
    public var resourceTagMappingList: [ResourceGroupsTaggingAPIClientTypes.ResourceTagMapping]?

    public init(
        paginationToken: Swift.String? = nil,
        resourceTagMappingList: [ResourceGroupsTaggingAPIClientTypes.ResourceTagMapping]? = nil
    )
    {
        self.paginationToken = paginationToken
        self.resourceTagMappingList = resourceTagMappingList
    }
}

public struct GetTagKeysInput {
    /// Specifies a PaginationToken response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.
    public var paginationToken: Swift.String?

    public init(
        paginationToken: Swift.String? = nil
    )
    {
        self.paginationToken = paginationToken
    }
}

public struct GetTagKeysOutput {
    /// A string that indicates that there is more data available than this response contains. To receive the next part of the response, specify this response value as the PaginationToken value in the request for the next page.
    public var paginationToken: Swift.String?
    /// A list of all tag keys in the Amazon Web Services account.
    public var tagKeys: [Swift.String]?

    public init(
        paginationToken: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.paginationToken = paginationToken
        self.tagKeys = tagKeys
    }
}

public struct GetTagValuesInput {
    /// Specifies the tag key for which you want to list all existing values that are currently used in the specified Amazon Web Services Region for the calling account.
    /// This member is required.
    public var key: Swift.String?
    /// Specifies a PaginationToken response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.
    public var paginationToken: Swift.String?

    public init(
        key: Swift.String? = nil,
        paginationToken: Swift.String? = nil
    )
    {
        self.key = key
        self.paginationToken = paginationToken
    }
}

public struct GetTagValuesOutput {
    /// A string that indicates that there is more data available than this response contains. To receive the next part of the response, specify this response value as the PaginationToken value in the request for the next page.
    public var paginationToken: Swift.String?
    /// A list of all tag values for the specified key currently used in the specified Amazon Web Services Region for the calling account.
    public var tagValues: [Swift.String]?

    public init(
        paginationToken: Swift.String? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.paginationToken = paginationToken
        self.tagValues = tagValues
    }
}

public struct StartReportCreationInput {
    /// The name of the Amazon S3 bucket where the report will be stored; for example: awsexamplebucket For more information on S3 bucket requirements, including an example bucket policy, see the example S3 bucket policy on this page.
    /// This member is required.
    public var s3Bucket: Swift.String?

    public init(
        s3Bucket: Swift.String? = nil
    )
    {
        self.s3Bucket = s3Bucket
    }
}

public struct StartReportCreationOutput {

    public init() { }
}

public struct TagResourcesInput {
    /// Specifies the list of ARNs of the resources that you want to apply tags to. An ARN (Amazon Resource Name) uniquely identifies a resource. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var resourceARNList: [Swift.String]?
    /// Specifies a list of tags that you want to add to the specified resources. A tag consists of a key and a value that you define.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceARNList: [Swift.String]? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceARNList = resourceARNList
        self.tags = tags
    }
}

public struct TagResourcesOutput {
    /// A map containing a key-value pair for each failed item that couldn't be tagged. The key is the ARN of the failed resource. The value is a FailureInfo object that contains an error code, a status code, and an error message. If there are no errors, the FailedResourcesMap is empty.
    public var failedResourcesMap: [Swift.String: ResourceGroupsTaggingAPIClientTypes.FailureInfo]?

    public init(
        failedResourcesMap: [Swift.String: ResourceGroupsTaggingAPIClientTypes.FailureInfo]? = nil
    )
    {
        self.failedResourcesMap = failedResourcesMap
    }
}

public struct UntagResourcesInput {
    /// Specifies a list of ARNs of the resources that you want to remove tags from. An ARN (Amazon Resource Name) uniquely identifies a resource. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var resourceARNList: [Swift.String]?
    /// Specifies a list of tag keys that you want to remove from the specified resources.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceARNList: [Swift.String]? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARNList = resourceARNList
        self.tagKeys = tagKeys
    }
}

public struct UntagResourcesOutput {
    /// A map containing a key-value pair for each failed item that couldn't be untagged. The key is the ARN of the failed resource. The value is a FailureInfo object that contains an error code, a status code, and an error message. If there are no errors, the FailedResourcesMap is empty.
    public var failedResourcesMap: [Swift.String: ResourceGroupsTaggingAPIClientTypes.FailureInfo]?

    public init(
        failedResourcesMap: [Swift.String: ResourceGroupsTaggingAPIClientTypes.FailureInfo]? = nil
    )
    {
        self.failedResourcesMap = failedResourcesMap
    }
}

extension DescribeReportCreationInput {

    static func urlPathProvider(_ value: DescribeReportCreationInput) -> Swift.String? {
        return "/"
    }
}

extension GetComplianceSummaryInput {

    static func urlPathProvider(_ value: GetComplianceSummaryInput) -> Swift.String? {
        return "/"
    }
}

extension GetResourcesInput {

    static func urlPathProvider(_ value: GetResourcesInput) -> Swift.String? {
        return "/"
    }
}

extension GetTagKeysInput {

    static func urlPathProvider(_ value: GetTagKeysInput) -> Swift.String? {
        return "/"
    }
}

extension GetTagValuesInput {

    static func urlPathProvider(_ value: GetTagValuesInput) -> Swift.String? {
        return "/"
    }
}

extension StartReportCreationInput {

    static func urlPathProvider(_ value: StartReportCreationInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourcesInput {

    static func urlPathProvider(_ value: TagResourcesInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourcesInput {

    static func urlPathProvider(_ value: UntagResourcesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeReportCreationInput {

    static func write(value: DescribeReportCreationInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension GetComplianceSummaryInput {

    static func write(value: GetComplianceSummaryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GroupBy"].writeList(value.groupBy, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ResourceGroupsTaggingAPIClientTypes.GroupByAttribute>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxResults"].write(value.maxResults)
        try writer["PaginationToken"].write(value.paginationToken)
        try writer["RegionFilters"].writeList(value.regionFilters, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ResourceTypeFilters"].writeList(value.resourceTypeFilters, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TagKeyFilters"].writeList(value.tagKeyFilters, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TargetIdFilters"].writeList(value.targetIdFilters, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GetResourcesInput {

    static func write(value: GetResourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExcludeCompliantResources"].write(value.excludeCompliantResources)
        try writer["IncludeComplianceDetails"].write(value.includeComplianceDetails)
        try writer["PaginationToken"].write(value.paginationToken)
        try writer["ResourceARNList"].writeList(value.resourceARNList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ResourceTypeFilters"].writeList(value.resourceTypeFilters, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ResourcesPerPage"].write(value.resourcesPerPage)
        try writer["TagFilters"].writeList(value.tagFilters, memberWritingClosure: ResourceGroupsTaggingAPIClientTypes.TagFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TagsPerPage"].write(value.tagsPerPage)
    }
}

extension GetTagKeysInput {

    static func write(value: GetTagKeysInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PaginationToken"].write(value.paginationToken)
    }
}

extension GetTagValuesInput {

    static func write(value: GetTagValuesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["PaginationToken"].write(value.paginationToken)
    }
}

extension StartReportCreationInput {

    static func write(value: StartReportCreationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Bucket"].write(value.s3Bucket)
    }
}

extension TagResourcesInput {

    static func write(value: TagResourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARNList"].writeList(value.resourceARNList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UntagResourcesInput {

    static func write(value: UntagResourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARNList"].writeList(value.resourceARNList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DescribeReportCreationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeReportCreationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeReportCreationOutput()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        value.s3Location = try reader["S3Location"].readIfPresent()
        value.startDate = try reader["StartDate"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension GetComplianceSummaryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetComplianceSummaryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetComplianceSummaryOutput()
        value.paginationToken = try reader["PaginationToken"].readIfPresent()
        value.summaryList = try reader["SummaryList"].readListIfPresent(memberReadingClosure: ResourceGroupsTaggingAPIClientTypes.Summary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetResourcesOutput()
        value.paginationToken = try reader["PaginationToken"].readIfPresent()
        value.resourceTagMappingList = try reader["ResourceTagMappingList"].readListIfPresent(memberReadingClosure: ResourceGroupsTaggingAPIClientTypes.ResourceTagMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetTagKeysOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTagKeysOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetTagKeysOutput()
        value.paginationToken = try reader["PaginationToken"].readIfPresent()
        value.tagKeys = try reader["TagKeys"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetTagValuesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTagValuesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetTagValuesOutput()
        value.paginationToken = try reader["PaginationToken"].readIfPresent()
        value.tagValues = try reader["TagValues"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension StartReportCreationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartReportCreationOutput {
        return StartReportCreationOutput()
    }
}

extension TagResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = TagResourcesOutput()
        value.failedResourcesMap = try reader["FailedResourcesMap"].readMapIfPresent(valueReadingClosure: ResourceGroupsTaggingAPIClientTypes.FailureInfo.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension UntagResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UntagResourcesOutput()
        value.failedResourcesMap = try reader["FailedResourcesMap"].readMapIfPresent(valueReadingClosure: ResourceGroupsTaggingAPIClientTypes.FailureInfo.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

enum DescribeReportCreationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ThrottledException": return try ThrottledException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetComplianceSummaryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ThrottledException": return try ThrottledException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "PaginationTokenExpiredException": return try PaginationTokenExpiredException.makeError(baseError: baseError)
            case "ThrottledException": return try ThrottledException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetTagKeysOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "PaginationTokenExpiredException": return try PaginationTokenExpiredException.makeError(baseError: baseError)
            case "ThrottledException": return try ThrottledException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetTagValuesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "PaginationTokenExpiredException": return try PaginationTokenExpiredException.makeError(baseError: baseError)
            case "ThrottledException": return try ThrottledException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartReportCreationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ThrottledException": return try ThrottledException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ThrottledException": return try ThrottledException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ThrottledException": return try ThrottledException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServiceException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServiceException {
        let reader = baseError.errorBodyReader
        var value = InternalServiceException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConstraintViolationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConstraintViolationException {
        let reader = baseError.errorBodyReader
        var value = ConstraintViolationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidParameterException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidParameterException {
        let reader = baseError.errorBodyReader
        var value = InvalidParameterException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottledException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ThrottledException {
        let reader = baseError.errorBodyReader
        var value = ThrottledException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PaginationTokenExpiredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PaginationTokenExpiredException {
        let reader = baseError.errorBodyReader
        var value = PaginationTokenExpiredException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConcurrentModificationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConcurrentModificationException {
        let reader = baseError.errorBodyReader
        var value = ConcurrentModificationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceGroupsTaggingAPIClientTypes.Summary {

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceGroupsTaggingAPIClientTypes.Summary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceGroupsTaggingAPIClientTypes.Summary()
        value.lastUpdated = try reader["LastUpdated"].readIfPresent()
        value.targetId = try reader["TargetId"].readIfPresent()
        value.targetIdType = try reader["TargetIdType"].readIfPresent()
        value.region = try reader["Region"].readIfPresent()
        value.resourceType = try reader["ResourceType"].readIfPresent()
        value.nonCompliantResources = try reader["NonCompliantResources"].readIfPresent() ?? 0
        return value
    }
}

extension ResourceGroupsTaggingAPIClientTypes.ResourceTagMapping {

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceGroupsTaggingAPIClientTypes.ResourceTagMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceGroupsTaggingAPIClientTypes.ResourceTagMapping()
        value.resourceARN = try reader["ResourceARN"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: ResourceGroupsTaggingAPIClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.complianceDetails = try reader["ComplianceDetails"].readIfPresent(with: ResourceGroupsTaggingAPIClientTypes.ComplianceDetails.read(from:))
        return value
    }
}

extension ResourceGroupsTaggingAPIClientTypes.ComplianceDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceGroupsTaggingAPIClientTypes.ComplianceDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceGroupsTaggingAPIClientTypes.ComplianceDetails()
        value.noncompliantKeys = try reader["NoncompliantKeys"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.keysWithNoncompliantValues = try reader["KeysWithNoncompliantValues"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.complianceStatus = try reader["ComplianceStatus"].readIfPresent()
        return value
    }
}

extension ResourceGroupsTaggingAPIClientTypes.Tag {

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceGroupsTaggingAPIClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceGroupsTaggingAPIClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension ResourceGroupsTaggingAPIClientTypes.FailureInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceGroupsTaggingAPIClientTypes.FailureInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceGroupsTaggingAPIClientTypes.FailureInfo()
        value.statusCode = try reader["StatusCode"].readIfPresent() ?? 0
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension ResourceGroupsTaggingAPIClientTypes.TagFilter {

    static func write(value: ResourceGroupsTaggingAPIClientTypes.TagFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public enum ResourceGroupsTaggingAPIClientTypes {}
