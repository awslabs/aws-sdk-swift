// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// 403 response - You do not have sufficient access to perform this action.
public struct AccessDeniedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes.AssertionRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assertedControls = "AssertedControls"
        case controlPanelArn = "ControlPanelArn"
        case name = "Name"
        case ruleConfig = "RuleConfig"
        case safetyRuleArn = "SafetyRuleArn"
        case status = "Status"
        case waitPeriodMs = "WaitPeriodMs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assertedControls = assertedControls {
            var assertedControlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .assertedControls)
            for __stringmin1max256patternazaz090 in assertedControls {
                try assertedControlsContainer.encode(__stringmin1max256patternazaz090)
            }
        }
        if let controlPanelArn = self.controlPanelArn {
            try encodeContainer.encode(controlPanelArn, forKey: .controlPanelArn)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ruleConfig = self.ruleConfig {
            try encodeContainer.encode(ruleConfig, forKey: .ruleConfig)
        }
        if let safetyRuleArn = self.safetyRuleArn {
            try encodeContainer.encode(safetyRuleArn, forKey: .safetyRuleArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if waitPeriodMs != 0 {
            try encodeContainer.encode(waitPeriodMs, forKey: .waitPeriodMs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assertedControlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .assertedControls)
        var assertedControlsDecoded0:[Swift.String]? = nil
        if let assertedControlsContainer = assertedControlsContainer {
            assertedControlsDecoded0 = [Swift.String]()
            for string0 in assertedControlsContainer {
                if let string0 = string0 {
                    assertedControlsDecoded0?.append(string0)
                }
            }
        }
        assertedControls = assertedControlsDecoded0
        let controlPanelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPanelArn)
        controlPanelArn = controlPanelArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ruleConfigDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.RuleConfig.self, forKey: .ruleConfig)
        ruleConfig = ruleConfigDecoded
        let safetyRuleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .safetyRuleArn)
        safetyRuleArn = safetyRuleArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let waitPeriodMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .waitPeriodMs) ?? 0
        waitPeriodMs = waitPeriodMsDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes {
    /// An assertion rule enforces that, when you change a routing control state, that the criteria that you set in the rule configuration is met. Otherwise, the change to the routing control is not accepted. For example, the criteria might be that at least one routing control state is On after the transaction so that traffic continues to flow to at least one cell for the application. This ensures that you avoid a fail-open scenario.
    public struct AssertionRule: Swift.Equatable {
        /// The routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed. For example, you might include three routing controls, one for each of three Amazon Web Services Regions.
        /// This member is required.
        public var assertedControls: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the control panel.
        /// This member is required.
        public var controlPanelArn: Swift.String?
        /// Name of the assertion rule. You can use any non-white space character in the name.
        /// This member is required.
        public var name: Swift.String?
        /// The criteria that you set for specific assertion routing controls (AssertedControls) that designate how many routing control states must be ON as the result of a transaction. For example, if you have three assertion routing controls, you might specify ATLEAST 2 for your rule configuration. This means that at least two assertion routing control states must be ON, so that at least two Amazon Web Services Regions have traffic flowing to them.
        /// This member is required.
        public var ruleConfig: Route53RecoveryControlConfigClientTypes.RuleConfig?
        /// The Amazon Resource Name (ARN) of the assertion rule.
        /// This member is required.
        public var safetyRuleArn: Swift.String?
        /// The deployment status of an assertion rule. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
        /// This member is required.
        public var status: Route53RecoveryControlConfigClientTypes.Status?
        /// An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.
        /// This member is required.
        public var waitPeriodMs: Swift.Int

        public init (
            assertedControls: [Swift.String]? = nil,
            controlPanelArn: Swift.String? = nil,
            name: Swift.String? = nil,
            ruleConfig: Route53RecoveryControlConfigClientTypes.RuleConfig? = nil,
            safetyRuleArn: Swift.String? = nil,
            status: Route53RecoveryControlConfigClientTypes.Status? = nil,
            waitPeriodMs: Swift.Int = 0
        )
        {
            self.assertedControls = assertedControls
            self.controlPanelArn = controlPanelArn
            self.name = name
            self.ruleConfig = ruleConfig
            self.safetyRuleArn = safetyRuleArn
            self.status = status
            self.waitPeriodMs = waitPeriodMs
        }
    }

}

extension Route53RecoveryControlConfigClientTypes.AssertionRuleUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case safetyRuleArn = "SafetyRuleArn"
        case waitPeriodMs = "WaitPeriodMs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let safetyRuleArn = self.safetyRuleArn {
            try encodeContainer.encode(safetyRuleArn, forKey: .safetyRuleArn)
        }
        if waitPeriodMs != 0 {
            try encodeContainer.encode(waitPeriodMs, forKey: .waitPeriodMs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let safetyRuleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .safetyRuleArn)
        safetyRuleArn = safetyRuleArnDecoded
        let waitPeriodMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .waitPeriodMs) ?? 0
        waitPeriodMs = waitPeriodMsDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes {
    /// An update to an assertion rule. You can update the name or the evaluation period (wait period). If you don't specify one of the items to update, the item is unchanged.
    public struct AssertionRuleUpdate: Swift.Equatable {
        /// The name of the assertion rule. You can use any non-white space character in the name.
        /// This member is required.
        public var name: Swift.String?
        /// The Amazon Resource Name (ARN) of the assertion rule.
        /// This member is required.
        public var safetyRuleArn: Swift.String?
        /// An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.
        /// This member is required.
        public var waitPeriodMs: Swift.Int

        public init (
            name: Swift.String? = nil,
            safetyRuleArn: Swift.String? = nil,
            waitPeriodMs: Swift.Int = 0
        )
        {
            self.name = name
            self.safetyRuleArn = safetyRuleArn
            self.waitPeriodMs = waitPeriodMs
        }
    }

}

extension Route53RecoveryControlConfigClientTypes.Cluster: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterArn = "ClusterArn"
        case clusterEndpoints = "ClusterEndpoints"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterArn = self.clusterArn {
            try encodeContainer.encode(clusterArn, forKey: .clusterArn)
        }
        if let clusterEndpoints = clusterEndpoints {
            var clusterEndpointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .clusterEndpoints)
            for clusterendpoint0 in clusterEndpoints {
                try clusterEndpointsContainer.encode(clusterendpoint0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
        let clusterEndpointsContainer = try containerValues.decodeIfPresent([Route53RecoveryControlConfigClientTypes.ClusterEndpoint?].self, forKey: .clusterEndpoints)
        var clusterEndpointsDecoded0:[Route53RecoveryControlConfigClientTypes.ClusterEndpoint]? = nil
        if let clusterEndpointsContainer = clusterEndpointsContainer {
            clusterEndpointsDecoded0 = [Route53RecoveryControlConfigClientTypes.ClusterEndpoint]()
            for structure0 in clusterEndpointsContainer {
                if let structure0 = structure0 {
                    clusterEndpointsDecoded0?.append(structure0)
                }
            }
        }
        clusterEndpoints = clusterEndpointsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.Status.self, forKey: .status)
        status = statusDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes {
    /// A set of five redundant Regional endpoints against which you can execute API calls to update or get the state of routing controls. You can host multiple control panels and routing controls on one cluster.
    public struct Cluster: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the cluster.
        public var clusterArn: Swift.String?
        /// Endpoints for a cluster. Specify one of these endpoints when you want to set or retrieve a routing control state in the cluster. To get or update the routing control state, see the Amazon Route 53 Application Recovery Controller Routing Control Actions.
        public var clusterEndpoints: [Route53RecoveryControlConfigClientTypes.ClusterEndpoint]?
        /// The name of the cluster.
        public var name: Swift.String?
        /// Deployment status of a resource. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
        public var status: Route53RecoveryControlConfigClientTypes.Status?

        public init (
            clusterArn: Swift.String? = nil,
            clusterEndpoints: [Route53RecoveryControlConfigClientTypes.ClusterEndpoint]? = nil,
            name: Swift.String? = nil,
            status: Route53RecoveryControlConfigClientTypes.Status? = nil
        )
        {
            self.clusterArn = clusterArn
            self.clusterEndpoints = clusterEndpoints
            self.name = name
            self.status = status
        }
    }

}

extension Route53RecoveryControlConfigClientTypes.ClusterEndpoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpoint = "Endpoint"
        case region = "Region"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpoint = self.endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes {
    /// A cluster endpoint. Specify an endpoint when you want to set or retrieve a routing control state in the cluster.
    public struct ClusterEndpoint: Swift.Equatable {
        /// A cluster endpoint. Specify an endpoint and Amazon Web Services Region when you want to set or retrieve a routing control state in the cluster. To get or update the routing control state, see the Amazon Route 53 Application Recovery Controller Routing Control Actions.
        public var endpoint: Swift.String?
        /// The Amazon Web Services Region for a cluster endpoint.
        public var region: Swift.String?

        public init (
            endpoint: Swift.String? = nil,
            region: Swift.String? = nil
        )
        {
            self.endpoint = endpoint
            self.region = region
        }
    }

}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// 409 response - ConflictException. You might be using a predefined variable.
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes.ControlPanel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterArn = "ClusterArn"
        case controlPanelArn = "ControlPanelArn"
        case defaultControlPanel = "DefaultControlPanel"
        case name = "Name"
        case routingControlCount = "RoutingControlCount"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterArn = self.clusterArn {
            try encodeContainer.encode(clusterArn, forKey: .clusterArn)
        }
        if let controlPanelArn = self.controlPanelArn {
            try encodeContainer.encode(controlPanelArn, forKey: .controlPanelArn)
        }
        if defaultControlPanel != false {
            try encodeContainer.encode(defaultControlPanel, forKey: .defaultControlPanel)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if routingControlCount != 0 {
            try encodeContainer.encode(routingControlCount, forKey: .routingControlCount)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
        let controlPanelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPanelArn)
        controlPanelArn = controlPanelArnDecoded
        let defaultControlPanelDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .defaultControlPanel) ?? false
        defaultControlPanel = defaultControlPanelDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let routingControlCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .routingControlCount) ?? 0
        routingControlCount = routingControlCountDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.Status.self, forKey: .status)
        status = statusDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes {
    /// A control panel represents a group of routing controls that can be changed together in a single transaction.
    public struct ControlPanel: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the cluster that includes the control panel.
        public var clusterArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the control panel.
        public var controlPanelArn: Swift.String?
        /// A flag that Amazon Route 53 Application Recovery Controller sets to true to designate the default control panel for a cluster. When you create a cluster, Amazon Route 53 Application Recovery Controller creates a control panel, and sets this flag for that control panel. If you create a control panel yourself, this flag is set to false.
        public var defaultControlPanel: Swift.Bool
        /// The name of the control panel. You can use any non-white space character in the name.
        public var name: Swift.String?
        /// The number of routing controls in the control panel.
        public var routingControlCount: Swift.Int
        /// The deployment status of control panel. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
        public var status: Route53RecoveryControlConfigClientTypes.Status?

        public init (
            clusterArn: Swift.String? = nil,
            controlPanelArn: Swift.String? = nil,
            defaultControlPanel: Swift.Bool = false,
            name: Swift.String? = nil,
            routingControlCount: Swift.Int = 0,
            status: Route53RecoveryControlConfigClientTypes.Status? = nil
        )
        {
            self.clusterArn = clusterArn
            self.controlPanelArn = controlPanelArn
            self.defaultControlPanel = defaultControlPanel
            self.name = name
            self.routingControlCount = routingControlCount
            self.status = status
        }
    }

}

extension CreateClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case clusterName = "ClusterName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let clusterName = self.clusterName {
            try encodeContainer.encode(clusterName, forKey: .clusterName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, __mapOf__stringMin0Max256PatternS0) in tags {
                try tagsContainer.encode(__mapOf__stringMin0Max256PatternS0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateClusterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/cluster"
    }
}

/// Creates a cluster.
public struct CreateClusterInput: Swift.Equatable {
    /// A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.
    public var clientToken: Swift.String?
    /// The name of the cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The tags associated with the cluster.
    public var tags: [Swift.String:Swift.String]?

    public init (
        clientToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.clientToken = clientToken
        self.clusterName = clusterName
        self.tags = tags
    }
}

struct CreateClusterInputBody: Swift.Equatable {
    let clientToken: Swift.String?
    let clusterName: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case clusterName = "ClusterName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __stringmin0max256patterns0) in tagsContainer {
                if let __stringmin0max256patterns0 = __stringmin0max256patterns0 {
                    tagsDecoded0?[key0] = __stringmin0max256patterns0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateClusterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateClusterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateClusterOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateClusterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateClusterOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct CreateClusterOutputResponse: Swift.Equatable {
    /// The cluster that was created.
    public var cluster: Route53RecoveryControlConfigClientTypes.Cluster?

    public init (
        cluster: Route53RecoveryControlConfigClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct CreateClusterOutputResponseBody: Swift.Equatable {
    let cluster: Route53RecoveryControlConfigClientTypes.Cluster?
}

extension CreateClusterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster = "Cluster"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

extension CreateControlPanelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case clusterArn = "ClusterArn"
        case controlPanelName = "ControlPanelName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let clusterArn = self.clusterArn {
            try encodeContainer.encode(clusterArn, forKey: .clusterArn)
        }
        if let controlPanelName = self.controlPanelName {
            try encodeContainer.encode(controlPanelName, forKey: .controlPanelName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, __mapOf__stringMin0Max256PatternS0) in tags {
                try tagsContainer.encode(__mapOf__stringMin0Max256PatternS0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateControlPanelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/controlpanel"
    }
}

/// The details of the control panel that you're creating.
public struct CreateControlPanelInput: Swift.Equatable {
    /// A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.
    public var clientToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the cluster for the control panel.
    /// This member is required.
    public var clusterArn: Swift.String?
    /// The name of the control panel.
    /// This member is required.
    public var controlPanelName: Swift.String?
    /// The tags associated with the control panel.
    public var tags: [Swift.String:Swift.String]?

    public init (
        clientToken: Swift.String? = nil,
        clusterArn: Swift.String? = nil,
        controlPanelName: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.clientToken = clientToken
        self.clusterArn = clusterArn
        self.controlPanelName = controlPanelName
        self.tags = tags
    }
}

struct CreateControlPanelInputBody: Swift.Equatable {
    let clientToken: Swift.String?
    let clusterArn: Swift.String?
    let controlPanelName: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateControlPanelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case clusterArn = "ClusterArn"
        case controlPanelName = "ControlPanelName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let clusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
        let controlPanelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPanelName)
        controlPanelName = controlPanelNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __stringmin0max256patterns0) in tagsContainer {
                if let __stringmin0max256patterns0 = __stringmin0max256patterns0 {
                    tagsDecoded0?[key0] = __stringmin0max256patterns0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateControlPanelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateControlPanelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateControlPanelOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateControlPanelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateControlPanelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.controlPanel = output.controlPanel
        } else {
            self.controlPanel = nil
        }
    }
}

public struct CreateControlPanelOutputResponse: Swift.Equatable {
    /// Information about a control panel.
    public var controlPanel: Route53RecoveryControlConfigClientTypes.ControlPanel?

    public init (
        controlPanel: Route53RecoveryControlConfigClientTypes.ControlPanel? = nil
    )
    {
        self.controlPanel = controlPanel
    }
}

struct CreateControlPanelOutputResponseBody: Swift.Equatable {
    let controlPanel: Route53RecoveryControlConfigClientTypes.ControlPanel?
}

extension CreateControlPanelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlPanel = "ControlPanel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let controlPanelDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.ControlPanel.self, forKey: .controlPanel)
        controlPanel = controlPanelDecoded
    }
}

extension CreateRoutingControlInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case clusterArn = "ClusterArn"
        case controlPanelArn = "ControlPanelArn"
        case routingControlName = "RoutingControlName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let clusterArn = self.clusterArn {
            try encodeContainer.encode(clusterArn, forKey: .clusterArn)
        }
        if let controlPanelArn = self.controlPanelArn {
            try encodeContainer.encode(controlPanelArn, forKey: .controlPanelArn)
        }
        if let routingControlName = self.routingControlName {
            try encodeContainer.encode(routingControlName, forKey: .routingControlName)
        }
    }
}

extension CreateRoutingControlInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/routingcontrol"
    }
}

/// The details of the routing control that you're creating.
public struct CreateRoutingControlInput: Swift.Equatable {
    /// A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.
    public var clientToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the cluster that includes the routing control.
    /// This member is required.
    public var clusterArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the control panel that includes the routing control.
    public var controlPanelArn: Swift.String?
    /// The name of the routing control.
    /// This member is required.
    public var routingControlName: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        clusterArn: Swift.String? = nil,
        controlPanelArn: Swift.String? = nil,
        routingControlName: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.clusterArn = clusterArn
        self.controlPanelArn = controlPanelArn
        self.routingControlName = routingControlName
    }
}

struct CreateRoutingControlInputBody: Swift.Equatable {
    let clientToken: Swift.String?
    let clusterArn: Swift.String?
    let controlPanelArn: Swift.String?
    let routingControlName: Swift.String?
}

extension CreateRoutingControlInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case clusterArn = "ClusterArn"
        case controlPanelArn = "ControlPanelArn"
        case routingControlName = "RoutingControlName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let clusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
        let controlPanelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPanelArn)
        controlPanelArn = controlPanelArnDecoded
        let routingControlNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routingControlName)
        routingControlName = routingControlNameDecoded
    }
}

extension CreateRoutingControlOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRoutingControlOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateRoutingControlOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRoutingControlOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateRoutingControlOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.routingControl = output.routingControl
        } else {
            self.routingControl = nil
        }
    }
}

public struct CreateRoutingControlOutputResponse: Swift.Equatable {
    /// The routing control that is created.
    public var routingControl: Route53RecoveryControlConfigClientTypes.RoutingControl?

    public init (
        routingControl: Route53RecoveryControlConfigClientTypes.RoutingControl? = nil
    )
    {
        self.routingControl = routingControl
    }
}

struct CreateRoutingControlOutputResponseBody: Swift.Equatable {
    let routingControl: Route53RecoveryControlConfigClientTypes.RoutingControl?
}

extension CreateRoutingControlOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case routingControl = "RoutingControl"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routingControlDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.RoutingControl.self, forKey: .routingControl)
        routingControl = routingControlDecoded
    }
}

extension CreateSafetyRuleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assertionRule = "AssertionRule"
        case clientToken = "ClientToken"
        case gatingRule = "GatingRule"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assertionRule = self.assertionRule {
            try encodeContainer.encode(assertionRule, forKey: .assertionRule)
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let gatingRule = self.gatingRule {
            try encodeContainer.encode(gatingRule, forKey: .gatingRule)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, __mapOf__stringMin0Max256PatternS0) in tags {
                try tagsContainer.encode(__mapOf__stringMin0Max256PatternS0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateSafetyRuleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/safetyrule"
    }
}

/// The request body that you include when you create a safety rule.
public struct CreateSafetyRuleInput: Swift.Equatable {
    /// The assertion rule requested.
    public var assertionRule: Route53RecoveryControlConfigClientTypes.NewAssertionRule?
    /// A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.
    public var clientToken: Swift.String?
    /// The gating rule requested.
    public var gatingRule: Route53RecoveryControlConfigClientTypes.NewGatingRule?
    /// The tags associated with the safety rule.
    public var tags: [Swift.String:Swift.String]?

    public init (
        assertionRule: Route53RecoveryControlConfigClientTypes.NewAssertionRule? = nil,
        clientToken: Swift.String? = nil,
        gatingRule: Route53RecoveryControlConfigClientTypes.NewGatingRule? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.assertionRule = assertionRule
        self.clientToken = clientToken
        self.gatingRule = gatingRule
        self.tags = tags
    }
}

struct CreateSafetyRuleInputBody: Swift.Equatable {
    let assertionRule: Route53RecoveryControlConfigClientTypes.NewAssertionRule?
    let clientToken: Swift.String?
    let gatingRule: Route53RecoveryControlConfigClientTypes.NewGatingRule?
    let tags: [Swift.String:Swift.String]?
}

extension CreateSafetyRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assertionRule = "AssertionRule"
        case clientToken = "ClientToken"
        case gatingRule = "GatingRule"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assertionRuleDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.NewAssertionRule.self, forKey: .assertionRule)
        assertionRule = assertionRuleDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let gatingRuleDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.NewGatingRule.self, forKey: .gatingRule)
        gatingRule = gatingRuleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __stringmin0max256patterns0) in tagsContainer {
                if let __stringmin0max256patterns0 = __stringmin0max256patterns0 {
                    tagsDecoded0?[key0] = __stringmin0max256patterns0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateSafetyRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateSafetyRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateSafetyRuleOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateSafetyRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateSafetyRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.assertionRule = output.assertionRule
            self.gatingRule = output.gatingRule
        } else {
            self.assertionRule = nil
            self.gatingRule = nil
        }
    }
}

public struct CreateSafetyRuleOutputResponse: Swift.Equatable {
    /// The assertion rule created.
    public var assertionRule: Route53RecoveryControlConfigClientTypes.AssertionRule?
    /// The gating rule created.
    public var gatingRule: Route53RecoveryControlConfigClientTypes.GatingRule?

    public init (
        assertionRule: Route53RecoveryControlConfigClientTypes.AssertionRule? = nil,
        gatingRule: Route53RecoveryControlConfigClientTypes.GatingRule? = nil
    )
    {
        self.assertionRule = assertionRule
        self.gatingRule = gatingRule
    }
}

struct CreateSafetyRuleOutputResponseBody: Swift.Equatable {
    let assertionRule: Route53RecoveryControlConfigClientTypes.AssertionRule?
    let gatingRule: Route53RecoveryControlConfigClientTypes.GatingRule?
}

extension CreateSafetyRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assertionRule = "AssertionRule"
        case gatingRule = "GatingRule"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assertionRuleDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.AssertionRule.self, forKey: .assertionRule)
        assertionRule = assertionRuleDecoded
        let gatingRuleDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.GatingRule.self, forKey: .gatingRule)
        gatingRule = gatingRuleDecoded
    }
}

extension DeleteClusterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let clusterArn = clusterArn else {
            return nil
        }
        return "/cluster/\(clusterArn.urlPercentEncoding())"
    }
}

public struct DeleteClusterInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the cluster that you're deleting.
    /// This member is required.
    public var clusterArn: Swift.String?

    public init (
        clusterArn: Swift.String? = nil
    )
    {
        self.clusterArn = clusterArn
    }
}

struct DeleteClusterInputBody: Swift.Equatable {
}

extension DeleteClusterInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteClusterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteClusterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteClusterOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteClusterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteClusterOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteControlPanelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let controlPanelArn = controlPanelArn else {
            return nil
        }
        return "/controlpanel/\(controlPanelArn.urlPercentEncoding())"
    }
}

public struct DeleteControlPanelInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the control panel.
    /// This member is required.
    public var controlPanelArn: Swift.String?

    public init (
        controlPanelArn: Swift.String? = nil
    )
    {
        self.controlPanelArn = controlPanelArn
    }
}

struct DeleteControlPanelInputBody: Swift.Equatable {
}

extension DeleteControlPanelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteControlPanelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteControlPanelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteControlPanelOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteControlPanelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteControlPanelOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteRoutingControlInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let routingControlArn = routingControlArn else {
            return nil
        }
        return "/routingcontrol/\(routingControlArn.urlPercentEncoding())"
    }
}

public struct DeleteRoutingControlInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the routing control that you're deleting.
    /// This member is required.
    public var routingControlArn: Swift.String?

    public init (
        routingControlArn: Swift.String? = nil
    )
    {
        self.routingControlArn = routingControlArn
    }
}

struct DeleteRoutingControlInputBody: Swift.Equatable {
}

extension DeleteRoutingControlInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteRoutingControlOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRoutingControlOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteRoutingControlOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRoutingControlOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteRoutingControlOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteSafetyRuleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let safetyRuleArn = safetyRuleArn else {
            return nil
        }
        return "/safetyrule/\(safetyRuleArn.urlPercentEncoding())"
    }
}

public struct DeleteSafetyRuleInput: Swift.Equatable {
    /// The ARN of the safety rule.
    /// This member is required.
    public var safetyRuleArn: Swift.String?

    public init (
        safetyRuleArn: Swift.String? = nil
    )
    {
        self.safetyRuleArn = safetyRuleArn
    }
}

struct DeleteSafetyRuleInputBody: Swift.Equatable {
}

extension DeleteSafetyRuleInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteSafetyRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSafetyRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteSafetyRuleOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSafetyRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteSafetyRuleOutputResponse: Swift.Equatable {

    public init () { }
}

extension DescribeClusterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let clusterArn = clusterArn else {
            return nil
        }
        return "/cluster/\(clusterArn.urlPercentEncoding())"
    }
}

public struct DescribeClusterInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the cluster.
    /// This member is required.
    public var clusterArn: Swift.String?

    public init (
        clusterArn: Swift.String? = nil
    )
    {
        self.clusterArn = clusterArn
    }
}

struct DescribeClusterInputBody: Swift.Equatable {
}

extension DescribeClusterInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeClusterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeClusterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

extension DescribeClusterOutputError: WaiterTypedError {

    /// The Smithy identifier, without namespace, for the type of this error, or `nil` if the
    /// error has no known type.
    public var waiterErrorType: String? {
        switch self {
        case .accessDeniedException: return "AccessDeniedException"
        case .conflictException: return "ConflictException"
        case .internalServerException: return "InternalServerException"
        case .resourceNotFoundException: return "ResourceNotFoundException"
        case .throttlingException: return "ThrottlingException"
        case .validationException: return "ValidationException"
        case .unknown(let error): return error.waiterErrorType
        }
    }
}

public enum DescribeClusterOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeClusterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeClusterOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct DescribeClusterOutputResponse: Swift.Equatable {
    /// The cluster for the DescribeCluster request.
    public var cluster: Route53RecoveryControlConfigClientTypes.Cluster?

    public init (
        cluster: Route53RecoveryControlConfigClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct DescribeClusterOutputResponseBody: Swift.Equatable {
    let cluster: Route53RecoveryControlConfigClientTypes.Cluster?
}

extension DescribeClusterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster = "Cluster"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

extension DescribeControlPanelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let controlPanelArn = controlPanelArn else {
            return nil
        }
        return "/controlpanel/\(controlPanelArn.urlPercentEncoding())"
    }
}

public struct DescribeControlPanelInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the control panel.
    /// This member is required.
    public var controlPanelArn: Swift.String?

    public init (
        controlPanelArn: Swift.String? = nil
    )
    {
        self.controlPanelArn = controlPanelArn
    }
}

struct DescribeControlPanelInputBody: Swift.Equatable {
}

extension DescribeControlPanelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeControlPanelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeControlPanelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

extension DescribeControlPanelOutputError: WaiterTypedError {

    /// The Smithy identifier, without namespace, for the type of this error, or `nil` if the
    /// error has no known type.
    public var waiterErrorType: String? {
        switch self {
        case .accessDeniedException: return "AccessDeniedException"
        case .conflictException: return "ConflictException"
        case .internalServerException: return "InternalServerException"
        case .resourceNotFoundException: return "ResourceNotFoundException"
        case .throttlingException: return "ThrottlingException"
        case .validationException: return "ValidationException"
        case .unknown(let error): return error.waiterErrorType
        }
    }
}

public enum DescribeControlPanelOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeControlPanelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeControlPanelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.controlPanel = output.controlPanel
        } else {
            self.controlPanel = nil
        }
    }
}

public struct DescribeControlPanelOutputResponse: Swift.Equatable {
    /// Information about the control panel.
    public var controlPanel: Route53RecoveryControlConfigClientTypes.ControlPanel?

    public init (
        controlPanel: Route53RecoveryControlConfigClientTypes.ControlPanel? = nil
    )
    {
        self.controlPanel = controlPanel
    }
}

struct DescribeControlPanelOutputResponseBody: Swift.Equatable {
    let controlPanel: Route53RecoveryControlConfigClientTypes.ControlPanel?
}

extension DescribeControlPanelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlPanel = "ControlPanel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let controlPanelDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.ControlPanel.self, forKey: .controlPanel)
        controlPanel = controlPanelDecoded
    }
}

extension DescribeRoutingControlInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let routingControlArn = routingControlArn else {
            return nil
        }
        return "/routingcontrol/\(routingControlArn.urlPercentEncoding())"
    }
}

public struct DescribeRoutingControlInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the routing control.
    /// This member is required.
    public var routingControlArn: Swift.String?

    public init (
        routingControlArn: Swift.String? = nil
    )
    {
        self.routingControlArn = routingControlArn
    }
}

struct DescribeRoutingControlInputBody: Swift.Equatable {
}

extension DescribeRoutingControlInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeRoutingControlOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeRoutingControlOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

extension DescribeRoutingControlOutputError: WaiterTypedError {

    /// The Smithy identifier, without namespace, for the type of this error, or `nil` if the
    /// error has no known type.
    public var waiterErrorType: String? {
        switch self {
        case .accessDeniedException: return "AccessDeniedException"
        case .conflictException: return "ConflictException"
        case .internalServerException: return "InternalServerException"
        case .resourceNotFoundException: return "ResourceNotFoundException"
        case .throttlingException: return "ThrottlingException"
        case .validationException: return "ValidationException"
        case .unknown(let error): return error.waiterErrorType
        }
    }
}

public enum DescribeRoutingControlOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeRoutingControlOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeRoutingControlOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.routingControl = output.routingControl
        } else {
            self.routingControl = nil
        }
    }
}

public struct DescribeRoutingControlOutputResponse: Swift.Equatable {
    /// Information about the routing control.
    public var routingControl: Route53RecoveryControlConfigClientTypes.RoutingControl?

    public init (
        routingControl: Route53RecoveryControlConfigClientTypes.RoutingControl? = nil
    )
    {
        self.routingControl = routingControl
    }
}

struct DescribeRoutingControlOutputResponseBody: Swift.Equatable {
    let routingControl: Route53RecoveryControlConfigClientTypes.RoutingControl?
}

extension DescribeRoutingControlOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case routingControl = "RoutingControl"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routingControlDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.RoutingControl.self, forKey: .routingControl)
        routingControl = routingControlDecoded
    }
}

extension DescribeSafetyRuleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let safetyRuleArn = safetyRuleArn else {
            return nil
        }
        return "/safetyrule/\(safetyRuleArn.urlPercentEncoding())"
    }
}

public struct DescribeSafetyRuleInput: Swift.Equatable {
    /// The ARN of the safety rule.
    /// This member is required.
    public var safetyRuleArn: Swift.String?

    public init (
        safetyRuleArn: Swift.String? = nil
    )
    {
        self.safetyRuleArn = safetyRuleArn
    }
}

struct DescribeSafetyRuleInputBody: Swift.Equatable {
}

extension DescribeSafetyRuleInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeSafetyRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeSafetyRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeSafetyRuleOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeSafetyRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeSafetyRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.assertionRule = output.assertionRule
            self.gatingRule = output.gatingRule
        } else {
            self.assertionRule = nil
            self.gatingRule = nil
        }
    }
}

public struct DescribeSafetyRuleOutputResponse: Swift.Equatable {
    /// The assertion rule in the response.
    public var assertionRule: Route53RecoveryControlConfigClientTypes.AssertionRule?
    /// The gating rule in the response.
    public var gatingRule: Route53RecoveryControlConfigClientTypes.GatingRule?

    public init (
        assertionRule: Route53RecoveryControlConfigClientTypes.AssertionRule? = nil,
        gatingRule: Route53RecoveryControlConfigClientTypes.GatingRule? = nil
    )
    {
        self.assertionRule = assertionRule
        self.gatingRule = gatingRule
    }
}

struct DescribeSafetyRuleOutputResponseBody: Swift.Equatable {
    let assertionRule: Route53RecoveryControlConfigClientTypes.AssertionRule?
    let gatingRule: Route53RecoveryControlConfigClientTypes.GatingRule?
}

extension DescribeSafetyRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assertionRule = "AssertionRule"
        case gatingRule = "GatingRule"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assertionRuleDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.AssertionRule.self, forKey: .assertionRule)
        assertionRule = assertionRuleDecoded
        let gatingRuleDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.GatingRule.self, forKey: .gatingRule)
        gatingRule = gatingRuleDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes.GatingRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlPanelArn = "ControlPanelArn"
        case gatingControls = "GatingControls"
        case name = "Name"
        case ruleConfig = "RuleConfig"
        case safetyRuleArn = "SafetyRuleArn"
        case status = "Status"
        case targetControls = "TargetControls"
        case waitPeriodMs = "WaitPeriodMs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let controlPanelArn = self.controlPanelArn {
            try encodeContainer.encode(controlPanelArn, forKey: .controlPanelArn)
        }
        if let gatingControls = gatingControls {
            var gatingControlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gatingControls)
            for __stringmin1max256patternazaz090 in gatingControls {
                try gatingControlsContainer.encode(__stringmin1max256patternazaz090)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ruleConfig = self.ruleConfig {
            try encodeContainer.encode(ruleConfig, forKey: .ruleConfig)
        }
        if let safetyRuleArn = self.safetyRuleArn {
            try encodeContainer.encode(safetyRuleArn, forKey: .safetyRuleArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetControls = targetControls {
            var targetControlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetControls)
            for __stringmin1max256patternazaz090 in targetControls {
                try targetControlsContainer.encode(__stringmin1max256patternazaz090)
            }
        }
        if waitPeriodMs != 0 {
            try encodeContainer.encode(waitPeriodMs, forKey: .waitPeriodMs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let controlPanelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPanelArn)
        controlPanelArn = controlPanelArnDecoded
        let gatingControlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .gatingControls)
        var gatingControlsDecoded0:[Swift.String]? = nil
        if let gatingControlsContainer = gatingControlsContainer {
            gatingControlsDecoded0 = [Swift.String]()
            for string0 in gatingControlsContainer {
                if let string0 = string0 {
                    gatingControlsDecoded0?.append(string0)
                }
            }
        }
        gatingControls = gatingControlsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ruleConfigDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.RuleConfig.self, forKey: .ruleConfig)
        ruleConfig = ruleConfigDecoded
        let safetyRuleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .safetyRuleArn)
        safetyRuleArn = safetyRuleArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let targetControlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targetControls)
        var targetControlsDecoded0:[Swift.String]? = nil
        if let targetControlsContainer = targetControlsContainer {
            targetControlsDecoded0 = [Swift.String]()
            for string0 in targetControlsContainer {
                if let string0 = string0 {
                    targetControlsDecoded0?.append(string0)
                }
            }
        }
        targetControls = targetControlsDecoded0
        let waitPeriodMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .waitPeriodMs) ?? 0
        waitPeriodMs = waitPeriodMsDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes {
    /// A gating rule verifies that a gating routing control or set of gating routing controls, evaluates as true, based on a rule configuration that you specify, which allows a set of routing control state changes to complete. For example, if you specify one gating routing control and you set the Type in the rule configuration to OR, that indicates that you must set the gating routing control to On for the rule to evaluate as true; that is, for the gating control "switch" to be "On". When you do that, then you can update the routing control states for the target routing controls that you specify in the gating rule.
    public struct GatingRule: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the control panel.
        /// This member is required.
        public var controlPanelArn: Swift.String?
        /// An array of gating routing control Amazon Resource Names (ARNs). For a simple "on/off" switch, specify the ARN for one routing control. The gating routing controls are evaluated by the rule configuration that you specify to determine if the target routing control states can be changed.
        /// This member is required.
        public var gatingControls: [Swift.String]?
        /// The name for the gating rule. You can use any non-white space character in the name.
        /// This member is required.
        public var name: Swift.String?
        /// The criteria that you set for gating routing controls that designate how many of the routing control states must be ON to allow you to update target routing control states.
        /// This member is required.
        public var ruleConfig: Route53RecoveryControlConfigClientTypes.RuleConfig?
        /// The Amazon Resource Name (ARN) of the gating rule.
        /// This member is required.
        public var safetyRuleArn: Swift.String?
        /// The deployment status of a gating rule. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
        /// This member is required.
        public var status: Route53RecoveryControlConfigClientTypes.Status?
        /// An array of target routing control Amazon Resource Names (ARNs) for which the states can only be updated if the rule configuration that you specify evaluates to true for the gating routing control. As a simple example, if you have a single gating control, it acts as an overall "on/off" switch for a set of target routing controls. You can use this to manually override automated failover, for example.
        /// This member is required.
        public var targetControls: [Swift.String]?
        /// An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.
        /// This member is required.
        public var waitPeriodMs: Swift.Int

        public init (
            controlPanelArn: Swift.String? = nil,
            gatingControls: [Swift.String]? = nil,
            name: Swift.String? = nil,
            ruleConfig: Route53RecoveryControlConfigClientTypes.RuleConfig? = nil,
            safetyRuleArn: Swift.String? = nil,
            status: Route53RecoveryControlConfigClientTypes.Status? = nil,
            targetControls: [Swift.String]? = nil,
            waitPeriodMs: Swift.Int = 0
        )
        {
            self.controlPanelArn = controlPanelArn
            self.gatingControls = gatingControls
            self.name = name
            self.ruleConfig = ruleConfig
            self.safetyRuleArn = safetyRuleArn
            self.status = status
            self.targetControls = targetControls
            self.waitPeriodMs = waitPeriodMs
        }
    }

}

extension Route53RecoveryControlConfigClientTypes.GatingRuleUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case safetyRuleArn = "SafetyRuleArn"
        case waitPeriodMs = "WaitPeriodMs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let safetyRuleArn = self.safetyRuleArn {
            try encodeContainer.encode(safetyRuleArn, forKey: .safetyRuleArn)
        }
        if waitPeriodMs != 0 {
            try encodeContainer.encode(waitPeriodMs, forKey: .waitPeriodMs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let safetyRuleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .safetyRuleArn)
        safetyRuleArn = safetyRuleArnDecoded
        let waitPeriodMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .waitPeriodMs) ?? 0
        waitPeriodMs = waitPeriodMsDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes {
    /// Update to a gating rule. You can update the name or the evaluation period (wait period). If you don't specify one of the items to update, the item is unchanged.
    public struct GatingRuleUpdate: Swift.Equatable {
        /// The name for the gating rule. You can use any non-white space character in the name.
        /// This member is required.
        public var name: Swift.String?
        /// The Amazon Resource Name (ARN) of the gating rule.
        /// This member is required.
        public var safetyRuleArn: Swift.String?
        /// An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.
        /// This member is required.
        public var waitPeriodMs: Swift.Int

        public init (
            name: Swift.String? = nil,
            safetyRuleArn: Swift.String? = nil,
            waitPeriodMs: Swift.Int = 0
        )
        {
            self.name = name
            self.safetyRuleArn = safetyRuleArn
            self.waitPeriodMs = waitPeriodMs
        }
    }

}

extension InternalServerException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// 500 response - InternalServiceError. Temporary service error. Retry the request.
public struct InternalServerException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListAssociatedRoute53HealthChecksInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if maxResults != 0 {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListAssociatedRoute53HealthChecksInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let routingControlArn = routingControlArn else {
            return nil
        }
        return "/routingcontrol/\(routingControlArn.urlPercentEncoding())/associatedRoute53HealthChecks"
    }
}

public struct ListAssociatedRoute53HealthChecksInput: Swift.Equatable {
    /// The number of objects that you want to return with this call.
    public var maxResults: Swift.Int
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the routing control.
    /// This member is required.
    public var routingControlArn: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        routingControlArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.routingControlArn = routingControlArn
    }
}

struct ListAssociatedRoute53HealthChecksInputBody: Swift.Equatable {
}

extension ListAssociatedRoute53HealthChecksInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListAssociatedRoute53HealthChecksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAssociatedRoute53HealthChecksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListAssociatedRoute53HealthChecksOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAssociatedRoute53HealthChecksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListAssociatedRoute53HealthChecksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.healthCheckIds = output.healthCheckIds
            self.nextToken = output.nextToken
        } else {
            self.healthCheckIds = nil
            self.nextToken = nil
        }
    }
}

public struct ListAssociatedRoute53HealthChecksOutputResponse: Swift.Equatable {
    /// Identifiers for the health checks.
    public var healthCheckIds: [Swift.String]?
    /// Next token for listing health checks.
    public var nextToken: Swift.String?

    public init (
        healthCheckIds: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.healthCheckIds = healthCheckIds
        self.nextToken = nextToken
    }
}

struct ListAssociatedRoute53HealthChecksOutputResponseBody: Swift.Equatable {
    let healthCheckIds: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListAssociatedRoute53HealthChecksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthCheckIds = "HealthCheckIds"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let healthCheckIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .healthCheckIds)
        var healthCheckIdsDecoded0:[Swift.String]? = nil
        if let healthCheckIdsContainer = healthCheckIdsContainer {
            healthCheckIdsDecoded0 = [Swift.String]()
            for string0 in healthCheckIdsContainer {
                if let string0 = string0 {
                    healthCheckIdsDecoded0?.append(string0)
                }
            }
        }
        healthCheckIds = healthCheckIdsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListClustersInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if maxResults != 0 {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListClustersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/cluster"
    }
}

public struct ListClustersInput: Swift.Equatable {
    /// The number of objects that you want to return with this call.
    public var maxResults: Swift.Int
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListClustersInputBody: Swift.Equatable {
}

extension ListClustersInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListClustersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListClustersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListClustersOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListClustersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListClustersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.clusters = output.clusters
            self.nextToken = output.nextToken
        } else {
            self.clusters = nil
            self.nextToken = nil
        }
    }
}

public struct ListClustersOutputResponse: Swift.Equatable {
    /// An array of the clusters in an account.
    public var clusters: [Route53RecoveryControlConfigClientTypes.Cluster]?
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?

    public init (
        clusters: [Route53RecoveryControlConfigClientTypes.Cluster]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clusters = clusters
        self.nextToken = nextToken
    }
}

struct ListClustersOutputResponseBody: Swift.Equatable {
    let clusters: [Route53RecoveryControlConfigClientTypes.Cluster]?
    let nextToken: Swift.String?
}

extension ListClustersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusters = "Clusters"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clustersContainer = try containerValues.decodeIfPresent([Route53RecoveryControlConfigClientTypes.Cluster?].self, forKey: .clusters)
        var clustersDecoded0:[Route53RecoveryControlConfigClientTypes.Cluster]? = nil
        if let clustersContainer = clustersContainer {
            clustersDecoded0 = [Route53RecoveryControlConfigClientTypes.Cluster]()
            for structure0 in clustersContainer {
                if let structure0 = structure0 {
                    clustersDecoded0?.append(structure0)
                }
            }
        }
        clusters = clustersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListControlPanelsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let clusterArn = clusterArn {
                let clusterArnQueryItem = ClientRuntime.URLQueryItem(name: "ClusterArn".urlPercentEncoding(), value: Swift.String(clusterArn).urlPercentEncoding())
                items.append(clusterArnQueryItem)
            }
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if maxResults != 0 {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListControlPanelsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/controlpanels"
    }
}

public struct ListControlPanelsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of a cluster.
    public var clusterArn: Swift.String?
    /// The number of objects that you want to return with this call.
    public var maxResults: Swift.Int
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?

    public init (
        clusterArn: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.clusterArn = clusterArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListControlPanelsInputBody: Swift.Equatable {
}

extension ListControlPanelsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListControlPanelsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListControlPanelsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListControlPanelsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListControlPanelsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListControlPanelsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.controlPanels = output.controlPanels
            self.nextToken = output.nextToken
        } else {
            self.controlPanels = nil
            self.nextToken = nil
        }
    }
}

public struct ListControlPanelsOutputResponse: Swift.Equatable {
    /// The result of a successful ListControlPanel request.
    public var controlPanels: [Route53RecoveryControlConfigClientTypes.ControlPanel]?
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?

    public init (
        controlPanels: [Route53RecoveryControlConfigClientTypes.ControlPanel]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.controlPanels = controlPanels
        self.nextToken = nextToken
    }
}

struct ListControlPanelsOutputResponseBody: Swift.Equatable {
    let controlPanels: [Route53RecoveryControlConfigClientTypes.ControlPanel]?
    let nextToken: Swift.String?
}

extension ListControlPanelsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlPanels = "ControlPanels"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let controlPanelsContainer = try containerValues.decodeIfPresent([Route53RecoveryControlConfigClientTypes.ControlPanel?].self, forKey: .controlPanels)
        var controlPanelsDecoded0:[Route53RecoveryControlConfigClientTypes.ControlPanel]? = nil
        if let controlPanelsContainer = controlPanelsContainer {
            controlPanelsDecoded0 = [Route53RecoveryControlConfigClientTypes.ControlPanel]()
            for structure0 in controlPanelsContainer {
                if let structure0 = structure0 {
                    controlPanelsDecoded0?.append(structure0)
                }
            }
        }
        controlPanels = controlPanelsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListRoutingControlsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if maxResults != 0 {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListRoutingControlsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let controlPanelArn = controlPanelArn else {
            return nil
        }
        return "/controlpanel/\(controlPanelArn.urlPercentEncoding())/routingcontrols"
    }
}

public struct ListRoutingControlsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the control panel.
    /// This member is required.
    public var controlPanelArn: Swift.String?
    /// The number of objects that you want to return with this call.
    public var maxResults: Swift.Int
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?

    public init (
        controlPanelArn: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.controlPanelArn = controlPanelArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListRoutingControlsInputBody: Swift.Equatable {
}

extension ListRoutingControlsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListRoutingControlsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRoutingControlsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListRoutingControlsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRoutingControlsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListRoutingControlsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.routingControls = output.routingControls
        } else {
            self.nextToken = nil
            self.routingControls = nil
        }
    }
}

public struct ListRoutingControlsOutputResponse: Swift.Equatable {
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?
    /// An array of routing controls.
    public var routingControls: [Route53RecoveryControlConfigClientTypes.RoutingControl]?

    public init (
        nextToken: Swift.String? = nil,
        routingControls: [Route53RecoveryControlConfigClientTypes.RoutingControl]? = nil
    )
    {
        self.nextToken = nextToken
        self.routingControls = routingControls
    }
}

struct ListRoutingControlsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let routingControls: [Route53RecoveryControlConfigClientTypes.RoutingControl]?
}

extension ListRoutingControlsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case routingControls = "RoutingControls"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let routingControlsContainer = try containerValues.decodeIfPresent([Route53RecoveryControlConfigClientTypes.RoutingControl?].self, forKey: .routingControls)
        var routingControlsDecoded0:[Route53RecoveryControlConfigClientTypes.RoutingControl]? = nil
        if let routingControlsContainer = routingControlsContainer {
            routingControlsDecoded0 = [Route53RecoveryControlConfigClientTypes.RoutingControl]()
            for structure0 in routingControlsContainer {
                if let structure0 = structure0 {
                    routingControlsDecoded0?.append(structure0)
                }
            }
        }
        routingControls = routingControlsDecoded0
    }
}

extension ListSafetyRulesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if maxResults != 0 {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListSafetyRulesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let controlPanelArn = controlPanelArn else {
            return nil
        }
        return "/controlpanel/\(controlPanelArn.urlPercentEncoding())/safetyrules"
    }
}

public struct ListSafetyRulesInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the control panel.
    /// This member is required.
    public var controlPanelArn: Swift.String?
    /// The number of objects that you want to return with this call.
    public var maxResults: Swift.Int
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?

    public init (
        controlPanelArn: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.controlPanelArn = controlPanelArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListSafetyRulesInputBody: Swift.Equatable {
}

extension ListSafetyRulesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListSafetyRulesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSafetyRulesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListSafetyRulesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSafetyRulesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListSafetyRulesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.safetyRules = output.safetyRules
        } else {
            self.nextToken = nil
            self.safetyRules = nil
        }
    }
}

public struct ListSafetyRulesOutputResponse: Swift.Equatable {
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?
    /// The list of safety rules in a control panel.
    public var safetyRules: [Route53RecoveryControlConfigClientTypes.Rule]?

    public init (
        nextToken: Swift.String? = nil,
        safetyRules: [Route53RecoveryControlConfigClientTypes.Rule]? = nil
    )
    {
        self.nextToken = nextToken
        self.safetyRules = safetyRules
    }
}

struct ListSafetyRulesOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let safetyRules: [Route53RecoveryControlConfigClientTypes.Rule]?
}

extension ListSafetyRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case safetyRules = "SafetyRules"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let safetyRulesContainer = try containerValues.decodeIfPresent([Route53RecoveryControlConfigClientTypes.Rule?].self, forKey: .safetyRules)
        var safetyRulesDecoded0:[Route53RecoveryControlConfigClientTypes.Rule]? = nil
        if let safetyRulesContainer = safetyRulesContainer {
            safetyRulesDecoded0 = [Route53RecoveryControlConfigClientTypes.Rule]()
            for structure0 in safetyRulesContainer {
                if let structure0 = structure0 {
                    safetyRulesDecoded0?.append(structure0)
                }
            }
        }
        safetyRules = safetyRulesDecoded0
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) for the resource that's tagged.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
}

extension ListTagsForResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// The tags associated with the resource.
    public var tags: [Swift.String:Swift.String]?

    public init (
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __stringmin0max256patterns0) in tagsContainer {
                if let __stringmin0max256patterns0 = __stringmin0max256patterns0 {
                    tagsDecoded0?[key0] = __stringmin0max256patterns0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension Route53RecoveryControlConfigClientTypes.NewAssertionRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assertedControls = "AssertedControls"
        case controlPanelArn = "ControlPanelArn"
        case name = "Name"
        case ruleConfig = "RuleConfig"
        case waitPeriodMs = "WaitPeriodMs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assertedControls = assertedControls {
            var assertedControlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .assertedControls)
            for __stringmin1max256patternazaz090 in assertedControls {
                try assertedControlsContainer.encode(__stringmin1max256patternazaz090)
            }
        }
        if let controlPanelArn = self.controlPanelArn {
            try encodeContainer.encode(controlPanelArn, forKey: .controlPanelArn)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ruleConfig = self.ruleConfig {
            try encodeContainer.encode(ruleConfig, forKey: .ruleConfig)
        }
        if waitPeriodMs != 0 {
            try encodeContainer.encode(waitPeriodMs, forKey: .waitPeriodMs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assertedControlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .assertedControls)
        var assertedControlsDecoded0:[Swift.String]? = nil
        if let assertedControlsContainer = assertedControlsContainer {
            assertedControlsDecoded0 = [Swift.String]()
            for string0 in assertedControlsContainer {
                if let string0 = string0 {
                    assertedControlsDecoded0?.append(string0)
                }
            }
        }
        assertedControls = assertedControlsDecoded0
        let controlPanelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPanelArn)
        controlPanelArn = controlPanelArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ruleConfigDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.RuleConfig.self, forKey: .ruleConfig)
        ruleConfig = ruleConfigDecoded
        let waitPeriodMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .waitPeriodMs) ?? 0
        waitPeriodMs = waitPeriodMsDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes {
    /// A new assertion rule for a control panel.
    public struct NewAssertionRule: Swift.Equatable {
        /// The routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed. For example, you might include three routing controls, one for each of three Amazon Web Services Regions.
        /// This member is required.
        public var assertedControls: [Swift.String]?
        /// The Amazon Resource Name (ARN) for the control panel.
        /// This member is required.
        public var controlPanelArn: Swift.String?
        /// The name of the assertion rule. You can use any non-white space character in the name.
        /// This member is required.
        public var name: Swift.String?
        /// The criteria that you set for specific assertion controls (routing controls) that designate how many control states must be ON as the result of a transaction. For example, if you have three assertion controls, you might specify ATLEAST 2 for your rule configuration. This means that at least two assertion controls must be ON, so that at least two Amazon Web Services Regions have traffic flowing to them.
        /// This member is required.
        public var ruleConfig: Route53RecoveryControlConfigClientTypes.RuleConfig?
        /// An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.
        /// This member is required.
        public var waitPeriodMs: Swift.Int

        public init (
            assertedControls: [Swift.String]? = nil,
            controlPanelArn: Swift.String? = nil,
            name: Swift.String? = nil,
            ruleConfig: Route53RecoveryControlConfigClientTypes.RuleConfig? = nil,
            waitPeriodMs: Swift.Int = 0
        )
        {
            self.assertedControls = assertedControls
            self.controlPanelArn = controlPanelArn
            self.name = name
            self.ruleConfig = ruleConfig
            self.waitPeriodMs = waitPeriodMs
        }
    }

}

extension Route53RecoveryControlConfigClientTypes.NewGatingRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlPanelArn = "ControlPanelArn"
        case gatingControls = "GatingControls"
        case name = "Name"
        case ruleConfig = "RuleConfig"
        case targetControls = "TargetControls"
        case waitPeriodMs = "WaitPeriodMs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let controlPanelArn = self.controlPanelArn {
            try encodeContainer.encode(controlPanelArn, forKey: .controlPanelArn)
        }
        if let gatingControls = gatingControls {
            var gatingControlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gatingControls)
            for __stringmin1max256patternazaz090 in gatingControls {
                try gatingControlsContainer.encode(__stringmin1max256patternazaz090)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ruleConfig = self.ruleConfig {
            try encodeContainer.encode(ruleConfig, forKey: .ruleConfig)
        }
        if let targetControls = targetControls {
            var targetControlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetControls)
            for __stringmin1max256patternazaz090 in targetControls {
                try targetControlsContainer.encode(__stringmin1max256patternazaz090)
            }
        }
        if waitPeriodMs != 0 {
            try encodeContainer.encode(waitPeriodMs, forKey: .waitPeriodMs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let controlPanelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPanelArn)
        controlPanelArn = controlPanelArnDecoded
        let gatingControlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .gatingControls)
        var gatingControlsDecoded0:[Swift.String]? = nil
        if let gatingControlsContainer = gatingControlsContainer {
            gatingControlsDecoded0 = [Swift.String]()
            for string0 in gatingControlsContainer {
                if let string0 = string0 {
                    gatingControlsDecoded0?.append(string0)
                }
            }
        }
        gatingControls = gatingControlsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ruleConfigDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.RuleConfig.self, forKey: .ruleConfig)
        ruleConfig = ruleConfigDecoded
        let targetControlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targetControls)
        var targetControlsDecoded0:[Swift.String]? = nil
        if let targetControlsContainer = targetControlsContainer {
            targetControlsDecoded0 = [Swift.String]()
            for string0 in targetControlsContainer {
                if let string0 = string0 {
                    targetControlsDecoded0?.append(string0)
                }
            }
        }
        targetControls = targetControlsDecoded0
        let waitPeriodMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .waitPeriodMs) ?? 0
        waitPeriodMs = waitPeriodMsDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes {
    /// A new gating rule for a control panel.
    public struct NewGatingRule: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the control panel.
        /// This member is required.
        public var controlPanelArn: Swift.String?
        /// The gating controls for the new gating rule. That is, routing controls that are evaluated by the rule configuration that you specify.
        /// This member is required.
        public var gatingControls: [Swift.String]?
        /// The name for the new gating rule.
        /// This member is required.
        public var name: Swift.String?
        /// The criteria that you set for specific gating controls (routing controls) that designate how many control states must be ON to allow you to change (set or unset) the target control states.
        /// This member is required.
        public var ruleConfig: Route53RecoveryControlConfigClientTypes.RuleConfig?
        /// Routing controls that can only be set or unset if the specified RuleConfig evaluates to true for the specified GatingControls. For example, say you have three gating controls, one for each of three Amazon Web Services Regions. Now you specify ATLEAST 2 as your RuleConfig. With these settings, you can only change (set or unset) the routing controls that you have specified as TargetControls if that rule evaluates to true. In other words, your ability to change the routing controls that you have specified as TargetControls is gated by the rule that you set for the routing controls in GatingControls.
        /// This member is required.
        public var targetControls: [Swift.String]?
        /// An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.
        /// This member is required.
        public var waitPeriodMs: Swift.Int

        public init (
            controlPanelArn: Swift.String? = nil,
            gatingControls: [Swift.String]? = nil,
            name: Swift.String? = nil,
            ruleConfig: Route53RecoveryControlConfigClientTypes.RuleConfig? = nil,
            targetControls: [Swift.String]? = nil,
            waitPeriodMs: Swift.Int = 0
        )
        {
            self.controlPanelArn = controlPanelArn
            self.gatingControls = gatingControls
            self.name = name
            self.ruleConfig = ruleConfig
            self.targetControls = targetControls
            self.waitPeriodMs = waitPeriodMs
        }
    }

}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// 404 response - MalformedQueryString. The query string contains a syntax error or resource not found.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes.RoutingControl: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlPanelArn = "ControlPanelArn"
        case name = "Name"
        case routingControlArn = "RoutingControlArn"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let controlPanelArn = self.controlPanelArn {
            try encodeContainer.encode(controlPanelArn, forKey: .controlPanelArn)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let routingControlArn = self.routingControlArn {
            try encodeContainer.encode(routingControlArn, forKey: .routingControlArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let controlPanelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPanelArn)
        controlPanelArn = controlPanelArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let routingControlArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routingControlArn)
        routingControlArn = routingControlArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.Status.self, forKey: .status)
        status = statusDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes {
    /// A routing control has one of two states: ON and OFF. You can map the routing control state to the state of an Amazon Route 53 health check, which can be used to control traffic routing.
    public struct RoutingControl: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the control panel that includes the routing control.
        public var controlPanelArn: Swift.String?
        /// The name of the routing control.
        public var name: Swift.String?
        /// The Amazon Resource Name (ARN) of the routing control.
        public var routingControlArn: Swift.String?
        /// The deployment status of a routing control. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
        public var status: Route53RecoveryControlConfigClientTypes.Status?

        public init (
            controlPanelArn: Swift.String? = nil,
            name: Swift.String? = nil,
            routingControlArn: Swift.String? = nil,
            status: Route53RecoveryControlConfigClientTypes.Status? = nil
        )
        {
            self.controlPanelArn = controlPanelArn
            self.name = name
            self.routingControlArn = routingControlArn
            self.status = status
        }
    }

}

extension Route53RecoveryControlConfigClientTypes.Rule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assertion = "ASSERTION"
        case gating = "GATING"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assertion = self.assertion {
            try encodeContainer.encode(assertion, forKey: .assertion)
        }
        if let gating = self.gating {
            try encodeContainer.encode(gating, forKey: .gating)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assertionDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.AssertionRule.self, forKey: .assertion)
        assertion = assertionDecoded
        let gatingDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.GatingRule.self, forKey: .gating)
        gating = gatingDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes {
    /// A safety rule. A safety rule can be an assertion rule or a gating rule.
    public struct Rule: Swift.Equatable {
        /// An assertion rule enforces that, when a routing control state is changed, the criteria set by the rule configuration is met. Otherwise, the change to the routing control state is not accepted. For example, the criteria might be that at least one routing control state is On after the transaction so that traffic continues to flow to at least one cell for the application. This ensures that you avoid a fail-open scenario.
        public var assertion: Route53RecoveryControlConfigClientTypes.AssertionRule?
        /// A gating rule verifies that a gating routing control or set of gating routing controls, evaluates as true, based on a rule configuration that you specify, which allows a set of routing control state changes to complete. For example, if you specify one gating routing control and you set the Type in the rule configuration to OR, that indicates that you must set the gating routing control to On for the rule to evaluate as true; that is, for the gating control "switch" to be "On". When you do that, then you can update the routing control states for the target routing controls that you specify in the gating rule.
        public var gating: Route53RecoveryControlConfigClientTypes.GatingRule?

        public init (
            assertion: Route53RecoveryControlConfigClientTypes.AssertionRule? = nil,
            gating: Route53RecoveryControlConfigClientTypes.GatingRule? = nil
        )
        {
            self.assertion = assertion
            self.gating = gating
        }
    }

}

extension Route53RecoveryControlConfigClientTypes.RuleConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inverted = "Inverted"
        case threshold = "Threshold"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if inverted != false {
            try encodeContainer.encode(inverted, forKey: .inverted)
        }
        if threshold != 0 {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let invertedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .inverted) ?? false
        inverted = invertedDecoded
        let thresholdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .threshold) ?? 0
        threshold = thresholdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.RuleType.self, forKey: .type)
        type = typeDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes {
    /// The rule configuration for an assertion rule. That is, the criteria that you set for specific assertion controls (routing controls) that specify how many control states must be ON after a transaction completes.
    public struct RuleConfig: Swift.Equatable {
        /// Logical negation of the rule. If the rule would usually evaluate true, it's evaluated as false, and vice versa.
        /// This member is required.
        public var inverted: Swift.Bool
        /// The value of N, when you specify an ATLEAST rule type. That is, Threshold is the number of controls that must be set when you specify an ATLEAST type.
        /// This member is required.
        public var threshold: Swift.Int
        /// A rule can be one of the following: ATLEAST, AND, or OR.
        /// This member is required.
        public var type: Route53RecoveryControlConfigClientTypes.RuleType?

        public init (
            inverted: Swift.Bool = false,
            threshold: Swift.Int = 0,
            type: Route53RecoveryControlConfigClientTypes.RuleType? = nil
        )
        {
            self.inverted = inverted
            self.threshold = threshold
            self.type = type
        }
    }

}

extension Route53RecoveryControlConfigClientTypes {
    /// An enumerated type that determines how the evaluated rules are processed. RuleType can be one of the following: ATLEAST - At least N routing controls must be set. You specify N as the Threshold in the rule configuration. AND - All routing controls must be set. This is a shortcut for "At least N," where N is the total number of controls in the rule. OR - Any control must be set. This is a shortcut for "At least N," where N is 1.
    public enum RuleType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case and
        case atleast
        case or
        case sdkUnknown(Swift.String)

        public static var allCases: [RuleType] {
            return [
                .and,
                .atleast,
                .or,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .and: return "AND"
            case .atleast: return "ATLEAST"
            case .or: return "OR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RuleType(rawValue: rawValue) ?? RuleType.sdkUnknown(rawValue)
        }
    }
}

extension ServiceQuotaExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ServiceQuotaExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// 402 response - You attempted to create more resources than the service allows based on service quotas.
public struct ServiceQuotaExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceQuotaExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ServiceQuotaExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes {
    /// The deployment status of a resource. Status can be one of the following: PENDING: Amazon Route 53 Application Recovery Controller is creating the resource. DEPLOYED: The resource is deployed and ready to use. PENDING_DELETION: Amazon Route 53 Application Recovery Controller is deleting the resource.
    public enum Status: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deployed
        case pending
        case pendingDeletion
        case sdkUnknown(Swift.String)

        public static var allCases: [Status] {
            return [
                .deployed,
                .pending,
                .pendingDeletion,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deployed: return "DEPLOYED"
            case .pending: return "PENDING"
            case .pendingDeletion: return "PENDING_DELETION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Status(rawValue: rawValue) ?? Status.sdkUnknown(rawValue)
        }
    }
}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, __mapOf__stringMin0Max256PatternS0) in tags {
                try tagsContainer.encode(__mapOf__stringMin0Max256PatternS0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

/// Request of adding tag to the resource
public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) for the resource that's tagged.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags associated with the resource.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __stringmin0max256patterns0) in tagsContainer {
                if let __stringmin0max256patterns0 = __stringmin0max256patterns0 {
                    tagsDecoded0?[key0] = __stringmin0max256patterns0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension ThrottlingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// 429 response - LimitExceededException or TooManyRequestsException.
public struct ThrottlingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UntagResourceInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let tagKeys = tagKeys else {
                let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            tagKeys.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "TagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                items.append(queryItem)
            }
            return items
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) for the resource that's tagged.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Keys for the tags to be removed.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
}

extension UntagResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateControlPanelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlPanelArn = "ControlPanelArn"
        case controlPanelName = "ControlPanelName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let controlPanelArn = self.controlPanelArn {
            try encodeContainer.encode(controlPanelArn, forKey: .controlPanelArn)
        }
        if let controlPanelName = self.controlPanelName {
            try encodeContainer.encode(controlPanelName, forKey: .controlPanelName)
        }
    }
}

extension UpdateControlPanelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/controlpanel"
    }
}

/// The details of the control panel that you're updating.
public struct UpdateControlPanelInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the control panel.
    /// This member is required.
    public var controlPanelArn: Swift.String?
    /// The name of the control panel.
    /// This member is required.
    public var controlPanelName: Swift.String?

    public init (
        controlPanelArn: Swift.String? = nil,
        controlPanelName: Swift.String? = nil
    )
    {
        self.controlPanelArn = controlPanelArn
        self.controlPanelName = controlPanelName
    }
}

struct UpdateControlPanelInputBody: Swift.Equatable {
    let controlPanelArn: Swift.String?
    let controlPanelName: Swift.String?
}

extension UpdateControlPanelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlPanelArn = "ControlPanelArn"
        case controlPanelName = "ControlPanelName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let controlPanelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPanelArn)
        controlPanelArn = controlPanelArnDecoded
        let controlPanelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPanelName)
        controlPanelName = controlPanelNameDecoded
    }
}

extension UpdateControlPanelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateControlPanelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateControlPanelOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateControlPanelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateControlPanelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.controlPanel = output.controlPanel
        } else {
            self.controlPanel = nil
        }
    }
}

public struct UpdateControlPanelOutputResponse: Swift.Equatable {
    /// The control panel to update.
    public var controlPanel: Route53RecoveryControlConfigClientTypes.ControlPanel?

    public init (
        controlPanel: Route53RecoveryControlConfigClientTypes.ControlPanel? = nil
    )
    {
        self.controlPanel = controlPanel
    }
}

struct UpdateControlPanelOutputResponseBody: Swift.Equatable {
    let controlPanel: Route53RecoveryControlConfigClientTypes.ControlPanel?
}

extension UpdateControlPanelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlPanel = "ControlPanel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let controlPanelDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.ControlPanel.self, forKey: .controlPanel)
        controlPanel = controlPanelDecoded
    }
}

extension UpdateRoutingControlInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case routingControlArn = "RoutingControlArn"
        case routingControlName = "RoutingControlName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let routingControlArn = self.routingControlArn {
            try encodeContainer.encode(routingControlArn, forKey: .routingControlArn)
        }
        if let routingControlName = self.routingControlName {
            try encodeContainer.encode(routingControlName, forKey: .routingControlName)
        }
    }
}

extension UpdateRoutingControlInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/routingcontrol"
    }
}

/// The details of the routing control that you're updating.
public struct UpdateRoutingControlInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the routing control.
    /// This member is required.
    public var routingControlArn: Swift.String?
    /// The name of the routing control.
    /// This member is required.
    public var routingControlName: Swift.String?

    public init (
        routingControlArn: Swift.String? = nil,
        routingControlName: Swift.String? = nil
    )
    {
        self.routingControlArn = routingControlArn
        self.routingControlName = routingControlName
    }
}

struct UpdateRoutingControlInputBody: Swift.Equatable {
    let routingControlArn: Swift.String?
    let routingControlName: Swift.String?
}

extension UpdateRoutingControlInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case routingControlArn = "RoutingControlArn"
        case routingControlName = "RoutingControlName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routingControlArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routingControlArn)
        routingControlArn = routingControlArnDecoded
        let routingControlNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routingControlName)
        routingControlName = routingControlNameDecoded
    }
}

extension UpdateRoutingControlOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRoutingControlOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateRoutingControlOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRoutingControlOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateRoutingControlOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.routingControl = output.routingControl
        } else {
            self.routingControl = nil
        }
    }
}

public struct UpdateRoutingControlOutputResponse: Swift.Equatable {
    /// The routing control that was updated.
    public var routingControl: Route53RecoveryControlConfigClientTypes.RoutingControl?

    public init (
        routingControl: Route53RecoveryControlConfigClientTypes.RoutingControl? = nil
    )
    {
        self.routingControl = routingControl
    }
}

struct UpdateRoutingControlOutputResponseBody: Swift.Equatable {
    let routingControl: Route53RecoveryControlConfigClientTypes.RoutingControl?
}

extension UpdateRoutingControlOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case routingControl = "RoutingControl"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routingControlDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.RoutingControl.self, forKey: .routingControl)
        routingControl = routingControlDecoded
    }
}

extension UpdateSafetyRuleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assertionRuleUpdate = "AssertionRuleUpdate"
        case gatingRuleUpdate = "GatingRuleUpdate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assertionRuleUpdate = self.assertionRuleUpdate {
            try encodeContainer.encode(assertionRuleUpdate, forKey: .assertionRuleUpdate)
        }
        if let gatingRuleUpdate = self.gatingRuleUpdate {
            try encodeContainer.encode(gatingRuleUpdate, forKey: .gatingRuleUpdate)
        }
    }
}

extension UpdateSafetyRuleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/safetyrule"
    }
}

/// A rule that you add to Application Recovery Controller to ensure that recovery actions don't accidentally impair your application's availability.
public struct UpdateSafetyRuleInput: Swift.Equatable {
    /// The assertion rule to update.
    public var assertionRuleUpdate: Route53RecoveryControlConfigClientTypes.AssertionRuleUpdate?
    /// The gating rule to update.
    public var gatingRuleUpdate: Route53RecoveryControlConfigClientTypes.GatingRuleUpdate?

    public init (
        assertionRuleUpdate: Route53RecoveryControlConfigClientTypes.AssertionRuleUpdate? = nil,
        gatingRuleUpdate: Route53RecoveryControlConfigClientTypes.GatingRuleUpdate? = nil
    )
    {
        self.assertionRuleUpdate = assertionRuleUpdate
        self.gatingRuleUpdate = gatingRuleUpdate
    }
}

struct UpdateSafetyRuleInputBody: Swift.Equatable {
    let assertionRuleUpdate: Route53RecoveryControlConfigClientTypes.AssertionRuleUpdate?
    let gatingRuleUpdate: Route53RecoveryControlConfigClientTypes.GatingRuleUpdate?
}

extension UpdateSafetyRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assertionRuleUpdate = "AssertionRuleUpdate"
        case gatingRuleUpdate = "GatingRuleUpdate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assertionRuleUpdateDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.AssertionRuleUpdate.self, forKey: .assertionRuleUpdate)
        assertionRuleUpdate = assertionRuleUpdateDecoded
        let gatingRuleUpdateDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.GatingRuleUpdate.self, forKey: .gatingRuleUpdate)
        gatingRuleUpdate = gatingRuleUpdateDecoded
    }
}

extension UpdateSafetyRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateSafetyRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateSafetyRuleOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateSafetyRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateSafetyRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.assertionRule = output.assertionRule
            self.gatingRule = output.gatingRule
        } else {
            self.assertionRule = nil
            self.gatingRule = nil
        }
    }
}

public struct UpdateSafetyRuleOutputResponse: Swift.Equatable {
    /// The assertion rule updated.
    public var assertionRule: Route53RecoveryControlConfigClientTypes.AssertionRule?
    /// The gating rule updated.
    public var gatingRule: Route53RecoveryControlConfigClientTypes.GatingRule?

    public init (
        assertionRule: Route53RecoveryControlConfigClientTypes.AssertionRule? = nil,
        gatingRule: Route53RecoveryControlConfigClientTypes.GatingRule? = nil
    )
    {
        self.assertionRule = assertionRule
        self.gatingRule = gatingRule
    }
}

struct UpdateSafetyRuleOutputResponseBody: Swift.Equatable {
    let assertionRule: Route53RecoveryControlConfigClientTypes.AssertionRule?
    let gatingRule: Route53RecoveryControlConfigClientTypes.GatingRule?
}

extension UpdateSafetyRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assertionRule = "AssertionRule"
        case gatingRule = "GatingRule"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assertionRuleDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.AssertionRule.self, forKey: .assertionRule)
        assertionRule = assertionRuleDecoded
        let gatingRuleDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.GatingRule.self, forKey: .gatingRule)
        gatingRule = gatingRuleDecoded
    }
}

extension ValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// 400 response - Multiple causes. For example, you might have a malformed query string and input parameter might be out of range, or you might have used parameters together incorrectly.
public struct ValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}
