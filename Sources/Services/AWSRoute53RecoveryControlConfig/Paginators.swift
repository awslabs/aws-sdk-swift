// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Route53RecoveryControlConfigClient {
    /// Paginate over `[ListAssociatedRoute53HealthChecksOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAssociatedRoute53HealthChecksInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAssociatedRoute53HealthChecksOutputResponse`
    public func listAssociatedRoute53HealthChecksPaginated(input: ListAssociatedRoute53HealthChecksInput) -> ClientRuntime.PaginatorSequence<ListAssociatedRoute53HealthChecksInput, ListAssociatedRoute53HealthChecksOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAssociatedRoute53HealthChecksInput, ListAssociatedRoute53HealthChecksOutputResponse>(input: input, inputKey: \ListAssociatedRoute53HealthChecksInput.nextToken, outputKey: \ListAssociatedRoute53HealthChecksOutputResponse.nextToken, paginationFunction: self.listAssociatedRoute53HealthChecks(input:))
    }
}

extension ListAssociatedRoute53HealthChecksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAssociatedRoute53HealthChecksInput {
        return ListAssociatedRoute53HealthChecksInput(
            maxResults: self.maxResults,
            nextToken: token,
            routingControlArn: self.routingControlArn
        )}
}

extension PaginatorSequence where Input == ListAssociatedRoute53HealthChecksInput, Output == ListAssociatedRoute53HealthChecksOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listAssociatedRoute53HealthChecksPaginated`
    /// to access the nested member `[Swift.String]`
    /// - Returns: `[Swift.String]`
    public func healthCheckIds() async throws -> [Swift.String] {
        return try await self.asyncCompactMap { item in item.healthCheckIds }
    }
}
extension Route53RecoveryControlConfigClient {
    /// Paginate over `[ListClustersOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListClustersInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListClustersOutputResponse`
    public func listClustersPaginated(input: ListClustersInput) -> ClientRuntime.PaginatorSequence<ListClustersInput, ListClustersOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListClustersInput, ListClustersOutputResponse>(input: input, inputKey: \ListClustersInput.nextToken, outputKey: \ListClustersOutputResponse.nextToken, paginationFunction: self.listClusters(input:))
    }
}

extension ListClustersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListClustersInput {
        return ListClustersInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListClustersInput, Output == ListClustersOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listClustersPaginated`
    /// to access the nested member `[Route53RecoveryControlConfigClientTypes.Cluster]`
    /// - Returns: `[Route53RecoveryControlConfigClientTypes.Cluster]`
    public func clusters() async throws -> [Route53RecoveryControlConfigClientTypes.Cluster] {
        return try await self.asyncCompactMap { item in item.clusters }
    }
}
extension Route53RecoveryControlConfigClient {
    /// Paginate over `[ListControlPanelsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListControlPanelsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListControlPanelsOutputResponse`
    public func listControlPanelsPaginated(input: ListControlPanelsInput) -> ClientRuntime.PaginatorSequence<ListControlPanelsInput, ListControlPanelsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListControlPanelsInput, ListControlPanelsOutputResponse>(input: input, inputKey: \ListControlPanelsInput.nextToken, outputKey: \ListControlPanelsOutputResponse.nextToken, paginationFunction: self.listControlPanels(input:))
    }
}

extension ListControlPanelsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListControlPanelsInput {
        return ListControlPanelsInput(
            clusterArn: self.clusterArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListControlPanelsInput, Output == ListControlPanelsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listControlPanelsPaginated`
    /// to access the nested member `[Route53RecoveryControlConfigClientTypes.ControlPanel]`
    /// - Returns: `[Route53RecoveryControlConfigClientTypes.ControlPanel]`
    public func controlPanels() async throws -> [Route53RecoveryControlConfigClientTypes.ControlPanel] {
        return try await self.asyncCompactMap { item in item.controlPanels }
    }
}
extension Route53RecoveryControlConfigClient {
    /// Paginate over `[ListRoutingControlsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListRoutingControlsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListRoutingControlsOutputResponse`
    public func listRoutingControlsPaginated(input: ListRoutingControlsInput) -> ClientRuntime.PaginatorSequence<ListRoutingControlsInput, ListRoutingControlsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListRoutingControlsInput, ListRoutingControlsOutputResponse>(input: input, inputKey: \ListRoutingControlsInput.nextToken, outputKey: \ListRoutingControlsOutputResponse.nextToken, paginationFunction: self.listRoutingControls(input:))
    }
}

extension ListRoutingControlsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListRoutingControlsInput {
        return ListRoutingControlsInput(
            controlPanelArn: self.controlPanelArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListRoutingControlsInput, Output == ListRoutingControlsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listRoutingControlsPaginated`
    /// to access the nested member `[Route53RecoveryControlConfigClientTypes.RoutingControl]`
    /// - Returns: `[Route53RecoveryControlConfigClientTypes.RoutingControl]`
    public func routingControls() async throws -> [Route53RecoveryControlConfigClientTypes.RoutingControl] {
        return try await self.asyncCompactMap { item in item.routingControls }
    }
}
extension Route53RecoveryControlConfigClient {
    /// Paginate over `[ListSafetyRulesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListSafetyRulesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListSafetyRulesOutputResponse`
    public func listSafetyRulesPaginated(input: ListSafetyRulesInput) -> ClientRuntime.PaginatorSequence<ListSafetyRulesInput, ListSafetyRulesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListSafetyRulesInput, ListSafetyRulesOutputResponse>(input: input, inputKey: \ListSafetyRulesInput.nextToken, outputKey: \ListSafetyRulesOutputResponse.nextToken, paginationFunction: self.listSafetyRules(input:))
    }
}

extension ListSafetyRulesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSafetyRulesInput {
        return ListSafetyRulesInput(
            controlPanelArn: self.controlPanelArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListSafetyRulesInput, Output == ListSafetyRulesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listSafetyRulesPaginated`
    /// to access the nested member `[Route53RecoveryControlConfigClientTypes.Rule]`
    /// - Returns: `[Route53RecoveryControlConfigClientTypes.Rule]`
    public func safetyRules() async throws -> [Route53RecoveryControlConfigClientTypes.Rule] {
        return try await self.asyncCompactMap { item in item.safetyRules }
    }
}
