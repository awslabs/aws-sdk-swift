// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointSMSVoiceV2Client {
    /// Paginate over `[DescribeAccountAttributesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeAccountAttributesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeAccountAttributesOutput`
    public func describeAccountAttributesPaginated(input: DescribeAccountAttributesInput) -> ClientRuntime.PaginatorSequence<DescribeAccountAttributesInput, DescribeAccountAttributesOutput> {
        return ClientRuntime.PaginatorSequence<DescribeAccountAttributesInput, DescribeAccountAttributesOutput>(input: input, inputKey: \DescribeAccountAttributesInput.nextToken, outputKey: \DescribeAccountAttributesOutput.nextToken, paginationFunction: self.describeAccountAttributes(input:))
    }
}

extension DescribeAccountAttributesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeAccountAttributesInput {
        return DescribeAccountAttributesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeAccountAttributesInput, Output == DescribeAccountAttributesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `describeAccountAttributesPaginated`
    /// to access the nested member `[PinpointSMSVoiceV2ClientTypes.AccountAttribute]`
    /// - Returns: `[PinpointSMSVoiceV2ClientTypes.AccountAttribute]`
    public func accountAttributes() async throws -> [PinpointSMSVoiceV2ClientTypes.AccountAttribute] {
        return try await self.asyncCompactMap { item in item.accountAttributes }
    }
}
extension PinpointSMSVoiceV2Client {
    /// Paginate over `[DescribeAccountLimitsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeAccountLimitsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeAccountLimitsOutput`
    public func describeAccountLimitsPaginated(input: DescribeAccountLimitsInput) -> ClientRuntime.PaginatorSequence<DescribeAccountLimitsInput, DescribeAccountLimitsOutput> {
        return ClientRuntime.PaginatorSequence<DescribeAccountLimitsInput, DescribeAccountLimitsOutput>(input: input, inputKey: \DescribeAccountLimitsInput.nextToken, outputKey: \DescribeAccountLimitsOutput.nextToken, paginationFunction: self.describeAccountLimits(input:))
    }
}

extension DescribeAccountLimitsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeAccountLimitsInput {
        return DescribeAccountLimitsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeAccountLimitsInput, Output == DescribeAccountLimitsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `describeAccountLimitsPaginated`
    /// to access the nested member `[PinpointSMSVoiceV2ClientTypes.AccountLimit]`
    /// - Returns: `[PinpointSMSVoiceV2ClientTypes.AccountLimit]`
    public func accountLimits() async throws -> [PinpointSMSVoiceV2ClientTypes.AccountLimit] {
        return try await self.asyncCompactMap { item in item.accountLimits }
    }
}
extension PinpointSMSVoiceV2Client {
    /// Paginate over `[DescribeConfigurationSetsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeConfigurationSetsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeConfigurationSetsOutput`
    public func describeConfigurationSetsPaginated(input: DescribeConfigurationSetsInput) -> ClientRuntime.PaginatorSequence<DescribeConfigurationSetsInput, DescribeConfigurationSetsOutput> {
        return ClientRuntime.PaginatorSequence<DescribeConfigurationSetsInput, DescribeConfigurationSetsOutput>(input: input, inputKey: \DescribeConfigurationSetsInput.nextToken, outputKey: \DescribeConfigurationSetsOutput.nextToken, paginationFunction: self.describeConfigurationSets(input:))
    }
}

extension DescribeConfigurationSetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeConfigurationSetsInput {
        return DescribeConfigurationSetsInput(
            configurationSetNames: self.configurationSetNames,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeConfigurationSetsInput, Output == DescribeConfigurationSetsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `describeConfigurationSetsPaginated`
    /// to access the nested member `[PinpointSMSVoiceV2ClientTypes.ConfigurationSetInformation]`
    /// - Returns: `[PinpointSMSVoiceV2ClientTypes.ConfigurationSetInformation]`
    public func configurationSets() async throws -> [PinpointSMSVoiceV2ClientTypes.ConfigurationSetInformation] {
        return try await self.asyncCompactMap { item in item.configurationSets }
    }
}
extension PinpointSMSVoiceV2Client {
    /// Paginate over `[DescribeKeywordsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeKeywordsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeKeywordsOutput`
    public func describeKeywordsPaginated(input: DescribeKeywordsInput) -> ClientRuntime.PaginatorSequence<DescribeKeywordsInput, DescribeKeywordsOutput> {
        return ClientRuntime.PaginatorSequence<DescribeKeywordsInput, DescribeKeywordsOutput>(input: input, inputKey: \DescribeKeywordsInput.nextToken, outputKey: \DescribeKeywordsOutput.nextToken, paginationFunction: self.describeKeywords(input:))
    }
}

extension DescribeKeywordsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeKeywordsInput {
        return DescribeKeywordsInput(
            filters: self.filters,
            keywords: self.keywords,
            maxResults: self.maxResults,
            nextToken: token,
            originationIdentity: self.originationIdentity
        )}
}

extension PaginatorSequence where Input == DescribeKeywordsInput, Output == DescribeKeywordsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `describeKeywordsPaginated`
    /// to access the nested member `[PinpointSMSVoiceV2ClientTypes.KeywordInformation]`
    /// - Returns: `[PinpointSMSVoiceV2ClientTypes.KeywordInformation]`
    public func keywords() async throws -> [PinpointSMSVoiceV2ClientTypes.KeywordInformation] {
        return try await self.asyncCompactMap { item in item.keywords }
    }
}
extension PinpointSMSVoiceV2Client {
    /// Paginate over `[DescribeOptedOutNumbersOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeOptedOutNumbersInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeOptedOutNumbersOutput`
    public func describeOptedOutNumbersPaginated(input: DescribeOptedOutNumbersInput) -> ClientRuntime.PaginatorSequence<DescribeOptedOutNumbersInput, DescribeOptedOutNumbersOutput> {
        return ClientRuntime.PaginatorSequence<DescribeOptedOutNumbersInput, DescribeOptedOutNumbersOutput>(input: input, inputKey: \DescribeOptedOutNumbersInput.nextToken, outputKey: \DescribeOptedOutNumbersOutput.nextToken, paginationFunction: self.describeOptedOutNumbers(input:))
    }
}

extension DescribeOptedOutNumbersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeOptedOutNumbersInput {
        return DescribeOptedOutNumbersInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            optOutListName: self.optOutListName,
            optedOutNumbers: self.optedOutNumbers
        )}
}

extension PaginatorSequence where Input == DescribeOptedOutNumbersInput, Output == DescribeOptedOutNumbersOutput {
    /// This paginator transforms the `AsyncSequence` returned by `describeOptedOutNumbersPaginated`
    /// to access the nested member `[PinpointSMSVoiceV2ClientTypes.OptedOutNumberInformation]`
    /// - Returns: `[PinpointSMSVoiceV2ClientTypes.OptedOutNumberInformation]`
    public func optedOutNumbers() async throws -> [PinpointSMSVoiceV2ClientTypes.OptedOutNumberInformation] {
        return try await self.asyncCompactMap { item in item.optedOutNumbers }
    }
}
extension PinpointSMSVoiceV2Client {
    /// Paginate over `[DescribeOptOutListsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeOptOutListsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeOptOutListsOutput`
    public func describeOptOutListsPaginated(input: DescribeOptOutListsInput) -> ClientRuntime.PaginatorSequence<DescribeOptOutListsInput, DescribeOptOutListsOutput> {
        return ClientRuntime.PaginatorSequence<DescribeOptOutListsInput, DescribeOptOutListsOutput>(input: input, inputKey: \DescribeOptOutListsInput.nextToken, outputKey: \DescribeOptOutListsOutput.nextToken, paginationFunction: self.describeOptOutLists(input:))
    }
}

extension DescribeOptOutListsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeOptOutListsInput {
        return DescribeOptOutListsInput(
            maxResults: self.maxResults,
            nextToken: token,
            optOutListNames: self.optOutListNames
        )}
}

extension PaginatorSequence where Input == DescribeOptOutListsInput, Output == DescribeOptOutListsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `describeOptOutListsPaginated`
    /// to access the nested member `[PinpointSMSVoiceV2ClientTypes.OptOutListInformation]`
    /// - Returns: `[PinpointSMSVoiceV2ClientTypes.OptOutListInformation]`
    public func optOutLists() async throws -> [PinpointSMSVoiceV2ClientTypes.OptOutListInformation] {
        return try await self.asyncCompactMap { item in item.optOutLists }
    }
}
extension PinpointSMSVoiceV2Client {
    /// Paginate over `[DescribePhoneNumbersOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribePhoneNumbersInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribePhoneNumbersOutput`
    public func describePhoneNumbersPaginated(input: DescribePhoneNumbersInput) -> ClientRuntime.PaginatorSequence<DescribePhoneNumbersInput, DescribePhoneNumbersOutput> {
        return ClientRuntime.PaginatorSequence<DescribePhoneNumbersInput, DescribePhoneNumbersOutput>(input: input, inputKey: \DescribePhoneNumbersInput.nextToken, outputKey: \DescribePhoneNumbersOutput.nextToken, paginationFunction: self.describePhoneNumbers(input:))
    }
}

extension DescribePhoneNumbersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribePhoneNumbersInput {
        return DescribePhoneNumbersInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            phoneNumberIds: self.phoneNumberIds
        )}
}

extension PaginatorSequence where Input == DescribePhoneNumbersInput, Output == DescribePhoneNumbersOutput {
    /// This paginator transforms the `AsyncSequence` returned by `describePhoneNumbersPaginated`
    /// to access the nested member `[PinpointSMSVoiceV2ClientTypes.PhoneNumberInformation]`
    /// - Returns: `[PinpointSMSVoiceV2ClientTypes.PhoneNumberInformation]`
    public func phoneNumbers() async throws -> [PinpointSMSVoiceV2ClientTypes.PhoneNumberInformation] {
        return try await self.asyncCompactMap { item in item.phoneNumbers }
    }
}
extension PinpointSMSVoiceV2Client {
    /// Paginate over `[DescribePoolsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribePoolsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribePoolsOutput`
    public func describePoolsPaginated(input: DescribePoolsInput) -> ClientRuntime.PaginatorSequence<DescribePoolsInput, DescribePoolsOutput> {
        return ClientRuntime.PaginatorSequence<DescribePoolsInput, DescribePoolsOutput>(input: input, inputKey: \DescribePoolsInput.nextToken, outputKey: \DescribePoolsOutput.nextToken, paginationFunction: self.describePools(input:))
    }
}

extension DescribePoolsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribePoolsInput {
        return DescribePoolsInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            poolIds: self.poolIds
        )}
}

extension PaginatorSequence where Input == DescribePoolsInput, Output == DescribePoolsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `describePoolsPaginated`
    /// to access the nested member `[PinpointSMSVoiceV2ClientTypes.PoolInformation]`
    /// - Returns: `[PinpointSMSVoiceV2ClientTypes.PoolInformation]`
    public func pools() async throws -> [PinpointSMSVoiceV2ClientTypes.PoolInformation] {
        return try await self.asyncCompactMap { item in item.pools }
    }
}
extension PinpointSMSVoiceV2Client {
    /// Paginate over `[DescribeSenderIdsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeSenderIdsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeSenderIdsOutput`
    public func describeSenderIdsPaginated(input: DescribeSenderIdsInput) -> ClientRuntime.PaginatorSequence<DescribeSenderIdsInput, DescribeSenderIdsOutput> {
        return ClientRuntime.PaginatorSequence<DescribeSenderIdsInput, DescribeSenderIdsOutput>(input: input, inputKey: \DescribeSenderIdsInput.nextToken, outputKey: \DescribeSenderIdsOutput.nextToken, paginationFunction: self.describeSenderIds(input:))
    }
}

extension DescribeSenderIdsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeSenderIdsInput {
        return DescribeSenderIdsInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            senderIds: self.senderIds
        )}
}

extension PaginatorSequence where Input == DescribeSenderIdsInput, Output == DescribeSenderIdsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `describeSenderIdsPaginated`
    /// to access the nested member `[PinpointSMSVoiceV2ClientTypes.SenderIdInformation]`
    /// - Returns: `[PinpointSMSVoiceV2ClientTypes.SenderIdInformation]`
    public func senderIds() async throws -> [PinpointSMSVoiceV2ClientTypes.SenderIdInformation] {
        return try await self.asyncCompactMap { item in item.senderIds }
    }
}
extension PinpointSMSVoiceV2Client {
    /// Paginate over `[DescribeSpendLimitsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeSpendLimitsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeSpendLimitsOutput`
    public func describeSpendLimitsPaginated(input: DescribeSpendLimitsInput) -> ClientRuntime.PaginatorSequence<DescribeSpendLimitsInput, DescribeSpendLimitsOutput> {
        return ClientRuntime.PaginatorSequence<DescribeSpendLimitsInput, DescribeSpendLimitsOutput>(input: input, inputKey: \DescribeSpendLimitsInput.nextToken, outputKey: \DescribeSpendLimitsOutput.nextToken, paginationFunction: self.describeSpendLimits(input:))
    }
}

extension DescribeSpendLimitsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeSpendLimitsInput {
        return DescribeSpendLimitsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeSpendLimitsInput, Output == DescribeSpendLimitsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `describeSpendLimitsPaginated`
    /// to access the nested member `[PinpointSMSVoiceV2ClientTypes.SpendLimit]`
    /// - Returns: `[PinpointSMSVoiceV2ClientTypes.SpendLimit]`
    public func spendLimits() async throws -> [PinpointSMSVoiceV2ClientTypes.SpendLimit] {
        return try await self.asyncCompactMap { item in item.spendLimits }
    }
}
extension PinpointSMSVoiceV2Client {
    /// Paginate over `[ListPoolOriginationIdentitiesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListPoolOriginationIdentitiesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListPoolOriginationIdentitiesOutput`
    public func listPoolOriginationIdentitiesPaginated(input: ListPoolOriginationIdentitiesInput) -> ClientRuntime.PaginatorSequence<ListPoolOriginationIdentitiesInput, ListPoolOriginationIdentitiesOutput> {
        return ClientRuntime.PaginatorSequence<ListPoolOriginationIdentitiesInput, ListPoolOriginationIdentitiesOutput>(input: input, inputKey: \ListPoolOriginationIdentitiesInput.nextToken, outputKey: \ListPoolOriginationIdentitiesOutput.nextToken, paginationFunction: self.listPoolOriginationIdentities(input:))
    }
}

extension ListPoolOriginationIdentitiesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPoolOriginationIdentitiesInput {
        return ListPoolOriginationIdentitiesInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            poolId: self.poolId
        )}
}

extension PaginatorSequence where Input == ListPoolOriginationIdentitiesInput, Output == ListPoolOriginationIdentitiesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listPoolOriginationIdentitiesPaginated`
    /// to access the nested member `[PinpointSMSVoiceV2ClientTypes.OriginationIdentityMetadata]`
    /// - Returns: `[PinpointSMSVoiceV2ClientTypes.OriginationIdentityMetadata]`
    public func originationIdentities() async throws -> [PinpointSMSVoiceV2ClientTypes.OriginationIdentityMetadata] {
        return try await self.asyncCompactMap { item in item.originationIdentities }
    }
}
