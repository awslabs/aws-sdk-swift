// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime

/// Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio. Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.
public protocol NimbleClientProtocol {
    /// Accept EULAs.
    func acceptEulas(input: AcceptEulasInput) async throws -> AcceptEulasOutputResponse
    /// Create a launch profile.
    func createLaunchProfile(input: CreateLaunchProfileInput) async throws -> CreateLaunchProfileOutputResponse
    /// Creates a streaming image resource in a studio.
    func createStreamingImage(input: CreateStreamingImageInput) async throws -> CreateStreamingImageOutputResponse
    /// Creates a streaming session in a studio. After invoking this operation, you must poll GetStreamingSession until the streaming session is in the READY state.
    func createStreamingSession(input: CreateStreamingSessionInput) async throws -> CreateStreamingSessionOutputResponse
    /// Creates a streaming session stream for a streaming session. After invoking this API, invoke GetStreamingSessionStream with the returned streamId to poll the resource until it is in the READY state.
    func createStreamingSessionStream(input: CreateStreamingSessionStreamInput) async throws -> CreateStreamingSessionStreamOutputResponse
    /// Create a new studio. When creating a studio, two IAM roles must be provided: the admin role and the user role. These roles are assumed by your users when they log in to the Nimble Studio portal. The user role must have the AmazonNimbleStudio-StudioUser managed policy attached for the portal to function properly. The admin role must have the AmazonNimbleStudio-StudioAdmin managed policy attached for the portal to function properly. You may optionally specify a KMS key in the StudioEncryptionConfiguration. In Nimble Studio, resource names, descriptions, initialization scripts, and other data you provide are always encrypted at rest using an KMS key. By default, this key is owned by Amazon Web Services and managed on your behalf. You may provide your own KMS key when calling CreateStudio to encrypt this data using a key you own and manage. When providing an KMS key during studio creation, Nimble Studio creates KMS grants in your account to provide your studio user and admin roles access to these KMS keys. If you delete this grant, the studio will no longer be accessible to your portal users. If you delete the studio KMS key, your studio will no longer be accessible.
    func createStudio(input: CreateStudioInput) async throws -> CreateStudioOutputResponse
    /// Creates a studio component resource.
    func createStudioComponent(input: CreateStudioComponentInput) async throws -> CreateStudioComponentOutputResponse
    /// Permanently delete a launch profile.
    func deleteLaunchProfile(input: DeleteLaunchProfileInput) async throws -> DeleteLaunchProfileOutputResponse
    /// Delete a user from launch profile membership.
    func deleteLaunchProfileMember(input: DeleteLaunchProfileMemberInput) async throws -> DeleteLaunchProfileMemberOutputResponse
    /// Delete streaming image.
    func deleteStreamingImage(input: DeleteStreamingImageInput) async throws -> DeleteStreamingImageOutputResponse
    /// Deletes streaming session resource. After invoking this operation, use GetStreamingSession to poll the resource until it transitions to a DELETED state. A streaming session will count against your streaming session quota until it is marked DELETED.
    func deleteStreamingSession(input: DeleteStreamingSessionInput) async throws -> DeleteStreamingSessionOutputResponse
    /// Delete a studio resource.
    func deleteStudio(input: DeleteStudioInput) async throws -> DeleteStudioOutputResponse
    /// Deletes a studio component resource.
    func deleteStudioComponent(input: DeleteStudioComponentInput) async throws -> DeleteStudioComponentOutputResponse
    /// Delete a user from studio membership.
    func deleteStudioMember(input: DeleteStudioMemberInput) async throws -> DeleteStudioMemberOutputResponse
    /// Get EULA.
    func getEula(input: GetEulaInput) async throws -> GetEulaOutputResponse
    /// Get a launch profile.
    func getLaunchProfile(input: GetLaunchProfileInput) async throws -> GetLaunchProfileOutputResponse
    /// Launch profile details include the launch profile resource and summary information of resources that are used by, or available to, the launch profile. This includes the name and description of all studio components used by the launch profiles, and the name and description of streaming images that can be used with this launch profile.
    func getLaunchProfileDetails(input: GetLaunchProfileDetailsInput) async throws -> GetLaunchProfileDetailsOutputResponse
    /// Get a launch profile initialization.
    func getLaunchProfileInitialization(input: GetLaunchProfileInitializationInput) async throws -> GetLaunchProfileInitializationOutputResponse
    /// Get a user persona in launch profile membership.
    func getLaunchProfileMember(input: GetLaunchProfileMemberInput) async throws -> GetLaunchProfileMemberOutputResponse
    /// Get streaming image.
    func getStreamingImage(input: GetStreamingImageInput) async throws -> GetStreamingImageOutputResponse
    /// Gets StreamingSession resource. Invoke this operation to poll for a streaming session state while creating or deleting a session.
    func getStreamingSession(input: GetStreamingSessionInput) async throws -> GetStreamingSessionOutputResponse
    /// Gets StreamingSessionBackup resource. Invoke this operation to poll for a streaming session backup while stopping a streaming session.
    func getStreamingSessionBackup(input: GetStreamingSessionBackupInput) async throws -> GetStreamingSessionBackupOutputResponse
    /// Gets a StreamingSessionStream for a streaming session. Invoke this operation to poll the resource after invoking CreateStreamingSessionStream. After the StreamingSessionStream changes to the READY state, the url property will contain a stream to be used with the DCV streaming client.
    func getStreamingSessionStream(input: GetStreamingSessionStreamInput) async throws -> GetStreamingSessionStreamOutputResponse
    /// Get a studio resource.
    func getStudio(input: GetStudioInput) async throws -> GetStudioOutputResponse
    /// Gets a studio component resource.
    func getStudioComponent(input: GetStudioComponentInput) async throws -> GetStudioComponentOutputResponse
    /// Get a user's membership in a studio.
    func getStudioMember(input: GetStudioMemberInput) async throws -> GetStudioMemberOutputResponse
    /// List EULA acceptances.
    func listEulaAcceptances(input: ListEulaAcceptancesInput) async throws -> ListEulaAcceptancesOutputResponse
    /// List EULAs.
    func listEulas(input: ListEulasInput) async throws -> ListEulasOutputResponse
    /// Get all users in a given launch profile membership.
    func listLaunchProfileMembers(input: ListLaunchProfileMembersInput) async throws -> ListLaunchProfileMembersOutputResponse
    /// List all the launch profiles a studio.
    func listLaunchProfiles(input: ListLaunchProfilesInput) async throws -> ListLaunchProfilesOutputResponse
    /// List the streaming image resources available to this studio. This list will contain both images provided by Amazon Web Services, as well as streaming images that you have created in your studio.
    func listStreamingImages(input: ListStreamingImagesInput) async throws -> ListStreamingImagesOutputResponse
    /// Lists the backups of a streaming session in a studio.
    func listStreamingSessionBackups(input: ListStreamingSessionBackupsInput) async throws -> ListStreamingSessionBackupsOutputResponse
    /// Lists the streaming sessions in a studio.
    func listStreamingSessions(input: ListStreamingSessionsInput) async throws -> ListStreamingSessionsOutputResponse
    /// Lists the StudioComponents in a studio.
    func listStudioComponents(input: ListStudioComponentsInput) async throws -> ListStudioComponentsOutputResponse
    /// Get all users in a given studio membership. ListStudioMembers only returns admin members.
    func listStudioMembers(input: ListStudioMembersInput) async throws -> ListStudioMembersOutputResponse
    /// List studios in your Amazon Web Services accounts in the requested Amazon Web Services Region.
    func listStudios(input: ListStudiosInput) async throws -> ListStudiosOutputResponse
    /// Gets the tags for a resource, given its Amazon Resource Names (ARN). This operation supports ARNs for all resource types in Nimble Studio that support tags, including studio, studio component, launch profile, streaming image, and streaming session. All resources that can be tagged will contain an ARN property, so you do not have to create this ARN yourself.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    /// Add/update users with given persona to launch profile membership.
    func putLaunchProfileMembers(input: PutLaunchProfileMembersInput) async throws -> PutLaunchProfileMembersOutputResponse
    /// Add/update users with given persona to studio membership.
    func putStudioMembers(input: PutStudioMembersInput) async throws -> PutStudioMembersOutputResponse
    /// Transitions sessions from the STOPPED state into the READY state. The START_IN_PROGRESS state is the intermediate state between the STOPPED and READY states.
    func startStreamingSession(input: StartStreamingSessionInput) async throws -> StartStreamingSessionOutputResponse
    /// Repairs the IAM Identity Center configuration for a given studio. If the studio has a valid IAM Identity Center configuration currently associated with it, this operation will fail with a validation error. If the studio does not have a valid IAM Identity Center configuration currently associated with it, then a new IAM Identity Center application is created for the studio and the studio is changed to the READY state. After the IAM Identity Center application is repaired, you must use the Amazon Nimble Studio console to add administrators and users to your studio.
    func startStudioSSOConfigurationRepair(input: StartStudioSSOConfigurationRepairInput) async throws -> StartStudioSSOConfigurationRepairOutputResponse
    /// Transitions sessions from the READY state into the STOPPED state. The STOP_IN_PROGRESS state is the intermediate state between the READY and STOPPED states.
    func stopStreamingSession(input: StopStreamingSessionInput) async throws -> StopStreamingSessionOutputResponse
    /// Creates tags for a resource, given its ARN.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    /// Deletes the tags for a resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    /// Update a launch profile.
    func updateLaunchProfile(input: UpdateLaunchProfileInput) async throws -> UpdateLaunchProfileOutputResponse
    /// Update a user persona in launch profile membership.
    func updateLaunchProfileMember(input: UpdateLaunchProfileMemberInput) async throws -> UpdateLaunchProfileMemberOutputResponse
    /// Update streaming image.
    func updateStreamingImage(input: UpdateStreamingImageInput) async throws -> UpdateStreamingImageOutputResponse
    /// Update a Studio resource. Currently, this operation only supports updating the displayName of your studio.
    func updateStudio(input: UpdateStudioInput) async throws -> UpdateStudioOutputResponse
    /// Updates a studio component resource.
    func updateStudioComponent(input: UpdateStudioComponentInput) async throws -> UpdateStudioComponentOutputResponse
}

public protocol NimbleClientConfigurationProtocol : AWSClientRuntime.AWSClientConfiguration {
    var endpointResolver: EndpointResolver { get }
}

public enum NimbleClientTypes {}
