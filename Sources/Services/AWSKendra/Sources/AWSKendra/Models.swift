//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class ClientRuntime.Indirect
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.listReadingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.Document
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter


public struct ClearQuerySuggestionsOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteDataSourceOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteFaqOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteIndexOutput: Swift.Sendable {

    public init() { }
}

public struct DeletePrincipalMappingOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteQuerySuggestionsBlockListOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteThesaurusOutput: Swift.Sendable {

    public init() { }
}

public struct PutPrincipalMappingOutput: Swift.Sendable {

    public init() { }
}

public struct StopDataSourceSyncJobOutput: Swift.Sendable {

    public init() { }
}

public struct SubmitFeedbackOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateDataSourceOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateExperienceOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateIndexOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateQuerySuggestionsBlockListOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateQuerySuggestionsConfigOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateThesaurusOutput: Swift.Sendable {

    public init() { }
}

extension KendraClientTypes {

    /// Summary information on an access control configuration that you created for your documents in an index.
    public struct AccessControlConfigurationSummary: Swift.Sendable {
        /// The identifier of the access control configuration.
        /// This member is required.
        public var id: Swift.String?

        public init(
            id: Swift.String? = nil
        )
        {
            self.id = id
        }
    }
}

extension KendraClientTypes {

    /// Access Control List files for the documents in a data source. For the format of the file, see [Access control for S3 data sources](https://docs.aws.amazon.com/kendra/latest/dg/s3-acl.html).
    public struct AccessControlListConfiguration: Swift.Sendable {
        /// Path to the Amazon S3 bucket that contains the ACL files.
        public var keyPath: Swift.String?

        public init(
            keyPath: Swift.String? = nil
        )
        {
            self.keyPath = keyPath
        }
    }
}

/// You don't have sufficient access to perform this action. Please ensure you have the required permission policies and user accounts and try again.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension KendraClientTypes {

    /// Provides information about the column that should be used for filtering the query response by groups.
    public struct AclConfiguration: Swift.Sendable {
        /// A list of groups, separated by semi-colons, that filters a query response based on user context. The document is only returned to users that are in one of the groups specified in the UserContext field of the Query API.
        /// This member is required.
        public var allowedGroupsColumnName: Swift.String?

        public init(
            allowedGroupsColumnName: Swift.String? = nil
        )
        {
            self.allowedGroupsColumnName = allowedGroupsColumnName
        }
    }
}

extension KendraClientTypes {

    public enum HighlightType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case standard
        case thesaurusSynonym
        case sdkUnknown(Swift.String)

        public static var allCases: [HighlightType] {
            return [
                .standard,
                .thesaurusSynonym
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .standard: return "STANDARD"
            case .thesaurusSynonym: return "THESAURUS_SYNONYM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides information that you can use to highlight a search result so that your users can quickly identify terms in the response.
    public struct Highlight: Swift.Sendable {
        /// The zero-based location in the response string where the highlight starts.
        /// This member is required.
        public var beginOffset: Swift.Int?
        /// The zero-based location in the response string where the highlight ends.
        /// This member is required.
        public var endOffset: Swift.Int?
        /// Indicates whether the response is the best response. True if this is the best response; otherwise, false.
        public var topAnswer: Swift.Bool
        /// The highlight type.
        public var type: KendraClientTypes.HighlightType?

        public init(
            beginOffset: Swift.Int? = nil,
            endOffset: Swift.Int? = nil,
            topAnswer: Swift.Bool = false,
            type: KendraClientTypes.HighlightType? = nil
        )
        {
            self.beginOffset = beginOffset
            self.endOffset = endOffset
            self.topAnswer = topAnswer
            self.type = type
        }
    }
}

extension KendraClientTypes {

    /// Provides text and information about where to highlight the text.
    public struct TextWithHighlights: Swift.Sendable {
        /// The beginning and end of the text that should be highlighted.
        public var highlights: [KendraClientTypes.Highlight]?
        /// The text to display to the user.
        public var text: Swift.String?

        public init(
            highlights: [KendraClientTypes.Highlight]? = nil,
            text: Swift.String? = nil
        )
        {
            self.highlights = highlights
            self.text = text
        }
    }
}

extension KendraClientTypes {

    /// An attribute returned with a document from a search.
    public struct AdditionalResultAttributeValue: Swift.Sendable {
        /// The text associated with the attribute and information about the highlight to apply to the text.
        public var textWithHighlightsValue: KendraClientTypes.TextWithHighlights?

        public init(
            textWithHighlightsValue: KendraClientTypes.TextWithHighlights? = nil
        )
        {
            self.textWithHighlightsValue = textWithHighlightsValue
        }
    }
}

extension KendraClientTypes {

    public enum AdditionalResultAttributeValueType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case textWithHighlightsValue
        case sdkUnknown(Swift.String)

        public static var allCases: [AdditionalResultAttributeValueType] {
            return [
                .textWithHighlightsValue
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .textWithHighlightsValue: return "TEXT_WITH_HIGHLIGHTS_VALUE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// An attribute returned from an index query.
    public struct AdditionalResultAttribute: Swift.Sendable {
        /// The key that identifies the attribute.
        /// This member is required.
        public var key: Swift.String?
        /// An object that contains the attribute value.
        /// This member is required.
        public var value: KendraClientTypes.AdditionalResultAttributeValue?
        /// The data type of the Value property.
        /// This member is required.
        public var valueType: KendraClientTypes.AdditionalResultAttributeValueType?

        public init(
            key: Swift.String? = nil,
            value: KendraClientTypes.AdditionalResultAttributeValue? = nil,
            valueType: KendraClientTypes.AdditionalResultAttributeValueType? = nil
        )
        {
            self.key = key
            self.value = value
            self.valueType = valueType
        }
    }
}

extension KendraClientTypes {

    /// Maps attributes or field names of the documents synced from the data source to Amazon Kendra index field names. You can set up field mappings for each data source when calling [CreateDataSource](https://docs.aws.amazon.com/kendra/latest/APIReference/API_CreateDataSource.html) or [UpdateDataSource](https://docs.aws.amazon.com/kendra/latest/APIReference/API_UpdateDataSource.html) API. To create custom fields, use the UpdateIndex API to first create an index field and then map to the data source field. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html).
    public struct DataSourceToIndexFieldMapping: Swift.Sendable {
        /// The name of the field in the data source. You must first create the index field using the UpdateIndex API.
        /// This member is required.
        public var dataSourceFieldName: Swift.String?
        /// The format for date fields in the data source. If the field specified in DataSourceFieldName is a date field, you must specify the date format. If the field is not a date field, an exception is thrown.
        public var dateFieldFormat: Swift.String?
        /// The name of the index field to map to the data source field. The index field type must match the data source field type.
        /// This member is required.
        public var indexFieldName: Swift.String?

        public init(
            dataSourceFieldName: Swift.String? = nil,
            dateFieldFormat: Swift.String? = nil,
            indexFieldName: Swift.String? = nil
        )
        {
            self.dataSourceFieldName = dataSourceFieldName
            self.dateFieldFormat = dateFieldFormat
            self.indexFieldName = indexFieldName
        }
    }
}

extension KendraClientTypes {

    public enum AlfrescoEntity: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case blog
        case documentlibrary
        case wiki
        case sdkUnknown(Swift.String)

        public static var allCases: [AlfrescoEntity] {
            return [
                .blog,
                .documentlibrary,
                .wiki
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .blog: return "blog"
            case .documentlibrary: return "documentLibrary"
            case .wiki: return "wiki"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Information required to find a specific file in an Amazon S3 bucket.
    public struct S3Path: Swift.Sendable {
        /// The name of the S3 bucket that contains the file.
        /// This member is required.
        public var bucket: Swift.String?
        /// The name of the file.
        /// This member is required.
        public var key: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            key: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.key = key
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to connect to an Amazon VPC.
    public struct DataSourceVpcConfiguration: Swift.Sendable {
        /// A list of identifiers of security groups within your Amazon VPC. The security groups should enable Amazon Kendra to connect to the data source.
        /// This member is required.
        public var securityGroupIds: [Swift.String]?
        /// A list of identifiers for subnets within your Amazon VPC. The subnets should be able to connect to each other in the VPC, and they should have outgoing access to the Internet through a NAT device.
        /// This member is required.
        public var subnetIds: [Swift.String]?

        public init(
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to connect to Alfresco as your data source. Support for AlfrescoConfiguration ended May 2023. We recommend migrating to or using the Alfresco data source template schema / [TemplateConfiguration](https://docs.aws.amazon.com/kendra/latest/APIReference/API_TemplateConfiguration.html) API.
    public struct AlfrescoConfiguration: Swift.Sendable {
        /// A list of DataSourceToIndexFieldMapping objects that map attributes or field names of Alfresco blogs to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Alfresco fields. For more information, see [ Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Alfresco data source field names must exist in your Alfresco custom metadata.
        public var blogFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// TRUE to index comments of blogs and other content.
        public var crawlComments: Swift.Bool
        /// TRUE to index shared files.
        public var crawlSystemFolders: Swift.Bool
        /// A list of DataSourceToIndexFieldMapping objects that map attributes or field names of Alfresco document libraries to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Alfresco fields. For more information, see [ Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Alfresco data source field names must exist in your Alfresco custom metadata.
        public var documentLibraryFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// Specify whether to index document libraries, wikis, or blogs. You can specify one or more of these options.
        public var entityFilter: [KendraClientTypes.AlfrescoEntity]?
        /// A list of regular expression patterns to exclude certain files in your Alfresco data source. Files that match the patterns are excluded from the index. Files that don't match the patterns are included in the index. If a file matches both an inclusion pattern and an exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.
        public var exclusionPatterns: [Swift.String]?
        /// A list of regular expression patterns to include certain files in your Alfresco data source. Files that match the patterns are included in the index. Files that don't match the patterns are excluded from the index. If a file matches both an inclusion pattern and an exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.
        public var inclusionPatterns: [Swift.String]?
        /// The Amazon Resource Name (ARN) of an Secrets Manager secret that contains the key-value pairs required to connect to your Alfresco data source. The secret must contain a JSON structure with the following keys:
        ///
        /// * username—The user name of the Alfresco account.
        ///
        /// * password—The password of the Alfresco account.
        /// This member is required.
        public var secretArn: Swift.String?
        /// The identifier of the Alfresco site. For example, my-site.
        /// This member is required.
        public var siteId: Swift.String?
        /// The URL of the Alfresco site. For example, https://hostname:8080.
        /// This member is required.
        public var siteUrl: Swift.String?
        /// The path to the SSL certificate stored in an Amazon S3 bucket. You use this to connect to Alfresco if you require a secure SSL connection. You can simply generate a self-signed X509 certificate on any computer using OpenSSL. For an example of using OpenSSL to create an X509 certificate, see [Create and sign an X509 certificate](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/configuring-https-ssl.html).
        /// This member is required.
        public var sslCertificateS3Path: KendraClientTypes.S3Path?
        /// Configuration information for an Amazon Virtual Private Cloud to connect to your Alfresco. For more information, see [Configuring a VPC](https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html).
        public var vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration?
        /// A list of DataSourceToIndexFieldMapping objects that map attributes or field names of Alfresco wikis to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Alfresco fields. For more information, see [ Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Alfresco data source field names must exist in your Alfresco custom metadata.
        public var wikiFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?

        public init(
            blogFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            crawlComments: Swift.Bool = false,
            crawlSystemFolders: Swift.Bool = false,
            documentLibraryFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            entityFilter: [KendraClientTypes.AlfrescoEntity]? = nil,
            exclusionPatterns: [Swift.String]? = nil,
            inclusionPatterns: [Swift.String]? = nil,
            secretArn: Swift.String? = nil,
            siteId: Swift.String? = nil,
            siteUrl: Swift.String? = nil,
            sslCertificateS3Path: KendraClientTypes.S3Path? = nil,
            vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration? = nil,
            wikiFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        )
        {
            self.blogFieldMappings = blogFieldMappings
            self.crawlComments = crawlComments
            self.crawlSystemFolders = crawlSystemFolders
            self.documentLibraryFieldMappings = documentLibraryFieldMappings
            self.entityFilter = entityFilter
            self.exclusionPatterns = exclusionPatterns
            self.inclusionPatterns = inclusionPatterns
            self.secretArn = secretArn
            self.siteId = siteId
            self.siteUrl = siteUrl
            self.sslCertificateS3Path = sslCertificateS3Path
            self.vpcConfiguration = vpcConfiguration
            self.wikiFieldMappings = wikiFieldMappings
        }
    }
}

/// An issue occurred with the internal server used for your Amazon Kendra service. Please wait a few minutes and try again, or contact [Support](http://aws.amazon.com/contact-us/) for help.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource you want to use already exists. Please check you have provided the correct resource and try again.
public struct ResourceAlreadyExistException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceAlreadyExistException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource you want to use doesn’t exist. Please check you have provided the correct resource and try again.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was denied due to request throttling. Please reduce the number of requests and try again.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The input fails to satisfy the constraints set by the Amazon Kendra service. Please provide the correct input and try again.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension KendraClientTypes {

    public enum EntityType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case group
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [EntityType] {
            return [
                .group,
                .user
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .group: return "GROUP"
            case .user: return "USER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for users or groups in your IAM Identity Center identity source to grant access your Amazon Kendra experience.
    public struct EntityConfiguration: Swift.Sendable {
        /// The identifier of a user or group in your IAM Identity Center identity source. For example, a user ID could be an email.
        /// This member is required.
        public var entityId: Swift.String?
        /// Specifies whether you are configuring a User or a Group.
        /// This member is required.
        public var entityType: KendraClientTypes.EntityType?

        public init(
            entityId: Swift.String? = nil,
            entityType: KendraClientTypes.EntityType? = nil
        )
        {
            self.entityId = entityId
            self.entityType = entityType
        }
    }
}

public struct AssociateEntitiesToExperienceInput: Swift.Sendable {
    /// Lists users or groups in your IAM Identity Center identity source.
    /// This member is required.
    public var entityList: [KendraClientTypes.EntityConfiguration]?
    /// The identifier of your Amazon Kendra experience.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for your Amazon Kendra experience.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        entityList: [KendraClientTypes.EntityConfiguration]? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.entityList = entityList
        self.id = id
        self.indexId = indexId
    }
}

extension KendraClientTypes {

    /// Information on the users or groups in your IAM Identity Center identity source that failed to properly configure with your Amazon Kendra experience.
    public struct FailedEntity: Swift.Sendable {
        /// The identifier of the user or group in your IAM Identity Center identity source. For example, a user ID could be an email.
        public var entityId: Swift.String?
        /// The reason the user or group in your IAM Identity Center identity source failed to properly configure with your Amazon Kendra experience.
        public var errorMessage: Swift.String?

        public init(
            entityId: Swift.String? = nil,
            errorMessage: Swift.String? = nil
        )
        {
            self.entityId = entityId
            self.errorMessage = errorMessage
        }
    }
}

public struct AssociateEntitiesToExperienceOutput: Swift.Sendable {
    /// Lists the users or groups in your IAM Identity Center identity source that failed to properly configure with your Amazon Kendra experience.
    public var failedEntityList: [KendraClientTypes.FailedEntity]?

    public init(
        failedEntityList: [KendraClientTypes.FailedEntity]? = nil
    )
    {
        self.failedEntityList = failedEntityList
    }
}

extension KendraClientTypes {

    public enum Persona: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case owner
        case viewer
        case sdkUnknown(Swift.String)

        public static var allCases: [Persona] {
            return [
                .owner,
                .viewer
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .owner: return "OWNER"
            case .viewer: return "VIEWER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for users or groups in your IAM Identity Center identity source for access to your Amazon Kendra experience. Specific permissions are defined for each user or group once they are granted access to your Amazon Kendra experience.
    public struct EntityPersonaConfiguration: Swift.Sendable {
        /// The identifier of a user or group in your IAM Identity Center identity source. For example, a user ID could be an email.
        /// This member is required.
        public var entityId: Swift.String?
        /// The persona that defines the specific permissions of the user or group in your IAM Identity Center identity source. The available personas or access roles are Owner and Viewer. For more information on these personas, see [Providing access to your search page](https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html#access-search-experience).
        /// This member is required.
        public var persona: KendraClientTypes.Persona?

        public init(
            entityId: Swift.String? = nil,
            persona: KendraClientTypes.Persona? = nil
        )
        {
            self.entityId = entityId
            self.persona = persona
        }
    }
}

public struct AssociatePersonasToEntitiesInput: Swift.Sendable {
    /// The identifier of your Amazon Kendra experience.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for your Amazon Kendra experience.
    /// This member is required.
    public var indexId: Swift.String?
    /// The personas that define the specific permissions of users or groups in your IAM Identity Center identity source. The available personas or access roles are Owner and Viewer. For more information on these personas, see [Providing access to your search page](https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html#access-search-experience).
    /// This member is required.
    public var personas: [KendraClientTypes.EntityPersonaConfiguration]?

    public init(
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        personas: [KendraClientTypes.EntityPersonaConfiguration]? = nil
    )
    {
        self.id = id
        self.indexId = indexId
        self.personas = personas
    }
}

public struct AssociatePersonasToEntitiesOutput: Swift.Sendable {
    /// Lists the users or groups in your IAM Identity Center identity source that failed to properly configure with your Amazon Kendra experience.
    public var failedEntityList: [KendraClientTypes.FailedEntity]?

    public init(
        failedEntityList: [KendraClientTypes.FailedEntity]? = nil
    )
    {
        self.failedEntityList = failedEntityList
    }
}

extension KendraClientTypes {

    /// The value of a document attribute. You can only provide one value for a document attribute.
    public struct DocumentAttributeValue: Swift.Sendable {
        /// A date expressed as an ISO 8601 string. It is important for the time zone to be included in the ISO 8601 date-time format. For example, 2012-03-25T12:30:10+01:00 is the ISO 8601 date-time format for March 25th 2012 at 12:30PM (plus 10 seconds) in Central European Time.
        public var dateValue: Foundation.Date?
        /// A long integer value.
        public var longValue: Swift.Int?
        /// A list of strings. The default maximum length or number of strings is 10.
        public var stringListValue: [Swift.String]?
        /// A string, such as "department".
        public var stringValue: Swift.String?

        public init(
            dateValue: Foundation.Date? = nil,
            longValue: Swift.Int? = nil,
            stringListValue: [Swift.String]? = nil,
            stringValue: Swift.String? = nil
        )
        {
            self.dateValue = dateValue
            self.longValue = longValue
            self.stringListValue = stringListValue
            self.stringValue = stringValue
        }
    }
}

extension KendraClientTypes {

    /// A document attribute or metadata field. To create custom document attributes, see [Custom attributes](https://docs.aws.amazon.com/kendra/latest/dg/custom-attributes.html).
    public struct DocumentAttribute: Swift.Sendable {
        /// The identifier for the attribute.
        /// This member is required.
        public var key: Swift.String?
        /// The value of the attribute.
        /// This member is required.
        public var value: KendraClientTypes.DocumentAttributeValue?

        public init(
            key: Swift.String? = nil,
            value: KendraClientTypes.DocumentAttributeValue? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

extension KendraClientTypes {

    public enum AttributeSuggestionsMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [AttributeSuggestionsMode] {
            return [
                .active,
                .inactive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for a document field/attribute that you want to base query suggestions on.
    public struct SuggestableConfig: Swift.Sendable {
        /// The name of the document field/attribute.
        public var attributeName: Swift.String?
        /// TRUE means the document field/attribute is suggestible, so the contents within the field can be used for query suggestions.
        public var suggestable: Swift.Bool?

        public init(
            attributeName: Swift.String? = nil,
            suggestable: Swift.Bool? = nil
        )
        {
            self.attributeName = attributeName
            self.suggestable = suggestable
        }
    }
}

extension KendraClientTypes {

    /// Gets information on the configuration of document fields/attributes that you want to base query suggestions on. To change your configuration, use [AttributeSuggestionsUpdateConfig](https://docs.aws.amazon.com/kendra/latest/dg/API_AttributeSuggestionsUpdateConfig.html) and then call [UpdateQuerySuggestionsConfig](https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateQuerySuggestionsConfig.html).
    public struct AttributeSuggestionsDescribeConfig: Swift.Sendable {
        /// The mode is set to either ACTIVE or INACTIVE. If the Mode for query history is set to ENABLED when calling [UpdateQuerySuggestionsConfig](https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateQuerySuggestionsConfig.html) and AttributeSuggestionsMode to use fields/attributes is set to ACTIVE, and you haven't set your SuggestionTypes preference to DOCUMENT_ATTRIBUTES, then Amazon Kendra uses the query history.
        public var attributeSuggestionsMode: KendraClientTypes.AttributeSuggestionsMode?
        /// The list of fields/attributes that you want to set as suggestible for query suggestions.
        public var suggestableConfigList: [KendraClientTypes.SuggestableConfig]?

        public init(
            attributeSuggestionsMode: KendraClientTypes.AttributeSuggestionsMode? = nil,
            suggestableConfigList: [KendraClientTypes.SuggestableConfig]? = nil
        )
        {
            self.attributeSuggestionsMode = attributeSuggestionsMode
            self.suggestableConfigList = suggestableConfigList
        }
    }
}

extension KendraClientTypes {

    /// Data source information for user context filtering.
    public struct DataSourceGroup: Swift.Sendable {
        /// The identifier of the data source group you want to add to your list of data source groups. This is for filtering search results based on the groups' access to documents in that data source.
        /// This member is required.
        public var dataSourceId: Swift.String?
        /// The identifier of the group you want to add to your list of groups. This is for filtering search results based on the groups' access to documents.
        /// This member is required.
        public var groupId: Swift.String?

        public init(
            dataSourceId: Swift.String? = nil,
            groupId: Swift.String? = nil
        )
        {
            self.dataSourceId = dataSourceId
            self.groupId = groupId
        }
    }
}

extension KendraClientTypes {

    /// Provides information about the user context for an Amazon Kendra index. User context filtering is a kind of personalized search with the benefit of controlling access to documents. For example, not all teams that search the company portal for information should access top-secret company documents, nor are these documents relevant to all users. Only specific users or groups of teams given access to top-secret documents should see these documents in their search results. You provide one of the following:
    ///
    /// * User token
    ///
    /// * User ID, the groups the user belongs to, and any data sources the groups can access.
    ///
    ///
    /// If you provide both, an exception is thrown.
    public struct UserContext: Swift.Sendable {
        /// The list of data source groups you want to filter search results based on groups' access to documents in that data source.
        public var dataSourceGroups: [KendraClientTypes.DataSourceGroup]?
        /// The list of groups you want to filter search results based on the groups' access to documents.
        public var groups: [Swift.String]?
        /// The user context token for filtering search results for a user. It must be a JWT or a JSON token.
        public var token: Swift.String?
        /// The identifier of the user you want to filter search results based on their access to documents.
        public var userId: Swift.String?

        public init(
            dataSourceGroups: [KendraClientTypes.DataSourceGroup]? = nil,
            groups: [Swift.String]? = nil,
            token: Swift.String? = nil,
            userId: Swift.String? = nil
        )
        {
            self.dataSourceGroups = dataSourceGroups
            self.groups = groups
            self.token = token
            self.userId = userId
        }
    }
}

extension KendraClientTypes {

    /// Updates the configuration information for the document fields/attributes that you want to base query suggestions on. To deactivate using documents fields for query suggestions, set the mode to INACTIVE. You must also set SuggestionTypes as either QUERY or DOCUMENT_ATTRIBUTES and then call [GetQuerySuggestions](https://docs.aws.amazon.com/kendra/latest/dg/API_GetQuerySuggestions.html). If you set to QUERY, then Amazon Kendra uses the query history to base suggestions on. If you set to DOCUMENT_ATTRIBUTES, then Amazon Kendra uses the contents of document fields to base suggestions on.
    public struct AttributeSuggestionsUpdateConfig: Swift.Sendable {
        /// You can set the mode to ACTIVE or INACTIVE. You must also set SuggestionTypes as either QUERY or DOCUMENT_ATTRIBUTES and then call [GetQuerySuggestions](https://docs.aws.amazon.com/kendra/latest/dg/API_GetQuerySuggestions.html). If Mode to use query history is set to ENABLED when calling [UpdateQuerySuggestionsConfig](https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateQuerySuggestionsConfig.html) and AttributeSuggestionsMode to use fields/attributes is set to ACTIVE, and you haven't set your SuggestionTypes preference to DOCUMENT_ATTRIBUTES, then Amazon Kendra uses the query history.
        public var attributeSuggestionsMode: KendraClientTypes.AttributeSuggestionsMode?
        /// The list of fields/attributes that you want to set as suggestible for query suggestions.
        public var suggestableConfigList: [KendraClientTypes.SuggestableConfig]?

        public init(
            attributeSuggestionsMode: KendraClientTypes.AttributeSuggestionsMode? = nil,
            suggestableConfigList: [KendraClientTypes.SuggestableConfig]? = nil
        )
        {
            self.attributeSuggestionsMode = attributeSuggestionsMode
            self.suggestableConfigList = suggestableConfigList
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to connect to websites that require basic user authentication.
    public struct BasicAuthenticationConfiguration: Swift.Sendable {
        /// Your secret ARN, which you can create in [Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html) You use a secret if basic authentication credentials are required to connect to a website. The secret stores your credentials of user name and password.
        /// This member is required.
        public var credentials: Swift.String?
        /// The name of the website host you want to connect to using authentication credentials. For example, the host name of https://a.example.com/page1.html is "a.example.com".
        /// This member is required.
        public var host: Swift.String?
        /// The port number of the website host you want to connect to using authentication credentials. For example, the port for https://a.example.com/page1.html is 443, the standard port for HTTPS.
        /// This member is required.
        public var port: Swift.Int?

        public init(
            credentials: Swift.String? = nil,
            host: Swift.String? = nil,
            port: Swift.Int? = nil
        )
        {
            self.credentials = credentials
            self.host = host
            self.port = port
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to connect to websites that require user authentication.
    public struct AuthenticationConfiguration: Swift.Sendable {
        /// The list of configuration information that's required to connect to and crawl a website host using basic authentication credentials. The list includes the name and port number of the website host.
        public var basicAuthentication: [KendraClientTypes.BasicAuthenticationConfiguration]?

        public init(
            basicAuthentication: [KendraClientTypes.BasicAuthenticationConfiguration]? = nil
        )
        {
            self.basicAuthentication = basicAuthentication
        }
    }
}

/// A conflict occurred with the request. Please fix any inconsistences with your resources and try again.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension KendraClientTypes {

    /// Maps a particular data source sync job to a particular data source.
    public struct DataSourceSyncJobMetricTarget: Swift.Sendable {
        /// The ID of the data source that is running the sync job.
        /// This member is required.
        public var dataSourceId: Swift.String?
        /// The ID of the sync job that is running on the data source. If the ID of a sync job is not provided and there is a sync job running, then the ID of this sync job is used and metrics are generated for this sync job. If the ID of a sync job is not provided and there is no sync job running, then no metrics are generated and documents are indexed/deleted at the index level without sync job metrics included.
        public var dataSourceSyncJobId: Swift.String?

        public init(
            dataSourceId: Swift.String? = nil,
            dataSourceSyncJobId: Swift.String? = nil
        )
        {
            self.dataSourceId = dataSourceId
            self.dataSourceSyncJobId = dataSourceSyncJobId
        }
    }
}

public struct BatchDeleteDocumentInput: Swift.Sendable {
    /// Maps a particular data source sync job to a particular data source.
    public var dataSourceSyncJobMetricTarget: KendraClientTypes.DataSourceSyncJobMetricTarget?
    /// One or more identifiers for documents to delete from the index.
    /// This member is required.
    public var documentIdList: [Swift.String]?
    /// The identifier of the index that contains the documents to delete.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        dataSourceSyncJobMetricTarget: KendraClientTypes.DataSourceSyncJobMetricTarget? = nil,
        documentIdList: [Swift.String]? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.dataSourceSyncJobMetricTarget = dataSourceSyncJobMetricTarget
        self.documentIdList = documentIdList
        self.indexId = indexId
    }
}

extension KendraClientTypes {

    public enum ErrorCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case internalError
        case invalidRequest
        case sdkUnknown(Swift.String)

        public static var allCases: [ErrorCode] {
            return [
                .internalError,
                .invalidRequest
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .internalError: return "InternalError"
            case .invalidRequest: return "InvalidRequest"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides information about documents that could not be removed from an index by the BatchDeleteDocument API.
    public struct BatchDeleteDocumentResponseFailedDocument: Swift.Sendable {
        /// The error code for why the document couldn't be removed from the index.
        public var errorCode: KendraClientTypes.ErrorCode?
        /// An explanation for why the document couldn't be removed from the index.
        public var errorMessage: Swift.String?
        /// The identifier of the document that couldn't be removed from the index.
        public var id: Swift.String?

        public init(
            errorCode: KendraClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            id: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.id = id
        }
    }
}

public struct BatchDeleteDocumentOutput: Swift.Sendable {
    /// A list of documents that could not be removed from the index. Each entry contains an error message that indicates why the document couldn't be removed from the index.
    public var failedDocuments: [KendraClientTypes.BatchDeleteDocumentResponseFailedDocument]?

    public init(
        failedDocuments: [KendraClientTypes.BatchDeleteDocumentResponseFailedDocument]? = nil
    )
    {
        self.failedDocuments = failedDocuments
    }
}

public struct BatchDeleteFeaturedResultsSetInput: Swift.Sendable {
    /// The identifiers of the featured results sets that you want to delete.
    /// This member is required.
    public var featuredResultsSetIds: [Swift.String]?
    /// The identifier of the index used for featuring results.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        featuredResultsSetIds: [Swift.String]? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.featuredResultsSetIds = featuredResultsSetIds
        self.indexId = indexId
    }
}

extension KendraClientTypes {

    /// Provides information about a set of featured results that couldn't be removed from an index by the [BatchDeleteFeaturedResultsSet](https://docs.aws.amazon.com/kendra/latest/dg/API_BatchDeleteFeaturedResultsSet.html) API.
    public struct BatchDeleteFeaturedResultsSetError: Swift.Sendable {
        /// The error code for why the set of featured results couldn't be removed from the index.
        /// This member is required.
        public var errorCode: KendraClientTypes.ErrorCode?
        /// An explanation for why the set of featured results couldn't be removed from the index.
        /// This member is required.
        public var errorMessage: Swift.String?
        /// The identifier of the set of featured results that couldn't be removed from the index.
        /// This member is required.
        public var id: Swift.String?

        public init(
            errorCode: KendraClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            id: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.id = id
        }
    }
}

public struct BatchDeleteFeaturedResultsSetOutput: Swift.Sendable {
    /// The list of errors for the featured results set IDs, explaining why they couldn't be removed from the index.
    /// This member is required.
    public var errors: [KendraClientTypes.BatchDeleteFeaturedResultsSetError]?

    public init(
        errors: [KendraClientTypes.BatchDeleteFeaturedResultsSetError]? = nil
    )
    {
        self.errors = errors
    }
}

extension KendraClientTypes {

    /// Identifies a document for which to retrieve status information
    public struct DocumentInfo: Swift.Sendable {
        /// Attributes that identify a specific version of a document to check. The only valid attributes are:
        ///
        /// * version
        ///
        /// * datasourceId
        ///
        /// * jobExecutionId
        ///
        ///
        /// The attributes follow these rules:
        ///
        /// * dataSourceId and jobExecutionId must be used together.
        ///
        /// * version is ignored if dataSourceId and jobExecutionId are not provided.
        ///
        /// * If dataSourceId and jobExecutionId are provided, but version is not, the version defaults to "0".
        public var attributes: [KendraClientTypes.DocumentAttribute]?
        /// The identifier of the document.
        /// This member is required.
        public var documentId: Swift.String?

        public init(
            attributes: [KendraClientTypes.DocumentAttribute]? = nil,
            documentId: Swift.String? = nil
        )
        {
            self.attributes = attributes
            self.documentId = documentId
        }
    }
}

public struct BatchGetDocumentStatusInput: Swift.Sendable {
    /// A list of DocumentInfo objects that identify the documents for which to get the status. You identify the documents by their document ID and optional attributes.
    /// This member is required.
    public var documentInfoList: [KendraClientTypes.DocumentInfo]?
    /// The identifier of the index to add documents to. The index ID is returned by the [CreateIndex ](https://docs.aws.amazon.com/kendra/latest/dg/API_CreateIndex.html) API.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        documentInfoList: [KendraClientTypes.DocumentInfo]? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.documentInfoList = documentInfoList
        self.indexId = indexId
    }
}

extension KendraClientTypes {

    public enum DocumentStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case indexed
        case notFound
        case processing
        case updated
        case updateFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [DocumentStatus] {
            return [
                .failed,
                .indexed,
                .notFound,
                .processing,
                .updated,
                .updateFailed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .indexed: return "INDEXED"
            case .notFound: return "NOT_FOUND"
            case .processing: return "PROCESSING"
            case .updated: return "UPDATED"
            case .updateFailed: return "UPDATE_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides information about the status of documents submitted for indexing.
    public struct Status: Swift.Sendable {
        /// The identifier of the document.
        public var documentId: Swift.String?
        /// The current status of a document. If the document was submitted for deletion, the status is NOT_FOUND after the document is deleted.
        public var documentStatus: KendraClientTypes.DocumentStatus?
        /// Indicates the source of the error.
        public var failureCode: Swift.String?
        /// Provides detailed information about why the document couldn't be indexed. Use this information to correct the error before you resubmit the document for indexing.
        public var failureReason: Swift.String?

        public init(
            documentId: Swift.String? = nil,
            documentStatus: KendraClientTypes.DocumentStatus? = nil,
            failureCode: Swift.String? = nil,
            failureReason: Swift.String? = nil
        )
        {
            self.documentId = documentId
            self.documentStatus = documentStatus
            self.failureCode = failureCode
            self.failureReason = failureReason
        }
    }
}

extension KendraClientTypes {

    /// Provides a response when the status of a document could not be retrieved.
    public struct BatchGetDocumentStatusResponseError: Swift.Sendable {
        /// The identifier of the document whose status could not be retrieved.
        public var documentId: Swift.String?
        /// Indicates the source of the error.
        public var errorCode: KendraClientTypes.ErrorCode?
        /// States that the API could not get the status of a document. This could be because the request is not valid or there is a system error.
        public var errorMessage: Swift.String?

        public init(
            documentId: Swift.String? = nil,
            errorCode: KendraClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil
        )
        {
            self.documentId = documentId
            self.errorCode = errorCode
            self.errorMessage = errorMessage
        }
    }
}

public struct BatchGetDocumentStatusOutput: Swift.Sendable {
    /// The status of documents. The status indicates if the document is waiting to be indexed, is in the process of indexing, has completed indexing, or failed indexing. If a document failed indexing, the status provides the reason why.
    public var documentStatusList: [KendraClientTypes.Status]?
    /// A list of documents that Amazon Kendra couldn't get the status for. The list includes the ID of the document and the reason that the status couldn't be found.
    public var errors: [KendraClientTypes.BatchGetDocumentStatusResponseError]?

    public init(
        documentStatusList: [KendraClientTypes.Status]? = nil,
        errors: [KendraClientTypes.BatchGetDocumentStatusResponseError]? = nil
    )
    {
        self.documentStatusList = documentStatusList
        self.errors = errors
    }
}

/// You have exceeded the set limits for your Amazon Kendra service. Please see [Quotas](https://docs.aws.amazon.com/kendra/latest/dg/quotas.html) for more information, or contact [Support](http://aws.amazon.com/contact-us/) to inquire about an increase of limits.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension KendraClientTypes {

    public enum ConditionOperator: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case beginswith
        case contains
        case equals
        case exists
        case greaterthan
        case greaterthanorequals
        case lessthan
        case lessthanorequals
        case notcontains
        case notequals
        case notexists
        case sdkUnknown(Swift.String)

        public static var allCases: [ConditionOperator] {
            return [
                .beginswith,
                .contains,
                .equals,
                .exists,
                .greaterthan,
                .greaterthanorequals,
                .lessthan,
                .lessthanorequals,
                .notcontains,
                .notequals,
                .notexists
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .beginswith: return "BeginsWith"
            case .contains: return "Contains"
            case .equals: return "Equals"
            case .exists: return "Exists"
            case .greaterthan: return "GreaterThan"
            case .greaterthanorequals: return "GreaterThanOrEquals"
            case .lessthan: return "LessThan"
            case .lessthanorequals: return "LessThanOrEquals"
            case .notcontains: return "NotContains"
            case .notequals: return "NotEquals"
            case .notexists: return "NotExists"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// The condition used for the target document attribute or metadata field when ingesting documents into Amazon Kendra. You use this with [DocumentAttributeTarget to apply the condition](https://docs.aws.amazon.com/kendra/latest/dg/API_DocumentAttributeTarget.html). For example, you can create the 'Department' target field and have it prefill department names associated with the documents based on information in the 'Source_URI' field. Set the condition that if the 'Source_URI' field contains 'financial' in its URI value, then prefill the target field 'Department' with the target value 'Finance' for the document. Amazon Kendra cannot create a target field if it has not already been created as an index field. After you create your index field, you can create a document metadata field using DocumentAttributeTarget. Amazon Kendra then will map your newly created metadata field to your index field.
    public struct DocumentAttributeCondition: Swift.Sendable {
        /// The identifier of the document attribute used for the condition. For example, 'Source_URI' could be an identifier for the attribute or metadata field that contains source URIs associated with the documents. Amazon Kendra currently does not support _document_body as an attribute key used for the condition.
        /// This member is required.
        public var conditionDocumentAttributeKey: Swift.String?
        /// The value used by the operator. For example, you can specify the value 'financial' for strings in the 'Source_URI' field that partially match or contain this value.
        public var conditionOnValue: KendraClientTypes.DocumentAttributeValue?
        /// The condition operator. For example, you can use 'Contains' to partially match a string.
        /// This member is required.
        public var `operator`: KendraClientTypes.ConditionOperator?

        public init(
            conditionDocumentAttributeKey: Swift.String? = nil,
            conditionOnValue: KendraClientTypes.DocumentAttributeValue? = nil,
            `operator`: KendraClientTypes.ConditionOperator? = nil
        )
        {
            self.conditionDocumentAttributeKey = conditionDocumentAttributeKey
            self.conditionOnValue = conditionOnValue
            self.`operator` = `operator`
        }
    }
}

extension KendraClientTypes {

    /// The target document attribute or metadata field you want to alter when ingesting documents into Amazon Kendra. For example, you can delete customer identification numbers associated with the documents, stored in the document metadata field called 'Customer_ID'. You set the target key as 'Customer_ID' and the deletion flag to TRUE. This removes all customer ID values in the field 'Customer_ID'. This would scrub personally identifiable information from each document's metadata. Amazon Kendra cannot create a target field if it has not already been created as an index field. After you create your index field, you can create a document metadata field using DocumentAttributeTarget. Amazon Kendra then will map your newly created metadata field to your index field. You can also use this with [DocumentAttributeCondition](https://docs.aws.amazon.com/kendra/latest/dg/API_DocumentAttributeCondition.html).
    public struct DocumentAttributeTarget: Swift.Sendable {
        /// The identifier of the target document attribute or metadata field. For example, 'Department' could be an identifier for the target attribute or metadata field that includes the department names associated with the documents.
        public var targetDocumentAttributeKey: Swift.String?
        /// The target value you want to create for the target attribute. For example, 'Finance' could be the target value for the target attribute key 'Department'.
        public var targetDocumentAttributeValue: KendraClientTypes.DocumentAttributeValue?
        /// TRUE to delete the existing target value for your specified target attribute key. You cannot create a target value and set this to TRUE. To create a target value (TargetDocumentAttributeValue), set this to FALSE.
        public var targetDocumentAttributeValueDeletion: Swift.Bool

        public init(
            targetDocumentAttributeKey: Swift.String? = nil,
            targetDocumentAttributeValue: KendraClientTypes.DocumentAttributeValue? = nil,
            targetDocumentAttributeValueDeletion: Swift.Bool = false
        )
        {
            self.targetDocumentAttributeKey = targetDocumentAttributeKey
            self.targetDocumentAttributeValue = targetDocumentAttributeValue
            self.targetDocumentAttributeValueDeletion = targetDocumentAttributeValueDeletion
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for applying basic logic to alter document metadata and content when ingesting documents into Amazon Kendra. To apply advanced logic, to go beyond what you can do with basic logic, see [HookConfiguration](https://docs.aws.amazon.com/kendra/latest/dg/API_HookConfiguration.html). For more information, see [Customizing document metadata during the ingestion process](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html).
    public struct InlineCustomDocumentEnrichmentConfiguration: Swift.Sendable {
        /// Configuration of the condition used for the target document attribute or metadata field when ingesting documents into Amazon Kendra.
        public var condition: KendraClientTypes.DocumentAttributeCondition?
        /// TRUE to delete content if the condition used for the target attribute is met.
        public var documentContentDeletion: Swift.Bool
        /// Configuration of the target document attribute or metadata field when ingesting documents into Amazon Kendra. You can also include a value.
        public var target: KendraClientTypes.DocumentAttributeTarget?

        public init(
            condition: KendraClientTypes.DocumentAttributeCondition? = nil,
            documentContentDeletion: Swift.Bool = false,
            target: KendraClientTypes.DocumentAttributeTarget? = nil
        )
        {
            self.condition = condition
            self.documentContentDeletion = documentContentDeletion
            self.target = target
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for invoking a Lambda function in Lambda to alter document metadata and content when ingesting documents into Amazon Kendra. You can configure your Lambda function using [PreExtractionHookConfiguration](https://docs.aws.amazon.com/kendra/latest/dg/API_CustomDocumentEnrichmentConfiguration.html) if you want to apply advanced alterations on the original or raw documents. If you want to apply advanced alterations on the Amazon Kendra structured documents, you must configure your Lambda function using [PostExtractionHookConfiguration](https://docs.aws.amazon.com/kendra/latest/dg/API_CustomDocumentEnrichmentConfiguration.html). You can only invoke one Lambda function. However, this function can invoke other functions it requires. For more information, see [Customizing document metadata during the ingestion process](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html).
    public struct HookConfiguration: Swift.Sendable {
        /// The condition used for when a Lambda function should be invoked. For example, you can specify a condition that if there are empty date-time values, then Amazon Kendra should invoke a function that inserts the current date-time.
        public var invocationCondition: KendraClientTypes.DocumentAttributeCondition?
        /// The Amazon Resource Name (ARN) of a role with permission to run a Lambda function during ingestion. For more information, see [IAM roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html).
        /// This member is required.
        public var lambdaArn: Swift.String?
        /// Stores the original, raw documents or the structured, parsed documents before and after altering them. For more information, see [Data contracts for Lambda functions](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#cde-data-contracts-lambda).
        /// This member is required.
        public var s3Bucket: Swift.String?

        public init(
            invocationCondition: KendraClientTypes.DocumentAttributeCondition? = nil,
            lambdaArn: Swift.String? = nil,
            s3Bucket: Swift.String? = nil
        )
        {
            self.invocationCondition = invocationCondition
            self.lambdaArn = lambdaArn
            self.s3Bucket = s3Bucket
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for altering document metadata and content during the document ingestion process. For more information, see [Customizing document metadata during the ingestion process](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html).
    public struct CustomDocumentEnrichmentConfiguration: Swift.Sendable {
        /// Configuration information to alter document attributes or metadata fields and content when ingesting documents into Amazon Kendra.
        public var inlineConfigurations: [KendraClientTypes.InlineCustomDocumentEnrichmentConfiguration]?
        /// Configuration information for invoking a Lambda function in Lambda on the structured documents with their metadata and text extracted. You can use a Lambda function to apply advanced logic for creating, modifying, or deleting document metadata and content. For more information, see [Advanced data manipulation](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#advanced-data-manipulation).
        public var postExtractionHookConfiguration: KendraClientTypes.HookConfiguration?
        /// Configuration information for invoking a Lambda function in Lambda on the original or raw documents before extracting their metadata and text. You can use a Lambda function to apply advanced logic for creating, modifying, or deleting document metadata and content. For more information, see [Advanced data manipulation](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#advanced-data-manipulation).
        public var preExtractionHookConfiguration: KendraClientTypes.HookConfiguration?
        /// The Amazon Resource Name (ARN) of a role with permission to run PreExtractionHookConfiguration and PostExtractionHookConfiguration for altering document metadata and content during the document ingestion process. For more information, see [IAM roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html).
        public var roleArn: Swift.String?

        public init(
            inlineConfigurations: [KendraClientTypes.InlineCustomDocumentEnrichmentConfiguration]? = nil,
            postExtractionHookConfiguration: KendraClientTypes.HookConfiguration? = nil,
            preExtractionHookConfiguration: KendraClientTypes.HookConfiguration? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.inlineConfigurations = inlineConfigurations
            self.postExtractionHookConfiguration = postExtractionHookConfiguration
            self.preExtractionHookConfiguration = preExtractionHookConfiguration
            self.roleArn = roleArn
        }
    }
}

extension KendraClientTypes {

    public enum ReadAccessType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allow
        case deny
        case sdkUnknown(Swift.String)

        public static var allCases: [ReadAccessType] {
            return [
                .allow,
                .deny
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allow: return "ALLOW"
            case .deny: return "DENY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    public enum PrincipalType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case group
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [PrincipalType] {
            return [
                .group,
                .user
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .group: return "GROUP"
            case .user: return "USER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides user and group information for [user context filtering](https://docs.aws.amazon.com/kendra/latest/dg/user-context-filter.html).
    public struct Principal: Swift.Sendable {
        /// Whether to allow or deny document access to the principal.
        /// This member is required.
        public var access: KendraClientTypes.ReadAccessType?
        /// The identifier of the data source the principal should access documents from.
        public var dataSourceId: Swift.String?
        /// The name of the user or group.
        /// This member is required.
        public var name: Swift.String?
        /// The type of principal.
        /// This member is required.
        public var type: KendraClientTypes.PrincipalType?

        public init(
            access: KendraClientTypes.ReadAccessType? = nil,
            dataSourceId: Swift.String? = nil,
            name: Swift.String? = nil,
            type: KendraClientTypes.PrincipalType? = nil
        )
        {
            self.access = access
            self.dataSourceId = dataSourceId
            self.name = name
            self.type = type
        }
    }
}

extension KendraClientTypes {

    public enum ContentType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case csv
        case html
        case json
        case md
        case msExcel
        case msWord
        case pdf
        case plainText
        case ppt
        case rtf
        case xml
        case xslt
        case sdkUnknown(Swift.String)

        public static var allCases: [ContentType] {
            return [
                .csv,
                .html,
                .json,
                .md,
                .msExcel,
                .msWord,
                .pdf,
                .plainText,
                .ppt,
                .rtf,
                .xml,
                .xslt
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case .html: return "HTML"
            case .json: return "JSON"
            case .md: return "MD"
            case .msExcel: return "MS_EXCEL"
            case .msWord: return "MS_WORD"
            case .pdf: return "PDF"
            case .plainText: return "PLAIN_TEXT"
            case .ppt: return "PPT"
            case .rtf: return "RTF"
            case .xml: return "XML"
            case .xslt: return "XSLT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Information to define the hierarchy for which documents users should have access to.
    public struct HierarchicalPrincipal: Swift.Sendable {
        /// A list of [principal](https://docs.aws.amazon.com/kendra/latest/dg/API_Principal.html) lists that define the hierarchy for which documents users should have access to. Each hierarchical list specifies which user or group has allow or deny access for each document.
        /// This member is required.
        public var principalList: [KendraClientTypes.Principal]?

        public init(
            principalList: [KendraClientTypes.Principal]? = nil
        )
        {
            self.principalList = principalList
        }
    }
}

extension KendraClientTypes {

    /// A document in an index.
    public struct Document: Swift.Sendable {
        /// The identifier of the access control configuration that you want to apply to the document.
        public var accessControlConfigurationId: Swift.String?
        /// Information on principals (users and/or groups) and which documents they should have access to. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.
        public var accessControlList: [KendraClientTypes.Principal]?
        /// Custom attributes to apply to the document. Use the custom attributes to provide additional information for searching, to provide facets for refining searches, and to provide additional information in the query response. For example, 'DataSourceId' and 'DataSourceSyncJobId' are custom attributes that provide information on the synchronization of documents running on a data source. Note, 'DataSourceSyncJobId' could be an optional custom attribute as Amazon Kendra will use the ID of a running sync job.
        public var attributes: [KendraClientTypes.DocumentAttribute]?
        /// The contents of the document. Documents passed to the Blob parameter must be base64 encoded. Your code might not need to encode the document file bytes if you're using an Amazon Web Services SDK to call Amazon Kendra APIs. If you are calling the Amazon Kendra endpoint directly using REST, you must base64 encode the contents before sending.
        public var blob: Foundation.Data?
        /// The file type of the document in the Blob field. If you want to index snippets or subsets of HTML documents instead of the entirety of the HTML documents, you must add the HTML start and closing tags (content) around the content.
        public var contentType: KendraClientTypes.ContentType?
        /// The list of [principal](https://docs.aws.amazon.com/kendra/latest/dg/API_Principal.html) lists that define the hierarchy for which documents users should have access to.
        public var hierarchicalAccessControlList: [KendraClientTypes.HierarchicalPrincipal]?
        /// A identifier of the document in the index. Note, each document ID must be unique per index. You cannot create a data source to index your documents with their unique IDs and then use the BatchPutDocument API to index the same documents, or vice versa. You can delete a data source and then use the BatchPutDocument API to index the same documents, or vice versa.
        /// This member is required.
        public var id: Swift.String?
        /// Information required to find a specific file in an Amazon S3 bucket.
        public var s3Path: KendraClientTypes.S3Path?
        /// The title of the document.
        public var title: Swift.String?

        public init(
            accessControlConfigurationId: Swift.String? = nil,
            accessControlList: [KendraClientTypes.Principal]? = nil,
            attributes: [KendraClientTypes.DocumentAttribute]? = nil,
            blob: Foundation.Data? = nil,
            contentType: KendraClientTypes.ContentType? = nil,
            hierarchicalAccessControlList: [KendraClientTypes.HierarchicalPrincipal]? = nil,
            id: Swift.String? = nil,
            s3Path: KendraClientTypes.S3Path? = nil,
            title: Swift.String? = nil
        )
        {
            self.accessControlConfigurationId = accessControlConfigurationId
            self.accessControlList = accessControlList
            self.attributes = attributes
            self.blob = blob
            self.contentType = contentType
            self.hierarchicalAccessControlList = hierarchicalAccessControlList
            self.id = id
            self.s3Path = s3Path
            self.title = title
        }
    }
}

public struct BatchPutDocumentInput: Swift.Sendable {
    /// Configuration information for altering your document metadata and content during the document ingestion process when you use the BatchPutDocument API. For more information on how to create, modify and delete document metadata, or make other content alterations when you ingest documents into Amazon Kendra, see [Customizing document metadata during the ingestion process](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html).
    public var customDocumentEnrichmentConfiguration: KendraClientTypes.CustomDocumentEnrichmentConfiguration?
    /// One or more documents to add to the index. Documents have the following file size limits.
    ///
    /// * 50 MB total size for any file
    ///
    /// * 5 MB extracted text for any file
    ///
    ///
    /// For more information, see [Quotas](https://docs.aws.amazon.com/kendra/latest/dg/quotas.html).
    /// This member is required.
    public var documents: [KendraClientTypes.Document]?
    /// The identifier of the index to add the documents to. You need to create the index first using the CreateIndex API.
    /// This member is required.
    public var indexId: Swift.String?
    /// The Amazon Resource Name (ARN) of an IAM role with permission to access your S3 bucket. For more information, see [IAM access roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html).
    public var roleArn: Swift.String?

    public init(
        customDocumentEnrichmentConfiguration: KendraClientTypes.CustomDocumentEnrichmentConfiguration? = nil,
        documents: [KendraClientTypes.Document]? = nil,
        indexId: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.customDocumentEnrichmentConfiguration = customDocumentEnrichmentConfiguration
        self.documents = documents
        self.indexId = indexId
        self.roleArn = roleArn
    }
}

extension KendraClientTypes {

    /// Provides information about a document that could not be indexed.
    public struct BatchPutDocumentResponseFailedDocument: Swift.Sendable {
        /// The type of error that caused the document to fail to be indexed.
        public var errorCode: KendraClientTypes.ErrorCode?
        /// A description of the reason why the document could not be indexed.
        public var errorMessage: Swift.String?
        /// The identifier of the document.
        public var id: Swift.String?

        public init(
            errorCode: KendraClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            id: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.id = id
        }
    }
}

public struct BatchPutDocumentOutput: Swift.Sendable {
    /// A list of documents that were not added to the index because the document failed a validation check. Each document contains an error message that indicates why the document couldn't be added to the index. If there was an error adding a document to an index the error is reported in your Amazon Web Services CloudWatch log. For more information, see [Monitoring Amazon Kendra with Amazon CloudWatch logs](https://docs.aws.amazon.com/kendra/latest/dg/cloudwatch-logs.html).
    public var failedDocuments: [KendraClientTypes.BatchPutDocumentResponseFailedDocument]?

    public init(
        failedDocuments: [KendraClientTypes.BatchPutDocumentResponseFailedDocument]? = nil
    )
    {
        self.failedDocuments = failedDocuments
    }
}

public struct ClearQuerySuggestionsInput: Swift.Sendable {
    /// The identifier of the index you want to clear query suggestions from.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        indexId: Swift.String? = nil
    )
    {
        self.indexId = indexId
    }
}

public struct CreateAccessControlConfigurationInput: Swift.Sendable {
    /// Information on principals (users and/or groups) and which documents they should have access to. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.
    public var accessControlList: [KendraClientTypes.Principal]?
    /// A token that you provide to identify the request to create an access control configuration. Multiple calls to the CreateAccessControlConfiguration API with the same client token will create only one access control configuration.
    public var clientToken: Swift.String?
    /// A description for the access control configuration.
    public var description: Swift.String?
    /// The list of [principal](https://docs.aws.amazon.com/kendra/latest/dg/API_Principal.html) lists that define the hierarchy for which documents users should have access to.
    public var hierarchicalAccessControlList: [KendraClientTypes.HierarchicalPrincipal]?
    /// The identifier of the index to create an access control configuration for your documents.
    /// This member is required.
    public var indexId: Swift.String?
    /// A name for the access control configuration.
    /// This member is required.
    public var name: Swift.String?

    public init(
        accessControlList: [KendraClientTypes.Principal]? = nil,
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        hierarchicalAccessControlList: [KendraClientTypes.HierarchicalPrincipal]? = nil,
        indexId: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.accessControlList = accessControlList
        self.clientToken = clientToken
        self.description = description
        self.hierarchicalAccessControlList = hierarchicalAccessControlList
        self.indexId = indexId
        self.name = name
    }
}

public struct CreateAccessControlConfigurationOutput: Swift.Sendable {
    /// The identifier of the access control configuration for your documents in an index.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to connect to Box as your data source.
    public struct BoxConfiguration: Swift.Sendable {
        /// A list of DataSourceToIndexFieldMapping objects that map attributes or field names of Box comments to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Box fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Box field names must exist in your Box custom metadata.
        public var commentFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// TRUE to index comments.
        public var crawlComments: Swift.Bool
        /// TRUE to index the contents of tasks.
        public var crawlTasks: Swift.Bool
        /// TRUE to index web links.
        public var crawlWebLinks: Swift.Bool
        /// The identifier of the Box Enterprise platform. You can find the enterprise ID in the Box Developer Console settings or when you create an app in Box and download your authentication credentials. For example, 801234567.
        /// This member is required.
        public var enterpriseId: Swift.String?
        /// A list of regular expression patterns to exclude certain files and folders from your Box platform. Files and folders that match the patterns are excluded from the index.Files and folders that don't match the patterns are included in the index. If a file or folder matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file or folder isn't included in the index.
        public var exclusionPatterns: [Swift.String]?
        /// A list of DataSourceToIndexFieldMapping objects that map attributes or field names of Box files to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Box fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Box field names must exist in your Box custom metadata.
        public var fileFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A list of regular expression patterns to include certain files and folders in your Box platform. Files and folders that match the patterns are included in the index. Files and folders that don't match the patterns are excluded from the index. If a file or folder matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file or folder isn't included in the index.
        public var inclusionPatterns: [Swift.String]?
        /// The Amazon Resource Name (ARN) of an Secrets Manager secret that contains the key-value pairs required to connect to your Box platform. The secret must contain a JSON structure with the following keys:
        ///
        /// * clientID—The identifier of the client OAuth 2.0 authentication application created in Box.
        ///
        /// * clientSecret—A set of characters known only to the OAuth 2.0 authentication application created in Box.
        ///
        /// * publicKeyId—The identifier of the public key contained within an identity certificate.
        ///
        /// * privateKey—A set of characters that make up an encryption key.
        ///
        /// * passphrase—A set of characters that act like a password.
        ///
        ///
        /// You create an application in Box to generate the keys or credentials required for the secret. For more information, see [Using a Box data source](https://docs.aws.amazon.com/kendra/latest/dg/data-source-box.html).
        /// This member is required.
        public var secretArn: Swift.String?
        /// A list of DataSourceToIndexFieldMapping objects that map attributes or field names of Box tasks to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Box fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Box field names must exist in your Box custom metadata.
        public var taskFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// TRUE to use the Slack change log to determine which documents require updating in the index. Depending on the data source change log's size, it may take longer for Amazon Kendra to use the change log than to scan all of your documents.
        public var useChangeLog: Swift.Bool
        /// Configuration information for an Amazon VPC to connect to your Box. For more information, see [Configuring a VPC](https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html).
        public var vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration?
        /// A list of DataSourceToIndexFieldMapping objects that map attributes or field names of Box web links to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Box fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Box field names must exist in your Box custom metadata.
        public var webLinkFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?

        public init(
            commentFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            crawlComments: Swift.Bool = false,
            crawlTasks: Swift.Bool = false,
            crawlWebLinks: Swift.Bool = false,
            enterpriseId: Swift.String? = nil,
            exclusionPatterns: [Swift.String]? = nil,
            fileFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            inclusionPatterns: [Swift.String]? = nil,
            secretArn: Swift.String? = nil,
            taskFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            useChangeLog: Swift.Bool = false,
            vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration? = nil,
            webLinkFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        )
        {
            self.commentFieldMappings = commentFieldMappings
            self.crawlComments = crawlComments
            self.crawlTasks = crawlTasks
            self.crawlWebLinks = crawlWebLinks
            self.enterpriseId = enterpriseId
            self.exclusionPatterns = exclusionPatterns
            self.fileFieldMappings = fileFieldMappings
            self.inclusionPatterns = inclusionPatterns
            self.secretArn = secretArn
            self.taskFieldMappings = taskFieldMappings
            self.useChangeLog = useChangeLog
            self.vpcConfiguration = vpcConfiguration
            self.webLinkFieldMappings = webLinkFieldMappings
        }
    }
}

extension KendraClientTypes {

    public enum ConfluenceAttachmentFieldName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case author
        case contentType
        case createdDate
        case displayUrl
        case fileSize
        case itemType
        case parentId
        case spaceKey
        case spaceName
        case url
        case version
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfluenceAttachmentFieldName] {
            return [
                .author,
                .contentType,
                .createdDate,
                .displayUrl,
                .fileSize,
                .itemType,
                .parentId,
                .spaceKey,
                .spaceName,
                .url,
                .version
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .author: return "AUTHOR"
            case .contentType: return "CONTENT_TYPE"
            case .createdDate: return "CREATED_DATE"
            case .displayUrl: return "DISPLAY_URL"
            case .fileSize: return "FILE_SIZE"
            case .itemType: return "ITEM_TYPE"
            case .parentId: return "PARENT_ID"
            case .spaceKey: return "SPACE_KEY"
            case .spaceName: return "SPACE_NAME"
            case .url: return "URL"
            case .version: return "VERSION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Maps attributes or field names of Confluence attachments to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Confluence fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Confuence data source field names must exist in your Confluence custom metadata.
    public struct ConfluenceAttachmentToIndexFieldMapping: Swift.Sendable {
        /// The name of the field in the data source. You must first create the index field using the UpdateIndex API.
        public var dataSourceFieldName: KendraClientTypes.ConfluenceAttachmentFieldName?
        /// The format for date fields in the data source. If the field specified in DataSourceFieldName is a date field you must specify the date format. If the field is not a date field, an exception is thrown.
        public var dateFieldFormat: Swift.String?
        /// The name of the index field to map to the Confluence data source field. The index field type must match the Confluence field type.
        public var indexFieldName: Swift.String?

        public init(
            dataSourceFieldName: KendraClientTypes.ConfluenceAttachmentFieldName? = nil,
            dateFieldFormat: Swift.String? = nil,
            indexFieldName: Swift.String? = nil
        )
        {
            self.dataSourceFieldName = dataSourceFieldName
            self.dateFieldFormat = dateFieldFormat
            self.indexFieldName = indexFieldName
        }
    }
}

extension KendraClientTypes {

    /// Configuration of attachment settings for the Confluence data source. Attachment settings are optional, if you don't specify settings attachments, Amazon Kendra won't index them.
    public struct ConfluenceAttachmentConfiguration: Swift.Sendable {
        /// Maps attributes or field names of Confluence attachments to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Confluence fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Confluence data source field names must exist in your Confluence custom metadata. If you specify the AttachentFieldMappings parameter, you must specify at least one field mapping.
        public var attachmentFieldMappings: [KendraClientTypes.ConfluenceAttachmentToIndexFieldMapping]?
        /// TRUE to index attachments of pages and blogs in Confluence.
        public var crawlAttachments: Swift.Bool

        public init(
            attachmentFieldMappings: [KendraClientTypes.ConfluenceAttachmentToIndexFieldMapping]? = nil,
            crawlAttachments: Swift.Bool = false
        )
        {
            self.attachmentFieldMappings = attachmentFieldMappings
            self.crawlAttachments = crawlAttachments
        }
    }
}

extension KendraClientTypes {

    public enum ConfluenceAuthenticationType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case httpBasic
        case pat
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfluenceAuthenticationType] {
            return [
                .httpBasic,
                .pat
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .httpBasic: return "HTTP_BASIC"
            case .pat: return "PAT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    public enum ConfluenceBlogFieldName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case author
        case displayUrl
        case itemType
        case labels
        case publishDate
        case spaceKey
        case spaceName
        case url
        case version
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfluenceBlogFieldName] {
            return [
                .author,
                .displayUrl,
                .itemType,
                .labels,
                .publishDate,
                .spaceKey,
                .spaceName,
                .url,
                .version
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .author: return "AUTHOR"
            case .displayUrl: return "DISPLAY_URL"
            case .itemType: return "ITEM_TYPE"
            case .labels: return "LABELS"
            case .publishDate: return "PUBLISH_DATE"
            case .spaceKey: return "SPACE_KEY"
            case .spaceName: return "SPACE_NAME"
            case .url: return "URL"
            case .version: return "VERSION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Maps attributes or field names of Confluence blog to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Confluence fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Confluence data source field names must exist in your Confluence custom metadata.
    public struct ConfluenceBlogToIndexFieldMapping: Swift.Sendable {
        /// The name of the field in the data source.
        public var dataSourceFieldName: KendraClientTypes.ConfluenceBlogFieldName?
        /// The format for date fields in the data source. If the field specified in DataSourceFieldName is a date field you must specify the date format. If the field is not a date field, an exception is thrown.
        public var dateFieldFormat: Swift.String?
        /// The name of the index field to map to the Confluence data source field. The index field type must match the Confluence field type.
        public var indexFieldName: Swift.String?

        public init(
            dataSourceFieldName: KendraClientTypes.ConfluenceBlogFieldName? = nil,
            dateFieldFormat: Swift.String? = nil,
            indexFieldName: Swift.String? = nil
        )
        {
            self.dataSourceFieldName = dataSourceFieldName
            self.dateFieldFormat = dateFieldFormat
            self.indexFieldName = indexFieldName
        }
    }
}

extension KendraClientTypes {

    /// Configuration of blog settings for the Confluence data source. Blogs are always indexed unless filtered from the index by the ExclusionPatterns or InclusionPatterns fields in the ConfluenceConfiguration object.
    public struct ConfluenceBlogConfiguration: Swift.Sendable {
        /// Maps attributes or field names of Confluence blogs to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Confluence fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Confluence data source field names must exist in your Confluence custom metadata. If you specify the BlogFieldMappings parameter, you must specify at least one field mapping.
        public var blogFieldMappings: [KendraClientTypes.ConfluenceBlogToIndexFieldMapping]?

        public init(
            blogFieldMappings: [KendraClientTypes.ConfluenceBlogToIndexFieldMapping]? = nil
        )
        {
            self.blogFieldMappings = blogFieldMappings
        }
    }
}

extension KendraClientTypes {

    public enum ConfluencePageFieldName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case author
        case contentStatus
        case createdDate
        case displayUrl
        case itemType
        case labels
        case modifiedDate
        case parentId
        case spaceKey
        case spaceName
        case url
        case version
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfluencePageFieldName] {
            return [
                .author,
                .contentStatus,
                .createdDate,
                .displayUrl,
                .itemType,
                .labels,
                .modifiedDate,
                .parentId,
                .spaceKey,
                .spaceName,
                .url,
                .version
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .author: return "AUTHOR"
            case .contentStatus: return "CONTENT_STATUS"
            case .createdDate: return "CREATED_DATE"
            case .displayUrl: return "DISPLAY_URL"
            case .itemType: return "ITEM_TYPE"
            case .labels: return "LABELS"
            case .modifiedDate: return "MODIFIED_DATE"
            case .parentId: return "PARENT_ID"
            case .spaceKey: return "SPACE_KEY"
            case .spaceName: return "SPACE_NAME"
            case .url: return "URL"
            case .version: return "VERSION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Maps attributes or field names of Confluence pages to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Confluence fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Confluence data source field names must exist in your Confluence custom metadata.
    public struct ConfluencePageToIndexFieldMapping: Swift.Sendable {
        /// The name of the field in the data source.
        public var dataSourceFieldName: KendraClientTypes.ConfluencePageFieldName?
        /// The format for date fields in the data source. If the field specified in DataSourceFieldName is a date field you must specify the date format. If the field is not a date field, an exception is thrown.
        public var dateFieldFormat: Swift.String?
        /// The name of the index field to map to the Confluence data source field. The index field type must match the Confluence field type.
        public var indexFieldName: Swift.String?

        public init(
            dataSourceFieldName: KendraClientTypes.ConfluencePageFieldName? = nil,
            dateFieldFormat: Swift.String? = nil,
            indexFieldName: Swift.String? = nil
        )
        {
            self.dataSourceFieldName = dataSourceFieldName
            self.dateFieldFormat = dateFieldFormat
            self.indexFieldName = indexFieldName
        }
    }
}

extension KendraClientTypes {

    /// Configuration of the page settings for the Confluence data source.
    public struct ConfluencePageConfiguration: Swift.Sendable {
        /// Maps attributes or field names of Confluence pages to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Confluence fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Confluence data source field names must exist in your Confluence custom metadata. If you specify the PageFieldMappings parameter, you must specify at least one field mapping.
        public var pageFieldMappings: [KendraClientTypes.ConfluencePageToIndexFieldMapping]?

        public init(
            pageFieldMappings: [KendraClientTypes.ConfluencePageToIndexFieldMapping]? = nil
        )
        {
            self.pageFieldMappings = pageFieldMappings
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for a web proxy to connect to website hosts.
    public struct ProxyConfiguration: Swift.Sendable {
        /// Your secret ARN, which you can create in [Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html) The credentials are optional. You use a secret if web proxy credentials are required to connect to a website host. Amazon Kendra currently support basic authentication to connect to a web proxy server. The secret stores your credentials.
        public var credentials: Swift.String?
        /// The name of the website host you want to connect to via a web proxy server. For example, the host name of https://a.example.com/page1.html is "a.example.com".
        /// This member is required.
        public var host: Swift.String?
        /// The port number of the website host you want to connect to via a web proxy server. For example, the port for https://a.example.com/page1.html is 443, the standard port for HTTPS.
        /// This member is required.
        public var port: Swift.Int?

        public init(
            credentials: Swift.String? = nil,
            host: Swift.String? = nil,
            port: Swift.Int? = nil
        )
        {
            self.credentials = credentials
            self.host = host
            self.port = port
        }
    }
}

extension KendraClientTypes {

    public enum ConfluenceSpaceFieldName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case displayUrl
        case itemType
        case spaceKey
        case url
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfluenceSpaceFieldName] {
            return [
                .displayUrl,
                .itemType,
                .spaceKey,
                .url
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .displayUrl: return "DISPLAY_URL"
            case .itemType: return "ITEM_TYPE"
            case .spaceKey: return "SPACE_KEY"
            case .url: return "URL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Maps attributes or field names of Confluence spaces to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Confluence fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Confluence data source field names must exist in your Confluence custom metadata.
    public struct ConfluenceSpaceToIndexFieldMapping: Swift.Sendable {
        /// The name of the field in the data source.
        public var dataSourceFieldName: KendraClientTypes.ConfluenceSpaceFieldName?
        /// The format for date fields in the data source. If the field specified in DataSourceFieldName is a date field you must specify the date format. If the field is not a date field, an exception is thrown.
        public var dateFieldFormat: Swift.String?
        /// The name of the index field to map to the Confluence data source field. The index field type must match the Confluence field type.
        public var indexFieldName: Swift.String?

        public init(
            dataSourceFieldName: KendraClientTypes.ConfluenceSpaceFieldName? = nil,
            dateFieldFormat: Swift.String? = nil,
            indexFieldName: Swift.String? = nil
        )
        {
            self.dataSourceFieldName = dataSourceFieldName
            self.dateFieldFormat = dateFieldFormat
            self.indexFieldName = indexFieldName
        }
    }
}

extension KendraClientTypes {

    /// Configuration information for indexing Confluence spaces.
    public struct ConfluenceSpaceConfiguration: Swift.Sendable {
        /// TRUE to index archived spaces.
        public var crawlArchivedSpaces: Swift.Bool
        /// TRUE to index personal spaces. You can add restrictions to items in personal spaces. If personal spaces are indexed, queries without user context information may return restricted items from a personal space in their results. For more information, see [Filtering on user context](https://docs.aws.amazon.com/kendra/latest/dg/user-context-filter.html).
        public var crawlPersonalSpaces: Swift.Bool
        /// A list of space keys of Confluence spaces. If you include a key, the blogs, documents, and attachments in the space are not indexed. If a space is in both the ExcludeSpaces and the IncludeSpaces list, the space is excluded.
        public var excludeSpaces: [Swift.String]?
        /// A list of space keys for Confluence spaces. If you include a key, the blogs, documents, and attachments in the space are indexed. Spaces that aren't in the list aren't indexed. A space in the list must exist. Otherwise, Amazon Kendra logs an error when the data source is synchronized. If a space is in both the IncludeSpaces and the ExcludeSpaces list, the space is excluded.
        public var includeSpaces: [Swift.String]?
        /// Maps attributes or field names of Confluence spaces to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Confluence fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Confluence data source field names must exist in your Confluence custom metadata. If you specify the SpaceFieldMappings parameter, you must specify at least one field mapping.
        public var spaceFieldMappings: [KendraClientTypes.ConfluenceSpaceToIndexFieldMapping]?

        public init(
            crawlArchivedSpaces: Swift.Bool = false,
            crawlPersonalSpaces: Swift.Bool = false,
            excludeSpaces: [Swift.String]? = nil,
            includeSpaces: [Swift.String]? = nil,
            spaceFieldMappings: [KendraClientTypes.ConfluenceSpaceToIndexFieldMapping]? = nil
        )
        {
            self.crawlArchivedSpaces = crawlArchivedSpaces
            self.crawlPersonalSpaces = crawlPersonalSpaces
            self.excludeSpaces = excludeSpaces
            self.includeSpaces = includeSpaces
            self.spaceFieldMappings = spaceFieldMappings
        }
    }
}

extension KendraClientTypes {

    public enum ConfluenceVersion: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cloud
        case server
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfluenceVersion] {
            return [
                .cloud,
                .server
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cloud: return "CLOUD"
            case .server: return "SERVER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to connect to Confluence as your data source.
    public struct ConfluenceConfiguration: Swift.Sendable {
        /// Configuration information for indexing attachments to Confluence blogs and pages.
        public var attachmentConfiguration: KendraClientTypes.ConfluenceAttachmentConfiguration?
        /// Whether you want to connect to Confluence using basic authentication of user name and password, or a personal access token. You can use a personal access token for Confluence Server.
        public var authenticationType: KendraClientTypes.ConfluenceAuthenticationType?
        /// Configuration information for indexing Confluence blogs.
        public var blogConfiguration: KendraClientTypes.ConfluenceBlogConfiguration?
        /// A list of regular expression patterns to exclude certain blog posts, pages, spaces, or attachments in your Confluence. Content that matches the patterns are excluded from the index. Content that doesn't match the patterns is included in the index. If content matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the content isn't included in the index.
        public var exclusionPatterns: [Swift.String]?
        /// A list of regular expression patterns to include certain blog posts, pages, spaces, or attachments in your Confluence. Content that matches the patterns are included in the index. Content that doesn't match the patterns is excluded from the index. If content matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the content isn't included in the index.
        public var inclusionPatterns: [Swift.String]?
        /// Configuration information for indexing Confluence pages.
        public var pageConfiguration: KendraClientTypes.ConfluencePageConfiguration?
        /// Configuration information to connect to your Confluence URL instance via a web proxy. You can use this option for Confluence Server. You must provide the website host name and port number. For example, the host name of https://a.example.com/page1.html is "a.example.com" and the port is 443, the standard port for HTTPS. Web proxy credentials are optional and you can use them to connect to a web proxy server that requires basic authentication of user name and password. To store web proxy credentials, you use a secret in Secrets Manager. It is recommended that you follow best security practices when configuring your web proxy. This includes setting up throttling, setting up logging and monitoring, and applying security patches on a regular basis. If you use your web proxy with multiple data sources, sync jobs that occur at the same time could strain the load on your proxy. It is recommended you prepare your proxy beforehand for any security and load requirements.
        public var proxyConfiguration: KendraClientTypes.ProxyConfiguration?
        /// The Amazon Resource Name (ARN) of an Secrets Manager secret that contains the user name and password required to connect to the Confluence instance. If you use Confluence Cloud, you use a generated API token as the password. You can also provide authentication credentials in the form of a personal access token. For more information, see [Using a Confluence data source](https://docs.aws.amazon.com/kendra/latest/dg/data-source-confluence.html).
        /// This member is required.
        public var secretArn: Swift.String?
        /// The URL of your Confluence instance. Use the full URL of the server. For example, https://server.example.com:port/. You can also use an IP address, for example, https://192.168.1.113/.
        /// This member is required.
        public var serverUrl: Swift.String?
        /// Configuration information for indexing Confluence spaces.
        public var spaceConfiguration: KendraClientTypes.ConfluenceSpaceConfiguration?
        /// The version or the type of Confluence installation to connect to.
        /// This member is required.
        public var version: KendraClientTypes.ConfluenceVersion?
        /// Configuration information for an Amazon Virtual Private Cloud to connect to your Confluence. For more information, see [Configuring a VPC](https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html).
        public var vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration?

        public init(
            attachmentConfiguration: KendraClientTypes.ConfluenceAttachmentConfiguration? = nil,
            authenticationType: KendraClientTypes.ConfluenceAuthenticationType? = nil,
            blogConfiguration: KendraClientTypes.ConfluenceBlogConfiguration? = nil,
            exclusionPatterns: [Swift.String]? = nil,
            inclusionPatterns: [Swift.String]? = nil,
            pageConfiguration: KendraClientTypes.ConfluencePageConfiguration? = nil,
            proxyConfiguration: KendraClientTypes.ProxyConfiguration? = nil,
            secretArn: Swift.String? = nil,
            serverUrl: Swift.String? = nil,
            spaceConfiguration: KendraClientTypes.ConfluenceSpaceConfiguration? = nil,
            version: KendraClientTypes.ConfluenceVersion? = nil,
            vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration? = nil
        )
        {
            self.attachmentConfiguration = attachmentConfiguration
            self.authenticationType = authenticationType
            self.blogConfiguration = blogConfiguration
            self.exclusionPatterns = exclusionPatterns
            self.inclusionPatterns = inclusionPatterns
            self.pageConfiguration = pageConfiguration
            self.proxyConfiguration = proxyConfiguration
            self.secretArn = secretArn
            self.serverUrl = serverUrl
            self.spaceConfiguration = spaceConfiguration
            self.version = version
            self.vpcConfiguration = vpcConfiguration
        }
    }
}

extension KendraClientTypes {

    /// Provides information about how Amazon Kendra should use the columns of a database in an index.
    public struct ColumnConfiguration: Swift.Sendable {
        /// One to five columns that indicate when a document in the database has changed.
        /// This member is required.
        public var changeDetectingColumns: [Swift.String]?
        /// The column that contains the contents of the document.
        /// This member is required.
        public var documentDataColumnName: Swift.String?
        /// The column that provides the document's identifier.
        /// This member is required.
        public var documentIdColumnName: Swift.String?
        /// The column that contains the title of the document.
        public var documentTitleColumnName: Swift.String?
        /// An array of objects that map database column names to the corresponding fields in an index. You must first create the fields in the index using the UpdateIndex API.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?

        public init(
            changeDetectingColumns: [Swift.String]? = nil,
            documentDataColumnName: Swift.String? = nil,
            documentIdColumnName: Swift.String? = nil,
            documentTitleColumnName: Swift.String? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        )
        {
            self.changeDetectingColumns = changeDetectingColumns
            self.documentDataColumnName = documentDataColumnName
            self.documentIdColumnName = documentIdColumnName
            self.documentTitleColumnName = documentTitleColumnName
            self.fieldMappings = fieldMappings
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information that's required to connect to a database.
    public struct ConnectionConfiguration: Swift.Sendable {
        /// The name of the host for the database. Can be either a string (host.subdomain.domain.tld) or an IPv4 or IPv6 address.
        /// This member is required.
        public var databaseHost: Swift.String?
        /// The name of the database containing the document data.
        /// This member is required.
        public var databaseName: Swift.String?
        /// The port that the database uses for connections.
        /// This member is required.
        public var databasePort: Swift.Int?
        /// The Amazon Resource Name (ARN) of credentials stored in Secrets Manager. The credentials should be a user/password pair. For more information, see [Using a Database Data Source](https://docs.aws.amazon.com/kendra/latest/dg/data-source-database.html). For more information about Secrets Manager, see [ What Is Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html) in the Secrets Manager user guide.
        /// This member is required.
        public var secretArn: Swift.String?
        /// The name of the table that contains the document data.
        /// This member is required.
        public var tableName: Swift.String?

        public init(
            databaseHost: Swift.String? = nil,
            databaseName: Swift.String? = nil,
            databasePort: Swift.Int? = nil,
            secretArn: Swift.String? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.databaseHost = databaseHost
            self.databaseName = databaseName
            self.databasePort = databasePort
            self.secretArn = secretArn
            self.tableName = tableName
        }
    }
}

extension KendraClientTypes {

    public enum DatabaseEngineType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case rdsAuroraMysql
        case rdsAuroraPostgresql
        case rdsMysql
        case rdsPostgresql
        case sdkUnknown(Swift.String)

        public static var allCases: [DatabaseEngineType] {
            return [
                .rdsAuroraMysql,
                .rdsAuroraPostgresql,
                .rdsMysql,
                .rdsPostgresql
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .rdsAuroraMysql: return "RDS_AURORA_MYSQL"
            case .rdsAuroraPostgresql: return "RDS_AURORA_POSTGRESQL"
            case .rdsMysql: return "RDS_MYSQL"
            case .rdsPostgresql: return "RDS_POSTGRESQL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    public enum QueryIdentifiersEnclosingOption: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case doubleQuotes
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [QueryIdentifiersEnclosingOption] {
            return [
                .doubleQuotes,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .doubleQuotes: return "DOUBLE_QUOTES"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to use a SQL database.
    public struct SqlConfiguration: Swift.Sendable {
        /// Determines whether Amazon Kendra encloses SQL identifiers for tables and column names in double quotes (") when making a database query. By default, Amazon Kendra passes SQL identifiers the way that they are entered into the data source configuration. It does not change the case of identifiers or enclose them in quotes. PostgreSQL internally converts uppercase characters to lower case characters in identifiers unless they are quoted. Choosing this option encloses identifiers in quotes so that PostgreSQL does not convert the character's case. For MySQL databases, you must enable the ansi_quotes option when you set this field to DOUBLE_QUOTES.
        public var queryIdentifiersEnclosingOption: KendraClientTypes.QueryIdentifiersEnclosingOption?

        public init(
            queryIdentifiersEnclosingOption: KendraClientTypes.QueryIdentifiersEnclosingOption? = nil
        )
        {
            self.queryIdentifiersEnclosingOption = queryIdentifiersEnclosingOption
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to an [Amazon Kendra supported database](https://docs.aws.amazon.com/kendra/latest/dg/data-source-database.html).
    public struct DatabaseConfiguration: Swift.Sendable {
        /// Information about the database column that provides information for user context filtering.
        public var aclConfiguration: KendraClientTypes.AclConfiguration?
        /// Information about where the index should get the document information from the database.
        /// This member is required.
        public var columnConfiguration: KendraClientTypes.ColumnConfiguration?
        /// Configuration information that's required to connect to a database.
        /// This member is required.
        public var connectionConfiguration: KendraClientTypes.ConnectionConfiguration?
        /// The type of database engine that runs the database.
        /// This member is required.
        public var databaseEngineType: KendraClientTypes.DatabaseEngineType?
        /// Provides information about how Amazon Kendra uses quote marks around SQL identifiers when querying a database data source.
        public var sqlConfiguration: KendraClientTypes.SqlConfiguration?
        /// Provides the configuration information to connect to an Amazon VPC.
        public var vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration?

        public init(
            aclConfiguration: KendraClientTypes.AclConfiguration? = nil,
            columnConfiguration: KendraClientTypes.ColumnConfiguration? = nil,
            connectionConfiguration: KendraClientTypes.ConnectionConfiguration? = nil,
            databaseEngineType: KendraClientTypes.DatabaseEngineType? = nil,
            sqlConfiguration: KendraClientTypes.SqlConfiguration? = nil,
            vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration? = nil
        )
        {
            self.aclConfiguration = aclConfiguration
            self.columnConfiguration = columnConfiguration
            self.connectionConfiguration = connectionConfiguration
            self.databaseEngineType = databaseEngineType
            self.sqlConfiguration = sqlConfiguration
            self.vpcConfiguration = vpcConfiguration
        }
    }
}

extension KendraClientTypes {

    public enum FsxFileSystemType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case windows
        case sdkUnknown(Swift.String)

        public static var allCases: [FsxFileSystemType] {
            return [
                .windows
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .windows: return "WINDOWS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to connect to Amazon FSx as your data source. Amazon Kendra now supports an upgraded Amazon FSx Windows connector. You must now use the [TemplateConfiguration](https://docs.aws.amazon.com/kendra/latest/APIReference/API_TemplateConfiguration.html) object instead of the FsxConfiguration object to configure your connector. Connectors configured using the older console and API architecture will continue to function as configured. However, you won't be able to edit or update them. If you want to edit or update your connector configuration, you must create a new connector. We recommended migrating your connector workflow to the upgraded version. Support for connectors configured using the older architecture is scheduled to end by June 2024.
    public struct FsxConfiguration: Swift.Sendable {
        /// A list of regular expression patterns to exclude certain files in your Amazon FSx file system. Files that match the patterns are excluded from the index. Files that don't match the patterns are included in the index. If a file matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.
        public var exclusionPatterns: [Swift.String]?
        /// A list of DataSourceToIndexFieldMapping objects that map Amazon FSx data source attributes or field names to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Amazon FSx fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Amazon FSx data source field names must exist in your Amazon FSx custom metadata.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// The identifier of the Amazon FSx file system. You can find your file system ID on the file system dashboard in the Amazon FSx console. For information on how to create a file system in Amazon FSx console, using Windows File Server as an example, see [Amazon FSx Getting started guide](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/getting-started-step1.html).
        /// This member is required.
        public var fileSystemId: Swift.String?
        /// The Amazon FSx file system type. Windows is currently the only supported type.
        /// This member is required.
        public var fileSystemType: KendraClientTypes.FsxFileSystemType?
        /// A list of regular expression patterns to include certain files in your Amazon FSx file system. Files that match the patterns are included in the index. Files that don't match the patterns are excluded from the index. If a file matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.
        public var inclusionPatterns: [Swift.String]?
        /// The Amazon Resource Name (ARN) of an Secrets Manager secret that contains the key-value pairs required to connect to your Amazon FSx file system. Windows is currently the only supported type. The secret must contain a JSON structure with the following keys:
        ///
        /// * username—The Active Directory user name, along with the Domain Name System (DNS) domain name. For example, user@corp.example.com. The Active Directory user account must have read and mounting access to the Amazon FSx file system for Windows.
        ///
        /// * password—The password of the Active Directory user account with read and mounting access to the Amazon FSx Windows file system.
        public var secretArn: Swift.String?
        /// Configuration information for an Amazon Virtual Private Cloud to connect to your Amazon FSx. Your Amazon FSx instance must reside inside your VPC.
        /// This member is required.
        public var vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration?

        public init(
            exclusionPatterns: [Swift.String]? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            fileSystemId: Swift.String? = nil,
            fileSystemType: KendraClientTypes.FsxFileSystemType? = nil,
            inclusionPatterns: [Swift.String]? = nil,
            secretArn: Swift.String? = nil,
            vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration? = nil
        )
        {
            self.exclusionPatterns = exclusionPatterns
            self.fieldMappings = fieldMappings
            self.fileSystemId = fileSystemId
            self.fileSystemType = fileSystemType
            self.inclusionPatterns = inclusionPatterns
            self.secretArn = secretArn
            self.vpcConfiguration = vpcConfiguration
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to include certain types of GitHub content. You can configure to index repository files only, or also include issues and pull requests, comments, and comment attachments.
    public struct GitHubDocumentCrawlProperties: Swift.Sendable {
        /// TRUE to index all issues within a repository.
        public var crawlIssue: Swift.Bool
        /// TRUE to index all comments on issues.
        public var crawlIssueComment: Swift.Bool
        /// TRUE to include all comment attachments for issues.
        public var crawlIssueCommentAttachment: Swift.Bool
        /// TRUE to index all pull requests within a repository.
        public var crawlPullRequest: Swift.Bool
        /// TRUE to index all comments on pull requests.
        public var crawlPullRequestComment: Swift.Bool
        /// TRUE to include all comment attachments for pull requests.
        public var crawlPullRequestCommentAttachment: Swift.Bool
        /// TRUE to index all files with a repository.
        public var crawlRepositoryDocuments: Swift.Bool

        public init(
            crawlIssue: Swift.Bool = false,
            crawlIssueComment: Swift.Bool = false,
            crawlIssueCommentAttachment: Swift.Bool = false,
            crawlPullRequest: Swift.Bool = false,
            crawlPullRequestComment: Swift.Bool = false,
            crawlPullRequestCommentAttachment: Swift.Bool = false,
            crawlRepositoryDocuments: Swift.Bool = false
        )
        {
            self.crawlIssue = crawlIssue
            self.crawlIssueComment = crawlIssueComment
            self.crawlIssueCommentAttachment = crawlIssueCommentAttachment
            self.crawlPullRequest = crawlPullRequest
            self.crawlPullRequestComment = crawlPullRequestComment
            self.crawlPullRequestCommentAttachment = crawlPullRequestCommentAttachment
            self.crawlRepositoryDocuments = crawlRepositoryDocuments
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to connect to GitHub Enterprise Server (on premises).
    public struct OnPremiseConfiguration: Swift.Sendable {
        /// The GitHub host URL or API endpoint URL. For example, https://on-prem-host-url/api/v3/
        /// This member is required.
        public var hostUrl: Swift.String?
        /// The name of the organization of the GitHub Enterprise Server (on-premises) account you want to connect to. You can find your organization name by logging into GitHub desktop and selecting Your organizations under your profile picture dropdown.
        /// This member is required.
        public var organizationName: Swift.String?
        /// The path to the SSL certificate stored in an Amazon S3 bucket. You use this to connect to GitHub if you require a secure SSL connection. You can simply generate a self-signed X509 certificate on any computer using OpenSSL. For an example of using OpenSSL to create an X509 certificate, see [Create and sign an X509 certificate](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/configuring-https-ssl.html).
        /// This member is required.
        public var sslCertificateS3Path: KendraClientTypes.S3Path?

        public init(
            hostUrl: Swift.String? = nil,
            organizationName: Swift.String? = nil,
            sslCertificateS3Path: KendraClientTypes.S3Path? = nil
        )
        {
            self.hostUrl = hostUrl
            self.organizationName = organizationName
            self.sslCertificateS3Path = sslCertificateS3Path
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to connect to GitHub Enterprise Cloud (SaaS).
    public struct SaaSConfiguration: Swift.Sendable {
        /// The GitHub host URL or API endpoint URL. For example, https://api.github.com.
        /// This member is required.
        public var hostUrl: Swift.String?
        /// The name of the organization of the GitHub Enterprise Cloud (SaaS) account you want to connect to. You can find your organization name by logging into GitHub desktop and selecting Your organizations under your profile picture dropdown.
        /// This member is required.
        public var organizationName: Swift.String?

        public init(
            hostUrl: Swift.String? = nil,
            organizationName: Swift.String? = nil
        )
        {
            self.hostUrl = hostUrl
            self.organizationName = organizationName
        }
    }
}

extension KendraClientTypes {

    public enum ModelType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case onPremise
        case saas
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelType] {
            return [
                .onPremise,
                .saas
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .onPremise: return "ON_PREMISE"
            case .saas: return "SAAS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to connect to GitHub as your data source. Amazon Kendra now supports an upgraded GitHub connector. You must now use the [TemplateConfiguration](https://docs.aws.amazon.com/kendra/latest/APIReference/API_TemplateConfiguration.html) object instead of the GitHubConfiguration object to configure your connector. Connectors configured using the older console and API architecture will continue to function as configured. However, you won’t be able to edit or update them. If you want to edit or update your connector configuration, you must create a new connector. We recommended migrating your connector workflow to the upgraded version. Support for connectors configured using the older architecture is scheduled to end by June 2024.
    public struct GitHubConfiguration: Swift.Sendable {
        /// A list of regular expression patterns to exclude certain file names in your GitHub repository or repositories. File names that match the patterns are excluded from the index. File names that don't match the patterns are included in the index. If a file matches both an exclusion and inclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.
        public var exclusionFileNamePatterns: [Swift.String]?
        /// A list of regular expression patterns to exclude certain file types in your GitHub repository or repositories. File types that match the patterns are excluded from the index. File types that don't match the patterns are included in the index. If a file matches both an exclusion and inclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.
        public var exclusionFileTypePatterns: [Swift.String]?
        /// A list of regular expression patterns to exclude certain folder names in your GitHub repository or repositories. Folder names that match the patterns are excluded from the index. Folder names that don't match the patterns are included in the index. If a folder matches both an exclusion and inclusion pattern, the exclusion pattern takes precedence and the folder isn't included in the index.
        public var exclusionFolderNamePatterns: [Swift.String]?
        /// A list of DataSourceToIndexFieldMapping objects that map attributes or field names of GitHub commits to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to GitHub fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The GitHub data source field names must exist in your GitHub custom metadata.
        public var gitHubCommitConfigurationFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// Configuration information to include certain types of GitHub content. You can configure to index repository files only, or also include issues and pull requests, comments, and comment attachments.
        public var gitHubDocumentCrawlProperties: KendraClientTypes.GitHubDocumentCrawlProperties?
        /// A list of DataSourceToIndexFieldMapping objects that map attributes or field names of GitHub issue attachments to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to GitHub fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The GitHub data source field names must exist in your GitHub custom metadata.
        public var gitHubIssueAttachmentConfigurationFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A list of DataSourceToIndexFieldMapping objects that map attributes or field names of GitHub issue comments to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to GitHub fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The GitHub data source field names must exist in your GitHub custom metadata.
        public var gitHubIssueCommentConfigurationFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A list of DataSourceToIndexFieldMapping objects that map attributes or field names of GitHub issues to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to GitHub fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The GitHub data source field names must exist in your GitHub custom metadata.
        public var gitHubIssueDocumentConfigurationFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A list of DataSourceToIndexFieldMapping objects that map attributes or field names of GitHub pull request comments to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to GitHub fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The GitHub data source field names must exist in your GitHub custom metadata.
        public var gitHubPullRequestCommentConfigurationFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A list of DataSourceToIndexFieldMapping objects that map attributes or field names of GitHub pull request attachments to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to GitHub fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The GitHub data source field names must exist in your GitHub custom metadata.
        public var gitHubPullRequestDocumentAttachmentConfigurationFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A list of DataSourceToIndexFieldMapping objects that map attributes or field names of GitHub pull requests to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to GitHub fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The GitHub data source field names must exist in your GitHub custom metadata.
        public var gitHubPullRequestDocumentConfigurationFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A list of DataSourceToIndexFieldMapping objects that map GitHub repository attributes or field names to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to GitHub fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The GitHub data source field names must exist in your GitHub custom metadata.
        public var gitHubRepositoryConfigurationFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A list of regular expression patterns to include certain file names in your GitHub repository or repositories. File names that match the patterns are included in the index. File names that don't match the patterns are excluded from the index. If a file matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.
        public var inclusionFileNamePatterns: [Swift.String]?
        /// A list of regular expression patterns to include certain file types in your GitHub repository or repositories. File types that match the patterns are included in the index. File types that don't match the patterns are excluded from the index. If a file matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.
        public var inclusionFileTypePatterns: [Swift.String]?
        /// A list of regular expression patterns to include certain folder names in your GitHub repository or repositories. Folder names that match the patterns are included in the index. Folder names that don't match the patterns are excluded from the index. If a folder matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the folder isn't included in the index.
        public var inclusionFolderNamePatterns: [Swift.String]?
        /// Configuration information to connect to GitHub Enterprise Server (on premises).
        public var onPremiseConfiguration: KendraClientTypes.OnPremiseConfiguration?
        /// A list of names of the specific repositories you want to index.
        public var repositoryFilter: [Swift.String]?
        /// Configuration information to connect to GitHub Enterprise Cloud (SaaS).
        public var saaSConfiguration: KendraClientTypes.SaaSConfiguration?
        /// The Amazon Resource Name (ARN) of an Secrets Manager secret that contains the key-value pairs required to connect to your GitHub. The secret must contain a JSON structure with the following keys:
        ///
        /// * personalToken—The access token created in GitHub. For more information on creating a token in GitHub, see [Using a GitHub data source](https://docs.aws.amazon.com/kendra/latest/dg/data-source-github.html).
        /// This member is required.
        public var secretArn: Swift.String?
        /// The type of GitHub service you want to connect to—GitHub Enterprise Cloud (SaaS) or GitHub Enterprise Server (on premises).
        public var type: KendraClientTypes.ModelType?
        /// TRUE to use the GitHub change log to determine which documents require updating in the index. Depending on the GitHub change log's size, it may take longer for Amazon Kendra to use the change log than to scan all of your documents in GitHub.
        public var useChangeLog: Swift.Bool
        /// Configuration information of an Amazon Virtual Private Cloud to connect to your GitHub. For more information, see [Configuring a VPC](https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html).
        public var vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration?

        public init(
            exclusionFileNamePatterns: [Swift.String]? = nil,
            exclusionFileTypePatterns: [Swift.String]? = nil,
            exclusionFolderNamePatterns: [Swift.String]? = nil,
            gitHubCommitConfigurationFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            gitHubDocumentCrawlProperties: KendraClientTypes.GitHubDocumentCrawlProperties? = nil,
            gitHubIssueAttachmentConfigurationFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            gitHubIssueCommentConfigurationFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            gitHubIssueDocumentConfigurationFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            gitHubPullRequestCommentConfigurationFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            gitHubPullRequestDocumentAttachmentConfigurationFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            gitHubPullRequestDocumentConfigurationFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            gitHubRepositoryConfigurationFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            inclusionFileNamePatterns: [Swift.String]? = nil,
            inclusionFileTypePatterns: [Swift.String]? = nil,
            inclusionFolderNamePatterns: [Swift.String]? = nil,
            onPremiseConfiguration: KendraClientTypes.OnPremiseConfiguration? = nil,
            repositoryFilter: [Swift.String]? = nil,
            saaSConfiguration: KendraClientTypes.SaaSConfiguration? = nil,
            secretArn: Swift.String? = nil,
            type: KendraClientTypes.ModelType? = nil,
            useChangeLog: Swift.Bool = false,
            vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration? = nil
        )
        {
            self.exclusionFileNamePatterns = exclusionFileNamePatterns
            self.exclusionFileTypePatterns = exclusionFileTypePatterns
            self.exclusionFolderNamePatterns = exclusionFolderNamePatterns
            self.gitHubCommitConfigurationFieldMappings = gitHubCommitConfigurationFieldMappings
            self.gitHubDocumentCrawlProperties = gitHubDocumentCrawlProperties
            self.gitHubIssueAttachmentConfigurationFieldMappings = gitHubIssueAttachmentConfigurationFieldMappings
            self.gitHubIssueCommentConfigurationFieldMappings = gitHubIssueCommentConfigurationFieldMappings
            self.gitHubIssueDocumentConfigurationFieldMappings = gitHubIssueDocumentConfigurationFieldMappings
            self.gitHubPullRequestCommentConfigurationFieldMappings = gitHubPullRequestCommentConfigurationFieldMappings
            self.gitHubPullRequestDocumentAttachmentConfigurationFieldMappings = gitHubPullRequestDocumentAttachmentConfigurationFieldMappings
            self.gitHubPullRequestDocumentConfigurationFieldMappings = gitHubPullRequestDocumentConfigurationFieldMappings
            self.gitHubRepositoryConfigurationFieldMappings = gitHubRepositoryConfigurationFieldMappings
            self.inclusionFileNamePatterns = inclusionFileNamePatterns
            self.inclusionFileTypePatterns = inclusionFileTypePatterns
            self.inclusionFolderNamePatterns = inclusionFolderNamePatterns
            self.onPremiseConfiguration = onPremiseConfiguration
            self.repositoryFilter = repositoryFilter
            self.saaSConfiguration = saaSConfiguration
            self.secretArn = secretArn
            self.type = type
            self.useChangeLog = useChangeLog
            self.vpcConfiguration = vpcConfiguration
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to connect to Google Drive as your data source.
    public struct GoogleDriveConfiguration: Swift.Sendable {
        /// A list of MIME types to exclude from the index. All documents matching the specified MIME type are excluded. For a list of MIME types, see [Using a Google Workspace Drive data source](https://docs.aws.amazon.com/kendra/latest/dg/data-source-google-drive.html).
        public var excludeMimeTypes: [Swift.String]?
        /// A list of identifiers or shared drives to exclude from the index. All files and folders stored on the shared drive are excluded.
        public var excludeSharedDrives: [Swift.String]?
        /// A list of email addresses of the users. Documents owned by these users are excluded from the index. Documents shared with excluded users are indexed unless they are excluded in another way.
        public var excludeUserAccounts: [Swift.String]?
        /// A list of regular expression patterns to exclude certain items in your Google Drive, including shared drives and users' My Drives. Items that match the patterns are excluded from the index. Items that don't match the patterns are included in the index. If an item matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the item isn't included in the index.
        public var exclusionPatterns: [Swift.String]?
        /// Maps Google Drive data source attributes or field names to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Google Drive fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Google Drive data source field names must exist in your Google Drive custom metadata.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A list of regular expression patterns to include certain items in your Google Drive, including shared drives and users' My Drives. Items that match the patterns are included in the index. Items that don't match the patterns are excluded from the index. If an item matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the item isn't included in the index.
        public var inclusionPatterns: [Swift.String]?
        /// The Amazon Resource Name (ARN) of a Secrets Managersecret that contains the credentials required to connect to Google Drive. For more information, see [Using a Google Workspace Drive data source](https://docs.aws.amazon.com/kendra/latest/dg/data-source-google-drive.html).
        /// This member is required.
        public var secretArn: Swift.String?

        public init(
            excludeMimeTypes: [Swift.String]? = nil,
            excludeSharedDrives: [Swift.String]? = nil,
            excludeUserAccounts: [Swift.String]? = nil,
            exclusionPatterns: [Swift.String]? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            inclusionPatterns: [Swift.String]? = nil,
            secretArn: Swift.String? = nil
        )
        {
            self.excludeMimeTypes = excludeMimeTypes
            self.excludeSharedDrives = excludeSharedDrives
            self.excludeUserAccounts = excludeUserAccounts
            self.exclusionPatterns = exclusionPatterns
            self.fieldMappings = fieldMappings
            self.inclusionPatterns = inclusionPatterns
            self.secretArn = secretArn
        }
    }
}

extension KendraClientTypes {

    public enum IssueSubEntity: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case attachments
        case comments
        case worklogs
        case sdkUnknown(Swift.String)

        public static var allCases: [IssueSubEntity] {
            return [
                .attachments,
                .comments,
                .worklogs
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .attachments: return "ATTACHMENTS"
            case .comments: return "COMMENTS"
            case .worklogs: return "WORKLOGS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to connect to Jira as your data source.
    public struct JiraConfiguration: Swift.Sendable {
        /// A list of DataSourceToIndexFieldMapping objects that map attributes or field names of Jira attachments to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Jira fields. For more information, see [ Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Jira data source field names must exist in your Jira custom metadata.
        public var attachmentFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A list of DataSourceToIndexFieldMapping objects that map attributes or field names of Jira comments to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Jira fields. For more information, see [ Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Jira data source field names must exist in your Jira custom metadata.
        public var commentFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A list of regular expression patterns to exclude certain file paths, file names, and file types in your Jira data source. Files that match the patterns are excluded from the index. Files that don’t match the patterns are included in the index. If a file matches both an inclusion pattern and an exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.
        public var exclusionPatterns: [Swift.String]?
        /// A list of regular expression patterns to include certain file paths, file names, and file types in your Jira data source. Files that match the patterns are included in the index. Files that don't match the patterns are excluded from the index. If a file matches both an inclusion pattern and an exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.
        public var inclusionPatterns: [Swift.String]?
        /// A list of DataSourceToIndexFieldMapping objects that map attributes or field names of Jira issues to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Jira fields. For more information, see [ Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Jira data source field names must exist in your Jira custom metadata.
        public var issueFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// Specify whether to crawl comments, attachments, and work logs. You can specify one or more of these options.
        public var issueSubEntityFilter: [KendraClientTypes.IssueSubEntity]?
        /// Specify which issue types to crawl in your Jira data source. You can specify one or more of these options to crawl.
        public var issueType: [Swift.String]?
        /// The URL of the Jira account. For example, company.atlassian.net.
        /// This member is required.
        public var jiraAccountUrl: Swift.String?
        /// Specify which projects to crawl in your Jira data source. You can specify one or more Jira project IDs.
        public var project: [Swift.String]?
        /// A list of DataSourceToIndexFieldMapping objects that map attributes or field names of Jira projects to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Jira fields. For more information, see [ Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Jira data source field names must exist in your Jira custom metadata.
        public var projectFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// The Amazon Resource Name (ARN) of a secret in Secrets Manager contains the key-value pairs required to connect to your Jira data source. The secret must contain a JSON structure with the following keys:
        ///
        /// * jiraId—The Jira user name or email.
        ///
        /// * jiraCredentials—The Jira API token. For more information, see [Using a Jira data source](https://docs.aws.amazon.com/kendra/latest/dg/data-source-jira.html).
        /// This member is required.
        public var secretArn: Swift.String?
        /// Specify which statuses to crawl in your Jira data source. You can specify one or more of these options to crawl.
        public var status: [Swift.String]?
        /// TRUE to use the Jira change log to determine which documents require updating in the index. Depending on the change log's size, it may take longer for Amazon Kendra to use the change log than to scan all of your documents in Jira.
        public var useChangeLog: Swift.Bool
        /// Configuration information for an Amazon Virtual Private Cloud to connect to your Jira. For more information, see [Configuring a VPC](https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html).
        public var vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration?
        /// A list of DataSourceToIndexFieldMapping objects that map attributes or field names of Jira work logs to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Jira fields. For more information, see [ Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Jira data source field names must exist in your Jira custom metadata.
        public var workLogFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?

        public init(
            attachmentFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            commentFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            exclusionPatterns: [Swift.String]? = nil,
            inclusionPatterns: [Swift.String]? = nil,
            issueFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            issueSubEntityFilter: [KendraClientTypes.IssueSubEntity]? = nil,
            issueType: [Swift.String]? = nil,
            jiraAccountUrl: Swift.String? = nil,
            project: [Swift.String]? = nil,
            projectFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            secretArn: Swift.String? = nil,
            status: [Swift.String]? = nil,
            useChangeLog: Swift.Bool = false,
            vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration? = nil,
            workLogFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        )
        {
            self.attachmentFieldMappings = attachmentFieldMappings
            self.commentFieldMappings = commentFieldMappings
            self.exclusionPatterns = exclusionPatterns
            self.inclusionPatterns = inclusionPatterns
            self.issueFieldMappings = issueFieldMappings
            self.issueSubEntityFilter = issueSubEntityFilter
            self.issueType = issueType
            self.jiraAccountUrl = jiraAccountUrl
            self.project = project
            self.projectFieldMappings = projectFieldMappings
            self.secretArn = secretArn
            self.status = status
            self.useChangeLog = useChangeLog
            self.vpcConfiguration = vpcConfiguration
            self.workLogFieldMappings = workLogFieldMappings
        }
    }
}

extension KendraClientTypes {

    /// User accounts whose documents should be indexed.
    public struct OneDriveUsers: Swift.Sendable {
        /// A list of users whose documents should be indexed. Specify the user names in email format, for example, username@tenantdomain. If you need to index the documents of more than 100 users, use the OneDriveUserS3Path field to specify the location of a file containing a list of users.
        public var oneDriveUserList: [Swift.String]?
        /// The S3 bucket location of a file containing a list of users whose documents should be indexed.
        public var oneDriveUserS3Path: KendraClientTypes.S3Path?

        public init(
            oneDriveUserList: [Swift.String]? = nil,
            oneDriveUserS3Path: KendraClientTypes.S3Path? = nil
        )
        {
            self.oneDriveUserList = oneDriveUserList
            self.oneDriveUserS3Path = oneDriveUserS3Path
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to connect to OneDrive as your data source.
    public struct OneDriveConfiguration: Swift.Sendable {
        /// TRUE to disable local groups information.
        public var disableLocalGroups: Swift.Bool
        /// A list of regular expression patterns to exclude certain documents in your OneDrive. Documents that match the patterns are excluded from the index. Documents that don't match the patterns are included in the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index. The pattern is applied to the file name.
        public var exclusionPatterns: [Swift.String]?
        /// A list of DataSourceToIndexFieldMapping objects that map OneDrive data source attributes or field names to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to OneDrive fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The OneDrive data source field names must exist in your OneDrive custom metadata.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A list of regular expression patterns to include certain documents in your OneDrive. Documents that match the patterns are included in the index. Documents that don't match the patterns are excluded from the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index. The pattern is applied to the file name.
        public var inclusionPatterns: [Swift.String]?
        /// A list of user accounts whose documents should be indexed.
        /// This member is required.
        public var oneDriveUsers: KendraClientTypes.OneDriveUsers?
        /// The Amazon Resource Name (ARN) of an Secrets Managersecret that contains the user name and password to connect to OneDrive. The user name should be the application ID for the OneDrive application, and the password is the application key for the OneDrive application.
        /// This member is required.
        public var secretArn: Swift.String?
        /// The Azure Active Directory domain of the organization.
        /// This member is required.
        public var tenantDomain: Swift.String?

        public init(
            disableLocalGroups: Swift.Bool = false,
            exclusionPatterns: [Swift.String]? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            inclusionPatterns: [Swift.String]? = nil,
            oneDriveUsers: KendraClientTypes.OneDriveUsers? = nil,
            secretArn: Swift.String? = nil,
            tenantDomain: Swift.String? = nil
        )
        {
            self.disableLocalGroups = disableLocalGroups
            self.exclusionPatterns = exclusionPatterns
            self.fieldMappings = fieldMappings
            self.inclusionPatterns = inclusionPatterns
            self.oneDriveUsers = oneDriveUsers
            self.secretArn = secretArn
            self.tenantDomain = tenantDomain
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to connect to Quip as your data source.
    public struct QuipConfiguration: Swift.Sendable {
        /// A list of DataSourceToIndexFieldMapping objects that map attributes or field names of Quip attachments to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Quip fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Quip field names must exist in your Quip custom metadata.
        public var attachmentFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// TRUE to index attachments.
        public var crawlAttachments: Swift.Bool
        /// TRUE to index the contents of chat rooms.
        public var crawlChatRooms: Swift.Bool
        /// TRUE to index file comments.
        public var crawlFileComments: Swift.Bool
        /// The Quip site domain. For example, https://quip-company.quipdomain.com/browse. The domain in this example is "quipdomain".
        /// This member is required.
        public var domain: Swift.String?
        /// A list of regular expression patterns to exclude certain files in your Quip file system. Files that match the patterns are excluded from the index. Files that don’t match the patterns are included in the index. If a file matches both an inclusion pattern and an exclusion pattern, the exclusion pattern takes precedence, and the file isn't included in the index.
        public var exclusionPatterns: [Swift.String]?
        /// The identifiers of the Quip folders you want to index. You can find the folder ID in your browser URL when you access your folder in Quip. For example, https://quip-company.quipdomain.com/zlLuOVNSarTL/folder-name. The folder ID in this example is "zlLuOVNSarTL".
        public var folderIds: [Swift.String]?
        /// A list of regular expression patterns to include certain files in your Quip file system. Files that match the patterns are included in the index. Files that don't match the patterns are excluded from the index. If a file matches both an inclusion pattern and an exclusion pattern, the exclusion pattern takes precedence, and the file isn't included in the index.
        public var inclusionPatterns: [Swift.String]?
        /// A list of DataSourceToIndexFieldMapping objects that map attributes or field names of Quip messages to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Quip fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Quip field names must exist in your Quip custom metadata.
        public var messageFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// The Amazon Resource Name (ARN) of an Secrets Manager secret that contains the key-value pairs that are required to connect to your Quip. The secret must contain a JSON structure with the following keys:
        ///
        /// * accessToken—The token created in Quip. For more information, see [Using a Quip data source](https://docs.aws.amazon.com/kendra/latest/dg/data-source-slack.html).
        /// This member is required.
        public var secretArn: Swift.String?
        /// A list of DataSourceToIndexFieldMapping objects that map attributes or field names of Quip threads to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Quip fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Quip field names must exist in your Quip custom metadata.
        public var threadFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// Configuration information for an Amazon Virtual Private Cloud (VPC) to connect to your Quip. For more information, see [Configuring a VPC](https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html).
        public var vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration?

        public init(
            attachmentFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            crawlAttachments: Swift.Bool = false,
            crawlChatRooms: Swift.Bool = false,
            crawlFileComments: Swift.Bool = false,
            domain: Swift.String? = nil,
            exclusionPatterns: [Swift.String]? = nil,
            folderIds: [Swift.String]? = nil,
            inclusionPatterns: [Swift.String]? = nil,
            messageFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            secretArn: Swift.String? = nil,
            threadFieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration? = nil
        )
        {
            self.attachmentFieldMappings = attachmentFieldMappings
            self.crawlAttachments = crawlAttachments
            self.crawlChatRooms = crawlChatRooms
            self.crawlFileComments = crawlFileComments
            self.domain = domain
            self.exclusionPatterns = exclusionPatterns
            self.folderIds = folderIds
            self.inclusionPatterns = inclusionPatterns
            self.messageFieldMappings = messageFieldMappings
            self.secretArn = secretArn
            self.threadFieldMappings = threadFieldMappings
            self.vpcConfiguration = vpcConfiguration
        }
    }
}

extension KendraClientTypes {

    /// Document metadata files that contain information such as the document access control information, source URI, document author, and custom attributes. Each metadata file contains metadata about a single document.
    public struct DocumentsMetadataConfiguration: Swift.Sendable {
        /// A prefix used to filter metadata configuration files in the Amazon Web Services S3 bucket. The S3 bucket might contain multiple metadata files. Use S3Prefix to include only the desired metadata files.
        public var s3Prefix: Swift.String?

        public init(
            s3Prefix: Swift.String? = nil
        )
        {
            self.s3Prefix = s3Prefix
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to connect to an Amazon S3 bucket. Amazon Kendra now supports an upgraded Amazon S3 connector. You must now use the [TemplateConfiguration](https://docs.aws.amazon.com/kendra/latest/APIReference/API_TemplateConfiguration.html) object instead of the S3DataSourceConfiguration object to configure your connector. Connectors configured using the older console and API architecture will continue to function as configured. However, you won't be able to edit or update them. If you want to edit or update your connector configuration, you must create a new connector. We recommended migrating your connector workflow to the upgraded version. Support for connectors configured using the older architecture is scheduled to end by June 2024.
    public struct S3DataSourceConfiguration: Swift.Sendable {
        /// Provides the path to the S3 bucket that contains the user context filtering files for the data source. For the format of the file, see [Access control for S3 data sources](https://docs.aws.amazon.com/kendra/latest/dg/s3-acl.html).
        public var accessControlListConfiguration: KendraClientTypes.AccessControlListConfiguration?
        /// The name of the bucket that contains the documents.
        /// This member is required.
        public var bucketName: Swift.String?
        /// Document metadata files that contain information such as the document access control information, source URI, document author, and custom attributes. Each metadata file contains metadata about a single document.
        public var documentsMetadataConfiguration: KendraClientTypes.DocumentsMetadataConfiguration?
        /// A list of glob patterns (patterns that can expand a wildcard pattern into a list of path names that match the given pattern) for certain file names and file types to exclude from your index. If a document matches both an inclusion and exclusion prefix or pattern, the exclusion prefix takes precendence and the document is not indexed. Examples of glob patterns include:
        ///
        /// * /myapp/config/*—All files inside config directory.
        ///
        /// * **/*.png—All .png files in all directories.
        ///
        /// * **/*.{png, ico, md}—All .png, .ico or .md files in all directories.
        ///
        /// * /myapp/src/**/*.ts—All .ts files inside src directory (and all its subdirectories).
        ///
        /// * **/!(*.module).ts—All .ts files but not .module.ts
        ///
        /// * *.png , *.jpg—All PNG and JPEG image files in a directory (files with the extensions .png and .jpg).
        ///
        /// * *internal*—All files in a directory that contain 'internal' in the file name, such as 'internal', 'internal_only', 'company_internal'.
        ///
        /// * **/*internal*—All internal-related files in a directory and its subdirectories.
        ///
        ///
        /// For more examples, see [Use of Exclude and Include Filters](https://docs.aws.amazon.com/cli/latest/reference/s3/#use-of-exclude-and-include-filters) in the Amazon Web Services CLI Command Reference.
        public var exclusionPatterns: [Swift.String]?
        /// A list of glob patterns (patterns that can expand a wildcard pattern into a list of path names that match the given pattern) for certain file names and file types to include in your index. If a document matches both an inclusion and exclusion prefix or pattern, the exclusion prefix takes precendence and the document is not indexed. Examples of glob patterns include:
        ///
        /// * /myapp/config/*—All files inside config directory.
        ///
        /// * **/*.png—All .png files in all directories.
        ///
        /// * **/*.{png, ico, md}—All .png, .ico or .md files in all directories.
        ///
        /// * /myapp/src/**/*.ts—All .ts files inside src directory (and all its subdirectories).
        ///
        /// * **/!(*.module).ts—All .ts files but not .module.ts
        ///
        /// * *.png , *.jpg—All PNG and JPEG image files in a directory (files with the extensions .png and .jpg).
        ///
        /// * *internal*—All files in a directory that contain 'internal' in the file name, such as 'internal', 'internal_only', 'company_internal'.
        ///
        /// * **/*internal*—All internal-related files in a directory and its subdirectories.
        ///
        ///
        /// For more examples, see [Use of Exclude and Include Filters](https://docs.aws.amazon.com/cli/latest/reference/s3/#use-of-exclude-and-include-filters) in the Amazon Web Services CLI Command Reference.
        public var inclusionPatterns: [Swift.String]?
        /// A list of S3 prefixes for the documents that should be included in the index.
        public var inclusionPrefixes: [Swift.String]?

        public init(
            accessControlListConfiguration: KendraClientTypes.AccessControlListConfiguration? = nil,
            bucketName: Swift.String? = nil,
            documentsMetadataConfiguration: KendraClientTypes.DocumentsMetadataConfiguration? = nil,
            exclusionPatterns: [Swift.String]? = nil,
            inclusionPatterns: [Swift.String]? = nil,
            inclusionPrefixes: [Swift.String]? = nil
        )
        {
            self.accessControlListConfiguration = accessControlListConfiguration
            self.bucketName = bucketName
            self.documentsMetadataConfiguration = documentsMetadataConfiguration
            self.exclusionPatterns = exclusionPatterns
            self.inclusionPatterns = inclusionPatterns
            self.inclusionPrefixes = inclusionPrefixes
        }
    }
}

extension KendraClientTypes {

    public enum SalesforceChatterFeedIncludeFilterType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case activeUser
        case standardUser
        case sdkUnknown(Swift.String)

        public static var allCases: [SalesforceChatterFeedIncludeFilterType] {
            return [
                .activeUser,
                .standardUser
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .activeUser: return "ACTIVE_USER"
            case .standardUser: return "STANDARD_USER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// The configuration information for syncing a Salesforce chatter feed. The contents of the object comes from the Salesforce FeedItem table.
    public struct SalesforceChatterFeedConfiguration: Swift.Sendable {
        /// The name of the column in the Salesforce FeedItem table that contains the content to index. Typically this is the Body column.
        /// This member is required.
        public var documentDataFieldName: Swift.String?
        /// The name of the column in the Salesforce FeedItem table that contains the title of the document. This is typically the Title column.
        public var documentTitleFieldName: Swift.String?
        /// Maps fields from a Salesforce chatter feed into Amazon Kendra index fields.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// Filters the documents in the feed based on status of the user. When you specify ACTIVE_USERS only documents from users who have an active account are indexed. When you specify STANDARD_USER only documents for Salesforce standard users are documented. You can specify both.
        public var includeFilterTypes: [KendraClientTypes.SalesforceChatterFeedIncludeFilterType]?

        public init(
            documentDataFieldName: Swift.String? = nil,
            documentTitleFieldName: Swift.String? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            includeFilterTypes: [KendraClientTypes.SalesforceChatterFeedIncludeFilterType]? = nil
        )
        {
            self.documentDataFieldName = documentDataFieldName
            self.documentTitleFieldName = documentTitleFieldName
            self.fieldMappings = fieldMappings
            self.includeFilterTypes = includeFilterTypes
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for indexing Salesforce custom articles.
    public struct SalesforceCustomKnowledgeArticleTypeConfiguration: Swift.Sendable {
        /// The name of the field in the custom knowledge article that contains the document data to index.
        /// This member is required.
        public var documentDataFieldName: Swift.String?
        /// The name of the field in the custom knowledge article that contains the document title.
        public var documentTitleFieldName: Swift.String?
        /// Maps attributes or field names of the custom knowledge article to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Salesforce fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Salesforce data source field names must exist in your Salesforce custom metadata.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// The name of the configuration.
        /// This member is required.
        public var name: Swift.String?

        public init(
            documentDataFieldName: Swift.String? = nil,
            documentTitleFieldName: Swift.String? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            name: Swift.String? = nil
        )
        {
            self.documentDataFieldName = documentDataFieldName
            self.documentTitleFieldName = documentTitleFieldName
            self.fieldMappings = fieldMappings
            self.name = name
        }
    }
}

extension KendraClientTypes {

    public enum SalesforceKnowledgeArticleState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case archived
        case draft
        case published
        case sdkUnknown(Swift.String)

        public static var allCases: [SalesforceKnowledgeArticleState] {
            return [
                .archived,
                .draft,
                .published
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .archived: return "ARCHIVED"
            case .draft: return "DRAFT"
            case .published: return "PUBLISHED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for standard Salesforce knowledge articles.
    public struct SalesforceStandardKnowledgeArticleTypeConfiguration: Swift.Sendable {
        /// The name of the field that contains the document data to index.
        /// This member is required.
        public var documentDataFieldName: Swift.String?
        /// The name of the field that contains the document title.
        public var documentTitleFieldName: Swift.String?
        /// Maps attributes or field names of the knowledge article to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Salesforce fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Salesforce data source field names must exist in your Salesforce custom metadata.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?

        public init(
            documentDataFieldName: Swift.String? = nil,
            documentTitleFieldName: Swift.String? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        )
        {
            self.documentDataFieldName = documentDataFieldName
            self.documentTitleFieldName = documentTitleFieldName
            self.fieldMappings = fieldMappings
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for the knowledge article types that Amazon Kendra indexes. Amazon Kendra indexes standard knowledge articles and the standard fields of knowledge articles, or the custom fields of custom knowledge articles, but not both
    public struct SalesforceKnowledgeArticleConfiguration: Swift.Sendable {
        /// Configuration information for custom Salesforce knowledge articles.
        public var customKnowledgeArticleTypeConfigurations: [KendraClientTypes.SalesforceCustomKnowledgeArticleTypeConfiguration]?
        /// Specifies the document states that should be included when Amazon Kendra indexes knowledge articles. You must specify at least one state.
        /// This member is required.
        public var includedStates: [KendraClientTypes.SalesforceKnowledgeArticleState]?
        /// Configuration information for standard Salesforce knowledge articles.
        public var standardKnowledgeArticleTypeConfiguration: KendraClientTypes.SalesforceStandardKnowledgeArticleTypeConfiguration?

        public init(
            customKnowledgeArticleTypeConfigurations: [KendraClientTypes.SalesforceCustomKnowledgeArticleTypeConfiguration]? = nil,
            includedStates: [KendraClientTypes.SalesforceKnowledgeArticleState]? = nil,
            standardKnowledgeArticleTypeConfiguration: KendraClientTypes.SalesforceStandardKnowledgeArticleTypeConfiguration? = nil
        )
        {
            self.customKnowledgeArticleTypeConfigurations = customKnowledgeArticleTypeConfigurations
            self.includedStates = includedStates
            self.standardKnowledgeArticleTypeConfiguration = standardKnowledgeArticleTypeConfiguration
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for processing attachments to Salesforce standard objects.
    public struct SalesforceStandardObjectAttachmentConfiguration: Swift.Sendable {
        /// The name of the field used for the document title.
        public var documentTitleFieldName: Swift.String?
        /// One or more objects that map fields in attachments to Amazon Kendra index fields.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?

        public init(
            documentTitleFieldName: Swift.String? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        )
        {
            self.documentTitleFieldName = documentTitleFieldName
            self.fieldMappings = fieldMappings
        }
    }
}

extension KendraClientTypes {

    public enum SalesforceStandardObjectName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case account
        case campaign
        case `case`
        case contact
        case contract
        case document
        case group
        case idea
        case lead
        case opportunity
        case partner
        case pricebook
        case product
        case profile
        case solution
        case task
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [SalesforceStandardObjectName] {
            return [
                .account,
                .campaign,
                .case,
                .contact,
                .contract,
                .document,
                .group,
                .idea,
                .lead,
                .opportunity,
                .partner,
                .pricebook,
                .product,
                .profile,
                .solution,
                .task,
                .user
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .account: return "ACCOUNT"
            case .campaign: return "CAMPAIGN"
            case .case: return "CASE"
            case .contact: return "CONTACT"
            case .contract: return "CONTRACT"
            case .document: return "DOCUMENT"
            case .group: return "GROUP"
            case .idea: return "IDEA"
            case .lead: return "LEAD"
            case .opportunity: return "OPPORTUNITY"
            case .partner: return "PARTNER"
            case .pricebook: return "PRICEBOOK"
            case .product: return "PRODUCT"
            case .profile: return "PROFILE"
            case .solution: return "SOLUTION"
            case .task: return "TASK"
            case .user: return "USER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for indexing a single standard object.
    public struct SalesforceStandardObjectConfiguration: Swift.Sendable {
        /// The name of the field in the standard object table that contains the document contents.
        /// This member is required.
        public var documentDataFieldName: Swift.String?
        /// The name of the field in the standard object table that contains the document title.
        public var documentTitleFieldName: Swift.String?
        /// Maps attributes or field names of the standard object to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Salesforce fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Salesforce data source field names must exist in your Salesforce custom metadata.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// The name of the standard object.
        /// This member is required.
        public var name: KendraClientTypes.SalesforceStandardObjectName?

        public init(
            documentDataFieldName: Swift.String? = nil,
            documentTitleFieldName: Swift.String? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            name: KendraClientTypes.SalesforceStandardObjectName? = nil
        )
        {
            self.documentDataFieldName = documentDataFieldName
            self.documentTitleFieldName = documentTitleFieldName
            self.fieldMappings = fieldMappings
            self.name = name
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to connect to Salesforce as your data source.
    public struct SalesforceConfiguration: Swift.Sendable {
        /// Configuration information for Salesforce chatter feeds.
        public var chatterFeedConfiguration: KendraClientTypes.SalesforceChatterFeedConfiguration?
        /// Indicates whether Amazon Kendra should index attachments to Salesforce objects.
        public var crawlAttachments: Swift.Bool
        /// A list of regular expression patterns to exclude certain documents in your Salesforce. Documents that match the patterns are excluded from the index. Documents that don't match the patterns are included in the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index. The pattern is applied to the name of the attached file.
        public var excludeAttachmentFilePatterns: [Swift.String]?
        /// A list of regular expression patterns to include certain documents in your Salesforce. Documents that match the patterns are included in the index. Documents that don't match the patterns are excluded from the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index. The pattern is applied to the name of the attached file.
        public var includeAttachmentFilePatterns: [Swift.String]?
        /// Configuration information for the knowledge article types that Amazon Kendra indexes. Amazon Kendra indexes standard knowledge articles and the standard fields of knowledge articles, or the custom fields of custom knowledge articles, but not both.
        public var knowledgeArticleConfiguration: KendraClientTypes.SalesforceKnowledgeArticleConfiguration?
        /// The Amazon Resource Name (ARN) of an Secrets Managersecret that contains the key/value pairs required to connect to your Salesforce instance. The secret must contain a JSON structure with the following keys:
        ///
        /// * authenticationUrl - The OAUTH endpoint that Amazon Kendra connects to get an OAUTH token.
        ///
        /// * consumerKey - The application public key generated when you created your Salesforce application.
        ///
        /// * consumerSecret - The application private key generated when you created your Salesforce application.
        ///
        /// * password - The password associated with the user logging in to the Salesforce instance.
        ///
        /// * securityToken - The token associated with the user logging in to the Salesforce instance.
        ///
        /// * username - The user name of the user logging in to the Salesforce instance.
        /// This member is required.
        public var secretArn: Swift.String?
        /// The instance URL for the Salesforce site that you want to index.
        /// This member is required.
        public var serverUrl: Swift.String?
        /// Configuration information for processing attachments to Salesforce standard objects.
        public var standardObjectAttachmentConfiguration: KendraClientTypes.SalesforceStandardObjectAttachmentConfiguration?
        /// Configuration of the Salesforce standard objects that Amazon Kendra indexes.
        public var standardObjectConfigurations: [KendraClientTypes.SalesforceStandardObjectConfiguration]?

        public init(
            chatterFeedConfiguration: KendraClientTypes.SalesforceChatterFeedConfiguration? = nil,
            crawlAttachments: Swift.Bool = false,
            excludeAttachmentFilePatterns: [Swift.String]? = nil,
            includeAttachmentFilePatterns: [Swift.String]? = nil,
            knowledgeArticleConfiguration: KendraClientTypes.SalesforceKnowledgeArticleConfiguration? = nil,
            secretArn: Swift.String? = nil,
            serverUrl: Swift.String? = nil,
            standardObjectAttachmentConfiguration: KendraClientTypes.SalesforceStandardObjectAttachmentConfiguration? = nil,
            standardObjectConfigurations: [KendraClientTypes.SalesforceStandardObjectConfiguration]? = nil
        )
        {
            self.chatterFeedConfiguration = chatterFeedConfiguration
            self.crawlAttachments = crawlAttachments
            self.excludeAttachmentFilePatterns = excludeAttachmentFilePatterns
            self.includeAttachmentFilePatterns = includeAttachmentFilePatterns
            self.knowledgeArticleConfiguration = knowledgeArticleConfiguration
            self.secretArn = secretArn
            self.serverUrl = serverUrl
            self.standardObjectAttachmentConfiguration = standardObjectAttachmentConfiguration
            self.standardObjectConfigurations = standardObjectConfigurations
        }
    }
}

extension KendraClientTypes {

    public enum ServiceNowAuthenticationType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case httpBasic
        case oauth2
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceNowAuthenticationType] {
            return [
                .httpBasic,
                .oauth2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .httpBasic: return "HTTP_BASIC"
            case .oauth2: return "OAUTH2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for crawling knowledge articles in the ServiceNow site.
    public struct ServiceNowKnowledgeArticleConfiguration: Swift.Sendable {
        /// TRUE to index attachments to knowledge articles.
        public var crawlAttachments: Swift.Bool
        /// The name of the ServiceNow field that is mapped to the index document contents field in the Amazon Kendra index.
        /// This member is required.
        public var documentDataFieldName: Swift.String?
        /// The name of the ServiceNow field that is mapped to the index document title field.
        public var documentTitleFieldName: Swift.String?
        /// A list of regular expression patterns applied to exclude certain knowledge article attachments. Attachments that match the patterns are excluded from the index. Items that don't match the patterns are included in the index. If an item matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the item isn't included in the index.
        public var excludeAttachmentFilePatterns: [Swift.String]?
        /// Maps attributes or field names of knoweldge articles to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to ServiceNow fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The ServiceNow data source field names must exist in your ServiceNow custom metadata.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A query that selects the knowledge articles to index. The query can return articles from multiple knowledge bases, and the knowledge bases can be public or private. The query string must be one generated by the ServiceNow console. For more information, see [Specifying documents to index with a query](https://docs.aws.amazon.com/kendra/latest/dg/servicenow-query.html).
        public var filterQuery: Swift.String?
        /// A list of regular expression patterns applied to include knowledge article attachments. Attachments that match the patterns are included in the index. Items that don't match the patterns are excluded from the index. If an item matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the item isn't included in the index.
        public var includeAttachmentFilePatterns: [Swift.String]?

        public init(
            crawlAttachments: Swift.Bool = false,
            documentDataFieldName: Swift.String? = nil,
            documentTitleFieldName: Swift.String? = nil,
            excludeAttachmentFilePatterns: [Swift.String]? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            filterQuery: Swift.String? = nil,
            includeAttachmentFilePatterns: [Swift.String]? = nil
        )
        {
            self.crawlAttachments = crawlAttachments
            self.documentDataFieldName = documentDataFieldName
            self.documentTitleFieldName = documentTitleFieldName
            self.excludeAttachmentFilePatterns = excludeAttachmentFilePatterns
            self.fieldMappings = fieldMappings
            self.filterQuery = filterQuery
            self.includeAttachmentFilePatterns = includeAttachmentFilePatterns
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for crawling service catalog items in the ServiceNow site
    public struct ServiceNowServiceCatalogConfiguration: Swift.Sendable {
        /// TRUE to index attachments to service catalog items.
        public var crawlAttachments: Swift.Bool
        /// The name of the ServiceNow field that is mapped to the index document contents field in the Amazon Kendra index.
        /// This member is required.
        public var documentDataFieldName: Swift.String?
        /// The name of the ServiceNow field that is mapped to the index document title field.
        public var documentTitleFieldName: Swift.String?
        /// A list of regular expression patterns to exclude certain attachments of catalogs in your ServiceNow. Item that match the patterns are excluded from the index. Items that don't match the patterns are included in the index. If an item matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the item isn't included in the index. The regex is applied to the file name of the attachment.
        public var excludeAttachmentFilePatterns: [Swift.String]?
        /// Maps attributes or field names of catalogs to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to ServiceNow fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The ServiceNow data source field names must exist in your ServiceNow custom metadata.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A list of regular expression patterns to include certain attachments of catalogs in your ServiceNow. Item that match the patterns are included in the index. Items that don't match the patterns are excluded from the index. If an item matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the item isn't included in the index. The regex is applied to the file name of the attachment.
        public var includeAttachmentFilePatterns: [Swift.String]?

        public init(
            crawlAttachments: Swift.Bool = false,
            documentDataFieldName: Swift.String? = nil,
            documentTitleFieldName: Swift.String? = nil,
            excludeAttachmentFilePatterns: [Swift.String]? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            includeAttachmentFilePatterns: [Swift.String]? = nil
        )
        {
            self.crawlAttachments = crawlAttachments
            self.documentDataFieldName = documentDataFieldName
            self.documentTitleFieldName = documentTitleFieldName
            self.excludeAttachmentFilePatterns = excludeAttachmentFilePatterns
            self.fieldMappings = fieldMappings
            self.includeAttachmentFilePatterns = includeAttachmentFilePatterns
        }
    }
}

extension KendraClientTypes {

    public enum ServiceNowBuildVersionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case london
        case others
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceNowBuildVersionType] {
            return [
                .london,
                .others
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .london: return "LONDON"
            case .others: return "OTHERS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to connect to ServiceNow as your data source.
    public struct ServiceNowConfiguration: Swift.Sendable {
        /// The type of authentication used to connect to the ServiceNow instance. If you choose HTTP_BASIC, Amazon Kendra is authenticated using the user name and password provided in the Secrets Manager secret in the SecretArn field. If you choose OAUTH2, Amazon Kendra is authenticated using the credentials of client ID, client secret, user name and password. When you use OAUTH2 authentication, you must generate a token and a client secret using the ServiceNow console. For more information, see [Using a ServiceNow data source](https://docs.aws.amazon.com/kendra/latest/dg/data-source-servicenow.html).
        public var authenticationType: KendraClientTypes.ServiceNowAuthenticationType?
        /// The ServiceNow instance that the data source connects to. The host endpoint should look like the following: {instance}.service-now.com.
        /// This member is required.
        public var hostUrl: Swift.String?
        /// Configuration information for crawling knowledge articles in the ServiceNow site.
        public var knowledgeArticleConfiguration: KendraClientTypes.ServiceNowKnowledgeArticleConfiguration?
        /// The Amazon Resource Name (ARN) of the Secrets Manager secret that contains the user name and password required to connect to the ServiceNow instance. You can also provide OAuth authentication credentials of user name, password, client ID, and client secret. For more information, see [Using a ServiceNow data source](https://docs.aws.amazon.com/kendra/latest/dg/data-source-servicenow.html).
        /// This member is required.
        public var secretArn: Swift.String?
        /// Configuration information for crawling service catalogs in the ServiceNow site.
        public var serviceCatalogConfiguration: KendraClientTypes.ServiceNowServiceCatalogConfiguration?
        /// The identifier of the release that the ServiceNow host is running. If the host is not running the LONDON release, use OTHERS.
        /// This member is required.
        public var serviceNowBuildVersion: KendraClientTypes.ServiceNowBuildVersionType?

        public init(
            authenticationType: KendraClientTypes.ServiceNowAuthenticationType? = nil,
            hostUrl: Swift.String? = nil,
            knowledgeArticleConfiguration: KendraClientTypes.ServiceNowKnowledgeArticleConfiguration? = nil,
            secretArn: Swift.String? = nil,
            serviceCatalogConfiguration: KendraClientTypes.ServiceNowServiceCatalogConfiguration? = nil,
            serviceNowBuildVersion: KendraClientTypes.ServiceNowBuildVersionType? = nil
        )
        {
            self.authenticationType = authenticationType
            self.hostUrl = hostUrl
            self.knowledgeArticleConfiguration = knowledgeArticleConfiguration
            self.secretArn = secretArn
            self.serviceCatalogConfiguration = serviceCatalogConfiguration
            self.serviceNowBuildVersion = serviceNowBuildVersion
        }
    }
}

extension KendraClientTypes {

    public enum SharePointOnlineAuthenticationType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case httpBasic
        case oauth2
        case sdkUnknown(Swift.String)

        public static var allCases: [SharePointOnlineAuthenticationType] {
            return [
                .httpBasic,
                .oauth2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .httpBasic: return "HTTP_BASIC"
            case .oauth2: return "OAUTH2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    public enum SharePointVersion: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case sharepoint2013
        case sharepoint2016
        case sharepoint2019
        case sharepointOnline
        case sdkUnknown(Swift.String)

        public static var allCases: [SharePointVersion] {
            return [
                .sharepoint2013,
                .sharepoint2016,
                .sharepoint2019,
                .sharepointOnline
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .sharepoint2013: return "SHAREPOINT_2013"
            case .sharepoint2016: return "SHAREPOINT_2016"
            case .sharepoint2019: return "SHAREPOINT_2019"
            case .sharepointOnline: return "SHAREPOINT_ONLINE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to connect to Microsoft SharePoint as your data source.
    public struct SharePointConfiguration: Swift.Sendable {
        /// Whether you want to connect to SharePoint Online using basic authentication of user name and password, or OAuth authentication of user name, password, client ID, and client secret, or AD App-only authentication of client secret.
        public var authenticationType: KendraClientTypes.SharePointOnlineAuthenticationType?
        /// TRUE to index document attachments.
        public var crawlAttachments: Swift.Bool
        /// TRUE to disable local groups information.
        public var disableLocalGroups: Swift.Bool
        /// The Microsoft SharePoint attribute field that contains the title of the document.
        public var documentTitleFieldName: Swift.String?
        /// A list of regular expression patterns to exclude certain documents in your SharePoint. Documents that match the patterns are excluded from the index. Documents that don't match the patterns are included in the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index. The regex applies to the display URL of the SharePoint document.
        public var exclusionPatterns: [Swift.String]?
        /// A list of DataSourceToIndexFieldMapping objects that map SharePoint data source attributes or field names to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to SharePoint fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The SharePoint data source field names must exist in your SharePoint custom metadata.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A list of regular expression patterns to include certain documents in your SharePoint. Documents that match the patterns are included in the index. Documents that don't match the patterns are excluded from the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index. The regex applies to the display URL of the SharePoint document.
        public var inclusionPatterns: [Swift.String]?
        /// Configuration information to connect to your Microsoft SharePoint site URLs via instance via a web proxy. You can use this option for SharePoint Server. You must provide the website host name and port number. For example, the host name of https://a.example.com/page1.html is "a.example.com" and the port is 443, the standard port for HTTPS. Web proxy credentials are optional and you can use them to connect to a web proxy server that requires basic authentication of user name and password. To store web proxy credentials, you use a secret in Secrets Manager. It is recommended that you follow best security practices when configuring your web proxy. This includes setting up throttling, setting up logging and monitoring, and applying security patches on a regular basis. If you use your web proxy with multiple data sources, sync jobs that occur at the same time could strain the load on your proxy. It is recommended you prepare your proxy beforehand for any security and load requirements.
        public var proxyConfiguration: KendraClientTypes.ProxyConfiguration?
        /// The Amazon Resource Name (ARN) of an Secrets Manager secret that contains the user name and password required to connect to the SharePoint instance. For more information, see [Microsoft SharePoint](https://docs.aws.amazon.com/kendra/latest/dg/data-source-sharepoint.html).
        /// This member is required.
        public var secretArn: Swift.String?
        /// The version of Microsoft SharePoint that you use.
        /// This member is required.
        public var sharePointVersion: KendraClientTypes.SharePointVersion?
        /// The path to the SSL certificate stored in an Amazon S3 bucket. You use this to connect to SharePoint Server if you require a secure SSL connection. You can generate a self-signed X509 certificate on any computer using OpenSSL. For an example of using OpenSSL to create an X509 certificate, see [Create and sign an X509 certificate](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/configuring-https-ssl.html).
        public var sslCertificateS3Path: KendraClientTypes.S3Path?
        /// The Microsoft SharePoint site URLs for the documents you want to index.
        /// This member is required.
        public var urls: [Swift.String]?
        /// TRUE to use the SharePoint change log to determine which documents require updating in the index. Depending on the change log's size, it may take longer for Amazon Kendra to use the change log than to scan all of your documents in SharePoint.
        public var useChangeLog: Swift.Bool
        /// Configuration information for an Amazon Virtual Private Cloud to connect to your Microsoft SharePoint. For more information, see [Configuring a VPC](https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html).
        public var vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration?

        public init(
            authenticationType: KendraClientTypes.SharePointOnlineAuthenticationType? = nil,
            crawlAttachments: Swift.Bool = false,
            disableLocalGroups: Swift.Bool = false,
            documentTitleFieldName: Swift.String? = nil,
            exclusionPatterns: [Swift.String]? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            inclusionPatterns: [Swift.String]? = nil,
            proxyConfiguration: KendraClientTypes.ProxyConfiguration? = nil,
            secretArn: Swift.String? = nil,
            sharePointVersion: KendraClientTypes.SharePointVersion? = nil,
            sslCertificateS3Path: KendraClientTypes.S3Path? = nil,
            urls: [Swift.String]? = nil,
            useChangeLog: Swift.Bool = false,
            vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration? = nil
        )
        {
            self.authenticationType = authenticationType
            self.crawlAttachments = crawlAttachments
            self.disableLocalGroups = disableLocalGroups
            self.documentTitleFieldName = documentTitleFieldName
            self.exclusionPatterns = exclusionPatterns
            self.fieldMappings = fieldMappings
            self.inclusionPatterns = inclusionPatterns
            self.proxyConfiguration = proxyConfiguration
            self.secretArn = secretArn
            self.sharePointVersion = sharePointVersion
            self.sslCertificateS3Path = sslCertificateS3Path
            self.urls = urls
            self.useChangeLog = useChangeLog
            self.vpcConfiguration = vpcConfiguration
        }
    }
}

extension KendraClientTypes {

    public enum SlackEntity: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case directMessage
        case groupMessage
        case privateChannel
        case publicChannel
        case sdkUnknown(Swift.String)

        public static var allCases: [SlackEntity] {
            return [
                .directMessage,
                .groupMessage,
                .privateChannel,
                .publicChannel
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .directMessage: return "DIRECT_MESSAGE"
            case .groupMessage: return "GROUP_MESSAGE"
            case .privateChannel: return "PRIVATE_CHANNEL"
            case .publicChannel: return "PUBLIC_CHANNEL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to connect to Slack as your data source. Amazon Kendra now supports an upgraded Slack connector. You must now use the [TemplateConfiguration](https://docs.aws.amazon.com/kendra/latest/APIReference/API_TemplateConfiguration.html) object instead of the SlackConfiguration object to configure your connector. Connectors configured using the older console and API architecture will continue to function as configured. However, you won’t be able to edit or update them. If you want to edit or update your connector configuration, you must create a new connector. We recommended migrating your connector workflow to the upgraded version. Support for connectors configured using the older architecture is scheduled to end by June 2024.
    public struct SlackConfiguration: Swift.Sendable {
        /// TRUE to index bot messages from your Slack workspace team.
        public var crawlBotMessage: Swift.Bool
        /// TRUE to exclude archived messages to index from your Slack workspace team.
        public var excludeArchived: Swift.Bool
        /// A list of regular expression patterns to exclude certain attached files in your Slack workspace team. Files that match the patterns are excluded from the index. Files that don’t match the patterns are included in the index. If a file matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.
        public var exclusionPatterns: [Swift.String]?
        /// A list of DataSourceToIndexFieldMapping objects that map Slack data source attributes or field names to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Slack fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Slack data source field names must exist in your Slack custom metadata.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A list of regular expression patterns to include certain attached files in your Slack workspace team. Files that match the patterns are included in the index. Files that don't match the patterns are excluded from the index. If a file matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.
        public var inclusionPatterns: [Swift.String]?
        /// The number of hours for change log to look back from when you last synchronized your data. You can look back up to 7 days or 168 hours. Change log updates your index only if new content was added since you last synced your data. Updated or deleted content from before you last synced does not get updated in your index. To capture updated or deleted content before you last synced, set the LookBackPeriod to the number of hours you want change log to look back.
        public var lookBackPeriod: Swift.Int?
        /// The list of private channel names from your Slack workspace team. You use this if you want to index specific private channels, not all private channels. You can also use regular expression patterns to filter private channels.
        public var privateChannelFilter: [Swift.String]?
        /// The list of public channel names to index from your Slack workspace team. You use this if you want to index specific public channels, not all public channels. You can also use regular expression patterns to filter public channels.
        public var publicChannelFilter: [Swift.String]?
        /// The Amazon Resource Name (ARN) of an Secrets Manager secret that contains the key-value pairs required to connect to your Slack workspace team. The secret must contain a JSON structure with the following keys:
        ///
        /// * slackToken—The user or bot token created in Slack. For more information on creating a token in Slack, see [Authentication for a Slack data source](https://docs.aws.amazon.com/kendra/latest/dg/data-source-slack.html#slack-authentication).
        /// This member is required.
        public var secretArn: Swift.String?
        /// The date to start crawling your data from your Slack workspace team. The date must follow this format: yyyy-mm-dd.
        /// This member is required.
        public var sinceCrawlDate: Swift.String?
        /// Specify whether to index public channels, private channels, group messages, and direct messages. You can specify one or more of these options.
        /// This member is required.
        public var slackEntityList: [KendraClientTypes.SlackEntity]?
        /// The identifier of the team in the Slack workspace. For example, T0123456789. You can find your team ID in the URL of the main page of your Slack workspace. When you log in to Slack via a browser, you are directed to the URL of the main page. For example, https://app.slack.com/client/T0123456789/....
        /// This member is required.
        public var teamId: Swift.String?
        /// TRUE to use the Slack change log to determine which documents require updating in the index. Depending on the Slack change log's size, it may take longer for Amazon Kendra to use the change log than to scan all of your documents in Slack.
        public var useChangeLog: Swift.Bool
        /// Configuration information for an Amazon Virtual Private Cloud to connect to your Slack. For more information, see [Configuring a VPC](https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html).
        public var vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration?

        public init(
            crawlBotMessage: Swift.Bool = false,
            excludeArchived: Swift.Bool = false,
            exclusionPatterns: [Swift.String]? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            inclusionPatterns: [Swift.String]? = nil,
            lookBackPeriod: Swift.Int? = nil,
            privateChannelFilter: [Swift.String]? = nil,
            publicChannelFilter: [Swift.String]? = nil,
            secretArn: Swift.String? = nil,
            sinceCrawlDate: Swift.String? = nil,
            slackEntityList: [KendraClientTypes.SlackEntity]? = nil,
            teamId: Swift.String? = nil,
            useChangeLog: Swift.Bool = false,
            vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration? = nil
        )
        {
            self.crawlBotMessage = crawlBotMessage
            self.excludeArchived = excludeArchived
            self.exclusionPatterns = exclusionPatterns
            self.fieldMappings = fieldMappings
            self.inclusionPatterns = inclusionPatterns
            self.lookBackPeriod = lookBackPeriod
            self.privateChannelFilter = privateChannelFilter
            self.publicChannelFilter = publicChannelFilter
            self.secretArn = secretArn
            self.sinceCrawlDate = sinceCrawlDate
            self.slackEntityList = slackEntityList
            self.teamId = teamId
            self.useChangeLog = useChangeLog
            self.vpcConfiguration = vpcConfiguration
        }
    }
}

extension KendraClientTypes {

    /// Provides a template for the configuration information to connect to your data source.
    public struct TemplateConfiguration: Swift.Sendable {
        /// The template schema used for the data source, where templates schemas are supported. See [Data source template schemas](https://docs.aws.amazon.com/kendra/latest/dg/ds-schemas.html).
        public var template: Smithy.Document?

        public init(
            template: Smithy.Document? = nil
        )
        {
            self.template = template
        }
    }
}

extension KendraClientTypes {

    public enum WebCrawlerMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case everything
        case hostOnly
        case subdomains
        case sdkUnknown(Swift.String)

        public static var allCases: [WebCrawlerMode] {
            return [
                .everything,
                .hostOnly,
                .subdomains
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .everything: return "EVERYTHING"
            case .hostOnly: return "HOST_ONLY"
            case .subdomains: return "SUBDOMAINS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for the seed or starting point URLs to crawl. When selecting websites to index, you must adhere to the [Amazon Acceptable Use Policy](https://aws.amazon.com/aup/) and all other Amazon terms. Remember that you must only use Amazon Kendra Web Crawler to index your own web pages, or web pages that you have authorization to index.
    public struct SeedUrlConfiguration: Swift.Sendable {
        /// The list of seed or starting point URLs of the websites you want to crawl. The list can include a maximum of 100 seed URLs.
        /// This member is required.
        public var seedUrls: [Swift.String]?
        /// You can choose one of the following modes:
        ///
        /// * HOST_ONLY—crawl only the website host names. For example, if the seed URL is "abc.example.com", then only URLs with host name "abc.example.com" are crawled.
        ///
        /// * SUBDOMAINS—crawl the website host names with subdomains. For example, if the seed URL is "abc.example.com", then "a.abc.example.com" and "b.abc.example.com" are also crawled.
        ///
        /// * EVERYTHING—crawl the website host names with subdomains and other domains that the web pages link to.
        ///
        ///
        /// The default mode is set to HOST_ONLY.
        public var webCrawlerMode: KendraClientTypes.WebCrawlerMode?

        public init(
            seedUrls: [Swift.String]? = nil,
            webCrawlerMode: KendraClientTypes.WebCrawlerMode? = nil
        )
        {
            self.seedUrls = seedUrls
            self.webCrawlerMode = webCrawlerMode
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for the sitemap URLs to crawl. When selecting websites to index, you must adhere to the [Amazon Acceptable Use Policy](https://aws.amazon.com/aup/) and all other Amazon terms. Remember that you must only use Amazon Kendra Web Crawler to index your own web pages, or web pages that you have authorization to index.
    public struct SiteMapsConfiguration: Swift.Sendable {
        /// The list of sitemap URLs of the websites you want to crawl. The list can include a maximum of three sitemap URLs.
        /// This member is required.
        public var siteMaps: [Swift.String]?

        public init(
            siteMaps: [Swift.String]? = nil
        )
        {
            self.siteMaps = siteMaps
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information of the URLs to crawl. You can only crawl websites that use the secure communication protocol, Hypertext Transfer Protocol Secure (HTTPS). If you receive an error when crawling a website, it could be that the website is blocked from crawling. When selecting websites to index, you must adhere to the [Amazon Acceptable Use Policy](https://aws.amazon.com/aup/) and all other Amazon terms. Remember that you must only use Amazon Kendra Web Crawler to index your own web pages, or web pages that you have authorization to index.
    public struct Urls: Swift.Sendable {
        /// Configuration of the seed or starting point URLs of the websites you want to crawl. You can choose to crawl only the website host names, or the website host names with subdomains, or the website host names with subdomains and other domains that the web pages link to. You can list up to 100 seed URLs.
        public var seedUrlConfiguration: KendraClientTypes.SeedUrlConfiguration?
        /// Configuration of the sitemap URLs of the websites you want to crawl. Only URLs belonging to the same website host names are crawled. You can list up to three sitemap URLs.
        public var siteMapsConfiguration: KendraClientTypes.SiteMapsConfiguration?

        public init(
            seedUrlConfiguration: KendraClientTypes.SeedUrlConfiguration? = nil,
            siteMapsConfiguration: KendraClientTypes.SiteMapsConfiguration? = nil
        )
        {
            self.seedUrlConfiguration = seedUrlConfiguration
            self.siteMapsConfiguration = siteMapsConfiguration
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information required for Amazon Kendra Web Crawler.
    public struct WebCrawlerConfiguration: Swift.Sendable {
        /// Configuration information required to connect to websites using authentication. You can connect to websites using basic authentication of user name and password. You use a secret in [Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html) to store your authentication credentials. You must provide the website host name and port number. For example, the host name of https://a.example.com/page1.html is "a.example.com" and the port is 443, the standard port for HTTPS.
        public var authenticationConfiguration: KendraClientTypes.AuthenticationConfiguration?
        /// The 'depth' or number of levels from the seed level to crawl. For example, the seed URL page is depth 1 and any hyperlinks on this page that are also crawled are depth 2.
        public var crawlDepth: Swift.Int?
        /// The maximum size (in MB) of a web page or attachment to crawl. Files larger than this size (in MB) are skipped/not crawled. The default maximum size of a web page or attachment is set to 50 MB.
        public var maxContentSizePerPageInMegaBytes: Swift.Float?
        /// The maximum number of URLs on a web page to include when crawling a website. This number is per web page. As a website’s web pages are crawled, any URLs the web pages link to are also crawled. URLs on a web page are crawled in order of appearance. The default maximum links per page is 100.
        public var maxLinksPerPage: Swift.Int?
        /// The maximum number of URLs crawled per website host per minute. A minimum of one URL is required. The default maximum number of URLs crawled per website host per minute is 300.
        public var maxUrlsPerMinuteCrawlRate: Swift.Int?
        /// Configuration information required to connect to your internal websites via a web proxy. You must provide the website host name and port number. For example, the host name of https://a.example.com/page1.html is "a.example.com" and the port is 443, the standard port for HTTPS. Web proxy credentials are optional and you can use them to connect to a web proxy server that requires basic authentication. To store web proxy credentials, you use a secret in [Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html).
        public var proxyConfiguration: KendraClientTypes.ProxyConfiguration?
        /// A list of regular expression patterns to exclude certain URLs to crawl. URLs that match the patterns are excluded from the index. URLs that don't match the patterns are included in the index. If a URL matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the URL file isn't included in the index.
        public var urlExclusionPatterns: [Swift.String]?
        /// A list of regular expression patterns to include certain URLs to crawl. URLs that match the patterns are included in the index. URLs that don't match the patterns are excluded from the index. If a URL matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the URL file isn't included in the index.
        public var urlInclusionPatterns: [Swift.String]?
        /// Specifies the seed or starting point URLs of the websites or the sitemap URLs of the websites you want to crawl. You can include website subdomains. You can list up to 100 seed URLs and up to three sitemap URLs. You can only crawl websites that use the secure communication protocol, Hypertext Transfer Protocol Secure (HTTPS). If you receive an error when crawling a website, it could be that the website is blocked from crawling. When selecting websites to index, you must adhere to the [Amazon Acceptable Use Policy](https://aws.amazon.com/aup/) and all other Amazon terms. Remember that you must only use Amazon Kendra Web Crawler to index your own web pages, or web pages that you have authorization to index.
        /// This member is required.
        public var urls: KendraClientTypes.Urls?

        public init(
            authenticationConfiguration: KendraClientTypes.AuthenticationConfiguration? = nil,
            crawlDepth: Swift.Int? = nil,
            maxContentSizePerPageInMegaBytes: Swift.Float? = nil,
            maxLinksPerPage: Swift.Int? = nil,
            maxUrlsPerMinuteCrawlRate: Swift.Int? = nil,
            proxyConfiguration: KendraClientTypes.ProxyConfiguration? = nil,
            urlExclusionPatterns: [Swift.String]? = nil,
            urlInclusionPatterns: [Swift.String]? = nil,
            urls: KendraClientTypes.Urls? = nil
        )
        {
            self.authenticationConfiguration = authenticationConfiguration
            self.crawlDepth = crawlDepth
            self.maxContentSizePerPageInMegaBytes = maxContentSizePerPageInMegaBytes
            self.maxLinksPerPage = maxLinksPerPage
            self.maxUrlsPerMinuteCrawlRate = maxUrlsPerMinuteCrawlRate
            self.proxyConfiguration = proxyConfiguration
            self.urlExclusionPatterns = urlExclusionPatterns
            self.urlInclusionPatterns = urlInclusionPatterns
            self.urls = urls
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to connect to Amazon WorkDocs as your data source. Amazon WorkDocs connector is available in Oregon, North Virginia, Sydney, Singapore and Ireland regions.
    public struct WorkDocsConfiguration: Swift.Sendable {
        /// TRUE to include comments on documents in your index. Including comments in your index means each comment is a document that can be searched on. The default is set to FALSE.
        public var crawlComments: Swift.Bool
        /// A list of regular expression patterns to exclude certain files in your Amazon WorkDocs site repository. Files that match the patterns are excluded from the index. Files that don’t match the patterns are included in the index. If a file matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.
        public var exclusionPatterns: [Swift.String]?
        /// A list of DataSourceToIndexFieldMapping objects that map Amazon WorkDocs data source attributes or field names to Amazon Kendra index field names. To create custom fields, use the UpdateIndex API before you map to Amazon WorkDocs fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The Amazon WorkDocs data source field names must exist in your Amazon WorkDocs custom metadata.
        public var fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]?
        /// A list of regular expression patterns to include certain files in your Amazon WorkDocs site repository. Files that match the patterns are included in the index. Files that don't match the patterns are excluded from the index. If a file matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.
        public var inclusionPatterns: [Swift.String]?
        /// The identifier of the directory corresponding to your Amazon WorkDocs site repository. You can find the organization ID in the [Directory Service](https://console.aws.amazon.com/directoryservicev2/) by going to Active Directory, then Directories. Your Amazon WorkDocs site directory has an ID, which is the organization ID. You can also set up a new Amazon WorkDocs directory in the Directory Service console and enable a Amazon WorkDocs site for the directory in the Amazon WorkDocs console.
        /// This member is required.
        public var organizationId: Swift.String?
        /// TRUE to use the Amazon WorkDocs change log to determine which documents require updating in the index. Depending on the change log's size, it may take longer for Amazon Kendra to use the change log than to scan all of your documents in Amazon WorkDocs.
        public var useChangeLog: Swift.Bool

        public init(
            crawlComments: Swift.Bool = false,
            exclusionPatterns: [Swift.String]? = nil,
            fieldMappings: [KendraClientTypes.DataSourceToIndexFieldMapping]? = nil,
            inclusionPatterns: [Swift.String]? = nil,
            organizationId: Swift.String? = nil,
            useChangeLog: Swift.Bool = false
        )
        {
            self.crawlComments = crawlComments
            self.exclusionPatterns = exclusionPatterns
            self.fieldMappings = fieldMappings
            self.inclusionPatterns = inclusionPatterns
            self.organizationId = organizationId
            self.useChangeLog = useChangeLog
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for an Amazon Kendra data source.
    public struct DataSourceConfiguration: Swift.Sendable {
        /// Provides the configuration information to connect to Alfresco as your data source. Support for AlfrescoConfiguration ended May 2023. We recommend migrating to or using the Alfresco data source template schema / [TemplateConfiguration](https://docs.aws.amazon.com/kendra/latest/APIReference/API_TemplateConfiguration.html) API.
        @available(*, deprecated, message: "Deprecated AlfrescoConfiguration in favor of TemplateConfiguration")
        public var alfrescoConfiguration: KendraClientTypes.AlfrescoConfiguration?
        /// Provides the configuration information to connect to Box as your data source.
        public var boxConfiguration: KendraClientTypes.BoxConfiguration?
        /// Provides the configuration information to connect to Confluence as your data source.
        public var confluenceConfiguration: KendraClientTypes.ConfluenceConfiguration?
        /// Provides the configuration information to connect to a database as your data source.
        public var databaseConfiguration: KendraClientTypes.DatabaseConfiguration?
        /// Provides the configuration information to connect to Amazon FSx as your data source. Amazon Kendra now supports an upgraded Amazon FSx Windows connector. You must now use the [TemplateConfiguration](https://docs.aws.amazon.com/kendra/latest/APIReference/API_TemplateConfiguration.html) object instead of the FsxConfiguration object to configure your connector. Connectors configured using the older console and API architecture will continue to function as configured. However, you won't be able to edit or update them. If you want to edit or update your connector configuration, you must create a new connector. We recommended migrating your connector workflow to the upgraded version. Support for connectors configured using the older architecture is scheduled to end by June 2024.
        public var fsxConfiguration: KendraClientTypes.FsxConfiguration?
        /// Provides the configuration information to connect to GitHub as your data source. Amazon Kendra now supports an upgraded GitHub connector. You must now use the [TemplateConfiguration](https://docs.aws.amazon.com/kendra/latest/APIReference/API_TemplateConfiguration.html) object instead of the GitHubConfiguration object to configure your connector. Connectors configured using the older console and API architecture will continue to function as configured. However, you won’t be able to edit or update them. If you want to edit or update your connector configuration, you must create a new connector. We recommended migrating your connector workflow to the upgraded version. Support for connectors configured using the older architecture is scheduled to end by June 2024.
        public var gitHubConfiguration: KendraClientTypes.GitHubConfiguration?
        /// Provides the configuration information to connect to Google Drive as your data source.
        public var googleDriveConfiguration: KendraClientTypes.GoogleDriveConfiguration?
        /// Provides the configuration information to connect to Jira as your data source.
        public var jiraConfiguration: KendraClientTypes.JiraConfiguration?
        /// Provides the configuration information to connect to Microsoft OneDrive as your data source.
        public var oneDriveConfiguration: KendraClientTypes.OneDriveConfiguration?
        /// Provides the configuration information to connect to Quip as your data source.
        public var quipConfiguration: KendraClientTypes.QuipConfiguration?
        /// Provides the configuration information to connect to an Amazon S3 bucket as your data source. Amazon Kendra now supports an upgraded Amazon S3 connector. You must now use the [TemplateConfiguration](https://docs.aws.amazon.com/kendra/latest/APIReference/API_TemplateConfiguration.html) object instead of the S3DataSourceConfiguration object to configure your connector. Connectors configured using the older console and API architecture will continue to function as configured. However, you won't be able to edit or update them. If you want to edit or update your connector configuration, you must create a new connector. We recommended migrating your connector workflow to the upgraded version. Support for connectors configured using the older architecture is scheduled to end by June 2024.
        public var s3Configuration: KendraClientTypes.S3DataSourceConfiguration?
        /// Provides the configuration information to connect to Salesforce as your data source.
        public var salesforceConfiguration: KendraClientTypes.SalesforceConfiguration?
        /// Provides the configuration information to connect to ServiceNow as your data source.
        public var serviceNowConfiguration: KendraClientTypes.ServiceNowConfiguration?
        /// Provides the configuration information to connect to Microsoft SharePoint as your data source.
        public var sharePointConfiguration: KendraClientTypes.SharePointConfiguration?
        /// Provides the configuration information to connect to Slack as your data source. Amazon Kendra now supports an upgraded Slack connector. You must now use the [TemplateConfiguration](https://docs.aws.amazon.com/kendra/latest/APIReference/API_TemplateConfiguration.html) object instead of the SlackConfiguration object to configure your connector. Connectors configured using the older console and API architecture will continue to function as configured. However, you won't be able to edit or update them. If you want to edit or update your connector configuration, you must create a new connector. We recommended migrating your connector workflow to the upgraded version. Support for connectors configured using the older architecture is scheduled to end by June 2024.
        public var slackConfiguration: KendraClientTypes.SlackConfiguration?
        /// Provides a template for the configuration information to connect to your data source.
        public var templateConfiguration: KendraClientTypes.TemplateConfiguration?
        /// Provides the configuration information required for Amazon Kendra Web Crawler.
        public var webCrawlerConfiguration: KendraClientTypes.WebCrawlerConfiguration?
        /// Provides the configuration information to connect to Amazon WorkDocs as your data source.
        public var workDocsConfiguration: KendraClientTypes.WorkDocsConfiguration?

        public init(
            alfrescoConfiguration: KendraClientTypes.AlfrescoConfiguration? = nil,
            boxConfiguration: KendraClientTypes.BoxConfiguration? = nil,
            confluenceConfiguration: KendraClientTypes.ConfluenceConfiguration? = nil,
            databaseConfiguration: KendraClientTypes.DatabaseConfiguration? = nil,
            fsxConfiguration: KendraClientTypes.FsxConfiguration? = nil,
            gitHubConfiguration: KendraClientTypes.GitHubConfiguration? = nil,
            googleDriveConfiguration: KendraClientTypes.GoogleDriveConfiguration? = nil,
            jiraConfiguration: KendraClientTypes.JiraConfiguration? = nil,
            oneDriveConfiguration: KendraClientTypes.OneDriveConfiguration? = nil,
            quipConfiguration: KendraClientTypes.QuipConfiguration? = nil,
            s3Configuration: KendraClientTypes.S3DataSourceConfiguration? = nil,
            salesforceConfiguration: KendraClientTypes.SalesforceConfiguration? = nil,
            serviceNowConfiguration: KendraClientTypes.ServiceNowConfiguration? = nil,
            sharePointConfiguration: KendraClientTypes.SharePointConfiguration? = nil,
            slackConfiguration: KendraClientTypes.SlackConfiguration? = nil,
            templateConfiguration: KendraClientTypes.TemplateConfiguration? = nil,
            webCrawlerConfiguration: KendraClientTypes.WebCrawlerConfiguration? = nil,
            workDocsConfiguration: KendraClientTypes.WorkDocsConfiguration? = nil
        )
        {
            self.alfrescoConfiguration = alfrescoConfiguration
            self.boxConfiguration = boxConfiguration
            self.confluenceConfiguration = confluenceConfiguration
            self.databaseConfiguration = databaseConfiguration
            self.fsxConfiguration = fsxConfiguration
            self.gitHubConfiguration = gitHubConfiguration
            self.googleDriveConfiguration = googleDriveConfiguration
            self.jiraConfiguration = jiraConfiguration
            self.oneDriveConfiguration = oneDriveConfiguration
            self.quipConfiguration = quipConfiguration
            self.s3Configuration = s3Configuration
            self.salesforceConfiguration = salesforceConfiguration
            self.serviceNowConfiguration = serviceNowConfiguration
            self.sharePointConfiguration = sharePointConfiguration
            self.slackConfiguration = slackConfiguration
            self.templateConfiguration = templateConfiguration
            self.webCrawlerConfiguration = webCrawlerConfiguration
            self.workDocsConfiguration = workDocsConfiguration
        }
    }
}

extension KendraClientTypes {

    /// A list of key/value pairs that identify an index, FAQ, or data source. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.
    public struct Tag: Swift.Sendable {
        /// The key for the tag. Keys are not case sensitive and must be unique for the index, FAQ, or data source.
        /// This member is required.
        public var key: Swift.String?
        /// The value associated with the tag. The value may be an empty string but it can't be null.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

extension KendraClientTypes {

    public enum DataSourceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alfresco
        case box
        case confluence
        case custom
        case database
        case fsx
        case github
        case googledrive
        case jira
        case onedrive
        case quip
        case s3
        case salesforce
        case servicenow
        case sharepoint
        case slack
        case template
        case webcrawler
        case workdocs
        case sdkUnknown(Swift.String)

        public static var allCases: [DataSourceType] {
            return [
                .alfresco,
                .box,
                .confluence,
                .custom,
                .database,
                .fsx,
                .github,
                .googledrive,
                .jira,
                .onedrive,
                .quip,
                .s3,
                .salesforce,
                .servicenow,
                .sharepoint,
                .slack,
                .template,
                .webcrawler,
                .workdocs
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alfresco: return "ALFRESCO"
            case .box: return "BOX"
            case .confluence: return "CONFLUENCE"
            case .custom: return "CUSTOM"
            case .database: return "DATABASE"
            case .fsx: return "FSX"
            case .github: return "GITHUB"
            case .googledrive: return "GOOGLEDRIVE"
            case .jira: return "JIRA"
            case .onedrive: return "ONEDRIVE"
            case .quip: return "QUIP"
            case .s3: return "S3"
            case .salesforce: return "SALESFORCE"
            case .servicenow: return "SERVICENOW"
            case .sharepoint: return "SHAREPOINT"
            case .slack: return "SLACK"
            case .template: return "TEMPLATE"
            case .webcrawler: return "WEBCRAWLER"
            case .workdocs: return "WORKDOCS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateDataSourceInput: Swift.Sendable {
    /// A token that you provide to identify the request to create a data source connector. Multiple calls to the CreateDataSource API with the same client token will create only one data source connector.
    public var clientToken: Swift.String?
    /// Configuration information to connect to your data source repository. You can't specify the Configuration parameter when the Type parameter is set to CUSTOM. If you do, you receive a ValidationException exception. The Configuration parameter is required for all other data sources.
    public var configuration: KendraClientTypes.DataSourceConfiguration?
    /// Configuration information for altering document metadata and content during the document ingestion process. For more information on how to create, modify and delete document metadata, or make other content alterations when you ingest documents into Amazon Kendra, see [Customizing document metadata during the ingestion process](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html).
    public var customDocumentEnrichmentConfiguration: KendraClientTypes.CustomDocumentEnrichmentConfiguration?
    /// A description for the data source connector.
    public var description: Swift.String?
    /// The identifier of the index you want to use with the data source connector.
    /// This member is required.
    public var indexId: Swift.String?
    /// The code for a language. This allows you to support a language for all documents when creating the data source connector. English is supported by default. For more information on supported languages, including their codes, see [Adding documents in languages other than English](https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html).
    public var languageCode: Swift.String?
    /// A name for the data source connector.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of an IAM role with permission to access the data source and required resources. For more information, see [IAM access roles for Amazon Kendra.](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html). You can't specify the RoleArn parameter when the Type parameter is set to CUSTOM. If you do, you receive a ValidationException exception. The RoleArn parameter is required for all other data sources.
    public var roleArn: Swift.String?
    /// Sets the frequency for Amazon Kendra to check the documents in your data source repository and update the index. If you don't set a schedule Amazon Kendra will not periodically update the index. You can call the StartDataSourceSyncJob API to update the index. Specify a cron- format schedule string or an empty string to indicate that the index is updated on demand. You can't specify the Schedule parameter when the Type parameter is set to CUSTOM. If you do, you receive a ValidationException exception.
    public var schedule: Swift.String?
    /// A list of key-value pairs that identify or categorize the data source connector. You can also use tags to help control access to the data source connector. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.
    public var tags: [KendraClientTypes.Tag]?
    /// The type of data source repository. For example, SHAREPOINT.
    /// This member is required.
    public var type: KendraClientTypes.DataSourceType?
    /// Configuration information for an Amazon Virtual Private Cloud to connect to your data source. For more information, see [Configuring a VPC](https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html).
    public var vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration?

    public init(
        clientToken: Swift.String? = nil,
        configuration: KendraClientTypes.DataSourceConfiguration? = nil,
        customDocumentEnrichmentConfiguration: KendraClientTypes.CustomDocumentEnrichmentConfiguration? = nil,
        description: Swift.String? = nil,
        indexId: Swift.String? = nil,
        languageCode: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        schedule: Swift.String? = nil,
        tags: [KendraClientTypes.Tag]? = nil,
        type: KendraClientTypes.DataSourceType? = nil,
        vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration? = nil
    )
    {
        self.clientToken = clientToken
        self.configuration = configuration
        self.customDocumentEnrichmentConfiguration = customDocumentEnrichmentConfiguration
        self.description = description
        self.indexId = indexId
        self.languageCode = languageCode
        self.name = name
        self.roleArn = roleArn
        self.schedule = schedule
        self.tags = tags
        self.type = type
        self.vpcConfiguration = vpcConfiguration
    }
}

public struct CreateDataSourceOutput: Swift.Sendable {
    /// The identifier of the data source connector.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for your content sources, such as data sources, FAQs, and content indexed directly via [BatchPutDocument](https://docs.aws.amazon.com/kendra/latest/dg/API_BatchPutDocument.html).
    public struct ContentSourceConfiguration: Swift.Sendable {
        /// The identifier of the data sources you want to use for your Amazon Kendra experience.
        public var dataSourceIds: [Swift.String]?
        /// TRUE to use documents you indexed directly using the BatchPutDocument API.
        public var directPutContent: Swift.Bool
        /// The identifier of the FAQs that you want to use for your Amazon Kendra experience.
        public var faqIds: [Swift.String]?

        public init(
            dataSourceIds: [Swift.String]? = nil,
            directPutContent: Swift.Bool = false,
            faqIds: [Swift.String]? = nil
        )
        {
            self.dataSourceIds = dataSourceIds
            self.directPutContent = directPutContent
            self.faqIds = faqIds
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for the identifiers of your users.
    public struct UserIdentityConfiguration: Swift.Sendable {
        /// The IAM Identity Center field name that contains the identifiers of your users, such as their emails. This is used for [user context filtering](https://docs.aws.amazon.com/kendra/latest/dg/user-context-filter.html) and for granting access to your Amazon Kendra experience. You must set up IAM Identity Center with Amazon Kendra. You must include your users and groups in your Access Control List when you ingest documents into your index. For more information, see [Getting started with an IAM Identity Center identity source](https://docs.aws.amazon.com/kendra/latest/dg/getting-started-aws-sso.html).
        public var identityAttributeName: Swift.String?

        public init(
            identityAttributeName: Swift.String? = nil
        )
        {
            self.identityAttributeName = identityAttributeName
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for your Amazon Kendra experience. This includes the data source IDs and/or FAQ IDs, and user or group information to grant access to your Amazon Kendra experience.
    public struct ExperienceConfiguration: Swift.Sendable {
        /// The identifiers of your data sources and FAQs. Or, you can specify that you want to use documents indexed via the BatchPutDocument API. This is the content you want to use for your Amazon Kendra experience.
        public var contentSourceConfiguration: KendraClientTypes.ContentSourceConfiguration?
        /// The IAM Identity Center field name that contains the identifiers of your users, such as their emails.
        public var userIdentityConfiguration: KendraClientTypes.UserIdentityConfiguration?

        public init(
            contentSourceConfiguration: KendraClientTypes.ContentSourceConfiguration? = nil,
            userIdentityConfiguration: KendraClientTypes.UserIdentityConfiguration? = nil
        )
        {
            self.contentSourceConfiguration = contentSourceConfiguration
            self.userIdentityConfiguration = userIdentityConfiguration
        }
    }
}

public struct CreateExperienceInput: Swift.Sendable {
    /// A token that you provide to identify the request to create your Amazon Kendra experience. Multiple calls to the CreateExperience API with the same client token creates only one Amazon Kendra experience.
    public var clientToken: Swift.String?
    /// Configuration information for your Amazon Kendra experience. This includes ContentSourceConfiguration, which specifies the data source IDs and/or FAQ IDs, and UserIdentityConfiguration, which specifies the user or group information to grant access to your Amazon Kendra experience.
    public var configuration: KendraClientTypes.ExperienceConfiguration?
    /// A description for your Amazon Kendra experience.
    public var description: Swift.String?
    /// The identifier of the index for your Amazon Kendra experience.
    /// This member is required.
    public var indexId: Swift.String?
    /// A name for your Amazon Kendra experience.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of an IAM role with permission to access Query API, GetQuerySuggestions API, and other required APIs. The role also must include permission to access IAM Identity Center that stores your user and group information. For more information, see [IAM access roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html).
    public var roleArn: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        configuration: KendraClientTypes.ExperienceConfiguration? = nil,
        description: Swift.String? = nil,
        indexId: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.configuration = configuration
        self.description = description
        self.indexId = indexId
        self.name = name
        self.roleArn = roleArn
    }
}

public struct CreateExperienceOutput: Swift.Sendable {
    /// The identifier of your Amazon Kendra experience.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension KendraClientTypes {

    public enum FaqFileFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case csv
        case csvWithHeader
        case json
        case sdkUnknown(Swift.String)

        public static var allCases: [FaqFileFormat] {
            return [
                .csv,
                .csvWithHeader,
                .json
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case .csvWithHeader: return "CSV_WITH_HEADER"
            case .json: return "JSON"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateFaqInput: Swift.Sendable {
    /// A token that you provide to identify the request to create a FAQ. Multiple calls to the CreateFaqRequest API with the same client token will create only one FAQ.
    public var clientToken: Swift.String?
    /// A description for the FAQ.
    public var description: Swift.String?
    /// The format of the FAQ input file. You can choose between a basic CSV format, a CSV format that includes customs attributes in a header, and a JSON format that includes custom attributes. The default format is CSV. The format must match the format of the file stored in the S3 bucket identified in the S3Path parameter. For more information, see [Adding questions and answers](https://docs.aws.amazon.com/kendra/latest/dg/in-creating-faq.html).
    public var fileFormat: KendraClientTypes.FaqFileFormat?
    /// The identifier of the index for the FAQ.
    /// This member is required.
    public var indexId: Swift.String?
    /// The code for a language. This allows you to support a language for the FAQ document. English is supported by default. For more information on supported languages, including their codes, see [Adding documents in languages other than English](https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html).
    public var languageCode: Swift.String?
    /// A name for the FAQ.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of an IAM role with permission to access the S3 bucket that contains the FAQs. For more information, see [IAM access roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html).
    /// This member is required.
    public var roleArn: Swift.String?
    /// The path to the FAQ file in S3.
    /// This member is required.
    public var s3Path: KendraClientTypes.S3Path?
    /// A list of key-value pairs that identify the FAQ. You can use the tags to identify and organize your resources and to control access to resources.
    public var tags: [KendraClientTypes.Tag]?

    public init(
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        fileFormat: KendraClientTypes.FaqFileFormat? = nil,
        indexId: Swift.String? = nil,
        languageCode: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        s3Path: KendraClientTypes.S3Path? = nil,
        tags: [KendraClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.description = description
        self.fileFormat = fileFormat
        self.indexId = indexId
        self.languageCode = languageCode
        self.name = name
        self.roleArn = roleArn
        self.s3Path = s3Path
        self.tags = tags
    }
}

public struct CreateFaqOutput: Swift.Sendable {
    /// The identifier of the FAQ.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension KendraClientTypes {

    /// Information about a conflicting query used across different sets of featured results. When you create a featured results set, you must check that the queries are unique per featured results set for each index.
    public struct ConflictingItem: Swift.Sendable {
        /// The text of the conflicting query.
        public var queryText: Swift.String?
        /// The identifier of the set of featured results that the conflicting query belongs to.
        public var setId: Swift.String?
        /// The name for the set of featured results that the conflicting query belongs to.
        public var setName: Swift.String?

        public init(
            queryText: Swift.String? = nil,
            setId: Swift.String? = nil,
            setName: Swift.String? = nil
        )
        {
            self.queryText = queryText
            self.setId = setId
            self.setName = setName
        }
    }
}

/// An error message with a list of conflicting queries used across different sets of featured results. This occurred with the request for a new featured results set. Check that the queries you specified for featured results are unique per featured results set for each index.
public struct FeaturedResultsConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A list of the conflicting queries, including the query text, the name for the featured results set, and the identifier of the featured results set.
        public internal(set) var conflictingItems: [KendraClientTypes.ConflictingItem]? = nil
        /// An explanation for the conflicting queries.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "FeaturedResultsConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        conflictingItems: [KendraClientTypes.ConflictingItem]? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.conflictingItems = conflictingItems
        self.properties.message = message
    }
}

extension KendraClientTypes {

    /// A featured document. This document is displayed at the top of the search results page, placed above all other results for certain queries. If there's an exact match of a query, then the document is featured in the search results.
    public struct FeaturedDocument: Swift.Sendable {
        /// The identifier of the document to feature in the search results. You can use the [Query](https://docs.aws.amazon.com/kendra/latest/dg/API_Query.html) API to search for specific documents with their document IDs included in the result items, or you can use the console.
        public var id: Swift.String?

        public init(
            id: Swift.String? = nil
        )
        {
            self.id = id
        }
    }
}

extension KendraClientTypes {

    public enum FeaturedResultsSetStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [FeaturedResultsSetStatus] {
            return [
                .active,
                .inactive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateFeaturedResultsSetInput: Swift.Sendable {
    /// A token that you provide to identify the request to create a set of featured results. Multiple calls to the CreateFeaturedResultsSet API with the same client token will create only one featured results set.
    public var clientToken: Swift.String?
    /// A description for the set of featured results.
    public var description: Swift.String?
    /// A list of document IDs for the documents you want to feature at the top of the search results page. For more information on the list of documents, see [FeaturedResultsSet](https://docs.aws.amazon.com/kendra/latest/dg/API_FeaturedResultsSet.html).
    public var featuredDocuments: [KendraClientTypes.FeaturedDocument]?
    /// A name for the set of featured results.
    /// This member is required.
    public var featuredResultsSetName: Swift.String?
    /// The identifier of the index that you want to use for featuring results.
    /// This member is required.
    public var indexId: Swift.String?
    /// A list of queries for featuring results. For more information on the list of queries, see [FeaturedResultsSet](https://docs.aws.amazon.com/kendra/latest/dg/API_FeaturedResultsSet.html).
    public var queryTexts: [Swift.String]?
    /// The current status of the set of featured results. When the value is ACTIVE, featured results are ready for use. You can still configure your settings before setting the status to ACTIVE. You can set the status to ACTIVE or INACTIVE using the [UpdateFeaturedResultsSet](https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateFeaturedResultsSet.html) API. The queries you specify for featured results must be unique per featured results set for each index, whether the status is ACTIVE or INACTIVE.
    public var status: KendraClientTypes.FeaturedResultsSetStatus?
    /// A list of key-value pairs that identify or categorize the featured results set. You can also use tags to help control access to the featured results set. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols:_ . : / = + - @.
    public var tags: [KendraClientTypes.Tag]?

    public init(
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        featuredDocuments: [KendraClientTypes.FeaturedDocument]? = nil,
        featuredResultsSetName: Swift.String? = nil,
        indexId: Swift.String? = nil,
        queryTexts: [Swift.String]? = nil,
        status: KendraClientTypes.FeaturedResultsSetStatus? = nil,
        tags: [KendraClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.description = description
        self.featuredDocuments = featuredDocuments
        self.featuredResultsSetName = featuredResultsSetName
        self.indexId = indexId
        self.queryTexts = queryTexts
        self.status = status
        self.tags = tags
    }
}

extension KendraClientTypes {

    /// A set of featured results that are displayed at the top of your search results. Featured results are placed above all other results for certain queries. If there's an exact match of a query, then one or more specific documents are featured in the search results.
    public struct FeaturedResultsSet: Swift.Sendable {
        /// The Unix timestamp when the set of featured results was created.
        public var creationTimestamp: Swift.Int?
        /// The description for the set of featured results.
        public var description: Swift.String?
        /// The list of document IDs for the documents you want to feature at the top of the search results page. You can use the [Query](https://docs.aws.amazon.com/kendra/latest/dg/API_Query.html) API to search for specific documents with their document IDs included in the result items, or you can use the console. You can add up to four featured documents. You can request to increase this limit by contacting [Support](http://aws.amazon.com/contact-us/). Specific queries are mapped to specific documents for featuring in the results. If a query contains an exact match, then one or more specific documents are featured in the results. The exact match applies to the full query. For example, if you only specify 'Kendra', queries such as 'How does kendra semantically rank results?' will not render the featured results. Featured results are designed for specific queries, rather than queries that are too broad in scope.
        public var featuredDocuments: [KendraClientTypes.FeaturedDocument]?
        /// The identifier of the set of featured results.
        public var featuredResultsSetId: Swift.String?
        /// The name for the set of featured results.
        public var featuredResultsSetName: Swift.String?
        /// The Unix timestamp when the set of featured results was last updated.
        public var lastUpdatedTimestamp: Swift.Int?
        /// The list of queries for featuring results. Specific queries are mapped to specific documents for featuring in the results. If a query contains an exact match, then one or more specific documents are featured in the results. The exact match applies to the full query. For example, if you only specify 'Kendra', queries such as 'How does kendra semantically rank results?' will not render the featured results. Featured results are designed for specific queries, rather than queries that are too broad in scope.
        public var queryTexts: [Swift.String]?
        /// The current status of the set of featured results. When the value is ACTIVE, featured results are ready for use. You can still configure your settings before setting the status to ACTIVE. You can set the status to ACTIVE or INACTIVE using the [UpdateFeaturedResultsSet](https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateFeaturedResultsSet.html) API. The queries you specify for featured results must be unique per featured results set for each index, whether the status is ACTIVE or INACTIVE.
        public var status: KendraClientTypes.FeaturedResultsSetStatus?

        public init(
            creationTimestamp: Swift.Int? = nil,
            description: Swift.String? = nil,
            featuredDocuments: [KendraClientTypes.FeaturedDocument]? = nil,
            featuredResultsSetId: Swift.String? = nil,
            featuredResultsSetName: Swift.String? = nil,
            lastUpdatedTimestamp: Swift.Int? = nil,
            queryTexts: [Swift.String]? = nil,
            status: KendraClientTypes.FeaturedResultsSetStatus? = nil
        )
        {
            self.creationTimestamp = creationTimestamp
            self.description = description
            self.featuredDocuments = featuredDocuments
            self.featuredResultsSetId = featuredResultsSetId
            self.featuredResultsSetName = featuredResultsSetName
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.queryTexts = queryTexts
            self.status = status
        }
    }
}

public struct CreateFeaturedResultsSetOutput: Swift.Sendable {
    /// Information on the set of featured results. This includes the identifier of the featured results set, whether the featured results set is active or inactive, when the featured results set was created, and more.
    public var featuredResultsSet: KendraClientTypes.FeaturedResultsSet?

    public init(
        featuredResultsSet: KendraClientTypes.FeaturedResultsSet? = nil
    )
    {
        self.featuredResultsSet = featuredResultsSet
    }
}

extension KendraClientTypes {

    public enum IndexEdition: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case developerEdition
        case enterpriseEdition
        case sdkUnknown(Swift.String)

        public static var allCases: [IndexEdition] {
            return [
                .developerEdition,
                .enterpriseEdition
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .developerEdition: return "DEVELOPER_EDITION"
            case .enterpriseEdition: return "ENTERPRISE_EDITION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides the identifier of the KMS key used to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric keys.
    public struct ServerSideEncryptionConfiguration: Swift.Sendable {
        /// The identifier of the KMS key. Amazon Kendra doesn't support asymmetric keys.
        public var kmsKeyId: Swift.String?

        public init(
            kmsKeyId: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
        }
    }
}

extension KendraClientTypes.ServerSideEncryptionConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServerSideEncryptionConfiguration(kmsKeyId: \"CONTENT_REDACTED\")"}
}

extension KendraClientTypes {

    public enum UserContextPolicy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case attributeFilter
        case userToken
        case sdkUnknown(Swift.String)

        public static var allCases: [UserContextPolicy] {
            return [
                .attributeFilter,
                .userToken
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .attributeFilter: return "ATTRIBUTE_FILTER"
            case .userToken: return "USER_TOKEN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    public enum UserGroupResolutionMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsSso
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [UserGroupResolutionMode] {
            return [
                .awsSso,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsSso: return "AWS_SSO"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information to get users and groups from an IAM Identity Center identity source. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents. You can also use the [PutPrincipalMapping](https://docs.aws.amazon.com/kendra/latest/dg/API_PutPrincipalMapping.html) API to map users to their groups so that you only need to provide the user ID when you issue the query. To set up an IAM Identity Center identity source in the console to use with Amazon Kendra, see [Getting started with an IAM Identity Center identity source](https://docs.aws.amazon.com/kendra/latest/dg/getting-started-aws-sso.html). You must also grant the required permissions to use IAM Identity Center with Amazon Kendra. For more information, see [IAM roles for IAM Identity Center](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html#iam-roles-aws-sso). Amazon Kendra currently does not support using UserGroupResolutionConfiguration with an Amazon Web Services organization member account for your IAM Identity Center identify source. You must create your index in the management account for the organization in order to use UserGroupResolutionConfiguration.
    public struct UserGroupResolutionConfiguration: Swift.Sendable {
        /// The identity store provider (mode) you want to use to get users and groups. IAM Identity Center is currently the only available mode. Your users and groups must exist in an IAM Identity Center identity source in order to use this mode.
        /// This member is required.
        public var userGroupResolutionMode: KendraClientTypes.UserGroupResolutionMode?

        public init(
            userGroupResolutionMode: KendraClientTypes.UserGroupResolutionMode? = nil
        )
        {
            self.userGroupResolutionMode = userGroupResolutionMode
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for the JSON token type.
    public struct JsonTokenTypeConfiguration: Swift.Sendable {
        /// The group attribute field.
        /// This member is required.
        public var groupAttributeField: Swift.String?
        /// The user name attribute field.
        /// This member is required.
        public var userNameAttributeField: Swift.String?

        public init(
            groupAttributeField: Swift.String? = nil,
            userNameAttributeField: Swift.String? = nil
        )
        {
            self.groupAttributeField = groupAttributeField
            self.userNameAttributeField = userNameAttributeField
        }
    }
}

extension KendraClientTypes {

    public enum KeyLocation: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case secretManager
        case url
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyLocation] {
            return [
                .secretManager,
                .url
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .secretManager: return "SECRET_MANAGER"
            case .url: return "URL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for the JWT token type.
    public struct JwtTokenTypeConfiguration: Swift.Sendable {
        /// The regular expression that identifies the claim.
        public var claimRegex: Swift.String?
        /// The group attribute field.
        public var groupAttributeField: Swift.String?
        /// The issuer of the token.
        public var issuer: Swift.String?
        /// The location of the key.
        /// This member is required.
        public var keyLocation: KendraClientTypes.KeyLocation?
        /// The Amazon Resource Name (arn) of the secret.
        public var secretManagerArn: Swift.String?
        /// The signing key URL.
        public var url: Swift.String?
        /// The user name attribute field.
        public var userNameAttributeField: Swift.String?

        public init(
            claimRegex: Swift.String? = nil,
            groupAttributeField: Swift.String? = nil,
            issuer: Swift.String? = nil,
            keyLocation: KendraClientTypes.KeyLocation? = nil,
            secretManagerArn: Swift.String? = nil,
            url: Swift.String? = nil,
            userNameAttributeField: Swift.String? = nil
        )
        {
            self.claimRegex = claimRegex
            self.groupAttributeField = groupAttributeField
            self.issuer = issuer
            self.keyLocation = keyLocation
            self.secretManagerArn = secretManagerArn
            self.url = url
            self.userNameAttributeField = userNameAttributeField
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for a token.
    public struct UserTokenConfiguration: Swift.Sendable {
        /// Information about the JSON token type configuration.
        public var jsonTokenTypeConfiguration: KendraClientTypes.JsonTokenTypeConfiguration?
        /// Information about the JWT token type configuration.
        public var jwtTokenTypeConfiguration: KendraClientTypes.JwtTokenTypeConfiguration?

        public init(
            jsonTokenTypeConfiguration: KendraClientTypes.JsonTokenTypeConfiguration? = nil,
            jwtTokenTypeConfiguration: KendraClientTypes.JwtTokenTypeConfiguration? = nil
        )
        {
            self.jsonTokenTypeConfiguration = jsonTokenTypeConfiguration
            self.jwtTokenTypeConfiguration = jwtTokenTypeConfiguration
        }
    }
}

public struct CreateIndexInput: Swift.Sendable {
    /// A token that you provide to identify the request to create an index. Multiple calls to the CreateIndex API with the same client token will create only one index.
    public var clientToken: Swift.String?
    /// A description for the index.
    public var description: Swift.String?
    /// The Amazon Kendra edition to use for the index. Choose DEVELOPER_EDITION for indexes intended for development, testing, or proof of concept. Use ENTERPRISE_EDITION for production. Once you set the edition for an index, it can't be changed. The Edition parameter is optional. If you don't supply a value, the default is ENTERPRISE_EDITION. For more information on quota limits for Enterprise and Developer editions, see [Quotas](https://docs.aws.amazon.com/kendra/latest/dg/quotas.html).
    public var edition: KendraClientTypes.IndexEdition?
    /// A name for the index.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of an IAM role with permission to access your Amazon CloudWatch logs and metrics. For more information, see [IAM access roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html).
    /// This member is required.
    public var roleArn: Swift.String?
    /// The identifier of the KMS customer managed key (CMK) that's used to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric CMKs.
    public var serverSideEncryptionConfiguration: KendraClientTypes.ServerSideEncryptionConfiguration?
    /// A list of key-value pairs that identify or categorize the index. You can also use tags to help control access to the index. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.
    public var tags: [KendraClientTypes.Tag]?
    /// The user context policy. ATTRIBUTE_FILTER All indexed content is searchable and displayable for all users. If you want to filter search results on user context, you can use the attribute filters of _user_id and _group_ids or you can provide user and group information in UserContext. USER_TOKEN Enables token-based user access control to filter search results on user context. All documents with no access control and all documents accessible to the user will be searchable and displayable.
    public var userContextPolicy: KendraClientTypes.UserContextPolicy?
    /// Gets users and groups from IAM Identity Center identity source. To configure this, see [UserGroupResolutionConfiguration](https://docs.aws.amazon.com/kendra/latest/dg/API_UserGroupResolutionConfiguration.html). This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.
    public var userGroupResolutionConfiguration: KendraClientTypes.UserGroupResolutionConfiguration?
    /// The user token configuration.
    public var userTokenConfigurations: [KendraClientTypes.UserTokenConfiguration]?

    public init(
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        edition: KendraClientTypes.IndexEdition? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        serverSideEncryptionConfiguration: KendraClientTypes.ServerSideEncryptionConfiguration? = nil,
        tags: [KendraClientTypes.Tag]? = nil,
        userContextPolicy: KendraClientTypes.UserContextPolicy? = nil,
        userGroupResolutionConfiguration: KendraClientTypes.UserGroupResolutionConfiguration? = nil,
        userTokenConfigurations: [KendraClientTypes.UserTokenConfiguration]? = nil
    )
    {
        self.clientToken = clientToken
        self.description = description
        self.edition = edition
        self.name = name
        self.roleArn = roleArn
        self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
        self.tags = tags
        self.userContextPolicy = userContextPolicy
        self.userGroupResolutionConfiguration = userGroupResolutionConfiguration
        self.userTokenConfigurations = userTokenConfigurations
    }
}

public struct CreateIndexOutput: Swift.Sendable {
    /// The identifier of the index. Use this identifier when you query an index, set up a data source, or index a document.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct CreateQuerySuggestionsBlockListInput: Swift.Sendable {
    /// A token that you provide to identify the request to create a query suggestions block list.
    public var clientToken: Swift.String?
    /// A description for the block list. For example, the description "List of all offensive words that can appear in user queries and need to be blocked from suggestions."
    public var description: Swift.String?
    /// The identifier of the index you want to create a query suggestions block list for.
    /// This member is required.
    public var indexId: Swift.String?
    /// A name for the block list. For example, the name 'offensive-words', which includes all offensive words that could appear in user queries and need to be blocked from suggestions.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of an IAM role with permission to access your S3 bucket that contains the block list text file. For more information, see [IAM access roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html).
    /// This member is required.
    public var roleArn: Swift.String?
    /// The S3 path to your block list text file in your S3 bucket. Each block word or phrase should be on a separate line in a text file. For information on the current quota limits for block lists, see [Quotas for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/quotas.html).
    /// This member is required.
    public var sourceS3Path: KendraClientTypes.S3Path?
    /// A list of key-value pairs that identify or categorize the block list. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.
    public var tags: [KendraClientTypes.Tag]?

    public init(
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        indexId: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        sourceS3Path: KendraClientTypes.S3Path? = nil,
        tags: [KendraClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.description = description
        self.indexId = indexId
        self.name = name
        self.roleArn = roleArn
        self.sourceS3Path = sourceS3Path
        self.tags = tags
    }
}

public struct CreateQuerySuggestionsBlockListOutput: Swift.Sendable {
    /// The identifier of the block list.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct CreateThesaurusInput: Swift.Sendable {
    /// A token that you provide to identify the request to create a thesaurus. Multiple calls to the CreateThesaurus API with the same client token will create only one thesaurus.
    public var clientToken: Swift.String?
    /// A description for the thesaurus.
    public var description: Swift.String?
    /// The identifier of the index for the thesaurus.
    /// This member is required.
    public var indexId: Swift.String?
    /// A name for the thesaurus.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of an IAM role with permission to access your S3 bucket that contains the thesaurus file. For more information, see [IAM access roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html).
    /// This member is required.
    public var roleArn: Swift.String?
    /// The path to the thesaurus file in S3.
    /// This member is required.
    public var sourceS3Path: KendraClientTypes.S3Path?
    /// A list of key-value pairs that identify or categorize the thesaurus. You can also use tags to help control access to the thesaurus. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.
    public var tags: [KendraClientTypes.Tag]?

    public init(
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        indexId: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        sourceS3Path: KendraClientTypes.S3Path? = nil,
        tags: [KendraClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.description = description
        self.indexId = indexId
        self.name = name
        self.roleArn = roleArn
        self.sourceS3Path = sourceS3Path
        self.tags = tags
    }
}

public struct CreateThesaurusOutput: Swift.Sendable {
    /// The identifier of the thesaurus.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct DeleteAccessControlConfigurationInput: Swift.Sendable {
    /// The identifier of the access control configuration you want to delete.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for an access control configuration.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

public struct DeleteAccessControlConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteDataSourceInput: Swift.Sendable {
    /// The identifier of the data source connector you want to delete.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index used with the data source connector.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

public struct DeleteExperienceInput: Swift.Sendable {
    /// The identifier of your Amazon Kendra experience you want to delete.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for your Amazon Kendra experience.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

public struct DeleteExperienceOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteFaqInput: Swift.Sendable {
    /// The identifier of the FAQ you want to remove.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for the FAQ.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

public struct DeleteIndexInput: Swift.Sendable {
    /// The identifier of the index you want to delete.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct DeletePrincipalMappingInput: Swift.Sendable {
    /// The identifier of the data source you want to delete a group from. A group can be tied to multiple data sources. You can delete a group from accessing documents in a certain data source. For example, the groups "Research", "Engineering", and "Sales and Marketing" are all tied to the company's documents stored in the data sources Confluence and Salesforce. You want to delete "Research" and "Engineering" groups from Salesforce, so that these groups cannot access customer-related documents stored in Salesforce. Only "Sales and Marketing" should access documents in the Salesforce data source.
    public var dataSourceId: Swift.String?
    /// The identifier of the group you want to delete.
    /// This member is required.
    public var groupId: Swift.String?
    /// The identifier of the index you want to delete a group from.
    /// This member is required.
    public var indexId: Swift.String?
    /// The timestamp identifier you specify to ensure Amazon Kendra does not override the latest DELETE action with previous actions. The highest number ID, which is the ordering ID, is the latest action you want to process and apply on top of other actions with lower number IDs. This prevents previous actions with lower number IDs from possibly overriding the latest action. The ordering ID can be the Unix time of the last update you made to a group members list. You would then provide this list when calling PutPrincipalMapping. This ensures your DELETE action for that updated group with the latest members list doesn't get overwritten by earlier DELETE actions for the same group which are yet to be processed. The default ordering ID is the current Unix time in milliseconds that the action was received by Amazon Kendra.
    public var orderingId: Swift.Int?

    public init(
        dataSourceId: Swift.String? = nil,
        groupId: Swift.String? = nil,
        indexId: Swift.String? = nil,
        orderingId: Swift.Int? = nil
    )
    {
        self.dataSourceId = dataSourceId
        self.groupId = groupId
        self.indexId = indexId
        self.orderingId = orderingId
    }
}

public struct DeleteQuerySuggestionsBlockListInput: Swift.Sendable {
    /// The identifier of the block list you want to delete.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for the block list.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

public struct DeleteThesaurusInput: Swift.Sendable {
    /// The identifier of the thesaurus you want to delete.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for the thesaurus.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

public struct DescribeAccessControlConfigurationInput: Swift.Sendable {
    /// The identifier of the access control configuration you want to get information on.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for an access control configuration.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

public struct DescribeAccessControlConfigurationOutput: Swift.Sendable {
    /// Information on principals (users and/or groups) and which documents they should have access to. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.
    public var accessControlList: [KendraClientTypes.Principal]?
    /// The description for the access control configuration.
    public var description: Swift.String?
    /// The error message containing details if there are issues processing the access control configuration.
    public var errorMessage: Swift.String?
    /// The list of [principal](https://docs.aws.amazon.com/kendra/latest/dg/API_Principal.html) lists that define the hierarchy for which documents users should have access to.
    public var hierarchicalAccessControlList: [KendraClientTypes.HierarchicalPrincipal]?
    /// The name for the access control configuration.
    /// This member is required.
    public var name: Swift.String?

    public init(
        accessControlList: [KendraClientTypes.Principal]? = nil,
        description: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        hierarchicalAccessControlList: [KendraClientTypes.HierarchicalPrincipal]? = nil,
        name: Swift.String? = nil
    )
    {
        self.accessControlList = accessControlList
        self.description = description
        self.errorMessage = errorMessage
        self.hierarchicalAccessControlList = hierarchicalAccessControlList
        self.name = name
    }
}

public struct DescribeDataSourceInput: Swift.Sendable {
    /// The identifier of the data source connector.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index used with the data source connector.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

extension KendraClientTypes {

    public enum DataSourceStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [DataSourceStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeDataSourceOutput: Swift.Sendable {
    /// Configuration details for the data source connector. This shows how the data source is configured. The configuration options for a data source depend on the data source provider.
    public var configuration: KendraClientTypes.DataSourceConfiguration?
    /// The Unix timestamp when the data source connector was created.
    public var createdAt: Foundation.Date?
    /// Configuration information for altering document metadata and content during the document ingestion process when you describe a data source. For more information on how to create, modify and delete document metadata, or make other content alterations when you ingest documents into Amazon Kendra, see [Customizing document metadata during the ingestion process](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html).
    public var customDocumentEnrichmentConfiguration: KendraClientTypes.CustomDocumentEnrichmentConfiguration?
    /// The description for the data source connector.
    public var description: Swift.String?
    /// When the Status field value is FAILED, the ErrorMessage field contains a description of the error that caused the data source to fail.
    public var errorMessage: Swift.String?
    /// The identifier of the data source connector.
    public var id: Swift.String?
    /// The identifier of the index used with the data source connector.
    public var indexId: Swift.String?
    /// The code for a language. This shows a supported language for all documents in the data source. English is supported by default. For more information on supported languages, including their codes, see [Adding documents in languages other than English](https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html).
    public var languageCode: Swift.String?
    /// The name for the data source connector.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the role with permission to access the data source and required resources.
    public var roleArn: Swift.String?
    /// The schedule for Amazon Kendra to update the index.
    public var schedule: Swift.String?
    /// The current status of the data source connector. When the status is ACTIVE the data source is ready to use. When the status is FAILED, the ErrorMessage field contains the reason that the data source failed.
    public var status: KendraClientTypes.DataSourceStatus?
    /// The type of the data source. For example, SHAREPOINT.
    public var type: KendraClientTypes.DataSourceType?
    /// The Unix timestamp when the data source connector was last updated.
    public var updatedAt: Foundation.Date?
    /// Configuration information for an Amazon Virtual Private Cloud to connect to your data source. For more information, see [Configuring a VPC](https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html).
    public var vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration?

    public init(
        configuration: KendraClientTypes.DataSourceConfiguration? = nil,
        createdAt: Foundation.Date? = nil,
        customDocumentEnrichmentConfiguration: KendraClientTypes.CustomDocumentEnrichmentConfiguration? = nil,
        description: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        languageCode: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        schedule: Swift.String? = nil,
        status: KendraClientTypes.DataSourceStatus? = nil,
        type: KendraClientTypes.DataSourceType? = nil,
        updatedAt: Foundation.Date? = nil,
        vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration? = nil
    )
    {
        self.configuration = configuration
        self.createdAt = createdAt
        self.customDocumentEnrichmentConfiguration = customDocumentEnrichmentConfiguration
        self.description = description
        self.errorMessage = errorMessage
        self.id = id
        self.indexId = indexId
        self.languageCode = languageCode
        self.name = name
        self.roleArn = roleArn
        self.schedule = schedule
        self.status = status
        self.type = type
        self.updatedAt = updatedAt
        self.vpcConfiguration = vpcConfiguration
    }
}

public struct DescribeExperienceInput: Swift.Sendable {
    /// The identifier of your Amazon Kendra experience you want to get information on.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for your Amazon Kendra experience.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

extension KendraClientTypes {

    public enum EndpointType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case home
        case sdkUnknown(Swift.String)

        public static var allCases: [EndpointType] {
            return [
                .home
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .home: return "HOME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for the endpoint for your Amazon Kendra experience.
    public struct ExperienceEndpoint: Swift.Sendable {
        /// The endpoint of your Amazon Kendra experience.
        public var endpoint: Swift.String?
        /// The type of endpoint for your Amazon Kendra experience. The type currently available is HOME, which is a unique and fully hosted URL to the home page of your Amazon Kendra experience.
        public var endpointType: KendraClientTypes.EndpointType?

        public init(
            endpoint: Swift.String? = nil,
            endpointType: KendraClientTypes.EndpointType? = nil
        )
        {
            self.endpoint = endpoint
            self.endpointType = endpointType
        }
    }
}

extension KendraClientTypes {

    public enum ExperienceStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [ExperienceStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeExperienceOutput: Swift.Sendable {
    /// Shows the configuration information for your Amazon Kendra experience. This includes ContentSourceConfiguration, which specifies the data source IDs and/or FAQ IDs, and UserIdentityConfiguration, which specifies the user or group information to grant access to your Amazon Kendra experience.
    public var configuration: KendraClientTypes.ExperienceConfiguration?
    /// The Unix timestamp when your Amazon Kendra experience was created.
    public var createdAt: Foundation.Date?
    /// Shows the description for your Amazon Kendra experience.
    public var description: Swift.String?
    /// Shows the endpoint URLs for your Amazon Kendra experiences. The URLs are unique and fully hosted by Amazon Web Services.
    public var endpoints: [KendraClientTypes.ExperienceEndpoint]?
    /// The reason your Amazon Kendra experience could not properly process.
    public var errorMessage: Swift.String?
    /// Shows the identifier of your Amazon Kendra experience.
    public var id: Swift.String?
    /// Shows the identifier of the index for your Amazon Kendra experience.
    public var indexId: Swift.String?
    /// Shows the name of your Amazon Kendra experience.
    public var name: Swift.String?
    /// Shows the Amazon Resource Name (ARN) of a role with permission to access Query API, QuerySuggestions API, SubmitFeedback API, and IAM Identity Center that stores your user and group information.
    public var roleArn: Swift.String?
    /// The current processing status of your Amazon Kendra experience. When the status is ACTIVE, your Amazon Kendra experience is ready to use. When the status is FAILED, the ErrorMessage field contains the reason that this failed.
    public var status: KendraClientTypes.ExperienceStatus?
    /// The Unix timestamp when your Amazon Kendra experience was last updated.
    public var updatedAt: Foundation.Date?

    public init(
        configuration: KendraClientTypes.ExperienceConfiguration? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        endpoints: [KendraClientTypes.ExperienceEndpoint]? = nil,
        errorMessage: Swift.String? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        status: KendraClientTypes.ExperienceStatus? = nil,
        updatedAt: Foundation.Date? = nil
    )
    {
        self.configuration = configuration
        self.createdAt = createdAt
        self.description = description
        self.endpoints = endpoints
        self.errorMessage = errorMessage
        self.id = id
        self.indexId = indexId
        self.name = name
        self.roleArn = roleArn
        self.status = status
        self.updatedAt = updatedAt
    }
}

public struct DescribeFaqInput: Swift.Sendable {
    /// The identifier of the FAQ you want to get information on.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for the FAQ.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

extension KendraClientTypes {

    public enum FaqStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [FaqStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeFaqOutput: Swift.Sendable {
    /// The Unix timestamp when the FAQ was created.
    public var createdAt: Foundation.Date?
    /// The description of the FAQ that you provided when it was created.
    public var description: Swift.String?
    /// If the Status field is FAILED, the ErrorMessage field contains the reason why the FAQ failed.
    public var errorMessage: Swift.String?
    /// The file format used by the input files for the FAQ.
    public var fileFormat: KendraClientTypes.FaqFileFormat?
    /// The identifier of the FAQ.
    public var id: Swift.String?
    /// The identifier of the index for the FAQ.
    public var indexId: Swift.String?
    /// The code for a language. This shows a supported language for the FAQ document. English is supported by default. For more information on supported languages, including their codes, see [Adding documents in languages other than English](https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html).
    public var languageCode: Swift.String?
    /// The name that you gave the FAQ when it was created.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the role that provides access to the S3 bucket containing the input files for the FAQ.
    public var roleArn: Swift.String?
    /// Information required to find a specific file in an Amazon S3 bucket.
    public var s3Path: KendraClientTypes.S3Path?
    /// The status of the FAQ. It is ready to use when the status is ACTIVE.
    public var status: KendraClientTypes.FaqStatus?
    /// The Unix timestamp when the FAQ was last updated.
    public var updatedAt: Foundation.Date?

    public init(
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        fileFormat: KendraClientTypes.FaqFileFormat? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        languageCode: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        s3Path: KendraClientTypes.S3Path? = nil,
        status: KendraClientTypes.FaqStatus? = nil,
        updatedAt: Foundation.Date? = nil
    )
    {
        self.createdAt = createdAt
        self.description = description
        self.errorMessage = errorMessage
        self.fileFormat = fileFormat
        self.id = id
        self.indexId = indexId
        self.languageCode = languageCode
        self.name = name
        self.roleArn = roleArn
        self.s3Path = s3Path
        self.status = status
        self.updatedAt = updatedAt
    }
}

public struct DescribeFeaturedResultsSetInput: Swift.Sendable {
    /// The identifier of the set of featured results that you want to get information on.
    /// This member is required.
    public var featuredResultsSetId: Swift.String?
    /// The identifier of the index used for featuring results.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        featuredResultsSetId: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.featuredResultsSetId = featuredResultsSetId
        self.indexId = indexId
    }
}

extension KendraClientTypes {

    /// A document ID doesn't exist but you have specified as a featured document. Amazon Kendra cannot feature the document if it doesn't exist in the index. You can check the status of a document and its ID or check for documents with status errors using the [BatchGetDocumentStatus](https://docs.aws.amazon.com/kendra/latest/dg/API_BatchGetDocumentStatus.html) API.
    public struct FeaturedDocumentMissing: Swift.Sendable {
        /// The identifier of the document that doesn't exist but you have specified as a featured document.
        public var id: Swift.String?

        public init(
            id: Swift.String? = nil
        )
        {
            self.id = id
        }
    }
}

extension KendraClientTypes {

    /// A featured document with its metadata information. This document is displayed at the top of the search results page, placed above all other results for certain queries. If there's an exact match of a query, then the document is featured in the search results.
    public struct FeaturedDocumentWithMetadata: Swift.Sendable {
        /// The identifier of the featured document with its metadata. You can use the [Query](https://docs.aws.amazon.com/kendra/latest/dg/API_Query.html) API to search for specific documents with their document IDs included in the result items, or you can use the console.
        public var id: Swift.String?
        /// The main title of the featured document.
        public var title: Swift.String?
        /// The source URI location of the featured document.
        public var uri: Swift.String?

        public init(
            id: Swift.String? = nil,
            title: Swift.String? = nil,
            uri: Swift.String? = nil
        )
        {
            self.id = id
            self.title = title
            self.uri = uri
        }
    }
}

public struct DescribeFeaturedResultsSetOutput: Swift.Sendable {
    /// The Unix timestamp when the set of the featured results was created.
    public var creationTimestamp: Swift.Int?
    /// The description for the set of featured results.
    public var description: Swift.String?
    /// The list of document IDs that don't exist but you have specified as featured documents. Amazon Kendra cannot feature these documents if they don't exist in the index. You can check the status of a document and its ID or check for documents with status errors using the [BatchGetDocumentStatus](https://docs.aws.amazon.com/kendra/latest/dg/API_BatchGetDocumentStatus.html) API.
    public var featuredDocumentsMissing: [KendraClientTypes.FeaturedDocumentMissing]?
    /// The list of document IDs for the documents you want to feature with their metadata information. For more information on the list of featured documents, see [FeaturedResultsSet](https://docs.aws.amazon.com/kendra/latest/dg/API_FeaturedResultsSet.html).
    public var featuredDocumentsWithMetadata: [KendraClientTypes.FeaturedDocumentWithMetadata]?
    /// The identifier of the set of featured results.
    public var featuredResultsSetId: Swift.String?
    /// The name for the set of featured results.
    public var featuredResultsSetName: Swift.String?
    /// The timestamp when the set of featured results was last updated.
    public var lastUpdatedTimestamp: Swift.Int?
    /// The list of queries for featuring results. For more information on the list of queries, see [FeaturedResultsSet](https://docs.aws.amazon.com/kendra/latest/dg/API_FeaturedResultsSet.html).
    public var queryTexts: [Swift.String]?
    /// The current status of the set of featured results. When the value is ACTIVE, featured results are ready for use. You can still configure your settings before setting the status to ACTIVE. You can set the status to ACTIVE or INACTIVE using the [UpdateFeaturedResultsSet](https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateFeaturedResultsSet.html) API. The queries you specify for featured results must be unique per featured results set for each index, whether the status is ACTIVE or INACTIVE.
    public var status: KendraClientTypes.FeaturedResultsSetStatus?

    public init(
        creationTimestamp: Swift.Int? = nil,
        description: Swift.String? = nil,
        featuredDocumentsMissing: [KendraClientTypes.FeaturedDocumentMissing]? = nil,
        featuredDocumentsWithMetadata: [KendraClientTypes.FeaturedDocumentWithMetadata]? = nil,
        featuredResultsSetId: Swift.String? = nil,
        featuredResultsSetName: Swift.String? = nil,
        lastUpdatedTimestamp: Swift.Int? = nil,
        queryTexts: [Swift.String]? = nil,
        status: KendraClientTypes.FeaturedResultsSetStatus? = nil
    )
    {
        self.creationTimestamp = creationTimestamp
        self.description = description
        self.featuredDocumentsMissing = featuredDocumentsMissing
        self.featuredDocumentsWithMetadata = featuredDocumentsWithMetadata
        self.featuredResultsSetId = featuredResultsSetId
        self.featuredResultsSetName = featuredResultsSetName
        self.lastUpdatedTimestamp = lastUpdatedTimestamp
        self.queryTexts = queryTexts
        self.status = status
    }
}

public struct DescribeIndexInput: Swift.Sendable {
    /// The identifier of the index you want to get information on.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension KendraClientTypes {

    /// Specifies additional capacity units configured for your Enterprise Edition index. You can add and remove capacity units to fit your usage requirements.
    public struct CapacityUnitsConfiguration: Swift.Sendable {
        /// The amount of extra query capacity for an index and [GetQuerySuggestions](https://docs.aws.amazon.com/kendra/latest/dg/API_GetQuerySuggestions.html) capacity. A single extra capacity unit for an index provides 0.1 queries per second or approximately 8,000 queries per day. You can add up to 100 extra capacity units. GetQuerySuggestions capacity is five times the provisioned query capacity for an index, or the base capacity of 2.5 calls per second, whichever is higher. For example, the base capacity for an index is 0.1 queries per second, and GetQuerySuggestions capacity has a base of 2.5 calls per second. If you add another 0.1 queries per second to total 0.2 queries per second for an index, the GetQuerySuggestions capacity is 2.5 calls per second (higher than five times 0.2 queries per second).
        /// This member is required.
        public var queryCapacityUnits: Swift.Int?
        /// The amount of extra storage capacity for an index. A single capacity unit provides 30 GB of storage space or 100,000 documents, whichever is reached first. You can add up to 100 extra capacity units.
        /// This member is required.
        public var storageCapacityUnits: Swift.Int?

        public init(
            queryCapacityUnits: Swift.Int? = nil,
            storageCapacityUnits: Swift.Int? = nil
        )
        {
            self.queryCapacityUnits = queryCapacityUnits
            self.storageCapacityUnits = storageCapacityUnits
        }
    }
}

extension KendraClientTypes {

    public enum Order: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [Order] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ASCENDING"
            case .descending: return "DESCENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides information for tuning the relevance of a field in a search. When a query includes terms that match the field, the results are given a boost in the response based on these tuning parameters.
    public struct Relevance: Swift.Sendable {
        /// Specifies the time period that the boost applies to. For example, to make the boost apply to documents with the field value within the last month, you would use "2628000s". Once the field value is beyond the specified range, the effect of the boost drops off. The higher the importance, the faster the effect drops off. If you don't specify a value, the default is 3 months. The value of the field is a numeric string followed by the character "s", for example "86400s" for one day, or "604800s" for one week. Only applies to DATE fields.
        public var duration: Swift.String?
        /// Indicates that this field determines how "fresh" a document is. For example, if document 1 was created on November 5, and document 2 was created on October 31, document 1 is "fresher" than document 2. Only applies to DATE fields.
        public var freshness: Swift.Bool?
        /// The relative importance of the field in the search. Larger numbers provide more of a boost than smaller numbers.
        public var importance: Swift.Int?
        /// Determines how values should be interpreted. When the RankOrder field is ASCENDING, higher numbers are better. For example, a document with a rating score of 10 is higher ranking than a document with a rating score of 1. When the RankOrder field is DESCENDING, lower numbers are better. For example, in a task tracking application, a priority 1 task is more important than a priority 5 task. Only applies to LONG fields.
        public var rankOrder: KendraClientTypes.Order?
        /// A list of values that should be given a different boost when they appear in the result list. For example, if you are boosting a field called "department", query terms that match the department field are boosted in the result. However, you can add entries from the department field to boost documents with those values higher. For example, you can add entries to the map with names of departments. If you add "HR",5 and "Legal",3 those departments are given special attention when they appear in the metadata of a document. When those terms appear they are given the specified importance instead of the regular importance for the boost.
        public var valueImportanceMap: [Swift.String: Swift.Int]?

        public init(
            duration: Swift.String? = nil,
            freshness: Swift.Bool? = nil,
            importance: Swift.Int? = nil,
            rankOrder: KendraClientTypes.Order? = nil,
            valueImportanceMap: [Swift.String: Swift.Int]? = nil
        )
        {
            self.duration = duration
            self.freshness = freshness
            self.importance = importance
            self.rankOrder = rankOrder
            self.valueImportanceMap = valueImportanceMap
        }
    }
}

extension KendraClientTypes {

    /// Provides information about how a custom index field is used during a search.
    public struct Search: Swift.Sendable {
        /// Determines whether the field is returned in the query response. The default is true.
        public var displayable: Swift.Bool
        /// Indicates that the field can be used to create search facets, a count of results for each value in the field. The default is false .
        public var facetable: Swift.Bool
        /// Determines whether the field is used in the search. If the Searchable field is true, you can use relevance tuning to manually tune how Amazon Kendra weights the field in the search. The default is true for string fields and false for number and date fields.
        public var searchable: Swift.Bool
        /// Determines whether the field can be used to sort the results of a query. If you specify sorting on a field that does not have Sortable set to true, Amazon Kendra returns an exception. The default is false.
        public var sortable: Swift.Bool

        public init(
            displayable: Swift.Bool = false,
            facetable: Swift.Bool = false,
            searchable: Swift.Bool = false,
            sortable: Swift.Bool = false
        )
        {
            self.displayable = displayable
            self.facetable = facetable
            self.searchable = searchable
            self.sortable = sortable
        }
    }
}

extension KendraClientTypes {

    public enum DocumentAttributeValueType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dateValue
        case longValue
        case stringListValue
        case stringValue
        case sdkUnknown(Swift.String)

        public static var allCases: [DocumentAttributeValueType] {
            return [
                .dateValue,
                .longValue,
                .stringListValue,
                .stringValue
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dateValue: return "DATE_VALUE"
            case .longValue: return "LONG_VALUE"
            case .stringListValue: return "STRING_LIST_VALUE"
            case .stringValue: return "STRING_VALUE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Specifies the properties, such as relevance tuning and searchability, of an index field.
    public struct DocumentMetadataConfiguration: Swift.Sendable {
        /// The name of the index field.
        /// This member is required.
        public var name: Swift.String?
        /// Provides tuning parameters to determine how the field affects the search results.
        public var relevance: KendraClientTypes.Relevance?
        /// Provides information about how the field is used during a search.
        public var search: KendraClientTypes.Search?
        /// The data type of the index field.
        /// This member is required.
        public var type: KendraClientTypes.DocumentAttributeValueType?

        public init(
            name: Swift.String? = nil,
            relevance: KendraClientTypes.Relevance? = nil,
            search: KendraClientTypes.Search? = nil,
            type: KendraClientTypes.DocumentAttributeValueType? = nil
        )
        {
            self.name = name
            self.relevance = relevance
            self.search = search
            self.type = type
        }
    }
}

extension KendraClientTypes {

    /// Provides statistical information about the FAQ questions and answers contained in an index.
    public struct FaqStatistics: Swift.Sendable {
        /// The total number of FAQ questions and answers contained in the index.
        /// This member is required.
        public var indexedQuestionAnswersCount: Swift.Int

        public init(
            indexedQuestionAnswersCount: Swift.Int = 0
        )
        {
            self.indexedQuestionAnswersCount = indexedQuestionAnswersCount
        }
    }
}

extension KendraClientTypes {

    /// Provides information about text documents indexed in an index.
    public struct TextDocumentStatistics: Swift.Sendable {
        /// The total size, in bytes, of the indexed documents.
        /// This member is required.
        public var indexedTextBytes: Swift.Int
        /// The number of text documents indexed.
        /// This member is required.
        public var indexedTextDocumentsCount: Swift.Int

        public init(
            indexedTextBytes: Swift.Int = 0,
            indexedTextDocumentsCount: Swift.Int = 0
        )
        {
            self.indexedTextBytes = indexedTextBytes
            self.indexedTextDocumentsCount = indexedTextDocumentsCount
        }
    }
}

extension KendraClientTypes {

    /// Provides information about the number of documents and the number of questions and answers in an index.
    public struct IndexStatistics: Swift.Sendable {
        /// The number of question and answer topics in the index.
        /// This member is required.
        public var faqStatistics: KendraClientTypes.FaqStatistics?
        /// The number of text documents indexed.
        /// This member is required.
        public var textDocumentStatistics: KendraClientTypes.TextDocumentStatistics?

        public init(
            faqStatistics: KendraClientTypes.FaqStatistics? = nil,
            textDocumentStatistics: KendraClientTypes.TextDocumentStatistics? = nil
        )
        {
            self.faqStatistics = faqStatistics
            self.textDocumentStatistics = textDocumentStatistics
        }
    }
}

extension KendraClientTypes {

    public enum IndexStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case systemUpdating
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [IndexStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .systemUpdating,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .systemUpdating: return "SYSTEM_UPDATING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeIndexOutput: Swift.Sendable {
    /// For Enterprise Edition indexes, you can choose to use additional capacity to meet the needs of your application. This contains the capacity units used for the index. A query or document storage capacity of zero indicates that the index is using the default capacity. For more information on the default capacity for an index and adjusting this, see [Adjusting capacity](https://docs.aws.amazon.com/kendra/latest/dg/adjusting-capacity.html).
    public var capacityUnits: KendraClientTypes.CapacityUnitsConfiguration?
    /// The Unix timestamp when the index was created.
    public var createdAt: Foundation.Date?
    /// The description for the index.
    public var description: Swift.String?
    /// Configuration information for document metadata or fields. Document metadata are fields or attributes associated with your documents. For example, the company department name associated with each document.
    public var documentMetadataConfigurations: [KendraClientTypes.DocumentMetadataConfiguration]?
    /// The Amazon Kendra edition used for the index. You decide the edition when you create the index.
    public var edition: KendraClientTypes.IndexEdition?
    /// When the Status field value is FAILED, the ErrorMessage field contains a message that explains why.
    public var errorMessage: Swift.String?
    /// The identifier of the index.
    public var id: Swift.String?
    /// Provides information about the number of FAQ questions and answers and the number of text documents indexed.
    public var indexStatistics: KendraClientTypes.IndexStatistics?
    /// The name of the index.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that gives Amazon Kendra permission to write to your Amazon CloudWatch logs.
    public var roleArn: Swift.String?
    /// The identifier of the KMS customer master key (CMK) that is used to encrypt your data. Amazon Kendra doesn't support asymmetric CMKs.
    public var serverSideEncryptionConfiguration: KendraClientTypes.ServerSideEncryptionConfiguration?
    /// The current status of the index. When the value is ACTIVE, the index is ready for use. If the Status field value is FAILED, the ErrorMessage field contains a message that explains why.
    public var status: KendraClientTypes.IndexStatus?
    /// The Unix timestamp when the index was last updated.
    public var updatedAt: Foundation.Date?
    /// The user context policy for the Amazon Kendra index.
    public var userContextPolicy: KendraClientTypes.UserContextPolicy?
    /// Whether you have enabled IAM Identity Center identity source for your users and groups. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.
    public var userGroupResolutionConfiguration: KendraClientTypes.UserGroupResolutionConfiguration?
    /// The user token configuration for the Amazon Kendra index.
    public var userTokenConfigurations: [KendraClientTypes.UserTokenConfiguration]?

    public init(
        capacityUnits: KendraClientTypes.CapacityUnitsConfiguration? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        documentMetadataConfigurations: [KendraClientTypes.DocumentMetadataConfiguration]? = nil,
        edition: KendraClientTypes.IndexEdition? = nil,
        errorMessage: Swift.String? = nil,
        id: Swift.String? = nil,
        indexStatistics: KendraClientTypes.IndexStatistics? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        serverSideEncryptionConfiguration: KendraClientTypes.ServerSideEncryptionConfiguration? = nil,
        status: KendraClientTypes.IndexStatus? = nil,
        updatedAt: Foundation.Date? = nil,
        userContextPolicy: KendraClientTypes.UserContextPolicy? = nil,
        userGroupResolutionConfiguration: KendraClientTypes.UserGroupResolutionConfiguration? = nil,
        userTokenConfigurations: [KendraClientTypes.UserTokenConfiguration]? = nil
    )
    {
        self.capacityUnits = capacityUnits
        self.createdAt = createdAt
        self.description = description
        self.documentMetadataConfigurations = documentMetadataConfigurations
        self.edition = edition
        self.errorMessage = errorMessage
        self.id = id
        self.indexStatistics = indexStatistics
        self.name = name
        self.roleArn = roleArn
        self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
        self.status = status
        self.updatedAt = updatedAt
        self.userContextPolicy = userContextPolicy
        self.userGroupResolutionConfiguration = userGroupResolutionConfiguration
        self.userTokenConfigurations = userTokenConfigurations
    }
}

public struct DescribePrincipalMappingInput: Swift.Sendable {
    /// The identifier of the data source to check the processing of PUT and DELETE actions for mapping users to their groups.
    public var dataSourceId: Swift.String?
    /// The identifier of the group required to check the processing of PUT and DELETE actions for mapping users to their groups.
    /// This member is required.
    public var groupId: Swift.String?
    /// The identifier of the index required to check the processing of PUT and DELETE actions for mapping users to their groups.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        dataSourceId: Swift.String? = nil,
        groupId: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
        self.groupId = groupId
        self.indexId = indexId
    }
}

extension KendraClientTypes {

    public enum PrincipalMappingStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deleted
        case deleting
        case failed
        case processing
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [PrincipalMappingStatus] {
            return [
                .deleted,
                .deleting,
                .failed,
                .processing,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .processing: return "PROCESSING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Summary information on the processing of PUT and DELETE actions for mapping users to their groups.
    public struct GroupOrderingIdSummary: Swift.Sendable {
        /// The reason an action could not be processed. An action can be a PUT or DELETE action for mapping users to their groups.
        public var failureReason: Swift.String?
        /// The Unix timestamp when an action was last updated. An action can be a PUT or DELETE action for mapping users to their groups.
        public var lastUpdatedAt: Foundation.Date?
        /// The order in which actions should complete processing. An action can be a PUT or DELETE action for mapping users to their groups.
        public var orderingId: Swift.Int?
        /// The Unix timestamp when an action was received by Amazon Kendra. An action can be a PUT or DELETE action for mapping users to their groups.
        public var receivedAt: Foundation.Date?
        /// The current processing status of actions for mapping users to their groups. The status can be either PROCESSING, SUCCEEDED, DELETING, DELETED, or FAILED.
        public var status: KendraClientTypes.PrincipalMappingStatus?

        public init(
            failureReason: Swift.String? = nil,
            lastUpdatedAt: Foundation.Date? = nil,
            orderingId: Swift.Int? = nil,
            receivedAt: Foundation.Date? = nil,
            status: KendraClientTypes.PrincipalMappingStatus? = nil
        )
        {
            self.failureReason = failureReason
            self.lastUpdatedAt = lastUpdatedAt
            self.orderingId = orderingId
            self.receivedAt = receivedAt
            self.status = status
        }
    }
}

public struct DescribePrincipalMappingOutput: Swift.Sendable {
    /// Shows the identifier of the data source to see information on the processing of PUT and DELETE actions for mapping users to their groups.
    public var dataSourceId: Swift.String?
    /// Shows the identifier of the group to see information on the processing of PUT and DELETE actions for mapping users to their groups.
    public var groupId: Swift.String?
    /// Shows the following information on the processing of PUT and DELETE actions for mapping users to their groups:
    ///
    /// * Status—the status can be either PROCESSING, SUCCEEDED, DELETING, DELETED, or FAILED.
    ///
    /// * Last updated—the last date-time an action was updated.
    ///
    /// * Received—the last date-time an action was received or submitted.
    ///
    /// * Ordering ID—the latest action that should process and apply after other actions.
    ///
    /// * Failure reason—the reason an action could not be processed.
    public var groupOrderingIdSummaries: [KendraClientTypes.GroupOrderingIdSummary]?
    /// Shows the identifier of the index to see information on the processing of PUT and DELETE actions for mapping users to their groups.
    public var indexId: Swift.String?

    public init(
        dataSourceId: Swift.String? = nil,
        groupId: Swift.String? = nil,
        groupOrderingIdSummaries: [KendraClientTypes.GroupOrderingIdSummary]? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
        self.groupId = groupId
        self.groupOrderingIdSummaries = groupOrderingIdSummaries
        self.indexId = indexId
    }
}

public struct DescribeQuerySuggestionsBlockListInput: Swift.Sendable {
    /// The identifier of the block list you want to get information on.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for the block list.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

extension KendraClientTypes {

    public enum QuerySuggestionsBlockListStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case activeButUpdateFailed
        case creating
        case deleting
        case failed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [QuerySuggestionsBlockListStatus] {
            return [
                .active,
                .activeButUpdateFailed,
                .creating,
                .deleting,
                .failed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .activeButUpdateFailed: return "ACTIVE_BUT_UPDATE_FAILED"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeQuerySuggestionsBlockListOutput: Swift.Sendable {
    /// The Unix timestamp when a block list for query suggestions was created.
    public var createdAt: Foundation.Date?
    /// The description for the block list.
    public var description: Swift.String?
    /// The error message containing details if there are issues processing the block list.
    public var errorMessage: Swift.String?
    /// The current size of the block list text file in S3.
    public var fileSizeBytes: Swift.Int?
    /// The identifier of the block list.
    public var id: Swift.String?
    /// The identifier of the index for the block list.
    public var indexId: Swift.String?
    /// The current number of valid, non-empty words or phrases in the block list text file.
    public var itemCount: Swift.Int?
    /// The name of the block list.
    public var name: Swift.String?
    /// The IAM (Identity and Access Management) role used by Amazon Kendra to access the block list text file in S3. The role needs S3 read permissions to your file in S3 and needs to give STS (Security Token Service) assume role permissions to Amazon Kendra.
    public var roleArn: Swift.String?
    /// Shows the current S3 path to your block list text file in your S3 bucket. Each block word or phrase should be on a separate line in a text file. For information on the current quota limits for block lists, see [Quotas for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/quotas.html).
    public var sourceS3Path: KendraClientTypes.S3Path?
    /// The current status of the block list. When the value is ACTIVE, the block list is ready for use.
    public var status: KendraClientTypes.QuerySuggestionsBlockListStatus?
    /// The Unix timestamp when a block list for query suggestions was last updated.
    public var updatedAt: Foundation.Date?

    public init(
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        fileSizeBytes: Swift.Int? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        itemCount: Swift.Int? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        sourceS3Path: KendraClientTypes.S3Path? = nil,
        status: KendraClientTypes.QuerySuggestionsBlockListStatus? = nil,
        updatedAt: Foundation.Date? = nil
    )
    {
        self.createdAt = createdAt
        self.description = description
        self.errorMessage = errorMessage
        self.fileSizeBytes = fileSizeBytes
        self.id = id
        self.indexId = indexId
        self.itemCount = itemCount
        self.name = name
        self.roleArn = roleArn
        self.sourceS3Path = sourceS3Path
        self.status = status
        self.updatedAt = updatedAt
    }
}

public struct DescribeQuerySuggestionsConfigInput: Swift.Sendable {
    /// The identifier of the index with query suggestions that you want to get information on.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        indexId: Swift.String? = nil
    )
    {
        self.indexId = indexId
    }
}

extension KendraClientTypes {

    public enum Mode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case enabled
        case learnOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [Mode] {
            return [
                .enabled,
                .learnOnly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .enabled: return "ENABLED"
            case .learnOnly: return "LEARN_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    public enum QuerySuggestionsStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [QuerySuggestionsStatus] {
            return [
                .active,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeQuerySuggestionsConfigOutput: Swift.Sendable {
    /// Configuration information for the document fields/attributes that you want to base query suggestions on.
    public var attributeSuggestionsConfig: KendraClientTypes.AttributeSuggestionsDescribeConfig?
    /// TRUE to use all queries, otherwise use only queries that include user information to generate the query suggestions.
    public var includeQueriesWithoutUserInformation: Swift.Bool?
    /// The Unix timestamp when query suggestions for an index was last cleared. After you clear suggestions, Amazon Kendra learns new suggestions based on new queries added to the query log from the time you cleared suggestions. Amazon Kendra only considers re-occurences of a query from the time you cleared suggestions.
    public var lastClearTime: Foundation.Date?
    /// The Unix timestamp when query suggestions for an index was last updated. Amazon Kendra automatically updates suggestions every 24 hours, after you change a setting or after you apply a [block list](https://docs.aws.amazon.com/kendra/latest/dg/query-suggestions.html#query-suggestions-blocklist).
    public var lastSuggestionsBuildTime: Foundation.Date?
    /// The minimum number of unique users who must search a query in order for the query to be eligible to suggest to your users.
    public var minimumNumberOfQueryingUsers: Swift.Int?
    /// The minimum number of times a query must be searched in order for the query to be eligible to suggest to your users.
    public var minimumQueryCount: Swift.Int?
    /// Whether query suggestions are currently in ENABLED mode or LEARN_ONLY mode. By default, Amazon Kendra enables query suggestions.LEARN_ONLY turns off query suggestions for your users. You can change the mode using the [UpdateQuerySuggestionsConfig](https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateQuerySuggestionsConfig.html) API.
    public var mode: KendraClientTypes.Mode?
    /// How recent your queries are in your query log time window (in days).
    public var queryLogLookBackWindowInDays: Swift.Int?
    /// Whether the status of query suggestions settings is currently ACTIVE or UPDATING. Active means the current settings apply and Updating means your changed settings are in the process of applying.
    public var status: KendraClientTypes.QuerySuggestionsStatus?
    /// The current total count of query suggestions for an index. This count can change when you update your query suggestions settings, if you filter out certain queries from suggestions using a block list, and as the query log accumulates more queries for Amazon Kendra to learn from. If the count is much lower than you expected, it could be because Amazon Kendra needs more queries in the query history to learn from or your current query suggestions settings are too strict.
    public var totalSuggestionsCount: Swift.Int?

    public init(
        attributeSuggestionsConfig: KendraClientTypes.AttributeSuggestionsDescribeConfig? = nil,
        includeQueriesWithoutUserInformation: Swift.Bool? = nil,
        lastClearTime: Foundation.Date? = nil,
        lastSuggestionsBuildTime: Foundation.Date? = nil,
        minimumNumberOfQueryingUsers: Swift.Int? = nil,
        minimumQueryCount: Swift.Int? = nil,
        mode: KendraClientTypes.Mode? = nil,
        queryLogLookBackWindowInDays: Swift.Int? = nil,
        status: KendraClientTypes.QuerySuggestionsStatus? = nil,
        totalSuggestionsCount: Swift.Int? = nil
    )
    {
        self.attributeSuggestionsConfig = attributeSuggestionsConfig
        self.includeQueriesWithoutUserInformation = includeQueriesWithoutUserInformation
        self.lastClearTime = lastClearTime
        self.lastSuggestionsBuildTime = lastSuggestionsBuildTime
        self.minimumNumberOfQueryingUsers = minimumNumberOfQueryingUsers
        self.minimumQueryCount = minimumQueryCount
        self.mode = mode
        self.queryLogLookBackWindowInDays = queryLogLookBackWindowInDays
        self.status = status
        self.totalSuggestionsCount = totalSuggestionsCount
    }
}

public struct DescribeThesaurusInput: Swift.Sendable {
    /// The identifier of the thesaurus you want to get information on.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for the thesaurus.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

extension KendraClientTypes {

    public enum ThesaurusStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case activeButUpdateFailed
        case creating
        case deleting
        case failed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ThesaurusStatus] {
            return [
                .active,
                .activeButUpdateFailed,
                .creating,
                .deleting,
                .failed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .activeButUpdateFailed: return "ACTIVE_BUT_UPDATE_FAILED"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeThesaurusOutput: Swift.Sendable {
    /// The Unix timestamp when the thesaurus was created.
    public var createdAt: Foundation.Date?
    /// The thesaurus description.
    public var description: Swift.String?
    /// When the Status field value is FAILED, the ErrorMessage field provides more information.
    public var errorMessage: Swift.String?
    /// The size of the thesaurus file in bytes.
    public var fileSizeBytes: Swift.Int?
    /// The identifier of the thesaurus.
    public var id: Swift.String?
    /// The identifier of the index for the thesaurus.
    public var indexId: Swift.String?
    /// The thesaurus name.
    public var name: Swift.String?
    /// An IAM role that gives Amazon Kendra permissions to access thesaurus file specified in SourceS3Path.
    public var roleArn: Swift.String?
    /// Information required to find a specific file in an Amazon S3 bucket.
    public var sourceS3Path: KendraClientTypes.S3Path?
    /// The current status of the thesaurus. When the value is ACTIVE, queries are able to use the thesaurus. If the Status field value is FAILED, the ErrorMessage field provides more information. If the status is ACTIVE_BUT_UPDATE_FAILED, it means that Amazon Kendra could not ingest the new thesaurus file. The old thesaurus file is still active.
    public var status: KendraClientTypes.ThesaurusStatus?
    /// The number of synonym rules in the thesaurus file.
    public var synonymRuleCount: Swift.Int?
    /// The number of unique terms in the thesaurus file. For example, the synonyms a,b,c and a=>d, the term count would be 4.
    public var termCount: Swift.Int?
    /// The Unix timestamp when the thesaurus was last updated.
    public var updatedAt: Foundation.Date?

    public init(
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        fileSizeBytes: Swift.Int? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        sourceS3Path: KendraClientTypes.S3Path? = nil,
        status: KendraClientTypes.ThesaurusStatus? = nil,
        synonymRuleCount: Swift.Int? = nil,
        termCount: Swift.Int? = nil,
        updatedAt: Foundation.Date? = nil
    )
    {
        self.createdAt = createdAt
        self.description = description
        self.errorMessage = errorMessage
        self.fileSizeBytes = fileSizeBytes
        self.id = id
        self.indexId = indexId
        self.name = name
        self.roleArn = roleArn
        self.sourceS3Path = sourceS3Path
        self.status = status
        self.synonymRuleCount = synonymRuleCount
        self.termCount = termCount
        self.updatedAt = updatedAt
    }
}

public struct DisassociateEntitiesFromExperienceInput: Swift.Sendable {
    /// Lists users or groups in your IAM Identity Center identity source.
    /// This member is required.
    public var entityList: [KendraClientTypes.EntityConfiguration]?
    /// The identifier of your Amazon Kendra experience.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for your Amazon Kendra experience.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        entityList: [KendraClientTypes.EntityConfiguration]? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.entityList = entityList
        self.id = id
        self.indexId = indexId
    }
}

public struct DisassociateEntitiesFromExperienceOutput: Swift.Sendable {
    /// Lists the users or groups in your IAM Identity Center identity source that failed to properly remove access to your Amazon Kendra experience.
    public var failedEntityList: [KendraClientTypes.FailedEntity]?

    public init(
        failedEntityList: [KendraClientTypes.FailedEntity]? = nil
    )
    {
        self.failedEntityList = failedEntityList
    }
}

public struct DisassociatePersonasFromEntitiesInput: Swift.Sendable {
    /// The identifiers of users or groups in your IAM Identity Center identity source. For example, user IDs could be user emails.
    /// This member is required.
    public var entityIds: [Swift.String]?
    /// The identifier of your Amazon Kendra experience.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for your Amazon Kendra experience.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        entityIds: [Swift.String]? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.entityIds = entityIds
        self.id = id
        self.indexId = indexId
    }
}

public struct DisassociatePersonasFromEntitiesOutput: Swift.Sendable {
    /// Lists the users or groups in your IAM Identity Center identity source that failed to properly remove access to your Amazon Kendra experience.
    public var failedEntityList: [KendraClientTypes.FailedEntity]?

    public init(
        failedEntityList: [KendraClientTypes.FailedEntity]? = nil
    )
    {
        self.failedEntityList = failedEntityList
    }
}

extension KendraClientTypes {

    public enum SuggestionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case documentAttributes
        case query
        case sdkUnknown(Swift.String)

        public static var allCases: [SuggestionType] {
            return [
                .documentAttributes,
                .query
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .documentAttributes: return "DOCUMENT_ATTRIBUTES"
            case .query: return "QUERY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// The document ID and its fields/attributes that are used for a query suggestion, if document fields set to use for query suggestions.
    public struct SourceDocument: Swift.Sendable {
        /// The additional fields/attributes to include in the response. You can use additional fields to provide extra information in the response. Additional fields are not used to based suggestions on.
        public var additionalAttributes: [KendraClientTypes.DocumentAttribute]?
        /// The identifier of the document used for a query suggestion.
        public var documentId: Swift.String?
        /// The document fields/attributes used for a query suggestion.
        public var suggestionAttributes: [Swift.String]?

        public init(
            additionalAttributes: [KendraClientTypes.DocumentAttribute]? = nil,
            documentId: Swift.String? = nil,
            suggestionAttributes: [Swift.String]? = nil
        )
        {
            self.additionalAttributes = additionalAttributes
            self.documentId = documentId
            self.suggestionAttributes = suggestionAttributes
        }
    }
}

extension KendraClientTypes {

    /// The text highlights for a single query suggestion.
    public struct SuggestionHighlight: Swift.Sendable {
        /// The zero-based location in the response string where the highlight starts.
        public var beginOffset: Swift.Int?
        /// The zero-based location in the response string where the highlight ends.
        public var endOffset: Swift.Int?

        public init(
            beginOffset: Swift.Int? = nil,
            endOffset: Swift.Int? = nil
        )
        {
            self.beginOffset = beginOffset
            self.endOffset = endOffset
        }
    }
}

extension KendraClientTypes {

    /// Provides text and information about where to highlight the query suggestion text.
    public struct SuggestionTextWithHighlights: Swift.Sendable {
        /// The beginning and end of the query suggestion text that should be highlighted.
        public var highlights: [KendraClientTypes.SuggestionHighlight]?
        /// The query suggestion text to display to the user.
        public var text: Swift.String?

        public init(
            highlights: [KendraClientTypes.SuggestionHighlight]? = nil,
            text: Swift.String? = nil
        )
        {
            self.highlights = highlights
            self.text = text
        }
    }
}

extension KendraClientTypes {

    /// The SuggestionTextWithHighlights structure information.
    public struct SuggestionValue: Swift.Sendable {
        /// The SuggestionTextWithHighlights structure that contains the query suggestion text and highlights.
        public var text: KendraClientTypes.SuggestionTextWithHighlights?

        public init(
            text: KendraClientTypes.SuggestionTextWithHighlights? = nil
        )
        {
            self.text = text
        }
    }
}

extension KendraClientTypes {

    /// A single query suggestion.
    public struct Suggestion: Swift.Sendable {
        /// The UUID (universally unique identifier) of a single query suggestion.
        public var id: Swift.String?
        /// The list of document IDs and their fields/attributes that are used for a single query suggestion, if document fields set to use for query suggestions.
        public var sourceDocuments: [KendraClientTypes.SourceDocument]?
        /// The value for the UUID (universally unique identifier) of a single query suggestion. The value is the text string of a suggestion.
        public var value: KendraClientTypes.SuggestionValue?

        public init(
            id: Swift.String? = nil,
            sourceDocuments: [KendraClientTypes.SourceDocument]? = nil,
            value: KendraClientTypes.SuggestionValue? = nil
        )
        {
            self.id = id
            self.sourceDocuments = sourceDocuments
            self.value = value
        }
    }
}

public struct GetQuerySuggestionsOutput: Swift.Sendable {
    /// The identifier for a list of query suggestions for an index.
    public var querySuggestionsId: Swift.String?
    /// A list of query suggestions for an index.
    public var suggestions: [KendraClientTypes.Suggestion]?

    public init(
        querySuggestionsId: Swift.String? = nil,
        suggestions: [KendraClientTypes.Suggestion]? = nil
    )
    {
        self.querySuggestionsId = querySuggestionsId
        self.suggestions = suggestions
    }
}

/// The input to the request is not valid. Please provide the correct input and try again.
public struct InvalidRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension KendraClientTypes {

    public enum Interval: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case oneMonthAgo
        case oneWeekAgo
        case thisMonth
        case thisWeek
        case twoMonthsAgo
        case twoWeeksAgo
        case sdkUnknown(Swift.String)

        public static var allCases: [Interval] {
            return [
                .oneMonthAgo,
                .oneWeekAgo,
                .thisMonth,
                .thisWeek,
                .twoMonthsAgo,
                .twoWeeksAgo
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .oneMonthAgo: return "ONE_MONTH_AGO"
            case .oneWeekAgo: return "ONE_WEEK_AGO"
            case .thisMonth: return "THIS_MONTH"
            case .thisWeek: return "THIS_WEEK"
            case .twoMonthsAgo: return "TWO_MONTHS_AGO"
            case .twoWeeksAgo: return "TWO_WEEKS_AGO"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    public enum MetricType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aggQueryDocMetrics
        case docsByClickCount
        case queriesByCount
        case queriesByZeroClickRate
        case queriesByZeroResultRate
        case trendQueryDocMetrics
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricType] {
            return [
                .aggQueryDocMetrics,
                .docsByClickCount,
                .queriesByCount,
                .queriesByZeroClickRate,
                .queriesByZeroResultRate,
                .trendQueryDocMetrics
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aggQueryDocMetrics: return "AGG_QUERY_DOC_METRICS"
            case .docsByClickCount: return "DOCS_BY_CLICK_COUNT"
            case .queriesByCount: return "QUERIES_BY_COUNT"
            case .queriesByZeroClickRate: return "QUERIES_BY_ZERO_CLICK_RATE"
            case .queriesByZeroResultRate: return "QUERIES_BY_ZERO_RESULT_RATE"
            case .trendQueryDocMetrics: return "TREND_QUERY_DOC_METRICS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetSnapshotsInput: Swift.Sendable {
    /// The identifier of the index to get search metrics data.
    /// This member is required.
    public var indexId: Swift.String?
    /// The time interval or time window to get search metrics data. The time interval uses the time zone of your index. You can view data in the following time windows:
    ///
    /// * THIS_WEEK: The current week, starting on the Sunday and ending on the day before the current date.
    ///
    /// * ONE_WEEK_AGO: The previous week, starting on the Sunday and ending on the following Saturday.
    ///
    /// * TWO_WEEKS_AGO: The week before the previous week, starting on the Sunday and ending on the following Saturday.
    ///
    /// * THIS_MONTH: The current month, starting on the first day of the month and ending on the day before the current date.
    ///
    /// * ONE_MONTH_AGO: The previous month, starting on the first day of the month and ending on the last day of the month.
    ///
    /// * TWO_MONTHS_AGO: The month before the previous month, starting on the first day of the month and ending on last day of the month.
    /// This member is required.
    public var interval: KendraClientTypes.Interval?
    /// The maximum number of returned data for the metric.
    public var maxResults: Swift.Int?
    /// The metric you want to retrieve. You can specify only one metric per call. For more information about the metrics you can view, see [Gaining insights with search analytics](https://docs.aws.amazon.com/kendra/latest/dg/search-analytics.html).
    /// This member is required.
    public var metricType: KendraClientTypes.MetricType?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of search metrics data.
    public var nextToken: Swift.String?

    public init(
        indexId: Swift.String? = nil,
        interval: KendraClientTypes.Interval? = nil,
        maxResults: Swift.Int? = nil,
        metricType: KendraClientTypes.MetricType? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.indexId = indexId
        self.interval = interval
        self.maxResults = maxResults
        self.metricType = metricType
        self.nextToken = nextToken
    }
}

extension KendraClientTypes {

    /// Provides a range of time.
    public struct TimeRange: Swift.Sendable {
        /// The Unix timestamp for the end of the time range.
        public var endTime: Foundation.Date?
        /// The Unix timestamp for the beginning of the time range.
        public var startTime: Foundation.Date?

        public init(
            endTime: Foundation.Date? = nil,
            startTime: Foundation.Date? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
        }
    }
}

public struct GetSnapshotsOutput: Swift.Sendable {
    /// If the response is truncated, Amazon Kendra returns this token, which you can use in a later request to retrieve the next set of search metrics data.
    public var nextToken: Swift.String?
    /// The Unix timestamp for the beginning and end of the time window for the search metrics data.
    public var snapShotTimeFilter: KendraClientTypes.TimeRange?
    /// The search metrics data. The data returned depends on the metric type you requested.
    public var snapshotsData: [[Swift.String]]?
    /// The column headers for the search metrics data.
    public var snapshotsDataHeader: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        snapShotTimeFilter: KendraClientTypes.TimeRange? = nil,
        snapshotsData: [[Swift.String]]? = nil,
        snapshotsDataHeader: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.snapShotTimeFilter = snapShotTimeFilter
        self.snapshotsData = snapshotsData
        self.snapshotsDataHeader = snapshotsDataHeader
    }
}

public struct ListAccessControlConfigurationsInput: Swift.Sendable {
    /// The identifier of the index for the access control configuration.
    /// This member is required.
    public var indexId: Swift.String?
    /// The maximum number of access control configurations to return.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there's more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of access control configurations.
    public var nextToken: Swift.String?

    public init(
        indexId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.indexId = indexId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListAccessControlConfigurationsOutput: Swift.Sendable {
    /// The details of your access control configurations.
    /// This member is required.
    public var accessControlConfigurations: [KendraClientTypes.AccessControlConfigurationSummary]?
    /// If the response is truncated, Amazon Kendra returns this token, which you can use in the subsequent request to retrieve the next set of access control configurations.
    public var nextToken: Swift.String?

    public init(
        accessControlConfigurations: [KendraClientTypes.AccessControlConfigurationSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accessControlConfigurations = accessControlConfigurations
        self.nextToken = nextToken
    }
}

public struct ListDataSourcesInput: Swift.Sendable {
    /// The identifier of the index used with one or more data source connectors.
    /// This member is required.
    public var indexId: Swift.String?
    /// The maximum number of data source connectors to return.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of data source connectors.
    public var nextToken: Swift.String?

    public init(
        indexId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.indexId = indexId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension KendraClientTypes {

    /// Summary information for a Amazon Kendra data source.
    public struct DataSourceSummary: Swift.Sendable {
        /// The Unix timestamp when the data source connector was created.
        public var createdAt: Foundation.Date?
        /// The identifier for the data source.
        public var id: Swift.String?
        /// The code for a language. This shows a supported language for all documents in the data source. English is supported by default. For more information on supported languages, including their codes, see [Adding documents in languages other than English](https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html).
        public var languageCode: Swift.String?
        /// The name of the data source.
        public var name: Swift.String?
        /// The status of the data source. When the status is ACTIVE the data source is ready to use.
        public var status: KendraClientTypes.DataSourceStatus?
        /// The type of the data source.
        public var type: KendraClientTypes.DataSourceType?
        /// The Unix timestamp when the data source connector was last updated.
        public var updatedAt: Foundation.Date?

        public init(
            createdAt: Foundation.Date? = nil,
            id: Swift.String? = nil,
            languageCode: Swift.String? = nil,
            name: Swift.String? = nil,
            status: KendraClientTypes.DataSourceStatus? = nil,
            type: KendraClientTypes.DataSourceType? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.id = id
            self.languageCode = languageCode
            self.name = name
            self.status = status
            self.type = type
            self.updatedAt = updatedAt
        }
    }
}

public struct ListDataSourcesOutput: Swift.Sendable {
    /// If the response is truncated, Amazon Kendra returns this token that you can use in the subsequent request to retrieve the next set of data source connectors.
    public var nextToken: Swift.String?
    /// An array of summary information for one or more data source connector.
    public var summaryItems: [KendraClientTypes.DataSourceSummary]?

    public init(
        nextToken: Swift.String? = nil,
        summaryItems: [KendraClientTypes.DataSourceSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaryItems = summaryItems
    }
}

extension KendraClientTypes {

    public enum DataSourceSyncJobStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aborted
        case failed
        case incomplete
        case stopping
        case succeeded
        case syncing
        case syncingIndexing
        case sdkUnknown(Swift.String)

        public static var allCases: [DataSourceSyncJobStatus] {
            return [
                .aborted,
                .failed,
                .incomplete,
                .stopping,
                .succeeded,
                .syncing,
                .syncingIndexing
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aborted: return "ABORTED"
            case .failed: return "FAILED"
            case .incomplete: return "INCOMPLETE"
            case .stopping: return "STOPPING"
            case .succeeded: return "SUCCEEDED"
            case .syncing: return "SYNCING"
            case .syncingIndexing: return "SYNCING_INDEXING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListDataSourceSyncJobsInput: Swift.Sendable {
    /// The identifier of the data source connector.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index used with the data source connector.
    /// This member is required.
    public var indexId: Swift.String?
    /// The maximum number of synchronization jobs to return in the response. If there are fewer results in the list, this response contains only the actual results.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of jobs.
    public var nextToken: Swift.String?
    /// When specified, the synchronization jobs returned in the list are limited to jobs between the specified dates.
    public var startTimeFilter: KendraClientTypes.TimeRange?
    /// Only returns synchronization jobs with the Status field equal to the specified status.
    public var statusFilter: KendraClientTypes.DataSourceSyncJobStatus?

    public init(
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        startTimeFilter: KendraClientTypes.TimeRange? = nil,
        statusFilter: KendraClientTypes.DataSourceSyncJobStatus? = nil
    )
    {
        self.id = id
        self.indexId = indexId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.startTimeFilter = startTimeFilter
        self.statusFilter = statusFilter
    }
}

extension KendraClientTypes {

    /// Maps a batch delete document request to a specific data source sync job. This is optional and should only be supplied when documents are deleted by a data source connector.
    public struct DataSourceSyncJobMetrics: Swift.Sendable {
        /// The number of documents added from the data source up to now in the data source sync.
        public var documentsAdded: Swift.String?
        /// The number of documents deleted from the data source up to now in the data source sync run.
        public var documentsDeleted: Swift.String?
        /// The number of documents that failed to sync from the data source up to now in the data source sync run.
        public var documentsFailed: Swift.String?
        /// The number of documents modified in the data source up to now in the data source sync run.
        public var documentsModified: Swift.String?
        /// The current number of documents crawled by the current sync job in the data source.
        public var documentsScanned: Swift.String?

        public init(
            documentsAdded: Swift.String? = nil,
            documentsDeleted: Swift.String? = nil,
            documentsFailed: Swift.String? = nil,
            documentsModified: Swift.String? = nil,
            documentsScanned: Swift.String? = nil
        )
        {
            self.documentsAdded = documentsAdded
            self.documentsDeleted = documentsDeleted
            self.documentsFailed = documentsFailed
            self.documentsModified = documentsModified
            self.documentsScanned = documentsScanned
        }
    }
}

extension KendraClientTypes {

    /// Provides information about a data source synchronization job.
    public struct DataSourceSyncJob: Swift.Sendable {
        /// If the reason that the synchronization failed is due to an error with the underlying data source, this field contains a code that identifies the error.
        public var dataSourceErrorCode: Swift.String?
        /// The Unix timestamp when the synchronization job completed.
        public var endTime: Foundation.Date?
        /// If the Status field is set to FAILED, the ErrorCode field indicates the reason the synchronization failed.
        public var errorCode: KendraClientTypes.ErrorCode?
        /// If the Status field is set to ERROR, the ErrorMessage field contains a description of the error that caused the synchronization to fail.
        public var errorMessage: Swift.String?
        /// A identifier for the synchronization job.
        public var executionId: Swift.String?
        /// Maps a batch delete document request to a specific data source sync job. This is optional and should only be supplied when documents are deleted by a data source connector.
        public var metrics: KendraClientTypes.DataSourceSyncJobMetrics?
        /// The Unix timestamp when the synchronization job started.
        public var startTime: Foundation.Date?
        /// The execution status of the synchronization job. When the Status field is set to SUCCEEDED, the synchronization job is done. If the status code is set to FAILED, the ErrorCode and ErrorMessage fields give you the reason for the failure.
        public var status: KendraClientTypes.DataSourceSyncJobStatus?

        public init(
            dataSourceErrorCode: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            errorCode: KendraClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            executionId: Swift.String? = nil,
            metrics: KendraClientTypes.DataSourceSyncJobMetrics? = nil,
            startTime: Foundation.Date? = nil,
            status: KendraClientTypes.DataSourceSyncJobStatus? = nil
        )
        {
            self.dataSourceErrorCode = dataSourceErrorCode
            self.endTime = endTime
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.executionId = executionId
            self.metrics = metrics
            self.startTime = startTime
            self.status = status
        }
    }
}

public struct ListDataSourceSyncJobsOutput: Swift.Sendable {
    /// A history of synchronization jobs for the data source connector.
    public var history: [KendraClientTypes.DataSourceSyncJob]?
    /// If the response is truncated, Amazon Kendra returns this token that you can use in the subsequent request to retrieve the next set of jobs.
    public var nextToken: Swift.String?

    public init(
        history: [KendraClientTypes.DataSourceSyncJob]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.history = history
        self.nextToken = nextToken
    }
}

public struct ListEntityPersonasInput: Swift.Sendable {
    /// The identifier of your Amazon Kendra experience.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for your Amazon Kendra experience.
    /// This member is required.
    public var indexId: Swift.String?
    /// The maximum number of returned users or groups.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of users or groups.
    public var nextToken: Swift.String?

    public init(
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension KendraClientTypes {

    /// Summary information for users or groups in your IAM Identity Center identity source. This applies to users and groups with specific permissions that define their level of access to your Amazon Kendra experience. You can create an Amazon Kendra experience such as a search application. For more information on creating a search application experience, see [Building a search experience with no code](https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html).
    public struct PersonasSummary: Swift.Sendable {
        /// The Unix timestamp when the summary information was created.
        public var createdAt: Foundation.Date?
        /// The identifier of a user or group in your IAM Identity Center identity source. For example, a user ID could be an email.
        public var entityId: Swift.String?
        /// The persona that defines the specific permissions of the user or group in your IAM Identity Center identity source. The available personas or access roles are Owner and Viewer. For more information on these personas, see [Providing access to your search page](https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html#access-search-experience).
        public var persona: KendraClientTypes.Persona?
        /// The Unix timestamp when the summary information was last updated.
        public var updatedAt: Foundation.Date?

        public init(
            createdAt: Foundation.Date? = nil,
            entityId: Swift.String? = nil,
            persona: KendraClientTypes.Persona? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.entityId = entityId
            self.persona = persona
            self.updatedAt = updatedAt
        }
    }
}

public struct ListEntityPersonasOutput: Swift.Sendable {
    /// If the response is truncated, Amazon Kendra returns this token, which you can use in a later request to retrieve the next set of users or groups.
    public var nextToken: Swift.String?
    /// An array of summary information for one or more users or groups.
    public var summaryItems: [KendraClientTypes.PersonasSummary]?

    public init(
        nextToken: Swift.String? = nil,
        summaryItems: [KendraClientTypes.PersonasSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaryItems = summaryItems
    }
}

public struct ListExperienceEntitiesInput: Swift.Sendable {
    /// The identifier of your Amazon Kendra experience.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for your Amazon Kendra experience.
    /// This member is required.
    public var indexId: Swift.String?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of users or groups.
    public var nextToken: Swift.String?

    public init(
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
        self.nextToken = nextToken
    }
}

extension KendraClientTypes {

    /// Information about the user entity.
    public struct EntityDisplayData: Swift.Sendable {
        /// The first name of the user.
        public var firstName: Swift.String?
        /// The name of the group.
        public var groupName: Swift.String?
        /// The user name of the user.
        public var identifiedUserName: Swift.String?
        /// The last name of the user.
        public var lastName: Swift.String?
        /// The name of the user.
        public var userName: Swift.String?

        public init(
            firstName: Swift.String? = nil,
            groupName: Swift.String? = nil,
            identifiedUserName: Swift.String? = nil,
            lastName: Swift.String? = nil,
            userName: Swift.String? = nil
        )
        {
            self.firstName = firstName
            self.groupName = groupName
            self.identifiedUserName = identifiedUserName
            self.lastName = lastName
            self.userName = userName
        }
    }
}

extension KendraClientTypes.EntityDisplayData: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EntityDisplayData(firstName: \"CONTENT_REDACTED\", groupName: \"CONTENT_REDACTED\", identifiedUserName: \"CONTENT_REDACTED\", lastName: \"CONTENT_REDACTED\", userName: \"CONTENT_REDACTED\")"}
}

extension KendraClientTypes {

    /// Summary information for users or groups in your IAM Identity Center identity source with granted access to your Amazon Kendra experience. You can create an Amazon Kendra experience such as a search application. For more information on creating a search application experience, see [Building a search experience with no code](https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html).
    public struct ExperienceEntitiesSummary: Swift.Sendable {
        /// Information about the user entity.
        public var displayData: KendraClientTypes.EntityDisplayData?
        /// The identifier of a user or group in your IAM Identity Center identity source. For example, a user ID could be an email.
        public var entityId: Swift.String?
        /// Shows the type as User or Group.
        public var entityType: KendraClientTypes.EntityType?

        public init(
            displayData: KendraClientTypes.EntityDisplayData? = nil,
            entityId: Swift.String? = nil,
            entityType: KendraClientTypes.EntityType? = nil
        )
        {
            self.displayData = displayData
            self.entityId = entityId
            self.entityType = entityType
        }
    }
}

public struct ListExperienceEntitiesOutput: Swift.Sendable {
    /// If the response is truncated, Amazon Kendra returns this token, which you can use in a later request to retrieve the next set of users or groups.
    public var nextToken: Swift.String?
    /// An array of summary information for one or more users or groups.
    public var summaryItems: [KendraClientTypes.ExperienceEntitiesSummary]?

    public init(
        nextToken: Swift.String? = nil,
        summaryItems: [KendraClientTypes.ExperienceEntitiesSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaryItems = summaryItems
    }
}

public struct ListExperiencesInput: Swift.Sendable {
    /// The identifier of the index for your Amazon Kendra experience.
    /// This member is required.
    public var indexId: Swift.String?
    /// The maximum number of returned Amazon Kendra experiences.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of Amazon Kendra experiences.
    public var nextToken: Swift.String?

    public init(
        indexId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.indexId = indexId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension KendraClientTypes {

    /// Summary information for your Amazon Kendra experience. You can create an Amazon Kendra experience such as a search application. For more information on creating a search application experience, see [Building a search experience with no code](https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html).
    public struct ExperiencesSummary: Swift.Sendable {
        /// The Unix timestamp when your Amazon Kendra experience was created.
        public var createdAt: Foundation.Date?
        /// The endpoint URLs for your Amazon Kendra experiences. The URLs are unique and fully hosted by Amazon Web Services.
        public var endpoints: [KendraClientTypes.ExperienceEndpoint]?
        /// The identifier of your Amazon Kendra experience.
        public var id: Swift.String?
        /// The name of your Amazon Kendra experience.
        public var name: Swift.String?
        /// The processing status of your Amazon Kendra experience.
        public var status: KendraClientTypes.ExperienceStatus?

        public init(
            createdAt: Foundation.Date? = nil,
            endpoints: [KendraClientTypes.ExperienceEndpoint]? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            status: KendraClientTypes.ExperienceStatus? = nil
        )
        {
            self.createdAt = createdAt
            self.endpoints = endpoints
            self.id = id
            self.name = name
            self.status = status
        }
    }
}

public struct ListExperiencesOutput: Swift.Sendable {
    /// If the response is truncated, Amazon Kendra returns this token, which you can use in a later request to retrieve the next set of Amazon Kendra experiences.
    public var nextToken: Swift.String?
    /// An array of summary information for one or more Amazon Kendra experiences.
    public var summaryItems: [KendraClientTypes.ExperiencesSummary]?

    public init(
        nextToken: Swift.String? = nil,
        summaryItems: [KendraClientTypes.ExperiencesSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaryItems = summaryItems
    }
}

public struct ListFaqsInput: Swift.Sendable {
    /// The index that contains the FAQ lists.
    /// This member is required.
    public var indexId: Swift.String?
    /// The maximum number of FAQs to return in the response. If there are fewer results in the list, this response contains only the actual results.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of FAQs.
    public var nextToken: Swift.String?

    public init(
        indexId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.indexId = indexId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension KendraClientTypes {

    /// Summary information for frequently asked questions and answers included in an index.
    public struct FaqSummary: Swift.Sendable {
        /// The Unix timestamp when the FAQ was created.
        public var createdAt: Foundation.Date?
        /// The file type used to create the FAQ.
        public var fileFormat: KendraClientTypes.FaqFileFormat?
        /// The identifier of the FAQ.
        public var id: Swift.String?
        /// The code for a language. This shows a supported language for the FAQ document as part of the summary information for FAQs. English is supported by default. For more information on supported languages, including their codes, see [Adding documents in languages other than English](https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html).
        public var languageCode: Swift.String?
        /// The name that you assigned the FAQ when you created or updated the FAQ.
        public var name: Swift.String?
        /// The current status of the FAQ. When the status is ACTIVE the FAQ is ready for use.
        public var status: KendraClientTypes.FaqStatus?
        /// The Unix timestamp when the FAQ was last updated.
        public var updatedAt: Foundation.Date?

        public init(
            createdAt: Foundation.Date? = nil,
            fileFormat: KendraClientTypes.FaqFileFormat? = nil,
            id: Swift.String? = nil,
            languageCode: Swift.String? = nil,
            name: Swift.String? = nil,
            status: KendraClientTypes.FaqStatus? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.fileFormat = fileFormat
            self.id = id
            self.languageCode = languageCode
            self.name = name
            self.status = status
            self.updatedAt = updatedAt
        }
    }
}

public struct ListFaqsOutput: Swift.Sendable {
    /// information about the FAQs associated with the specified index.
    public var faqSummaryItems: [KendraClientTypes.FaqSummary]?
    /// If the response is truncated, Amazon Kendra returns this token that you can use in the subsequent request to retrieve the next set of FAQs.
    public var nextToken: Swift.String?

    public init(
        faqSummaryItems: [KendraClientTypes.FaqSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.faqSummaryItems = faqSummaryItems
        self.nextToken = nextToken
    }
}

public struct ListFeaturedResultsSetsInput: Swift.Sendable {
    /// The identifier of the index used for featuring results.
    /// This member is required.
    public var indexId: Swift.String?
    /// The maximum number of featured results sets to return.
    public var maxResults: Swift.Int?
    /// If the response is truncated, Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of featured results sets.
    public var nextToken: Swift.String?

    public init(
        indexId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.indexId = indexId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension KendraClientTypes {

    /// Summary information for a set of featured results. Featured results are placed above all other results for certain queries. If there's an exact match of a query, then one or more specific documents are featured in the search results.
    public struct FeaturedResultsSetSummary: Swift.Sendable {
        /// The Unix timestamp when the set of featured results was created.
        public var creationTimestamp: Swift.Int?
        /// The identifier of the set of featured results.
        public var featuredResultsSetId: Swift.String?
        /// The name for the set of featured results.
        public var featuredResultsSetName: Swift.String?
        /// The Unix timestamp when the set of featured results was last updated.
        public var lastUpdatedTimestamp: Swift.Int?
        /// The current status of the set of featured results. When the value is ACTIVE, featured results are ready for use. You can still configure your settings before setting the status to ACTIVE. You can set the status to ACTIVE or INACTIVE using the [UpdateFeaturedResultsSet](https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateFeaturedResultsSet.html) API. The queries you specify for featured results must be unique per featured results set for each index, whether the status is ACTIVE or INACTIVE.
        public var status: KendraClientTypes.FeaturedResultsSetStatus?

        public init(
            creationTimestamp: Swift.Int? = nil,
            featuredResultsSetId: Swift.String? = nil,
            featuredResultsSetName: Swift.String? = nil,
            lastUpdatedTimestamp: Swift.Int? = nil,
            status: KendraClientTypes.FeaturedResultsSetStatus? = nil
        )
        {
            self.creationTimestamp = creationTimestamp
            self.featuredResultsSetId = featuredResultsSetId
            self.featuredResultsSetName = featuredResultsSetName
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.status = status
        }
    }
}

public struct ListFeaturedResultsSetsOutput: Swift.Sendable {
    /// An array of summary information for one or more featured results sets.
    public var featuredResultsSetSummaryItems: [KendraClientTypes.FeaturedResultsSetSummary]?
    /// If the response is truncated, Amazon Kendra returns a pagination token in the response.
    public var nextToken: Swift.String?

    public init(
        featuredResultsSetSummaryItems: [KendraClientTypes.FeaturedResultsSetSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.featuredResultsSetSummaryItems = featuredResultsSetSummaryItems
        self.nextToken = nextToken
    }
}

public struct ListGroupsOlderThanOrderingIdInput: Swift.Sendable {
    /// The identifier of the data source for getting a list of groups mapped to users before a given ordering timestamp identifier.
    public var dataSourceId: Swift.String?
    /// The identifier of the index for getting a list of groups mapped to users before a given ordering or timestamp identifier.
    /// This member is required.
    public var indexId: Swift.String?
    /// The maximum number of returned groups that are mapped to users before a given ordering or timestamp identifier.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of groups that are mapped to users before a given ordering or timestamp identifier.
    public var nextToken: Swift.String?
    /// The timestamp identifier used for the latest PUT or DELETE action for mapping users to their groups.
    /// This member is required.
    public var orderingId: Swift.Int?

    public init(
        dataSourceId: Swift.String? = nil,
        indexId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        orderingId: Swift.Int? = nil
    )
    {
        self.dataSourceId = dataSourceId
        self.indexId = indexId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.orderingId = orderingId
    }
}

extension KendraClientTypes {

    /// Summary information for groups.
    public struct GroupSummary: Swift.Sendable {
        /// The identifier of the group you want group summary information on.
        public var groupId: Swift.String?
        /// The timestamp identifier used for the latest PUT or DELETE action.
        public var orderingId: Swift.Int?

        public init(
            groupId: Swift.String? = nil,
            orderingId: Swift.Int? = nil
        )
        {
            self.groupId = groupId
            self.orderingId = orderingId
        }
    }
}

public struct ListGroupsOlderThanOrderingIdOutput: Swift.Sendable {
    /// Summary information for list of groups that are mapped to users before a given ordering or timestamp identifier.
    public var groupsSummaries: [KendraClientTypes.GroupSummary]?
    /// If the response is truncated, Amazon Kendra returns this token that you can use in the subsequent request to retrieve the next set of groups that are mapped to users before a given ordering or timestamp identifier.
    public var nextToken: Swift.String?

    public init(
        groupsSummaries: [KendraClientTypes.GroupSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.groupsSummaries = groupsSummaries
        self.nextToken = nextToken
    }
}

public struct ListIndicesInput: Swift.Sendable {
    /// The maximum number of indices to return.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of indexes.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension KendraClientTypes {

    /// Summary information on the configuration of an index.
    public struct IndexConfigurationSummary: Swift.Sendable {
        /// The Unix timestamp when the index was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// Indicates whether the index is a Enterprise Edition index or a Developer Edition index.
        public var edition: KendraClientTypes.IndexEdition?
        /// A identifier for the index. Use this to identify the index when you are using APIs such as Query, DescribeIndex, UpdateIndex, and DeleteIndex.
        public var id: Swift.String?
        /// The name of the index.
        public var name: Swift.String?
        /// The current status of the index. When the status is ACTIVE, the index is ready to search.
        /// This member is required.
        public var status: KendraClientTypes.IndexStatus?
        /// The Unix timestamp when the index was last updated.
        /// This member is required.
        public var updatedAt: Foundation.Date?

        public init(
            createdAt: Foundation.Date? = nil,
            edition: KendraClientTypes.IndexEdition? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            status: KendraClientTypes.IndexStatus? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.edition = edition
            self.id = id
            self.name = name
            self.status = status
            self.updatedAt = updatedAt
        }
    }
}

public struct ListIndicesOutput: Swift.Sendable {
    /// An array of summary information on the configuration of one or more indexes.
    public var indexConfigurationSummaryItems: [KendraClientTypes.IndexConfigurationSummary]?
    /// If the response is truncated, Amazon Kendra returns this token that you can use in the subsequent request to retrieve the next set of indexes.
    public var nextToken: Swift.String?

    public init(
        indexConfigurationSummaryItems: [KendraClientTypes.IndexConfigurationSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.indexConfigurationSummaryItems = indexConfigurationSummaryItems
        self.nextToken = nextToken
    }
}

public struct ListQuerySuggestionsBlockListsInput: Swift.Sendable {
    /// The identifier of the index for a list of all block lists that exist for that index. For information on the current quota limits for block lists, see [Quotas for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/quotas.html).
    /// This member is required.
    public var indexId: Swift.String?
    /// The maximum number of block lists to return.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of block lists (BlockListSummaryItems).
    public var nextToken: Swift.String?

    public init(
        indexId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.indexId = indexId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension KendraClientTypes {

    /// Summary information on a query suggestions block list. This includes information on the block list ID, block list name, when the block list was created, when the block list was last updated, and the count of block words/phrases in the block list. For information on the current quota limits for block lists, see [Quotas for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/quotas.html).
    public struct QuerySuggestionsBlockListSummary: Swift.Sendable {
        /// The Unix timestamp when the block list was created.
        public var createdAt: Foundation.Date?
        /// The identifier of a block list.
        public var id: Swift.String?
        /// The number of items in the block list file.
        public var itemCount: Swift.Int?
        /// The name of the block list.
        public var name: Swift.String?
        /// The status of the block list.
        public var status: KendraClientTypes.QuerySuggestionsBlockListStatus?
        /// The Unix timestamp when the block list was last updated.
        public var updatedAt: Foundation.Date?

        public init(
            createdAt: Foundation.Date? = nil,
            id: Swift.String? = nil,
            itemCount: Swift.Int? = nil,
            name: Swift.String? = nil,
            status: KendraClientTypes.QuerySuggestionsBlockListStatus? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.id = id
            self.itemCount = itemCount
            self.name = name
            self.status = status
            self.updatedAt = updatedAt
        }
    }
}

public struct ListQuerySuggestionsBlockListsOutput: Swift.Sendable {
    /// Summary items for a block list. This includes summary items on the block list ID, block list name, when the block list was created, when the block list was last updated, and the count of block words/phrases in the block list. For information on the current quota limits for block lists, see [Quotas for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/quotas.html).
    public var blockListSummaryItems: [KendraClientTypes.QuerySuggestionsBlockListSummary]?
    /// If the response is truncated, Amazon Kendra returns this token that you can use in the subsequent request to retrieve the next set of block lists.
    public var nextToken: Swift.String?

    public init(
        blockListSummaryItems: [KendraClientTypes.QuerySuggestionsBlockListSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.blockListSummaryItems = blockListSummaryItems
        self.nextToken = nextToken
    }
}

/// The resource you want to use isn't available. Please check you have provided the correct resource and try again.
public struct ResourceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceUnavailableException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the index, FAQ, or data source to get a list of tags for.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init(
        resourceARN: Swift.String? = nil
    )
    {
        self.resourceARN = resourceARN
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// A list of tags associated with the index, FAQ, or data source.
    public var tags: [KendraClientTypes.Tag]?

    public init(
        tags: [KendraClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

public struct ListThesauriInput: Swift.Sendable {
    /// The identifier of the index with one or more thesauri.
    /// This member is required.
    public var indexId: Swift.String?
    /// The maximum number of thesauri to return.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of thesauri (ThesaurusSummaryItems).
    public var nextToken: Swift.String?

    public init(
        indexId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.indexId = indexId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension KendraClientTypes {

    /// An array of summary information for a thesaurus or multiple thesauri.
    public struct ThesaurusSummary: Swift.Sendable {
        /// The Unix timestamp when the thesaurus was created.
        public var createdAt: Foundation.Date?
        /// The identifier of the thesaurus.
        public var id: Swift.String?
        /// The name of the thesaurus.
        public var name: Swift.String?
        /// The status of the thesaurus.
        public var status: KendraClientTypes.ThesaurusStatus?
        /// The Unix timestamp when the thesaurus was last updated.
        public var updatedAt: Foundation.Date?

        public init(
            createdAt: Foundation.Date? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            status: KendraClientTypes.ThesaurusStatus? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.id = id
            self.name = name
            self.status = status
            self.updatedAt = updatedAt
        }
    }
}

public struct ListThesauriOutput: Swift.Sendable {
    /// If the response is truncated, Amazon Kendra returns this token that you can use in the subsequent request to retrieve the next set of thesauri.
    public var nextToken: Swift.String?
    /// An array of summary information for a thesaurus or multiple thesauri.
    public var thesaurusSummaryItems: [KendraClientTypes.ThesaurusSummary]?

    public init(
        nextToken: Swift.String? = nil,
        thesaurusSummaryItems: [KendraClientTypes.ThesaurusSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.thesaurusSummaryItems = thesaurusSummaryItems
    }
}

extension KendraClientTypes {

    /// The sub groups that belong to a group.
    public struct MemberGroup: Swift.Sendable {
        /// The identifier of the data source for the sub group you want to map to a group.
        public var dataSourceId: Swift.String?
        /// The identifier of the sub group you want to map to a group.
        /// This member is required.
        public var groupId: Swift.String?

        public init(
            dataSourceId: Swift.String? = nil,
            groupId: Swift.String? = nil
        )
        {
            self.dataSourceId = dataSourceId
            self.groupId = groupId
        }
    }
}

extension KendraClientTypes {

    /// The users that belong to a group.
    public struct MemberUser: Swift.Sendable {
        /// The identifier of the user you want to map to a group.
        /// This member is required.
        public var userId: Swift.String?

        public init(
            userId: Swift.String? = nil
        )
        {
            self.userId = userId
        }
    }
}

extension KendraClientTypes {

    /// A list of users or sub groups that belong to a group. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.
    public struct GroupMembers: Swift.Sendable {
        /// A list of sub groups that belong to a group. For example, the sub groups "Research", "Engineering", and "Sales and Marketing" all belong to the group "Company".
        public var memberGroups: [KendraClientTypes.MemberGroup]?
        /// A list of users that belong to a group. For example, a list of interns all belong to the "Interns" group.
        public var memberUsers: [KendraClientTypes.MemberUser]?
        /// If you have more than 1000 users and/or sub groups for a single group, you need to provide the path to the S3 file that lists your users and sub groups for a group. Your sub groups can contain more than 1000 users, but the list of sub groups that belong to a group (and/or users) must be no more than 1000. You can download this [example S3 file](https://docs.aws.amazon.com/kendra/latest/dg/samples/group_members.zip) that uses the correct format for listing group members. Note, dataSourceId is optional. The value of type for a group is always GROUP and for a user it is always USER.
        public var s3PathforGroupMembers: KendraClientTypes.S3Path?

        public init(
            memberGroups: [KendraClientTypes.MemberGroup]? = nil,
            memberUsers: [KendraClientTypes.MemberUser]? = nil,
            s3PathforGroupMembers: KendraClientTypes.S3Path? = nil
        )
        {
            self.memberGroups = memberGroups
            self.memberUsers = memberUsers
            self.s3PathforGroupMembers = s3PathforGroupMembers
        }
    }
}

public struct PutPrincipalMappingInput: Swift.Sendable {
    /// The identifier of the data source you want to map users to their groups. This is useful if a group is tied to multiple data sources, but you only want the group to access documents of a certain data source. For example, the groups "Research", "Engineering", and "Sales and Marketing" are all tied to the company's documents stored in the data sources Confluence and Salesforce. However, "Sales and Marketing" team only needs access to customer-related documents stored in Salesforce.
    public var dataSourceId: Swift.String?
    /// The identifier of the group you want to map its users to.
    /// This member is required.
    public var groupId: Swift.String?
    /// The list that contains your users or sub groups that belong the same group. For example, the group "Company" includes the user "CEO" and the sub groups "Research", "Engineering", and "Sales and Marketing". If you have more than 1000 users and/or sub groups for a single group, you need to provide the path to the S3 file that lists your users and sub groups for a group. Your sub groups can contain more than 1000 users, but the list of sub groups that belong to a group (and/or users) must be no more than 1000.
    /// This member is required.
    public var groupMembers: KendraClientTypes.GroupMembers?
    /// The identifier of the index you want to map users to their groups.
    /// This member is required.
    public var indexId: Swift.String?
    /// The timestamp identifier you specify to ensure Amazon Kendra does not override the latest PUT action with previous actions. The highest number ID, which is the ordering ID, is the latest action you want to process and apply on top of other actions with lower number IDs. This prevents previous actions with lower number IDs from possibly overriding the latest action. The ordering ID can be the Unix time of the last update you made to a group members list. You would then provide this list when calling PutPrincipalMapping. This ensures your PUT action for that updated group with the latest members list doesn't get overwritten by earlier PUT actions for the same group which are yet to be processed. The default ordering ID is the current Unix time in milliseconds that the action was received by Amazon Kendra.
    public var orderingId: Swift.Int?
    /// The Amazon Resource Name (ARN) of a role that has access to the S3 file that contains your list of users or sub groups that belong to a group. For more information, see [IAM roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html#iam-roles-ds).
    public var roleArn: Swift.String?

    public init(
        dataSourceId: Swift.String? = nil,
        groupId: Swift.String? = nil,
        groupMembers: KendraClientTypes.GroupMembers? = nil,
        indexId: Swift.String? = nil,
        orderingId: Swift.Int? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
        self.groupId = groupId
        self.groupMembers = groupMembers
        self.indexId = indexId
        self.orderingId = orderingId
        self.roleArn = roleArn
    }
}

extension KendraClientTypes {

    /// Specifies the configuration information needed to customize how collapsed search result groups expand.
    public struct ExpandConfiguration: Swift.Sendable {
        /// The number of expanded results to show per collapsed primary document. For instance, if you set this value to 3, then at most 3 results per collapsed group will be displayed.
        public var maxExpandedResultsPerItem: Swift.Int?
        /// The number of collapsed search result groups to expand. If you set this value to 10, for example, only the first 10 out of 100 result groups will have expand functionality.
        public var maxResultItemsToExpand: Swift.Int?

        public init(
            maxExpandedResultsPerItem: Swift.Int? = nil,
            maxResultItemsToExpand: Swift.Int? = nil
        )
        {
            self.maxExpandedResultsPerItem = maxExpandedResultsPerItem
            self.maxResultItemsToExpand = maxResultItemsToExpand
        }
    }
}

extension KendraClientTypes {

    public enum MissingAttributeKeyStrategy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case collapse
        case expand
        case ignore
        case sdkUnknown(Swift.String)

        public static var allCases: [MissingAttributeKeyStrategy] {
            return [
                .collapse,
                .expand,
                .ignore
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .collapse: return "COLLAPSE"
            case .expand: return "EXPAND"
            case .ignore: return "IGNORE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    public enum SortOrder: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case asc
        case desc
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrder] {
            return [
                .asc,
                .desc
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .asc: return "ASC"
            case .desc: return "DESC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Specifies the document attribute to use to sort the response to a Amazon Kendra query. You can specify a single attribute for sorting. The attribute must have the Sortable flag set to true, otherwise Amazon Kendra returns an exception. You can sort attributes of the following types.
    ///
    /// * Date value
    ///
    /// * Long value
    ///
    /// * String value
    ///
    ///
    /// You can't sort attributes of the following type.
    ///
    /// * String list value
    public struct SortingConfiguration: Swift.Sendable {
        /// The name of the document attribute used to sort the response. You can use any field that has the Sortable flag set to true. You can also sort by any of the following built-in attributes:
        ///
        /// * _category
        ///
        /// * _created_at
        ///
        /// * _last_updated_at
        ///
        /// * _version
        ///
        /// * _view_count
        /// This member is required.
        public var documentAttributeKey: Swift.String?
        /// The order that the results should be returned in. In case of ties, the relevance assigned to the result by Amazon Kendra is used as the tie-breaker.
        /// This member is required.
        public var sortOrder: KendraClientTypes.SortOrder?

        public init(
            documentAttributeKey: Swift.String? = nil,
            sortOrder: KendraClientTypes.SortOrder? = nil
        )
        {
            self.documentAttributeKey = documentAttributeKey
            self.sortOrder = sortOrder
        }
    }
}

extension KendraClientTypes {

    /// Specifies how to group results by document attribute value, and how to display them collapsed/expanded under a designated primary document for each group.
    public struct CollapseConfiguration: Swift.Sendable {
        /// The document attribute used to group search results. You can use any attribute that has the Sortable flag set to true. You can also sort by any of the following built-in attributes:"_category","_created_at", "_last_updated_at", "_version", "_view_count".
        /// This member is required.
        public var documentAttributeKey: Swift.String?
        /// Specifies whether to expand the collapsed results.
        public var expand: Swift.Bool
        /// Provides configuration information to customize expansion options for a collapsed group.
        public var expandConfiguration: KendraClientTypes.ExpandConfiguration?
        /// Specifies the behavior for documents without a value for the collapse attribute. Amazon Kendra offers three customization options:
        ///
        /// * Choose to COLLAPSE all documents with null or missing values in one group. This is the default configuration.
        ///
        /// * Choose to IGNORE documents with null or missing values. Ignored documents will not appear in query results.
        ///
        /// * Choose to EXPAND each document with a null or missing value into a group of its own.
        public var missingAttributeKeyStrategy: KendraClientTypes.MissingAttributeKeyStrategy?
        /// A prioritized list of document attributes/fields that determine the primary document among those in a collapsed group.
        public var sortingConfigurations: [KendraClientTypes.SortingConfiguration]?

        public init(
            documentAttributeKey: Swift.String? = nil,
            expand: Swift.Bool = false,
            expandConfiguration: KendraClientTypes.ExpandConfiguration? = nil,
            missingAttributeKeyStrategy: KendraClientTypes.MissingAttributeKeyStrategy? = nil,
            sortingConfigurations: [KendraClientTypes.SortingConfiguration]? = nil
        )
        {
            self.documentAttributeKey = documentAttributeKey
            self.expand = expand
            self.expandConfiguration = expandConfiguration
            self.missingAttributeKeyStrategy = missingAttributeKeyStrategy
            self.sortingConfigurations = sortingConfigurations
        }
    }
}

extension KendraClientTypes {

    /// Overrides the document relevance properties of a custom index field.
    public struct DocumentRelevanceConfiguration: Swift.Sendable {
        /// The name of the index field.
        /// This member is required.
        public var name: Swift.String?
        /// Provides information for tuning the relevance of a field in a search. When a query includes terms that match the field, the results are given a boost in the response based on these tuning parameters.
        /// This member is required.
        public var relevance: KendraClientTypes.Relevance?

        public init(
            name: Swift.String? = nil,
            relevance: KendraClientTypes.Relevance? = nil
        )
        {
            self.name = name
            self.relevance = relevance
        }
    }
}

extension KendraClientTypes {

    public enum QueryResultType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case answer
        case document
        case questionAnswer
        case sdkUnknown(Swift.String)

        public static var allCases: [QueryResultType] {
            return [
                .answer,
                .document,
                .questionAnswer
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .answer: return "ANSWER"
            case .document: return "DOCUMENT"
            case .questionAnswer: return "QUESTION_ANSWER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for suggested query spell corrections. Suggested spell corrections are based on words that appear in your indexed documents and how closely a corrected word matches a misspelled word. This feature is designed with certain defaults or limits. For information on the current limits and how to request more support for some limits, see the [Spell Checker documentation](https://docs.aws.amazon.com/kendra/latest/dg/query-spell-check.html).
    public struct SpellCorrectionConfiguration: Swift.Sendable {
        /// TRUE to suggest spell corrections for queries.
        /// This member is required.
        public var includeQuerySpellCheckSuggestions: Swift.Bool

        public init(
            includeQuerySpellCheckSuggestions: Swift.Bool = false
        )
        {
            self.includeQuerySpellCheckSuggestions = includeQuerySpellCheckSuggestions
        }
    }
}

extension KendraClientTypes {

    /// A single featured result item. A featured result is displayed at the top of the search results page, placed above all other results for certain queries. If there's an exact match of a query, then certain documents are featured in the search results.
    public struct FeaturedResultsItem: Swift.Sendable {
        /// One or more additional attributes associated with the featured result.
        public var additionalAttributes: [KendraClientTypes.AdditionalResultAttribute]?
        /// An array of document attributes assigned to a featured document in the search results. For example, the document author (_author) or the source URI (_source_uri) of the document.
        public var documentAttributes: [KendraClientTypes.DocumentAttribute]?
        /// Provides text and information about where to highlight the text.
        public var documentExcerpt: KendraClientTypes.TextWithHighlights?
        /// The identifier of the featured document.
        public var documentId: Swift.String?
        /// Provides text and information about where to highlight the text.
        public var documentTitle: KendraClientTypes.TextWithHighlights?
        /// The source URI location of the featured document.
        public var documentURI: Swift.String?
        /// A token that identifies a particular featured result from a particular query. Use this token to provide click-through feedback for the result. For more information, see [Submitting feedback](https://docs.aws.amazon.com/kendra/latest/dg/submitting-feedback.html).
        public var feedbackToken: Swift.String?
        /// The identifier of the featured result.
        public var id: Swift.String?
        /// The type of document within the featured result response. For example, a response could include a question-answer type that's relevant to the query.
        public var type: KendraClientTypes.QueryResultType?

        public init(
            additionalAttributes: [KendraClientTypes.AdditionalResultAttribute]? = nil,
            documentAttributes: [KendraClientTypes.DocumentAttribute]? = nil,
            documentExcerpt: KendraClientTypes.TextWithHighlights? = nil,
            documentId: Swift.String? = nil,
            documentTitle: KendraClientTypes.TextWithHighlights? = nil,
            documentURI: Swift.String? = nil,
            feedbackToken: Swift.String? = nil,
            id: Swift.String? = nil,
            type: KendraClientTypes.QueryResultType? = nil
        )
        {
            self.additionalAttributes = additionalAttributes
            self.documentAttributes = documentAttributes
            self.documentExcerpt = documentExcerpt
            self.documentId = documentId
            self.documentTitle = documentTitle
            self.documentURI = documentURI
            self.feedbackToken = feedbackToken
            self.id = id
            self.type = type
        }
    }
}

extension KendraClientTypes {

    /// A single expanded result in a collapsed group of search results. An expanded result item contains information about an expanded result document within a collapsed group of search results. This includes the original location of the document, a list of attributes assigned to the document, and relevant text from the document that satisfies the query.
    public struct ExpandedResultItem: Swift.Sendable {
        /// An array of document attributes assigned to a document in the search results. For example, the document author ("_author") or the source URI ("_source_uri") of the document.
        public var documentAttributes: [KendraClientTypes.DocumentAttribute]?
        /// Provides text and information about where to highlight the text.
        public var documentExcerpt: KendraClientTypes.TextWithHighlights?
        /// The idenitifier of the document.
        public var documentId: Swift.String?
        /// Provides text and information about where to highlight the text.
        public var documentTitle: KendraClientTypes.TextWithHighlights?
        /// The URI of the original location of the document.
        public var documentURI: Swift.String?
        /// The identifier for the expanded result.
        public var id: Swift.String?

        public init(
            documentAttributes: [KendraClientTypes.DocumentAttribute]? = nil,
            documentExcerpt: KendraClientTypes.TextWithHighlights? = nil,
            documentId: Swift.String? = nil,
            documentTitle: KendraClientTypes.TextWithHighlights? = nil,
            documentURI: Swift.String? = nil,
            id: Swift.String? = nil
        )
        {
            self.documentAttributes = documentAttributes
            self.documentExcerpt = documentExcerpt
            self.documentId = documentId
            self.documentTitle = documentTitle
            self.documentURI = documentURI
            self.id = id
        }
    }
}

extension KendraClientTypes {

    /// Provides details about a collapsed group of search results.
    public struct CollapsedResultDetail: Swift.Sendable {
        /// The value of the document attribute that results are collapsed on.
        /// This member is required.
        public var documentAttribute: KendraClientTypes.DocumentAttribute?
        /// A list of results in the collapsed group.
        public var expandedResults: [KendraClientTypes.ExpandedResultItem]?

        public init(
            documentAttribute: KendraClientTypes.DocumentAttribute? = nil,
            expandedResults: [KendraClientTypes.ExpandedResultItem]? = nil
        )
        {
            self.documentAttribute = documentAttribute
            self.expandedResults = expandedResults
        }
    }
}

extension KendraClientTypes {

    public enum QueryResultFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case table
        case text
        case sdkUnknown(Swift.String)

        public static var allCases: [QueryResultFormat] {
            return [
                .table,
                .text
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .table: return "TABLE"
            case .text: return "TEXT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Enumeration for query score confidence.
    public enum ScoreConfidence: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case low
        case medium
        case notAvailable
        case veryHigh
        case sdkUnknown(Swift.String)

        public static var allCases: [ScoreConfidence] {
            return [
                .high,
                .low,
                .medium,
                .notAvailable,
                .veryHigh
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case .notAvailable: return "NOT_AVAILABLE"
            case .veryHigh: return "VERY_HIGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides a relative ranking that indicates how confident Amazon Kendra is that the response is relevant to the query.
    public struct ScoreAttributes: Swift.Sendable {
        /// A relative ranking for how relevant the response is to the query.
        public var scoreConfidence: KendraClientTypes.ScoreConfidence?

        public init(
            scoreConfidence: KendraClientTypes.ScoreConfidence? = nil
        )
        {
            self.scoreConfidence = scoreConfidence
        }
    }
}

extension KendraClientTypes {

    /// Provides information about a table cell in a table excerpt.
    public struct TableCell: Swift.Sendable {
        /// TRUE means that the table cell should be treated as a header.
        public var header: Swift.Bool
        /// TRUE means that the table cell has a high enough confidence and is relevant to the query, so the value or content should be highlighted.
        public var highlighted: Swift.Bool
        /// TRUE if the response of the table cell is the top answer. This is the cell value or content with the highest confidence score or is the most relevant to the query.
        public var topAnswer: Swift.Bool
        /// The actual value or content within a table cell. A table cell could contain a date value of a year, or a string value of text, for example.
        public var value: Swift.String?

        public init(
            header: Swift.Bool = false,
            highlighted: Swift.Bool = false,
            topAnswer: Swift.Bool = false,
            value: Swift.String? = nil
        )
        {
            self.header = header
            self.highlighted = highlighted
            self.topAnswer = topAnswer
            self.value = value
        }
    }
}

extension KendraClientTypes {

    /// Information about a row in a table excerpt.
    public struct TableRow: Swift.Sendable {
        /// A list of table cells in a row.
        public var cells: [KendraClientTypes.TableCell]?

        public init(
            cells: [KendraClientTypes.TableCell]? = nil
        )
        {
            self.cells = cells
        }
    }
}

extension KendraClientTypes {

    /// An excerpt from a table within a document. The table excerpt displays up to five columns and three rows, depending on how many table cells are relevant to the query and how many columns are available in the original table. The top most relevant cell is displayed in the table excerpt, along with the next most relevant cells.
    public struct TableExcerpt: Swift.Sendable {
        /// A list of rows in the table excerpt.
        public var rows: [KendraClientTypes.TableRow]?
        /// A count of the number of rows in the original table within the document.
        public var totalNumberOfRows: Swift.Int?

        public init(
            rows: [KendraClientTypes.TableRow]? = nil,
            totalNumberOfRows: Swift.Int? = nil
        )
        {
            self.rows = rows
            self.totalNumberOfRows = totalNumberOfRows
        }
    }
}

extension KendraClientTypes {

    /// A single query result. A query result contains information about a document returned by the query. This includes the original location of the document, a list of attributes assigned to the document, and relevant text from the document that satisfies the query.
    public struct QueryResultItem: Swift.Sendable {
        /// One or more additional fields/attributes associated with the query result.
        public var additionalAttributes: [KendraClientTypes.AdditionalResultAttribute]?
        /// Provides details about a collapsed group of search results.
        public var collapsedResultDetail: KendraClientTypes.CollapsedResultDetail?
        /// An array of document fields/attributes assigned to a document in the search results. For example, the document author (_author) or the source URI (_source_uri) of the document.
        public var documentAttributes: [KendraClientTypes.DocumentAttribute]?
        /// An extract of the text in the document. Contains information about highlighting the relevant terms in the excerpt.
        public var documentExcerpt: KendraClientTypes.TextWithHighlights?
        /// The identifier for the document.
        public var documentId: Swift.String?
        /// The title of the document. Contains the text of the title and information for highlighting the relevant terms in the title.
        public var documentTitle: KendraClientTypes.TextWithHighlights?
        /// The URI of the original location of the document.
        public var documentURI: Swift.String?
        /// A token that identifies a particular result from a particular query. Use this token to provide click-through feedback for the result. For more information, see [Submitting feedback](https://docs.aws.amazon.com/kendra/latest/dg/submitting-feedback.html).
        public var feedbackToken: Swift.String?
        /// If the Type of document within the response is ANSWER, then it is either a TABLE answer or TEXT answer. If it's a table answer, a table excerpt is returned in TableExcerpt. If it's a text answer, a text excerpt is returned in DocumentExcerpt.
        public var format: KendraClientTypes.QueryResultFormat?
        /// The unique identifier for the query result item id (Id) and the query result item document id (DocumentId) combined. The value of this field changes with every request, even when you have the same documents.
        public var id: Swift.String?
        /// Indicates the confidence level of Amazon Kendra providing a relevant result for the query. Each result is placed into a bin that indicates the confidence, VERY_HIGH, HIGH, MEDIUM and LOW. You can use the score to determine if a response meets the confidence needed for your application. The field is only set to LOW when the Type field is set to DOCUMENT and Amazon Kendra is not confident that the result is relevant to the query.
        public var scoreAttributes: KendraClientTypes.ScoreAttributes?
        /// An excerpt from a table within a document.
        public var tableExcerpt: KendraClientTypes.TableExcerpt?
        /// The type of document within the response. For example, a response could include a question-answer that's relevant to the query.
        public var type: KendraClientTypes.QueryResultType?

        public init(
            additionalAttributes: [KendraClientTypes.AdditionalResultAttribute]? = nil,
            collapsedResultDetail: KendraClientTypes.CollapsedResultDetail? = nil,
            documentAttributes: [KendraClientTypes.DocumentAttribute]? = nil,
            documentExcerpt: KendraClientTypes.TextWithHighlights? = nil,
            documentId: Swift.String? = nil,
            documentTitle: KendraClientTypes.TextWithHighlights? = nil,
            documentURI: Swift.String? = nil,
            feedbackToken: Swift.String? = nil,
            format: KendraClientTypes.QueryResultFormat? = nil,
            id: Swift.String? = nil,
            scoreAttributes: KendraClientTypes.ScoreAttributes? = nil,
            tableExcerpt: KendraClientTypes.TableExcerpt? = nil,
            type: KendraClientTypes.QueryResultType? = nil
        )
        {
            self.additionalAttributes = additionalAttributes
            self.collapsedResultDetail = collapsedResultDetail
            self.documentAttributes = documentAttributes
            self.documentExcerpt = documentExcerpt
            self.documentId = documentId
            self.documentTitle = documentTitle
            self.documentURI = documentURI
            self.feedbackToken = feedbackToken
            self.format = format
            self.id = id
            self.scoreAttributes = scoreAttributes
            self.tableExcerpt = tableExcerpt
            self.type = type
        }
    }
}

extension KendraClientTypes {

    /// A corrected misspelled word in a query.
    public struct Correction: Swift.Sendable {
        /// The zero-based location in the response string or text where the corrected word starts.
        public var beginOffset: Swift.Int?
        /// The string or text of a corrected misspelled word in a query.
        public var correctedTerm: Swift.String?
        /// The zero-based location in the response string or text where the corrected word ends.
        public var endOffset: Swift.Int?
        /// The string or text of a misspelled word in a query.
        public var term: Swift.String?

        public init(
            beginOffset: Swift.Int? = nil,
            correctedTerm: Swift.String? = nil,
            endOffset: Swift.Int? = nil,
            term: Swift.String? = nil
        )
        {
            self.beginOffset = beginOffset
            self.correctedTerm = correctedTerm
            self.endOffset = endOffset
            self.term = term
        }
    }
}

extension KendraClientTypes {

    /// A query with suggested spell corrections.
    public struct SpellCorrectedQuery: Swift.Sendable {
        /// The corrected misspelled word or words in a query.
        public var corrections: [KendraClientTypes.Correction]?
        /// The query with the suggested spell corrections.
        public var suggestedQueryText: Swift.String?

        public init(
            corrections: [KendraClientTypes.Correction]? = nil,
            suggestedQueryText: Swift.String? = nil
        )
        {
            self.corrections = corrections
            self.suggestedQueryText = suggestedQueryText
        }
    }
}

extension KendraClientTypes {

    public enum WarningCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case queryLanguageInvalidSyntax
        case sdkUnknown(Swift.String)

        public static var allCases: [WarningCode] {
            return [
                .queryLanguageInvalidSyntax
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .queryLanguageInvalidSyntax: return "QUERY_LANGUAGE_INVALID_SYNTAX"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// The warning code and message that explains a problem with a query.
    public struct Warning: Swift.Sendable {
        /// The code used to show the type of warning for the query.
        public var code: KendraClientTypes.WarningCode?
        /// The message that explains the problem with the query.
        public var message: Swift.String?

        public init(
            code: KendraClientTypes.WarningCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }
}

extension KendraClientTypes {

    /// A single retrieved relevant passage result.
    public struct RetrieveResultItem: Swift.Sendable {
        /// The contents of the relevant passage.
        public var content: Swift.String?
        /// An array of document fields/attributes assigned to a document in the search results. For example, the document author (_author) or the source URI (_source_uri) of the document.
        public var documentAttributes: [KendraClientTypes.DocumentAttribute]?
        /// The identifier of the document.
        public var documentId: Swift.String?
        /// The title of the document.
        public var documentTitle: Swift.String?
        /// The URI of the original location of the document.
        public var documentURI: Swift.String?
        /// The identifier of the relevant passage result.
        public var id: Swift.String?
        /// The confidence score bucket for a retrieved passage result. The confidence bucket provides a relative ranking that indicates how confident Amazon Kendra is that the response is relevant to the query.
        public var scoreAttributes: KendraClientTypes.ScoreAttributes?

        public init(
            content: Swift.String? = nil,
            documentAttributes: [KendraClientTypes.DocumentAttribute]? = nil,
            documentId: Swift.String? = nil,
            documentTitle: Swift.String? = nil,
            documentURI: Swift.String? = nil,
            id: Swift.String? = nil,
            scoreAttributes: KendraClientTypes.ScoreAttributes? = nil
        )
        {
            self.content = content
            self.documentAttributes = documentAttributes
            self.documentId = documentId
            self.documentTitle = documentTitle
            self.documentURI = documentURI
            self.id = id
            self.scoreAttributes = scoreAttributes
        }
    }
}

public struct RetrieveOutput: Swift.Sendable {
    /// The identifier of query used for the search. You also use QueryId to identify the search when using the [Submitfeedback](https://docs.aws.amazon.com/kendra/latest/APIReference/API_SubmitFeedback.html) API.
    public var queryId: Swift.String?
    /// The results of the retrieved relevant passages for the search.
    public var resultItems: [KendraClientTypes.RetrieveResultItem]?

    public init(
        queryId: Swift.String? = nil,
        resultItems: [KendraClientTypes.RetrieveResultItem]? = nil
    )
    {
        self.queryId = queryId
        self.resultItems = resultItems
    }
}

/// The resource you want to use is currently in use. Please check you have provided the correct resource and try again.
public struct ResourceInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct StartDataSourceSyncJobInput: Swift.Sendable {
    /// The identifier of the data source connector to synchronize.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index used with the data source connector.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

public struct StartDataSourceSyncJobOutput: Swift.Sendable {
    /// Identifies a particular synchronization job.
    public var executionId: Swift.String?

    public init(
        executionId: Swift.String? = nil
    )
    {
        self.executionId = executionId
    }
}

public struct StopDataSourceSyncJobInput: Swift.Sendable {
    /// The identifier of the data source connector for which to stop the synchronization jobs.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index used with the data source connector.
    /// This member is required.
    public var indexId: Swift.String?

    public init(
        id: Swift.String? = nil,
        indexId: Swift.String? = nil
    )
    {
        self.id = id
        self.indexId = indexId
    }
}

extension KendraClientTypes {

    /// Gathers information about when a particular result was clicked by a user. Your application uses the SubmitFeedback API to provide click information.
    public struct ClickFeedback: Swift.Sendable {
        /// The Unix timestamp when the result was clicked.
        /// This member is required.
        public var clickTime: Foundation.Date?
        /// The identifier of the search result that was clicked.
        /// This member is required.
        public var resultId: Swift.String?

        public init(
            clickTime: Foundation.Date? = nil,
            resultId: Swift.String? = nil
        )
        {
            self.clickTime = clickTime
            self.resultId = resultId
        }
    }
}

extension KendraClientTypes {

    public enum RelevanceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case notRelevant
        case relevant
        case sdkUnknown(Swift.String)

        public static var allCases: [RelevanceType] {
            return [
                .notRelevant,
                .relevant
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .notRelevant: return "NOT_RELEVANT"
            case .relevant: return "RELEVANT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KendraClientTypes {

    /// Provides feedback on how relevant a document is to a search. Your application uses the SubmitFeedback API to provide relevance information.
    public struct RelevanceFeedback: Swift.Sendable {
        /// Whether the document was relevant or not relevant to the search.
        /// This member is required.
        public var relevanceValue: KendraClientTypes.RelevanceType?
        /// The identifier of the search result that the user provided relevance feedback for.
        /// This member is required.
        public var resultId: Swift.String?

        public init(
            relevanceValue: KendraClientTypes.RelevanceType? = nil,
            resultId: Swift.String? = nil
        )
        {
            self.relevanceValue = relevanceValue
            self.resultId = resultId
        }
    }
}

public struct SubmitFeedbackInput: Swift.Sendable {
    /// Tells Amazon Kendra that a particular search result link was chosen by the user.
    public var clickFeedbackItems: [KendraClientTypes.ClickFeedback]?
    /// The identifier of the index that was queried.
    /// This member is required.
    public var indexId: Swift.String?
    /// The identifier of the specific query for which you are submitting feedback. The query ID is returned in the response to the Query API.
    /// This member is required.
    public var queryId: Swift.String?
    /// Provides Amazon Kendra with relevant or not relevant feedback for whether a particular item was relevant to the search.
    public var relevanceFeedbackItems: [KendraClientTypes.RelevanceFeedback]?

    public init(
        clickFeedbackItems: [KendraClientTypes.ClickFeedback]? = nil,
        indexId: Swift.String? = nil,
        queryId: Swift.String? = nil,
        relevanceFeedbackItems: [KendraClientTypes.RelevanceFeedback]? = nil
    )
    {
        self.clickFeedbackItems = clickFeedbackItems
        self.indexId = indexId
        self.queryId = queryId
        self.relevanceFeedbackItems = relevanceFeedbackItems
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the index, FAQ, or data source to tag.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// A list of tag keys to add to the index, FAQ, or data source. If a tag already exists, the existing value is replaced with the new value.
    /// This member is required.
    public var tags: [KendraClientTypes.Tag]?

    public init(
        resourceARN: Swift.String? = nil,
        tags: [KendraClientTypes.Tag]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the index, FAQ, or data source to remove the tag from.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// A list of tag keys to remove from the index, FAQ, or data source. If a tag key does not exist on the resource, it is ignored.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceARN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateAccessControlConfigurationInput: Swift.Sendable {
    /// Information you want to update on principals (users and/or groups) and which documents they should have access to. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.
    public var accessControlList: [KendraClientTypes.Principal]?
    /// A new description for the access control configuration.
    public var description: Swift.String?
    /// The updated list of [principal](https://docs.aws.amazon.com/kendra/latest/dg/API_Principal.html) lists that define the hierarchy for which documents users should have access to.
    public var hierarchicalAccessControlList: [KendraClientTypes.HierarchicalPrincipal]?
    /// The identifier of the access control configuration you want to update.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for an access control configuration.
    /// This member is required.
    public var indexId: Swift.String?
    /// A new name for the access control configuration.
    public var name: Swift.String?

    public init(
        accessControlList: [KendraClientTypes.Principal]? = nil,
        description: Swift.String? = nil,
        hierarchicalAccessControlList: [KendraClientTypes.HierarchicalPrincipal]? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.accessControlList = accessControlList
        self.description = description
        self.hierarchicalAccessControlList = hierarchicalAccessControlList
        self.id = id
        self.indexId = indexId
        self.name = name
    }
}

public struct UpdateAccessControlConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateDataSourceInput: Swift.Sendable {
    /// Configuration information you want to update for the data source connector.
    public var configuration: KendraClientTypes.DataSourceConfiguration?
    /// Configuration information you want to update for altering document metadata and content during the document ingestion process. For more information on how to create, modify and delete document metadata, or make other content alterations when you ingest documents into Amazon Kendra, see [Customizing document metadata during the ingestion process](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html).
    public var customDocumentEnrichmentConfiguration: KendraClientTypes.CustomDocumentEnrichmentConfiguration?
    /// A new description for the data source connector.
    public var description: Swift.String?
    /// The identifier of the data source connector you want to update.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index used with the data source connector.
    /// This member is required.
    public var indexId: Swift.String?
    /// The code for a language you want to update for the data source connector. This allows you to support a language for all documents when updating the data source. English is supported by default. For more information on supported languages, including their codes, see [Adding documents in languages other than English](https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html).
    public var languageCode: Swift.String?
    /// A new name for the data source connector.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source and required resources. For more information, see [IAM roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html).
    public var roleArn: Swift.String?
    /// The sync schedule you want to update for the data source connector.
    public var schedule: Swift.String?
    /// Configuration information for an Amazon Virtual Private Cloud to connect to your data source. For more information, see [Configuring a VPC](https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html).
    public var vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration?

    public init(
        configuration: KendraClientTypes.DataSourceConfiguration? = nil,
        customDocumentEnrichmentConfiguration: KendraClientTypes.CustomDocumentEnrichmentConfiguration? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        languageCode: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        schedule: Swift.String? = nil,
        vpcConfiguration: KendraClientTypes.DataSourceVpcConfiguration? = nil
    )
    {
        self.configuration = configuration
        self.customDocumentEnrichmentConfiguration = customDocumentEnrichmentConfiguration
        self.description = description
        self.id = id
        self.indexId = indexId
        self.languageCode = languageCode
        self.name = name
        self.roleArn = roleArn
        self.schedule = schedule
        self.vpcConfiguration = vpcConfiguration
    }
}

public struct UpdateExperienceInput: Swift.Sendable {
    /// Configuration information you want to update for your Amazon Kendra experience.
    public var configuration: KendraClientTypes.ExperienceConfiguration?
    /// A new description for your Amazon Kendra experience.
    public var description: Swift.String?
    /// The identifier of your Amazon Kendra experience you want to update.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for your Amazon Kendra experience.
    /// This member is required.
    public var indexId: Swift.String?
    /// A new name for your Amazon Kendra experience.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access Query API, QuerySuggestions API, SubmitFeedback API, and IAM Identity Center that stores your user and group information. For more information, see [IAM roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html).
    public var roleArn: Swift.String?

    public init(
        configuration: KendraClientTypes.ExperienceConfiguration? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.configuration = configuration
        self.description = description
        self.id = id
        self.indexId = indexId
        self.name = name
        self.roleArn = roleArn
    }
}

public struct UpdateFeaturedResultsSetInput: Swift.Sendable {
    /// A new description for the set of featured results.
    public var description: Swift.String?
    /// A list of document IDs for the documents you want to feature at the top of the search results page. For more information on the list of featured documents, see [FeaturedResultsSet](https://docs.aws.amazon.com/kendra/latest/dg/API_FeaturedResultsSet.html).
    public var featuredDocuments: [KendraClientTypes.FeaturedDocument]?
    /// The identifier of the set of featured results that you want to update.
    /// This member is required.
    public var featuredResultsSetId: Swift.String?
    /// A new name for the set of featured results.
    public var featuredResultsSetName: Swift.String?
    /// The identifier of the index used for featuring results.
    /// This member is required.
    public var indexId: Swift.String?
    /// A list of queries for featuring results. For more information on the list of queries, see [FeaturedResultsSet](https://docs.aws.amazon.com/kendra/latest/dg/API_FeaturedResultsSet.html).
    public var queryTexts: [Swift.String]?
    /// You can set the status to ACTIVE or INACTIVE. When the value is ACTIVE, featured results are ready for use. You can still configure your settings before setting the status to ACTIVE. The queries you specify for featured results must be unique per featured results set for each index, whether the status is ACTIVE or INACTIVE.
    public var status: KendraClientTypes.FeaturedResultsSetStatus?

    public init(
        description: Swift.String? = nil,
        featuredDocuments: [KendraClientTypes.FeaturedDocument]? = nil,
        featuredResultsSetId: Swift.String? = nil,
        featuredResultsSetName: Swift.String? = nil,
        indexId: Swift.String? = nil,
        queryTexts: [Swift.String]? = nil,
        status: KendraClientTypes.FeaturedResultsSetStatus? = nil
    )
    {
        self.description = description
        self.featuredDocuments = featuredDocuments
        self.featuredResultsSetId = featuredResultsSetId
        self.featuredResultsSetName = featuredResultsSetName
        self.indexId = indexId
        self.queryTexts = queryTexts
        self.status = status
    }
}

public struct UpdateFeaturedResultsSetOutput: Swift.Sendable {
    /// Information on the set of featured results. This includes the identifier of the featured results set, whether the featured results set is active or inactive, when the featured results set was last updated, and more.
    public var featuredResultsSet: KendraClientTypes.FeaturedResultsSet?

    public init(
        featuredResultsSet: KendraClientTypes.FeaturedResultsSet? = nil
    )
    {
        self.featuredResultsSet = featuredResultsSet
    }
}

public struct UpdateIndexInput: Swift.Sendable {
    /// Sets the number of additional document storage and query capacity units that should be used by the index. You can change the capacity of the index up to 5 times per day, or make 5 API calls. If you are using extra storage units, you can't reduce the storage capacity below what is required to meet the storage needs for your index.
    public var capacityUnits: KendraClientTypes.CapacityUnitsConfiguration?
    /// A new description for the index.
    public var description: Swift.String?
    /// The document metadata configuration you want to update for the index. Document metadata are fields or attributes associated with your documents. For example, the company department name associated with each document.
    public var documentMetadataConfigurationUpdates: [KendraClientTypes.DocumentMetadataConfiguration]?
    /// The identifier of the index you want to update.
    /// This member is required.
    public var id: Swift.String?
    /// A new name for the index.
    public var name: Swift.String?
    /// An Identity and Access Management (IAM) role that gives Amazon Kendra permission to access Amazon CloudWatch logs and metrics.
    public var roleArn: Swift.String?
    /// The user context policy.
    public var userContextPolicy: KendraClientTypes.UserContextPolicy?
    /// Gets users and groups from IAM Identity Center identity source. To configure this, see [UserGroupResolutionConfiguration](https://docs.aws.amazon.com/kendra/latest/dg/API_UserGroupResolutionConfiguration.html). This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.
    public var userGroupResolutionConfiguration: KendraClientTypes.UserGroupResolutionConfiguration?
    /// The user token configuration.
    public var userTokenConfigurations: [KendraClientTypes.UserTokenConfiguration]?

    public init(
        capacityUnits: KendraClientTypes.CapacityUnitsConfiguration? = nil,
        description: Swift.String? = nil,
        documentMetadataConfigurationUpdates: [KendraClientTypes.DocumentMetadataConfiguration]? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        userContextPolicy: KendraClientTypes.UserContextPolicy? = nil,
        userGroupResolutionConfiguration: KendraClientTypes.UserGroupResolutionConfiguration? = nil,
        userTokenConfigurations: [KendraClientTypes.UserTokenConfiguration]? = nil
    )
    {
        self.capacityUnits = capacityUnits
        self.description = description
        self.documentMetadataConfigurationUpdates = documentMetadataConfigurationUpdates
        self.id = id
        self.name = name
        self.roleArn = roleArn
        self.userContextPolicy = userContextPolicy
        self.userGroupResolutionConfiguration = userGroupResolutionConfiguration
        self.userTokenConfigurations = userTokenConfigurations
    }
}

public struct UpdateQuerySuggestionsBlockListInput: Swift.Sendable {
    /// A new description for the block list.
    public var description: Swift.String?
    /// The identifier of the block list you want to update.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for the block list.
    /// This member is required.
    public var indexId: Swift.String?
    /// A new name for the block list.
    public var name: Swift.String?
    /// The IAM (Identity and Access Management) role used to access the block list text file in S3.
    public var roleArn: Swift.String?
    /// The S3 path where your block list text file sits in S3. If you update your block list and provide the same path to the block list text file in S3, then Amazon Kendra reloads the file to refresh the block list. Amazon Kendra does not automatically refresh your block list. You need to call the UpdateQuerySuggestionsBlockList API to refresh you block list. If you update your block list, then Amazon Kendra asynchronously refreshes all query suggestions with the latest content in the S3 file. This means changes might not take effect immediately.
    public var sourceS3Path: KendraClientTypes.S3Path?

    public init(
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        sourceS3Path: KendraClientTypes.S3Path? = nil
    )
    {
        self.description = description
        self.id = id
        self.indexId = indexId
        self.name = name
        self.roleArn = roleArn
        self.sourceS3Path = sourceS3Path
    }
}

public struct UpdateQuerySuggestionsConfigInput: Swift.Sendable {
    /// Configuration information for the document fields/attributes that you want to base query suggestions on.
    public var attributeSuggestionsConfig: KendraClientTypes.AttributeSuggestionsUpdateConfig?
    /// TRUE to include queries without user information (i.e. all queries, irrespective of the user), otherwise FALSE to only include queries with user information. If you pass user information to Amazon Kendra along with the queries, you can set this flag to FALSE and instruct Amazon Kendra to only consider queries with user information. If you set to FALSE, Amazon Kendra only considers queries searched at least MinimumQueryCount times across MinimumNumberOfQueryingUsers unique users for suggestions. If you set to TRUE, Amazon Kendra ignores all user information and learns from all queries.
    public var includeQueriesWithoutUserInformation: Swift.Bool?
    /// The identifier of the index with query suggestions you want to update.
    /// This member is required.
    public var indexId: Swift.String?
    /// The minimum number of unique users who must search a query in order for the query to be eligible to suggest to your users. Increasing this number might decrease the number of suggestions. However, this ensures a query is searched by many users and is truly popular to suggest to users. How you tune this setting depends on your specific needs.
    public var minimumNumberOfQueryingUsers: Swift.Int?
    /// The the minimum number of times a query must be searched in order to be eligible to suggest to your users. Decreasing this number increases the number of suggestions. However, this affects the quality of suggestions as it sets a low bar for a query to be considered popular to suggest to users. How you tune this setting depends on your specific needs.
    public var minimumQueryCount: Swift.Int?
    /// Set the mode to ENABLED or LEARN_ONLY. By default, Amazon Kendra enables query suggestions. LEARN_ONLY mode allows you to turn off query suggestions. You can to update this at any time. In LEARN_ONLY mode, Amazon Kendra continues to learn from new queries to keep suggestions up to date for when you are ready to switch to ENABLED mode again.
    public var mode: KendraClientTypes.Mode?
    /// How recent your queries are in your query log time window. The time window is the number of days from current day to past days. By default, Amazon Kendra sets this to 180.
    public var queryLogLookBackWindowInDays: Swift.Int?

    public init(
        attributeSuggestionsConfig: KendraClientTypes.AttributeSuggestionsUpdateConfig? = nil,
        includeQueriesWithoutUserInformation: Swift.Bool? = nil,
        indexId: Swift.String? = nil,
        minimumNumberOfQueryingUsers: Swift.Int? = nil,
        minimumQueryCount: Swift.Int? = nil,
        mode: KendraClientTypes.Mode? = nil,
        queryLogLookBackWindowInDays: Swift.Int? = nil
    )
    {
        self.attributeSuggestionsConfig = attributeSuggestionsConfig
        self.includeQueriesWithoutUserInformation = includeQueriesWithoutUserInformation
        self.indexId = indexId
        self.minimumNumberOfQueryingUsers = minimumNumberOfQueryingUsers
        self.minimumQueryCount = minimumQueryCount
        self.mode = mode
        self.queryLogLookBackWindowInDays = queryLogLookBackWindowInDays
    }
}

public struct UpdateThesaurusInput: Swift.Sendable {
    /// A new description for the thesaurus.
    public var description: Swift.String?
    /// The identifier of the thesaurus you want to update.
    /// This member is required.
    public var id: Swift.String?
    /// The identifier of the index for the thesaurus.
    /// This member is required.
    public var indexId: Swift.String?
    /// A new name for the thesaurus.
    public var name: Swift.String?
    /// An IAM role that gives Amazon Kendra permissions to access thesaurus file specified in SourceS3Path.
    public var roleArn: Swift.String?
    /// Information required to find a specific file in an Amazon S3 bucket.
    public var sourceS3Path: KendraClientTypes.S3Path?

    public init(
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        indexId: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        sourceS3Path: KendraClientTypes.S3Path? = nil
    )
    {
        self.description = description
        self.id = id
        self.indexId = indexId
        self.name = name
        self.roleArn = roleArn
        self.sourceS3Path = sourceS3Path
    }
}

extension KendraClientTypes {

    /// Information about a document attribute or field. You can use document attributes as facets. For example, the document attribute or facet "Department" includes the values "HR", "Engineering", and "Accounting". You can display these values in the search results so that documents can be searched by department. You can display up to 10 facet values per facet for a query. If you want to increase this limit, contact [Support](http://aws.amazon.com/contact-us/).
    public struct Facet: Swift.Sendable {
        /// The unique key for the document attribute.
        public var documentAttributeKey: Swift.String?
        /// An array of document attributes that are nested facets within a facet. For example, the document attribute or facet "Department" includes a value called "Engineering". In addition, the document attribute or facet "SubDepartment" includes the values "Frontend" and "Backend" for documents assigned to "Engineering". You can display nested facets in the search results so that documents can be searched not only by department but also by a sub department within a department. This helps your users further narrow their search. You can only have one nested facet within a facet. If you want to increase this limit, contact [Support](http://aws.amazon.com/contact-us/).
        public var facets: [KendraClientTypes.Facet]?
        /// Maximum number of facet values per facet. The default is 10. You can use this to limit the number of facet values to less than 10. If you want to increase the default, contact [Support](http://aws.amazon.com/contact-us/).
        public var maxResults: Swift.Int

        public init(
            documentAttributeKey: Swift.String? = nil,
            facets: [KendraClientTypes.Facet]? = nil,
            maxResults: Swift.Int = 0
        )
        {
            self.documentAttributeKey = documentAttributeKey
            self.facets = facets
            self.maxResults = maxResults
        }
    }
}

extension KendraClientTypes {

    /// Provides the count of documents that match a particular document attribute or field when doing a faceted search.
    public struct DocumentAttributeValueCountPair: Swift.Sendable {
        /// The number of documents in the response that have the attribute/field value for the key.
        public var count: Swift.Int?
        /// The value of the attribute/field. For example, "HR".
        public var documentAttributeValue: KendraClientTypes.DocumentAttributeValue?
        /// Contains the results of a document attribute/field that is a nested facet. A FacetResult contains the counts for each facet nested within a facet. For example, the document attribute or facet "Department" includes a value called "Engineering". In addition, the document attribute or facet "SubDepartment" includes the values "Frontend" and "Backend" for documents assigned to "Engineering". You can display nested facets in the search results so that documents can be searched not only by department but also by a sub department within a department. The counts for documents that belong to "Frontend" and "Backend" within "Engineering" are returned for a query.
        public var facetResults: [KendraClientTypes.FacetResult]?

        public init(
            count: Swift.Int? = nil,
            documentAttributeValue: KendraClientTypes.DocumentAttributeValue? = nil,
            facetResults: [KendraClientTypes.FacetResult]? = nil
        )
        {
            self.count = count
            self.documentAttributeValue = documentAttributeValue
            self.facetResults = facetResults
        }
    }
}

extension KendraClientTypes {

    /// The facet values for the documents in the response.
    public struct FacetResult: Swift.Sendable {
        /// The key for the facet values. This is the same as the DocumentAttributeKey provided in the query.
        public var documentAttributeKey: Swift.String?
        /// An array of key/value pairs, where the key is the value of the attribute and the count is the number of documents that share the key value.
        public var documentAttributeValueCountPairs: [KendraClientTypes.DocumentAttributeValueCountPair]?
        /// The data type of the facet value. This is the same as the type defined for the index field when it was created.
        public var documentAttributeValueType: KendraClientTypes.DocumentAttributeValueType?

        public init(
            documentAttributeKey: Swift.String? = nil,
            documentAttributeValueCountPairs: [KendraClientTypes.DocumentAttributeValueCountPair]? = nil,
            documentAttributeValueType: KendraClientTypes.DocumentAttributeValueType? = nil
        )
        {
            self.documentAttributeKey = documentAttributeKey
            self.documentAttributeValueCountPairs = documentAttributeValueCountPairs
            self.documentAttributeValueType = documentAttributeValueType
        }
    }
}

extension KendraClientTypes {

    /// Filters the search results based on document attributes or fields. You can filter results using attributes for your particular documents. The attributes must exist in your index. For example, if your documents include the custom attribute "Department", you can filter documents that belong to the "HR" department. You would use the EqualsTo operation to filter results or documents with "Department" equals to "HR". You can use AndAllFilters and AndOrFilters in combination with each other or with other operations such as EqualsTo. For example: AndAllFilters
    ///
    /// * EqualsTo: "Department", "HR"
    ///
    /// * AndOrFilters
    ///
    /// * ContainsAny: "Project Name", ["new hires", "new hiring"]
    ///
    ///
    ///
    ///
    ///
    /// This example filters results or documents that belong to the HR department and belong to projects that contain "new hires" or "new hiring" in the project name (must use ContainAny with StringListValue). This example is filtering with a depth of 2. You cannot filter more than a depth of 2, otherwise you receive a ValidationException exception with the message "AttributeFilter cannot have a depth of more than 2." Also, if you use more than 10 attribute filters in a given list for AndAllFilters or OrAllFilters, you receive a ValidationException with the message "AttributeFilter cannot have a length of more than 10". For examples of using AttributeFilter, see [Using document attributes to filter search results](https://docs.aws.amazon.com/kendra/latest/dg/filtering.html#search-filtering).
    public struct AttributeFilter: Swift.Sendable {
        /// Performs a logical AND operation on all filters that you specify.
        public var andAllFilters: [KendraClientTypes.AttributeFilter]?
        /// Returns true when a document contains all of the specified document attributes/fields. This filter is only applicable to [StringListValue](https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html).
        public var containsAll: KendraClientTypes.DocumentAttribute?
        /// Returns true when a document contains any of the specified document attributes/fields. This filter is only applicable to [StringListValue](https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html).
        public var containsAny: KendraClientTypes.DocumentAttribute?
        /// Performs an equals operation on document attributes/fields and their values.
        public var equalsTo: KendraClientTypes.DocumentAttribute?
        /// Performs a greater than operation on document attributes/fields and their values. Use with the [document attribute type](https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html)Date or Long.
        public var greaterThan: KendraClientTypes.DocumentAttribute?
        /// Performs a greater or equals than operation on document attributes/fields and their values. Use with the [document attribute type](https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html)Date or Long.
        public var greaterThanOrEquals: KendraClientTypes.DocumentAttribute?
        /// Performs a less than operation on document attributes/fields and their values. Use with the [document attribute type](https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html)Date or Long.
        public var lessThan: KendraClientTypes.DocumentAttribute?
        /// Performs a less than or equals operation on document attributes/fields and their values. Use with the [document attribute type](https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html)Date or Long.
        public var lessThanOrEquals: KendraClientTypes.DocumentAttribute?
        /// Performs a logical NOT operation on all filters that you specify.
        @Indirect public var notFilter: KendraClientTypes.AttributeFilter?
        /// Performs a logical OR operation on all filters that you specify.
        public var orAllFilters: [KendraClientTypes.AttributeFilter]?

        public init(
            andAllFilters: [KendraClientTypes.AttributeFilter]? = nil,
            containsAll: KendraClientTypes.DocumentAttribute? = nil,
            containsAny: KendraClientTypes.DocumentAttribute? = nil,
            equalsTo: KendraClientTypes.DocumentAttribute? = nil,
            greaterThan: KendraClientTypes.DocumentAttribute? = nil,
            greaterThanOrEquals: KendraClientTypes.DocumentAttribute? = nil,
            lessThan: KendraClientTypes.DocumentAttribute? = nil,
            lessThanOrEquals: KendraClientTypes.DocumentAttribute? = nil,
            notFilter: KendraClientTypes.AttributeFilter? = nil,
            orAllFilters: [KendraClientTypes.AttributeFilter]? = nil
        )
        {
            self.andAllFilters = andAllFilters
            self.containsAll = containsAll
            self.containsAny = containsAny
            self.equalsTo = equalsTo
            self.greaterThan = greaterThan
            self.greaterThanOrEquals = greaterThanOrEquals
            self.lessThan = lessThan
            self.lessThanOrEquals = lessThanOrEquals
            self.notFilter = notFilter
            self.orAllFilters = orAllFilters
        }
    }
}

public struct QueryOutput: Swift.Sendable {
    /// Contains the facet results. A FacetResult contains the counts for each field/attribute key that was specified in the Facets input parameter.
    public var facetResults: [KendraClientTypes.FacetResult]?
    /// The list of featured result items. Featured results are displayed at the top of the search results page, placed above all other results for certain queries. If there's an exact match of a query, then certain documents are featured in the search results.
    public var featuredResultsItems: [KendraClientTypes.FeaturedResultsItem]?
    /// The identifier for the search. You also use QueryId to identify the search when using the [SubmitFeedback](https://docs.aws.amazon.com/kendra/latest/APIReference/API_SubmitFeedback.html) API.
    public var queryId: Swift.String?
    /// The results of the search.
    public var resultItems: [KendraClientTypes.QueryResultItem]?
    /// A list of information related to suggested spell corrections for a query.
    public var spellCorrectedQueries: [KendraClientTypes.SpellCorrectedQuery]?
    /// The total number of items found by the search. However, you can only retrieve up to 100 items. For example, if the search found 192 items, you can only retrieve the first 100 of the items.
    public var totalNumberOfResults: Swift.Int?
    /// A list of warning codes and their messages on problems with your query. Amazon Kendra currently only supports one type of warning, which is a warning on invalid syntax used in the query. For examples of invalid query syntax, see [Searching with advanced query syntax](https://docs.aws.amazon.com/kendra/latest/dg/searching-example.html#searching-index-query-syntax).
    public var warnings: [KendraClientTypes.Warning]?

    public init(
        facetResults: [KendraClientTypes.FacetResult]? = nil,
        featuredResultsItems: [KendraClientTypes.FeaturedResultsItem]? = nil,
        queryId: Swift.String? = nil,
        resultItems: [KendraClientTypes.QueryResultItem]? = nil,
        spellCorrectedQueries: [KendraClientTypes.SpellCorrectedQuery]? = nil,
        totalNumberOfResults: Swift.Int? = nil,
        warnings: [KendraClientTypes.Warning]? = nil
    )
    {
        self.facetResults = facetResults
        self.featuredResultsItems = featuredResultsItems
        self.queryId = queryId
        self.resultItems = resultItems
        self.spellCorrectedQueries = spellCorrectedQueries
        self.totalNumberOfResults = totalNumberOfResults
        self.warnings = warnings
    }
}

extension KendraClientTypes {

    /// Provides the configuration information for the document fields/attributes that you want to base query suggestions on.
    public struct AttributeSuggestionsGetConfig: Swift.Sendable {
        /// The list of additional document field/attribute keys or field names to include in the response. You can use additional fields to provide extra information in the response. Additional fields are not used to based suggestions on.
        public var additionalResponseAttributes: [Swift.String]?
        /// Filters the search results based on document fields/attributes.
        public var attributeFilter: KendraClientTypes.AttributeFilter?
        /// The list of document field/attribute keys or field names to use for query suggestions. If the content within any of the fields match what your user starts typing as their query, then the field content is returned as a query suggestion.
        public var suggestionAttributes: [Swift.String]?
        /// Applies user context filtering so that only users who are given access to certain documents see these document in their search results.
        public var userContext: KendraClientTypes.UserContext?

        public init(
            additionalResponseAttributes: [Swift.String]? = nil,
            attributeFilter: KendraClientTypes.AttributeFilter? = nil,
            suggestionAttributes: [Swift.String]? = nil,
            userContext: KendraClientTypes.UserContext? = nil
        )
        {
            self.additionalResponseAttributes = additionalResponseAttributes
            self.attributeFilter = attributeFilter
            self.suggestionAttributes = suggestionAttributes
            self.userContext = userContext
        }
    }
}

public struct RetrieveInput: Swift.Sendable {
    /// Filters search results by document fields/attributes. You can only provide one attribute filter; however, the AndAllFilters, NotFilter, and OrAllFilters parameters contain a list of other filters. The AttributeFilter parameter means you can create a set of filtering rules that a document must satisfy to be included in the query results.
    public var attributeFilter: KendraClientTypes.AttributeFilter?
    /// Overrides relevance tuning configurations of fields/attributes set at the index level. If you use this API to override the relevance tuning configured at the index level, but there is no relevance tuning configured at the index level, then Amazon Kendra does not apply any relevance tuning. If there is relevance tuning configured for fields at the index level, and you use this API to override only some of these fields, then for the fields you did not override, the importance is set to 1.
    public var documentRelevanceOverrideConfigurations: [KendraClientTypes.DocumentRelevanceConfiguration]?
    /// The identifier of the index to retrieve relevant passages for the search.
    /// This member is required.
    public var indexId: Swift.String?
    /// Retrieved relevant passages are returned in pages the size of the PageSize parameter. By default, Amazon Kendra returns the first page of results. Use this parameter to get result pages after the first one.
    public var pageNumber: Swift.Int?
    /// Sets the number of retrieved relevant passages that are returned in each page of results. The default page size is 10. The maximum number of results returned is 100. If you ask for more than 100 results, only 100 are returned.
    public var pageSize: Swift.Int?
    /// The input query text to retrieve relevant passages for the search. Amazon Kendra truncates queries at 30 token words, which excludes punctuation and stop words. Truncation still applies if you use Boolean or more advanced, complex queries. For example, Timeoff AND October AND Category:HR is counted as 3 tokens: timeoff, october, hr. For more information, see [Searching with advanced query syntax](https://docs.aws.amazon.com/kendra/latest/dg/searching-example.html#searching-index-query-syntax) in the Amazon Kendra Developer Guide.
    /// This member is required.
    public var queryText: Swift.String?
    /// A list of document fields/attributes to include in the response. You can limit the response to include certain document fields. By default, all document fields are included in the response.
    public var requestedDocumentAttributes: [Swift.String]?
    /// The user context token or user and group information.
    public var userContext: KendraClientTypes.UserContext?

    public init(
        attributeFilter: KendraClientTypes.AttributeFilter? = nil,
        documentRelevanceOverrideConfigurations: [KendraClientTypes.DocumentRelevanceConfiguration]? = nil,
        indexId: Swift.String? = nil,
        pageNumber: Swift.Int? = nil,
        pageSize: Swift.Int? = nil,
        queryText: Swift.String? = nil,
        requestedDocumentAttributes: [Swift.String]? = nil,
        userContext: KendraClientTypes.UserContext? = nil
    )
    {
        self.attributeFilter = attributeFilter
        self.documentRelevanceOverrideConfigurations = documentRelevanceOverrideConfigurations
        self.indexId = indexId
        self.pageNumber = pageNumber
        self.pageSize = pageSize
        self.queryText = queryText
        self.requestedDocumentAttributes = requestedDocumentAttributes
        self.userContext = userContext
    }
}

public struct GetQuerySuggestionsInput: Swift.Sendable {
    /// Configuration information for the document fields/attributes that you want to base query suggestions on.
    public var attributeSuggestionsConfig: KendraClientTypes.AttributeSuggestionsGetConfig?
    /// The identifier of the index you want to get query suggestions from.
    /// This member is required.
    public var indexId: Swift.String?
    /// The maximum number of query suggestions you want to show to your users.
    public var maxSuggestionsCount: Swift.Int?
    /// The text of a user's query to generate query suggestions. A query is suggested if the query prefix matches what a user starts to type as their query. Amazon Kendra does not show any suggestions if a user types fewer than two characters or more than 60 characters. A query must also have at least one search result and contain at least one word of more than four characters.
    /// This member is required.
    public var queryText: Swift.String?
    /// The suggestions type to base query suggestions on. The suggestion types are query history or document fields/attributes. You can set one type or the other. If you set query history as your suggestions type, Amazon Kendra suggests queries relevant to your users based on popular queries in the query history. If you set document fields/attributes as your suggestions type, Amazon Kendra suggests queries relevant to your users based on the contents of document fields.
    public var suggestionTypes: [KendraClientTypes.SuggestionType]?

    public init(
        attributeSuggestionsConfig: KendraClientTypes.AttributeSuggestionsGetConfig? = nil,
        indexId: Swift.String? = nil,
        maxSuggestionsCount: Swift.Int? = nil,
        queryText: Swift.String? = nil,
        suggestionTypes: [KendraClientTypes.SuggestionType]? = nil
    )
    {
        self.attributeSuggestionsConfig = attributeSuggestionsConfig
        self.indexId = indexId
        self.maxSuggestionsCount = maxSuggestionsCount
        self.queryText = queryText
        self.suggestionTypes = suggestionTypes
    }
}

public struct QueryInput: Swift.Sendable {
    /// Filters search results by document fields/attributes. You can only provide one attribute filter; however, the AndAllFilters, NotFilter, and OrAllFilters parameters contain a list of other filters. The AttributeFilter parameter means you can create a set of filtering rules that a document must satisfy to be included in the query results.
    public var attributeFilter: KendraClientTypes.AttributeFilter?
    /// Provides configuration to determine how to group results by document attribute value, and how to display them (collapsed or expanded) under a designated primary document for each group.
    public var collapseConfiguration: KendraClientTypes.CollapseConfiguration?
    /// Overrides relevance tuning configurations of fields/attributes set at the index level. If you use this API to override the relevance tuning configured at the index level, but there is no relevance tuning configured at the index level, then Amazon Kendra does not apply any relevance tuning. If there is relevance tuning configured for fields at the index level, and you use this API to override only some of these fields, then for the fields you did not override, the importance is set to 1.
    public var documentRelevanceOverrideConfigurations: [KendraClientTypes.DocumentRelevanceConfiguration]?
    /// An array of documents fields/attributes for faceted search. Amazon Kendra returns a count for each field key specified. This helps your users narrow their search.
    public var facets: [KendraClientTypes.Facet]?
    /// The identifier of the index for the search.
    /// This member is required.
    public var indexId: Swift.String?
    /// Query results are returned in pages the size of the PageSize parameter. By default, Amazon Kendra returns the first page of results. Use this parameter to get result pages after the first one.
    public var pageNumber: Swift.Int?
    /// Sets the number of results that are returned in each page of results. The default page size is 10. The maximum number of results returned is 100. If you ask for more than 100 results, only 100 are returned.
    public var pageSize: Swift.Int?
    /// Sets the type of query result or response. Only results for the specified type are returned.
    public var queryResultTypeFilter: KendraClientTypes.QueryResultType?
    /// The input query text for the search. Amazon Kendra truncates queries at 30 token words, which excludes punctuation and stop words. Truncation still applies if you use Boolean or more advanced, complex queries. For example, Timeoff AND October AND Category:HR is counted as 3 tokens: timeoff, october, hr. For more information, see [Searching with advanced query syntax](https://docs.aws.amazon.com/kendra/latest/dg/searching-example.html#searching-index-query-syntax) in the Amazon Kendra Developer Guide.
    public var queryText: Swift.String?
    /// An array of document fields/attributes to include in the response. You can limit the response to include certain document fields. By default, all document attributes are included in the response.
    public var requestedDocumentAttributes: [Swift.String]?
    /// Provides information that determines how the results of the query are sorted. You can set the field that Amazon Kendra should sort the results on, and specify whether the results should be sorted in ascending or descending order. In the case of ties in sorting the results, the results are sorted by relevance. If you don't provide sorting configuration, the results are sorted by the relevance that Amazon Kendra determines for the result.
    public var sortingConfiguration: KendraClientTypes.SortingConfiguration?
    /// Provides configuration information to determine how the results of a query are sorted. You can set upto 3 fields that Amazon Kendra should sort the results on, and specify whether the results should be sorted in ascending or descending order. The sort field quota can be increased. If you don't provide a sorting configuration, the results are sorted by the relevance that Amazon Kendra determines for the result. In the case of ties in sorting the results, the results are sorted by relevance.
    public var sortingConfigurations: [KendraClientTypes.SortingConfiguration]?
    /// Enables suggested spell corrections for queries.
    public var spellCorrectionConfiguration: KendraClientTypes.SpellCorrectionConfiguration?
    /// The user context token or user and group information.
    public var userContext: KendraClientTypes.UserContext?
    /// Provides an identifier for a specific user. The VisitorId should be a unique identifier, such as a GUID. Don't use personally identifiable information, such as the user's email address, as the VisitorId.
    public var visitorId: Swift.String?

    public init(
        attributeFilter: KendraClientTypes.AttributeFilter? = nil,
        collapseConfiguration: KendraClientTypes.CollapseConfiguration? = nil,
        documentRelevanceOverrideConfigurations: [KendraClientTypes.DocumentRelevanceConfiguration]? = nil,
        facets: [KendraClientTypes.Facet]? = nil,
        indexId: Swift.String? = nil,
        pageNumber: Swift.Int? = nil,
        pageSize: Swift.Int? = nil,
        queryResultTypeFilter: KendraClientTypes.QueryResultType? = nil,
        queryText: Swift.String? = nil,
        requestedDocumentAttributes: [Swift.String]? = nil,
        sortingConfiguration: KendraClientTypes.SortingConfiguration? = nil,
        sortingConfigurations: [KendraClientTypes.SortingConfiguration]? = nil,
        spellCorrectionConfiguration: KendraClientTypes.SpellCorrectionConfiguration? = nil,
        userContext: KendraClientTypes.UserContext? = nil,
        visitorId: Swift.String? = nil
    )
    {
        self.attributeFilter = attributeFilter
        self.collapseConfiguration = collapseConfiguration
        self.documentRelevanceOverrideConfigurations = documentRelevanceOverrideConfigurations
        self.facets = facets
        self.indexId = indexId
        self.pageNumber = pageNumber
        self.pageSize = pageSize
        self.queryResultTypeFilter = queryResultTypeFilter
        self.queryText = queryText
        self.requestedDocumentAttributes = requestedDocumentAttributes
        self.sortingConfiguration = sortingConfiguration
        self.sortingConfigurations = sortingConfigurations
        self.spellCorrectionConfiguration = spellCorrectionConfiguration
        self.userContext = userContext
        self.visitorId = visitorId
    }
}

extension AssociateEntitiesToExperienceInput {

    static func urlPathProvider(_ value: AssociateEntitiesToExperienceInput) -> Swift.String? {
        return "/"
    }
}

extension AssociatePersonasToEntitiesInput {

    static func urlPathProvider(_ value: AssociatePersonasToEntitiesInput) -> Swift.String? {
        return "/"
    }
}

extension BatchDeleteDocumentInput {

    static func urlPathProvider(_ value: BatchDeleteDocumentInput) -> Swift.String? {
        return "/"
    }
}

extension BatchDeleteFeaturedResultsSetInput {

    static func urlPathProvider(_ value: BatchDeleteFeaturedResultsSetInput) -> Swift.String? {
        return "/"
    }
}

extension BatchGetDocumentStatusInput {

    static func urlPathProvider(_ value: BatchGetDocumentStatusInput) -> Swift.String? {
        return "/"
    }
}

extension BatchPutDocumentInput {

    static func urlPathProvider(_ value: BatchPutDocumentInput) -> Swift.String? {
        return "/"
    }
}

extension ClearQuerySuggestionsInput {

    static func urlPathProvider(_ value: ClearQuerySuggestionsInput) -> Swift.String? {
        return "/"
    }
}

extension CreateAccessControlConfigurationInput {

    static func urlPathProvider(_ value: CreateAccessControlConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDataSourceInput {

    static func urlPathProvider(_ value: CreateDataSourceInput) -> Swift.String? {
        return "/"
    }
}

extension CreateExperienceInput {

    static func urlPathProvider(_ value: CreateExperienceInput) -> Swift.String? {
        return "/"
    }
}

extension CreateFaqInput {

    static func urlPathProvider(_ value: CreateFaqInput) -> Swift.String? {
        return "/"
    }
}

extension CreateFeaturedResultsSetInput {

    static func urlPathProvider(_ value: CreateFeaturedResultsSetInput) -> Swift.String? {
        return "/"
    }
}

extension CreateIndexInput {

    static func urlPathProvider(_ value: CreateIndexInput) -> Swift.String? {
        return "/"
    }
}

extension CreateQuerySuggestionsBlockListInput {

    static func urlPathProvider(_ value: CreateQuerySuggestionsBlockListInput) -> Swift.String? {
        return "/"
    }
}

extension CreateThesaurusInput {

    static func urlPathProvider(_ value: CreateThesaurusInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteAccessControlConfigurationInput {

    static func urlPathProvider(_ value: DeleteAccessControlConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDataSourceInput {

    static func urlPathProvider(_ value: DeleteDataSourceInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteExperienceInput {

    static func urlPathProvider(_ value: DeleteExperienceInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteFaqInput {

    static func urlPathProvider(_ value: DeleteFaqInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteIndexInput {

    static func urlPathProvider(_ value: DeleteIndexInput) -> Swift.String? {
        return "/"
    }
}

extension DeletePrincipalMappingInput {

    static func urlPathProvider(_ value: DeletePrincipalMappingInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteQuerySuggestionsBlockListInput {

    static func urlPathProvider(_ value: DeleteQuerySuggestionsBlockListInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteThesaurusInput {

    static func urlPathProvider(_ value: DeleteThesaurusInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAccessControlConfigurationInput {

    static func urlPathProvider(_ value: DescribeAccessControlConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDataSourceInput {

    static func urlPathProvider(_ value: DescribeDataSourceInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeExperienceInput {

    static func urlPathProvider(_ value: DescribeExperienceInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeFaqInput {

    static func urlPathProvider(_ value: DescribeFaqInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeFeaturedResultsSetInput {

    static func urlPathProvider(_ value: DescribeFeaturedResultsSetInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeIndexInput {

    static func urlPathProvider(_ value: DescribeIndexInput) -> Swift.String? {
        return "/"
    }
}

extension DescribePrincipalMappingInput {

    static func urlPathProvider(_ value: DescribePrincipalMappingInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeQuerySuggestionsBlockListInput {

    static func urlPathProvider(_ value: DescribeQuerySuggestionsBlockListInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeQuerySuggestionsConfigInput {

    static func urlPathProvider(_ value: DescribeQuerySuggestionsConfigInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeThesaurusInput {

    static func urlPathProvider(_ value: DescribeThesaurusInput) -> Swift.String? {
        return "/"
    }
}

extension DisassociateEntitiesFromExperienceInput {

    static func urlPathProvider(_ value: DisassociateEntitiesFromExperienceInput) -> Swift.String? {
        return "/"
    }
}

extension DisassociatePersonasFromEntitiesInput {

    static func urlPathProvider(_ value: DisassociatePersonasFromEntitiesInput) -> Swift.String? {
        return "/"
    }
}

extension GetQuerySuggestionsInput {

    static func urlPathProvider(_ value: GetQuerySuggestionsInput) -> Swift.String? {
        return "/"
    }
}

extension GetSnapshotsInput {

    static func urlPathProvider(_ value: GetSnapshotsInput) -> Swift.String? {
        return "/"
    }
}

extension ListAccessControlConfigurationsInput {

    static func urlPathProvider(_ value: ListAccessControlConfigurationsInput) -> Swift.String? {
        return "/"
    }
}

extension ListDataSourcesInput {

    static func urlPathProvider(_ value: ListDataSourcesInput) -> Swift.String? {
        return "/"
    }
}

extension ListDataSourceSyncJobsInput {

    static func urlPathProvider(_ value: ListDataSourceSyncJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListEntityPersonasInput {

    static func urlPathProvider(_ value: ListEntityPersonasInput) -> Swift.String? {
        return "/"
    }
}

extension ListExperienceEntitiesInput {

    static func urlPathProvider(_ value: ListExperienceEntitiesInput) -> Swift.String? {
        return "/"
    }
}

extension ListExperiencesInput {

    static func urlPathProvider(_ value: ListExperiencesInput) -> Swift.String? {
        return "/"
    }
}

extension ListFaqsInput {

    static func urlPathProvider(_ value: ListFaqsInput) -> Swift.String? {
        return "/"
    }
}

extension ListFeaturedResultsSetsInput {

    static func urlPathProvider(_ value: ListFeaturedResultsSetsInput) -> Swift.String? {
        return "/"
    }
}

extension ListGroupsOlderThanOrderingIdInput {

    static func urlPathProvider(_ value: ListGroupsOlderThanOrderingIdInput) -> Swift.String? {
        return "/"
    }
}

extension ListIndicesInput {

    static func urlPathProvider(_ value: ListIndicesInput) -> Swift.String? {
        return "/"
    }
}

extension ListQuerySuggestionsBlockListsInput {

    static func urlPathProvider(_ value: ListQuerySuggestionsBlockListsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension ListThesauriInput {

    static func urlPathProvider(_ value: ListThesauriInput) -> Swift.String? {
        return "/"
    }
}

extension PutPrincipalMappingInput {

    static func urlPathProvider(_ value: PutPrincipalMappingInput) -> Swift.String? {
        return "/"
    }
}

extension QueryInput {

    static func urlPathProvider(_ value: QueryInput) -> Swift.String? {
        return "/"
    }
}

extension RetrieveInput {

    static func urlPathProvider(_ value: RetrieveInput) -> Swift.String? {
        return "/"
    }
}

extension StartDataSourceSyncJobInput {

    static func urlPathProvider(_ value: StartDataSourceSyncJobInput) -> Swift.String? {
        return "/"
    }
}

extension StopDataSourceSyncJobInput {

    static func urlPathProvider(_ value: StopDataSourceSyncJobInput) -> Swift.String? {
        return "/"
    }
}

extension SubmitFeedbackInput {

    static func urlPathProvider(_ value: SubmitFeedbackInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateAccessControlConfigurationInput {

    static func urlPathProvider(_ value: UpdateAccessControlConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateDataSourceInput {

    static func urlPathProvider(_ value: UpdateDataSourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateExperienceInput {

    static func urlPathProvider(_ value: UpdateExperienceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateFeaturedResultsSetInput {

    static func urlPathProvider(_ value: UpdateFeaturedResultsSetInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateIndexInput {

    static func urlPathProvider(_ value: UpdateIndexInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateQuerySuggestionsBlockListInput {

    static func urlPathProvider(_ value: UpdateQuerySuggestionsBlockListInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateQuerySuggestionsConfigInput {

    static func urlPathProvider(_ value: UpdateQuerySuggestionsConfigInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateThesaurusInput {

    static func urlPathProvider(_ value: UpdateThesaurusInput) -> Swift.String? {
        return "/"
    }
}

extension AssociateEntitiesToExperienceInput {

    static func write(value: AssociateEntitiesToExperienceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EntityList"].writeList(value.entityList, memberWritingClosure: KendraClientTypes.EntityConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
    }
}

extension AssociatePersonasToEntitiesInput {

    static func write(value: AssociatePersonasToEntitiesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
        try writer["Personas"].writeList(value.personas, memberWritingClosure: KendraClientTypes.EntityPersonaConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchDeleteDocumentInput {

    static func write(value: BatchDeleteDocumentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataSourceSyncJobMetricTarget"].write(value.dataSourceSyncJobMetricTarget, with: KendraClientTypes.DataSourceSyncJobMetricTarget.write(value:to:))
        try writer["DocumentIdList"].writeList(value.documentIdList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IndexId"].write(value.indexId)
    }
}

extension BatchDeleteFeaturedResultsSetInput {

    static func write(value: BatchDeleteFeaturedResultsSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FeaturedResultsSetIds"].writeList(value.featuredResultsSetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IndexId"].write(value.indexId)
    }
}

extension BatchGetDocumentStatusInput {

    static func write(value: BatchGetDocumentStatusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DocumentInfoList"].writeList(value.documentInfoList, memberWritingClosure: KendraClientTypes.DocumentInfo.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IndexId"].write(value.indexId)
    }
}

extension BatchPutDocumentInput {

    static func write(value: BatchPutDocumentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomDocumentEnrichmentConfiguration"].write(value.customDocumentEnrichmentConfiguration, with: KendraClientTypes.CustomDocumentEnrichmentConfiguration.write(value:to:))
        try writer["Documents"].writeList(value.documents, memberWritingClosure: KendraClientTypes.Document.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IndexId"].write(value.indexId)
        try writer["RoleArn"].write(value.roleArn)
    }
}

extension ClearQuerySuggestionsInput {

    static func write(value: ClearQuerySuggestionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IndexId"].write(value.indexId)
    }
}

extension CreateAccessControlConfigurationInput {

    static func write(value: CreateAccessControlConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessControlList"].writeList(value.accessControlList, memberWritingClosure: KendraClientTypes.Principal.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ClientToken"].write(value.clientToken)
        try writer["Description"].write(value.description)
        try writer["HierarchicalAccessControlList"].writeList(value.hierarchicalAccessControlList, memberWritingClosure: KendraClientTypes.HierarchicalPrincipal.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IndexId"].write(value.indexId)
        try writer["Name"].write(value.name)
    }
}

extension CreateDataSourceInput {

    static func write(value: CreateDataSourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["Configuration"].write(value.configuration, with: KendraClientTypes.DataSourceConfiguration.write(value:to:))
        try writer["CustomDocumentEnrichmentConfiguration"].write(value.customDocumentEnrichmentConfiguration, with: KendraClientTypes.CustomDocumentEnrichmentConfiguration.write(value:to:))
        try writer["Description"].write(value.description)
        try writer["IndexId"].write(value.indexId)
        try writer["LanguageCode"].write(value.languageCode)
        try writer["Name"].write(value.name)
        try writer["RoleArn"].write(value.roleArn)
        try writer["Schedule"].write(value.schedule)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: KendraClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Type"].write(value.type)
        try writer["VpcConfiguration"].write(value.vpcConfiguration, with: KendraClientTypes.DataSourceVpcConfiguration.write(value:to:))
    }
}

extension CreateExperienceInput {

    static func write(value: CreateExperienceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["Configuration"].write(value.configuration, with: KendraClientTypes.ExperienceConfiguration.write(value:to:))
        try writer["Description"].write(value.description)
        try writer["IndexId"].write(value.indexId)
        try writer["Name"].write(value.name)
        try writer["RoleArn"].write(value.roleArn)
    }
}

extension CreateFaqInput {

    static func write(value: CreateFaqInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["Description"].write(value.description)
        try writer["FileFormat"].write(value.fileFormat)
        try writer["IndexId"].write(value.indexId)
        try writer["LanguageCode"].write(value.languageCode)
        try writer["Name"].write(value.name)
        try writer["RoleArn"].write(value.roleArn)
        try writer["S3Path"].write(value.s3Path, with: KendraClientTypes.S3Path.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: KendraClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateFeaturedResultsSetInput {

    static func write(value: CreateFeaturedResultsSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["Description"].write(value.description)
        try writer["FeaturedDocuments"].writeList(value.featuredDocuments, memberWritingClosure: KendraClientTypes.FeaturedDocument.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FeaturedResultsSetName"].write(value.featuredResultsSetName)
        try writer["IndexId"].write(value.indexId)
        try writer["QueryTexts"].writeList(value.queryTexts, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Status"].write(value.status)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: KendraClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateIndexInput {

    static func write(value: CreateIndexInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["Description"].write(value.description)
        try writer["Edition"].write(value.edition)
        try writer["Name"].write(value.name)
        try writer["RoleArn"].write(value.roleArn)
        try writer["ServerSideEncryptionConfiguration"].write(value.serverSideEncryptionConfiguration, with: KendraClientTypes.ServerSideEncryptionConfiguration.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: KendraClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserContextPolicy"].write(value.userContextPolicy)
        try writer["UserGroupResolutionConfiguration"].write(value.userGroupResolutionConfiguration, with: KendraClientTypes.UserGroupResolutionConfiguration.write(value:to:))
        try writer["UserTokenConfigurations"].writeList(value.userTokenConfigurations, memberWritingClosure: KendraClientTypes.UserTokenConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateQuerySuggestionsBlockListInput {

    static func write(value: CreateQuerySuggestionsBlockListInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["Description"].write(value.description)
        try writer["IndexId"].write(value.indexId)
        try writer["Name"].write(value.name)
        try writer["RoleArn"].write(value.roleArn)
        try writer["SourceS3Path"].write(value.sourceS3Path, with: KendraClientTypes.S3Path.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: KendraClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateThesaurusInput {

    static func write(value: CreateThesaurusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["Description"].write(value.description)
        try writer["IndexId"].write(value.indexId)
        try writer["Name"].write(value.name)
        try writer["RoleArn"].write(value.roleArn)
        try writer["SourceS3Path"].write(value.sourceS3Path, with: KendraClientTypes.S3Path.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: KendraClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteAccessControlConfigurationInput {

    static func write(value: DeleteAccessControlConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
    }
}

extension DeleteDataSourceInput {

    static func write(value: DeleteDataSourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
    }
}

extension DeleteExperienceInput {

    static func write(value: DeleteExperienceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
    }
}

extension DeleteFaqInput {

    static func write(value: DeleteFaqInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
    }
}

extension DeleteIndexInput {

    static func write(value: DeleteIndexInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
    }
}

extension DeletePrincipalMappingInput {

    static func write(value: DeletePrincipalMappingInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataSourceId"].write(value.dataSourceId)
        try writer["GroupId"].write(value.groupId)
        try writer["IndexId"].write(value.indexId)
        try writer["OrderingId"].write(value.orderingId)
    }
}

extension DeleteQuerySuggestionsBlockListInput {

    static func write(value: DeleteQuerySuggestionsBlockListInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
    }
}

extension DeleteThesaurusInput {

    static func write(value: DeleteThesaurusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
    }
}

extension DescribeAccessControlConfigurationInput {

    static func write(value: DescribeAccessControlConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
    }
}

extension DescribeDataSourceInput {

    static func write(value: DescribeDataSourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
    }
}

extension DescribeExperienceInput {

    static func write(value: DescribeExperienceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
    }
}

extension DescribeFaqInput {

    static func write(value: DescribeFaqInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
    }
}

extension DescribeFeaturedResultsSetInput {

    static func write(value: DescribeFeaturedResultsSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FeaturedResultsSetId"].write(value.featuredResultsSetId)
        try writer["IndexId"].write(value.indexId)
    }
}

extension DescribeIndexInput {

    static func write(value: DescribeIndexInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
    }
}

extension DescribePrincipalMappingInput {

    static func write(value: DescribePrincipalMappingInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataSourceId"].write(value.dataSourceId)
        try writer["GroupId"].write(value.groupId)
        try writer["IndexId"].write(value.indexId)
    }
}

extension DescribeQuerySuggestionsBlockListInput {

    static func write(value: DescribeQuerySuggestionsBlockListInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
    }
}

extension DescribeQuerySuggestionsConfigInput {

    static func write(value: DescribeQuerySuggestionsConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IndexId"].write(value.indexId)
    }
}

extension DescribeThesaurusInput {

    static func write(value: DescribeThesaurusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
    }
}

extension DisassociateEntitiesFromExperienceInput {

    static func write(value: DisassociateEntitiesFromExperienceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EntityList"].writeList(value.entityList, memberWritingClosure: KendraClientTypes.EntityConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
    }
}

extension DisassociatePersonasFromEntitiesInput {

    static func write(value: DisassociatePersonasFromEntitiesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EntityIds"].writeList(value.entityIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
    }
}

extension GetQuerySuggestionsInput {

    static func write(value: GetQuerySuggestionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeSuggestionsConfig"].write(value.attributeSuggestionsConfig, with: KendraClientTypes.AttributeSuggestionsGetConfig.write(value:to:))
        try writer["IndexId"].write(value.indexId)
        try writer["MaxSuggestionsCount"].write(value.maxSuggestionsCount)
        try writer["QueryText"].write(value.queryText)
        try writer["SuggestionTypes"].writeList(value.suggestionTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<KendraClientTypes.SuggestionType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GetSnapshotsInput {

    static func write(value: GetSnapshotsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IndexId"].write(value.indexId)
        try writer["Interval"].write(value.interval)
        try writer["MaxResults"].write(value.maxResults)
        try writer["MetricType"].write(value.metricType)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListAccessControlConfigurationsInput {

    static func write(value: ListAccessControlConfigurationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IndexId"].write(value.indexId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListDataSourcesInput {

    static func write(value: ListDataSourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IndexId"].write(value.indexId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListDataSourceSyncJobsInput {

    static func write(value: ListDataSourceSyncJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["StartTimeFilter"].write(value.startTimeFilter, with: KendraClientTypes.TimeRange.write(value:to:))
        try writer["StatusFilter"].write(value.statusFilter)
    }
}

extension ListEntityPersonasInput {

    static func write(value: ListEntityPersonasInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListExperienceEntitiesInput {

    static func write(value: ListExperienceEntitiesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListExperiencesInput {

    static func write(value: ListExperiencesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IndexId"].write(value.indexId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListFaqsInput {

    static func write(value: ListFaqsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IndexId"].write(value.indexId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListFeaturedResultsSetsInput {

    static func write(value: ListFeaturedResultsSetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IndexId"].write(value.indexId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListGroupsOlderThanOrderingIdInput {

    static func write(value: ListGroupsOlderThanOrderingIdInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataSourceId"].write(value.dataSourceId)
        try writer["IndexId"].write(value.indexId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["OrderingId"].write(value.orderingId)
    }
}

extension ListIndicesInput {

    static func write(value: ListIndicesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListQuerySuggestionsBlockListsInput {

    static func write(value: ListQuerySuggestionsBlockListsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IndexId"].write(value.indexId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
    }
}

extension ListThesauriInput {

    static func write(value: ListThesauriInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IndexId"].write(value.indexId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension PutPrincipalMappingInput {

    static func write(value: PutPrincipalMappingInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataSourceId"].write(value.dataSourceId)
        try writer["GroupId"].write(value.groupId)
        try writer["GroupMembers"].write(value.groupMembers, with: KendraClientTypes.GroupMembers.write(value:to:))
        try writer["IndexId"].write(value.indexId)
        try writer["OrderingId"].write(value.orderingId)
        try writer["RoleArn"].write(value.roleArn)
    }
}

extension QueryInput {

    static func write(value: QueryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeFilter"].write(value.attributeFilter, with: KendraClientTypes.AttributeFilter.write(value:to:))
        try writer["CollapseConfiguration"].write(value.collapseConfiguration, with: KendraClientTypes.CollapseConfiguration.write(value:to:))
        try writer["DocumentRelevanceOverrideConfigurations"].writeList(value.documentRelevanceOverrideConfigurations, memberWritingClosure: KendraClientTypes.DocumentRelevanceConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Facets"].writeList(value.facets, memberWritingClosure: KendraClientTypes.Facet.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IndexId"].write(value.indexId)
        try writer["PageNumber"].write(value.pageNumber)
        try writer["PageSize"].write(value.pageSize)
        try writer["QueryResultTypeFilter"].write(value.queryResultTypeFilter)
        try writer["QueryText"].write(value.queryText)
        try writer["RequestedDocumentAttributes"].writeList(value.requestedDocumentAttributes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SortingConfiguration"].write(value.sortingConfiguration, with: KendraClientTypes.SortingConfiguration.write(value:to:))
        try writer["SortingConfigurations"].writeList(value.sortingConfigurations, memberWritingClosure: KendraClientTypes.SortingConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SpellCorrectionConfiguration"].write(value.spellCorrectionConfiguration, with: KendraClientTypes.SpellCorrectionConfiguration.write(value:to:))
        try writer["UserContext"].write(value.userContext, with: KendraClientTypes.UserContext.write(value:to:))
        try writer["VisitorId"].write(value.visitorId)
    }
}

extension RetrieveInput {

    static func write(value: RetrieveInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeFilter"].write(value.attributeFilter, with: KendraClientTypes.AttributeFilter.write(value:to:))
        try writer["DocumentRelevanceOverrideConfigurations"].writeList(value.documentRelevanceOverrideConfigurations, memberWritingClosure: KendraClientTypes.DocumentRelevanceConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IndexId"].write(value.indexId)
        try writer["PageNumber"].write(value.pageNumber)
        try writer["PageSize"].write(value.pageSize)
        try writer["QueryText"].write(value.queryText)
        try writer["RequestedDocumentAttributes"].writeList(value.requestedDocumentAttributes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserContext"].write(value.userContext, with: KendraClientTypes.UserContext.write(value:to:))
    }
}

extension StartDataSourceSyncJobInput {

    static func write(value: StartDataSourceSyncJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
    }
}

extension StopDataSourceSyncJobInput {

    static func write(value: StopDataSourceSyncJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
    }
}

extension SubmitFeedbackInput {

    static func write(value: SubmitFeedbackInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClickFeedbackItems"].writeList(value.clickFeedbackItems, memberWritingClosure: KendraClientTypes.ClickFeedback.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IndexId"].write(value.indexId)
        try writer["QueryId"].write(value.queryId)
        try writer["RelevanceFeedbackItems"].writeList(value.relevanceFeedbackItems, memberWritingClosure: KendraClientTypes.RelevanceFeedback.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: KendraClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateAccessControlConfigurationInput {

    static func write(value: UpdateAccessControlConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessControlList"].writeList(value.accessControlList, memberWritingClosure: KendraClientTypes.Principal.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Description"].write(value.description)
        try writer["HierarchicalAccessControlList"].writeList(value.hierarchicalAccessControlList, memberWritingClosure: KendraClientTypes.HierarchicalPrincipal.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
        try writer["Name"].write(value.name)
    }
}

extension UpdateDataSourceInput {

    static func write(value: UpdateDataSourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Configuration"].write(value.configuration, with: KendraClientTypes.DataSourceConfiguration.write(value:to:))
        try writer["CustomDocumentEnrichmentConfiguration"].write(value.customDocumentEnrichmentConfiguration, with: KendraClientTypes.CustomDocumentEnrichmentConfiguration.write(value:to:))
        try writer["Description"].write(value.description)
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
        try writer["LanguageCode"].write(value.languageCode)
        try writer["Name"].write(value.name)
        try writer["RoleArn"].write(value.roleArn)
        try writer["Schedule"].write(value.schedule)
        try writer["VpcConfiguration"].write(value.vpcConfiguration, with: KendraClientTypes.DataSourceVpcConfiguration.write(value:to:))
    }
}

extension UpdateExperienceInput {

    static func write(value: UpdateExperienceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Configuration"].write(value.configuration, with: KendraClientTypes.ExperienceConfiguration.write(value:to:))
        try writer["Description"].write(value.description)
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
        try writer["Name"].write(value.name)
        try writer["RoleArn"].write(value.roleArn)
    }
}

extension UpdateFeaturedResultsSetInput {

    static func write(value: UpdateFeaturedResultsSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["FeaturedDocuments"].writeList(value.featuredDocuments, memberWritingClosure: KendraClientTypes.FeaturedDocument.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FeaturedResultsSetId"].write(value.featuredResultsSetId)
        try writer["FeaturedResultsSetName"].write(value.featuredResultsSetName)
        try writer["IndexId"].write(value.indexId)
        try writer["QueryTexts"].writeList(value.queryTexts, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Status"].write(value.status)
    }
}

extension UpdateIndexInput {

    static func write(value: UpdateIndexInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CapacityUnits"].write(value.capacityUnits, with: KendraClientTypes.CapacityUnitsConfiguration.write(value:to:))
        try writer["Description"].write(value.description)
        try writer["DocumentMetadataConfigurationUpdates"].writeList(value.documentMetadataConfigurationUpdates, memberWritingClosure: KendraClientTypes.DocumentMetadataConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Id"].write(value.id)
        try writer["Name"].write(value.name)
        try writer["RoleArn"].write(value.roleArn)
        try writer["UserContextPolicy"].write(value.userContextPolicy)
        try writer["UserGroupResolutionConfiguration"].write(value.userGroupResolutionConfiguration, with: KendraClientTypes.UserGroupResolutionConfiguration.write(value:to:))
        try writer["UserTokenConfigurations"].writeList(value.userTokenConfigurations, memberWritingClosure: KendraClientTypes.UserTokenConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateQuerySuggestionsBlockListInput {

    static func write(value: UpdateQuerySuggestionsBlockListInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
        try writer["Name"].write(value.name)
        try writer["RoleArn"].write(value.roleArn)
        try writer["SourceS3Path"].write(value.sourceS3Path, with: KendraClientTypes.S3Path.write(value:to:))
    }
}

extension UpdateQuerySuggestionsConfigInput {

    static func write(value: UpdateQuerySuggestionsConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeSuggestionsConfig"].write(value.attributeSuggestionsConfig, with: KendraClientTypes.AttributeSuggestionsUpdateConfig.write(value:to:))
        try writer["IncludeQueriesWithoutUserInformation"].write(value.includeQueriesWithoutUserInformation)
        try writer["IndexId"].write(value.indexId)
        try writer["MinimumNumberOfQueryingUsers"].write(value.minimumNumberOfQueryingUsers)
        try writer["MinimumQueryCount"].write(value.minimumQueryCount)
        try writer["Mode"].write(value.mode)
        try writer["QueryLogLookBackWindowInDays"].write(value.queryLogLookBackWindowInDays)
    }
}

extension UpdateThesaurusInput {

    static func write(value: UpdateThesaurusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["Id"].write(value.id)
        try writer["IndexId"].write(value.indexId)
        try writer["Name"].write(value.name)
        try writer["RoleArn"].write(value.roleArn)
        try writer["SourceS3Path"].write(value.sourceS3Path, with: KendraClientTypes.S3Path.write(value:to:))
    }
}

extension AssociateEntitiesToExperienceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateEntitiesToExperienceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AssociateEntitiesToExperienceOutput()
        value.failedEntityList = try reader["FailedEntityList"].readListIfPresent(memberReadingClosure: KendraClientTypes.FailedEntity.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AssociatePersonasToEntitiesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociatePersonasToEntitiesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AssociatePersonasToEntitiesOutput()
        value.failedEntityList = try reader["FailedEntityList"].readListIfPresent(memberReadingClosure: KendraClientTypes.FailedEntity.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchDeleteDocumentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchDeleteDocumentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchDeleteDocumentOutput()
        value.failedDocuments = try reader["FailedDocuments"].readListIfPresent(memberReadingClosure: KendraClientTypes.BatchDeleteDocumentResponseFailedDocument.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchDeleteFeaturedResultsSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchDeleteFeaturedResultsSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchDeleteFeaturedResultsSetOutput()
        value.errors = try reader["Errors"].readListIfPresent(memberReadingClosure: KendraClientTypes.BatchDeleteFeaturedResultsSetError.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension BatchGetDocumentStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchGetDocumentStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchGetDocumentStatusOutput()
        value.documentStatusList = try reader["DocumentStatusList"].readListIfPresent(memberReadingClosure: KendraClientTypes.Status.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.errors = try reader["Errors"].readListIfPresent(memberReadingClosure: KendraClientTypes.BatchGetDocumentStatusResponseError.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchPutDocumentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchPutDocumentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchPutDocumentOutput()
        value.failedDocuments = try reader["FailedDocuments"].readListIfPresent(memberReadingClosure: KendraClientTypes.BatchPutDocumentResponseFailedDocument.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ClearQuerySuggestionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ClearQuerySuggestionsOutput {
        return ClearQuerySuggestionsOutput()
    }
}

extension CreateAccessControlConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAccessControlConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAccessControlConfigurationOutput()
        value.id = try reader["Id"].readIfPresent() ?? ""
        return value
    }
}

extension CreateDataSourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDataSourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDataSourceOutput()
        value.id = try reader["Id"].readIfPresent() ?? ""
        return value
    }
}

extension CreateExperienceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateExperienceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateExperienceOutput()
        value.id = try reader["Id"].readIfPresent() ?? ""
        return value
    }
}

extension CreateFaqOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateFaqOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateFaqOutput()
        value.id = try reader["Id"].readIfPresent()
        return value
    }
}

extension CreateFeaturedResultsSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateFeaturedResultsSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateFeaturedResultsSetOutput()
        value.featuredResultsSet = try reader["FeaturedResultsSet"].readIfPresent(with: KendraClientTypes.FeaturedResultsSet.read(from:))
        return value
    }
}

extension CreateIndexOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateIndexOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateIndexOutput()
        value.id = try reader["Id"].readIfPresent()
        return value
    }
}

extension CreateQuerySuggestionsBlockListOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateQuerySuggestionsBlockListOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateQuerySuggestionsBlockListOutput()
        value.id = try reader["Id"].readIfPresent()
        return value
    }
}

extension CreateThesaurusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateThesaurusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateThesaurusOutput()
        value.id = try reader["Id"].readIfPresent()
        return value
    }
}

extension DeleteAccessControlConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAccessControlConfigurationOutput {
        return DeleteAccessControlConfigurationOutput()
    }
}

extension DeleteDataSourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDataSourceOutput {
        return DeleteDataSourceOutput()
    }
}

extension DeleteExperienceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteExperienceOutput {
        return DeleteExperienceOutput()
    }
}

extension DeleteFaqOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteFaqOutput {
        return DeleteFaqOutput()
    }
}

extension DeleteIndexOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteIndexOutput {
        return DeleteIndexOutput()
    }
}

extension DeletePrincipalMappingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePrincipalMappingOutput {
        return DeletePrincipalMappingOutput()
    }
}

extension DeleteQuerySuggestionsBlockListOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteQuerySuggestionsBlockListOutput {
        return DeleteQuerySuggestionsBlockListOutput()
    }
}

extension DeleteThesaurusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteThesaurusOutput {
        return DeleteThesaurusOutput()
    }
}

extension DescribeAccessControlConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAccessControlConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAccessControlConfigurationOutput()
        value.accessControlList = try reader["AccessControlList"].readListIfPresent(memberReadingClosure: KendraClientTypes.Principal.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.description = try reader["Description"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        value.hierarchicalAccessControlList = try reader["HierarchicalAccessControlList"].readListIfPresent(memberReadingClosure: KendraClientTypes.HierarchicalPrincipal.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["Name"].readIfPresent() ?? ""
        return value
    }
}

extension DescribeDataSourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDataSourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDataSourceOutput()
        value.configuration = try reader["Configuration"].readIfPresent(with: KendraClientTypes.DataSourceConfiguration.read(from:))
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.customDocumentEnrichmentConfiguration = try reader["CustomDocumentEnrichmentConfiguration"].readIfPresent(with: KendraClientTypes.CustomDocumentEnrichmentConfiguration.read(from:))
        value.description = try reader["Description"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.indexId = try reader["IndexId"].readIfPresent()
        value.languageCode = try reader["LanguageCode"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.schedule = try reader["Schedule"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.vpcConfiguration = try reader["VpcConfiguration"].readIfPresent(with: KendraClientTypes.DataSourceVpcConfiguration.read(from:))
        return value
    }
}

extension DescribeExperienceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeExperienceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeExperienceOutput()
        value.configuration = try reader["Configuration"].readIfPresent(with: KendraClientTypes.ExperienceConfiguration.read(from:))
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.endpoints = try reader["Endpoints"].readListIfPresent(memberReadingClosure: KendraClientTypes.ExperienceEndpoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.indexId = try reader["IndexId"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension DescribeFaqOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeFaqOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeFaqOutput()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        value.fileFormat = try reader["FileFormat"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.indexId = try reader["IndexId"].readIfPresent()
        value.languageCode = try reader["LanguageCode"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.s3Path = try reader["S3Path"].readIfPresent(with: KendraClientTypes.S3Path.read(from:))
        value.status = try reader["Status"].readIfPresent()
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension DescribeFeaturedResultsSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeFeaturedResultsSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeFeaturedResultsSetOutput()
        value.creationTimestamp = try reader["CreationTimestamp"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.featuredDocumentsMissing = try reader["FeaturedDocumentsMissing"].readListIfPresent(memberReadingClosure: KendraClientTypes.FeaturedDocumentMissing.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.featuredDocumentsWithMetadata = try reader["FeaturedDocumentsWithMetadata"].readListIfPresent(memberReadingClosure: KendraClientTypes.FeaturedDocumentWithMetadata.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.featuredResultsSetId = try reader["FeaturedResultsSetId"].readIfPresent()
        value.featuredResultsSetName = try reader["FeaturedResultsSetName"].readIfPresent()
        value.lastUpdatedTimestamp = try reader["LastUpdatedTimestamp"].readIfPresent()
        value.queryTexts = try reader["QueryTexts"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension DescribeIndexOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeIndexOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeIndexOutput()
        value.capacityUnits = try reader["CapacityUnits"].readIfPresent(with: KendraClientTypes.CapacityUnitsConfiguration.read(from:))
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.documentMetadataConfigurations = try reader["DocumentMetadataConfigurations"].readListIfPresent(memberReadingClosure: KendraClientTypes.DocumentMetadataConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.edition = try reader["Edition"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.indexStatistics = try reader["IndexStatistics"].readIfPresent(with: KendraClientTypes.IndexStatistics.read(from:))
        value.name = try reader["Name"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.serverSideEncryptionConfiguration = try reader["ServerSideEncryptionConfiguration"].readIfPresent(with: KendraClientTypes.ServerSideEncryptionConfiguration.read(from:))
        value.status = try reader["Status"].readIfPresent()
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.userContextPolicy = try reader["UserContextPolicy"].readIfPresent()
        value.userGroupResolutionConfiguration = try reader["UserGroupResolutionConfiguration"].readIfPresent(with: KendraClientTypes.UserGroupResolutionConfiguration.read(from:))
        value.userTokenConfigurations = try reader["UserTokenConfigurations"].readListIfPresent(memberReadingClosure: KendraClientTypes.UserTokenConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribePrincipalMappingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribePrincipalMappingOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribePrincipalMappingOutput()
        value.dataSourceId = try reader["DataSourceId"].readIfPresent()
        value.groupId = try reader["GroupId"].readIfPresent()
        value.groupOrderingIdSummaries = try reader["GroupOrderingIdSummaries"].readListIfPresent(memberReadingClosure: KendraClientTypes.GroupOrderingIdSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.indexId = try reader["IndexId"].readIfPresent()
        return value
    }
}

extension DescribeQuerySuggestionsBlockListOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeQuerySuggestionsBlockListOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeQuerySuggestionsBlockListOutput()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        value.fileSizeBytes = try reader["FileSizeBytes"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.indexId = try reader["IndexId"].readIfPresent()
        value.itemCount = try reader["ItemCount"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.sourceS3Path = try reader["SourceS3Path"].readIfPresent(with: KendraClientTypes.S3Path.read(from:))
        value.status = try reader["Status"].readIfPresent()
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension DescribeQuerySuggestionsConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeQuerySuggestionsConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeQuerySuggestionsConfigOutput()
        value.attributeSuggestionsConfig = try reader["AttributeSuggestionsConfig"].readIfPresent(with: KendraClientTypes.AttributeSuggestionsDescribeConfig.read(from:))
        value.includeQueriesWithoutUserInformation = try reader["IncludeQueriesWithoutUserInformation"].readIfPresent()
        value.lastClearTime = try reader["LastClearTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastSuggestionsBuildTime = try reader["LastSuggestionsBuildTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.minimumNumberOfQueryingUsers = try reader["MinimumNumberOfQueryingUsers"].readIfPresent()
        value.minimumQueryCount = try reader["MinimumQueryCount"].readIfPresent()
        value.mode = try reader["Mode"].readIfPresent()
        value.queryLogLookBackWindowInDays = try reader["QueryLogLookBackWindowInDays"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.totalSuggestionsCount = try reader["TotalSuggestionsCount"].readIfPresent()
        return value
    }
}

extension DescribeThesaurusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeThesaurusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeThesaurusOutput()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        value.fileSizeBytes = try reader["FileSizeBytes"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.indexId = try reader["IndexId"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.sourceS3Path = try reader["SourceS3Path"].readIfPresent(with: KendraClientTypes.S3Path.read(from:))
        value.status = try reader["Status"].readIfPresent()
        value.synonymRuleCount = try reader["SynonymRuleCount"].readIfPresent()
        value.termCount = try reader["TermCount"].readIfPresent()
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension DisassociateEntitiesFromExperienceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateEntitiesFromExperienceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DisassociateEntitiesFromExperienceOutput()
        value.failedEntityList = try reader["FailedEntityList"].readListIfPresent(memberReadingClosure: KendraClientTypes.FailedEntity.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DisassociatePersonasFromEntitiesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociatePersonasFromEntitiesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DisassociatePersonasFromEntitiesOutput()
        value.failedEntityList = try reader["FailedEntityList"].readListIfPresent(memberReadingClosure: KendraClientTypes.FailedEntity.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetQuerySuggestionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetQuerySuggestionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetQuerySuggestionsOutput()
        value.querySuggestionsId = try reader["QuerySuggestionsId"].readIfPresent()
        value.suggestions = try reader["Suggestions"].readListIfPresent(memberReadingClosure: KendraClientTypes.Suggestion.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetSnapshotsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSnapshotsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSnapshotsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.snapShotTimeFilter = try reader["SnapShotTimeFilter"].readIfPresent(with: KendraClientTypes.TimeRange.read(from:))
        value.snapshotsData = try reader["SnapshotsData"].readListIfPresent(memberReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false), memberNodeInfo: "member", isFlattened: false)
        value.snapshotsDataHeader = try reader["SnapshotsDataHeader"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListAccessControlConfigurationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAccessControlConfigurationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAccessControlConfigurationsOutput()
        value.accessControlConfigurations = try reader["AccessControlConfigurations"].readListIfPresent(memberReadingClosure: KendraClientTypes.AccessControlConfigurationSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDataSourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDataSourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDataSourcesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.summaryItems = try reader["SummaryItems"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListDataSourceSyncJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDataSourceSyncJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDataSourceSyncJobsOutput()
        value.history = try reader["History"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceSyncJob.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListEntityPersonasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEntityPersonasOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEntityPersonasOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.summaryItems = try reader["SummaryItems"].readListIfPresent(memberReadingClosure: KendraClientTypes.PersonasSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListExperienceEntitiesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListExperienceEntitiesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListExperienceEntitiesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.summaryItems = try reader["SummaryItems"].readListIfPresent(memberReadingClosure: KendraClientTypes.ExperienceEntitiesSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListExperiencesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListExperiencesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListExperiencesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.summaryItems = try reader["SummaryItems"].readListIfPresent(memberReadingClosure: KendraClientTypes.ExperiencesSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListFaqsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListFaqsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListFaqsOutput()
        value.faqSummaryItems = try reader["FaqSummaryItems"].readListIfPresent(memberReadingClosure: KendraClientTypes.FaqSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListFeaturedResultsSetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListFeaturedResultsSetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListFeaturedResultsSetsOutput()
        value.featuredResultsSetSummaryItems = try reader["FeaturedResultsSetSummaryItems"].readListIfPresent(memberReadingClosure: KendraClientTypes.FeaturedResultsSetSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListGroupsOlderThanOrderingIdOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListGroupsOlderThanOrderingIdOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListGroupsOlderThanOrderingIdOutput()
        value.groupsSummaries = try reader["GroupsSummaries"].readListIfPresent(memberReadingClosure: KendraClientTypes.GroupSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListIndicesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListIndicesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListIndicesOutput()
        value.indexConfigurationSummaryItems = try reader["IndexConfigurationSummaryItems"].readListIfPresent(memberReadingClosure: KendraClientTypes.IndexConfigurationSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListQuerySuggestionsBlockListsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListQuerySuggestionsBlockListsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListQuerySuggestionsBlockListsOutput()
        value.blockListSummaryItems = try reader["BlockListSummaryItems"].readListIfPresent(memberReadingClosure: KendraClientTypes.QuerySuggestionsBlockListSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: KendraClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListThesauriOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListThesauriOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListThesauriOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.thesaurusSummaryItems = try reader["ThesaurusSummaryItems"].readListIfPresent(memberReadingClosure: KendraClientTypes.ThesaurusSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutPrincipalMappingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutPrincipalMappingOutput {
        return PutPrincipalMappingOutput()
    }
}

extension QueryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> QueryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = QueryOutput()
        value.facetResults = try reader["FacetResults"].readListIfPresent(memberReadingClosure: KendraClientTypes.FacetResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.featuredResultsItems = try reader["FeaturedResultsItems"].readListIfPresent(memberReadingClosure: KendraClientTypes.FeaturedResultsItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.queryId = try reader["QueryId"].readIfPresent()
        value.resultItems = try reader["ResultItems"].readListIfPresent(memberReadingClosure: KendraClientTypes.QueryResultItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.spellCorrectedQueries = try reader["SpellCorrectedQueries"].readListIfPresent(memberReadingClosure: KendraClientTypes.SpellCorrectedQuery.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.totalNumberOfResults = try reader["TotalNumberOfResults"].readIfPresent()
        value.warnings = try reader["Warnings"].readListIfPresent(memberReadingClosure: KendraClientTypes.Warning.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RetrieveOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RetrieveOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RetrieveOutput()
        value.queryId = try reader["QueryId"].readIfPresent()
        value.resultItems = try reader["ResultItems"].readListIfPresent(memberReadingClosure: KendraClientTypes.RetrieveResultItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension StartDataSourceSyncJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartDataSourceSyncJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartDataSourceSyncJobOutput()
        value.executionId = try reader["ExecutionId"].readIfPresent()
        return value
    }
}

extension StopDataSourceSyncJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopDataSourceSyncJobOutput {
        return StopDataSourceSyncJobOutput()
    }
}

extension SubmitFeedbackOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SubmitFeedbackOutput {
        return SubmitFeedbackOutput()
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateAccessControlConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAccessControlConfigurationOutput {
        return UpdateAccessControlConfigurationOutput()
    }
}

extension UpdateDataSourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateDataSourceOutput {
        return UpdateDataSourceOutput()
    }
}

extension UpdateExperienceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateExperienceOutput {
        return UpdateExperienceOutput()
    }
}

extension UpdateFeaturedResultsSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateFeaturedResultsSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateFeaturedResultsSetOutput()
        value.featuredResultsSet = try reader["FeaturedResultsSet"].readIfPresent(with: KendraClientTypes.FeaturedResultsSet.read(from:))
        return value
    }
}

extension UpdateIndexOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateIndexOutput {
        return UpdateIndexOutput()
    }
}

extension UpdateQuerySuggestionsBlockListOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateQuerySuggestionsBlockListOutput {
        return UpdateQuerySuggestionsBlockListOutput()
    }
}

extension UpdateQuerySuggestionsConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateQuerySuggestionsConfigOutput {
        return UpdateQuerySuggestionsConfigOutput()
    }
}

extension UpdateThesaurusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateThesaurusOutput {
        return UpdateThesaurusOutput()
    }
}

enum AssociateEntitiesToExperienceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceAlreadyExistException": return try ResourceAlreadyExistException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AssociatePersonasToEntitiesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceAlreadyExistException": return try ResourceAlreadyExistException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchDeleteDocumentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchDeleteFeaturedResultsSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchGetDocumentStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchPutDocumentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ClearQuerySuggestionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAccessControlConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDataSourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceAlreadyExistException": return try ResourceAlreadyExistException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateExperienceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateFaqOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateFeaturedResultsSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "FeaturedResultsConflictException": return try FeaturedResultsConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateIndexOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceAlreadyExistException": return try ResourceAlreadyExistException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateQuerySuggestionsBlockListOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateThesaurusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAccessControlConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDataSourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteExperienceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteFaqOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteIndexOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePrincipalMappingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteQuerySuggestionsBlockListOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteThesaurusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAccessControlConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDataSourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeExperienceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeFaqOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeFeaturedResultsSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeIndexOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribePrincipalMappingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeQuerySuggestionsBlockListOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeQuerySuggestionsConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeThesaurusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateEntitiesFromExperienceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociatePersonasFromEntitiesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetQuerySuggestionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSnapshotsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAccessControlConfigurationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDataSourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDataSourceSyncJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEntityPersonasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListExperienceEntitiesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListExperiencesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListFaqsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListFeaturedResultsSetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListGroupsOlderThanOrderingIdOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListIndicesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListQuerySuggestionsBlockListsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceUnavailableException": return try ResourceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListThesauriOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutPrincipalMappingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum QueryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RetrieveOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartDataSourceSyncJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopDataSourceSyncJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SubmitFeedbackOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceUnavailableException": return try ResourceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceUnavailableException": return try ResourceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceUnavailableException": return try ResourceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAccessControlConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateDataSourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateExperienceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateFeaturedResultsSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "FeaturedResultsConflictException": return try FeaturedResultsConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateIndexOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateQuerySuggestionsBlockListOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateQuerySuggestionsConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateThesaurusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceAlreadyExistException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceAlreadyExistException {
        let reader = baseError.errorBodyReader
        var value = ResourceAlreadyExistException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension FeaturedResultsConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> FeaturedResultsConflictException {
        let reader = baseError.errorBodyReader
        var value = FeaturedResultsConflictException()
        value.properties.conflictingItems = try reader["ConflictingItems"].readListIfPresent(memberReadingClosure: KendraClientTypes.ConflictingItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidRequestException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidRequestException {
        let reader = baseError.errorBodyReader
        var value = InvalidRequestException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceUnavailableException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceUnavailableException {
        let reader = baseError.errorBodyReader
        var value = ResourceUnavailableException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceInUseException {
        let reader = baseError.errorBodyReader
        var value = ResourceInUseException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KendraClientTypes.FailedEntity {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.FailedEntity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.FailedEntity()
        value.entityId = try reader["EntityId"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.BatchDeleteDocumentResponseFailedDocument {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.BatchDeleteDocumentResponseFailedDocument {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.BatchDeleteDocumentResponseFailedDocument()
        value.id = try reader["Id"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.BatchDeleteFeaturedResultsSetError {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.BatchDeleteFeaturedResultsSetError {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.BatchDeleteFeaturedResultsSetError()
        value.id = try reader["Id"].readIfPresent() ?? ""
        value.errorCode = try reader["ErrorCode"].readIfPresent() ?? .sdkUnknown("")
        value.errorMessage = try reader["ErrorMessage"].readIfPresent() ?? ""
        return value
    }
}

extension KendraClientTypes.BatchGetDocumentStatusResponseError {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.BatchGetDocumentStatusResponseError {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.BatchGetDocumentStatusResponseError()
        value.documentId = try reader["DocumentId"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.Status {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.Status {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.Status()
        value.documentId = try reader["DocumentId"].readIfPresent()
        value.documentStatus = try reader["DocumentStatus"].readIfPresent()
        value.failureCode = try reader["FailureCode"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.BatchPutDocumentResponseFailedDocument {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.BatchPutDocumentResponseFailedDocument {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.BatchPutDocumentResponseFailedDocument()
        value.id = try reader["Id"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.FeaturedResultsSet {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.FeaturedResultsSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.FeaturedResultsSet()
        value.featuredResultsSetId = try reader["FeaturedResultsSetId"].readIfPresent()
        value.featuredResultsSetName = try reader["FeaturedResultsSetName"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.queryTexts = try reader["QueryTexts"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.featuredDocuments = try reader["FeaturedDocuments"].readListIfPresent(memberReadingClosure: KendraClientTypes.FeaturedDocument.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastUpdatedTimestamp = try reader["LastUpdatedTimestamp"].readIfPresent()
        value.creationTimestamp = try reader["CreationTimestamp"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.FeaturedDocument {

    static func write(value: KendraClientTypes.FeaturedDocument?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.FeaturedDocument {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.FeaturedDocument()
        value.id = try reader["Id"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.Principal {

    static func write(value: KendraClientTypes.Principal?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Access"].write(value.access)
        try writer["DataSourceId"].write(value.dataSourceId)
        try writer["Name"].write(value.name)
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.Principal {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.Principal()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.access = try reader["Access"].readIfPresent() ?? .sdkUnknown("")
        value.dataSourceId = try reader["DataSourceId"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.HierarchicalPrincipal {

    static func write(value: KendraClientTypes.HierarchicalPrincipal?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PrincipalList"].writeList(value.principalList, memberWritingClosure: KendraClientTypes.Principal.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.HierarchicalPrincipal {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.HierarchicalPrincipal()
        value.principalList = try reader["PrincipalList"].readListIfPresent(memberReadingClosure: KendraClientTypes.Principal.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension KendraClientTypes.DataSourceConfiguration {

    static func write(value: KendraClientTypes.DataSourceConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlfrescoConfiguration"].write(value.alfrescoConfiguration, with: KendraClientTypes.AlfrescoConfiguration.write(value:to:))
        try writer["BoxConfiguration"].write(value.boxConfiguration, with: KendraClientTypes.BoxConfiguration.write(value:to:))
        try writer["ConfluenceConfiguration"].write(value.confluenceConfiguration, with: KendraClientTypes.ConfluenceConfiguration.write(value:to:))
        try writer["DatabaseConfiguration"].write(value.databaseConfiguration, with: KendraClientTypes.DatabaseConfiguration.write(value:to:))
        try writer["FsxConfiguration"].write(value.fsxConfiguration, with: KendraClientTypes.FsxConfiguration.write(value:to:))
        try writer["GitHubConfiguration"].write(value.gitHubConfiguration, with: KendraClientTypes.GitHubConfiguration.write(value:to:))
        try writer["GoogleDriveConfiguration"].write(value.googleDriveConfiguration, with: KendraClientTypes.GoogleDriveConfiguration.write(value:to:))
        try writer["JiraConfiguration"].write(value.jiraConfiguration, with: KendraClientTypes.JiraConfiguration.write(value:to:))
        try writer["OneDriveConfiguration"].write(value.oneDriveConfiguration, with: KendraClientTypes.OneDriveConfiguration.write(value:to:))
        try writer["QuipConfiguration"].write(value.quipConfiguration, with: KendraClientTypes.QuipConfiguration.write(value:to:))
        try writer["S3Configuration"].write(value.s3Configuration, with: KendraClientTypes.S3DataSourceConfiguration.write(value:to:))
        try writer["SalesforceConfiguration"].write(value.salesforceConfiguration, with: KendraClientTypes.SalesforceConfiguration.write(value:to:))
        try writer["ServiceNowConfiguration"].write(value.serviceNowConfiguration, with: KendraClientTypes.ServiceNowConfiguration.write(value:to:))
        try writer["SharePointConfiguration"].write(value.sharePointConfiguration, with: KendraClientTypes.SharePointConfiguration.write(value:to:))
        try writer["SlackConfiguration"].write(value.slackConfiguration, with: KendraClientTypes.SlackConfiguration.write(value:to:))
        try writer["TemplateConfiguration"].write(value.templateConfiguration, with: KendraClientTypes.TemplateConfiguration.write(value:to:))
        try writer["WebCrawlerConfiguration"].write(value.webCrawlerConfiguration, with: KendraClientTypes.WebCrawlerConfiguration.write(value:to:))
        try writer["WorkDocsConfiguration"].write(value.workDocsConfiguration, with: KendraClientTypes.WorkDocsConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.DataSourceConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.DataSourceConfiguration()
        value.s3Configuration = try reader["S3Configuration"].readIfPresent(with: KendraClientTypes.S3DataSourceConfiguration.read(from:))
        value.sharePointConfiguration = try reader["SharePointConfiguration"].readIfPresent(with: KendraClientTypes.SharePointConfiguration.read(from:))
        value.databaseConfiguration = try reader["DatabaseConfiguration"].readIfPresent(with: KendraClientTypes.DatabaseConfiguration.read(from:))
        value.salesforceConfiguration = try reader["SalesforceConfiguration"].readIfPresent(with: KendraClientTypes.SalesforceConfiguration.read(from:))
        value.oneDriveConfiguration = try reader["OneDriveConfiguration"].readIfPresent(with: KendraClientTypes.OneDriveConfiguration.read(from:))
        value.serviceNowConfiguration = try reader["ServiceNowConfiguration"].readIfPresent(with: KendraClientTypes.ServiceNowConfiguration.read(from:))
        value.confluenceConfiguration = try reader["ConfluenceConfiguration"].readIfPresent(with: KendraClientTypes.ConfluenceConfiguration.read(from:))
        value.googleDriveConfiguration = try reader["GoogleDriveConfiguration"].readIfPresent(with: KendraClientTypes.GoogleDriveConfiguration.read(from:))
        value.webCrawlerConfiguration = try reader["WebCrawlerConfiguration"].readIfPresent(with: KendraClientTypes.WebCrawlerConfiguration.read(from:))
        value.workDocsConfiguration = try reader["WorkDocsConfiguration"].readIfPresent(with: KendraClientTypes.WorkDocsConfiguration.read(from:))
        value.fsxConfiguration = try reader["FsxConfiguration"].readIfPresent(with: KendraClientTypes.FsxConfiguration.read(from:))
        value.slackConfiguration = try reader["SlackConfiguration"].readIfPresent(with: KendraClientTypes.SlackConfiguration.read(from:))
        value.boxConfiguration = try reader["BoxConfiguration"].readIfPresent(with: KendraClientTypes.BoxConfiguration.read(from:))
        value.quipConfiguration = try reader["QuipConfiguration"].readIfPresent(with: KendraClientTypes.QuipConfiguration.read(from:))
        value.jiraConfiguration = try reader["JiraConfiguration"].readIfPresent(with: KendraClientTypes.JiraConfiguration.read(from:))
        value.gitHubConfiguration = try reader["GitHubConfiguration"].readIfPresent(with: KendraClientTypes.GitHubConfiguration.read(from:))
        value.alfrescoConfiguration = try reader["AlfrescoConfiguration"].readIfPresent(with: KendraClientTypes.AlfrescoConfiguration.read(from:))
        value.templateConfiguration = try reader["TemplateConfiguration"].readIfPresent(with: KendraClientTypes.TemplateConfiguration.read(from:))
        return value
    }
}

extension KendraClientTypes.TemplateConfiguration {

    static func write(value: KendraClientTypes.TemplateConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Template"].write(value.template)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.TemplateConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.TemplateConfiguration()
        value.template = try reader["Template"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.AlfrescoConfiguration {

    static func write(value: KendraClientTypes.AlfrescoConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BlogFieldMappings"].writeList(value.blogFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CrawlComments"].write(value.crawlComments)
        try writer["CrawlSystemFolders"].write(value.crawlSystemFolders)
        try writer["DocumentLibraryFieldMappings"].writeList(value.documentLibraryFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EntityFilter"].writeList(value.entityFilter, memberWritingClosure: SmithyReadWrite.WritingClosureBox<KendraClientTypes.AlfrescoEntity>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ExclusionPatterns"].writeList(value.exclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InclusionPatterns"].writeList(value.inclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SecretArn"].write(value.secretArn)
        try writer["SiteId"].write(value.siteId)
        try writer["SiteUrl"].write(value.siteUrl)
        try writer["SslCertificateS3Path"].write(value.sslCertificateS3Path, with: KendraClientTypes.S3Path.write(value:to:))
        try writer["VpcConfiguration"].write(value.vpcConfiguration, with: KendraClientTypes.DataSourceVpcConfiguration.write(value:to:))
        try writer["WikiFieldMappings"].writeList(value.wikiFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.AlfrescoConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.AlfrescoConfiguration()
        value.siteUrl = try reader["SiteUrl"].readIfPresent() ?? ""
        value.siteId = try reader["SiteId"].readIfPresent() ?? ""
        value.secretArn = try reader["SecretArn"].readIfPresent() ?? ""
        value.sslCertificateS3Path = try reader["SslCertificateS3Path"].readIfPresent(with: KendraClientTypes.S3Path.read(from:))
        value.crawlSystemFolders = try reader["CrawlSystemFolders"].readIfPresent() ?? false
        value.crawlComments = try reader["CrawlComments"].readIfPresent() ?? false
        value.entityFilter = try reader["EntityFilter"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<KendraClientTypes.AlfrescoEntity>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.documentLibraryFieldMappings = try reader["DocumentLibraryFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.blogFieldMappings = try reader["BlogFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.wikiFieldMappings = try reader["WikiFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inclusionPatterns = try reader["InclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.exclusionPatterns = try reader["ExclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.vpcConfiguration = try reader["VpcConfiguration"].readIfPresent(with: KendraClientTypes.DataSourceVpcConfiguration.read(from:))
        return value
    }
}

extension KendraClientTypes.DataSourceVpcConfiguration {

    static func write(value: KendraClientTypes.DataSourceVpcConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SubnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.DataSourceVpcConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.DataSourceVpcConfiguration()
        value.subnetIds = try reader["SubnetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.securityGroupIds = try reader["SecurityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension KendraClientTypes.DataSourceToIndexFieldMapping {

    static func write(value: KendraClientTypes.DataSourceToIndexFieldMapping?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataSourceFieldName"].write(value.dataSourceFieldName)
        try writer["DateFieldFormat"].write(value.dateFieldFormat)
        try writer["IndexFieldName"].write(value.indexFieldName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.DataSourceToIndexFieldMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.DataSourceToIndexFieldMapping()
        value.dataSourceFieldName = try reader["DataSourceFieldName"].readIfPresent() ?? ""
        value.dateFieldFormat = try reader["DateFieldFormat"].readIfPresent()
        value.indexFieldName = try reader["IndexFieldName"].readIfPresent() ?? ""
        return value
    }
}

extension KendraClientTypes.S3Path {

    static func write(value: KendraClientTypes.S3Path?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Bucket"].write(value.bucket)
        try writer["Key"].write(value.key)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.S3Path {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.S3Path()
        value.bucket = try reader["Bucket"].readIfPresent() ?? ""
        value.key = try reader["Key"].readIfPresent() ?? ""
        return value
    }
}

extension KendraClientTypes.GitHubConfiguration {

    static func write(value: KendraClientTypes.GitHubConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExclusionFileNamePatterns"].writeList(value.exclusionFileNamePatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ExclusionFileTypePatterns"].writeList(value.exclusionFileTypePatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ExclusionFolderNamePatterns"].writeList(value.exclusionFolderNamePatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["GitHubCommitConfigurationFieldMappings"].writeList(value.gitHubCommitConfigurationFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["GitHubDocumentCrawlProperties"].write(value.gitHubDocumentCrawlProperties, with: KendraClientTypes.GitHubDocumentCrawlProperties.write(value:to:))
        try writer["GitHubIssueAttachmentConfigurationFieldMappings"].writeList(value.gitHubIssueAttachmentConfigurationFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["GitHubIssueCommentConfigurationFieldMappings"].writeList(value.gitHubIssueCommentConfigurationFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["GitHubIssueDocumentConfigurationFieldMappings"].writeList(value.gitHubIssueDocumentConfigurationFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["GitHubPullRequestCommentConfigurationFieldMappings"].writeList(value.gitHubPullRequestCommentConfigurationFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["GitHubPullRequestDocumentAttachmentConfigurationFieldMappings"].writeList(value.gitHubPullRequestDocumentAttachmentConfigurationFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["GitHubPullRequestDocumentConfigurationFieldMappings"].writeList(value.gitHubPullRequestDocumentConfigurationFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["GitHubRepositoryConfigurationFieldMappings"].writeList(value.gitHubRepositoryConfigurationFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InclusionFileNamePatterns"].writeList(value.inclusionFileNamePatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InclusionFileTypePatterns"].writeList(value.inclusionFileTypePatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InclusionFolderNamePatterns"].writeList(value.inclusionFolderNamePatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OnPremiseConfiguration"].write(value.onPremiseConfiguration, with: KendraClientTypes.OnPremiseConfiguration.write(value:to:))
        try writer["RepositoryFilter"].writeList(value.repositoryFilter, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SaaSConfiguration"].write(value.saaSConfiguration, with: KendraClientTypes.SaaSConfiguration.write(value:to:))
        try writer["SecretArn"].write(value.secretArn)
        try writer["Type"].write(value.type)
        try writer["UseChangeLog"].write(value.useChangeLog)
        try writer["VpcConfiguration"].write(value.vpcConfiguration, with: KendraClientTypes.DataSourceVpcConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.GitHubConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.GitHubConfiguration()
        value.saaSConfiguration = try reader["SaaSConfiguration"].readIfPresent(with: KendraClientTypes.SaaSConfiguration.read(from:))
        value.onPremiseConfiguration = try reader["OnPremiseConfiguration"].readIfPresent(with: KendraClientTypes.OnPremiseConfiguration.read(from:))
        value.type = try reader["Type"].readIfPresent()
        value.secretArn = try reader["SecretArn"].readIfPresent() ?? ""
        value.useChangeLog = try reader["UseChangeLog"].readIfPresent() ?? false
        value.gitHubDocumentCrawlProperties = try reader["GitHubDocumentCrawlProperties"].readIfPresent(with: KendraClientTypes.GitHubDocumentCrawlProperties.read(from:))
        value.repositoryFilter = try reader["RepositoryFilter"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.inclusionFolderNamePatterns = try reader["InclusionFolderNamePatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.inclusionFileTypePatterns = try reader["InclusionFileTypePatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.inclusionFileNamePatterns = try reader["InclusionFileNamePatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.exclusionFolderNamePatterns = try reader["ExclusionFolderNamePatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.exclusionFileTypePatterns = try reader["ExclusionFileTypePatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.exclusionFileNamePatterns = try reader["ExclusionFileNamePatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.vpcConfiguration = try reader["VpcConfiguration"].readIfPresent(with: KendraClientTypes.DataSourceVpcConfiguration.read(from:))
        value.gitHubRepositoryConfigurationFieldMappings = try reader["GitHubRepositoryConfigurationFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.gitHubCommitConfigurationFieldMappings = try reader["GitHubCommitConfigurationFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.gitHubIssueDocumentConfigurationFieldMappings = try reader["GitHubIssueDocumentConfigurationFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.gitHubIssueCommentConfigurationFieldMappings = try reader["GitHubIssueCommentConfigurationFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.gitHubIssueAttachmentConfigurationFieldMappings = try reader["GitHubIssueAttachmentConfigurationFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.gitHubPullRequestCommentConfigurationFieldMappings = try reader["GitHubPullRequestCommentConfigurationFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.gitHubPullRequestDocumentConfigurationFieldMappings = try reader["GitHubPullRequestDocumentConfigurationFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.gitHubPullRequestDocumentAttachmentConfigurationFieldMappings = try reader["GitHubPullRequestDocumentAttachmentConfigurationFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.GitHubDocumentCrawlProperties {

    static func write(value: KendraClientTypes.GitHubDocumentCrawlProperties?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CrawlIssue"].write(value.crawlIssue)
        try writer["CrawlIssueComment"].write(value.crawlIssueComment)
        try writer["CrawlIssueCommentAttachment"].write(value.crawlIssueCommentAttachment)
        try writer["CrawlPullRequest"].write(value.crawlPullRequest)
        try writer["CrawlPullRequestComment"].write(value.crawlPullRequestComment)
        try writer["CrawlPullRequestCommentAttachment"].write(value.crawlPullRequestCommentAttachment)
        try writer["CrawlRepositoryDocuments"].write(value.crawlRepositoryDocuments)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.GitHubDocumentCrawlProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.GitHubDocumentCrawlProperties()
        value.crawlRepositoryDocuments = try reader["CrawlRepositoryDocuments"].readIfPresent() ?? false
        value.crawlIssue = try reader["CrawlIssue"].readIfPresent() ?? false
        value.crawlIssueComment = try reader["CrawlIssueComment"].readIfPresent() ?? false
        value.crawlIssueCommentAttachment = try reader["CrawlIssueCommentAttachment"].readIfPresent() ?? false
        value.crawlPullRequest = try reader["CrawlPullRequest"].readIfPresent() ?? false
        value.crawlPullRequestComment = try reader["CrawlPullRequestComment"].readIfPresent() ?? false
        value.crawlPullRequestCommentAttachment = try reader["CrawlPullRequestCommentAttachment"].readIfPresent() ?? false
        return value
    }
}

extension KendraClientTypes.OnPremiseConfiguration {

    static func write(value: KendraClientTypes.OnPremiseConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HostUrl"].write(value.hostUrl)
        try writer["OrganizationName"].write(value.organizationName)
        try writer["SslCertificateS3Path"].write(value.sslCertificateS3Path, with: KendraClientTypes.S3Path.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.OnPremiseConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.OnPremiseConfiguration()
        value.hostUrl = try reader["HostUrl"].readIfPresent() ?? ""
        value.organizationName = try reader["OrganizationName"].readIfPresent() ?? ""
        value.sslCertificateS3Path = try reader["SslCertificateS3Path"].readIfPresent(with: KendraClientTypes.S3Path.read(from:))
        return value
    }
}

extension KendraClientTypes.SaaSConfiguration {

    static func write(value: KendraClientTypes.SaaSConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HostUrl"].write(value.hostUrl)
        try writer["OrganizationName"].write(value.organizationName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.SaaSConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.SaaSConfiguration()
        value.organizationName = try reader["OrganizationName"].readIfPresent() ?? ""
        value.hostUrl = try reader["HostUrl"].readIfPresent() ?? ""
        return value
    }
}

extension KendraClientTypes.JiraConfiguration {

    static func write(value: KendraClientTypes.JiraConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttachmentFieldMappings"].writeList(value.attachmentFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CommentFieldMappings"].writeList(value.commentFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ExclusionPatterns"].writeList(value.exclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InclusionPatterns"].writeList(value.inclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IssueFieldMappings"].writeList(value.issueFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IssueSubEntityFilter"].writeList(value.issueSubEntityFilter, memberWritingClosure: SmithyReadWrite.WritingClosureBox<KendraClientTypes.IssueSubEntity>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IssueType"].writeList(value.issueType, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["JiraAccountUrl"].write(value.jiraAccountUrl)
        try writer["Project"].writeList(value.project, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ProjectFieldMappings"].writeList(value.projectFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SecretArn"].write(value.secretArn)
        try writer["Status"].writeList(value.status, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UseChangeLog"].write(value.useChangeLog)
        try writer["VpcConfiguration"].write(value.vpcConfiguration, with: KendraClientTypes.DataSourceVpcConfiguration.write(value:to:))
        try writer["WorkLogFieldMappings"].writeList(value.workLogFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.JiraConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.JiraConfiguration()
        value.jiraAccountUrl = try reader["JiraAccountUrl"].readIfPresent() ?? ""
        value.secretArn = try reader["SecretArn"].readIfPresent() ?? ""
        value.useChangeLog = try reader["UseChangeLog"].readIfPresent() ?? false
        value.project = try reader["Project"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.issueType = try reader["IssueType"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["Status"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.issueSubEntityFilter = try reader["IssueSubEntityFilter"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<KendraClientTypes.IssueSubEntity>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.attachmentFieldMappings = try reader["AttachmentFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.commentFieldMappings = try reader["CommentFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.issueFieldMappings = try reader["IssueFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.projectFieldMappings = try reader["ProjectFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.workLogFieldMappings = try reader["WorkLogFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inclusionPatterns = try reader["InclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.exclusionPatterns = try reader["ExclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.vpcConfiguration = try reader["VpcConfiguration"].readIfPresent(with: KendraClientTypes.DataSourceVpcConfiguration.read(from:))
        return value
    }
}

extension KendraClientTypes.QuipConfiguration {

    static func write(value: KendraClientTypes.QuipConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttachmentFieldMappings"].writeList(value.attachmentFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CrawlAttachments"].write(value.crawlAttachments)
        try writer["CrawlChatRooms"].write(value.crawlChatRooms)
        try writer["CrawlFileComments"].write(value.crawlFileComments)
        try writer["Domain"].write(value.domain)
        try writer["ExclusionPatterns"].writeList(value.exclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FolderIds"].writeList(value.folderIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InclusionPatterns"].writeList(value.inclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MessageFieldMappings"].writeList(value.messageFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SecretArn"].write(value.secretArn)
        try writer["ThreadFieldMappings"].writeList(value.threadFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VpcConfiguration"].write(value.vpcConfiguration, with: KendraClientTypes.DataSourceVpcConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.QuipConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.QuipConfiguration()
        value.domain = try reader["Domain"].readIfPresent() ?? ""
        value.secretArn = try reader["SecretArn"].readIfPresent() ?? ""
        value.crawlFileComments = try reader["CrawlFileComments"].readIfPresent() ?? false
        value.crawlChatRooms = try reader["CrawlChatRooms"].readIfPresent() ?? false
        value.crawlAttachments = try reader["CrawlAttachments"].readIfPresent() ?? false
        value.folderIds = try reader["FolderIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.threadFieldMappings = try reader["ThreadFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.messageFieldMappings = try reader["MessageFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.attachmentFieldMappings = try reader["AttachmentFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inclusionPatterns = try reader["InclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.exclusionPatterns = try reader["ExclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.vpcConfiguration = try reader["VpcConfiguration"].readIfPresent(with: KendraClientTypes.DataSourceVpcConfiguration.read(from:))
        return value
    }
}

extension KendraClientTypes.BoxConfiguration {

    static func write(value: KendraClientTypes.BoxConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CommentFieldMappings"].writeList(value.commentFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CrawlComments"].write(value.crawlComments)
        try writer["CrawlTasks"].write(value.crawlTasks)
        try writer["CrawlWebLinks"].write(value.crawlWebLinks)
        try writer["EnterpriseId"].write(value.enterpriseId)
        try writer["ExclusionPatterns"].writeList(value.exclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FileFieldMappings"].writeList(value.fileFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InclusionPatterns"].writeList(value.inclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SecretArn"].write(value.secretArn)
        try writer["TaskFieldMappings"].writeList(value.taskFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UseChangeLog"].write(value.useChangeLog)
        try writer["VpcConfiguration"].write(value.vpcConfiguration, with: KendraClientTypes.DataSourceVpcConfiguration.write(value:to:))
        try writer["WebLinkFieldMappings"].writeList(value.webLinkFieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.BoxConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.BoxConfiguration()
        value.enterpriseId = try reader["EnterpriseId"].readIfPresent() ?? ""
        value.secretArn = try reader["SecretArn"].readIfPresent() ?? ""
        value.useChangeLog = try reader["UseChangeLog"].readIfPresent() ?? false
        value.crawlComments = try reader["CrawlComments"].readIfPresent() ?? false
        value.crawlTasks = try reader["CrawlTasks"].readIfPresent() ?? false
        value.crawlWebLinks = try reader["CrawlWebLinks"].readIfPresent() ?? false
        value.fileFieldMappings = try reader["FileFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.taskFieldMappings = try reader["TaskFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.commentFieldMappings = try reader["CommentFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.webLinkFieldMappings = try reader["WebLinkFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inclusionPatterns = try reader["InclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.exclusionPatterns = try reader["ExclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.vpcConfiguration = try reader["VpcConfiguration"].readIfPresent(with: KendraClientTypes.DataSourceVpcConfiguration.read(from:))
        return value
    }
}

extension KendraClientTypes.SlackConfiguration {

    static func write(value: KendraClientTypes.SlackConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CrawlBotMessage"].write(value.crawlBotMessage)
        try writer["ExcludeArchived"].write(value.excludeArchived)
        try writer["ExclusionPatterns"].writeList(value.exclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FieldMappings"].writeList(value.fieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InclusionPatterns"].writeList(value.inclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LookBackPeriod"].write(value.lookBackPeriod)
        try writer["PrivateChannelFilter"].writeList(value.privateChannelFilter, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PublicChannelFilter"].writeList(value.publicChannelFilter, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SecretArn"].write(value.secretArn)
        try writer["SinceCrawlDate"].write(value.sinceCrawlDate)
        try writer["SlackEntityList"].writeList(value.slackEntityList, memberWritingClosure: SmithyReadWrite.WritingClosureBox<KendraClientTypes.SlackEntity>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TeamId"].write(value.teamId)
        try writer["UseChangeLog"].write(value.useChangeLog)
        try writer["VpcConfiguration"].write(value.vpcConfiguration, with: KendraClientTypes.DataSourceVpcConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.SlackConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.SlackConfiguration()
        value.teamId = try reader["TeamId"].readIfPresent() ?? ""
        value.secretArn = try reader["SecretArn"].readIfPresent() ?? ""
        value.vpcConfiguration = try reader["VpcConfiguration"].readIfPresent(with: KendraClientTypes.DataSourceVpcConfiguration.read(from:))
        value.slackEntityList = try reader["SlackEntityList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<KendraClientTypes.SlackEntity>().read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.useChangeLog = try reader["UseChangeLog"].readIfPresent() ?? false
        value.crawlBotMessage = try reader["CrawlBotMessage"].readIfPresent() ?? false
        value.excludeArchived = try reader["ExcludeArchived"].readIfPresent() ?? false
        value.sinceCrawlDate = try reader["SinceCrawlDate"].readIfPresent() ?? ""
        value.lookBackPeriod = try reader["LookBackPeriod"].readIfPresent()
        value.privateChannelFilter = try reader["PrivateChannelFilter"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.publicChannelFilter = try reader["PublicChannelFilter"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.inclusionPatterns = try reader["InclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.exclusionPatterns = try reader["ExclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.fieldMappings = try reader["FieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.FsxConfiguration {

    static func write(value: KendraClientTypes.FsxConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExclusionPatterns"].writeList(value.exclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FieldMappings"].writeList(value.fieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FileSystemId"].write(value.fileSystemId)
        try writer["FileSystemType"].write(value.fileSystemType)
        try writer["InclusionPatterns"].writeList(value.inclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SecretArn"].write(value.secretArn)
        try writer["VpcConfiguration"].write(value.vpcConfiguration, with: KendraClientTypes.DataSourceVpcConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.FsxConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.FsxConfiguration()
        value.fileSystemId = try reader["FileSystemId"].readIfPresent() ?? ""
        value.fileSystemType = try reader["FileSystemType"].readIfPresent() ?? .sdkUnknown("")
        value.vpcConfiguration = try reader["VpcConfiguration"].readIfPresent(with: KendraClientTypes.DataSourceVpcConfiguration.read(from:))
        value.secretArn = try reader["SecretArn"].readIfPresent()
        value.inclusionPatterns = try reader["InclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.exclusionPatterns = try reader["ExclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.fieldMappings = try reader["FieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.WorkDocsConfiguration {

    static func write(value: KendraClientTypes.WorkDocsConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CrawlComments"].write(value.crawlComments)
        try writer["ExclusionPatterns"].writeList(value.exclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FieldMappings"].writeList(value.fieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InclusionPatterns"].writeList(value.inclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OrganizationId"].write(value.organizationId)
        try writer["UseChangeLog"].write(value.useChangeLog)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.WorkDocsConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.WorkDocsConfiguration()
        value.organizationId = try reader["OrganizationId"].readIfPresent() ?? ""
        value.crawlComments = try reader["CrawlComments"].readIfPresent() ?? false
        value.useChangeLog = try reader["UseChangeLog"].readIfPresent() ?? false
        value.inclusionPatterns = try reader["InclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.exclusionPatterns = try reader["ExclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.fieldMappings = try reader["FieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.WebCrawlerConfiguration {

    static func write(value: KendraClientTypes.WebCrawlerConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AuthenticationConfiguration"].write(value.authenticationConfiguration, with: KendraClientTypes.AuthenticationConfiguration.write(value:to:))
        try writer["CrawlDepth"].write(value.crawlDepth)
        try writer["MaxContentSizePerPageInMegaBytes"].write(value.maxContentSizePerPageInMegaBytes)
        try writer["MaxLinksPerPage"].write(value.maxLinksPerPage)
        try writer["MaxUrlsPerMinuteCrawlRate"].write(value.maxUrlsPerMinuteCrawlRate)
        try writer["ProxyConfiguration"].write(value.proxyConfiguration, with: KendraClientTypes.ProxyConfiguration.write(value:to:))
        try writer["UrlExclusionPatterns"].writeList(value.urlExclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UrlInclusionPatterns"].writeList(value.urlInclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Urls"].write(value.urls, with: KendraClientTypes.Urls.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.WebCrawlerConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.WebCrawlerConfiguration()
        value.urls = try reader["Urls"].readIfPresent(with: KendraClientTypes.Urls.read(from:))
        value.crawlDepth = try reader["CrawlDepth"].readIfPresent()
        value.maxLinksPerPage = try reader["MaxLinksPerPage"].readIfPresent()
        value.maxContentSizePerPageInMegaBytes = try reader["MaxContentSizePerPageInMegaBytes"].readIfPresent()
        value.maxUrlsPerMinuteCrawlRate = try reader["MaxUrlsPerMinuteCrawlRate"].readIfPresent()
        value.urlInclusionPatterns = try reader["UrlInclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.urlExclusionPatterns = try reader["UrlExclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.proxyConfiguration = try reader["ProxyConfiguration"].readIfPresent(with: KendraClientTypes.ProxyConfiguration.read(from:))
        value.authenticationConfiguration = try reader["AuthenticationConfiguration"].readIfPresent(with: KendraClientTypes.AuthenticationConfiguration.read(from:))
        return value
    }
}

extension KendraClientTypes.AuthenticationConfiguration {

    static func write(value: KendraClientTypes.AuthenticationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BasicAuthentication"].writeList(value.basicAuthentication, memberWritingClosure: KendraClientTypes.BasicAuthenticationConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.AuthenticationConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.AuthenticationConfiguration()
        value.basicAuthentication = try reader["BasicAuthentication"].readListIfPresent(memberReadingClosure: KendraClientTypes.BasicAuthenticationConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.BasicAuthenticationConfiguration {

    static func write(value: KendraClientTypes.BasicAuthenticationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Credentials"].write(value.credentials)
        try writer["Host"].write(value.host)
        try writer["Port"].write(value.port)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.BasicAuthenticationConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.BasicAuthenticationConfiguration()
        value.host = try reader["Host"].readIfPresent() ?? ""
        value.port = try reader["Port"].readIfPresent() ?? 0
        value.credentials = try reader["Credentials"].readIfPresent() ?? ""
        return value
    }
}

extension KendraClientTypes.ProxyConfiguration {

    static func write(value: KendraClientTypes.ProxyConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Credentials"].write(value.credentials)
        try writer["Host"].write(value.host)
        try writer["Port"].write(value.port)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ProxyConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ProxyConfiguration()
        value.host = try reader["Host"].readIfPresent() ?? ""
        value.port = try reader["Port"].readIfPresent() ?? 0
        value.credentials = try reader["Credentials"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.Urls {

    static func write(value: KendraClientTypes.Urls?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SeedUrlConfiguration"].write(value.seedUrlConfiguration, with: KendraClientTypes.SeedUrlConfiguration.write(value:to:))
        try writer["SiteMapsConfiguration"].write(value.siteMapsConfiguration, with: KendraClientTypes.SiteMapsConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.Urls {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.Urls()
        value.seedUrlConfiguration = try reader["SeedUrlConfiguration"].readIfPresent(with: KendraClientTypes.SeedUrlConfiguration.read(from:))
        value.siteMapsConfiguration = try reader["SiteMapsConfiguration"].readIfPresent(with: KendraClientTypes.SiteMapsConfiguration.read(from:))
        return value
    }
}

extension KendraClientTypes.SiteMapsConfiguration {

    static func write(value: KendraClientTypes.SiteMapsConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SiteMaps"].writeList(value.siteMaps, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.SiteMapsConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.SiteMapsConfiguration()
        value.siteMaps = try reader["SiteMaps"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension KendraClientTypes.SeedUrlConfiguration {

    static func write(value: KendraClientTypes.SeedUrlConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SeedUrls"].writeList(value.seedUrls, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["WebCrawlerMode"].write(value.webCrawlerMode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.SeedUrlConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.SeedUrlConfiguration()
        value.seedUrls = try reader["SeedUrls"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.webCrawlerMode = try reader["WebCrawlerMode"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.GoogleDriveConfiguration {

    static func write(value: KendraClientTypes.GoogleDriveConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExcludeMimeTypes"].writeList(value.excludeMimeTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ExcludeSharedDrives"].writeList(value.excludeSharedDrives, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ExcludeUserAccounts"].writeList(value.excludeUserAccounts, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ExclusionPatterns"].writeList(value.exclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FieldMappings"].writeList(value.fieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InclusionPatterns"].writeList(value.inclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SecretArn"].write(value.secretArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.GoogleDriveConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.GoogleDriveConfiguration()
        value.secretArn = try reader["SecretArn"].readIfPresent() ?? ""
        value.inclusionPatterns = try reader["InclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.exclusionPatterns = try reader["ExclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.fieldMappings = try reader["FieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.excludeMimeTypes = try reader["ExcludeMimeTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.excludeUserAccounts = try reader["ExcludeUserAccounts"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.excludeSharedDrives = try reader["ExcludeSharedDrives"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.ConfluenceConfiguration {

    static func write(value: KendraClientTypes.ConfluenceConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttachmentConfiguration"].write(value.attachmentConfiguration, with: KendraClientTypes.ConfluenceAttachmentConfiguration.write(value:to:))
        try writer["AuthenticationType"].write(value.authenticationType)
        try writer["BlogConfiguration"].write(value.blogConfiguration, with: KendraClientTypes.ConfluenceBlogConfiguration.write(value:to:))
        try writer["ExclusionPatterns"].writeList(value.exclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InclusionPatterns"].writeList(value.inclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PageConfiguration"].write(value.pageConfiguration, with: KendraClientTypes.ConfluencePageConfiguration.write(value:to:))
        try writer["ProxyConfiguration"].write(value.proxyConfiguration, with: KendraClientTypes.ProxyConfiguration.write(value:to:))
        try writer["SecretArn"].write(value.secretArn)
        try writer["ServerUrl"].write(value.serverUrl)
        try writer["SpaceConfiguration"].write(value.spaceConfiguration, with: KendraClientTypes.ConfluenceSpaceConfiguration.write(value:to:))
        try writer["Version"].write(value.version)
        try writer["VpcConfiguration"].write(value.vpcConfiguration, with: KendraClientTypes.DataSourceVpcConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ConfluenceConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ConfluenceConfiguration()
        value.serverUrl = try reader["ServerUrl"].readIfPresent() ?? ""
        value.secretArn = try reader["SecretArn"].readIfPresent() ?? ""
        value.version = try reader["Version"].readIfPresent() ?? .sdkUnknown("")
        value.spaceConfiguration = try reader["SpaceConfiguration"].readIfPresent(with: KendraClientTypes.ConfluenceSpaceConfiguration.read(from:))
        value.pageConfiguration = try reader["PageConfiguration"].readIfPresent(with: KendraClientTypes.ConfluencePageConfiguration.read(from:))
        value.blogConfiguration = try reader["BlogConfiguration"].readIfPresent(with: KendraClientTypes.ConfluenceBlogConfiguration.read(from:))
        value.attachmentConfiguration = try reader["AttachmentConfiguration"].readIfPresent(with: KendraClientTypes.ConfluenceAttachmentConfiguration.read(from:))
        value.vpcConfiguration = try reader["VpcConfiguration"].readIfPresent(with: KendraClientTypes.DataSourceVpcConfiguration.read(from:))
        value.inclusionPatterns = try reader["InclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.exclusionPatterns = try reader["ExclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.proxyConfiguration = try reader["ProxyConfiguration"].readIfPresent(with: KendraClientTypes.ProxyConfiguration.read(from:))
        value.authenticationType = try reader["AuthenticationType"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.ConfluenceAttachmentConfiguration {

    static func write(value: KendraClientTypes.ConfluenceAttachmentConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttachmentFieldMappings"].writeList(value.attachmentFieldMappings, memberWritingClosure: KendraClientTypes.ConfluenceAttachmentToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CrawlAttachments"].write(value.crawlAttachments)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ConfluenceAttachmentConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ConfluenceAttachmentConfiguration()
        value.crawlAttachments = try reader["CrawlAttachments"].readIfPresent() ?? false
        value.attachmentFieldMappings = try reader["AttachmentFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.ConfluenceAttachmentToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.ConfluenceAttachmentToIndexFieldMapping {

    static func write(value: KendraClientTypes.ConfluenceAttachmentToIndexFieldMapping?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataSourceFieldName"].write(value.dataSourceFieldName)
        try writer["DateFieldFormat"].write(value.dateFieldFormat)
        try writer["IndexFieldName"].write(value.indexFieldName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ConfluenceAttachmentToIndexFieldMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ConfluenceAttachmentToIndexFieldMapping()
        value.dataSourceFieldName = try reader["DataSourceFieldName"].readIfPresent()
        value.dateFieldFormat = try reader["DateFieldFormat"].readIfPresent()
        value.indexFieldName = try reader["IndexFieldName"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.ConfluenceBlogConfiguration {

    static func write(value: KendraClientTypes.ConfluenceBlogConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BlogFieldMappings"].writeList(value.blogFieldMappings, memberWritingClosure: KendraClientTypes.ConfluenceBlogToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ConfluenceBlogConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ConfluenceBlogConfiguration()
        value.blogFieldMappings = try reader["BlogFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.ConfluenceBlogToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.ConfluenceBlogToIndexFieldMapping {

    static func write(value: KendraClientTypes.ConfluenceBlogToIndexFieldMapping?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataSourceFieldName"].write(value.dataSourceFieldName)
        try writer["DateFieldFormat"].write(value.dateFieldFormat)
        try writer["IndexFieldName"].write(value.indexFieldName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ConfluenceBlogToIndexFieldMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ConfluenceBlogToIndexFieldMapping()
        value.dataSourceFieldName = try reader["DataSourceFieldName"].readIfPresent()
        value.dateFieldFormat = try reader["DateFieldFormat"].readIfPresent()
        value.indexFieldName = try reader["IndexFieldName"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.ConfluencePageConfiguration {

    static func write(value: KendraClientTypes.ConfluencePageConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PageFieldMappings"].writeList(value.pageFieldMappings, memberWritingClosure: KendraClientTypes.ConfluencePageToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ConfluencePageConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ConfluencePageConfiguration()
        value.pageFieldMappings = try reader["PageFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.ConfluencePageToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.ConfluencePageToIndexFieldMapping {

    static func write(value: KendraClientTypes.ConfluencePageToIndexFieldMapping?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataSourceFieldName"].write(value.dataSourceFieldName)
        try writer["DateFieldFormat"].write(value.dateFieldFormat)
        try writer["IndexFieldName"].write(value.indexFieldName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ConfluencePageToIndexFieldMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ConfluencePageToIndexFieldMapping()
        value.dataSourceFieldName = try reader["DataSourceFieldName"].readIfPresent()
        value.dateFieldFormat = try reader["DateFieldFormat"].readIfPresent()
        value.indexFieldName = try reader["IndexFieldName"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.ConfluenceSpaceConfiguration {

    static func write(value: KendraClientTypes.ConfluenceSpaceConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CrawlArchivedSpaces"].write(value.crawlArchivedSpaces)
        try writer["CrawlPersonalSpaces"].write(value.crawlPersonalSpaces)
        try writer["ExcludeSpaces"].writeList(value.excludeSpaces, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IncludeSpaces"].writeList(value.includeSpaces, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SpaceFieldMappings"].writeList(value.spaceFieldMappings, memberWritingClosure: KendraClientTypes.ConfluenceSpaceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ConfluenceSpaceConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ConfluenceSpaceConfiguration()
        value.crawlPersonalSpaces = try reader["CrawlPersonalSpaces"].readIfPresent() ?? false
        value.crawlArchivedSpaces = try reader["CrawlArchivedSpaces"].readIfPresent() ?? false
        value.includeSpaces = try reader["IncludeSpaces"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.excludeSpaces = try reader["ExcludeSpaces"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.spaceFieldMappings = try reader["SpaceFieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.ConfluenceSpaceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.ConfluenceSpaceToIndexFieldMapping {

    static func write(value: KendraClientTypes.ConfluenceSpaceToIndexFieldMapping?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataSourceFieldName"].write(value.dataSourceFieldName)
        try writer["DateFieldFormat"].write(value.dateFieldFormat)
        try writer["IndexFieldName"].write(value.indexFieldName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ConfluenceSpaceToIndexFieldMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ConfluenceSpaceToIndexFieldMapping()
        value.dataSourceFieldName = try reader["DataSourceFieldName"].readIfPresent()
        value.dateFieldFormat = try reader["DateFieldFormat"].readIfPresent()
        value.indexFieldName = try reader["IndexFieldName"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.ServiceNowConfiguration {

    static func write(value: KendraClientTypes.ServiceNowConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AuthenticationType"].write(value.authenticationType)
        try writer["HostUrl"].write(value.hostUrl)
        try writer["KnowledgeArticleConfiguration"].write(value.knowledgeArticleConfiguration, with: KendraClientTypes.ServiceNowKnowledgeArticleConfiguration.write(value:to:))
        try writer["SecretArn"].write(value.secretArn)
        try writer["ServiceCatalogConfiguration"].write(value.serviceCatalogConfiguration, with: KendraClientTypes.ServiceNowServiceCatalogConfiguration.write(value:to:))
        try writer["ServiceNowBuildVersion"].write(value.serviceNowBuildVersion)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ServiceNowConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ServiceNowConfiguration()
        value.hostUrl = try reader["HostUrl"].readIfPresent() ?? ""
        value.secretArn = try reader["SecretArn"].readIfPresent() ?? ""
        value.serviceNowBuildVersion = try reader["ServiceNowBuildVersion"].readIfPresent() ?? .sdkUnknown("")
        value.knowledgeArticleConfiguration = try reader["KnowledgeArticleConfiguration"].readIfPresent(with: KendraClientTypes.ServiceNowKnowledgeArticleConfiguration.read(from:))
        value.serviceCatalogConfiguration = try reader["ServiceCatalogConfiguration"].readIfPresent(with: KendraClientTypes.ServiceNowServiceCatalogConfiguration.read(from:))
        value.authenticationType = try reader["AuthenticationType"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.ServiceNowServiceCatalogConfiguration {

    static func write(value: KendraClientTypes.ServiceNowServiceCatalogConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CrawlAttachments"].write(value.crawlAttachments)
        try writer["DocumentDataFieldName"].write(value.documentDataFieldName)
        try writer["DocumentTitleFieldName"].write(value.documentTitleFieldName)
        try writer["ExcludeAttachmentFilePatterns"].writeList(value.excludeAttachmentFilePatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FieldMappings"].writeList(value.fieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IncludeAttachmentFilePatterns"].writeList(value.includeAttachmentFilePatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ServiceNowServiceCatalogConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ServiceNowServiceCatalogConfiguration()
        value.crawlAttachments = try reader["CrawlAttachments"].readIfPresent() ?? false
        value.includeAttachmentFilePatterns = try reader["IncludeAttachmentFilePatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.excludeAttachmentFilePatterns = try reader["ExcludeAttachmentFilePatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.documentDataFieldName = try reader["DocumentDataFieldName"].readIfPresent() ?? ""
        value.documentTitleFieldName = try reader["DocumentTitleFieldName"].readIfPresent()
        value.fieldMappings = try reader["FieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.ServiceNowKnowledgeArticleConfiguration {

    static func write(value: KendraClientTypes.ServiceNowKnowledgeArticleConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CrawlAttachments"].write(value.crawlAttachments)
        try writer["DocumentDataFieldName"].write(value.documentDataFieldName)
        try writer["DocumentTitleFieldName"].write(value.documentTitleFieldName)
        try writer["ExcludeAttachmentFilePatterns"].writeList(value.excludeAttachmentFilePatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FieldMappings"].writeList(value.fieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FilterQuery"].write(value.filterQuery)
        try writer["IncludeAttachmentFilePatterns"].writeList(value.includeAttachmentFilePatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ServiceNowKnowledgeArticleConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ServiceNowKnowledgeArticleConfiguration()
        value.crawlAttachments = try reader["CrawlAttachments"].readIfPresent() ?? false
        value.includeAttachmentFilePatterns = try reader["IncludeAttachmentFilePatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.excludeAttachmentFilePatterns = try reader["ExcludeAttachmentFilePatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.documentDataFieldName = try reader["DocumentDataFieldName"].readIfPresent() ?? ""
        value.documentTitleFieldName = try reader["DocumentTitleFieldName"].readIfPresent()
        value.fieldMappings = try reader["FieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.filterQuery = try reader["FilterQuery"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.OneDriveConfiguration {

    static func write(value: KendraClientTypes.OneDriveConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DisableLocalGroups"].write(value.disableLocalGroups)
        try writer["ExclusionPatterns"].writeList(value.exclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FieldMappings"].writeList(value.fieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InclusionPatterns"].writeList(value.inclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OneDriveUsers"].write(value.oneDriveUsers, with: KendraClientTypes.OneDriveUsers.write(value:to:))
        try writer["SecretArn"].write(value.secretArn)
        try writer["TenantDomain"].write(value.tenantDomain)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.OneDriveConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.OneDriveConfiguration()
        value.tenantDomain = try reader["TenantDomain"].readIfPresent() ?? ""
        value.secretArn = try reader["SecretArn"].readIfPresent() ?? ""
        value.oneDriveUsers = try reader["OneDriveUsers"].readIfPresent(with: KendraClientTypes.OneDriveUsers.read(from:))
        value.inclusionPatterns = try reader["InclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.exclusionPatterns = try reader["ExclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.fieldMappings = try reader["FieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.disableLocalGroups = try reader["DisableLocalGroups"].readIfPresent() ?? false
        return value
    }
}

extension KendraClientTypes.OneDriveUsers {

    static func write(value: KendraClientTypes.OneDriveUsers?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["OneDriveUserList"].writeList(value.oneDriveUserList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OneDriveUserS3Path"].write(value.oneDriveUserS3Path, with: KendraClientTypes.S3Path.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.OneDriveUsers {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.OneDriveUsers()
        value.oneDriveUserList = try reader["OneDriveUserList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.oneDriveUserS3Path = try reader["OneDriveUserS3Path"].readIfPresent(with: KendraClientTypes.S3Path.read(from:))
        return value
    }
}

extension KendraClientTypes.SalesforceConfiguration {

    static func write(value: KendraClientTypes.SalesforceConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChatterFeedConfiguration"].write(value.chatterFeedConfiguration, with: KendraClientTypes.SalesforceChatterFeedConfiguration.write(value:to:))
        try writer["CrawlAttachments"].write(value.crawlAttachments)
        try writer["ExcludeAttachmentFilePatterns"].writeList(value.excludeAttachmentFilePatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IncludeAttachmentFilePatterns"].writeList(value.includeAttachmentFilePatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KnowledgeArticleConfiguration"].write(value.knowledgeArticleConfiguration, with: KendraClientTypes.SalesforceKnowledgeArticleConfiguration.write(value:to:))
        try writer["SecretArn"].write(value.secretArn)
        try writer["ServerUrl"].write(value.serverUrl)
        try writer["StandardObjectAttachmentConfiguration"].write(value.standardObjectAttachmentConfiguration, with: KendraClientTypes.SalesforceStandardObjectAttachmentConfiguration.write(value:to:))
        try writer["StandardObjectConfigurations"].writeList(value.standardObjectConfigurations, memberWritingClosure: KendraClientTypes.SalesforceStandardObjectConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.SalesforceConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.SalesforceConfiguration()
        value.serverUrl = try reader["ServerUrl"].readIfPresent() ?? ""
        value.secretArn = try reader["SecretArn"].readIfPresent() ?? ""
        value.standardObjectConfigurations = try reader["StandardObjectConfigurations"].readListIfPresent(memberReadingClosure: KendraClientTypes.SalesforceStandardObjectConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.knowledgeArticleConfiguration = try reader["KnowledgeArticleConfiguration"].readIfPresent(with: KendraClientTypes.SalesforceKnowledgeArticleConfiguration.read(from:))
        value.chatterFeedConfiguration = try reader["ChatterFeedConfiguration"].readIfPresent(with: KendraClientTypes.SalesforceChatterFeedConfiguration.read(from:))
        value.crawlAttachments = try reader["CrawlAttachments"].readIfPresent() ?? false
        value.standardObjectAttachmentConfiguration = try reader["StandardObjectAttachmentConfiguration"].readIfPresent(with: KendraClientTypes.SalesforceStandardObjectAttachmentConfiguration.read(from:))
        value.includeAttachmentFilePatterns = try reader["IncludeAttachmentFilePatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.excludeAttachmentFilePatterns = try reader["ExcludeAttachmentFilePatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.SalesforceStandardObjectAttachmentConfiguration {

    static func write(value: KendraClientTypes.SalesforceStandardObjectAttachmentConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DocumentTitleFieldName"].write(value.documentTitleFieldName)
        try writer["FieldMappings"].writeList(value.fieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.SalesforceStandardObjectAttachmentConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.SalesforceStandardObjectAttachmentConfiguration()
        value.documentTitleFieldName = try reader["DocumentTitleFieldName"].readIfPresent()
        value.fieldMappings = try reader["FieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.SalesforceChatterFeedConfiguration {

    static func write(value: KendraClientTypes.SalesforceChatterFeedConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DocumentDataFieldName"].write(value.documentDataFieldName)
        try writer["DocumentTitleFieldName"].write(value.documentTitleFieldName)
        try writer["FieldMappings"].writeList(value.fieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IncludeFilterTypes"].writeList(value.includeFilterTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<KendraClientTypes.SalesforceChatterFeedIncludeFilterType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.SalesforceChatterFeedConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.SalesforceChatterFeedConfiguration()
        value.documentDataFieldName = try reader["DocumentDataFieldName"].readIfPresent() ?? ""
        value.documentTitleFieldName = try reader["DocumentTitleFieldName"].readIfPresent()
        value.fieldMappings = try reader["FieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.includeFilterTypes = try reader["IncludeFilterTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<KendraClientTypes.SalesforceChatterFeedIncludeFilterType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.SalesforceKnowledgeArticleConfiguration {

    static func write(value: KendraClientTypes.SalesforceKnowledgeArticleConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomKnowledgeArticleTypeConfigurations"].writeList(value.customKnowledgeArticleTypeConfigurations, memberWritingClosure: KendraClientTypes.SalesforceCustomKnowledgeArticleTypeConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IncludedStates"].writeList(value.includedStates, memberWritingClosure: SmithyReadWrite.WritingClosureBox<KendraClientTypes.SalesforceKnowledgeArticleState>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StandardKnowledgeArticleTypeConfiguration"].write(value.standardKnowledgeArticleTypeConfiguration, with: KendraClientTypes.SalesforceStandardKnowledgeArticleTypeConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.SalesforceKnowledgeArticleConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.SalesforceKnowledgeArticleConfiguration()
        value.includedStates = try reader["IncludedStates"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<KendraClientTypes.SalesforceKnowledgeArticleState>().read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.standardKnowledgeArticleTypeConfiguration = try reader["StandardKnowledgeArticleTypeConfiguration"].readIfPresent(with: KendraClientTypes.SalesforceStandardKnowledgeArticleTypeConfiguration.read(from:))
        value.customKnowledgeArticleTypeConfigurations = try reader["CustomKnowledgeArticleTypeConfigurations"].readListIfPresent(memberReadingClosure: KendraClientTypes.SalesforceCustomKnowledgeArticleTypeConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.SalesforceCustomKnowledgeArticleTypeConfiguration {

    static func write(value: KendraClientTypes.SalesforceCustomKnowledgeArticleTypeConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DocumentDataFieldName"].write(value.documentDataFieldName)
        try writer["DocumentTitleFieldName"].write(value.documentTitleFieldName)
        try writer["FieldMappings"].writeList(value.fieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.SalesforceCustomKnowledgeArticleTypeConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.SalesforceCustomKnowledgeArticleTypeConfiguration()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.documentDataFieldName = try reader["DocumentDataFieldName"].readIfPresent() ?? ""
        value.documentTitleFieldName = try reader["DocumentTitleFieldName"].readIfPresent()
        value.fieldMappings = try reader["FieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.SalesforceStandardKnowledgeArticleTypeConfiguration {

    static func write(value: KendraClientTypes.SalesforceStandardKnowledgeArticleTypeConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DocumentDataFieldName"].write(value.documentDataFieldName)
        try writer["DocumentTitleFieldName"].write(value.documentTitleFieldName)
        try writer["FieldMappings"].writeList(value.fieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.SalesforceStandardKnowledgeArticleTypeConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.SalesforceStandardKnowledgeArticleTypeConfiguration()
        value.documentDataFieldName = try reader["DocumentDataFieldName"].readIfPresent() ?? ""
        value.documentTitleFieldName = try reader["DocumentTitleFieldName"].readIfPresent()
        value.fieldMappings = try reader["FieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.SalesforceStandardObjectConfiguration {

    static func write(value: KendraClientTypes.SalesforceStandardObjectConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DocumentDataFieldName"].write(value.documentDataFieldName)
        try writer["DocumentTitleFieldName"].write(value.documentTitleFieldName)
        try writer["FieldMappings"].writeList(value.fieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.SalesforceStandardObjectConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.SalesforceStandardObjectConfiguration()
        value.name = try reader["Name"].readIfPresent() ?? .sdkUnknown("")
        value.documentDataFieldName = try reader["DocumentDataFieldName"].readIfPresent() ?? ""
        value.documentTitleFieldName = try reader["DocumentTitleFieldName"].readIfPresent()
        value.fieldMappings = try reader["FieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.DatabaseConfiguration {

    static func write(value: KendraClientTypes.DatabaseConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AclConfiguration"].write(value.aclConfiguration, with: KendraClientTypes.AclConfiguration.write(value:to:))
        try writer["ColumnConfiguration"].write(value.columnConfiguration, with: KendraClientTypes.ColumnConfiguration.write(value:to:))
        try writer["ConnectionConfiguration"].write(value.connectionConfiguration, with: KendraClientTypes.ConnectionConfiguration.write(value:to:))
        try writer["DatabaseEngineType"].write(value.databaseEngineType)
        try writer["SqlConfiguration"].write(value.sqlConfiguration, with: KendraClientTypes.SqlConfiguration.write(value:to:))
        try writer["VpcConfiguration"].write(value.vpcConfiguration, with: KendraClientTypes.DataSourceVpcConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.DatabaseConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.DatabaseConfiguration()
        value.databaseEngineType = try reader["DatabaseEngineType"].readIfPresent() ?? .sdkUnknown("")
        value.connectionConfiguration = try reader["ConnectionConfiguration"].readIfPresent(with: KendraClientTypes.ConnectionConfiguration.read(from:))
        value.vpcConfiguration = try reader["VpcConfiguration"].readIfPresent(with: KendraClientTypes.DataSourceVpcConfiguration.read(from:))
        value.columnConfiguration = try reader["ColumnConfiguration"].readIfPresent(with: KendraClientTypes.ColumnConfiguration.read(from:))
        value.aclConfiguration = try reader["AclConfiguration"].readIfPresent(with: KendraClientTypes.AclConfiguration.read(from:))
        value.sqlConfiguration = try reader["SqlConfiguration"].readIfPresent(with: KendraClientTypes.SqlConfiguration.read(from:))
        return value
    }
}

extension KendraClientTypes.SqlConfiguration {

    static func write(value: KendraClientTypes.SqlConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["QueryIdentifiersEnclosingOption"].write(value.queryIdentifiersEnclosingOption)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.SqlConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.SqlConfiguration()
        value.queryIdentifiersEnclosingOption = try reader["QueryIdentifiersEnclosingOption"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.AclConfiguration {

    static func write(value: KendraClientTypes.AclConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AllowedGroupsColumnName"].write(value.allowedGroupsColumnName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.AclConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.AclConfiguration()
        value.allowedGroupsColumnName = try reader["AllowedGroupsColumnName"].readIfPresent() ?? ""
        return value
    }
}

extension KendraClientTypes.ColumnConfiguration {

    static func write(value: KendraClientTypes.ColumnConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChangeDetectingColumns"].writeList(value.changeDetectingColumns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DocumentDataColumnName"].write(value.documentDataColumnName)
        try writer["DocumentIdColumnName"].write(value.documentIdColumnName)
        try writer["DocumentTitleColumnName"].write(value.documentTitleColumnName)
        try writer["FieldMappings"].writeList(value.fieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ColumnConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ColumnConfiguration()
        value.documentIdColumnName = try reader["DocumentIdColumnName"].readIfPresent() ?? ""
        value.documentDataColumnName = try reader["DocumentDataColumnName"].readIfPresent() ?? ""
        value.documentTitleColumnName = try reader["DocumentTitleColumnName"].readIfPresent()
        value.fieldMappings = try reader["FieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.changeDetectingColumns = try reader["ChangeDetectingColumns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension KendraClientTypes.ConnectionConfiguration {

    static func write(value: KendraClientTypes.ConnectionConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DatabaseHost"].write(value.databaseHost)
        try writer["DatabaseName"].write(value.databaseName)
        try writer["DatabasePort"].write(value.databasePort)
        try writer["SecretArn"].write(value.secretArn)
        try writer["TableName"].write(value.tableName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ConnectionConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ConnectionConfiguration()
        value.databaseHost = try reader["DatabaseHost"].readIfPresent() ?? ""
        value.databasePort = try reader["DatabasePort"].readIfPresent() ?? 0
        value.databaseName = try reader["DatabaseName"].readIfPresent() ?? ""
        value.tableName = try reader["TableName"].readIfPresent() ?? ""
        value.secretArn = try reader["SecretArn"].readIfPresent() ?? ""
        return value
    }
}

extension KendraClientTypes.SharePointConfiguration {

    static func write(value: KendraClientTypes.SharePointConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AuthenticationType"].write(value.authenticationType)
        try writer["CrawlAttachments"].write(value.crawlAttachments)
        try writer["DisableLocalGroups"].write(value.disableLocalGroups)
        try writer["DocumentTitleFieldName"].write(value.documentTitleFieldName)
        try writer["ExclusionPatterns"].writeList(value.exclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FieldMappings"].writeList(value.fieldMappings, memberWritingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InclusionPatterns"].writeList(value.inclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ProxyConfiguration"].write(value.proxyConfiguration, with: KendraClientTypes.ProxyConfiguration.write(value:to:))
        try writer["SecretArn"].write(value.secretArn)
        try writer["SharePointVersion"].write(value.sharePointVersion)
        try writer["SslCertificateS3Path"].write(value.sslCertificateS3Path, with: KendraClientTypes.S3Path.write(value:to:))
        try writer["Urls"].writeList(value.urls, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UseChangeLog"].write(value.useChangeLog)
        try writer["VpcConfiguration"].write(value.vpcConfiguration, with: KendraClientTypes.DataSourceVpcConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.SharePointConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.SharePointConfiguration()
        value.sharePointVersion = try reader["SharePointVersion"].readIfPresent() ?? .sdkUnknown("")
        value.urls = try reader["Urls"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.secretArn = try reader["SecretArn"].readIfPresent() ?? ""
        value.crawlAttachments = try reader["CrawlAttachments"].readIfPresent() ?? false
        value.useChangeLog = try reader["UseChangeLog"].readIfPresent() ?? false
        value.inclusionPatterns = try reader["InclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.exclusionPatterns = try reader["ExclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.vpcConfiguration = try reader["VpcConfiguration"].readIfPresent(with: KendraClientTypes.DataSourceVpcConfiguration.read(from:))
        value.fieldMappings = try reader["FieldMappings"].readListIfPresent(memberReadingClosure: KendraClientTypes.DataSourceToIndexFieldMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.documentTitleFieldName = try reader["DocumentTitleFieldName"].readIfPresent()
        value.disableLocalGroups = try reader["DisableLocalGroups"].readIfPresent() ?? false
        value.sslCertificateS3Path = try reader["SslCertificateS3Path"].readIfPresent(with: KendraClientTypes.S3Path.read(from:))
        value.authenticationType = try reader["AuthenticationType"].readIfPresent()
        value.proxyConfiguration = try reader["ProxyConfiguration"].readIfPresent(with: KendraClientTypes.ProxyConfiguration.read(from:))
        return value
    }
}

extension KendraClientTypes.S3DataSourceConfiguration {

    static func write(value: KendraClientTypes.S3DataSourceConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessControlListConfiguration"].write(value.accessControlListConfiguration, with: KendraClientTypes.AccessControlListConfiguration.write(value:to:))
        try writer["BucketName"].write(value.bucketName)
        try writer["DocumentsMetadataConfiguration"].write(value.documentsMetadataConfiguration, with: KendraClientTypes.DocumentsMetadataConfiguration.write(value:to:))
        try writer["ExclusionPatterns"].writeList(value.exclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InclusionPatterns"].writeList(value.inclusionPatterns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InclusionPrefixes"].writeList(value.inclusionPrefixes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.S3DataSourceConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.S3DataSourceConfiguration()
        value.bucketName = try reader["BucketName"].readIfPresent() ?? ""
        value.inclusionPrefixes = try reader["InclusionPrefixes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.inclusionPatterns = try reader["InclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.exclusionPatterns = try reader["ExclusionPatterns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.documentsMetadataConfiguration = try reader["DocumentsMetadataConfiguration"].readIfPresent(with: KendraClientTypes.DocumentsMetadataConfiguration.read(from:))
        value.accessControlListConfiguration = try reader["AccessControlListConfiguration"].readIfPresent(with: KendraClientTypes.AccessControlListConfiguration.read(from:))
        return value
    }
}

extension KendraClientTypes.AccessControlListConfiguration {

    static func write(value: KendraClientTypes.AccessControlListConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyPath"].write(value.keyPath)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.AccessControlListConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.AccessControlListConfiguration()
        value.keyPath = try reader["KeyPath"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.DocumentsMetadataConfiguration {

    static func write(value: KendraClientTypes.DocumentsMetadataConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Prefix"].write(value.s3Prefix)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.DocumentsMetadataConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.DocumentsMetadataConfiguration()
        value.s3Prefix = try reader["S3Prefix"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.CustomDocumentEnrichmentConfiguration {

    static func write(value: KendraClientTypes.CustomDocumentEnrichmentConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InlineConfigurations"].writeList(value.inlineConfigurations, memberWritingClosure: KendraClientTypes.InlineCustomDocumentEnrichmentConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PostExtractionHookConfiguration"].write(value.postExtractionHookConfiguration, with: KendraClientTypes.HookConfiguration.write(value:to:))
        try writer["PreExtractionHookConfiguration"].write(value.preExtractionHookConfiguration, with: KendraClientTypes.HookConfiguration.write(value:to:))
        try writer["RoleArn"].write(value.roleArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.CustomDocumentEnrichmentConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.CustomDocumentEnrichmentConfiguration()
        value.inlineConfigurations = try reader["InlineConfigurations"].readListIfPresent(memberReadingClosure: KendraClientTypes.InlineCustomDocumentEnrichmentConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.preExtractionHookConfiguration = try reader["PreExtractionHookConfiguration"].readIfPresent(with: KendraClientTypes.HookConfiguration.read(from:))
        value.postExtractionHookConfiguration = try reader["PostExtractionHookConfiguration"].readIfPresent(with: KendraClientTypes.HookConfiguration.read(from:))
        value.roleArn = try reader["RoleArn"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.HookConfiguration {

    static func write(value: KendraClientTypes.HookConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InvocationCondition"].write(value.invocationCondition, with: KendraClientTypes.DocumentAttributeCondition.write(value:to:))
        try writer["LambdaArn"].write(value.lambdaArn)
        try writer["S3Bucket"].write(value.s3Bucket)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.HookConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.HookConfiguration()
        value.invocationCondition = try reader["InvocationCondition"].readIfPresent(with: KendraClientTypes.DocumentAttributeCondition.read(from:))
        value.lambdaArn = try reader["LambdaArn"].readIfPresent() ?? ""
        value.s3Bucket = try reader["S3Bucket"].readIfPresent() ?? ""
        return value
    }
}

extension KendraClientTypes.DocumentAttributeCondition {

    static func write(value: KendraClientTypes.DocumentAttributeCondition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConditionDocumentAttributeKey"].write(value.conditionDocumentAttributeKey)
        try writer["ConditionOnValue"].write(value.conditionOnValue, with: KendraClientTypes.DocumentAttributeValue.write(value:to:))
        try writer["Operator"].write(value.`operator`)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.DocumentAttributeCondition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.DocumentAttributeCondition()
        value.conditionDocumentAttributeKey = try reader["ConditionDocumentAttributeKey"].readIfPresent() ?? ""
        value.`operator` = try reader["Operator"].readIfPresent() ?? .sdkUnknown("")
        value.conditionOnValue = try reader["ConditionOnValue"].readIfPresent(with: KendraClientTypes.DocumentAttributeValue.read(from:))
        return value
    }
}

extension KendraClientTypes.DocumentAttributeValue {

    static func write(value: KendraClientTypes.DocumentAttributeValue?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DateValue"].writeTimestamp(value.dateValue, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LongValue"].write(value.longValue)
        try writer["StringListValue"].writeList(value.stringListValue, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StringValue"].write(value.stringValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.DocumentAttributeValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.DocumentAttributeValue()
        value.stringValue = try reader["StringValue"].readIfPresent()
        value.stringListValue = try reader["StringListValue"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.longValue = try reader["LongValue"].readIfPresent()
        value.dateValue = try reader["DateValue"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension KendraClientTypes.InlineCustomDocumentEnrichmentConfiguration {

    static func write(value: KendraClientTypes.InlineCustomDocumentEnrichmentConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Condition"].write(value.condition, with: KendraClientTypes.DocumentAttributeCondition.write(value:to:))
        try writer["DocumentContentDeletion"].write(value.documentContentDeletion)
        try writer["Target"].write(value.target, with: KendraClientTypes.DocumentAttributeTarget.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.InlineCustomDocumentEnrichmentConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.InlineCustomDocumentEnrichmentConfiguration()
        value.condition = try reader["Condition"].readIfPresent(with: KendraClientTypes.DocumentAttributeCondition.read(from:))
        value.target = try reader["Target"].readIfPresent(with: KendraClientTypes.DocumentAttributeTarget.read(from:))
        value.documentContentDeletion = try reader["DocumentContentDeletion"].readIfPresent() ?? false
        return value
    }
}

extension KendraClientTypes.DocumentAttributeTarget {

    static func write(value: KendraClientTypes.DocumentAttributeTarget?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TargetDocumentAttributeKey"].write(value.targetDocumentAttributeKey)
        try writer["TargetDocumentAttributeValue"].write(value.targetDocumentAttributeValue, with: KendraClientTypes.DocumentAttributeValue.write(value:to:))
        try writer["TargetDocumentAttributeValueDeletion"].write(value.targetDocumentAttributeValueDeletion)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.DocumentAttributeTarget {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.DocumentAttributeTarget()
        value.targetDocumentAttributeKey = try reader["TargetDocumentAttributeKey"].readIfPresent()
        value.targetDocumentAttributeValueDeletion = try reader["TargetDocumentAttributeValueDeletion"].readIfPresent() ?? false
        value.targetDocumentAttributeValue = try reader["TargetDocumentAttributeValue"].readIfPresent(with: KendraClientTypes.DocumentAttributeValue.read(from:))
        return value
    }
}

extension KendraClientTypes.ExperienceEndpoint {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ExperienceEndpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ExperienceEndpoint()
        value.endpointType = try reader["EndpointType"].readIfPresent()
        value.endpoint = try reader["Endpoint"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.ExperienceConfiguration {

    static func write(value: KendraClientTypes.ExperienceConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContentSourceConfiguration"].write(value.contentSourceConfiguration, with: KendraClientTypes.ContentSourceConfiguration.write(value:to:))
        try writer["UserIdentityConfiguration"].write(value.userIdentityConfiguration, with: KendraClientTypes.UserIdentityConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ExperienceConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ExperienceConfiguration()
        value.contentSourceConfiguration = try reader["ContentSourceConfiguration"].readIfPresent(with: KendraClientTypes.ContentSourceConfiguration.read(from:))
        value.userIdentityConfiguration = try reader["UserIdentityConfiguration"].readIfPresent(with: KendraClientTypes.UserIdentityConfiguration.read(from:))
        return value
    }
}

extension KendraClientTypes.UserIdentityConfiguration {

    static func write(value: KendraClientTypes.UserIdentityConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IdentityAttributeName"].write(value.identityAttributeName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.UserIdentityConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.UserIdentityConfiguration()
        value.identityAttributeName = try reader["IdentityAttributeName"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.ContentSourceConfiguration {

    static func write(value: KendraClientTypes.ContentSourceConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataSourceIds"].writeList(value.dataSourceIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DirectPutContent"].write(value.directPutContent)
        try writer["FaqIds"].writeList(value.faqIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ContentSourceConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ContentSourceConfiguration()
        value.dataSourceIds = try reader["DataSourceIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.faqIds = try reader["FaqIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.directPutContent = try reader["DirectPutContent"].readIfPresent() ?? false
        return value
    }
}

extension KendraClientTypes.FeaturedDocumentWithMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.FeaturedDocumentWithMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.FeaturedDocumentWithMetadata()
        value.id = try reader["Id"].readIfPresent()
        value.title = try reader["Title"].readIfPresent()
        value.uri = try reader["URI"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.FeaturedDocumentMissing {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.FeaturedDocumentMissing {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.FeaturedDocumentMissing()
        value.id = try reader["Id"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.ServerSideEncryptionConfiguration {

    static func write(value: KendraClientTypes.ServerSideEncryptionConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ServerSideEncryptionConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ServerSideEncryptionConfiguration()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.DocumentMetadataConfiguration {

    static func write(value: KendraClientTypes.DocumentMetadataConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Relevance"].write(value.relevance, with: KendraClientTypes.Relevance.write(value:to:))
        try writer["Search"].write(value.search, with: KendraClientTypes.Search.write(value:to:))
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.DocumentMetadataConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.DocumentMetadataConfiguration()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.relevance = try reader["Relevance"].readIfPresent(with: KendraClientTypes.Relevance.read(from:))
        value.search = try reader["Search"].readIfPresent(with: KendraClientTypes.Search.read(from:))
        return value
    }
}

extension KendraClientTypes.Search {

    static func write(value: KendraClientTypes.Search?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Displayable"].write(value.displayable)
        try writer["Facetable"].write(value.facetable)
        try writer["Searchable"].write(value.searchable)
        try writer["Sortable"].write(value.sortable)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.Search {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.Search()
        value.facetable = try reader["Facetable"].readIfPresent() ?? false
        value.searchable = try reader["Searchable"].readIfPresent() ?? false
        value.displayable = try reader["Displayable"].readIfPresent() ?? false
        value.sortable = try reader["Sortable"].readIfPresent() ?? false
        return value
    }
}

extension KendraClientTypes.Relevance {

    static func write(value: KendraClientTypes.Relevance?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Duration"].write(value.duration)
        try writer["Freshness"].write(value.freshness)
        try writer["Importance"].write(value.importance)
        try writer["RankOrder"].write(value.rankOrder)
        try writer["ValueImportanceMap"].writeMap(value.valueImportanceMap, valueWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.Relevance {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.Relevance()
        value.freshness = try reader["Freshness"].readIfPresent()
        value.importance = try reader["Importance"].readIfPresent()
        value.duration = try reader["Duration"].readIfPresent()
        value.rankOrder = try reader["RankOrder"].readIfPresent()
        value.valueImportanceMap = try reader["ValueImportanceMap"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.IndexStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.IndexStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.IndexStatistics()
        value.faqStatistics = try reader["FaqStatistics"].readIfPresent(with: KendraClientTypes.FaqStatistics.read(from:))
        value.textDocumentStatistics = try reader["TextDocumentStatistics"].readIfPresent(with: KendraClientTypes.TextDocumentStatistics.read(from:))
        return value
    }
}

extension KendraClientTypes.TextDocumentStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.TextDocumentStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.TextDocumentStatistics()
        value.indexedTextDocumentsCount = try reader["IndexedTextDocumentsCount"].readIfPresent() ?? 0
        value.indexedTextBytes = try reader["IndexedTextBytes"].readIfPresent() ?? 0
        return value
    }
}

extension KendraClientTypes.FaqStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.FaqStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.FaqStatistics()
        value.indexedQuestionAnswersCount = try reader["IndexedQuestionAnswersCount"].readIfPresent() ?? 0
        return value
    }
}

extension KendraClientTypes.CapacityUnitsConfiguration {

    static func write(value: KendraClientTypes.CapacityUnitsConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["QueryCapacityUnits"].write(value.queryCapacityUnits)
        try writer["StorageCapacityUnits"].write(value.storageCapacityUnits)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.CapacityUnitsConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.CapacityUnitsConfiguration()
        value.storageCapacityUnits = try reader["StorageCapacityUnits"].readIfPresent() ?? 0
        value.queryCapacityUnits = try reader["QueryCapacityUnits"].readIfPresent() ?? 0
        return value
    }
}

extension KendraClientTypes.UserTokenConfiguration {

    static func write(value: KendraClientTypes.UserTokenConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JsonTokenTypeConfiguration"].write(value.jsonTokenTypeConfiguration, with: KendraClientTypes.JsonTokenTypeConfiguration.write(value:to:))
        try writer["JwtTokenTypeConfiguration"].write(value.jwtTokenTypeConfiguration, with: KendraClientTypes.JwtTokenTypeConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.UserTokenConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.UserTokenConfiguration()
        value.jwtTokenTypeConfiguration = try reader["JwtTokenTypeConfiguration"].readIfPresent(with: KendraClientTypes.JwtTokenTypeConfiguration.read(from:))
        value.jsonTokenTypeConfiguration = try reader["JsonTokenTypeConfiguration"].readIfPresent(with: KendraClientTypes.JsonTokenTypeConfiguration.read(from:))
        return value
    }
}

extension KendraClientTypes.JsonTokenTypeConfiguration {

    static func write(value: KendraClientTypes.JsonTokenTypeConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GroupAttributeField"].write(value.groupAttributeField)
        try writer["UserNameAttributeField"].write(value.userNameAttributeField)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.JsonTokenTypeConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.JsonTokenTypeConfiguration()
        value.userNameAttributeField = try reader["UserNameAttributeField"].readIfPresent() ?? ""
        value.groupAttributeField = try reader["GroupAttributeField"].readIfPresent() ?? ""
        return value
    }
}

extension KendraClientTypes.JwtTokenTypeConfiguration {

    static func write(value: KendraClientTypes.JwtTokenTypeConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClaimRegex"].write(value.claimRegex)
        try writer["GroupAttributeField"].write(value.groupAttributeField)
        try writer["Issuer"].write(value.issuer)
        try writer["KeyLocation"].write(value.keyLocation)
        try writer["SecretManagerArn"].write(value.secretManagerArn)
        try writer["URL"].write(value.url)
        try writer["UserNameAttributeField"].write(value.userNameAttributeField)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.JwtTokenTypeConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.JwtTokenTypeConfiguration()
        value.keyLocation = try reader["KeyLocation"].readIfPresent() ?? .sdkUnknown("")
        value.url = try reader["URL"].readIfPresent()
        value.secretManagerArn = try reader["SecretManagerArn"].readIfPresent()
        value.userNameAttributeField = try reader["UserNameAttributeField"].readIfPresent()
        value.groupAttributeField = try reader["GroupAttributeField"].readIfPresent()
        value.issuer = try reader["Issuer"].readIfPresent()
        value.claimRegex = try reader["ClaimRegex"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.UserGroupResolutionConfiguration {

    static func write(value: KendraClientTypes.UserGroupResolutionConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["UserGroupResolutionMode"].write(value.userGroupResolutionMode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.UserGroupResolutionConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.UserGroupResolutionConfiguration()
        value.userGroupResolutionMode = try reader["UserGroupResolutionMode"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension KendraClientTypes.GroupOrderingIdSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.GroupOrderingIdSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.GroupOrderingIdSummary()
        value.status = try reader["Status"].readIfPresent()
        value.lastUpdatedAt = try reader["LastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.receivedAt = try reader["ReceivedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.orderingId = try reader["OrderingId"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.AttributeSuggestionsDescribeConfig {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.AttributeSuggestionsDescribeConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.AttributeSuggestionsDescribeConfig()
        value.suggestableConfigList = try reader["SuggestableConfigList"].readListIfPresent(memberReadingClosure: KendraClientTypes.SuggestableConfig.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.attributeSuggestionsMode = try reader["AttributeSuggestionsMode"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.SuggestableConfig {

    static func write(value: KendraClientTypes.SuggestableConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeName"].write(value.attributeName)
        try writer["Suggestable"].write(value.suggestable)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.SuggestableConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.SuggestableConfig()
        value.attributeName = try reader["AttributeName"].readIfPresent()
        value.suggestable = try reader["Suggestable"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.Suggestion {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.Suggestion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.Suggestion()
        value.id = try reader["Id"].readIfPresent()
        value.value = try reader["Value"].readIfPresent(with: KendraClientTypes.SuggestionValue.read(from:))
        value.sourceDocuments = try reader["SourceDocuments"].readListIfPresent(memberReadingClosure: KendraClientTypes.SourceDocument.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.SourceDocument {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.SourceDocument {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.SourceDocument()
        value.documentId = try reader["DocumentId"].readIfPresent()
        value.suggestionAttributes = try reader["SuggestionAttributes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.additionalAttributes = try reader["AdditionalAttributes"].readListIfPresent(memberReadingClosure: KendraClientTypes.DocumentAttribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.DocumentAttribute {

    static func write(value: KendraClientTypes.DocumentAttribute?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value, with: KendraClientTypes.DocumentAttributeValue.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.DocumentAttribute {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.DocumentAttribute()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent(with: KendraClientTypes.DocumentAttributeValue.read(from:))
        return value
    }
}

extension KendraClientTypes.SuggestionValue {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.SuggestionValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.SuggestionValue()
        value.text = try reader["Text"].readIfPresent(with: KendraClientTypes.SuggestionTextWithHighlights.read(from:))
        return value
    }
}

extension KendraClientTypes.SuggestionTextWithHighlights {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.SuggestionTextWithHighlights {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.SuggestionTextWithHighlights()
        value.text = try reader["Text"].readIfPresent()
        value.highlights = try reader["Highlights"].readListIfPresent(memberReadingClosure: KendraClientTypes.SuggestionHighlight.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.SuggestionHighlight {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.SuggestionHighlight {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.SuggestionHighlight()
        value.beginOffset = try reader["BeginOffset"].readIfPresent()
        value.endOffset = try reader["EndOffset"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.TimeRange {

    static func write(value: KendraClientTypes.TimeRange?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.TimeRange {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.TimeRange()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension KendraClientTypes.AccessControlConfigurationSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.AccessControlConfigurationSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.AccessControlConfigurationSummary()
        value.id = try reader["Id"].readIfPresent() ?? ""
        return value
    }
}

extension KendraClientTypes.DataSourceSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.DataSourceSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.DataSourceSummary()
        value.name = try reader["Name"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["Status"].readIfPresent()
        value.languageCode = try reader["LanguageCode"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.DataSourceSyncJob {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.DataSourceSyncJob {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.DataSourceSyncJob()
        value.executionId = try reader["ExecutionId"].readIfPresent()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["Status"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.dataSourceErrorCode = try reader["DataSourceErrorCode"].readIfPresent()
        value.metrics = try reader["Metrics"].readIfPresent(with: KendraClientTypes.DataSourceSyncJobMetrics.read(from:))
        return value
    }
}

extension KendraClientTypes.DataSourceSyncJobMetrics {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.DataSourceSyncJobMetrics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.DataSourceSyncJobMetrics()
        value.documentsAdded = try reader["DocumentsAdded"].readIfPresent()
        value.documentsModified = try reader["DocumentsModified"].readIfPresent()
        value.documentsDeleted = try reader["DocumentsDeleted"].readIfPresent()
        value.documentsFailed = try reader["DocumentsFailed"].readIfPresent()
        value.documentsScanned = try reader["DocumentsScanned"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.PersonasSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.PersonasSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.PersonasSummary()
        value.entityId = try reader["EntityId"].readIfPresent()
        value.persona = try reader["Persona"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension KendraClientTypes.ExperienceEntitiesSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ExperienceEntitiesSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ExperienceEntitiesSummary()
        value.entityId = try reader["EntityId"].readIfPresent()
        value.entityType = try reader["EntityType"].readIfPresent()
        value.displayData = try reader["DisplayData"].readIfPresent(with: KendraClientTypes.EntityDisplayData.read(from:))
        return value
    }
}

extension KendraClientTypes.EntityDisplayData {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.EntityDisplayData {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.EntityDisplayData()
        value.userName = try reader["UserName"].readIfPresent()
        value.groupName = try reader["GroupName"].readIfPresent()
        value.identifiedUserName = try reader["IdentifiedUserName"].readIfPresent()
        value.firstName = try reader["FirstName"].readIfPresent()
        value.lastName = try reader["LastName"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.ExperiencesSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ExperiencesSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ExperiencesSummary()
        value.name = try reader["Name"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["Status"].readIfPresent()
        value.endpoints = try reader["Endpoints"].readListIfPresent(memberReadingClosure: KendraClientTypes.ExperienceEndpoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.FaqSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.FaqSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.FaqSummary()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.fileFormat = try reader["FileFormat"].readIfPresent()
        value.languageCode = try reader["LanguageCode"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.FeaturedResultsSetSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.FeaturedResultsSetSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.FeaturedResultsSetSummary()
        value.featuredResultsSetId = try reader["FeaturedResultsSetId"].readIfPresent()
        value.featuredResultsSetName = try reader["FeaturedResultsSetName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.lastUpdatedTimestamp = try reader["LastUpdatedTimestamp"].readIfPresent()
        value.creationTimestamp = try reader["CreationTimestamp"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.GroupSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.GroupSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.GroupSummary()
        value.groupId = try reader["GroupId"].readIfPresent()
        value.orderingId = try reader["OrderingId"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.IndexConfigurationSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.IndexConfigurationSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.IndexConfigurationSummary()
        value.name = try reader["Name"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.edition = try reader["Edition"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension KendraClientTypes.QuerySuggestionsBlockListSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.QuerySuggestionsBlockListSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.QuerySuggestionsBlockListSummary()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.itemCount = try reader["ItemCount"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.Tag {

    static func write(value: KendraClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension KendraClientTypes.ThesaurusSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ThesaurusSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ThesaurusSummary()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension KendraClientTypes.QueryResultItem {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.QueryResultItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.QueryResultItem()
        value.id = try reader["Id"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.format = try reader["Format"].readIfPresent()
        value.additionalAttributes = try reader["AdditionalAttributes"].readListIfPresent(memberReadingClosure: KendraClientTypes.AdditionalResultAttribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.documentId = try reader["DocumentId"].readIfPresent()
        value.documentTitle = try reader["DocumentTitle"].readIfPresent(with: KendraClientTypes.TextWithHighlights.read(from:))
        value.documentExcerpt = try reader["DocumentExcerpt"].readIfPresent(with: KendraClientTypes.TextWithHighlights.read(from:))
        value.documentURI = try reader["DocumentURI"].readIfPresent()
        value.documentAttributes = try reader["DocumentAttributes"].readListIfPresent(memberReadingClosure: KendraClientTypes.DocumentAttribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.scoreAttributes = try reader["ScoreAttributes"].readIfPresent(with: KendraClientTypes.ScoreAttributes.read(from:))
        value.feedbackToken = try reader["FeedbackToken"].readIfPresent()
        value.tableExcerpt = try reader["TableExcerpt"].readIfPresent(with: KendraClientTypes.TableExcerpt.read(from:))
        value.collapsedResultDetail = try reader["CollapsedResultDetail"].readIfPresent(with: KendraClientTypes.CollapsedResultDetail.read(from:))
        return value
    }
}

extension KendraClientTypes.CollapsedResultDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.CollapsedResultDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.CollapsedResultDetail()
        value.documentAttribute = try reader["DocumentAttribute"].readIfPresent(with: KendraClientTypes.DocumentAttribute.read(from:))
        value.expandedResults = try reader["ExpandedResults"].readListIfPresent(memberReadingClosure: KendraClientTypes.ExpandedResultItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.ExpandedResultItem {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ExpandedResultItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ExpandedResultItem()
        value.id = try reader["Id"].readIfPresent()
        value.documentId = try reader["DocumentId"].readIfPresent()
        value.documentTitle = try reader["DocumentTitle"].readIfPresent(with: KendraClientTypes.TextWithHighlights.read(from:))
        value.documentExcerpt = try reader["DocumentExcerpt"].readIfPresent(with: KendraClientTypes.TextWithHighlights.read(from:))
        value.documentURI = try reader["DocumentURI"].readIfPresent()
        value.documentAttributes = try reader["DocumentAttributes"].readListIfPresent(memberReadingClosure: KendraClientTypes.DocumentAttribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.TextWithHighlights {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.TextWithHighlights {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.TextWithHighlights()
        value.text = try reader["Text"].readIfPresent()
        value.highlights = try reader["Highlights"].readListIfPresent(memberReadingClosure: KendraClientTypes.Highlight.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.Highlight {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.Highlight {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.Highlight()
        value.beginOffset = try reader["BeginOffset"].readIfPresent() ?? 0
        value.endOffset = try reader["EndOffset"].readIfPresent() ?? 0
        value.topAnswer = try reader["TopAnswer"].readIfPresent() ?? false
        value.type = try reader["Type"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.TableExcerpt {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.TableExcerpt {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.TableExcerpt()
        value.rows = try reader["Rows"].readListIfPresent(memberReadingClosure: KendraClientTypes.TableRow.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.totalNumberOfRows = try reader["TotalNumberOfRows"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.TableRow {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.TableRow {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.TableRow()
        value.cells = try reader["Cells"].readListIfPresent(memberReadingClosure: KendraClientTypes.TableCell.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.TableCell {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.TableCell {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.TableCell()
        value.value = try reader["Value"].readIfPresent()
        value.topAnswer = try reader["TopAnswer"].readIfPresent() ?? false
        value.highlighted = try reader["Highlighted"].readIfPresent() ?? false
        value.header = try reader["Header"].readIfPresent() ?? false
        return value
    }
}

extension KendraClientTypes.ScoreAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ScoreAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ScoreAttributes()
        value.scoreConfidence = try reader["ScoreConfidence"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.AdditionalResultAttribute {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.AdditionalResultAttribute {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.AdditionalResultAttribute()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.valueType = try reader["ValueType"].readIfPresent() ?? .sdkUnknown("")
        value.value = try reader["Value"].readIfPresent(with: KendraClientTypes.AdditionalResultAttributeValue.read(from:))
        return value
    }
}

extension KendraClientTypes.AdditionalResultAttributeValue {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.AdditionalResultAttributeValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.AdditionalResultAttributeValue()
        value.textWithHighlightsValue = try reader["TextWithHighlightsValue"].readIfPresent(with: KendraClientTypes.TextWithHighlights.read(from:))
        return value
    }
}

extension KendraClientTypes.FacetResult {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.FacetResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.FacetResult()
        value.documentAttributeKey = try reader["DocumentAttributeKey"].readIfPresent()
        value.documentAttributeValueType = try reader["DocumentAttributeValueType"].readIfPresent()
        value.documentAttributeValueCountPairs = try reader["DocumentAttributeValueCountPairs"].readListIfPresent(memberReadingClosure: KendraClientTypes.DocumentAttributeValueCountPair.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.DocumentAttributeValueCountPair {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.DocumentAttributeValueCountPair {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.DocumentAttributeValueCountPair()
        value.documentAttributeValue = try reader["DocumentAttributeValue"].readIfPresent(with: KendraClientTypes.DocumentAttributeValue.read(from:))
        value.count = try reader["Count"].readIfPresent()
        value.facetResults = try reader["FacetResults"].readListIfPresent(memberReadingClosure: KendraClientTypes.FacetResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.Warning {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.Warning {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.Warning()
        value.message = try reader["Message"].readIfPresent()
        value.code = try reader["Code"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.SpellCorrectedQuery {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.SpellCorrectedQuery {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.SpellCorrectedQuery()
        value.suggestedQueryText = try reader["SuggestedQueryText"].readIfPresent()
        value.corrections = try reader["Corrections"].readListIfPresent(memberReadingClosure: KendraClientTypes.Correction.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension KendraClientTypes.Correction {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.Correction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.Correction()
        value.beginOffset = try reader["BeginOffset"].readIfPresent()
        value.endOffset = try reader["EndOffset"].readIfPresent()
        value.term = try reader["Term"].readIfPresent()
        value.correctedTerm = try reader["CorrectedTerm"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.FeaturedResultsItem {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.FeaturedResultsItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.FeaturedResultsItem()
        value.id = try reader["Id"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.additionalAttributes = try reader["AdditionalAttributes"].readListIfPresent(memberReadingClosure: KendraClientTypes.AdditionalResultAttribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.documentId = try reader["DocumentId"].readIfPresent()
        value.documentTitle = try reader["DocumentTitle"].readIfPresent(with: KendraClientTypes.TextWithHighlights.read(from:))
        value.documentExcerpt = try reader["DocumentExcerpt"].readIfPresent(with: KendraClientTypes.TextWithHighlights.read(from:))
        value.documentURI = try reader["DocumentURI"].readIfPresent()
        value.documentAttributes = try reader["DocumentAttributes"].readListIfPresent(memberReadingClosure: KendraClientTypes.DocumentAttribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.feedbackToken = try reader["FeedbackToken"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.RetrieveResultItem {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.RetrieveResultItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.RetrieveResultItem()
        value.id = try reader["Id"].readIfPresent()
        value.documentId = try reader["DocumentId"].readIfPresent()
        value.documentTitle = try reader["DocumentTitle"].readIfPresent()
        value.content = try reader["Content"].readIfPresent()
        value.documentURI = try reader["DocumentURI"].readIfPresent()
        value.documentAttributes = try reader["DocumentAttributes"].readListIfPresent(memberReadingClosure: KendraClientTypes.DocumentAttribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.scoreAttributes = try reader["ScoreAttributes"].readIfPresent(with: KendraClientTypes.ScoreAttributes.read(from:))
        return value
    }
}

extension KendraClientTypes.ConflictingItem {

    static func read(from reader: SmithyJSON.Reader) throws -> KendraClientTypes.ConflictingItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KendraClientTypes.ConflictingItem()
        value.queryText = try reader["QueryText"].readIfPresent()
        value.setName = try reader["SetName"].readIfPresent()
        value.setId = try reader["SetId"].readIfPresent()
        return value
    }
}

extension KendraClientTypes.EntityConfiguration {

    static func write(value: KendraClientTypes.EntityConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EntityId"].write(value.entityId)
        try writer["EntityType"].write(value.entityType)
    }
}

extension KendraClientTypes.EntityPersonaConfiguration {

    static func write(value: KendraClientTypes.EntityPersonaConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EntityId"].write(value.entityId)
        try writer["Persona"].write(value.persona)
    }
}

extension KendraClientTypes.DataSourceSyncJobMetricTarget {

    static func write(value: KendraClientTypes.DataSourceSyncJobMetricTarget?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataSourceId"].write(value.dataSourceId)
        try writer["DataSourceSyncJobId"].write(value.dataSourceSyncJobId)
    }
}

extension KendraClientTypes.DocumentInfo {

    static func write(value: KendraClientTypes.DocumentInfo?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Attributes"].writeList(value.attributes, memberWritingClosure: KendraClientTypes.DocumentAttribute.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DocumentId"].write(value.documentId)
    }
}

extension KendraClientTypes.Document {

    static func write(value: KendraClientTypes.Document?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessControlConfigurationId"].write(value.accessControlConfigurationId)
        try writer["AccessControlList"].writeList(value.accessControlList, memberWritingClosure: KendraClientTypes.Principal.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Attributes"].writeList(value.attributes, memberWritingClosure: KendraClientTypes.DocumentAttribute.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Blob"].write(value.blob)
        try writer["ContentType"].write(value.contentType)
        try writer["HierarchicalAccessControlList"].writeList(value.hierarchicalAccessControlList, memberWritingClosure: KendraClientTypes.HierarchicalPrincipal.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Id"].write(value.id)
        try writer["S3Path"].write(value.s3Path, with: KendraClientTypes.S3Path.write(value:to:))
        try writer["Title"].write(value.title)
    }
}

extension KendraClientTypes.AttributeSuggestionsGetConfig {

    static func write(value: KendraClientTypes.AttributeSuggestionsGetConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdditionalResponseAttributes"].writeList(value.additionalResponseAttributes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AttributeFilter"].write(value.attributeFilter, with: KendraClientTypes.AttributeFilter.write(value:to:))
        try writer["SuggestionAttributes"].writeList(value.suggestionAttributes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserContext"].write(value.userContext, with: KendraClientTypes.UserContext.write(value:to:))
    }
}

extension KendraClientTypes.UserContext {

    static func write(value: KendraClientTypes.UserContext?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataSourceGroups"].writeList(value.dataSourceGroups, memberWritingClosure: KendraClientTypes.DataSourceGroup.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Groups"].writeList(value.groups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Token"].write(value.token)
        try writer["UserId"].write(value.userId)
    }
}

extension KendraClientTypes.DataSourceGroup {

    static func write(value: KendraClientTypes.DataSourceGroup?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataSourceId"].write(value.dataSourceId)
        try writer["GroupId"].write(value.groupId)
    }
}

extension KendraClientTypes.AttributeFilter {

    static func write(value: KendraClientTypes.AttributeFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AndAllFilters"].writeList(value.andAllFilters, memberWritingClosure: KendraClientTypes.AttributeFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ContainsAll"].write(value.containsAll, with: KendraClientTypes.DocumentAttribute.write(value:to:))
        try writer["ContainsAny"].write(value.containsAny, with: KendraClientTypes.DocumentAttribute.write(value:to:))
        try writer["EqualsTo"].write(value.equalsTo, with: KendraClientTypes.DocumentAttribute.write(value:to:))
        try writer["GreaterThan"].write(value.greaterThan, with: KendraClientTypes.DocumentAttribute.write(value:to:))
        try writer["GreaterThanOrEquals"].write(value.greaterThanOrEquals, with: KendraClientTypes.DocumentAttribute.write(value:to:))
        try writer["LessThan"].write(value.lessThan, with: KendraClientTypes.DocumentAttribute.write(value:to:))
        try writer["LessThanOrEquals"].write(value.lessThanOrEquals, with: KendraClientTypes.DocumentAttribute.write(value:to:))
        try writer["NotFilter"].write(value.notFilter, with: KendraClientTypes.AttributeFilter.write(value:to:))
        try writer["OrAllFilters"].writeList(value.orAllFilters, memberWritingClosure: KendraClientTypes.AttributeFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension KendraClientTypes.GroupMembers {

    static func write(value: KendraClientTypes.GroupMembers?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MemberGroups"].writeList(value.memberGroups, memberWritingClosure: KendraClientTypes.MemberGroup.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MemberUsers"].writeList(value.memberUsers, memberWritingClosure: KendraClientTypes.MemberUser.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["S3PathforGroupMembers"].write(value.s3PathforGroupMembers, with: KendraClientTypes.S3Path.write(value:to:))
    }
}

extension KendraClientTypes.MemberUser {

    static func write(value: KendraClientTypes.MemberUser?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["UserId"].write(value.userId)
    }
}

extension KendraClientTypes.MemberGroup {

    static func write(value: KendraClientTypes.MemberGroup?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataSourceId"].write(value.dataSourceId)
        try writer["GroupId"].write(value.groupId)
    }
}

extension KendraClientTypes.Facet {

    static func write(value: KendraClientTypes.Facet?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DocumentAttributeKey"].write(value.documentAttributeKey)
        try writer["Facets"].writeList(value.facets, memberWritingClosure: KendraClientTypes.Facet.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxResults"].write(value.maxResults)
    }
}

extension KendraClientTypes.DocumentRelevanceConfiguration {

    static func write(value: KendraClientTypes.DocumentRelevanceConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Relevance"].write(value.relevance, with: KendraClientTypes.Relevance.write(value:to:))
    }
}

extension KendraClientTypes.SortingConfiguration {

    static func write(value: KendraClientTypes.SortingConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DocumentAttributeKey"].write(value.documentAttributeKey)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension KendraClientTypes.SpellCorrectionConfiguration {

    static func write(value: KendraClientTypes.SpellCorrectionConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IncludeQuerySpellCheckSuggestions"].write(value.includeQuerySpellCheckSuggestions)
    }
}

extension KendraClientTypes.CollapseConfiguration {

    static func write(value: KendraClientTypes.CollapseConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DocumentAttributeKey"].write(value.documentAttributeKey)
        try writer["Expand"].write(value.expand)
        try writer["ExpandConfiguration"].write(value.expandConfiguration, with: KendraClientTypes.ExpandConfiguration.write(value:to:))
        try writer["MissingAttributeKeyStrategy"].write(value.missingAttributeKeyStrategy)
        try writer["SortingConfigurations"].writeList(value.sortingConfigurations, memberWritingClosure: KendraClientTypes.SortingConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension KendraClientTypes.ExpandConfiguration {

    static func write(value: KendraClientTypes.ExpandConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxExpandedResultsPerItem"].write(value.maxExpandedResultsPerItem)
        try writer["MaxResultItemsToExpand"].write(value.maxResultItemsToExpand)
    }
}

extension KendraClientTypes.ClickFeedback {

    static func write(value: KendraClientTypes.ClickFeedback?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClickTime"].writeTimestamp(value.clickTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["ResultId"].write(value.resultId)
    }
}

extension KendraClientTypes.RelevanceFeedback {

    static func write(value: KendraClientTypes.RelevanceFeedback?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RelevanceValue"].write(value.relevanceValue)
        try writer["ResultId"].write(value.resultId)
    }
}

extension KendraClientTypes.AttributeSuggestionsUpdateConfig {

    static func write(value: KendraClientTypes.AttributeSuggestionsUpdateConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeSuggestionsMode"].write(value.attributeSuggestionsMode)
        try writer["SuggestableConfigList"].writeList(value.suggestableConfigList, memberWritingClosure: KendraClientTypes.SuggestableConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public enum KendraClientTypes {}
