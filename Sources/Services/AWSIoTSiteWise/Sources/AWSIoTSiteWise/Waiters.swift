// Code generated by smithy-swift-codegen. DO NOT EDIT!

import class ClientRuntime.Waiter
import enum ClientRuntime.JMESUtils
import protocol ClientRuntime.ServiceError
import struct ClientRuntime.WaiterConfiguration
import struct ClientRuntime.WaiterOptions
import struct ClientRuntime.WaiterOutcome

extension IoTSiteWiseClient {

    static func assetActiveWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeAssetInput, DescribeAssetOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeAssetInput, DescribeAssetOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeAssetInput, result: Swift.Result<DescribeAssetOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "assetStatus.state"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "ACTIVE"
                guard case .success(let output) = result else { return false }
                let assetStatus = output.assetStatus
                let state = assetStatus?.state
                return ClientRuntime.JMESUtils.compare(state, ==, "ACTIVE")
            }),
            .init(state: .failure, matcher: { (input: DescribeAssetInput, result: Swift.Result<DescribeAssetOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "assetStatus.state"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "FAILED"
                guard case .success(let output) = result else { return false }
                let assetStatus = output.assetStatus
                let state = assetStatus?.state
                return ClientRuntime.JMESUtils.compare(state, ==, "FAILED")
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeAssetInput, DescribeAssetOutput>(acceptors: acceptors, minDelay: 3.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the AssetActive event on the describeAsset operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeAssetInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilAssetActive(options: ClientRuntime.WaiterOptions, input: DescribeAssetInput) async throws -> ClientRuntime.WaiterOutcome<DescribeAssetOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.assetActiveWaiterConfig(), operation: self.describeAsset(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func assetNotExistsWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeAssetInput, DescribeAssetOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeAssetInput, DescribeAssetOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeAssetInput, result: Swift.Result<DescribeAssetOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "ResourceNotFoundException"
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeAssetInput, DescribeAssetOutput>(acceptors: acceptors, minDelay: 3.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the AssetNotExists event on the describeAsset operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeAssetInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilAssetNotExists(options: ClientRuntime.WaiterOptions, input: DescribeAssetInput) async throws -> ClientRuntime.WaiterOutcome<DescribeAssetOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.assetNotExistsWaiterConfig(), operation: self.describeAsset(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func assetModelActiveWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeAssetModelInput, DescribeAssetModelOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeAssetModelInput, DescribeAssetModelOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeAssetModelInput, result: Swift.Result<DescribeAssetModelOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "assetModelStatus.state"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "ACTIVE"
                guard case .success(let output) = result else { return false }
                let assetModelStatus = output.assetModelStatus
                let state = assetModelStatus?.state
                return ClientRuntime.JMESUtils.compare(state, ==, "ACTIVE")
            }),
            .init(state: .failure, matcher: { (input: DescribeAssetModelInput, result: Swift.Result<DescribeAssetModelOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "assetModelStatus.state"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "FAILED"
                guard case .success(let output) = result else { return false }
                let assetModelStatus = output.assetModelStatus
                let state = assetModelStatus?.state
                return ClientRuntime.JMESUtils.compare(state, ==, "FAILED")
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeAssetModelInput, DescribeAssetModelOutput>(acceptors: acceptors, minDelay: 3.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the AssetModelActive event on the describeAssetModel operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeAssetModelInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilAssetModelActive(options: ClientRuntime.WaiterOptions, input: DescribeAssetModelInput) async throws -> ClientRuntime.WaiterOutcome<DescribeAssetModelOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.assetModelActiveWaiterConfig(), operation: self.describeAssetModel(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func assetModelNotExistsWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeAssetModelInput, DescribeAssetModelOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeAssetModelInput, DescribeAssetModelOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeAssetModelInput, result: Swift.Result<DescribeAssetModelOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "ResourceNotFoundException"
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeAssetModelInput, DescribeAssetModelOutput>(acceptors: acceptors, minDelay: 3.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the AssetModelNotExists event on the describeAssetModel operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeAssetModelInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilAssetModelNotExists(options: ClientRuntime.WaiterOptions, input: DescribeAssetModelInput) async throws -> ClientRuntime.WaiterOutcome<DescribeAssetModelOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.assetModelNotExistsWaiterConfig(), operation: self.describeAssetModel(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func portalActiveWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribePortalInput, DescribePortalOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribePortalInput, DescribePortalOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribePortalInput, result: Swift.Result<DescribePortalOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "portalStatus.state"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "ACTIVE"
                guard case .success(let output) = result else { return false }
                let portalStatus = output.portalStatus
                let state = portalStatus?.state
                return ClientRuntime.JMESUtils.compare(state, ==, "ACTIVE")
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribePortalInput, DescribePortalOutput>(acceptors: acceptors, minDelay: 3.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the PortalActive event on the describePortal operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribePortalInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilPortalActive(options: ClientRuntime.WaiterOptions, input: DescribePortalInput) async throws -> ClientRuntime.WaiterOutcome<DescribePortalOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.portalActiveWaiterConfig(), operation: self.describePortal(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func portalNotExistsWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribePortalInput, DescribePortalOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribePortalInput, DescribePortalOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribePortalInput, result: Swift.Result<DescribePortalOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "ResourceNotFoundException"
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribePortalInput, DescribePortalOutput>(acceptors: acceptors, minDelay: 3.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the PortalNotExists event on the describePortal operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribePortalInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilPortalNotExists(options: ClientRuntime.WaiterOptions, input: DescribePortalInput) async throws -> ClientRuntime.WaiterOutcome<DescribePortalOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.portalNotExistsWaiterConfig(), operation: self.describePortal(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }
}
