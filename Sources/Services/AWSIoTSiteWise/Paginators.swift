// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTSiteWiseClient {
    /// Paginate over `[BatchGetAssetPropertyAggregatesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[BatchGetAssetPropertyAggregatesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `BatchGetAssetPropertyAggregatesOutputResponse`
    public func batchGetAssetPropertyAggregatesPaginated(input: BatchGetAssetPropertyAggregatesInput) -> ClientRuntime.PaginatorSequence<BatchGetAssetPropertyAggregatesInput, BatchGetAssetPropertyAggregatesOutputResponse> {
        return ClientRuntime.PaginatorSequence<BatchGetAssetPropertyAggregatesInput, BatchGetAssetPropertyAggregatesOutputResponse>(input: input, inputKey: \BatchGetAssetPropertyAggregatesInput.nextToken, outputKey: \BatchGetAssetPropertyAggregatesOutputResponse.nextToken, paginationFunction: self.batchGetAssetPropertyAggregates(input:))
    }
}

extension BatchGetAssetPropertyAggregatesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> BatchGetAssetPropertyAggregatesInput {
        return BatchGetAssetPropertyAggregatesInput(
            entries: self.entries,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension IoTSiteWiseClient {
    /// Paginate over `[BatchGetAssetPropertyValueOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[BatchGetAssetPropertyValueInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `BatchGetAssetPropertyValueOutputResponse`
    public func batchGetAssetPropertyValuePaginated(input: BatchGetAssetPropertyValueInput) -> ClientRuntime.PaginatorSequence<BatchGetAssetPropertyValueInput, BatchGetAssetPropertyValueOutputResponse> {
        return ClientRuntime.PaginatorSequence<BatchGetAssetPropertyValueInput, BatchGetAssetPropertyValueOutputResponse>(input: input, inputKey: \BatchGetAssetPropertyValueInput.nextToken, outputKey: \BatchGetAssetPropertyValueOutputResponse.nextToken, paginationFunction: self.batchGetAssetPropertyValue(input:))
    }
}

extension BatchGetAssetPropertyValueInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> BatchGetAssetPropertyValueInput {
        return BatchGetAssetPropertyValueInput(
            entries: self.entries,
            nextToken: token
        )}
}
extension IoTSiteWiseClient {
    /// Paginate over `[BatchGetAssetPropertyValueHistoryOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[BatchGetAssetPropertyValueHistoryInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `BatchGetAssetPropertyValueHistoryOutputResponse`
    public func batchGetAssetPropertyValueHistoryPaginated(input: BatchGetAssetPropertyValueHistoryInput) -> ClientRuntime.PaginatorSequence<BatchGetAssetPropertyValueHistoryInput, BatchGetAssetPropertyValueHistoryOutputResponse> {
        return ClientRuntime.PaginatorSequence<BatchGetAssetPropertyValueHistoryInput, BatchGetAssetPropertyValueHistoryOutputResponse>(input: input, inputKey: \BatchGetAssetPropertyValueHistoryInput.nextToken, outputKey: \BatchGetAssetPropertyValueHistoryOutputResponse.nextToken, paginationFunction: self.batchGetAssetPropertyValueHistory(input:))
    }
}

extension BatchGetAssetPropertyValueHistoryInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> BatchGetAssetPropertyValueHistoryInput {
        return BatchGetAssetPropertyValueHistoryInput(
            entries: self.entries,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension IoTSiteWiseClient {
    /// Paginate over `[GetAssetPropertyAggregatesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetAssetPropertyAggregatesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetAssetPropertyAggregatesOutputResponse`
    public func getAssetPropertyAggregatesPaginated(input: GetAssetPropertyAggregatesInput) -> ClientRuntime.PaginatorSequence<GetAssetPropertyAggregatesInput, GetAssetPropertyAggregatesOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetAssetPropertyAggregatesInput, GetAssetPropertyAggregatesOutputResponse>(input: input, inputKey: \GetAssetPropertyAggregatesInput.nextToken, outputKey: \GetAssetPropertyAggregatesOutputResponse.nextToken, paginationFunction: self.getAssetPropertyAggregates(input:))
    }
}

extension GetAssetPropertyAggregatesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetAssetPropertyAggregatesInput {
        return GetAssetPropertyAggregatesInput(
            aggregateTypes: self.aggregateTypes,
            assetId: self.assetId,
            endDate: self.endDate,
            maxResults: self.maxResults,
            nextToken: token,
            propertyAlias: self.propertyAlias,
            propertyId: self.propertyId,
            qualities: self.qualities,
            resolution: self.resolution,
            startDate: self.startDate,
            timeOrdering: self.timeOrdering
        )}
}

extension PaginatorSequence where Input == GetAssetPropertyAggregatesInput, Output == GetAssetPropertyAggregatesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getAssetPropertyAggregatesPaginated`
    /// to access the nested member `[IoTSiteWiseClientTypes.AggregatedValue]`
    /// - Returns: `[IoTSiteWiseClientTypes.AggregatedValue]`
    public func aggregatedValues() async throws -> [IoTSiteWiseClientTypes.AggregatedValue] {
        return try await self.asyncCompactMap { item in item.aggregatedValues }
    }
}
extension IoTSiteWiseClient {
    /// Paginate over `[GetAssetPropertyValueHistoryOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetAssetPropertyValueHistoryInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetAssetPropertyValueHistoryOutputResponse`
    public func getAssetPropertyValueHistoryPaginated(input: GetAssetPropertyValueHistoryInput) -> ClientRuntime.PaginatorSequence<GetAssetPropertyValueHistoryInput, GetAssetPropertyValueHistoryOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetAssetPropertyValueHistoryInput, GetAssetPropertyValueHistoryOutputResponse>(input: input, inputKey: \GetAssetPropertyValueHistoryInput.nextToken, outputKey: \GetAssetPropertyValueHistoryOutputResponse.nextToken, paginationFunction: self.getAssetPropertyValueHistory(input:))
    }
}

extension GetAssetPropertyValueHistoryInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetAssetPropertyValueHistoryInput {
        return GetAssetPropertyValueHistoryInput(
            assetId: self.assetId,
            endDate: self.endDate,
            maxResults: self.maxResults,
            nextToken: token,
            propertyAlias: self.propertyAlias,
            propertyId: self.propertyId,
            qualities: self.qualities,
            startDate: self.startDate,
            timeOrdering: self.timeOrdering
        )}
}

extension PaginatorSequence where Input == GetAssetPropertyValueHistoryInput, Output == GetAssetPropertyValueHistoryOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getAssetPropertyValueHistoryPaginated`
    /// to access the nested member `[IoTSiteWiseClientTypes.AssetPropertyValue]`
    /// - Returns: `[IoTSiteWiseClientTypes.AssetPropertyValue]`
    public func assetPropertyValueHistory() async throws -> [IoTSiteWiseClientTypes.AssetPropertyValue] {
        return try await self.asyncCompactMap { item in item.assetPropertyValueHistory }
    }
}
extension IoTSiteWiseClient {
    /// Paginate over `[GetInterpolatedAssetPropertyValuesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetInterpolatedAssetPropertyValuesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetInterpolatedAssetPropertyValuesOutputResponse`
    public func getInterpolatedAssetPropertyValuesPaginated(input: GetInterpolatedAssetPropertyValuesInput) -> ClientRuntime.PaginatorSequence<GetInterpolatedAssetPropertyValuesInput, GetInterpolatedAssetPropertyValuesOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetInterpolatedAssetPropertyValuesInput, GetInterpolatedAssetPropertyValuesOutputResponse>(input: input, inputKey: \GetInterpolatedAssetPropertyValuesInput.nextToken, outputKey: \GetInterpolatedAssetPropertyValuesOutputResponse.nextToken, paginationFunction: self.getInterpolatedAssetPropertyValues(input:))
    }
}

extension GetInterpolatedAssetPropertyValuesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetInterpolatedAssetPropertyValuesInput {
        return GetInterpolatedAssetPropertyValuesInput(
            assetId: self.assetId,
            endTimeInSeconds: self.endTimeInSeconds,
            endTimeOffsetInNanos: self.endTimeOffsetInNanos,
            intervalInSeconds: self.intervalInSeconds,
            intervalWindowInSeconds: self.intervalWindowInSeconds,
            maxResults: self.maxResults,
            nextToken: token,
            propertyAlias: self.propertyAlias,
            propertyId: self.propertyId,
            quality: self.quality,
            startTimeInSeconds: self.startTimeInSeconds,
            startTimeOffsetInNanos: self.startTimeOffsetInNanos,
            type: self.type
        )}
}

extension PaginatorSequence where Input == GetInterpolatedAssetPropertyValuesInput, Output == GetInterpolatedAssetPropertyValuesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getInterpolatedAssetPropertyValuesPaginated`
    /// to access the nested member `[IoTSiteWiseClientTypes.InterpolatedAssetPropertyValue]`
    /// - Returns: `[IoTSiteWiseClientTypes.InterpolatedAssetPropertyValue]`
    public func interpolatedAssetPropertyValues() async throws -> [IoTSiteWiseClientTypes.InterpolatedAssetPropertyValue] {
        return try await self.asyncCompactMap { item in item.interpolatedAssetPropertyValues }
    }
}
extension IoTSiteWiseClient {
    /// Paginate over `[ListAccessPoliciesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAccessPoliciesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAccessPoliciesOutputResponse`
    public func listAccessPoliciesPaginated(input: ListAccessPoliciesInput) -> ClientRuntime.PaginatorSequence<ListAccessPoliciesInput, ListAccessPoliciesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAccessPoliciesInput, ListAccessPoliciesOutputResponse>(input: input, inputKey: \ListAccessPoliciesInput.nextToken, outputKey: \ListAccessPoliciesOutputResponse.nextToken, paginationFunction: self.listAccessPolicies(input:))
    }
}

extension ListAccessPoliciesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAccessPoliciesInput {
        return ListAccessPoliciesInput(
            iamArn: self.iamArn,
            identityId: self.identityId,
            identityType: self.identityType,
            maxResults: self.maxResults,
            nextToken: token,
            resourceId: self.resourceId,
            resourceType: self.resourceType
        )}
}

extension PaginatorSequence where Input == ListAccessPoliciesInput, Output == ListAccessPoliciesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listAccessPoliciesPaginated`
    /// to access the nested member `[IoTSiteWiseClientTypes.AccessPolicySummary]`
    /// - Returns: `[IoTSiteWiseClientTypes.AccessPolicySummary]`
    public func accessPolicySummaries() async throws -> [IoTSiteWiseClientTypes.AccessPolicySummary] {
        return try await self.asyncCompactMap { item in item.accessPolicySummaries }
    }
}
extension IoTSiteWiseClient {
    /// Paginate over `[ListAssetModelPropertiesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAssetModelPropertiesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAssetModelPropertiesOutputResponse`
    public func listAssetModelPropertiesPaginated(input: ListAssetModelPropertiesInput) -> ClientRuntime.PaginatorSequence<ListAssetModelPropertiesInput, ListAssetModelPropertiesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAssetModelPropertiesInput, ListAssetModelPropertiesOutputResponse>(input: input, inputKey: \ListAssetModelPropertiesInput.nextToken, outputKey: \ListAssetModelPropertiesOutputResponse.nextToken, paginationFunction: self.listAssetModelProperties(input:))
    }
}

extension ListAssetModelPropertiesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAssetModelPropertiesInput {
        return ListAssetModelPropertiesInput(
            assetModelId: self.assetModelId,
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListAssetModelPropertiesInput, Output == ListAssetModelPropertiesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listAssetModelPropertiesPaginated`
    /// to access the nested member `[IoTSiteWiseClientTypes.AssetModelPropertySummary]`
    /// - Returns: `[IoTSiteWiseClientTypes.AssetModelPropertySummary]`
    public func assetModelPropertySummaries() async throws -> [IoTSiteWiseClientTypes.AssetModelPropertySummary] {
        return try await self.asyncCompactMap { item in item.assetModelPropertySummaries }
    }
}
extension IoTSiteWiseClient {
    /// Paginate over `[ListAssetModelsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAssetModelsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAssetModelsOutputResponse`
    public func listAssetModelsPaginated(input: ListAssetModelsInput) -> ClientRuntime.PaginatorSequence<ListAssetModelsInput, ListAssetModelsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAssetModelsInput, ListAssetModelsOutputResponse>(input: input, inputKey: \ListAssetModelsInput.nextToken, outputKey: \ListAssetModelsOutputResponse.nextToken, paginationFunction: self.listAssetModels(input:))
    }
}

extension ListAssetModelsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAssetModelsInput {
        return ListAssetModelsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListAssetModelsInput, Output == ListAssetModelsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listAssetModelsPaginated`
    /// to access the nested member `[IoTSiteWiseClientTypes.AssetModelSummary]`
    /// - Returns: `[IoTSiteWiseClientTypes.AssetModelSummary]`
    public func assetModelSummaries() async throws -> [IoTSiteWiseClientTypes.AssetModelSummary] {
        return try await self.asyncCompactMap { item in item.assetModelSummaries }
    }
}
extension IoTSiteWiseClient {
    /// Paginate over `[ListAssetPropertiesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAssetPropertiesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAssetPropertiesOutputResponse`
    public func listAssetPropertiesPaginated(input: ListAssetPropertiesInput) -> ClientRuntime.PaginatorSequence<ListAssetPropertiesInput, ListAssetPropertiesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAssetPropertiesInput, ListAssetPropertiesOutputResponse>(input: input, inputKey: \ListAssetPropertiesInput.nextToken, outputKey: \ListAssetPropertiesOutputResponse.nextToken, paginationFunction: self.listAssetProperties(input:))
    }
}

extension ListAssetPropertiesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAssetPropertiesInput {
        return ListAssetPropertiesInput(
            assetId: self.assetId,
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListAssetPropertiesInput, Output == ListAssetPropertiesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listAssetPropertiesPaginated`
    /// to access the nested member `[IoTSiteWiseClientTypes.AssetPropertySummary]`
    /// - Returns: `[IoTSiteWiseClientTypes.AssetPropertySummary]`
    public func assetPropertySummaries() async throws -> [IoTSiteWiseClientTypes.AssetPropertySummary] {
        return try await self.asyncCompactMap { item in item.assetPropertySummaries }
    }
}
extension IoTSiteWiseClient {
    /// Paginate over `[ListAssetRelationshipsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAssetRelationshipsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAssetRelationshipsOutputResponse`
    public func listAssetRelationshipsPaginated(input: ListAssetRelationshipsInput) -> ClientRuntime.PaginatorSequence<ListAssetRelationshipsInput, ListAssetRelationshipsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAssetRelationshipsInput, ListAssetRelationshipsOutputResponse>(input: input, inputKey: \ListAssetRelationshipsInput.nextToken, outputKey: \ListAssetRelationshipsOutputResponse.nextToken, paginationFunction: self.listAssetRelationships(input:))
    }
}

extension ListAssetRelationshipsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAssetRelationshipsInput {
        return ListAssetRelationshipsInput(
            assetId: self.assetId,
            maxResults: self.maxResults,
            nextToken: token,
            traversalType: self.traversalType
        )}
}

extension PaginatorSequence where Input == ListAssetRelationshipsInput, Output == ListAssetRelationshipsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listAssetRelationshipsPaginated`
    /// to access the nested member `[IoTSiteWiseClientTypes.AssetRelationshipSummary]`
    /// - Returns: `[IoTSiteWiseClientTypes.AssetRelationshipSummary]`
    public func assetRelationshipSummaries() async throws -> [IoTSiteWiseClientTypes.AssetRelationshipSummary] {
        return try await self.asyncCompactMap { item in item.assetRelationshipSummaries }
    }
}
extension IoTSiteWiseClient {
    /// Paginate over `[ListAssetsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAssetsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAssetsOutputResponse`
    public func listAssetsPaginated(input: ListAssetsInput) -> ClientRuntime.PaginatorSequence<ListAssetsInput, ListAssetsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAssetsInput, ListAssetsOutputResponse>(input: input, inputKey: \ListAssetsInput.nextToken, outputKey: \ListAssetsOutputResponse.nextToken, paginationFunction: self.listAssets(input:))
    }
}

extension ListAssetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAssetsInput {
        return ListAssetsInput(
            assetModelId: self.assetModelId,
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListAssetsInput, Output == ListAssetsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listAssetsPaginated`
    /// to access the nested member `[IoTSiteWiseClientTypes.AssetSummary]`
    /// - Returns: `[IoTSiteWiseClientTypes.AssetSummary]`
    public func assetSummaries() async throws -> [IoTSiteWiseClientTypes.AssetSummary] {
        return try await self.asyncCompactMap { item in item.assetSummaries }
    }
}
extension IoTSiteWiseClient {
    /// Paginate over `[ListAssociatedAssetsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAssociatedAssetsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAssociatedAssetsOutputResponse`
    public func listAssociatedAssetsPaginated(input: ListAssociatedAssetsInput) -> ClientRuntime.PaginatorSequence<ListAssociatedAssetsInput, ListAssociatedAssetsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAssociatedAssetsInput, ListAssociatedAssetsOutputResponse>(input: input, inputKey: \ListAssociatedAssetsInput.nextToken, outputKey: \ListAssociatedAssetsOutputResponse.nextToken, paginationFunction: self.listAssociatedAssets(input:))
    }
}

extension ListAssociatedAssetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAssociatedAssetsInput {
        return ListAssociatedAssetsInput(
            assetId: self.assetId,
            hierarchyId: self.hierarchyId,
            maxResults: self.maxResults,
            nextToken: token,
            traversalDirection: self.traversalDirection
        )}
}

extension PaginatorSequence where Input == ListAssociatedAssetsInput, Output == ListAssociatedAssetsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listAssociatedAssetsPaginated`
    /// to access the nested member `[IoTSiteWiseClientTypes.AssociatedAssetsSummary]`
    /// - Returns: `[IoTSiteWiseClientTypes.AssociatedAssetsSummary]`
    public func assetSummaries() async throws -> [IoTSiteWiseClientTypes.AssociatedAssetsSummary] {
        return try await self.asyncCompactMap { item in item.assetSummaries }
    }
}
extension IoTSiteWiseClient {
    /// Paginate over `[ListBulkImportJobsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListBulkImportJobsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListBulkImportJobsOutputResponse`
    public func listBulkImportJobsPaginated(input: ListBulkImportJobsInput) -> ClientRuntime.PaginatorSequence<ListBulkImportJobsInput, ListBulkImportJobsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListBulkImportJobsInput, ListBulkImportJobsOutputResponse>(input: input, inputKey: \ListBulkImportJobsInput.nextToken, outputKey: \ListBulkImportJobsOutputResponse.nextToken, paginationFunction: self.listBulkImportJobs(input:))
    }
}

extension ListBulkImportJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListBulkImportJobsInput {
        return ListBulkImportJobsInput(
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListBulkImportJobsInput, Output == ListBulkImportJobsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listBulkImportJobsPaginated`
    /// to access the nested member `[IoTSiteWiseClientTypes.JobSummary]`
    /// - Returns: `[IoTSiteWiseClientTypes.JobSummary]`
    public func jobSummaries() async throws -> [IoTSiteWiseClientTypes.JobSummary] {
        return try await self.asyncCompactMap { item in item.jobSummaries }
    }
}
extension IoTSiteWiseClient {
    /// Paginate over `[ListDashboardsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDashboardsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDashboardsOutputResponse`
    public func listDashboardsPaginated(input: ListDashboardsInput) -> ClientRuntime.PaginatorSequence<ListDashboardsInput, ListDashboardsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListDashboardsInput, ListDashboardsOutputResponse>(input: input, inputKey: \ListDashboardsInput.nextToken, outputKey: \ListDashboardsOutputResponse.nextToken, paginationFunction: self.listDashboards(input:))
    }
}

extension ListDashboardsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDashboardsInput {
        return ListDashboardsInput(
            maxResults: self.maxResults,
            nextToken: token,
            projectId: self.projectId
        )}
}

extension PaginatorSequence where Input == ListDashboardsInput, Output == ListDashboardsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listDashboardsPaginated`
    /// to access the nested member `[IoTSiteWiseClientTypes.DashboardSummary]`
    /// - Returns: `[IoTSiteWiseClientTypes.DashboardSummary]`
    public func dashboardSummaries() async throws -> [IoTSiteWiseClientTypes.DashboardSummary] {
        return try await self.asyncCompactMap { item in item.dashboardSummaries }
    }
}
extension IoTSiteWiseClient {
    /// Paginate over `[ListGatewaysOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListGatewaysInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListGatewaysOutputResponse`
    public func listGatewaysPaginated(input: ListGatewaysInput) -> ClientRuntime.PaginatorSequence<ListGatewaysInput, ListGatewaysOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListGatewaysInput, ListGatewaysOutputResponse>(input: input, inputKey: \ListGatewaysInput.nextToken, outputKey: \ListGatewaysOutputResponse.nextToken, paginationFunction: self.listGateways(input:))
    }
}

extension ListGatewaysInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListGatewaysInput {
        return ListGatewaysInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListGatewaysInput, Output == ListGatewaysOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listGatewaysPaginated`
    /// to access the nested member `[IoTSiteWiseClientTypes.GatewaySummary]`
    /// - Returns: `[IoTSiteWiseClientTypes.GatewaySummary]`
    public func gatewaySummaries() async throws -> [IoTSiteWiseClientTypes.GatewaySummary] {
        return try await self.asyncCompactMap { item in item.gatewaySummaries }
    }
}
extension IoTSiteWiseClient {
    /// Paginate over `[ListPortalsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListPortalsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListPortalsOutputResponse`
    public func listPortalsPaginated(input: ListPortalsInput) -> ClientRuntime.PaginatorSequence<ListPortalsInput, ListPortalsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListPortalsInput, ListPortalsOutputResponse>(input: input, inputKey: \ListPortalsInput.nextToken, outputKey: \ListPortalsOutputResponse.nextToken, paginationFunction: self.listPortals(input:))
    }
}

extension ListPortalsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPortalsInput {
        return ListPortalsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListPortalsInput, Output == ListPortalsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listPortalsPaginated`
    /// to access the nested member `[IoTSiteWiseClientTypes.PortalSummary]`
    /// - Returns: `[IoTSiteWiseClientTypes.PortalSummary]`
    public func portalSummaries() async throws -> [IoTSiteWiseClientTypes.PortalSummary] {
        return try await self.asyncCompactMap { item in item.portalSummaries }
    }
}
extension IoTSiteWiseClient {
    /// Paginate over `[ListProjectAssetsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListProjectAssetsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListProjectAssetsOutputResponse`
    public func listProjectAssetsPaginated(input: ListProjectAssetsInput) -> ClientRuntime.PaginatorSequence<ListProjectAssetsInput, ListProjectAssetsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListProjectAssetsInput, ListProjectAssetsOutputResponse>(input: input, inputKey: \ListProjectAssetsInput.nextToken, outputKey: \ListProjectAssetsOutputResponse.nextToken, paginationFunction: self.listProjectAssets(input:))
    }
}

extension ListProjectAssetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListProjectAssetsInput {
        return ListProjectAssetsInput(
            maxResults: self.maxResults,
            nextToken: token,
            projectId: self.projectId
        )}
}

extension PaginatorSequence where Input == ListProjectAssetsInput, Output == ListProjectAssetsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listProjectAssetsPaginated`
    /// to access the nested member `[Swift.String]`
    /// - Returns: `[Swift.String]`
    public func assetIds() async throws -> [Swift.String] {
        return try await self.asyncCompactMap { item in item.assetIds }
    }
}
extension IoTSiteWiseClient {
    /// Paginate over `[ListProjectsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListProjectsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListProjectsOutputResponse`
    public func listProjectsPaginated(input: ListProjectsInput) -> ClientRuntime.PaginatorSequence<ListProjectsInput, ListProjectsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListProjectsInput, ListProjectsOutputResponse>(input: input, inputKey: \ListProjectsInput.nextToken, outputKey: \ListProjectsOutputResponse.nextToken, paginationFunction: self.listProjects(input:))
    }
}

extension ListProjectsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListProjectsInput {
        return ListProjectsInput(
            maxResults: self.maxResults,
            nextToken: token,
            portalId: self.portalId
        )}
}

extension PaginatorSequence where Input == ListProjectsInput, Output == ListProjectsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listProjectsPaginated`
    /// to access the nested member `[IoTSiteWiseClientTypes.ProjectSummary]`
    /// - Returns: `[IoTSiteWiseClientTypes.ProjectSummary]`
    public func projectSummaries() async throws -> [IoTSiteWiseClientTypes.ProjectSummary] {
        return try await self.asyncCompactMap { item in item.projectSummaries }
    }
}
extension IoTSiteWiseClient {
    /// Paginate over `[ListTimeSeriesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTimeSeriesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTimeSeriesOutputResponse`
    public func listTimeSeriesPaginated(input: ListTimeSeriesInput) -> ClientRuntime.PaginatorSequence<ListTimeSeriesInput, ListTimeSeriesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListTimeSeriesInput, ListTimeSeriesOutputResponse>(input: input, inputKey: \ListTimeSeriesInput.nextToken, outputKey: \ListTimeSeriesOutputResponse.nextToken, paginationFunction: self.listTimeSeries(input:))
    }
}

extension ListTimeSeriesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTimeSeriesInput {
        return ListTimeSeriesInput(
            aliasPrefix: self.aliasPrefix,
            assetId: self.assetId,
            maxResults: self.maxResults,
            nextToken: token,
            timeSeriesType: self.timeSeriesType
        )}
}

extension PaginatorSequence where Input == ListTimeSeriesInput, Output == ListTimeSeriesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listTimeSeriesPaginated`
    /// to access the nested member `[IoTSiteWiseClientTypes.TimeSeriesSummary]`
    /// - Returns: `[IoTSiteWiseClientTypes.TimeSeriesSummary]`
    public func timeSeriesSummaries() async throws -> [IoTSiteWiseClientTypes.TimeSeriesSummary] {
        return try await self.asyncCompactMap { item in item.timeSeriesSummaries }
    }
}
