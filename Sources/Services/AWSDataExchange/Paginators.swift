// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataExchangeClient {
    /// Paginate over `[ListDataSetRevisionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDataSetRevisionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDataSetRevisionsOutput`
    public func listDataSetRevisionsPaginated(input: ListDataSetRevisionsInput) -> ClientRuntime.PaginatorSequence<ListDataSetRevisionsInput, ListDataSetRevisionsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListDataSetRevisionsInput, ListDataSetRevisionsOutput>(input: input, inputKey: \ListDataSetRevisionsInput.nextToken, outputKey: \ListDataSetRevisionsOutput.nextToken, paginationFunction: self.listDataSetRevisions(input:))
=======
        return ClientRuntime.PaginatorSequence<ListDataSetRevisionsInput, ListDataSetRevisionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listDataSetRevisions(input:))
>>>>>>> main
    }
}

extension ListDataSetRevisionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDataSetRevisionsInput {
        return ListDataSetRevisionsInput(
            dataSetId: self.dataSetId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListDataSetRevisionsInput, Output == ListDataSetRevisionsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListDataSetRevisionsInput, OperationStackOutput == ListDataSetRevisionsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listDataSetRevisionsPaginated`
    /// to access the nested member `[DataExchangeClientTypes.RevisionEntry]`
    /// - Returns: `[DataExchangeClientTypes.RevisionEntry]`
    public func revisions() async throws -> [DataExchangeClientTypes.RevisionEntry] {
        return try await self.asyncCompactMap { item in item.revisions }
    }
}
extension DataExchangeClient {
    /// Paginate over `[ListDataSetsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDataSetsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDataSetsOutput`
    public func listDataSetsPaginated(input: ListDataSetsInput) -> ClientRuntime.PaginatorSequence<ListDataSetsInput, ListDataSetsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListDataSetsInput, ListDataSetsOutput>(input: input, inputKey: \ListDataSetsInput.nextToken, outputKey: \ListDataSetsOutput.nextToken, paginationFunction: self.listDataSets(input:))
=======
        return ClientRuntime.PaginatorSequence<ListDataSetsInput, ListDataSetsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listDataSets(input:))
>>>>>>> main
    }
}

extension ListDataSetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDataSetsInput {
        return ListDataSetsInput(
            maxResults: self.maxResults,
            nextToken: token,
            origin: self.origin
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListDataSetsInput, Output == ListDataSetsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListDataSetsInput, OperationStackOutput == ListDataSetsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listDataSetsPaginated`
    /// to access the nested member `[DataExchangeClientTypes.DataSetEntry]`
    /// - Returns: `[DataExchangeClientTypes.DataSetEntry]`
    public func dataSets() async throws -> [DataExchangeClientTypes.DataSetEntry] {
        return try await self.asyncCompactMap { item in item.dataSets }
    }
}
extension DataExchangeClient {
    /// Paginate over `[ListEventActionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListEventActionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListEventActionsOutput`
    public func listEventActionsPaginated(input: ListEventActionsInput) -> ClientRuntime.PaginatorSequence<ListEventActionsInput, ListEventActionsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListEventActionsInput, ListEventActionsOutput>(input: input, inputKey: \ListEventActionsInput.nextToken, outputKey: \ListEventActionsOutput.nextToken, paginationFunction: self.listEventActions(input:))
=======
        return ClientRuntime.PaginatorSequence<ListEventActionsInput, ListEventActionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listEventActions(input:))
>>>>>>> main
    }
}

extension ListEventActionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListEventActionsInput {
        return ListEventActionsInput(
            eventSourceId: self.eventSourceId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListEventActionsInput, Output == ListEventActionsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListEventActionsInput, OperationStackOutput == ListEventActionsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listEventActionsPaginated`
    /// to access the nested member `[DataExchangeClientTypes.EventActionEntry]`
    /// - Returns: `[DataExchangeClientTypes.EventActionEntry]`
    public func eventActions() async throws -> [DataExchangeClientTypes.EventActionEntry] {
        return try await self.asyncCompactMap { item in item.eventActions }
    }
}
extension DataExchangeClient {
    /// Paginate over `[ListJobsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListJobsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListJobsOutput`
    public func listJobsPaginated(input: ListJobsInput) -> ClientRuntime.PaginatorSequence<ListJobsInput, ListJobsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListJobsInput, ListJobsOutput>(input: input, inputKey: \ListJobsInput.nextToken, outputKey: \ListJobsOutput.nextToken, paginationFunction: self.listJobs(input:))
=======
        return ClientRuntime.PaginatorSequence<ListJobsInput, ListJobsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listJobs(input:))
>>>>>>> main
    }
}

extension ListJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListJobsInput {
        return ListJobsInput(
            dataSetId: self.dataSetId,
            maxResults: self.maxResults,
            nextToken: token,
            revisionId: self.revisionId
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListJobsInput, Output == ListJobsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListJobsInput, OperationStackOutput == ListJobsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listJobsPaginated`
    /// to access the nested member `[DataExchangeClientTypes.JobEntry]`
    /// - Returns: `[DataExchangeClientTypes.JobEntry]`
    public func jobs() async throws -> [DataExchangeClientTypes.JobEntry] {
        return try await self.asyncCompactMap { item in item.jobs }
    }
}
extension DataExchangeClient {
    /// Paginate over `[ListRevisionAssetsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListRevisionAssetsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListRevisionAssetsOutput`
    public func listRevisionAssetsPaginated(input: ListRevisionAssetsInput) -> ClientRuntime.PaginatorSequence<ListRevisionAssetsInput, ListRevisionAssetsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListRevisionAssetsInput, ListRevisionAssetsOutput>(input: input, inputKey: \ListRevisionAssetsInput.nextToken, outputKey: \ListRevisionAssetsOutput.nextToken, paginationFunction: self.listRevisionAssets(input:))
=======
        return ClientRuntime.PaginatorSequence<ListRevisionAssetsInput, ListRevisionAssetsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listRevisionAssets(input:))
>>>>>>> main
    }
}

extension ListRevisionAssetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListRevisionAssetsInput {
        return ListRevisionAssetsInput(
            dataSetId: self.dataSetId,
            maxResults: self.maxResults,
            nextToken: token,
            revisionId: self.revisionId
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListRevisionAssetsInput, Output == ListRevisionAssetsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListRevisionAssetsInput, OperationStackOutput == ListRevisionAssetsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listRevisionAssetsPaginated`
    /// to access the nested member `[DataExchangeClientTypes.AssetEntry]`
    /// - Returns: `[DataExchangeClientTypes.AssetEntry]`
    public func assets() async throws -> [DataExchangeClientTypes.AssetEntry] {
        return try await self.asyncCompactMap { item in item.assets }
    }
}
