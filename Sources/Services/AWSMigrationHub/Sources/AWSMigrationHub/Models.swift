//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError

/// You do not have sufficient access to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension MigrationHubClientTypes {

    public enum ApplicationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case inProgress
        case notStarted
        case sdkUnknown(Swift.String)

        public static var allCases: [ApplicationStatus] {
            return [
                .completed,
                .inProgress,
                .notStarted
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .inProgress: return "IN_PROGRESS"
            case .notStarted: return "NOT_STARTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MigrationHubClientTypes {

    /// The state of an application discovered through Migration Hub import, the AWS Agentless Discovery Connector, or the AWS Application Discovery Agent.
    public struct ApplicationState: Swift.Sendable {
        /// The configurationId from the Application Discovery Service that uniquely identifies an application.
        public var applicationId: Swift.String?
        /// The current status of an application.
        public var applicationStatus: MigrationHubClientTypes.ApplicationStatus?
        /// The timestamp when the application status was last updated.
        public var lastUpdatedTime: Foundation.Date?

        public init(
            applicationId: Swift.String? = nil,
            applicationStatus: MigrationHubClientTypes.ApplicationStatus? = nil,
            lastUpdatedTime: Foundation.Date? = nil
        )
        {
            self.applicationId = applicationId
            self.applicationStatus = applicationStatus
            self.lastUpdatedTime = lastUpdatedTime
        }
    }
}

/// Exception raised to indicate a successfully authorized action when the DryRun flag is set to "true".
public struct DryRunOperation: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DryRunOperation" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The home region is not set. Set the home region to continue.
public struct HomeRegionNotSetException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HomeRegionNotSetException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Exception raised when an internal, configuration, or dependency error is encountered.
public struct InternalServerError: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerError" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Exception raised when the provided input violates a policy constraint or is entered in the wrong format or data type.
public struct InvalidInputException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidInputException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Exception raised when the request references a resource (Application Discovery Service configuration, update stream, migration task, etc.) that does not exist in Application Discovery Service (Application Discovery Service) or in Migration Hub's repository.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Exception raised when there is an internal, configuration, or dependency error encountered.
public struct ServiceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceUnavailableException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message that provides information about the exception.
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The number of seconds the caller should wait before retrying.
        public internal(set) var retryAfterSeconds: Swift.Int = 0
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        retryAfterSeconds: Swift.Int = 0
    )
    {
        self.properties.message = message
        self.properties.retryAfterSeconds = retryAfterSeconds
    }
}

/// Exception raised to indicate a request was not authorized when the DryRun flag is set to "true".
public struct UnauthorizedOperation: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnauthorizedOperation" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension MigrationHubClientTypes {

    /// An ARN of the AWS cloud resource target receiving the migration (e.g., AMI, EC2 instance, RDS instance, etc.).
    public struct CreatedArtifact: Swift.Sendable {
        /// A description that can be free-form text to record additional detail about the artifact for clarity or for later reference.
        public var description: Swift.String?
        /// An ARN that uniquely identifies the result of a migration task.
        /// This member is required.
        public var name: Swift.String?

        public init(
            description: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.description = description
            self.name = name
        }
    }
}

public struct AssociateCreatedArtifactInput: Swift.Sendable {
    /// An ARN of the AWS resource related to the migration (e.g., AMI, EC2 instance, RDS instance, etc.)
    /// This member is required.
    public var createdArtifact: MigrationHubClientTypes.CreatedArtifact?
    /// Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.
    public var dryRun: Swift.Bool?
    /// Unique identifier that references the migration task. Do not store personal data in this field.
    /// This member is required.
    public var migrationTaskName: Swift.String?
    /// The name of the ProgressUpdateStream.
    /// This member is required.
    public var progressUpdateStream: Swift.String?

    public init(
        createdArtifact: MigrationHubClientTypes.CreatedArtifact? = nil,
        dryRun: Swift.Bool? = false,
        migrationTaskName: Swift.String? = nil,
        progressUpdateStream: Swift.String? = nil
    )
    {
        self.createdArtifact = createdArtifact
        self.dryRun = dryRun
        self.migrationTaskName = migrationTaskName
        self.progressUpdateStream = progressUpdateStream
    }
}

public struct AssociateCreatedArtifactOutput: Swift.Sendable {

    public init() { }
}

/// Exception raised when there are problems accessing Application Discovery Service (Application Discovery Service); most likely due to a misconfigured policy or the migrationhub-discovery role is missing or not configured correctly.
public struct PolicyErrorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PolicyErrorException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension MigrationHubClientTypes {

    /// Object representing the on-premises resource being migrated.
    public struct DiscoveredResource: Swift.Sendable {
        /// The configurationId in Application Discovery Service that uniquely identifies the on-premise resource.
        /// This member is required.
        public var configurationId: Swift.String?
        /// A description that can be free-form text to record additional detail about the discovered resource for clarity or later reference.
        public var description: Swift.String?

        public init(
            configurationId: Swift.String? = nil,
            description: Swift.String? = nil
        )
        {
            self.configurationId = configurationId
            self.description = description
        }
    }
}

public struct AssociateDiscoveredResourceInput: Swift.Sendable {
    /// Object representing a Resource.
    /// This member is required.
    public var discoveredResource: MigrationHubClientTypes.DiscoveredResource?
    /// Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.
    public var dryRun: Swift.Bool?
    /// The identifier given to the MigrationTask. Do not store personal data in this field.
    /// This member is required.
    public var migrationTaskName: Swift.String?
    /// The name of the ProgressUpdateStream.
    /// This member is required.
    public var progressUpdateStream: Swift.String?

    public init(
        discoveredResource: MigrationHubClientTypes.DiscoveredResource? = nil,
        dryRun: Swift.Bool? = false,
        migrationTaskName: Swift.String? = nil,
        progressUpdateStream: Swift.String? = nil
    )
    {
        self.discoveredResource = discoveredResource
        self.dryRun = dryRun
        self.migrationTaskName = migrationTaskName
        self.progressUpdateStream = progressUpdateStream
    }
}

public struct AssociateDiscoveredResourceOutput: Swift.Sendable {

    public init() { }
}

public struct CreateProgressUpdateStreamInput: Swift.Sendable {
    /// Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.
    public var dryRun: Swift.Bool?
    /// The name of the ProgressUpdateStream. Do not store personal data in this field.
    /// This member is required.
    public var progressUpdateStreamName: Swift.String?

    public init(
        dryRun: Swift.Bool? = false,
        progressUpdateStreamName: Swift.String? = nil
    )
    {
        self.dryRun = dryRun
        self.progressUpdateStreamName = progressUpdateStreamName
    }
}

public struct CreateProgressUpdateStreamOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteProgressUpdateStreamInput: Swift.Sendable {
    /// Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.
    public var dryRun: Swift.Bool?
    /// The name of the ProgressUpdateStream. Do not store personal data in this field.
    /// This member is required.
    public var progressUpdateStreamName: Swift.String?

    public init(
        dryRun: Swift.Bool? = false,
        progressUpdateStreamName: Swift.String? = nil
    )
    {
        self.dryRun = dryRun
        self.progressUpdateStreamName = progressUpdateStreamName
    }
}

public struct DeleteProgressUpdateStreamOutput: Swift.Sendable {

    public init() { }
}

public struct DescribeApplicationStateInput: Swift.Sendable {
    /// The configurationId in Application Discovery Service that uniquely identifies the grouped application.
    /// This member is required.
    public var applicationId: Swift.String?

    public init(
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

public struct DescribeApplicationStateOutput: Swift.Sendable {
    /// Status of the application - Not Started, In-Progress, Complete.
    public var applicationStatus: MigrationHubClientTypes.ApplicationStatus?
    /// The timestamp when the application status was last updated.
    public var lastUpdatedTime: Foundation.Date?

    public init(
        applicationStatus: MigrationHubClientTypes.ApplicationStatus? = nil,
        lastUpdatedTime: Foundation.Date? = nil
    )
    {
        self.applicationStatus = applicationStatus
        self.lastUpdatedTime = lastUpdatedTime
    }
}

public struct DescribeMigrationTaskInput: Swift.Sendable {
    /// The identifier given to the MigrationTask. Do not store personal data in this field.
    /// This member is required.
    public var migrationTaskName: Swift.String?
    /// The name of the ProgressUpdateStream.
    /// This member is required.
    public var progressUpdateStream: Swift.String?

    public init(
        migrationTaskName: Swift.String? = nil,
        progressUpdateStream: Swift.String? = nil
    )
    {
        self.migrationTaskName = migrationTaskName
        self.progressUpdateStream = progressUpdateStream
    }
}

extension MigrationHubClientTypes {

    public enum ResourceAttributeType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case biosId
        case fqdn
        case ipv4Address
        case ipv6Address
        case macAddress
        case motherboardSerialNumber
        case vmManagedObjectReference
        case vmManagerId
        case vmName
        case vmPath
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceAttributeType] {
            return [
                .biosId,
                .fqdn,
                .ipv4Address,
                .ipv6Address,
                .macAddress,
                .motherboardSerialNumber,
                .vmManagedObjectReference,
                .vmManagerId,
                .vmName,
                .vmPath
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .biosId: return "BIOS_ID"
            case .fqdn: return "FQDN"
            case .ipv4Address: return "IPV4_ADDRESS"
            case .ipv6Address: return "IPV6_ADDRESS"
            case .macAddress: return "MAC_ADDRESS"
            case .motherboardSerialNumber: return "MOTHERBOARD_SERIAL_NUMBER"
            case .vmManagedObjectReference: return "VM_MANAGED_OBJECT_REFERENCE"
            case .vmManagerId: return "VM_MANAGER_ID"
            case .vmName: return "VM_NAME"
            case .vmPath: return "VM_PATH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MigrationHubClientTypes {

    /// Attribute associated with a resource. Note the corresponding format required per type listed below: IPV4 x.x.x.x where x is an integer in the range [0,255] IPV6 y : y : y : y : y : y : y : y where y is a hexadecimal between 0 and FFFF. [0, FFFF] MAC_ADDRESS ^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$ FQDN ^[^<>{}\\/?,=\p{Cntrl}]{1,256}$
    public struct ResourceAttribute: Swift.Sendable {
        /// Type of resource.
        /// This member is required.
        public var type: MigrationHubClientTypes.ResourceAttributeType?
        /// Value of the resource type.
        /// This member is required.
        public var value: Swift.String?

        public init(
            type: MigrationHubClientTypes.ResourceAttributeType? = nil,
            value: Swift.String? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }
}

extension MigrationHubClientTypes {

    public enum Status: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case notStarted
        case sdkUnknown(Swift.String)

        public static var allCases: [Status] {
            return [
                .completed,
                .failed,
                .inProgress,
                .notStarted
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .notStarted: return "NOT_STARTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MigrationHubClientTypes {

    /// Task object encapsulating task information.
    public struct Task: Swift.Sendable {
        /// Indication of the percentage completion of the task.
        public var progressPercent: Swift.Int?
        /// Status of the task - Not Started, In-Progress, Complete.
        /// This member is required.
        public var status: MigrationHubClientTypes.Status?
        /// Details of task status as notified by a migration tool. A tool might use this field to provide clarifying information about the status that is unique to that tool or that explains an error state.
        public var statusDetail: Swift.String?

        public init(
            progressPercent: Swift.Int? = nil,
            status: MigrationHubClientTypes.Status? = nil,
            statusDetail: Swift.String? = nil
        )
        {
            self.progressPercent = progressPercent
            self.status = status
            self.statusDetail = statusDetail
        }
    }
}

extension MigrationHubClientTypes {

    /// Represents a migration task in a migration tool.
    public struct MigrationTask: Swift.Sendable {
        /// Unique identifier that references the migration task. Do not store personal data in this field.
        public var migrationTaskName: Swift.String?
        /// A name that identifies the vendor of the migration tool being used.
        public var progressUpdateStream: Swift.String?
        /// Information about the resource that is being migrated. This data will be used to map the task to a resource in the Application Discovery Service repository.
        public var resourceAttributeList: [MigrationHubClientTypes.ResourceAttribute]?
        /// Task object encapsulating task information.
        public var task: MigrationHubClientTypes.Task?
        /// The timestamp when the task was gathered.
        public var updateDateTime: Foundation.Date?

        public init(
            migrationTaskName: Swift.String? = nil,
            progressUpdateStream: Swift.String? = nil,
            resourceAttributeList: [MigrationHubClientTypes.ResourceAttribute]? = nil,
            task: MigrationHubClientTypes.Task? = nil,
            updateDateTime: Foundation.Date? = nil
        )
        {
            self.migrationTaskName = migrationTaskName
            self.progressUpdateStream = progressUpdateStream
            self.resourceAttributeList = resourceAttributeList
            self.task = task
            self.updateDateTime = updateDateTime
        }
    }
}

public struct DescribeMigrationTaskOutput: Swift.Sendable {
    /// Object encapsulating information about the migration task.
    public var migrationTask: MigrationHubClientTypes.MigrationTask?

    public init(
        migrationTask: MigrationHubClientTypes.MigrationTask? = nil
    )
    {
        self.migrationTask = migrationTask
    }
}

public struct DisassociateCreatedArtifactInput: Swift.Sendable {
    /// An ARN of the AWS resource related to the migration (e.g., AMI, EC2 instance, RDS instance, etc.)
    /// This member is required.
    public var createdArtifactName: Swift.String?
    /// Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.
    public var dryRun: Swift.Bool?
    /// Unique identifier that references the migration task to be disassociated with the artifact. Do not store personal data in this field.
    /// This member is required.
    public var migrationTaskName: Swift.String?
    /// The name of the ProgressUpdateStream.
    /// This member is required.
    public var progressUpdateStream: Swift.String?

    public init(
        createdArtifactName: Swift.String? = nil,
        dryRun: Swift.Bool? = false,
        migrationTaskName: Swift.String? = nil,
        progressUpdateStream: Swift.String? = nil
    )
    {
        self.createdArtifactName = createdArtifactName
        self.dryRun = dryRun
        self.migrationTaskName = migrationTaskName
        self.progressUpdateStream = progressUpdateStream
    }
}

public struct DisassociateCreatedArtifactOutput: Swift.Sendable {

    public init() { }
}

public struct DisassociateDiscoveredResourceInput: Swift.Sendable {
    /// ConfigurationId of the Application Discovery Service resource to be disassociated.
    /// This member is required.
    public var configurationId: Swift.String?
    /// Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.
    public var dryRun: Swift.Bool?
    /// The identifier given to the MigrationTask. Do not store personal data in this field.
    /// This member is required.
    public var migrationTaskName: Swift.String?
    /// The name of the ProgressUpdateStream.
    /// This member is required.
    public var progressUpdateStream: Swift.String?

    public init(
        configurationId: Swift.String? = nil,
        dryRun: Swift.Bool? = false,
        migrationTaskName: Swift.String? = nil,
        progressUpdateStream: Swift.String? = nil
    )
    {
        self.configurationId = configurationId
        self.dryRun = dryRun
        self.migrationTaskName = migrationTaskName
        self.progressUpdateStream = progressUpdateStream
    }
}

public struct DisassociateDiscoveredResourceOutput: Swift.Sendable {

    public init() { }
}

public struct ImportMigrationTaskInput: Swift.Sendable {
    /// Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.
    public var dryRun: Swift.Bool?
    /// Unique identifier that references the migration task. Do not store personal data in this field.
    /// This member is required.
    public var migrationTaskName: Swift.String?
    /// The name of the ProgressUpdateStream. >
    /// This member is required.
    public var progressUpdateStream: Swift.String?

    public init(
        dryRun: Swift.Bool? = false,
        migrationTaskName: Swift.String? = nil,
        progressUpdateStream: Swift.String? = nil
    )
    {
        self.dryRun = dryRun
        self.migrationTaskName = migrationTaskName
        self.progressUpdateStream = progressUpdateStream
    }
}

public struct ImportMigrationTaskOutput: Swift.Sendable {

    public init() { }
}

public struct ListApplicationStatesInput: Swift.Sendable {
    /// The configurationIds from the Application Discovery Service that uniquely identifies your applications.
    public var applicationIds: [Swift.String]?
    /// Maximum number of results to be returned per page.
    public var maxResults: Swift.Int?
    /// If a NextToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in NextToken.
    public var nextToken: Swift.String?

    public init(
        applicationIds: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.applicationIds = applicationIds
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListApplicationStatesOutput: Swift.Sendable {
    /// A list of Applications that exist in Application Discovery Service.
    public var applicationStateList: [MigrationHubClientTypes.ApplicationState]?
    /// If a NextToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in NextToken.
    public var nextToken: Swift.String?

    public init(
        applicationStateList: [MigrationHubClientTypes.ApplicationState]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.applicationStateList = applicationStateList
        self.nextToken = nextToken
    }
}

public struct ListCreatedArtifactsInput: Swift.Sendable {
    /// Maximum number of results to be returned per page.
    public var maxResults: Swift.Int?
    /// Unique identifier that references the migration task. Do not store personal data in this field.
    /// This member is required.
    public var migrationTaskName: Swift.String?
    /// If a NextToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in NextToken.
    public var nextToken: Swift.String?
    /// The name of the ProgressUpdateStream.
    /// This member is required.
    public var progressUpdateStream: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        migrationTaskName: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        progressUpdateStream: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.migrationTaskName = migrationTaskName
        self.nextToken = nextToken
        self.progressUpdateStream = progressUpdateStream
    }
}

public struct ListCreatedArtifactsOutput: Swift.Sendable {
    /// List of created artifacts up to the maximum number of results specified in the request.
    public var createdArtifactList: [MigrationHubClientTypes.CreatedArtifact]?
    /// If there are more created artifacts than the max result, return the next token to be passed to the next call as a bookmark of where to start from.
    public var nextToken: Swift.String?

    public init(
        createdArtifactList: [MigrationHubClientTypes.CreatedArtifact]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.createdArtifactList = createdArtifactList
        self.nextToken = nextToken
    }
}

public struct ListDiscoveredResourcesInput: Swift.Sendable {
    /// The maximum number of results returned per page.
    public var maxResults: Swift.Int?
    /// The name of the MigrationTask. Do not store personal data in this field.
    /// This member is required.
    public var migrationTaskName: Swift.String?
    /// If a NextToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in NextToken.
    public var nextToken: Swift.String?
    /// The name of the ProgressUpdateStream.
    /// This member is required.
    public var progressUpdateStream: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        migrationTaskName: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        progressUpdateStream: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.migrationTaskName = migrationTaskName
        self.nextToken = nextToken
        self.progressUpdateStream = progressUpdateStream
    }
}

public struct ListDiscoveredResourcesOutput: Swift.Sendable {
    /// Returned list of discovered resources associated with the given MigrationTask.
    public var discoveredResourceList: [MigrationHubClientTypes.DiscoveredResource]?
    /// If there are more discovered resources than the max result, return the next token to be passed to the next call as a bookmark of where to start from.
    public var nextToken: Swift.String?

    public init(
        discoveredResourceList: [MigrationHubClientTypes.DiscoveredResource]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.discoveredResourceList = discoveredResourceList
        self.nextToken = nextToken
    }
}

public struct ListMigrationTasksInput: Swift.Sendable {
    /// Value to specify how many results are returned per page.
    public var maxResults: Swift.Int?
    /// If a NextToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in NextToken.
    public var nextToken: Swift.String?
    /// Filter migration tasks by discovered resource name.
    public var resourceName: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceName = resourceName
    }
}

extension MigrationHubClientTypes {

    /// MigrationTaskSummary includes MigrationTaskName, ProgressPercent, ProgressUpdateStream, Status, and UpdateDateTime for each task.
    public struct MigrationTaskSummary: Swift.Sendable {
        /// Unique identifier that references the migration task. Do not store personal data in this field.
        public var migrationTaskName: Swift.String?
        /// Indication of the percentage completion of the task.
        public var progressPercent: Swift.Int?
        /// An AWS resource used for access control. It should uniquely identify the migration tool as it is used for all updates made by the tool.
        public var progressUpdateStream: Swift.String?
        /// Status of the task.
        public var status: MigrationHubClientTypes.Status?
        /// Detail information of what is being done within the overall status state.
        public var statusDetail: Swift.String?
        /// The timestamp when the task was gathered.
        public var updateDateTime: Foundation.Date?

        public init(
            migrationTaskName: Swift.String? = nil,
            progressPercent: Swift.Int? = nil,
            progressUpdateStream: Swift.String? = nil,
            status: MigrationHubClientTypes.Status? = nil,
            statusDetail: Swift.String? = nil,
            updateDateTime: Foundation.Date? = nil
        )
        {
            self.migrationTaskName = migrationTaskName
            self.progressPercent = progressPercent
            self.progressUpdateStream = progressUpdateStream
            self.status = status
            self.statusDetail = statusDetail
            self.updateDateTime = updateDateTime
        }
    }
}

public struct ListMigrationTasksOutput: Swift.Sendable {
    /// Lists the migration task's summary which includes: MigrationTaskName, ProgressPercent, ProgressUpdateStream, Status, and the UpdateDateTime for each task.
    public var migrationTaskSummaryList: [MigrationHubClientTypes.MigrationTaskSummary]?
    /// If there are more migration tasks than the max result, return the next token to be passed to the next call as a bookmark of where to start from.
    public var nextToken: Swift.String?

    public init(
        migrationTaskSummaryList: [MigrationHubClientTypes.MigrationTaskSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.migrationTaskSummaryList = migrationTaskSummaryList
        self.nextToken = nextToken
    }
}

public struct ListProgressUpdateStreamsInput: Swift.Sendable {
    /// Filter to limit the maximum number of results to list per page.
    public var maxResults: Swift.Int?
    /// If a NextToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in NextToken.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension MigrationHubClientTypes {

    /// Summary of the AWS resource used for access control that is implicitly linked to your AWS account.
    public struct ProgressUpdateStreamSummary: Swift.Sendable {
        /// The name of the ProgressUpdateStream. Do not store personal data in this field.
        public var progressUpdateStreamName: Swift.String?

        public init(
            progressUpdateStreamName: Swift.String? = nil
        )
        {
            self.progressUpdateStreamName = progressUpdateStreamName
        }
    }
}

public struct ListProgressUpdateStreamsOutput: Swift.Sendable {
    /// If there are more streams created than the max result, return the next token to be passed to the next call as a bookmark of where to start from.
    public var nextToken: Swift.String?
    /// List of progress update streams up to the max number of results passed in the input.
    public var progressUpdateStreamSummaryList: [MigrationHubClientTypes.ProgressUpdateStreamSummary]?

    public init(
        nextToken: Swift.String? = nil,
        progressUpdateStreamSummaryList: [MigrationHubClientTypes.ProgressUpdateStreamSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.progressUpdateStreamSummaryList = progressUpdateStreamSummaryList
    }
}

public struct NotifyApplicationStateInput: Swift.Sendable {
    /// The configurationId in Application Discovery Service that uniquely identifies the grouped application.
    /// This member is required.
    public var applicationId: Swift.String?
    /// Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.
    public var dryRun: Swift.Bool?
    /// Status of the application - Not Started, In-Progress, Complete.
    /// This member is required.
    public var status: MigrationHubClientTypes.ApplicationStatus?
    /// The timestamp when the application state changed.
    public var updateDateTime: Foundation.Date?

    public init(
        applicationId: Swift.String? = nil,
        dryRun: Swift.Bool? = false,
        status: MigrationHubClientTypes.ApplicationStatus? = nil,
        updateDateTime: Foundation.Date? = nil
    )
    {
        self.applicationId = applicationId
        self.dryRun = dryRun
        self.status = status
        self.updateDateTime = updateDateTime
    }
}

public struct NotifyApplicationStateOutput: Swift.Sendable {

    public init() { }
}

public struct NotifyMigrationTaskStateInput: Swift.Sendable {
    /// Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.
    public var dryRun: Swift.Bool?
    /// Unique identifier that references the migration task. Do not store personal data in this field.
    /// This member is required.
    public var migrationTaskName: Swift.String?
    /// Number of seconds after the UpdateDateTime within which the Migration Hub can expect an update. If Migration Hub does not receive an update within the specified interval, then the migration task will be considered stale.
    /// This member is required.
    public var nextUpdateSeconds: Swift.Int?
    /// The name of the ProgressUpdateStream.
    /// This member is required.
    public var progressUpdateStream: Swift.String?
    /// Information about the task's progress and status.
    /// This member is required.
    public var task: MigrationHubClientTypes.Task?
    /// The timestamp when the task was gathered.
    /// This member is required.
    public var updateDateTime: Foundation.Date?

    public init(
        dryRun: Swift.Bool? = false,
        migrationTaskName: Swift.String? = nil,
        nextUpdateSeconds: Swift.Int? = 0,
        progressUpdateStream: Swift.String? = nil,
        task: MigrationHubClientTypes.Task? = nil,
        updateDateTime: Foundation.Date? = nil
    )
    {
        self.dryRun = dryRun
        self.migrationTaskName = migrationTaskName
        self.nextUpdateSeconds = nextUpdateSeconds
        self.progressUpdateStream = progressUpdateStream
        self.task = task
        self.updateDateTime = updateDateTime
    }
}

public struct NotifyMigrationTaskStateOutput: Swift.Sendable {

    public init() { }
}

public struct PutResourceAttributesInput: Swift.Sendable {
    /// Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.
    public var dryRun: Swift.Bool?
    /// Unique identifier that references the migration task. Do not store personal data in this field.
    /// This member is required.
    public var migrationTaskName: Swift.String?
    /// The name of the ProgressUpdateStream.
    /// This member is required.
    public var progressUpdateStream: Swift.String?
    /// Information about the resource that is being migrated. This data will be used to map the task to a resource in the Application Discovery Service repository. Takes the object array of ResourceAttribute where the Type field is reserved for the following values: IPV4_ADDRESS | IPV6_ADDRESS | MAC_ADDRESS | FQDN | VM_MANAGER_ID | VM_MANAGED_OBJECT_REFERENCE | VM_NAME | VM_PATH | BIOS_ID | MOTHERBOARD_SERIAL_NUMBER where the identifying value can be a string up to 256 characters.
    ///
    /// * If any "VM" related value is set for a ResourceAttribute object, it is required that VM_MANAGER_ID, as a minimum, is always set. If VM_MANAGER_ID is not set, then all "VM" fields will be discarded and "VM" fields will not be used for matching the migration task to a server in Application Discovery Service repository. See the [Example](https://docs.aws.amazon.com/migrationhub/latest/ug/API_PutResourceAttributes.html#API_PutResourceAttributes_Examples) section below for a use case of specifying "VM" related values.
    ///
    /// * If a server you are trying to match has multiple IP or MAC addresses, you should provide as many as you know in separate type/value pairs passed to the ResourceAttributeList parameter to maximize the chances of matching.
    /// This member is required.
    public var resourceAttributeList: [MigrationHubClientTypes.ResourceAttribute]?

    public init(
        dryRun: Swift.Bool? = false,
        migrationTaskName: Swift.String? = nil,
        progressUpdateStream: Swift.String? = nil,
        resourceAttributeList: [MigrationHubClientTypes.ResourceAttribute]? = nil
    )
    {
        self.dryRun = dryRun
        self.migrationTaskName = migrationTaskName
        self.progressUpdateStream = progressUpdateStream
        self.resourceAttributeList = resourceAttributeList
    }
}

public struct PutResourceAttributesOutput: Swift.Sendable {

    public init() { }
}

extension AssociateCreatedArtifactInput {

    static func urlPathProvider(_ value: AssociateCreatedArtifactInput) -> Swift.String? {
        return "/"
    }
}

extension AssociateDiscoveredResourceInput {

    static func urlPathProvider(_ value: AssociateDiscoveredResourceInput) -> Swift.String? {
        return "/"
    }
}

extension CreateProgressUpdateStreamInput {

    static func urlPathProvider(_ value: CreateProgressUpdateStreamInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteProgressUpdateStreamInput {

    static func urlPathProvider(_ value: DeleteProgressUpdateStreamInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeApplicationStateInput {

    static func urlPathProvider(_ value: DescribeApplicationStateInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeMigrationTaskInput {

    static func urlPathProvider(_ value: DescribeMigrationTaskInput) -> Swift.String? {
        return "/"
    }
}

extension DisassociateCreatedArtifactInput {

    static func urlPathProvider(_ value: DisassociateCreatedArtifactInput) -> Swift.String? {
        return "/"
    }
}

extension DisassociateDiscoveredResourceInput {

    static func urlPathProvider(_ value: DisassociateDiscoveredResourceInput) -> Swift.String? {
        return "/"
    }
}

extension ImportMigrationTaskInput {

    static func urlPathProvider(_ value: ImportMigrationTaskInput) -> Swift.String? {
        return "/"
    }
}

extension ListApplicationStatesInput {

    static func urlPathProvider(_ value: ListApplicationStatesInput) -> Swift.String? {
        return "/"
    }
}

extension ListCreatedArtifactsInput {

    static func urlPathProvider(_ value: ListCreatedArtifactsInput) -> Swift.String? {
        return "/"
    }
}

extension ListDiscoveredResourcesInput {

    static func urlPathProvider(_ value: ListDiscoveredResourcesInput) -> Swift.String? {
        return "/"
    }
}

extension ListMigrationTasksInput {

    static func urlPathProvider(_ value: ListMigrationTasksInput) -> Swift.String? {
        return "/"
    }
}

extension ListProgressUpdateStreamsInput {

    static func urlPathProvider(_ value: ListProgressUpdateStreamsInput) -> Swift.String? {
        return "/"
    }
}

extension NotifyApplicationStateInput {

    static func urlPathProvider(_ value: NotifyApplicationStateInput) -> Swift.String? {
        return "/"
    }
}

extension NotifyMigrationTaskStateInput {

    static func urlPathProvider(_ value: NotifyMigrationTaskStateInput) -> Swift.String? {
        return "/"
    }
}

extension PutResourceAttributesInput {

    static func urlPathProvider(_ value: PutResourceAttributesInput) -> Swift.String? {
        return "/"
    }
}

extension AssociateCreatedArtifactInput {

    static func write(value: AssociateCreatedArtifactInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreatedArtifact"].write(value.createdArtifact, with: MigrationHubClientTypes.CreatedArtifact.write(value:to:))
        try writer["DryRun"].write(value.dryRun)
        try writer["MigrationTaskName"].write(value.migrationTaskName)
        try writer["ProgressUpdateStream"].write(value.progressUpdateStream)
    }
}

extension AssociateDiscoveredResourceInput {

    static func write(value: AssociateDiscoveredResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DiscoveredResource"].write(value.discoveredResource, with: MigrationHubClientTypes.DiscoveredResource.write(value:to:))
        try writer["DryRun"].write(value.dryRun)
        try writer["MigrationTaskName"].write(value.migrationTaskName)
        try writer["ProgressUpdateStream"].write(value.progressUpdateStream)
    }
}

extension CreateProgressUpdateStreamInput {

    static func write(value: CreateProgressUpdateStreamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DryRun"].write(value.dryRun)
        try writer["ProgressUpdateStreamName"].write(value.progressUpdateStreamName)
    }
}

extension DeleteProgressUpdateStreamInput {

    static func write(value: DeleteProgressUpdateStreamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DryRun"].write(value.dryRun)
        try writer["ProgressUpdateStreamName"].write(value.progressUpdateStreamName)
    }
}

extension DescribeApplicationStateInput {

    static func write(value: DescribeApplicationStateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ApplicationId"].write(value.applicationId)
    }
}

extension DescribeMigrationTaskInput {

    static func write(value: DescribeMigrationTaskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MigrationTaskName"].write(value.migrationTaskName)
        try writer["ProgressUpdateStream"].write(value.progressUpdateStream)
    }
}

extension DisassociateCreatedArtifactInput {

    static func write(value: DisassociateCreatedArtifactInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreatedArtifactName"].write(value.createdArtifactName)
        try writer["DryRun"].write(value.dryRun)
        try writer["MigrationTaskName"].write(value.migrationTaskName)
        try writer["ProgressUpdateStream"].write(value.progressUpdateStream)
    }
}

extension DisassociateDiscoveredResourceInput {

    static func write(value: DisassociateDiscoveredResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfigurationId"].write(value.configurationId)
        try writer["DryRun"].write(value.dryRun)
        try writer["MigrationTaskName"].write(value.migrationTaskName)
        try writer["ProgressUpdateStream"].write(value.progressUpdateStream)
    }
}

extension ImportMigrationTaskInput {

    static func write(value: ImportMigrationTaskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DryRun"].write(value.dryRun)
        try writer["MigrationTaskName"].write(value.migrationTaskName)
        try writer["ProgressUpdateStream"].write(value.progressUpdateStream)
    }
}

extension ListApplicationStatesInput {

    static func write(value: ListApplicationStatesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ApplicationIds"].writeList(value.applicationIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListCreatedArtifactsInput {

    static func write(value: ListCreatedArtifactsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["MigrationTaskName"].write(value.migrationTaskName)
        try writer["NextToken"].write(value.nextToken)
        try writer["ProgressUpdateStream"].write(value.progressUpdateStream)
    }
}

extension ListDiscoveredResourcesInput {

    static func write(value: ListDiscoveredResourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["MigrationTaskName"].write(value.migrationTaskName)
        try writer["NextToken"].write(value.nextToken)
        try writer["ProgressUpdateStream"].write(value.progressUpdateStream)
    }
}

extension ListMigrationTasksInput {

    static func write(value: ListMigrationTasksInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ResourceName"].write(value.resourceName)
    }
}

extension ListProgressUpdateStreamsInput {

    static func write(value: ListProgressUpdateStreamsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension NotifyApplicationStateInput {

    static func write(value: NotifyApplicationStateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ApplicationId"].write(value.applicationId)
        try writer["DryRun"].write(value.dryRun)
        try writer["Status"].write(value.status)
        try writer["UpdateDateTime"].writeTimestamp(value.updateDateTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension NotifyMigrationTaskStateInput {

    static func write(value: NotifyMigrationTaskStateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DryRun"].write(value.dryRun)
        try writer["MigrationTaskName"].write(value.migrationTaskName)
        try writer["NextUpdateSeconds"].write(value.nextUpdateSeconds)
        try writer["ProgressUpdateStream"].write(value.progressUpdateStream)
        try writer["Task"].write(value.task, with: MigrationHubClientTypes.Task.write(value:to:))
        try writer["UpdateDateTime"].writeTimestamp(value.updateDateTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension PutResourceAttributesInput {

    static func write(value: PutResourceAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DryRun"].write(value.dryRun)
        try writer["MigrationTaskName"].write(value.migrationTaskName)
        try writer["ProgressUpdateStream"].write(value.progressUpdateStream)
        try writer["ResourceAttributeList"].writeList(value.resourceAttributeList, memberWritingClosure: MigrationHubClientTypes.ResourceAttribute.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension AssociateCreatedArtifactOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateCreatedArtifactOutput {
        return AssociateCreatedArtifactOutput()
    }
}

extension AssociateDiscoveredResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateDiscoveredResourceOutput {
        return AssociateDiscoveredResourceOutput()
    }
}

extension CreateProgressUpdateStreamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateProgressUpdateStreamOutput {
        return CreateProgressUpdateStreamOutput()
    }
}

extension DeleteProgressUpdateStreamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteProgressUpdateStreamOutput {
        return DeleteProgressUpdateStreamOutput()
    }
}

extension DescribeApplicationStateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeApplicationStateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeApplicationStateOutput()
        value.applicationStatus = try reader["ApplicationStatus"].readIfPresent()
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension DescribeMigrationTaskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeMigrationTaskOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeMigrationTaskOutput()
        value.migrationTask = try reader["MigrationTask"].readIfPresent(with: MigrationHubClientTypes.MigrationTask.read(from:))
        return value
    }
}

extension DisassociateCreatedArtifactOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateCreatedArtifactOutput {
        return DisassociateCreatedArtifactOutput()
    }
}

extension DisassociateDiscoveredResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateDiscoveredResourceOutput {
        return DisassociateDiscoveredResourceOutput()
    }
}

extension ImportMigrationTaskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ImportMigrationTaskOutput {
        return ImportMigrationTaskOutput()
    }
}

extension ListApplicationStatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListApplicationStatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListApplicationStatesOutput()
        value.applicationStateList = try reader["ApplicationStateList"].readListIfPresent(memberReadingClosure: MigrationHubClientTypes.ApplicationState.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListCreatedArtifactsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListCreatedArtifactsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListCreatedArtifactsOutput()
        value.createdArtifactList = try reader["CreatedArtifactList"].readListIfPresent(memberReadingClosure: MigrationHubClientTypes.CreatedArtifact.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDiscoveredResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDiscoveredResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDiscoveredResourcesOutput()
        value.discoveredResourceList = try reader["DiscoveredResourceList"].readListIfPresent(memberReadingClosure: MigrationHubClientTypes.DiscoveredResource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListMigrationTasksOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListMigrationTasksOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListMigrationTasksOutput()
        value.migrationTaskSummaryList = try reader["MigrationTaskSummaryList"].readListIfPresent(memberReadingClosure: MigrationHubClientTypes.MigrationTaskSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListProgressUpdateStreamsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListProgressUpdateStreamsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListProgressUpdateStreamsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.progressUpdateStreamSummaryList = try reader["ProgressUpdateStreamSummaryList"].readListIfPresent(memberReadingClosure: MigrationHubClientTypes.ProgressUpdateStreamSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension NotifyApplicationStateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> NotifyApplicationStateOutput {
        return NotifyApplicationStateOutput()
    }
}

extension NotifyMigrationTaskStateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> NotifyMigrationTaskStateOutput {
        return NotifyMigrationTaskStateOutput()
    }
}

extension PutResourceAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutResourceAttributesOutput {
        return PutResourceAttributesOutput()
    }
}

enum AssociateCreatedArtifactOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperation.makeError(baseError: baseError)
            case "HomeRegionNotSetException": return try HomeRegionNotSetException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AssociateDiscoveredResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperation.makeError(baseError: baseError)
            case "HomeRegionNotSetException": return try HomeRegionNotSetException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "PolicyErrorException": return try PolicyErrorException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateProgressUpdateStreamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperation.makeError(baseError: baseError)
            case "HomeRegionNotSetException": return try HomeRegionNotSetException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteProgressUpdateStreamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperation.makeError(baseError: baseError)
            case "HomeRegionNotSetException": return try HomeRegionNotSetException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeApplicationStateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "HomeRegionNotSetException": return try HomeRegionNotSetException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "PolicyErrorException": return try PolicyErrorException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeMigrationTaskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "HomeRegionNotSetException": return try HomeRegionNotSetException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateCreatedArtifactOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperation.makeError(baseError: baseError)
            case "HomeRegionNotSetException": return try HomeRegionNotSetException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateDiscoveredResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperation.makeError(baseError: baseError)
            case "HomeRegionNotSetException": return try HomeRegionNotSetException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ImportMigrationTaskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperation.makeError(baseError: baseError)
            case "HomeRegionNotSetException": return try HomeRegionNotSetException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListApplicationStatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "HomeRegionNotSetException": return try HomeRegionNotSetException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListCreatedArtifactsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "HomeRegionNotSetException": return try HomeRegionNotSetException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDiscoveredResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "HomeRegionNotSetException": return try HomeRegionNotSetException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListMigrationTasksOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "HomeRegionNotSetException": return try HomeRegionNotSetException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "PolicyErrorException": return try PolicyErrorException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListProgressUpdateStreamsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "HomeRegionNotSetException": return try HomeRegionNotSetException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum NotifyApplicationStateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperation.makeError(baseError: baseError)
            case "HomeRegionNotSetException": return try HomeRegionNotSetException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "PolicyErrorException": return try PolicyErrorException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum NotifyMigrationTaskStateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperation.makeError(baseError: baseError)
            case "HomeRegionNotSetException": return try HomeRegionNotSetException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutResourceAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "DryRunOperation": return try DryRunOperation.makeError(baseError: baseError)
            case "HomeRegionNotSetException": return try HomeRegionNotSetException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension UnauthorizedOperation {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnauthorizedOperation {
        let reader = baseError.errorBodyReader
        var value = UnauthorizedOperation()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerError {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerError {
        let reader = baseError.errorBodyReader
        var value = InternalServerError()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        let httpResponse = baseError.httpResponse
        var value = ThrottlingException()
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            value.properties.retryAfterSeconds = Swift.Int(retryAfterSecondsHeaderValue) ?? 0
        }
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension HomeRegionNotSetException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> HomeRegionNotSetException {
        let reader = baseError.errorBodyReader
        var value = HomeRegionNotSetException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DryRunOperation {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DryRunOperation {
        let reader = baseError.errorBodyReader
        var value = DryRunOperation()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidInputException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidInputException {
        let reader = baseError.errorBodyReader
        var value = InvalidInputException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceUnavailableException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceUnavailableException {
        let reader = baseError.errorBodyReader
        var value = ServiceUnavailableException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PolicyErrorException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PolicyErrorException {
        let reader = baseError.errorBodyReader
        var value = PolicyErrorException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MigrationHubClientTypes.MigrationTask {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubClientTypes.MigrationTask {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubClientTypes.MigrationTask()
        value.progressUpdateStream = try reader["ProgressUpdateStream"].readIfPresent()
        value.migrationTaskName = try reader["MigrationTaskName"].readIfPresent()
        value.task = try reader["Task"].readIfPresent(with: MigrationHubClientTypes.Task.read(from:))
        value.updateDateTime = try reader["UpdateDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.resourceAttributeList = try reader["ResourceAttributeList"].readListIfPresent(memberReadingClosure: MigrationHubClientTypes.ResourceAttribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MigrationHubClientTypes.ResourceAttribute {

    static func write(value: MigrationHubClientTypes.ResourceAttribute?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Type"].write(value.type)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubClientTypes.ResourceAttribute {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubClientTypes.ResourceAttribute()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension MigrationHubClientTypes.Task {

    static func write(value: MigrationHubClientTypes.Task?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ProgressPercent"].write(value.progressPercent)
        try writer["Status"].write(value.status)
        try writer["StatusDetail"].write(value.statusDetail)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubClientTypes.Task {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubClientTypes.Task()
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.statusDetail = try reader["StatusDetail"].readIfPresent()
        value.progressPercent = try reader["ProgressPercent"].readIfPresent()
        return value
    }
}

extension MigrationHubClientTypes.ApplicationState {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubClientTypes.ApplicationState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubClientTypes.ApplicationState()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.applicationStatus = try reader["ApplicationStatus"].readIfPresent()
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension MigrationHubClientTypes.CreatedArtifact {

    static func write(value: MigrationHubClientTypes.CreatedArtifact?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubClientTypes.CreatedArtifact {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubClientTypes.CreatedArtifact()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.description = try reader["Description"].readIfPresent()
        return value
    }
}

extension MigrationHubClientTypes.DiscoveredResource {

    static func write(value: MigrationHubClientTypes.DiscoveredResource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfigurationId"].write(value.configurationId)
        try writer["Description"].write(value.description)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubClientTypes.DiscoveredResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubClientTypes.DiscoveredResource()
        value.configurationId = try reader["ConfigurationId"].readIfPresent() ?? ""
        value.description = try reader["Description"].readIfPresent()
        return value
    }
}

extension MigrationHubClientTypes.MigrationTaskSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubClientTypes.MigrationTaskSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubClientTypes.MigrationTaskSummary()
        value.progressUpdateStream = try reader["ProgressUpdateStream"].readIfPresent()
        value.migrationTaskName = try reader["MigrationTaskName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.progressPercent = try reader["ProgressPercent"].readIfPresent()
        value.statusDetail = try reader["StatusDetail"].readIfPresent()
        value.updateDateTime = try reader["UpdateDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension MigrationHubClientTypes.ProgressUpdateStreamSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubClientTypes.ProgressUpdateStreamSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubClientTypes.ProgressUpdateStreamSummary()
        value.progressUpdateStreamName = try reader["ProgressUpdateStreamName"].readIfPresent()
        return value
    }
}

public enum MigrationHubClientTypes {}
