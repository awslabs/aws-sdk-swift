//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import protocol ClientRuntime.PaginateToken
import struct ClientRuntime.PaginatorSequence

extension MigrationHubClient {
    /// Paginate over `[ListApplicationStatesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListApplicationStatesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListApplicationStatesOutput`
    public func listApplicationStatesPaginated(input: ListApplicationStatesInput) -> ClientRuntime.PaginatorSequence<ListApplicationStatesInput, ListApplicationStatesOutput> {
        return ClientRuntime.PaginatorSequence<ListApplicationStatesInput, ListApplicationStatesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listApplicationStates(input:))
    }
}

extension ListApplicationStatesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListApplicationStatesInput {
        return ListApplicationStatesInput(
            applicationIds: self.applicationIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListApplicationStatesInput, OperationStackOutput == ListApplicationStatesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listApplicationStatesPaginated`
    /// to access the nested member `[MigrationHubClientTypes.ApplicationState]`
    /// - Returns: `[MigrationHubClientTypes.ApplicationState]`
    public func applicationStateList() async throws -> [MigrationHubClientTypes.ApplicationState] {
        return try await self.asyncCompactMap { item in item.applicationStateList }
    }
}
extension MigrationHubClient {
    /// Paginate over `[ListCreatedArtifactsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListCreatedArtifactsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListCreatedArtifactsOutput`
    public func listCreatedArtifactsPaginated(input: ListCreatedArtifactsInput) -> ClientRuntime.PaginatorSequence<ListCreatedArtifactsInput, ListCreatedArtifactsOutput> {
        return ClientRuntime.PaginatorSequence<ListCreatedArtifactsInput, ListCreatedArtifactsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listCreatedArtifacts(input:))
    }
}

extension ListCreatedArtifactsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListCreatedArtifactsInput {
        return ListCreatedArtifactsInput(
            maxResults: self.maxResults,
            migrationTaskName: self.migrationTaskName,
            nextToken: token,
            progressUpdateStream: self.progressUpdateStream
        )}
}

extension PaginatorSequence where OperationStackInput == ListCreatedArtifactsInput, OperationStackOutput == ListCreatedArtifactsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listCreatedArtifactsPaginated`
    /// to access the nested member `[MigrationHubClientTypes.CreatedArtifact]`
    /// - Returns: `[MigrationHubClientTypes.CreatedArtifact]`
    public func createdArtifactList() async throws -> [MigrationHubClientTypes.CreatedArtifact] {
        return try await self.asyncCompactMap { item in item.createdArtifactList }
    }
}
extension MigrationHubClient {
    /// Paginate over `[ListDiscoveredResourcesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDiscoveredResourcesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDiscoveredResourcesOutput`
    public func listDiscoveredResourcesPaginated(input: ListDiscoveredResourcesInput) -> ClientRuntime.PaginatorSequence<ListDiscoveredResourcesInput, ListDiscoveredResourcesOutput> {
        return ClientRuntime.PaginatorSequence<ListDiscoveredResourcesInput, ListDiscoveredResourcesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listDiscoveredResources(input:))
    }
}

extension ListDiscoveredResourcesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDiscoveredResourcesInput {
        return ListDiscoveredResourcesInput(
            maxResults: self.maxResults,
            migrationTaskName: self.migrationTaskName,
            nextToken: token,
            progressUpdateStream: self.progressUpdateStream
        )}
}

extension PaginatorSequence where OperationStackInput == ListDiscoveredResourcesInput, OperationStackOutput == ListDiscoveredResourcesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listDiscoveredResourcesPaginated`
    /// to access the nested member `[MigrationHubClientTypes.DiscoveredResource]`
    /// - Returns: `[MigrationHubClientTypes.DiscoveredResource]`
    public func discoveredResourceList() async throws -> [MigrationHubClientTypes.DiscoveredResource] {
        return try await self.asyncCompactMap { item in item.discoveredResourceList }
    }
}
extension MigrationHubClient {
    /// Paginate over `[ListMigrationTasksOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListMigrationTasksInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListMigrationTasksOutput`
    public func listMigrationTasksPaginated(input: ListMigrationTasksInput) -> ClientRuntime.PaginatorSequence<ListMigrationTasksInput, ListMigrationTasksOutput> {
        return ClientRuntime.PaginatorSequence<ListMigrationTasksInput, ListMigrationTasksOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listMigrationTasks(input:))
    }
}

extension ListMigrationTasksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListMigrationTasksInput {
        return ListMigrationTasksInput(
            maxResults: self.maxResults,
            nextToken: token,
            resourceName: self.resourceName
        )}
}

extension PaginatorSequence where OperationStackInput == ListMigrationTasksInput, OperationStackOutput == ListMigrationTasksOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listMigrationTasksPaginated`
    /// to access the nested member `[MigrationHubClientTypes.MigrationTaskSummary]`
    /// - Returns: `[MigrationHubClientTypes.MigrationTaskSummary]`
    public func migrationTaskSummaryList() async throws -> [MigrationHubClientTypes.MigrationTaskSummary] {
        return try await self.asyncCompactMap { item in item.migrationTaskSummaryList }
    }
}
extension MigrationHubClient {
    /// Paginate over `[ListMigrationTaskUpdatesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListMigrationTaskUpdatesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListMigrationTaskUpdatesOutput`
    public func listMigrationTaskUpdatesPaginated(input: ListMigrationTaskUpdatesInput) -> ClientRuntime.PaginatorSequence<ListMigrationTaskUpdatesInput, ListMigrationTaskUpdatesOutput> {
        return ClientRuntime.PaginatorSequence<ListMigrationTaskUpdatesInput, ListMigrationTaskUpdatesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listMigrationTaskUpdates(input:))
    }
}

extension ListMigrationTaskUpdatesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListMigrationTaskUpdatesInput {
        return ListMigrationTaskUpdatesInput(
            maxResults: self.maxResults,
            migrationTaskName: self.migrationTaskName,
            nextToken: token,
            progressUpdateStream: self.progressUpdateStream
        )}
}

extension PaginatorSequence where OperationStackInput == ListMigrationTaskUpdatesInput, OperationStackOutput == ListMigrationTaskUpdatesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listMigrationTaskUpdatesPaginated`
    /// to access the nested member `[MigrationHubClientTypes.MigrationTaskUpdate]`
    /// - Returns: `[MigrationHubClientTypes.MigrationTaskUpdate]`
    public func migrationTaskUpdateList() async throws -> [MigrationHubClientTypes.MigrationTaskUpdate] {
        return try await self.asyncCompactMap { item in item.migrationTaskUpdateList }
    }
}
extension MigrationHubClient {
    /// Paginate over `[ListProgressUpdateStreamsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListProgressUpdateStreamsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListProgressUpdateStreamsOutput`
    public func listProgressUpdateStreamsPaginated(input: ListProgressUpdateStreamsInput) -> ClientRuntime.PaginatorSequence<ListProgressUpdateStreamsInput, ListProgressUpdateStreamsOutput> {
        return ClientRuntime.PaginatorSequence<ListProgressUpdateStreamsInput, ListProgressUpdateStreamsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listProgressUpdateStreams(input:))
    }
}

extension ListProgressUpdateStreamsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListProgressUpdateStreamsInput {
        return ListProgressUpdateStreamsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListProgressUpdateStreamsInput, OperationStackOutput == ListProgressUpdateStreamsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listProgressUpdateStreamsPaginated`
    /// to access the nested member `[MigrationHubClientTypes.ProgressUpdateStreamSummary]`
    /// - Returns: `[MigrationHubClientTypes.ProgressUpdateStreamSummary]`
    public func progressUpdateStreamSummaryList() async throws -> [MigrationHubClientTypes.ProgressUpdateStreamSummary] {
        return try await self.asyncCompactMap { item in item.progressUpdateStreamSummaryList }
    }
}
extension MigrationHubClient {
    /// Paginate over `[ListSourceResourcesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListSourceResourcesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListSourceResourcesOutput`
    public func listSourceResourcesPaginated(input: ListSourceResourcesInput) -> ClientRuntime.PaginatorSequence<ListSourceResourcesInput, ListSourceResourcesOutput> {
        return ClientRuntime.PaginatorSequence<ListSourceResourcesInput, ListSourceResourcesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listSourceResources(input:))
    }
}

extension ListSourceResourcesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSourceResourcesInput {
        return ListSourceResourcesInput(
            maxResults: self.maxResults,
            migrationTaskName: self.migrationTaskName,
            nextToken: token,
            progressUpdateStream: self.progressUpdateStream
        )}
}

extension PaginatorSequence where OperationStackInput == ListSourceResourcesInput, OperationStackOutput == ListSourceResourcesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listSourceResourcesPaginated`
    /// to access the nested member `[MigrationHubClientTypes.SourceResource]`
    /// - Returns: `[MigrationHubClientTypes.SourceResource]`
    public func sourceResourceList() async throws -> [MigrationHubClientTypes.SourceResource] {
        return try await self.asyncCompactMap { item in item.sourceResourceList }
    }
}
