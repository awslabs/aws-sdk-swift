// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MigrationHubClient {
    /// Paginate over `[ListApplicationStatesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListApplicationStatesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListApplicationStatesOutputResponse`
    public func listApplicationStatesPaginated(input: ListApplicationStatesInput) -> ClientRuntime.PaginatorSequence<ListApplicationStatesInput, ListApplicationStatesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListApplicationStatesInput, ListApplicationStatesOutputResponse>(input: input, inputKey: \ListApplicationStatesInput.nextToken, outputKey: \ListApplicationStatesOutputResponse.nextToken, paginationFunction: self.listApplicationStates(input:))
    }
}

extension ListApplicationStatesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListApplicationStatesInput {
        return ListApplicationStatesInput(
            applicationIds: self.applicationIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListApplicationStatesInput, Output == ListApplicationStatesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listApplicationStatesPaginated`
    /// to access the nested member `[MigrationHubClientTypes.ApplicationState]`
    /// - Returns: `[MigrationHubClientTypes.ApplicationState]`
    public func applicationStateList() async throws -> [MigrationHubClientTypes.ApplicationState] {
        return try await self.asyncCompactMap { item in item.applicationStateList }
    }
}
extension MigrationHubClient {
    /// Paginate over `[ListCreatedArtifactsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListCreatedArtifactsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListCreatedArtifactsOutputResponse`
    public func listCreatedArtifactsPaginated(input: ListCreatedArtifactsInput) -> ClientRuntime.PaginatorSequence<ListCreatedArtifactsInput, ListCreatedArtifactsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListCreatedArtifactsInput, ListCreatedArtifactsOutputResponse>(input: input, inputKey: \ListCreatedArtifactsInput.nextToken, outputKey: \ListCreatedArtifactsOutputResponse.nextToken, paginationFunction: self.listCreatedArtifacts(input:))
    }
}

extension ListCreatedArtifactsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListCreatedArtifactsInput {
        return ListCreatedArtifactsInput(
            maxResults: self.maxResults,
            migrationTaskName: self.migrationTaskName,
            nextToken: token,
            progressUpdateStream: self.progressUpdateStream
        )}
}

extension PaginatorSequence where Input == ListCreatedArtifactsInput, Output == ListCreatedArtifactsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listCreatedArtifactsPaginated`
    /// to access the nested member `[MigrationHubClientTypes.CreatedArtifact]`
    /// - Returns: `[MigrationHubClientTypes.CreatedArtifact]`
    public func createdArtifactList() async throws -> [MigrationHubClientTypes.CreatedArtifact] {
        return try await self.asyncCompactMap { item in item.createdArtifactList }
    }
}
extension MigrationHubClient {
    /// Paginate over `[ListDiscoveredResourcesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDiscoveredResourcesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDiscoveredResourcesOutputResponse`
    public func listDiscoveredResourcesPaginated(input: ListDiscoveredResourcesInput) -> ClientRuntime.PaginatorSequence<ListDiscoveredResourcesInput, ListDiscoveredResourcesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListDiscoveredResourcesInput, ListDiscoveredResourcesOutputResponse>(input: input, inputKey: \ListDiscoveredResourcesInput.nextToken, outputKey: \ListDiscoveredResourcesOutputResponse.nextToken, paginationFunction: self.listDiscoveredResources(input:))
    }
}

extension ListDiscoveredResourcesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDiscoveredResourcesInput {
        return ListDiscoveredResourcesInput(
            maxResults: self.maxResults,
            migrationTaskName: self.migrationTaskName,
            nextToken: token,
            progressUpdateStream: self.progressUpdateStream
        )}
}

extension PaginatorSequence where Input == ListDiscoveredResourcesInput, Output == ListDiscoveredResourcesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listDiscoveredResourcesPaginated`
    /// to access the nested member `[MigrationHubClientTypes.DiscoveredResource]`
    /// - Returns: `[MigrationHubClientTypes.DiscoveredResource]`
    public func discoveredResourceList() async throws -> [MigrationHubClientTypes.DiscoveredResource] {
        return try await self.asyncCompactMap { item in item.discoveredResourceList }
    }
}
extension MigrationHubClient {
    /// Paginate over `[ListMigrationTasksOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListMigrationTasksInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListMigrationTasksOutputResponse`
    public func listMigrationTasksPaginated(input: ListMigrationTasksInput) -> ClientRuntime.PaginatorSequence<ListMigrationTasksInput, ListMigrationTasksOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListMigrationTasksInput, ListMigrationTasksOutputResponse>(input: input, inputKey: \ListMigrationTasksInput.nextToken, outputKey: \ListMigrationTasksOutputResponse.nextToken, paginationFunction: self.listMigrationTasks(input:))
    }
}

extension ListMigrationTasksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListMigrationTasksInput {
        return ListMigrationTasksInput(
            maxResults: self.maxResults,
            nextToken: token,
            resourceName: self.resourceName
        )}
}

extension PaginatorSequence where Input == ListMigrationTasksInput, Output == ListMigrationTasksOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listMigrationTasksPaginated`
    /// to access the nested member `[MigrationHubClientTypes.MigrationTaskSummary]`
    /// - Returns: `[MigrationHubClientTypes.MigrationTaskSummary]`
    public func migrationTaskSummaryList() async throws -> [MigrationHubClientTypes.MigrationTaskSummary] {
        return try await self.asyncCompactMap { item in item.migrationTaskSummaryList }
    }
}
extension MigrationHubClient {
    /// Paginate over `[ListProgressUpdateStreamsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListProgressUpdateStreamsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListProgressUpdateStreamsOutputResponse`
    public func listProgressUpdateStreamsPaginated(input: ListProgressUpdateStreamsInput) -> ClientRuntime.PaginatorSequence<ListProgressUpdateStreamsInput, ListProgressUpdateStreamsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListProgressUpdateStreamsInput, ListProgressUpdateStreamsOutputResponse>(input: input, inputKey: \ListProgressUpdateStreamsInput.nextToken, outputKey: \ListProgressUpdateStreamsOutputResponse.nextToken, paginationFunction: self.listProgressUpdateStreams(input:))
    }
}

extension ListProgressUpdateStreamsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListProgressUpdateStreamsInput {
        return ListProgressUpdateStreamsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListProgressUpdateStreamsInput, Output == ListProgressUpdateStreamsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listProgressUpdateStreamsPaginated`
    /// to access the nested member `[MigrationHubClientTypes.ProgressUpdateStreamSummary]`
    /// - Returns: `[MigrationHubClientTypes.ProgressUpdateStreamSummary]`
    public func progressUpdateStreamSummaryList() async throws -> [MigrationHubClientTypes.ProgressUpdateStreamSummary] {
        return try await self.asyncCompactMap { item in item.progressUpdateStreamSummaryList }
    }
}
