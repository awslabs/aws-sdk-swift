// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IvschatClient {
    /// Paginate over `[ListLoggingConfigurationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListLoggingConfigurationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListLoggingConfigurationsOutputResponse`
    public func listLoggingConfigurationsPaginated(input: ListLoggingConfigurationsInput) -> ClientRuntime.PaginatorSequence<ListLoggingConfigurationsInput, ListLoggingConfigurationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListLoggingConfigurationsInput, ListLoggingConfigurationsOutputResponse>(input: input, inputKey: \ListLoggingConfigurationsInput.nextToken, outputKey: \ListLoggingConfigurationsOutputResponse.nextToken, paginationFunction: self.listLoggingConfigurations(input:))
    }
}

extension ListLoggingConfigurationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListLoggingConfigurationsInput {
        return ListLoggingConfigurationsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension IvschatClient {
    /// Paginate over `[ListRoomsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListRoomsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListRoomsOutputResponse`
    public func listRoomsPaginated(input: ListRoomsInput) -> ClientRuntime.PaginatorSequence<ListRoomsInput, ListRoomsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListRoomsInput, ListRoomsOutputResponse>(input: input, inputKey: \ListRoomsInput.nextToken, outputKey: \ListRoomsOutputResponse.nextToken, paginationFunction: self.listRooms(input:))
    }
}

extension ListRoomsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListRoomsInput {
        return ListRoomsInput(
            loggingConfigurationIdentifier: self.loggingConfigurationIdentifier,
            maxResults: self.maxResults,
            messageReviewHandlerUri: self.messageReviewHandlerUri,
            name: self.name,
            nextToken: token
        )}
}
