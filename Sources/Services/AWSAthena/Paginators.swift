// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AthenaClient {
    /// Paginate over `[GetQueryResultsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetQueryResultsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetQueryResultsOutputResponse`
    public func getQueryResultsPaginated(input: GetQueryResultsInput) -> ClientRuntime.PaginatorSequence<GetQueryResultsInput, GetQueryResultsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetQueryResultsInput, GetQueryResultsOutputResponse>(input: input, inputKey: \GetQueryResultsInput.nextToken, outputKey: \GetQueryResultsOutputResponse.nextToken, paginationFunction: self.getQueryResults(input:))
    }
}

extension GetQueryResultsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetQueryResultsInput {
        return GetQueryResultsInput(
            maxResults: self.maxResults,
            nextToken: token,
            queryExecutionId: self.queryExecutionId
        )}
}
extension AthenaClient {
    /// Paginate over `[ListApplicationDPUSizesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListApplicationDPUSizesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListApplicationDPUSizesOutputResponse`
    public func listApplicationDPUSizesPaginated(input: ListApplicationDPUSizesInput) -> ClientRuntime.PaginatorSequence<ListApplicationDPUSizesInput, ListApplicationDPUSizesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListApplicationDPUSizesInput, ListApplicationDPUSizesOutputResponse>(input: input, inputKey: \ListApplicationDPUSizesInput.nextToken, outputKey: \ListApplicationDPUSizesOutputResponse.nextToken, paginationFunction: self.listApplicationDPUSizes(input:))
    }
}

extension ListApplicationDPUSizesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListApplicationDPUSizesInput {
        return ListApplicationDPUSizesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension AthenaClient {
    /// Paginate over `[ListCalculationExecutionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListCalculationExecutionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListCalculationExecutionsOutputResponse`
    public func listCalculationExecutionsPaginated(input: ListCalculationExecutionsInput) -> ClientRuntime.PaginatorSequence<ListCalculationExecutionsInput, ListCalculationExecutionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListCalculationExecutionsInput, ListCalculationExecutionsOutputResponse>(input: input, inputKey: \ListCalculationExecutionsInput.nextToken, outputKey: \ListCalculationExecutionsOutputResponse.nextToken, paginationFunction: self.listCalculationExecutions(input:))
    }
}

extension ListCalculationExecutionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListCalculationExecutionsInput {
        return ListCalculationExecutionsInput(
            maxResults: self.maxResults,
            nextToken: token,
            sessionId: self.sessionId,
            stateFilter: self.stateFilter
        )}
}
extension AthenaClient {
    /// Paginate over `[ListDatabasesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDatabasesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDatabasesOutputResponse`
    public func listDatabasesPaginated(input: ListDatabasesInput) -> ClientRuntime.PaginatorSequence<ListDatabasesInput, ListDatabasesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListDatabasesInput, ListDatabasesOutputResponse>(input: input, inputKey: \ListDatabasesInput.nextToken, outputKey: \ListDatabasesOutputResponse.nextToken, paginationFunction: self.listDatabases(input:))
    }
}

extension ListDatabasesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDatabasesInput {
        return ListDatabasesInput(
            catalogName: self.catalogName,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListDatabasesInput, Output == ListDatabasesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listDatabasesPaginated`
    /// to access the nested member `[AthenaClientTypes.Database]`
    /// - Returns: `[AthenaClientTypes.Database]`
    public func databaseList() async throws -> [AthenaClientTypes.Database] {
        return try await self.asyncCompactMap { item in item.databaseList }
    }
}
extension AthenaClient {
    /// Paginate over `[ListDataCatalogsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDataCatalogsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDataCatalogsOutputResponse`
    public func listDataCatalogsPaginated(input: ListDataCatalogsInput) -> ClientRuntime.PaginatorSequence<ListDataCatalogsInput, ListDataCatalogsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListDataCatalogsInput, ListDataCatalogsOutputResponse>(input: input, inputKey: \ListDataCatalogsInput.nextToken, outputKey: \ListDataCatalogsOutputResponse.nextToken, paginationFunction: self.listDataCatalogs(input:))
    }
}

extension ListDataCatalogsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDataCatalogsInput {
        return ListDataCatalogsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListDataCatalogsInput, Output == ListDataCatalogsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listDataCatalogsPaginated`
    /// to access the nested member `[AthenaClientTypes.DataCatalogSummary]`
    /// - Returns: `[AthenaClientTypes.DataCatalogSummary]`
    public func dataCatalogsSummary() async throws -> [AthenaClientTypes.DataCatalogSummary] {
        return try await self.asyncCompactMap { item in item.dataCatalogsSummary }
    }
}
extension AthenaClient {
    /// Paginate over `[ListEngineVersionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListEngineVersionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListEngineVersionsOutputResponse`
    public func listEngineVersionsPaginated(input: ListEngineVersionsInput) -> ClientRuntime.PaginatorSequence<ListEngineVersionsInput, ListEngineVersionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListEngineVersionsInput, ListEngineVersionsOutputResponse>(input: input, inputKey: \ListEngineVersionsInput.nextToken, outputKey: \ListEngineVersionsOutputResponse.nextToken, paginationFunction: self.listEngineVersions(input:))
    }
}

extension ListEngineVersionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListEngineVersionsInput {
        return ListEngineVersionsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension AthenaClient {
    /// Paginate over `[ListExecutorsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListExecutorsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListExecutorsOutputResponse`
    public func listExecutorsPaginated(input: ListExecutorsInput) -> ClientRuntime.PaginatorSequence<ListExecutorsInput, ListExecutorsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListExecutorsInput, ListExecutorsOutputResponse>(input: input, inputKey: \ListExecutorsInput.nextToken, outputKey: \ListExecutorsOutputResponse.nextToken, paginationFunction: self.listExecutors(input:))
    }
}

extension ListExecutorsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListExecutorsInput {
        return ListExecutorsInput(
            executorStateFilter: self.executorStateFilter,
            maxResults: self.maxResults,
            nextToken: token,
            sessionId: self.sessionId
        )}
}
extension AthenaClient {
    /// Paginate over `[ListNamedQueriesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListNamedQueriesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListNamedQueriesOutputResponse`
    public func listNamedQueriesPaginated(input: ListNamedQueriesInput) -> ClientRuntime.PaginatorSequence<ListNamedQueriesInput, ListNamedQueriesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListNamedQueriesInput, ListNamedQueriesOutputResponse>(input: input, inputKey: \ListNamedQueriesInput.nextToken, outputKey: \ListNamedQueriesOutputResponse.nextToken, paginationFunction: self.listNamedQueries(input:))
    }
}

extension ListNamedQueriesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListNamedQueriesInput {
        return ListNamedQueriesInput(
            maxResults: self.maxResults,
            nextToken: token,
            workGroup: self.workGroup
        )}
}
extension AthenaClient {
    /// Paginate over `[ListPreparedStatementsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListPreparedStatementsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListPreparedStatementsOutputResponse`
    public func listPreparedStatementsPaginated(input: ListPreparedStatementsInput) -> ClientRuntime.PaginatorSequence<ListPreparedStatementsInput, ListPreparedStatementsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListPreparedStatementsInput, ListPreparedStatementsOutputResponse>(input: input, inputKey: \ListPreparedStatementsInput.nextToken, outputKey: \ListPreparedStatementsOutputResponse.nextToken, paginationFunction: self.listPreparedStatements(input:))
    }
}

extension ListPreparedStatementsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPreparedStatementsInput {
        return ListPreparedStatementsInput(
            maxResults: self.maxResults,
            nextToken: token,
            workGroup: self.workGroup
        )}
}
extension AthenaClient {
    /// Paginate over `[ListQueryExecutionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListQueryExecutionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListQueryExecutionsOutputResponse`
    public func listQueryExecutionsPaginated(input: ListQueryExecutionsInput) -> ClientRuntime.PaginatorSequence<ListQueryExecutionsInput, ListQueryExecutionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListQueryExecutionsInput, ListQueryExecutionsOutputResponse>(input: input, inputKey: \ListQueryExecutionsInput.nextToken, outputKey: \ListQueryExecutionsOutputResponse.nextToken, paginationFunction: self.listQueryExecutions(input:))
    }
}

extension ListQueryExecutionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListQueryExecutionsInput {
        return ListQueryExecutionsInput(
            maxResults: self.maxResults,
            nextToken: token,
            workGroup: self.workGroup
        )}
}
extension AthenaClient {
    /// Paginate over `[ListSessionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListSessionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListSessionsOutputResponse`
    public func listSessionsPaginated(input: ListSessionsInput) -> ClientRuntime.PaginatorSequence<ListSessionsInput, ListSessionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListSessionsInput, ListSessionsOutputResponse>(input: input, inputKey: \ListSessionsInput.nextToken, outputKey: \ListSessionsOutputResponse.nextToken, paginationFunction: self.listSessions(input:))
    }
}

extension ListSessionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSessionsInput {
        return ListSessionsInput(
            maxResults: self.maxResults,
            nextToken: token,
            stateFilter: self.stateFilter,
            workGroup: self.workGroup
        )}
}
extension AthenaClient {
    /// Paginate over `[ListTableMetadataOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTableMetadataInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTableMetadataOutputResponse`
    public func listTableMetadataPaginated(input: ListTableMetadataInput) -> ClientRuntime.PaginatorSequence<ListTableMetadataInput, ListTableMetadataOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListTableMetadataInput, ListTableMetadataOutputResponse>(input: input, inputKey: \ListTableMetadataInput.nextToken, outputKey: \ListTableMetadataOutputResponse.nextToken, paginationFunction: self.listTableMetadata(input:))
    }
}

extension ListTableMetadataInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTableMetadataInput {
        return ListTableMetadataInput(
            catalogName: self.catalogName,
            databaseName: self.databaseName,
            expression: self.expression,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListTableMetadataInput, Output == ListTableMetadataOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listTableMetadataPaginated`
    /// to access the nested member `[AthenaClientTypes.TableMetadata]`
    /// - Returns: `[AthenaClientTypes.TableMetadata]`
    public func tableMetadataList() async throws -> [AthenaClientTypes.TableMetadata] {
        return try await self.asyncCompactMap { item in item.tableMetadataList }
    }
}
extension AthenaClient {
    /// Paginate over `[ListTagsForResourceOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTagsForResourceInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTagsForResourceOutputResponse`
    public func listTagsForResourcePaginated(input: ListTagsForResourceInput) -> ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutputResponse>(input: input, inputKey: \ListTagsForResourceInput.nextToken, outputKey: \ListTagsForResourceOutputResponse.nextToken, paginationFunction: self.listTagsForResource(input:))
    }
}

extension ListTagsForResourceInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTagsForResourceInput {
        return ListTagsForResourceInput(
            maxResults: self.maxResults,
            nextToken: token,
            resourceARN: self.resourceARN
        )}
}

extension PaginatorSequence where Input == ListTagsForResourceInput, Output == ListTagsForResourceOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listTagsForResourcePaginated`
    /// to access the nested member `[AthenaClientTypes.Tag]`
    /// - Returns: `[AthenaClientTypes.Tag]`
    public func tags() async throws -> [AthenaClientTypes.Tag] {
        return try await self.asyncCompactMap { item in item.tags }
    }
}
extension AthenaClient {
    /// Paginate over `[ListWorkGroupsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListWorkGroupsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListWorkGroupsOutputResponse`
    public func listWorkGroupsPaginated(input: ListWorkGroupsInput) -> ClientRuntime.PaginatorSequence<ListWorkGroupsInput, ListWorkGroupsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListWorkGroupsInput, ListWorkGroupsOutputResponse>(input: input, inputKey: \ListWorkGroupsInput.nextToken, outputKey: \ListWorkGroupsOutputResponse.nextToken, paginationFunction: self.listWorkGroups(input:))
    }
}

extension ListWorkGroupsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListWorkGroupsInput {
        return ListWorkGroupsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
