// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2Client {
    /// Paginate over `[DescribeAddressesAttributeOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeAddressesAttributeInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeAddressesAttributeOutputResponse`
    public func describeAddressesAttributePaginated(input: DescribeAddressesAttributeInput) -> ClientRuntime.PaginatorSequence<DescribeAddressesAttributeInput, DescribeAddressesAttributeOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeAddressesAttributeInput, DescribeAddressesAttributeOutputResponse>(input: input, inputKey: \DescribeAddressesAttributeInput.nextToken, outputKey: \DescribeAddressesAttributeOutputResponse.nextToken, paginationFunction: self.describeAddressesAttribute(input:))
    }
}

extension DescribeAddressesAttributeInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeAddressesAttributeInput {
        return DescribeAddressesAttributeInput(
            allocationIds: self.allocationIds,
            attribute: self.attribute,
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeAddressesAttributeInput, Output == DescribeAddressesAttributeOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeAddressesAttributePaginated`
    /// to access the nested member `[EC2ClientTypes.AddressAttribute]`
    /// - Returns: `[EC2ClientTypes.AddressAttribute]`
    public func addresses() async throws -> [EC2ClientTypes.AddressAttribute] {
        return try await self.asyncCompactMap { item in item.addresses }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeAddressTransfersOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeAddressTransfersInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeAddressTransfersOutputResponse`
    public func describeAddressTransfersPaginated(input: DescribeAddressTransfersInput) -> ClientRuntime.PaginatorSequence<DescribeAddressTransfersInput, DescribeAddressTransfersOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeAddressTransfersInput, DescribeAddressTransfersOutputResponse>(input: input, inputKey: \DescribeAddressTransfersInput.nextToken, outputKey: \DescribeAddressTransfersOutputResponse.nextToken, paginationFunction: self.describeAddressTransfers(input:))
    }
}

extension DescribeAddressTransfersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeAddressTransfersInput {
        return DescribeAddressTransfersInput(
            allocationIds: self.allocationIds,
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeAddressTransfersInput, Output == DescribeAddressTransfersOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeAddressTransfersPaginated`
    /// to access the nested member `[EC2ClientTypes.AddressTransfer]`
    /// - Returns: `[EC2ClientTypes.AddressTransfer]`
    public func addressTransfers() async throws -> [EC2ClientTypes.AddressTransfer] {
        return try await self.asyncCompactMap { item in item.addressTransfers }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeAwsNetworkPerformanceMetricSubscriptionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeAwsNetworkPerformanceMetricSubscriptionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeAwsNetworkPerformanceMetricSubscriptionsOutputResponse`
    public func describeAwsNetworkPerformanceMetricSubscriptionsPaginated(input: DescribeAwsNetworkPerformanceMetricSubscriptionsInput) -> ClientRuntime.PaginatorSequence<DescribeAwsNetworkPerformanceMetricSubscriptionsInput, DescribeAwsNetworkPerformanceMetricSubscriptionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeAwsNetworkPerformanceMetricSubscriptionsInput, DescribeAwsNetworkPerformanceMetricSubscriptionsOutputResponse>(input: input, inputKey: \DescribeAwsNetworkPerformanceMetricSubscriptionsInput.nextToken, outputKey: \DescribeAwsNetworkPerformanceMetricSubscriptionsOutputResponse.nextToken, paginationFunction: self.describeAwsNetworkPerformanceMetricSubscriptions(input:))
    }
}

extension DescribeAwsNetworkPerformanceMetricSubscriptionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeAwsNetworkPerformanceMetricSubscriptionsInput {
        return DescribeAwsNetworkPerformanceMetricSubscriptionsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeAwsNetworkPerformanceMetricSubscriptionsInput, Output == DescribeAwsNetworkPerformanceMetricSubscriptionsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeAwsNetworkPerformanceMetricSubscriptionsPaginated`
    /// to access the nested member `[EC2ClientTypes.Subscription]`
    /// - Returns: `[EC2ClientTypes.Subscription]`
    public func subscriptions() async throws -> [EC2ClientTypes.Subscription] {
        return try await self.asyncCompactMap { item in item.subscriptions }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeByoipCidrsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeByoipCidrsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeByoipCidrsOutputResponse`
    public func describeByoipCidrsPaginated(input: DescribeByoipCidrsInput) -> ClientRuntime.PaginatorSequence<DescribeByoipCidrsInput, DescribeByoipCidrsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeByoipCidrsInput, DescribeByoipCidrsOutputResponse>(input: input, inputKey: \DescribeByoipCidrsInput.nextToken, outputKey: \DescribeByoipCidrsOutputResponse.nextToken, paginationFunction: self.describeByoipCidrs(input:))
    }
}

extension DescribeByoipCidrsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeByoipCidrsInput {
        return DescribeByoipCidrsInput(
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeByoipCidrsInput, Output == DescribeByoipCidrsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeByoipCidrsPaginated`
    /// to access the nested member `[EC2ClientTypes.ByoipCidr]`
    /// - Returns: `[EC2ClientTypes.ByoipCidr]`
    public func byoipCidrs() async throws -> [EC2ClientTypes.ByoipCidr] {
        return try await self.asyncCompactMap { item in item.byoipCidrs }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeCapacityReservationFleetsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeCapacityReservationFleetsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeCapacityReservationFleetsOutputResponse`
    public func describeCapacityReservationFleetsPaginated(input: DescribeCapacityReservationFleetsInput) -> ClientRuntime.PaginatorSequence<DescribeCapacityReservationFleetsInput, DescribeCapacityReservationFleetsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeCapacityReservationFleetsInput, DescribeCapacityReservationFleetsOutputResponse>(input: input, inputKey: \DescribeCapacityReservationFleetsInput.nextToken, outputKey: \DescribeCapacityReservationFleetsOutputResponse.nextToken, paginationFunction: self.describeCapacityReservationFleets(input:))
    }
}

extension DescribeCapacityReservationFleetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeCapacityReservationFleetsInput {
        return DescribeCapacityReservationFleetsInput(
            capacityReservationFleetIds: self.capacityReservationFleetIds,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeCapacityReservationFleetsInput, Output == DescribeCapacityReservationFleetsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeCapacityReservationFleetsPaginated`
    /// to access the nested member `[EC2ClientTypes.CapacityReservationFleet]`
    /// - Returns: `[EC2ClientTypes.CapacityReservationFleet]`
    public func capacityReservationFleets() async throws -> [EC2ClientTypes.CapacityReservationFleet] {
        return try await self.asyncCompactMap { item in item.capacityReservationFleets }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeCapacityReservationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeCapacityReservationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeCapacityReservationsOutputResponse`
    public func describeCapacityReservationsPaginated(input: DescribeCapacityReservationsInput) -> ClientRuntime.PaginatorSequence<DescribeCapacityReservationsInput, DescribeCapacityReservationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeCapacityReservationsInput, DescribeCapacityReservationsOutputResponse>(input: input, inputKey: \DescribeCapacityReservationsInput.nextToken, outputKey: \DescribeCapacityReservationsOutputResponse.nextToken, paginationFunction: self.describeCapacityReservations(input:))
    }
}

extension DescribeCapacityReservationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeCapacityReservationsInput {
        return DescribeCapacityReservationsInput(
            capacityReservationIds: self.capacityReservationIds,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeCapacityReservationsInput, Output == DescribeCapacityReservationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeCapacityReservationsPaginated`
    /// to access the nested member `[EC2ClientTypes.CapacityReservation]`
    /// - Returns: `[EC2ClientTypes.CapacityReservation]`
    public func capacityReservations() async throws -> [EC2ClientTypes.CapacityReservation] {
        return try await self.asyncCompactMap { item in item.capacityReservations }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeCarrierGatewaysOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeCarrierGatewaysInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeCarrierGatewaysOutputResponse`
    public func describeCarrierGatewaysPaginated(input: DescribeCarrierGatewaysInput) -> ClientRuntime.PaginatorSequence<DescribeCarrierGatewaysInput, DescribeCarrierGatewaysOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeCarrierGatewaysInput, DescribeCarrierGatewaysOutputResponse>(input: input, inputKey: \DescribeCarrierGatewaysInput.nextToken, outputKey: \DescribeCarrierGatewaysOutputResponse.nextToken, paginationFunction: self.describeCarrierGateways(input:))
    }
}

extension DescribeCarrierGatewaysInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeCarrierGatewaysInput {
        return DescribeCarrierGatewaysInput(
            carrierGatewayIds: self.carrierGatewayIds,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeCarrierGatewaysInput, Output == DescribeCarrierGatewaysOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeCarrierGatewaysPaginated`
    /// to access the nested member `[EC2ClientTypes.CarrierGateway]`
    /// - Returns: `[EC2ClientTypes.CarrierGateway]`
    public func carrierGateways() async throws -> [EC2ClientTypes.CarrierGateway] {
        return try await self.asyncCompactMap { item in item.carrierGateways }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeClassicLinkInstancesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeClassicLinkInstancesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeClassicLinkInstancesOutputResponse`
    public func describeClassicLinkInstancesPaginated(input: DescribeClassicLinkInstancesInput) -> ClientRuntime.PaginatorSequence<DescribeClassicLinkInstancesInput, DescribeClassicLinkInstancesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeClassicLinkInstancesInput, DescribeClassicLinkInstancesOutputResponse>(input: input, inputKey: \DescribeClassicLinkInstancesInput.nextToken, outputKey: \DescribeClassicLinkInstancesOutputResponse.nextToken, paginationFunction: self.describeClassicLinkInstances(input:))
    }
}

extension DescribeClassicLinkInstancesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeClassicLinkInstancesInput {
        return DescribeClassicLinkInstancesInput(
            dryRun: self.dryRun,
            filters: self.filters,
            instanceIds: self.instanceIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeClassicLinkInstancesInput, Output == DescribeClassicLinkInstancesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeClassicLinkInstancesPaginated`
    /// to access the nested member `[EC2ClientTypes.ClassicLinkInstance]`
    /// - Returns: `[EC2ClientTypes.ClassicLinkInstance]`
    public func instances() async throws -> [EC2ClientTypes.ClassicLinkInstance] {
        return try await self.asyncCompactMap { item in item.instances }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeClientVpnAuthorizationRulesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeClientVpnAuthorizationRulesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeClientVpnAuthorizationRulesOutputResponse`
    public func describeClientVpnAuthorizationRulesPaginated(input: DescribeClientVpnAuthorizationRulesInput) -> ClientRuntime.PaginatorSequence<DescribeClientVpnAuthorizationRulesInput, DescribeClientVpnAuthorizationRulesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeClientVpnAuthorizationRulesInput, DescribeClientVpnAuthorizationRulesOutputResponse>(input: input, inputKey: \DescribeClientVpnAuthorizationRulesInput.nextToken, outputKey: \DescribeClientVpnAuthorizationRulesOutputResponse.nextToken, paginationFunction: self.describeClientVpnAuthorizationRules(input:))
    }
}

extension DescribeClientVpnAuthorizationRulesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeClientVpnAuthorizationRulesInput {
        return DescribeClientVpnAuthorizationRulesInput(
            clientVpnEndpointId: self.clientVpnEndpointId,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeClientVpnAuthorizationRulesInput, Output == DescribeClientVpnAuthorizationRulesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeClientVpnAuthorizationRulesPaginated`
    /// to access the nested member `[EC2ClientTypes.AuthorizationRule]`
    /// - Returns: `[EC2ClientTypes.AuthorizationRule]`
    public func authorizationRules() async throws -> [EC2ClientTypes.AuthorizationRule] {
        return try await self.asyncCompactMap { item in item.authorizationRules }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeClientVpnConnectionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeClientVpnConnectionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeClientVpnConnectionsOutputResponse`
    public func describeClientVpnConnectionsPaginated(input: DescribeClientVpnConnectionsInput) -> ClientRuntime.PaginatorSequence<DescribeClientVpnConnectionsInput, DescribeClientVpnConnectionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeClientVpnConnectionsInput, DescribeClientVpnConnectionsOutputResponse>(input: input, inputKey: \DescribeClientVpnConnectionsInput.nextToken, outputKey: \DescribeClientVpnConnectionsOutputResponse.nextToken, paginationFunction: self.describeClientVpnConnections(input:))
    }
}

extension DescribeClientVpnConnectionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeClientVpnConnectionsInput {
        return DescribeClientVpnConnectionsInput(
            clientVpnEndpointId: self.clientVpnEndpointId,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeClientVpnConnectionsInput, Output == DescribeClientVpnConnectionsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeClientVpnConnectionsPaginated`
    /// to access the nested member `[EC2ClientTypes.ClientVpnConnection]`
    /// - Returns: `[EC2ClientTypes.ClientVpnConnection]`
    public func connections() async throws -> [EC2ClientTypes.ClientVpnConnection] {
        return try await self.asyncCompactMap { item in item.connections }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeClientVpnEndpointsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeClientVpnEndpointsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeClientVpnEndpointsOutputResponse`
    public func describeClientVpnEndpointsPaginated(input: DescribeClientVpnEndpointsInput) -> ClientRuntime.PaginatorSequence<DescribeClientVpnEndpointsInput, DescribeClientVpnEndpointsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeClientVpnEndpointsInput, DescribeClientVpnEndpointsOutputResponse>(input: input, inputKey: \DescribeClientVpnEndpointsInput.nextToken, outputKey: \DescribeClientVpnEndpointsOutputResponse.nextToken, paginationFunction: self.describeClientVpnEndpoints(input:))
    }
}

extension DescribeClientVpnEndpointsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeClientVpnEndpointsInput {
        return DescribeClientVpnEndpointsInput(
            clientVpnEndpointIds: self.clientVpnEndpointIds,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeClientVpnEndpointsInput, Output == DescribeClientVpnEndpointsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeClientVpnEndpointsPaginated`
    /// to access the nested member `[EC2ClientTypes.ClientVpnEndpoint]`
    /// - Returns: `[EC2ClientTypes.ClientVpnEndpoint]`
    public func clientVpnEndpoints() async throws -> [EC2ClientTypes.ClientVpnEndpoint] {
        return try await self.asyncCompactMap { item in item.clientVpnEndpoints }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeClientVpnRoutesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeClientVpnRoutesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeClientVpnRoutesOutputResponse`
    public func describeClientVpnRoutesPaginated(input: DescribeClientVpnRoutesInput) -> ClientRuntime.PaginatorSequence<DescribeClientVpnRoutesInput, DescribeClientVpnRoutesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeClientVpnRoutesInput, DescribeClientVpnRoutesOutputResponse>(input: input, inputKey: \DescribeClientVpnRoutesInput.nextToken, outputKey: \DescribeClientVpnRoutesOutputResponse.nextToken, paginationFunction: self.describeClientVpnRoutes(input:))
    }
}

extension DescribeClientVpnRoutesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeClientVpnRoutesInput {
        return DescribeClientVpnRoutesInput(
            clientVpnEndpointId: self.clientVpnEndpointId,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeClientVpnRoutesInput, Output == DescribeClientVpnRoutesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeClientVpnRoutesPaginated`
    /// to access the nested member `[EC2ClientTypes.ClientVpnRoute]`
    /// - Returns: `[EC2ClientTypes.ClientVpnRoute]`
    public func routes() async throws -> [EC2ClientTypes.ClientVpnRoute] {
        return try await self.asyncCompactMap { item in item.routes }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeClientVpnTargetNetworksOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeClientVpnTargetNetworksInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeClientVpnTargetNetworksOutputResponse`
    public func describeClientVpnTargetNetworksPaginated(input: DescribeClientVpnTargetNetworksInput) -> ClientRuntime.PaginatorSequence<DescribeClientVpnTargetNetworksInput, DescribeClientVpnTargetNetworksOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeClientVpnTargetNetworksInput, DescribeClientVpnTargetNetworksOutputResponse>(input: input, inputKey: \DescribeClientVpnTargetNetworksInput.nextToken, outputKey: \DescribeClientVpnTargetNetworksOutputResponse.nextToken, paginationFunction: self.describeClientVpnTargetNetworks(input:))
    }
}

extension DescribeClientVpnTargetNetworksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeClientVpnTargetNetworksInput {
        return DescribeClientVpnTargetNetworksInput(
            associationIds: self.associationIds,
            clientVpnEndpointId: self.clientVpnEndpointId,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeClientVpnTargetNetworksInput, Output == DescribeClientVpnTargetNetworksOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeClientVpnTargetNetworksPaginated`
    /// to access the nested member `[EC2ClientTypes.TargetNetwork]`
    /// - Returns: `[EC2ClientTypes.TargetNetwork]`
    public func clientVpnTargetNetworks() async throws -> [EC2ClientTypes.TargetNetwork] {
        return try await self.asyncCompactMap { item in item.clientVpnTargetNetworks }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeCoipPoolsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeCoipPoolsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeCoipPoolsOutputResponse`
    public func describeCoipPoolsPaginated(input: DescribeCoipPoolsInput) -> ClientRuntime.PaginatorSequence<DescribeCoipPoolsInput, DescribeCoipPoolsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeCoipPoolsInput, DescribeCoipPoolsOutputResponse>(input: input, inputKey: \DescribeCoipPoolsInput.nextToken, outputKey: \DescribeCoipPoolsOutputResponse.nextToken, paginationFunction: self.describeCoipPools(input:))
    }
}

extension DescribeCoipPoolsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeCoipPoolsInput {
        return DescribeCoipPoolsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            poolIds: self.poolIds
        )}
}

extension PaginatorSequence where Input == DescribeCoipPoolsInput, Output == DescribeCoipPoolsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeCoipPoolsPaginated`
    /// to access the nested member `[EC2ClientTypes.CoipPool]`
    /// - Returns: `[EC2ClientTypes.CoipPool]`
    public func coipPools() async throws -> [EC2ClientTypes.CoipPool] {
        return try await self.asyncCompactMap { item in item.coipPools }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeDhcpOptionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeDhcpOptionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeDhcpOptionsOutputResponse`
    public func describeDhcpOptionsPaginated(input: DescribeDhcpOptionsInput) -> ClientRuntime.PaginatorSequence<DescribeDhcpOptionsInput, DescribeDhcpOptionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeDhcpOptionsInput, DescribeDhcpOptionsOutputResponse>(input: input, inputKey: \DescribeDhcpOptionsInput.nextToken, outputKey: \DescribeDhcpOptionsOutputResponse.nextToken, paginationFunction: self.describeDhcpOptions(input:))
    }
}

extension DescribeDhcpOptionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeDhcpOptionsInput {
        return DescribeDhcpOptionsInput(
            dhcpOptionsIds: self.dhcpOptionsIds,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeDhcpOptionsInput, Output == DescribeDhcpOptionsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeDhcpOptionsPaginated`
    /// to access the nested member `[EC2ClientTypes.DhcpOptions]`
    /// - Returns: `[EC2ClientTypes.DhcpOptions]`
    public func dhcpOptions() async throws -> [EC2ClientTypes.DhcpOptions] {
        return try await self.asyncCompactMap { item in item.dhcpOptions }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeEgressOnlyInternetGatewaysOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeEgressOnlyInternetGatewaysInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeEgressOnlyInternetGatewaysOutputResponse`
    public func describeEgressOnlyInternetGatewaysPaginated(input: DescribeEgressOnlyInternetGatewaysInput) -> ClientRuntime.PaginatorSequence<DescribeEgressOnlyInternetGatewaysInput, DescribeEgressOnlyInternetGatewaysOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeEgressOnlyInternetGatewaysInput, DescribeEgressOnlyInternetGatewaysOutputResponse>(input: input, inputKey: \DescribeEgressOnlyInternetGatewaysInput.nextToken, outputKey: \DescribeEgressOnlyInternetGatewaysOutputResponse.nextToken, paginationFunction: self.describeEgressOnlyInternetGateways(input:))
    }
}

extension DescribeEgressOnlyInternetGatewaysInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeEgressOnlyInternetGatewaysInput {
        return DescribeEgressOnlyInternetGatewaysInput(
            dryRun: self.dryRun,
            egressOnlyInternetGatewayIds: self.egressOnlyInternetGatewayIds,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeEgressOnlyInternetGatewaysInput, Output == DescribeEgressOnlyInternetGatewaysOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeEgressOnlyInternetGatewaysPaginated`
    /// to access the nested member `[EC2ClientTypes.EgressOnlyInternetGateway]`
    /// - Returns: `[EC2ClientTypes.EgressOnlyInternetGateway]`
    public func egressOnlyInternetGateways() async throws -> [EC2ClientTypes.EgressOnlyInternetGateway] {
        return try await self.asyncCompactMap { item in item.egressOnlyInternetGateways }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeExportImageTasksOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeExportImageTasksInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeExportImageTasksOutputResponse`
    public func describeExportImageTasksPaginated(input: DescribeExportImageTasksInput) -> ClientRuntime.PaginatorSequence<DescribeExportImageTasksInput, DescribeExportImageTasksOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeExportImageTasksInput, DescribeExportImageTasksOutputResponse>(input: input, inputKey: \DescribeExportImageTasksInput.nextToken, outputKey: \DescribeExportImageTasksOutputResponse.nextToken, paginationFunction: self.describeExportImageTasks(input:))
    }
}

extension DescribeExportImageTasksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeExportImageTasksInput {
        return DescribeExportImageTasksInput(
            dryRun: self.dryRun,
            exportImageTaskIds: self.exportImageTaskIds,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeExportImageTasksInput, Output == DescribeExportImageTasksOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeExportImageTasksPaginated`
    /// to access the nested member `[EC2ClientTypes.ExportImageTask]`
    /// - Returns: `[EC2ClientTypes.ExportImageTask]`
    public func exportImageTasks() async throws -> [EC2ClientTypes.ExportImageTask] {
        return try await self.asyncCompactMap { item in item.exportImageTasks }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeFastLaunchImagesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeFastLaunchImagesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeFastLaunchImagesOutputResponse`
    public func describeFastLaunchImagesPaginated(input: DescribeFastLaunchImagesInput) -> ClientRuntime.PaginatorSequence<DescribeFastLaunchImagesInput, DescribeFastLaunchImagesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeFastLaunchImagesInput, DescribeFastLaunchImagesOutputResponse>(input: input, inputKey: \DescribeFastLaunchImagesInput.nextToken, outputKey: \DescribeFastLaunchImagesOutputResponse.nextToken, paginationFunction: self.describeFastLaunchImages(input:))
    }
}

extension DescribeFastLaunchImagesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeFastLaunchImagesInput {
        return DescribeFastLaunchImagesInput(
            dryRun: self.dryRun,
            filters: self.filters,
            imageIds: self.imageIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeFastLaunchImagesInput, Output == DescribeFastLaunchImagesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeFastLaunchImagesPaginated`
    /// to access the nested member `[EC2ClientTypes.DescribeFastLaunchImagesSuccessItem]`
    /// - Returns: `[EC2ClientTypes.DescribeFastLaunchImagesSuccessItem]`
    public func fastLaunchImages() async throws -> [EC2ClientTypes.DescribeFastLaunchImagesSuccessItem] {
        return try await self.asyncCompactMap { item in item.fastLaunchImages }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeFastSnapshotRestoresOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeFastSnapshotRestoresInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeFastSnapshotRestoresOutputResponse`
    public func describeFastSnapshotRestoresPaginated(input: DescribeFastSnapshotRestoresInput) -> ClientRuntime.PaginatorSequence<DescribeFastSnapshotRestoresInput, DescribeFastSnapshotRestoresOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeFastSnapshotRestoresInput, DescribeFastSnapshotRestoresOutputResponse>(input: input, inputKey: \DescribeFastSnapshotRestoresInput.nextToken, outputKey: \DescribeFastSnapshotRestoresOutputResponse.nextToken, paginationFunction: self.describeFastSnapshotRestores(input:))
    }
}

extension DescribeFastSnapshotRestoresInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeFastSnapshotRestoresInput {
        return DescribeFastSnapshotRestoresInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeFastSnapshotRestoresInput, Output == DescribeFastSnapshotRestoresOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeFastSnapshotRestoresPaginated`
    /// to access the nested member `[EC2ClientTypes.DescribeFastSnapshotRestoreSuccessItem]`
    /// - Returns: `[EC2ClientTypes.DescribeFastSnapshotRestoreSuccessItem]`
    public func fastSnapshotRestores() async throws -> [EC2ClientTypes.DescribeFastSnapshotRestoreSuccessItem] {
        return try await self.asyncCompactMap { item in item.fastSnapshotRestores }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeFleetsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeFleetsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeFleetsOutputResponse`
    public func describeFleetsPaginated(input: DescribeFleetsInput) -> ClientRuntime.PaginatorSequence<DescribeFleetsInput, DescribeFleetsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeFleetsInput, DescribeFleetsOutputResponse>(input: input, inputKey: \DescribeFleetsInput.nextToken, outputKey: \DescribeFleetsOutputResponse.nextToken, paginationFunction: self.describeFleets(input:))
    }
}

extension DescribeFleetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeFleetsInput {
        return DescribeFleetsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            fleetIds: self.fleetIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeFleetsInput, Output == DescribeFleetsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeFleetsPaginated`
    /// to access the nested member `[EC2ClientTypes.FleetData]`
    /// - Returns: `[EC2ClientTypes.FleetData]`
    public func fleets() async throws -> [EC2ClientTypes.FleetData] {
        return try await self.asyncCompactMap { item in item.fleets }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeFlowLogsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeFlowLogsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeFlowLogsOutputResponse`
    public func describeFlowLogsPaginated(input: DescribeFlowLogsInput) -> ClientRuntime.PaginatorSequence<DescribeFlowLogsInput, DescribeFlowLogsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeFlowLogsInput, DescribeFlowLogsOutputResponse>(input: input, inputKey: \DescribeFlowLogsInput.nextToken, outputKey: \DescribeFlowLogsOutputResponse.nextToken, paginationFunction: self.describeFlowLogs(input:))
    }
}

extension DescribeFlowLogsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeFlowLogsInput {
        return DescribeFlowLogsInput(
            dryRun: self.dryRun,
            filter: self.filter,
            flowLogIds: self.flowLogIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeFlowLogsInput, Output == DescribeFlowLogsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeFlowLogsPaginated`
    /// to access the nested member `[EC2ClientTypes.FlowLog]`
    /// - Returns: `[EC2ClientTypes.FlowLog]`
    public func flowLogs() async throws -> [EC2ClientTypes.FlowLog] {
        return try await self.asyncCompactMap { item in item.flowLogs }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeFpgaImagesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeFpgaImagesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeFpgaImagesOutputResponse`
    public func describeFpgaImagesPaginated(input: DescribeFpgaImagesInput) -> ClientRuntime.PaginatorSequence<DescribeFpgaImagesInput, DescribeFpgaImagesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeFpgaImagesInput, DescribeFpgaImagesOutputResponse>(input: input, inputKey: \DescribeFpgaImagesInput.nextToken, outputKey: \DescribeFpgaImagesOutputResponse.nextToken, paginationFunction: self.describeFpgaImages(input:))
    }
}

extension DescribeFpgaImagesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeFpgaImagesInput {
        return DescribeFpgaImagesInput(
            dryRun: self.dryRun,
            filters: self.filters,
            fpgaImageIds: self.fpgaImageIds,
            maxResults: self.maxResults,
            nextToken: token,
            owners: self.owners
        )}
}

extension PaginatorSequence where Input == DescribeFpgaImagesInput, Output == DescribeFpgaImagesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeFpgaImagesPaginated`
    /// to access the nested member `[EC2ClientTypes.FpgaImage]`
    /// - Returns: `[EC2ClientTypes.FpgaImage]`
    public func fpgaImages() async throws -> [EC2ClientTypes.FpgaImage] {
        return try await self.asyncCompactMap { item in item.fpgaImages }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeHostReservationOfferingsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeHostReservationOfferingsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeHostReservationOfferingsOutputResponse`
    public func describeHostReservationOfferingsPaginated(input: DescribeHostReservationOfferingsInput) -> ClientRuntime.PaginatorSequence<DescribeHostReservationOfferingsInput, DescribeHostReservationOfferingsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeHostReservationOfferingsInput, DescribeHostReservationOfferingsOutputResponse>(input: input, inputKey: \DescribeHostReservationOfferingsInput.nextToken, outputKey: \DescribeHostReservationOfferingsOutputResponse.nextToken, paginationFunction: self.describeHostReservationOfferings(input:))
    }
}

extension DescribeHostReservationOfferingsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeHostReservationOfferingsInput {
        return DescribeHostReservationOfferingsInput(
            filter: self.filter,
            maxDuration: self.maxDuration,
            maxResults: self.maxResults,
            minDuration: self.minDuration,
            nextToken: token,
            offeringId: self.offeringId
        )}
}

extension PaginatorSequence where Input == DescribeHostReservationOfferingsInput, Output == DescribeHostReservationOfferingsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeHostReservationOfferingsPaginated`
    /// to access the nested member `[EC2ClientTypes.HostOffering]`
    /// - Returns: `[EC2ClientTypes.HostOffering]`
    public func offeringSet() async throws -> [EC2ClientTypes.HostOffering] {
        return try await self.asyncCompactMap { item in item.offeringSet }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeHostReservationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeHostReservationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeHostReservationsOutputResponse`
    public func describeHostReservationsPaginated(input: DescribeHostReservationsInput) -> ClientRuntime.PaginatorSequence<DescribeHostReservationsInput, DescribeHostReservationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeHostReservationsInput, DescribeHostReservationsOutputResponse>(input: input, inputKey: \DescribeHostReservationsInput.nextToken, outputKey: \DescribeHostReservationsOutputResponse.nextToken, paginationFunction: self.describeHostReservations(input:))
    }
}

extension DescribeHostReservationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeHostReservationsInput {
        return DescribeHostReservationsInput(
            filter: self.filter,
            hostReservationIdSet: self.hostReservationIdSet,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeHostReservationsInput, Output == DescribeHostReservationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeHostReservationsPaginated`
    /// to access the nested member `[EC2ClientTypes.HostReservation]`
    /// - Returns: `[EC2ClientTypes.HostReservation]`
    public func hostReservationSet() async throws -> [EC2ClientTypes.HostReservation] {
        return try await self.asyncCompactMap { item in item.hostReservationSet }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeHostsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeHostsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeHostsOutputResponse`
    public func describeHostsPaginated(input: DescribeHostsInput) -> ClientRuntime.PaginatorSequence<DescribeHostsInput, DescribeHostsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeHostsInput, DescribeHostsOutputResponse>(input: input, inputKey: \DescribeHostsInput.nextToken, outputKey: \DescribeHostsOutputResponse.nextToken, paginationFunction: self.describeHosts(input:))
    }
}

extension DescribeHostsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeHostsInput {
        return DescribeHostsInput(
            filter: self.filter,
            hostIds: self.hostIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeHostsInput, Output == DescribeHostsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeHostsPaginated`
    /// to access the nested member `[EC2ClientTypes.Host]`
    /// - Returns: `[EC2ClientTypes.Host]`
    public func hosts() async throws -> [EC2ClientTypes.Host] {
        return try await self.asyncCompactMap { item in item.hosts }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeIamInstanceProfileAssociationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeIamInstanceProfileAssociationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeIamInstanceProfileAssociationsOutputResponse`
    public func describeIamInstanceProfileAssociationsPaginated(input: DescribeIamInstanceProfileAssociationsInput) -> ClientRuntime.PaginatorSequence<DescribeIamInstanceProfileAssociationsInput, DescribeIamInstanceProfileAssociationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeIamInstanceProfileAssociationsInput, DescribeIamInstanceProfileAssociationsOutputResponse>(input: input, inputKey: \DescribeIamInstanceProfileAssociationsInput.nextToken, outputKey: \DescribeIamInstanceProfileAssociationsOutputResponse.nextToken, paginationFunction: self.describeIamInstanceProfileAssociations(input:))
    }
}

extension DescribeIamInstanceProfileAssociationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeIamInstanceProfileAssociationsInput {
        return DescribeIamInstanceProfileAssociationsInput(
            associationIds: self.associationIds,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeIamInstanceProfileAssociationsInput, Output == DescribeIamInstanceProfileAssociationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeIamInstanceProfileAssociationsPaginated`
    /// to access the nested member `[EC2ClientTypes.IamInstanceProfileAssociation]`
    /// - Returns: `[EC2ClientTypes.IamInstanceProfileAssociation]`
    public func iamInstanceProfileAssociations() async throws -> [EC2ClientTypes.IamInstanceProfileAssociation] {
        return try await self.asyncCompactMap { item in item.iamInstanceProfileAssociations }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeImagesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeImagesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeImagesOutputResponse`
    public func describeImagesPaginated(input: DescribeImagesInput) -> ClientRuntime.PaginatorSequence<DescribeImagesInput, DescribeImagesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeImagesInput, DescribeImagesOutputResponse>(input: input, inputKey: \DescribeImagesInput.nextToken, outputKey: \DescribeImagesOutputResponse.nextToken, paginationFunction: self.describeImages(input:))
    }
}

extension DescribeImagesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeImagesInput {
        return DescribeImagesInput(
            dryRun: self.dryRun,
            executableUsers: self.executableUsers,
            filters: self.filters,
            imageIds: self.imageIds,
            includeDeprecated: self.includeDeprecated,
            maxResults: self.maxResults,
            nextToken: token,
            owners: self.owners
        )}
}

extension PaginatorSequence where Input == DescribeImagesInput, Output == DescribeImagesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeImagesPaginated`
    /// to access the nested member `[EC2ClientTypes.Image]`
    /// - Returns: `[EC2ClientTypes.Image]`
    public func images() async throws -> [EC2ClientTypes.Image] {
        return try await self.asyncCompactMap { item in item.images }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeImportImageTasksOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeImportImageTasksInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeImportImageTasksOutputResponse`
    public func describeImportImageTasksPaginated(input: DescribeImportImageTasksInput) -> ClientRuntime.PaginatorSequence<DescribeImportImageTasksInput, DescribeImportImageTasksOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeImportImageTasksInput, DescribeImportImageTasksOutputResponse>(input: input, inputKey: \DescribeImportImageTasksInput.nextToken, outputKey: \DescribeImportImageTasksOutputResponse.nextToken, paginationFunction: self.describeImportImageTasks(input:))
    }
}

extension DescribeImportImageTasksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeImportImageTasksInput {
        return DescribeImportImageTasksInput(
            dryRun: self.dryRun,
            filters: self.filters,
            importTaskIds: self.importTaskIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeImportImageTasksInput, Output == DescribeImportImageTasksOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeImportImageTasksPaginated`
    /// to access the nested member `[EC2ClientTypes.ImportImageTask]`
    /// - Returns: `[EC2ClientTypes.ImportImageTask]`
    public func importImageTasks() async throws -> [EC2ClientTypes.ImportImageTask] {
        return try await self.asyncCompactMap { item in item.importImageTasks }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeImportSnapshotTasksOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeImportSnapshotTasksInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeImportSnapshotTasksOutputResponse`
    public func describeImportSnapshotTasksPaginated(input: DescribeImportSnapshotTasksInput) -> ClientRuntime.PaginatorSequence<DescribeImportSnapshotTasksInput, DescribeImportSnapshotTasksOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeImportSnapshotTasksInput, DescribeImportSnapshotTasksOutputResponse>(input: input, inputKey: \DescribeImportSnapshotTasksInput.nextToken, outputKey: \DescribeImportSnapshotTasksOutputResponse.nextToken, paginationFunction: self.describeImportSnapshotTasks(input:))
    }
}

extension DescribeImportSnapshotTasksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeImportSnapshotTasksInput {
        return DescribeImportSnapshotTasksInput(
            dryRun: self.dryRun,
            filters: self.filters,
            importTaskIds: self.importTaskIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeImportSnapshotTasksInput, Output == DescribeImportSnapshotTasksOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeImportSnapshotTasksPaginated`
    /// to access the nested member `[EC2ClientTypes.ImportSnapshotTask]`
    /// - Returns: `[EC2ClientTypes.ImportSnapshotTask]`
    public func importSnapshotTasks() async throws -> [EC2ClientTypes.ImportSnapshotTask] {
        return try await self.asyncCompactMap { item in item.importSnapshotTasks }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeInstanceCreditSpecificationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeInstanceCreditSpecificationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeInstanceCreditSpecificationsOutputResponse`
    public func describeInstanceCreditSpecificationsPaginated(input: DescribeInstanceCreditSpecificationsInput) -> ClientRuntime.PaginatorSequence<DescribeInstanceCreditSpecificationsInput, DescribeInstanceCreditSpecificationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeInstanceCreditSpecificationsInput, DescribeInstanceCreditSpecificationsOutputResponse>(input: input, inputKey: \DescribeInstanceCreditSpecificationsInput.nextToken, outputKey: \DescribeInstanceCreditSpecificationsOutputResponse.nextToken, paginationFunction: self.describeInstanceCreditSpecifications(input:))
    }
}

extension DescribeInstanceCreditSpecificationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeInstanceCreditSpecificationsInput {
        return DescribeInstanceCreditSpecificationsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            instanceIds: self.instanceIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeInstanceCreditSpecificationsInput, Output == DescribeInstanceCreditSpecificationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeInstanceCreditSpecificationsPaginated`
    /// to access the nested member `[EC2ClientTypes.InstanceCreditSpecification]`
    /// - Returns: `[EC2ClientTypes.InstanceCreditSpecification]`
    public func instanceCreditSpecifications() async throws -> [EC2ClientTypes.InstanceCreditSpecification] {
        return try await self.asyncCompactMap { item in item.instanceCreditSpecifications }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeInstanceEventWindowsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeInstanceEventWindowsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeInstanceEventWindowsOutputResponse`
    public func describeInstanceEventWindowsPaginated(input: DescribeInstanceEventWindowsInput) -> ClientRuntime.PaginatorSequence<DescribeInstanceEventWindowsInput, DescribeInstanceEventWindowsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeInstanceEventWindowsInput, DescribeInstanceEventWindowsOutputResponse>(input: input, inputKey: \DescribeInstanceEventWindowsInput.nextToken, outputKey: \DescribeInstanceEventWindowsOutputResponse.nextToken, paginationFunction: self.describeInstanceEventWindows(input:))
    }
}

extension DescribeInstanceEventWindowsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeInstanceEventWindowsInput {
        return DescribeInstanceEventWindowsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            instanceEventWindowIds: self.instanceEventWindowIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeInstanceEventWindowsInput, Output == DescribeInstanceEventWindowsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeInstanceEventWindowsPaginated`
    /// to access the nested member `[EC2ClientTypes.InstanceEventWindow]`
    /// - Returns: `[EC2ClientTypes.InstanceEventWindow]`
    public func instanceEventWindows() async throws -> [EC2ClientTypes.InstanceEventWindow] {
        return try await self.asyncCompactMap { item in item.instanceEventWindows }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeInstancesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeInstancesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeInstancesOutputResponse`
    public func describeInstancesPaginated(input: DescribeInstancesInput) -> ClientRuntime.PaginatorSequence<DescribeInstancesInput, DescribeInstancesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeInstancesInput, DescribeInstancesOutputResponse>(input: input, inputKey: \DescribeInstancesInput.nextToken, outputKey: \DescribeInstancesOutputResponse.nextToken, paginationFunction: self.describeInstances(input:))
    }
}

extension DescribeInstancesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeInstancesInput {
        return DescribeInstancesInput(
            dryRun: self.dryRun,
            filters: self.filters,
            instanceIds: self.instanceIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeInstancesInput, Output == DescribeInstancesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeInstancesPaginated`
    /// to access the nested member `[EC2ClientTypes.Reservation]`
    /// - Returns: `[EC2ClientTypes.Reservation]`
    public func reservations() async throws -> [EC2ClientTypes.Reservation] {
        return try await self.asyncCompactMap { item in item.reservations }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeInstanceStatusOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeInstanceStatusInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeInstanceStatusOutputResponse`
    public func describeInstanceStatusPaginated(input: DescribeInstanceStatusInput) -> ClientRuntime.PaginatorSequence<DescribeInstanceStatusInput, DescribeInstanceStatusOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeInstanceStatusInput, DescribeInstanceStatusOutputResponse>(input: input, inputKey: \DescribeInstanceStatusInput.nextToken, outputKey: \DescribeInstanceStatusOutputResponse.nextToken, paginationFunction: self.describeInstanceStatus(input:))
    }
}

extension DescribeInstanceStatusInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeInstanceStatusInput {
        return DescribeInstanceStatusInput(
            dryRun: self.dryRun,
            filters: self.filters,
            includeAllInstances: self.includeAllInstances,
            instanceIds: self.instanceIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeInstanceStatusInput, Output == DescribeInstanceStatusOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeInstanceStatusPaginated`
    /// to access the nested member `[EC2ClientTypes.InstanceStatus]`
    /// - Returns: `[EC2ClientTypes.InstanceStatus]`
    public func instanceStatuses() async throws -> [EC2ClientTypes.InstanceStatus] {
        return try await self.asyncCompactMap { item in item.instanceStatuses }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeInstanceTypeOfferingsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeInstanceTypeOfferingsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeInstanceTypeOfferingsOutputResponse`
    public func describeInstanceTypeOfferingsPaginated(input: DescribeInstanceTypeOfferingsInput) -> ClientRuntime.PaginatorSequence<DescribeInstanceTypeOfferingsInput, DescribeInstanceTypeOfferingsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeInstanceTypeOfferingsInput, DescribeInstanceTypeOfferingsOutputResponse>(input: input, inputKey: \DescribeInstanceTypeOfferingsInput.nextToken, outputKey: \DescribeInstanceTypeOfferingsOutputResponse.nextToken, paginationFunction: self.describeInstanceTypeOfferings(input:))
    }
}

extension DescribeInstanceTypeOfferingsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeInstanceTypeOfferingsInput {
        return DescribeInstanceTypeOfferingsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            locationType: self.locationType,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeInstanceTypeOfferingsInput, Output == DescribeInstanceTypeOfferingsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeInstanceTypeOfferingsPaginated`
    /// to access the nested member `[EC2ClientTypes.InstanceTypeOffering]`
    /// - Returns: `[EC2ClientTypes.InstanceTypeOffering]`
    public func instanceTypeOfferings() async throws -> [EC2ClientTypes.InstanceTypeOffering] {
        return try await self.asyncCompactMap { item in item.instanceTypeOfferings }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeInstanceTypesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeInstanceTypesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeInstanceTypesOutputResponse`
    public func describeInstanceTypesPaginated(input: DescribeInstanceTypesInput) -> ClientRuntime.PaginatorSequence<DescribeInstanceTypesInput, DescribeInstanceTypesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeInstanceTypesInput, DescribeInstanceTypesOutputResponse>(input: input, inputKey: \DescribeInstanceTypesInput.nextToken, outputKey: \DescribeInstanceTypesOutputResponse.nextToken, paginationFunction: self.describeInstanceTypes(input:))
    }
}

extension DescribeInstanceTypesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeInstanceTypesInput {
        return DescribeInstanceTypesInput(
            dryRun: self.dryRun,
            filters: self.filters,
            instanceTypes: self.instanceTypes,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeInstanceTypesInput, Output == DescribeInstanceTypesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeInstanceTypesPaginated`
    /// to access the nested member `[EC2ClientTypes.InstanceTypeInfo]`
    /// - Returns: `[EC2ClientTypes.InstanceTypeInfo]`
    public func instanceTypes() async throws -> [EC2ClientTypes.InstanceTypeInfo] {
        return try await self.asyncCompactMap { item in item.instanceTypes }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeInternetGatewaysOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeInternetGatewaysInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeInternetGatewaysOutputResponse`
    public func describeInternetGatewaysPaginated(input: DescribeInternetGatewaysInput) -> ClientRuntime.PaginatorSequence<DescribeInternetGatewaysInput, DescribeInternetGatewaysOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeInternetGatewaysInput, DescribeInternetGatewaysOutputResponse>(input: input, inputKey: \DescribeInternetGatewaysInput.nextToken, outputKey: \DescribeInternetGatewaysOutputResponse.nextToken, paginationFunction: self.describeInternetGateways(input:))
    }
}

extension DescribeInternetGatewaysInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeInternetGatewaysInput {
        return DescribeInternetGatewaysInput(
            dryRun: self.dryRun,
            filters: self.filters,
            internetGatewayIds: self.internetGatewayIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeInternetGatewaysInput, Output == DescribeInternetGatewaysOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeInternetGatewaysPaginated`
    /// to access the nested member `[EC2ClientTypes.InternetGateway]`
    /// - Returns: `[EC2ClientTypes.InternetGateway]`
    public func internetGateways() async throws -> [EC2ClientTypes.InternetGateway] {
        return try await self.asyncCompactMap { item in item.internetGateways }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeIpamPoolsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeIpamPoolsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeIpamPoolsOutputResponse`
    public func describeIpamPoolsPaginated(input: DescribeIpamPoolsInput) -> ClientRuntime.PaginatorSequence<DescribeIpamPoolsInput, DescribeIpamPoolsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeIpamPoolsInput, DescribeIpamPoolsOutputResponse>(input: input, inputKey: \DescribeIpamPoolsInput.nextToken, outputKey: \DescribeIpamPoolsOutputResponse.nextToken, paginationFunction: self.describeIpamPools(input:))
    }
}

extension DescribeIpamPoolsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeIpamPoolsInput {
        return DescribeIpamPoolsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            ipamPoolIds: self.ipamPoolIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeIpamPoolsInput, Output == DescribeIpamPoolsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeIpamPoolsPaginated`
    /// to access the nested member `[EC2ClientTypes.IpamPool]`
    /// - Returns: `[EC2ClientTypes.IpamPool]`
    public func ipamPools() async throws -> [EC2ClientTypes.IpamPool] {
        return try await self.asyncCompactMap { item in item.ipamPools }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeIpamResourceDiscoveriesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeIpamResourceDiscoveriesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeIpamResourceDiscoveriesOutputResponse`
    public func describeIpamResourceDiscoveriesPaginated(input: DescribeIpamResourceDiscoveriesInput) -> ClientRuntime.PaginatorSequence<DescribeIpamResourceDiscoveriesInput, DescribeIpamResourceDiscoveriesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeIpamResourceDiscoveriesInput, DescribeIpamResourceDiscoveriesOutputResponse>(input: input, inputKey: \DescribeIpamResourceDiscoveriesInput.nextToken, outputKey: \DescribeIpamResourceDiscoveriesOutputResponse.nextToken, paginationFunction: self.describeIpamResourceDiscoveries(input:))
    }
}

extension DescribeIpamResourceDiscoveriesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeIpamResourceDiscoveriesInput {
        return DescribeIpamResourceDiscoveriesInput(
            dryRun: self.dryRun,
            filters: self.filters,
            ipamResourceDiscoveryIds: self.ipamResourceDiscoveryIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeIpamResourceDiscoveriesInput, Output == DescribeIpamResourceDiscoveriesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeIpamResourceDiscoveriesPaginated`
    /// to access the nested member `[EC2ClientTypes.IpamResourceDiscovery]`
    /// - Returns: `[EC2ClientTypes.IpamResourceDiscovery]`
    public func ipamResourceDiscoveries() async throws -> [EC2ClientTypes.IpamResourceDiscovery] {
        return try await self.asyncCompactMap { item in item.ipamResourceDiscoveries }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeIpamResourceDiscoveryAssociationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeIpamResourceDiscoveryAssociationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeIpamResourceDiscoveryAssociationsOutputResponse`
    public func describeIpamResourceDiscoveryAssociationsPaginated(input: DescribeIpamResourceDiscoveryAssociationsInput) -> ClientRuntime.PaginatorSequence<DescribeIpamResourceDiscoveryAssociationsInput, DescribeIpamResourceDiscoveryAssociationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeIpamResourceDiscoveryAssociationsInput, DescribeIpamResourceDiscoveryAssociationsOutputResponse>(input: input, inputKey: \DescribeIpamResourceDiscoveryAssociationsInput.nextToken, outputKey: \DescribeIpamResourceDiscoveryAssociationsOutputResponse.nextToken, paginationFunction: self.describeIpamResourceDiscoveryAssociations(input:))
    }
}

extension DescribeIpamResourceDiscoveryAssociationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeIpamResourceDiscoveryAssociationsInput {
        return DescribeIpamResourceDiscoveryAssociationsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            ipamResourceDiscoveryAssociationIds: self.ipamResourceDiscoveryAssociationIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeIpamResourceDiscoveryAssociationsInput, Output == DescribeIpamResourceDiscoveryAssociationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeIpamResourceDiscoveryAssociationsPaginated`
    /// to access the nested member `[EC2ClientTypes.IpamResourceDiscoveryAssociation]`
    /// - Returns: `[EC2ClientTypes.IpamResourceDiscoveryAssociation]`
    public func ipamResourceDiscoveryAssociations() async throws -> [EC2ClientTypes.IpamResourceDiscoveryAssociation] {
        return try await self.asyncCompactMap { item in item.ipamResourceDiscoveryAssociations }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeIpamsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeIpamsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeIpamsOutputResponse`
    public func describeIpamsPaginated(input: DescribeIpamsInput) -> ClientRuntime.PaginatorSequence<DescribeIpamsInput, DescribeIpamsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeIpamsInput, DescribeIpamsOutputResponse>(input: input, inputKey: \DescribeIpamsInput.nextToken, outputKey: \DescribeIpamsOutputResponse.nextToken, paginationFunction: self.describeIpams(input:))
    }
}

extension DescribeIpamsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeIpamsInput {
        return DescribeIpamsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            ipamIds: self.ipamIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeIpamsInput, Output == DescribeIpamsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeIpamsPaginated`
    /// to access the nested member `[EC2ClientTypes.Ipam]`
    /// - Returns: `[EC2ClientTypes.Ipam]`
    public func ipams() async throws -> [EC2ClientTypes.Ipam] {
        return try await self.asyncCompactMap { item in item.ipams }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeIpamScopesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeIpamScopesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeIpamScopesOutputResponse`
    public func describeIpamScopesPaginated(input: DescribeIpamScopesInput) -> ClientRuntime.PaginatorSequence<DescribeIpamScopesInput, DescribeIpamScopesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeIpamScopesInput, DescribeIpamScopesOutputResponse>(input: input, inputKey: \DescribeIpamScopesInput.nextToken, outputKey: \DescribeIpamScopesOutputResponse.nextToken, paginationFunction: self.describeIpamScopes(input:))
    }
}

extension DescribeIpamScopesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeIpamScopesInput {
        return DescribeIpamScopesInput(
            dryRun: self.dryRun,
            filters: self.filters,
            ipamScopeIds: self.ipamScopeIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeIpamScopesInput, Output == DescribeIpamScopesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeIpamScopesPaginated`
    /// to access the nested member `[EC2ClientTypes.IpamScope]`
    /// - Returns: `[EC2ClientTypes.IpamScope]`
    public func ipamScopes() async throws -> [EC2ClientTypes.IpamScope] {
        return try await self.asyncCompactMap { item in item.ipamScopes }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeIpv6PoolsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeIpv6PoolsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeIpv6PoolsOutputResponse`
    public func describeIpv6PoolsPaginated(input: DescribeIpv6PoolsInput) -> ClientRuntime.PaginatorSequence<DescribeIpv6PoolsInput, DescribeIpv6PoolsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeIpv6PoolsInput, DescribeIpv6PoolsOutputResponse>(input: input, inputKey: \DescribeIpv6PoolsInput.nextToken, outputKey: \DescribeIpv6PoolsOutputResponse.nextToken, paginationFunction: self.describeIpv6Pools(input:))
    }
}

extension DescribeIpv6PoolsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeIpv6PoolsInput {
        return DescribeIpv6PoolsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            poolIds: self.poolIds
        )}
}

extension PaginatorSequence where Input == DescribeIpv6PoolsInput, Output == DescribeIpv6PoolsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeIpv6PoolsPaginated`
    /// to access the nested member `[EC2ClientTypes.Ipv6Pool]`
    /// - Returns: `[EC2ClientTypes.Ipv6Pool]`
    public func ipv6Pools() async throws -> [EC2ClientTypes.Ipv6Pool] {
        return try await self.asyncCompactMap { item in item.ipv6Pools }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeLaunchTemplatesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeLaunchTemplatesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeLaunchTemplatesOutputResponse`
    public func describeLaunchTemplatesPaginated(input: DescribeLaunchTemplatesInput) -> ClientRuntime.PaginatorSequence<DescribeLaunchTemplatesInput, DescribeLaunchTemplatesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeLaunchTemplatesInput, DescribeLaunchTemplatesOutputResponse>(input: input, inputKey: \DescribeLaunchTemplatesInput.nextToken, outputKey: \DescribeLaunchTemplatesOutputResponse.nextToken, paginationFunction: self.describeLaunchTemplates(input:))
    }
}

extension DescribeLaunchTemplatesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeLaunchTemplatesInput {
        return DescribeLaunchTemplatesInput(
            dryRun: self.dryRun,
            filters: self.filters,
            launchTemplateIds: self.launchTemplateIds,
            launchTemplateNames: self.launchTemplateNames,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeLaunchTemplatesInput, Output == DescribeLaunchTemplatesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeLaunchTemplatesPaginated`
    /// to access the nested member `[EC2ClientTypes.LaunchTemplate]`
    /// - Returns: `[EC2ClientTypes.LaunchTemplate]`
    public func launchTemplates() async throws -> [EC2ClientTypes.LaunchTemplate] {
        return try await self.asyncCompactMap { item in item.launchTemplates }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeLaunchTemplateVersionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeLaunchTemplateVersionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeLaunchTemplateVersionsOutputResponse`
    public func describeLaunchTemplateVersionsPaginated(input: DescribeLaunchTemplateVersionsInput) -> ClientRuntime.PaginatorSequence<DescribeLaunchTemplateVersionsInput, DescribeLaunchTemplateVersionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeLaunchTemplateVersionsInput, DescribeLaunchTemplateVersionsOutputResponse>(input: input, inputKey: \DescribeLaunchTemplateVersionsInput.nextToken, outputKey: \DescribeLaunchTemplateVersionsOutputResponse.nextToken, paginationFunction: self.describeLaunchTemplateVersions(input:))
    }
}

extension DescribeLaunchTemplateVersionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeLaunchTemplateVersionsInput {
        return DescribeLaunchTemplateVersionsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            launchTemplateId: self.launchTemplateId,
            launchTemplateName: self.launchTemplateName,
            maxResults: self.maxResults,
            maxVersion: self.maxVersion,
            minVersion: self.minVersion,
            nextToken: token,
            resolveAlias: self.resolveAlias,
            versions: self.versions
        )}
}

extension PaginatorSequence where Input == DescribeLaunchTemplateVersionsInput, Output == DescribeLaunchTemplateVersionsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeLaunchTemplateVersionsPaginated`
    /// to access the nested member `[EC2ClientTypes.LaunchTemplateVersion]`
    /// - Returns: `[EC2ClientTypes.LaunchTemplateVersion]`
    public func launchTemplateVersions() async throws -> [EC2ClientTypes.LaunchTemplateVersion] {
        return try await self.asyncCompactMap { item in item.launchTemplateVersions }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeLocalGatewayRouteTablesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeLocalGatewayRouteTablesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeLocalGatewayRouteTablesOutputResponse`
    public func describeLocalGatewayRouteTablesPaginated(input: DescribeLocalGatewayRouteTablesInput) -> ClientRuntime.PaginatorSequence<DescribeLocalGatewayRouteTablesInput, DescribeLocalGatewayRouteTablesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeLocalGatewayRouteTablesInput, DescribeLocalGatewayRouteTablesOutputResponse>(input: input, inputKey: \DescribeLocalGatewayRouteTablesInput.nextToken, outputKey: \DescribeLocalGatewayRouteTablesOutputResponse.nextToken, paginationFunction: self.describeLocalGatewayRouteTables(input:))
    }
}

extension DescribeLocalGatewayRouteTablesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeLocalGatewayRouteTablesInput {
        return DescribeLocalGatewayRouteTablesInput(
            dryRun: self.dryRun,
            filters: self.filters,
            localGatewayRouteTableIds: self.localGatewayRouteTableIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeLocalGatewayRouteTablesInput, Output == DescribeLocalGatewayRouteTablesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeLocalGatewayRouteTablesPaginated`
    /// to access the nested member `[EC2ClientTypes.LocalGatewayRouteTable]`
    /// - Returns: `[EC2ClientTypes.LocalGatewayRouteTable]`
    public func localGatewayRouteTables() async throws -> [EC2ClientTypes.LocalGatewayRouteTable] {
        return try await self.asyncCompactMap { item in item.localGatewayRouteTables }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutputResponse`
    public func describeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsPaginated(input: DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) -> ClientRuntime.PaginatorSequence<DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutputResponse>(input: input, inputKey: \DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput.nextToken, outputKey: \DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutputResponse.nextToken, paginationFunction: self.describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(input:))
    }
}

extension DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput {
        return DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            localGatewayRouteTableVirtualInterfaceGroupAssociationIds: self.localGatewayRouteTableVirtualInterfaceGroupAssociationIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, Output == DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsPaginated`
    /// to access the nested member `[EC2ClientTypes.LocalGatewayRouteTableVirtualInterfaceGroupAssociation]`
    /// - Returns: `[EC2ClientTypes.LocalGatewayRouteTableVirtualInterfaceGroupAssociation]`
    public func localGatewayRouteTableVirtualInterfaceGroupAssociations() async throws -> [EC2ClientTypes.LocalGatewayRouteTableVirtualInterfaceGroupAssociation] {
        return try await self.asyncCompactMap { item in item.localGatewayRouteTableVirtualInterfaceGroupAssociations }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeLocalGatewayRouteTableVpcAssociationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeLocalGatewayRouteTableVpcAssociationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeLocalGatewayRouteTableVpcAssociationsOutputResponse`
    public func describeLocalGatewayRouteTableVpcAssociationsPaginated(input: DescribeLocalGatewayRouteTableVpcAssociationsInput) -> ClientRuntime.PaginatorSequence<DescribeLocalGatewayRouteTableVpcAssociationsInput, DescribeLocalGatewayRouteTableVpcAssociationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeLocalGatewayRouteTableVpcAssociationsInput, DescribeLocalGatewayRouteTableVpcAssociationsOutputResponse>(input: input, inputKey: \DescribeLocalGatewayRouteTableVpcAssociationsInput.nextToken, outputKey: \DescribeLocalGatewayRouteTableVpcAssociationsOutputResponse.nextToken, paginationFunction: self.describeLocalGatewayRouteTableVpcAssociations(input:))
    }
}

extension DescribeLocalGatewayRouteTableVpcAssociationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeLocalGatewayRouteTableVpcAssociationsInput {
        return DescribeLocalGatewayRouteTableVpcAssociationsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            localGatewayRouteTableVpcAssociationIds: self.localGatewayRouteTableVpcAssociationIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeLocalGatewayRouteTableVpcAssociationsInput, Output == DescribeLocalGatewayRouteTableVpcAssociationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeLocalGatewayRouteTableVpcAssociationsPaginated`
    /// to access the nested member `[EC2ClientTypes.LocalGatewayRouteTableVpcAssociation]`
    /// - Returns: `[EC2ClientTypes.LocalGatewayRouteTableVpcAssociation]`
    public func localGatewayRouteTableVpcAssociations() async throws -> [EC2ClientTypes.LocalGatewayRouteTableVpcAssociation] {
        return try await self.asyncCompactMap { item in item.localGatewayRouteTableVpcAssociations }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeLocalGatewaysOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeLocalGatewaysInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeLocalGatewaysOutputResponse`
    public func describeLocalGatewaysPaginated(input: DescribeLocalGatewaysInput) -> ClientRuntime.PaginatorSequence<DescribeLocalGatewaysInput, DescribeLocalGatewaysOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeLocalGatewaysInput, DescribeLocalGatewaysOutputResponse>(input: input, inputKey: \DescribeLocalGatewaysInput.nextToken, outputKey: \DescribeLocalGatewaysOutputResponse.nextToken, paginationFunction: self.describeLocalGateways(input:))
    }
}

extension DescribeLocalGatewaysInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeLocalGatewaysInput {
        return DescribeLocalGatewaysInput(
            dryRun: self.dryRun,
            filters: self.filters,
            localGatewayIds: self.localGatewayIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeLocalGatewaysInput, Output == DescribeLocalGatewaysOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeLocalGatewaysPaginated`
    /// to access the nested member `[EC2ClientTypes.LocalGateway]`
    /// - Returns: `[EC2ClientTypes.LocalGateway]`
    public func localGateways() async throws -> [EC2ClientTypes.LocalGateway] {
        return try await self.asyncCompactMap { item in item.localGateways }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeLocalGatewayVirtualInterfaceGroupsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeLocalGatewayVirtualInterfaceGroupsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeLocalGatewayVirtualInterfaceGroupsOutputResponse`
    public func describeLocalGatewayVirtualInterfaceGroupsPaginated(input: DescribeLocalGatewayVirtualInterfaceGroupsInput) -> ClientRuntime.PaginatorSequence<DescribeLocalGatewayVirtualInterfaceGroupsInput, DescribeLocalGatewayVirtualInterfaceGroupsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeLocalGatewayVirtualInterfaceGroupsInput, DescribeLocalGatewayVirtualInterfaceGroupsOutputResponse>(input: input, inputKey: \DescribeLocalGatewayVirtualInterfaceGroupsInput.nextToken, outputKey: \DescribeLocalGatewayVirtualInterfaceGroupsOutputResponse.nextToken, paginationFunction: self.describeLocalGatewayVirtualInterfaceGroups(input:))
    }
}

extension DescribeLocalGatewayVirtualInterfaceGroupsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeLocalGatewayVirtualInterfaceGroupsInput {
        return DescribeLocalGatewayVirtualInterfaceGroupsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            localGatewayVirtualInterfaceGroupIds: self.localGatewayVirtualInterfaceGroupIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeLocalGatewayVirtualInterfaceGroupsInput, Output == DescribeLocalGatewayVirtualInterfaceGroupsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeLocalGatewayVirtualInterfaceGroupsPaginated`
    /// to access the nested member `[EC2ClientTypes.LocalGatewayVirtualInterfaceGroup]`
    /// - Returns: `[EC2ClientTypes.LocalGatewayVirtualInterfaceGroup]`
    public func localGatewayVirtualInterfaceGroups() async throws -> [EC2ClientTypes.LocalGatewayVirtualInterfaceGroup] {
        return try await self.asyncCompactMap { item in item.localGatewayVirtualInterfaceGroups }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeLocalGatewayVirtualInterfacesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeLocalGatewayVirtualInterfacesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeLocalGatewayVirtualInterfacesOutputResponse`
    public func describeLocalGatewayVirtualInterfacesPaginated(input: DescribeLocalGatewayVirtualInterfacesInput) -> ClientRuntime.PaginatorSequence<DescribeLocalGatewayVirtualInterfacesInput, DescribeLocalGatewayVirtualInterfacesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeLocalGatewayVirtualInterfacesInput, DescribeLocalGatewayVirtualInterfacesOutputResponse>(input: input, inputKey: \DescribeLocalGatewayVirtualInterfacesInput.nextToken, outputKey: \DescribeLocalGatewayVirtualInterfacesOutputResponse.nextToken, paginationFunction: self.describeLocalGatewayVirtualInterfaces(input:))
    }
}

extension DescribeLocalGatewayVirtualInterfacesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeLocalGatewayVirtualInterfacesInput {
        return DescribeLocalGatewayVirtualInterfacesInput(
            dryRun: self.dryRun,
            filters: self.filters,
            localGatewayVirtualInterfaceIds: self.localGatewayVirtualInterfaceIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeLocalGatewayVirtualInterfacesInput, Output == DescribeLocalGatewayVirtualInterfacesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeLocalGatewayVirtualInterfacesPaginated`
    /// to access the nested member `[EC2ClientTypes.LocalGatewayVirtualInterface]`
    /// - Returns: `[EC2ClientTypes.LocalGatewayVirtualInterface]`
    public func localGatewayVirtualInterfaces() async throws -> [EC2ClientTypes.LocalGatewayVirtualInterface] {
        return try await self.asyncCompactMap { item in item.localGatewayVirtualInterfaces }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeManagedPrefixListsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeManagedPrefixListsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeManagedPrefixListsOutputResponse`
    public func describeManagedPrefixListsPaginated(input: DescribeManagedPrefixListsInput) -> ClientRuntime.PaginatorSequence<DescribeManagedPrefixListsInput, DescribeManagedPrefixListsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeManagedPrefixListsInput, DescribeManagedPrefixListsOutputResponse>(input: input, inputKey: \DescribeManagedPrefixListsInput.nextToken, outputKey: \DescribeManagedPrefixListsOutputResponse.nextToken, paginationFunction: self.describeManagedPrefixLists(input:))
    }
}

extension DescribeManagedPrefixListsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeManagedPrefixListsInput {
        return DescribeManagedPrefixListsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            prefixListIds: self.prefixListIds
        )}
}

extension PaginatorSequence where Input == DescribeManagedPrefixListsInput, Output == DescribeManagedPrefixListsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeManagedPrefixListsPaginated`
    /// to access the nested member `[EC2ClientTypes.ManagedPrefixList]`
    /// - Returns: `[EC2ClientTypes.ManagedPrefixList]`
    public func prefixLists() async throws -> [EC2ClientTypes.ManagedPrefixList] {
        return try await self.asyncCompactMap { item in item.prefixLists }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeMovingAddressesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeMovingAddressesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeMovingAddressesOutputResponse`
    public func describeMovingAddressesPaginated(input: DescribeMovingAddressesInput) -> ClientRuntime.PaginatorSequence<DescribeMovingAddressesInput, DescribeMovingAddressesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeMovingAddressesInput, DescribeMovingAddressesOutputResponse>(input: input, inputKey: \DescribeMovingAddressesInput.nextToken, outputKey: \DescribeMovingAddressesOutputResponse.nextToken, paginationFunction: self.describeMovingAddresses(input:))
    }
}

extension DescribeMovingAddressesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeMovingAddressesInput {
        return DescribeMovingAddressesInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            publicIps: self.publicIps
        )}
}

extension PaginatorSequence where Input == DescribeMovingAddressesInput, Output == DescribeMovingAddressesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeMovingAddressesPaginated`
    /// to access the nested member `[EC2ClientTypes.MovingAddressStatus]`
    /// - Returns: `[EC2ClientTypes.MovingAddressStatus]`
    public func movingAddressStatuses() async throws -> [EC2ClientTypes.MovingAddressStatus] {
        return try await self.asyncCompactMap { item in item.movingAddressStatuses }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeNatGatewaysOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeNatGatewaysInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeNatGatewaysOutputResponse`
    public func describeNatGatewaysPaginated(input: DescribeNatGatewaysInput) -> ClientRuntime.PaginatorSequence<DescribeNatGatewaysInput, DescribeNatGatewaysOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeNatGatewaysInput, DescribeNatGatewaysOutputResponse>(input: input, inputKey: \DescribeNatGatewaysInput.nextToken, outputKey: \DescribeNatGatewaysOutputResponse.nextToken, paginationFunction: self.describeNatGateways(input:))
    }
}

extension DescribeNatGatewaysInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeNatGatewaysInput {
        return DescribeNatGatewaysInput(
            dryRun: self.dryRun,
            filter: self.filter,
            maxResults: self.maxResults,
            natGatewayIds: self.natGatewayIds,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeNatGatewaysInput, Output == DescribeNatGatewaysOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeNatGatewaysPaginated`
    /// to access the nested member `[EC2ClientTypes.NatGateway]`
    /// - Returns: `[EC2ClientTypes.NatGateway]`
    public func natGateways() async throws -> [EC2ClientTypes.NatGateway] {
        return try await self.asyncCompactMap { item in item.natGateways }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeNetworkAclsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeNetworkAclsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeNetworkAclsOutputResponse`
    public func describeNetworkAclsPaginated(input: DescribeNetworkAclsInput) -> ClientRuntime.PaginatorSequence<DescribeNetworkAclsInput, DescribeNetworkAclsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeNetworkAclsInput, DescribeNetworkAclsOutputResponse>(input: input, inputKey: \DescribeNetworkAclsInput.nextToken, outputKey: \DescribeNetworkAclsOutputResponse.nextToken, paginationFunction: self.describeNetworkAcls(input:))
    }
}

extension DescribeNetworkAclsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeNetworkAclsInput {
        return DescribeNetworkAclsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            networkAclIds: self.networkAclIds,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeNetworkAclsInput, Output == DescribeNetworkAclsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeNetworkAclsPaginated`
    /// to access the nested member `[EC2ClientTypes.NetworkAcl]`
    /// - Returns: `[EC2ClientTypes.NetworkAcl]`
    public func networkAcls() async throws -> [EC2ClientTypes.NetworkAcl] {
        return try await self.asyncCompactMap { item in item.networkAcls }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeNetworkInsightsAccessScopeAnalysesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeNetworkInsightsAccessScopeAnalysesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeNetworkInsightsAccessScopeAnalysesOutputResponse`
    public func describeNetworkInsightsAccessScopeAnalysesPaginated(input: DescribeNetworkInsightsAccessScopeAnalysesInput) -> ClientRuntime.PaginatorSequence<DescribeNetworkInsightsAccessScopeAnalysesInput, DescribeNetworkInsightsAccessScopeAnalysesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeNetworkInsightsAccessScopeAnalysesInput, DescribeNetworkInsightsAccessScopeAnalysesOutputResponse>(input: input, inputKey: \DescribeNetworkInsightsAccessScopeAnalysesInput.nextToken, outputKey: \DescribeNetworkInsightsAccessScopeAnalysesOutputResponse.nextToken, paginationFunction: self.describeNetworkInsightsAccessScopeAnalyses(input:))
    }
}

extension DescribeNetworkInsightsAccessScopeAnalysesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeNetworkInsightsAccessScopeAnalysesInput {
        return DescribeNetworkInsightsAccessScopeAnalysesInput(
            analysisStartTimeBegin: self.analysisStartTimeBegin,
            analysisStartTimeEnd: self.analysisStartTimeEnd,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            networkInsightsAccessScopeAnalysisIds: self.networkInsightsAccessScopeAnalysisIds,
            networkInsightsAccessScopeId: self.networkInsightsAccessScopeId,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeNetworkInsightsAccessScopeAnalysesInput, Output == DescribeNetworkInsightsAccessScopeAnalysesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeNetworkInsightsAccessScopeAnalysesPaginated`
    /// to access the nested member `[EC2ClientTypes.NetworkInsightsAccessScopeAnalysis]`
    /// - Returns: `[EC2ClientTypes.NetworkInsightsAccessScopeAnalysis]`
    public func networkInsightsAccessScopeAnalyses() async throws -> [EC2ClientTypes.NetworkInsightsAccessScopeAnalysis] {
        return try await self.asyncCompactMap { item in item.networkInsightsAccessScopeAnalyses }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeNetworkInsightsAccessScopesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeNetworkInsightsAccessScopesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeNetworkInsightsAccessScopesOutputResponse`
    public func describeNetworkInsightsAccessScopesPaginated(input: DescribeNetworkInsightsAccessScopesInput) -> ClientRuntime.PaginatorSequence<DescribeNetworkInsightsAccessScopesInput, DescribeNetworkInsightsAccessScopesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeNetworkInsightsAccessScopesInput, DescribeNetworkInsightsAccessScopesOutputResponse>(input: input, inputKey: \DescribeNetworkInsightsAccessScopesInput.nextToken, outputKey: \DescribeNetworkInsightsAccessScopesOutputResponse.nextToken, paginationFunction: self.describeNetworkInsightsAccessScopes(input:))
    }
}

extension DescribeNetworkInsightsAccessScopesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeNetworkInsightsAccessScopesInput {
        return DescribeNetworkInsightsAccessScopesInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            networkInsightsAccessScopeIds: self.networkInsightsAccessScopeIds,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeNetworkInsightsAccessScopesInput, Output == DescribeNetworkInsightsAccessScopesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeNetworkInsightsAccessScopesPaginated`
    /// to access the nested member `[EC2ClientTypes.NetworkInsightsAccessScope]`
    /// - Returns: `[EC2ClientTypes.NetworkInsightsAccessScope]`
    public func networkInsightsAccessScopes() async throws -> [EC2ClientTypes.NetworkInsightsAccessScope] {
        return try await self.asyncCompactMap { item in item.networkInsightsAccessScopes }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeNetworkInsightsAnalysesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeNetworkInsightsAnalysesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeNetworkInsightsAnalysesOutputResponse`
    public func describeNetworkInsightsAnalysesPaginated(input: DescribeNetworkInsightsAnalysesInput) -> ClientRuntime.PaginatorSequence<DescribeNetworkInsightsAnalysesInput, DescribeNetworkInsightsAnalysesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeNetworkInsightsAnalysesInput, DescribeNetworkInsightsAnalysesOutputResponse>(input: input, inputKey: \DescribeNetworkInsightsAnalysesInput.nextToken, outputKey: \DescribeNetworkInsightsAnalysesOutputResponse.nextToken, paginationFunction: self.describeNetworkInsightsAnalyses(input:))
    }
}

extension DescribeNetworkInsightsAnalysesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeNetworkInsightsAnalysesInput {
        return DescribeNetworkInsightsAnalysesInput(
            analysisEndTime: self.analysisEndTime,
            analysisStartTime: self.analysisStartTime,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            networkInsightsAnalysisIds: self.networkInsightsAnalysisIds,
            networkInsightsPathId: self.networkInsightsPathId,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeNetworkInsightsAnalysesInput, Output == DescribeNetworkInsightsAnalysesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeNetworkInsightsAnalysesPaginated`
    /// to access the nested member `[EC2ClientTypes.NetworkInsightsAnalysis]`
    /// - Returns: `[EC2ClientTypes.NetworkInsightsAnalysis]`
    public func networkInsightsAnalyses() async throws -> [EC2ClientTypes.NetworkInsightsAnalysis] {
        return try await self.asyncCompactMap { item in item.networkInsightsAnalyses }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeNetworkInsightsPathsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeNetworkInsightsPathsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeNetworkInsightsPathsOutputResponse`
    public func describeNetworkInsightsPathsPaginated(input: DescribeNetworkInsightsPathsInput) -> ClientRuntime.PaginatorSequence<DescribeNetworkInsightsPathsInput, DescribeNetworkInsightsPathsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeNetworkInsightsPathsInput, DescribeNetworkInsightsPathsOutputResponse>(input: input, inputKey: \DescribeNetworkInsightsPathsInput.nextToken, outputKey: \DescribeNetworkInsightsPathsOutputResponse.nextToken, paginationFunction: self.describeNetworkInsightsPaths(input:))
    }
}

extension DescribeNetworkInsightsPathsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeNetworkInsightsPathsInput {
        return DescribeNetworkInsightsPathsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            networkInsightsPathIds: self.networkInsightsPathIds,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeNetworkInsightsPathsInput, Output == DescribeNetworkInsightsPathsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeNetworkInsightsPathsPaginated`
    /// to access the nested member `[EC2ClientTypes.NetworkInsightsPath]`
    /// - Returns: `[EC2ClientTypes.NetworkInsightsPath]`
    public func networkInsightsPaths() async throws -> [EC2ClientTypes.NetworkInsightsPath] {
        return try await self.asyncCompactMap { item in item.networkInsightsPaths }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeNetworkInterfacePermissionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeNetworkInterfacePermissionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeNetworkInterfacePermissionsOutputResponse`
    public func describeNetworkInterfacePermissionsPaginated(input: DescribeNetworkInterfacePermissionsInput) -> ClientRuntime.PaginatorSequence<DescribeNetworkInterfacePermissionsInput, DescribeNetworkInterfacePermissionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeNetworkInterfacePermissionsInput, DescribeNetworkInterfacePermissionsOutputResponse>(input: input, inputKey: \DescribeNetworkInterfacePermissionsInput.nextToken, outputKey: \DescribeNetworkInterfacePermissionsOutputResponse.nextToken, paginationFunction: self.describeNetworkInterfacePermissions(input:))
    }
}

extension DescribeNetworkInterfacePermissionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeNetworkInterfacePermissionsInput {
        return DescribeNetworkInterfacePermissionsInput(
            filters: self.filters,
            maxResults: self.maxResults,
            networkInterfacePermissionIds: self.networkInterfacePermissionIds,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeNetworkInterfacePermissionsInput, Output == DescribeNetworkInterfacePermissionsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeNetworkInterfacePermissionsPaginated`
    /// to access the nested member `[EC2ClientTypes.NetworkInterfacePermission]`
    /// - Returns: `[EC2ClientTypes.NetworkInterfacePermission]`
    public func networkInterfacePermissions() async throws -> [EC2ClientTypes.NetworkInterfacePermission] {
        return try await self.asyncCompactMap { item in item.networkInterfacePermissions }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeNetworkInterfacesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeNetworkInterfacesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeNetworkInterfacesOutputResponse`
    public func describeNetworkInterfacesPaginated(input: DescribeNetworkInterfacesInput) -> ClientRuntime.PaginatorSequence<DescribeNetworkInterfacesInput, DescribeNetworkInterfacesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeNetworkInterfacesInput, DescribeNetworkInterfacesOutputResponse>(input: input, inputKey: \DescribeNetworkInterfacesInput.nextToken, outputKey: \DescribeNetworkInterfacesOutputResponse.nextToken, paginationFunction: self.describeNetworkInterfaces(input:))
    }
}

extension DescribeNetworkInterfacesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeNetworkInterfacesInput {
        return DescribeNetworkInterfacesInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            networkInterfaceIds: self.networkInterfaceIds,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeNetworkInterfacesInput, Output == DescribeNetworkInterfacesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeNetworkInterfacesPaginated`
    /// to access the nested member `[EC2ClientTypes.NetworkInterface]`
    /// - Returns: `[EC2ClientTypes.NetworkInterface]`
    public func networkInterfaces() async throws -> [EC2ClientTypes.NetworkInterface] {
        return try await self.asyncCompactMap { item in item.networkInterfaces }
    }
}
extension EC2Client {
    /// Paginate over `[DescribePrefixListsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribePrefixListsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribePrefixListsOutputResponse`
    public func describePrefixListsPaginated(input: DescribePrefixListsInput) -> ClientRuntime.PaginatorSequence<DescribePrefixListsInput, DescribePrefixListsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribePrefixListsInput, DescribePrefixListsOutputResponse>(input: input, inputKey: \DescribePrefixListsInput.nextToken, outputKey: \DescribePrefixListsOutputResponse.nextToken, paginationFunction: self.describePrefixLists(input:))
    }
}

extension DescribePrefixListsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribePrefixListsInput {
        return DescribePrefixListsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            prefixListIds: self.prefixListIds
        )}
}

extension PaginatorSequence where Input == DescribePrefixListsInput, Output == DescribePrefixListsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describePrefixListsPaginated`
    /// to access the nested member `[EC2ClientTypes.PrefixList]`
    /// - Returns: `[EC2ClientTypes.PrefixList]`
    public func prefixLists() async throws -> [EC2ClientTypes.PrefixList] {
        return try await self.asyncCompactMap { item in item.prefixLists }
    }
}
extension EC2Client {
    /// Paginate over `[DescribePrincipalIdFormatOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribePrincipalIdFormatInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribePrincipalIdFormatOutputResponse`
    public func describePrincipalIdFormatPaginated(input: DescribePrincipalIdFormatInput) -> ClientRuntime.PaginatorSequence<DescribePrincipalIdFormatInput, DescribePrincipalIdFormatOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribePrincipalIdFormatInput, DescribePrincipalIdFormatOutputResponse>(input: input, inputKey: \DescribePrincipalIdFormatInput.nextToken, outputKey: \DescribePrincipalIdFormatOutputResponse.nextToken, paginationFunction: self.describePrincipalIdFormat(input:))
    }
}

extension DescribePrincipalIdFormatInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribePrincipalIdFormatInput {
        return DescribePrincipalIdFormatInput(
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token,
            resources: self.resources
        )}
}

extension PaginatorSequence where Input == DescribePrincipalIdFormatInput, Output == DescribePrincipalIdFormatOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describePrincipalIdFormatPaginated`
    /// to access the nested member `[EC2ClientTypes.PrincipalIdFormat]`
    /// - Returns: `[EC2ClientTypes.PrincipalIdFormat]`
    public func principals() async throws -> [EC2ClientTypes.PrincipalIdFormat] {
        return try await self.asyncCompactMap { item in item.principals }
    }
}
extension EC2Client {
    /// Paginate over `[DescribePublicIpv4PoolsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribePublicIpv4PoolsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribePublicIpv4PoolsOutputResponse`
    public func describePublicIpv4PoolsPaginated(input: DescribePublicIpv4PoolsInput) -> ClientRuntime.PaginatorSequence<DescribePublicIpv4PoolsInput, DescribePublicIpv4PoolsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribePublicIpv4PoolsInput, DescribePublicIpv4PoolsOutputResponse>(input: input, inputKey: \DescribePublicIpv4PoolsInput.nextToken, outputKey: \DescribePublicIpv4PoolsOutputResponse.nextToken, paginationFunction: self.describePublicIpv4Pools(input:))
    }
}

extension DescribePublicIpv4PoolsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribePublicIpv4PoolsInput {
        return DescribePublicIpv4PoolsInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            poolIds: self.poolIds
        )}
}

extension PaginatorSequence where Input == DescribePublicIpv4PoolsInput, Output == DescribePublicIpv4PoolsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describePublicIpv4PoolsPaginated`
    /// to access the nested member `[EC2ClientTypes.PublicIpv4Pool]`
    /// - Returns: `[EC2ClientTypes.PublicIpv4Pool]`
    public func publicIpv4Pools() async throws -> [EC2ClientTypes.PublicIpv4Pool] {
        return try await self.asyncCompactMap { item in item.publicIpv4Pools }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeReplaceRootVolumeTasksOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeReplaceRootVolumeTasksInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeReplaceRootVolumeTasksOutputResponse`
    public func describeReplaceRootVolumeTasksPaginated(input: DescribeReplaceRootVolumeTasksInput) -> ClientRuntime.PaginatorSequence<DescribeReplaceRootVolumeTasksInput, DescribeReplaceRootVolumeTasksOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeReplaceRootVolumeTasksInput, DescribeReplaceRootVolumeTasksOutputResponse>(input: input, inputKey: \DescribeReplaceRootVolumeTasksInput.nextToken, outputKey: \DescribeReplaceRootVolumeTasksOutputResponse.nextToken, paginationFunction: self.describeReplaceRootVolumeTasks(input:))
    }
}

extension DescribeReplaceRootVolumeTasksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeReplaceRootVolumeTasksInput {
        return DescribeReplaceRootVolumeTasksInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            replaceRootVolumeTaskIds: self.replaceRootVolumeTaskIds
        )}
}

extension PaginatorSequence where Input == DescribeReplaceRootVolumeTasksInput, Output == DescribeReplaceRootVolumeTasksOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeReplaceRootVolumeTasksPaginated`
    /// to access the nested member `[EC2ClientTypes.ReplaceRootVolumeTask]`
    /// - Returns: `[EC2ClientTypes.ReplaceRootVolumeTask]`
    public func replaceRootVolumeTasks() async throws -> [EC2ClientTypes.ReplaceRootVolumeTask] {
        return try await self.asyncCompactMap { item in item.replaceRootVolumeTasks }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeReservedInstancesModificationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeReservedInstancesModificationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeReservedInstancesModificationsOutputResponse`
    public func describeReservedInstancesModificationsPaginated(input: DescribeReservedInstancesModificationsInput) -> ClientRuntime.PaginatorSequence<DescribeReservedInstancesModificationsInput, DescribeReservedInstancesModificationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeReservedInstancesModificationsInput, DescribeReservedInstancesModificationsOutputResponse>(input: input, inputKey: \DescribeReservedInstancesModificationsInput.nextToken, outputKey: \DescribeReservedInstancesModificationsOutputResponse.nextToken, paginationFunction: self.describeReservedInstancesModifications(input:))
    }
}

extension DescribeReservedInstancesModificationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeReservedInstancesModificationsInput {
        return DescribeReservedInstancesModificationsInput(
            filters: self.filters,
            nextToken: token,
            reservedInstancesModificationIds: self.reservedInstancesModificationIds
        )}
}

extension PaginatorSequence where Input == DescribeReservedInstancesModificationsInput, Output == DescribeReservedInstancesModificationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeReservedInstancesModificationsPaginated`
    /// to access the nested member `[EC2ClientTypes.ReservedInstancesModification]`
    /// - Returns: `[EC2ClientTypes.ReservedInstancesModification]`
    public func reservedInstancesModifications() async throws -> [EC2ClientTypes.ReservedInstancesModification] {
        return try await self.asyncCompactMap { item in item.reservedInstancesModifications }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeReservedInstancesOfferingsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeReservedInstancesOfferingsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeReservedInstancesOfferingsOutputResponse`
    public func describeReservedInstancesOfferingsPaginated(input: DescribeReservedInstancesOfferingsInput) -> ClientRuntime.PaginatorSequence<DescribeReservedInstancesOfferingsInput, DescribeReservedInstancesOfferingsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeReservedInstancesOfferingsInput, DescribeReservedInstancesOfferingsOutputResponse>(input: input, inputKey: \DescribeReservedInstancesOfferingsInput.nextToken, outputKey: \DescribeReservedInstancesOfferingsOutputResponse.nextToken, paginationFunction: self.describeReservedInstancesOfferings(input:))
    }
}

extension DescribeReservedInstancesOfferingsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeReservedInstancesOfferingsInput {
        return DescribeReservedInstancesOfferingsInput(
            availabilityZone: self.availabilityZone,
            dryRun: self.dryRun,
            filters: self.filters,
            includeMarketplace: self.includeMarketplace,
            instanceTenancy: self.instanceTenancy,
            instanceType: self.instanceType,
            maxDuration: self.maxDuration,
            maxInstanceCount: self.maxInstanceCount,
            maxResults: self.maxResults,
            minDuration: self.minDuration,
            nextToken: token,
            offeringClass: self.offeringClass,
            offeringType: self.offeringType,
            productDescription: self.productDescription,
            reservedInstancesOfferingIds: self.reservedInstancesOfferingIds
        )}
}

extension PaginatorSequence where Input == DescribeReservedInstancesOfferingsInput, Output == DescribeReservedInstancesOfferingsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeReservedInstancesOfferingsPaginated`
    /// to access the nested member `[EC2ClientTypes.ReservedInstancesOffering]`
    /// - Returns: `[EC2ClientTypes.ReservedInstancesOffering]`
    public func reservedInstancesOfferings() async throws -> [EC2ClientTypes.ReservedInstancesOffering] {
        return try await self.asyncCompactMap { item in item.reservedInstancesOfferings }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeRouteTablesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeRouteTablesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeRouteTablesOutputResponse`
    public func describeRouteTablesPaginated(input: DescribeRouteTablesInput) -> ClientRuntime.PaginatorSequence<DescribeRouteTablesInput, DescribeRouteTablesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeRouteTablesInput, DescribeRouteTablesOutputResponse>(input: input, inputKey: \DescribeRouteTablesInput.nextToken, outputKey: \DescribeRouteTablesOutputResponse.nextToken, paginationFunction: self.describeRouteTables(input:))
    }
}

extension DescribeRouteTablesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeRouteTablesInput {
        return DescribeRouteTablesInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            routeTableIds: self.routeTableIds
        )}
}

extension PaginatorSequence where Input == DescribeRouteTablesInput, Output == DescribeRouteTablesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeRouteTablesPaginated`
    /// to access the nested member `[EC2ClientTypes.RouteTable]`
    /// - Returns: `[EC2ClientTypes.RouteTable]`
    public func routeTables() async throws -> [EC2ClientTypes.RouteTable] {
        return try await self.asyncCompactMap { item in item.routeTables }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeScheduledInstanceAvailabilityOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeScheduledInstanceAvailabilityInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeScheduledInstanceAvailabilityOutputResponse`
    public func describeScheduledInstanceAvailabilityPaginated(input: DescribeScheduledInstanceAvailabilityInput) -> ClientRuntime.PaginatorSequence<DescribeScheduledInstanceAvailabilityInput, DescribeScheduledInstanceAvailabilityOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeScheduledInstanceAvailabilityInput, DescribeScheduledInstanceAvailabilityOutputResponse>(input: input, inputKey: \DescribeScheduledInstanceAvailabilityInput.nextToken, outputKey: \DescribeScheduledInstanceAvailabilityOutputResponse.nextToken, paginationFunction: self.describeScheduledInstanceAvailability(input:))
    }
}

extension DescribeScheduledInstanceAvailabilityInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeScheduledInstanceAvailabilityInput {
        return DescribeScheduledInstanceAvailabilityInput(
            dryRun: self.dryRun,
            filters: self.filters,
            firstSlotStartTimeRange: self.firstSlotStartTimeRange,
            maxResults: self.maxResults,
            maxSlotDurationInHours: self.maxSlotDurationInHours,
            minSlotDurationInHours: self.minSlotDurationInHours,
            nextToken: token,
            recurrence: self.recurrence
        )}
}

extension PaginatorSequence where Input == DescribeScheduledInstanceAvailabilityInput, Output == DescribeScheduledInstanceAvailabilityOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeScheduledInstanceAvailabilityPaginated`
    /// to access the nested member `[EC2ClientTypes.ScheduledInstanceAvailability]`
    /// - Returns: `[EC2ClientTypes.ScheduledInstanceAvailability]`
    public func scheduledInstanceAvailabilitySet() async throws -> [EC2ClientTypes.ScheduledInstanceAvailability] {
        return try await self.asyncCompactMap { item in item.scheduledInstanceAvailabilitySet }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeScheduledInstancesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeScheduledInstancesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeScheduledInstancesOutputResponse`
    public func describeScheduledInstancesPaginated(input: DescribeScheduledInstancesInput) -> ClientRuntime.PaginatorSequence<DescribeScheduledInstancesInput, DescribeScheduledInstancesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeScheduledInstancesInput, DescribeScheduledInstancesOutputResponse>(input: input, inputKey: \DescribeScheduledInstancesInput.nextToken, outputKey: \DescribeScheduledInstancesOutputResponse.nextToken, paginationFunction: self.describeScheduledInstances(input:))
    }
}

extension DescribeScheduledInstancesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeScheduledInstancesInput {
        return DescribeScheduledInstancesInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            scheduledInstanceIds: self.scheduledInstanceIds,
            slotStartTimeRange: self.slotStartTimeRange
        )}
}

extension PaginatorSequence where Input == DescribeScheduledInstancesInput, Output == DescribeScheduledInstancesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeScheduledInstancesPaginated`
    /// to access the nested member `[EC2ClientTypes.ScheduledInstance]`
    /// - Returns: `[EC2ClientTypes.ScheduledInstance]`
    public func scheduledInstanceSet() async throws -> [EC2ClientTypes.ScheduledInstance] {
        return try await self.asyncCompactMap { item in item.scheduledInstanceSet }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeSecurityGroupRulesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeSecurityGroupRulesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeSecurityGroupRulesOutputResponse`
    public func describeSecurityGroupRulesPaginated(input: DescribeSecurityGroupRulesInput) -> ClientRuntime.PaginatorSequence<DescribeSecurityGroupRulesInput, DescribeSecurityGroupRulesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeSecurityGroupRulesInput, DescribeSecurityGroupRulesOutputResponse>(input: input, inputKey: \DescribeSecurityGroupRulesInput.nextToken, outputKey: \DescribeSecurityGroupRulesOutputResponse.nextToken, paginationFunction: self.describeSecurityGroupRules(input:))
    }
}

extension DescribeSecurityGroupRulesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeSecurityGroupRulesInput {
        return DescribeSecurityGroupRulesInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            securityGroupRuleIds: self.securityGroupRuleIds
        )}
}

extension PaginatorSequence where Input == DescribeSecurityGroupRulesInput, Output == DescribeSecurityGroupRulesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeSecurityGroupRulesPaginated`
    /// to access the nested member `[EC2ClientTypes.SecurityGroupRule]`
    /// - Returns: `[EC2ClientTypes.SecurityGroupRule]`
    public func securityGroupRules() async throws -> [EC2ClientTypes.SecurityGroupRule] {
        return try await self.asyncCompactMap { item in item.securityGroupRules }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeSecurityGroupsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeSecurityGroupsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeSecurityGroupsOutputResponse`
    public func describeSecurityGroupsPaginated(input: DescribeSecurityGroupsInput) -> ClientRuntime.PaginatorSequence<DescribeSecurityGroupsInput, DescribeSecurityGroupsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeSecurityGroupsInput, DescribeSecurityGroupsOutputResponse>(input: input, inputKey: \DescribeSecurityGroupsInput.nextToken, outputKey: \DescribeSecurityGroupsOutputResponse.nextToken, paginationFunction: self.describeSecurityGroups(input:))
    }
}

extension DescribeSecurityGroupsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeSecurityGroupsInput {
        return DescribeSecurityGroupsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            groupIds: self.groupIds,
            groupNames: self.groupNames,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeSecurityGroupsInput, Output == DescribeSecurityGroupsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeSecurityGroupsPaginated`
    /// to access the nested member `[EC2ClientTypes.SecurityGroup]`
    /// - Returns: `[EC2ClientTypes.SecurityGroup]`
    public func securityGroups() async throws -> [EC2ClientTypes.SecurityGroup] {
        return try await self.asyncCompactMap { item in item.securityGroups }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeSnapshotsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeSnapshotsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeSnapshotsOutputResponse`
    public func describeSnapshotsPaginated(input: DescribeSnapshotsInput) -> ClientRuntime.PaginatorSequence<DescribeSnapshotsInput, DescribeSnapshotsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeSnapshotsInput, DescribeSnapshotsOutputResponse>(input: input, inputKey: \DescribeSnapshotsInput.nextToken, outputKey: \DescribeSnapshotsOutputResponse.nextToken, paginationFunction: self.describeSnapshots(input:))
    }
}

extension DescribeSnapshotsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeSnapshotsInput {
        return DescribeSnapshotsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            ownerIds: self.ownerIds,
            restorableByUserIds: self.restorableByUserIds,
            snapshotIds: self.snapshotIds
        )}
}

extension PaginatorSequence where Input == DescribeSnapshotsInput, Output == DescribeSnapshotsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeSnapshotsPaginated`
    /// to access the nested member `[EC2ClientTypes.Snapshot]`
    /// - Returns: `[EC2ClientTypes.Snapshot]`
    public func snapshots() async throws -> [EC2ClientTypes.Snapshot] {
        return try await self.asyncCompactMap { item in item.snapshots }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeSnapshotTierStatusOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeSnapshotTierStatusInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeSnapshotTierStatusOutputResponse`
    public func describeSnapshotTierStatusPaginated(input: DescribeSnapshotTierStatusInput) -> ClientRuntime.PaginatorSequence<DescribeSnapshotTierStatusInput, DescribeSnapshotTierStatusOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeSnapshotTierStatusInput, DescribeSnapshotTierStatusOutputResponse>(input: input, inputKey: \DescribeSnapshotTierStatusInput.nextToken, outputKey: \DescribeSnapshotTierStatusOutputResponse.nextToken, paginationFunction: self.describeSnapshotTierStatus(input:))
    }
}

extension DescribeSnapshotTierStatusInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeSnapshotTierStatusInput {
        return DescribeSnapshotTierStatusInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeSnapshotTierStatusInput, Output == DescribeSnapshotTierStatusOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeSnapshotTierStatusPaginated`
    /// to access the nested member `[EC2ClientTypes.SnapshotTierStatus]`
    /// - Returns: `[EC2ClientTypes.SnapshotTierStatus]`
    public func snapshotTierStatuses() async throws -> [EC2ClientTypes.SnapshotTierStatus] {
        return try await self.asyncCompactMap { item in item.snapshotTierStatuses }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeSpotFleetRequestsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeSpotFleetRequestsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeSpotFleetRequestsOutputResponse`
    public func describeSpotFleetRequestsPaginated(input: DescribeSpotFleetRequestsInput) -> ClientRuntime.PaginatorSequence<DescribeSpotFleetRequestsInput, DescribeSpotFleetRequestsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeSpotFleetRequestsInput, DescribeSpotFleetRequestsOutputResponse>(input: input, inputKey: \DescribeSpotFleetRequestsInput.nextToken, outputKey: \DescribeSpotFleetRequestsOutputResponse.nextToken, paginationFunction: self.describeSpotFleetRequests(input:))
    }
}

extension DescribeSpotFleetRequestsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeSpotFleetRequestsInput {
        return DescribeSpotFleetRequestsInput(
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token,
            spotFleetRequestIds: self.spotFleetRequestIds
        )}
}

extension PaginatorSequence where Input == DescribeSpotFleetRequestsInput, Output == DescribeSpotFleetRequestsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeSpotFleetRequestsPaginated`
    /// to access the nested member `[EC2ClientTypes.SpotFleetRequestConfig]`
    /// - Returns: `[EC2ClientTypes.SpotFleetRequestConfig]`
    public func spotFleetRequestConfigs() async throws -> [EC2ClientTypes.SpotFleetRequestConfig] {
        return try await self.asyncCompactMap { item in item.spotFleetRequestConfigs }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeSpotInstanceRequestsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeSpotInstanceRequestsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeSpotInstanceRequestsOutputResponse`
    public func describeSpotInstanceRequestsPaginated(input: DescribeSpotInstanceRequestsInput) -> ClientRuntime.PaginatorSequence<DescribeSpotInstanceRequestsInput, DescribeSpotInstanceRequestsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeSpotInstanceRequestsInput, DescribeSpotInstanceRequestsOutputResponse>(input: input, inputKey: \DescribeSpotInstanceRequestsInput.nextToken, outputKey: \DescribeSpotInstanceRequestsOutputResponse.nextToken, paginationFunction: self.describeSpotInstanceRequests(input:))
    }
}

extension DescribeSpotInstanceRequestsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeSpotInstanceRequestsInput {
        return DescribeSpotInstanceRequestsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            spotInstanceRequestIds: self.spotInstanceRequestIds
        )}
}

extension PaginatorSequence where Input == DescribeSpotInstanceRequestsInput, Output == DescribeSpotInstanceRequestsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeSpotInstanceRequestsPaginated`
    /// to access the nested member `[EC2ClientTypes.SpotInstanceRequest]`
    /// - Returns: `[EC2ClientTypes.SpotInstanceRequest]`
    public func spotInstanceRequests() async throws -> [EC2ClientTypes.SpotInstanceRequest] {
        return try await self.asyncCompactMap { item in item.spotInstanceRequests }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeSpotPriceHistoryOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeSpotPriceHistoryInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeSpotPriceHistoryOutputResponse`
    public func describeSpotPriceHistoryPaginated(input: DescribeSpotPriceHistoryInput) -> ClientRuntime.PaginatorSequence<DescribeSpotPriceHistoryInput, DescribeSpotPriceHistoryOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeSpotPriceHistoryInput, DescribeSpotPriceHistoryOutputResponse>(input: input, inputKey: \DescribeSpotPriceHistoryInput.nextToken, outputKey: \DescribeSpotPriceHistoryOutputResponse.nextToken, paginationFunction: self.describeSpotPriceHistory(input:))
    }
}

extension DescribeSpotPriceHistoryInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeSpotPriceHistoryInput {
        return DescribeSpotPriceHistoryInput(
            availabilityZone: self.availabilityZone,
            dryRun: self.dryRun,
            endTime: self.endTime,
            filters: self.filters,
            instanceTypes: self.instanceTypes,
            maxResults: self.maxResults,
            nextToken: token,
            productDescriptions: self.productDescriptions,
            startTime: self.startTime
        )}
}

extension PaginatorSequence where Input == DescribeSpotPriceHistoryInput, Output == DescribeSpotPriceHistoryOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeSpotPriceHistoryPaginated`
    /// to access the nested member `[EC2ClientTypes.SpotPrice]`
    /// - Returns: `[EC2ClientTypes.SpotPrice]`
    public func spotPriceHistory() async throws -> [EC2ClientTypes.SpotPrice] {
        return try await self.asyncCompactMap { item in item.spotPriceHistory }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeStaleSecurityGroupsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeStaleSecurityGroupsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeStaleSecurityGroupsOutputResponse`
    public func describeStaleSecurityGroupsPaginated(input: DescribeStaleSecurityGroupsInput) -> ClientRuntime.PaginatorSequence<DescribeStaleSecurityGroupsInput, DescribeStaleSecurityGroupsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeStaleSecurityGroupsInput, DescribeStaleSecurityGroupsOutputResponse>(input: input, inputKey: \DescribeStaleSecurityGroupsInput.nextToken, outputKey: \DescribeStaleSecurityGroupsOutputResponse.nextToken, paginationFunction: self.describeStaleSecurityGroups(input:))
    }
}

extension DescribeStaleSecurityGroupsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeStaleSecurityGroupsInput {
        return DescribeStaleSecurityGroupsInput(
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token,
            vpcId: self.vpcId
        )}
}

extension PaginatorSequence where Input == DescribeStaleSecurityGroupsInput, Output == DescribeStaleSecurityGroupsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeStaleSecurityGroupsPaginated`
    /// to access the nested member `[EC2ClientTypes.StaleSecurityGroup]`
    /// - Returns: `[EC2ClientTypes.StaleSecurityGroup]`
    public func staleSecurityGroupSet() async throws -> [EC2ClientTypes.StaleSecurityGroup] {
        return try await self.asyncCompactMap { item in item.staleSecurityGroupSet }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeStoreImageTasksOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeStoreImageTasksInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeStoreImageTasksOutputResponse`
    public func describeStoreImageTasksPaginated(input: DescribeStoreImageTasksInput) -> ClientRuntime.PaginatorSequence<DescribeStoreImageTasksInput, DescribeStoreImageTasksOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeStoreImageTasksInput, DescribeStoreImageTasksOutputResponse>(input: input, inputKey: \DescribeStoreImageTasksInput.nextToken, outputKey: \DescribeStoreImageTasksOutputResponse.nextToken, paginationFunction: self.describeStoreImageTasks(input:))
    }
}

extension DescribeStoreImageTasksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeStoreImageTasksInput {
        return DescribeStoreImageTasksInput(
            dryRun: self.dryRun,
            filters: self.filters,
            imageIds: self.imageIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeStoreImageTasksInput, Output == DescribeStoreImageTasksOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeStoreImageTasksPaginated`
    /// to access the nested member `[EC2ClientTypes.StoreImageTaskResult]`
    /// - Returns: `[EC2ClientTypes.StoreImageTaskResult]`
    public func storeImageTaskResults() async throws -> [EC2ClientTypes.StoreImageTaskResult] {
        return try await self.asyncCompactMap { item in item.storeImageTaskResults }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeSubnetsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeSubnetsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeSubnetsOutputResponse`
    public func describeSubnetsPaginated(input: DescribeSubnetsInput) -> ClientRuntime.PaginatorSequence<DescribeSubnetsInput, DescribeSubnetsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeSubnetsInput, DescribeSubnetsOutputResponse>(input: input, inputKey: \DescribeSubnetsInput.nextToken, outputKey: \DescribeSubnetsOutputResponse.nextToken, paginationFunction: self.describeSubnets(input:))
    }
}

extension DescribeSubnetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeSubnetsInput {
        return DescribeSubnetsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            subnetIds: self.subnetIds
        )}
}

extension PaginatorSequence where Input == DescribeSubnetsInput, Output == DescribeSubnetsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeSubnetsPaginated`
    /// to access the nested member `[EC2ClientTypes.Subnet]`
    /// - Returns: `[EC2ClientTypes.Subnet]`
    public func subnets() async throws -> [EC2ClientTypes.Subnet] {
        return try await self.asyncCompactMap { item in item.subnets }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeTagsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeTagsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeTagsOutputResponse`
    public func describeTagsPaginated(input: DescribeTagsInput) -> ClientRuntime.PaginatorSequence<DescribeTagsInput, DescribeTagsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeTagsInput, DescribeTagsOutputResponse>(input: input, inputKey: \DescribeTagsInput.nextToken, outputKey: \DescribeTagsOutputResponse.nextToken, paginationFunction: self.describeTags(input:))
    }
}

extension DescribeTagsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeTagsInput {
        return DescribeTagsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeTagsInput, Output == DescribeTagsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeTagsPaginated`
    /// to access the nested member `[EC2ClientTypes.TagDescription]`
    /// - Returns: `[EC2ClientTypes.TagDescription]`
    public func tags() async throws -> [EC2ClientTypes.TagDescription] {
        return try await self.asyncCompactMap { item in item.tags }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeTrafficMirrorFiltersOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeTrafficMirrorFiltersInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeTrafficMirrorFiltersOutputResponse`
    public func describeTrafficMirrorFiltersPaginated(input: DescribeTrafficMirrorFiltersInput) -> ClientRuntime.PaginatorSequence<DescribeTrafficMirrorFiltersInput, DescribeTrafficMirrorFiltersOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeTrafficMirrorFiltersInput, DescribeTrafficMirrorFiltersOutputResponse>(input: input, inputKey: \DescribeTrafficMirrorFiltersInput.nextToken, outputKey: \DescribeTrafficMirrorFiltersOutputResponse.nextToken, paginationFunction: self.describeTrafficMirrorFilters(input:))
    }
}

extension DescribeTrafficMirrorFiltersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeTrafficMirrorFiltersInput {
        return DescribeTrafficMirrorFiltersInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            trafficMirrorFilterIds: self.trafficMirrorFilterIds
        )}
}

extension PaginatorSequence where Input == DescribeTrafficMirrorFiltersInput, Output == DescribeTrafficMirrorFiltersOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeTrafficMirrorFiltersPaginated`
    /// to access the nested member `[EC2ClientTypes.TrafficMirrorFilter]`
    /// - Returns: `[EC2ClientTypes.TrafficMirrorFilter]`
    public func trafficMirrorFilters() async throws -> [EC2ClientTypes.TrafficMirrorFilter] {
        return try await self.asyncCompactMap { item in item.trafficMirrorFilters }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeTrafficMirrorSessionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeTrafficMirrorSessionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeTrafficMirrorSessionsOutputResponse`
    public func describeTrafficMirrorSessionsPaginated(input: DescribeTrafficMirrorSessionsInput) -> ClientRuntime.PaginatorSequence<DescribeTrafficMirrorSessionsInput, DescribeTrafficMirrorSessionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeTrafficMirrorSessionsInput, DescribeTrafficMirrorSessionsOutputResponse>(input: input, inputKey: \DescribeTrafficMirrorSessionsInput.nextToken, outputKey: \DescribeTrafficMirrorSessionsOutputResponse.nextToken, paginationFunction: self.describeTrafficMirrorSessions(input:))
    }
}

extension DescribeTrafficMirrorSessionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeTrafficMirrorSessionsInput {
        return DescribeTrafficMirrorSessionsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            trafficMirrorSessionIds: self.trafficMirrorSessionIds
        )}
}

extension PaginatorSequence where Input == DescribeTrafficMirrorSessionsInput, Output == DescribeTrafficMirrorSessionsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeTrafficMirrorSessionsPaginated`
    /// to access the nested member `[EC2ClientTypes.TrafficMirrorSession]`
    /// - Returns: `[EC2ClientTypes.TrafficMirrorSession]`
    public func trafficMirrorSessions() async throws -> [EC2ClientTypes.TrafficMirrorSession] {
        return try await self.asyncCompactMap { item in item.trafficMirrorSessions }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeTrafficMirrorTargetsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeTrafficMirrorTargetsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeTrafficMirrorTargetsOutputResponse`
    public func describeTrafficMirrorTargetsPaginated(input: DescribeTrafficMirrorTargetsInput) -> ClientRuntime.PaginatorSequence<DescribeTrafficMirrorTargetsInput, DescribeTrafficMirrorTargetsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeTrafficMirrorTargetsInput, DescribeTrafficMirrorTargetsOutputResponse>(input: input, inputKey: \DescribeTrafficMirrorTargetsInput.nextToken, outputKey: \DescribeTrafficMirrorTargetsOutputResponse.nextToken, paginationFunction: self.describeTrafficMirrorTargets(input:))
    }
}

extension DescribeTrafficMirrorTargetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeTrafficMirrorTargetsInput {
        return DescribeTrafficMirrorTargetsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            trafficMirrorTargetIds: self.trafficMirrorTargetIds
        )}
}

extension PaginatorSequence where Input == DescribeTrafficMirrorTargetsInput, Output == DescribeTrafficMirrorTargetsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeTrafficMirrorTargetsPaginated`
    /// to access the nested member `[EC2ClientTypes.TrafficMirrorTarget]`
    /// - Returns: `[EC2ClientTypes.TrafficMirrorTarget]`
    public func trafficMirrorTargets() async throws -> [EC2ClientTypes.TrafficMirrorTarget] {
        return try await self.asyncCompactMap { item in item.trafficMirrorTargets }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeTransitGatewayAttachmentsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeTransitGatewayAttachmentsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeTransitGatewayAttachmentsOutputResponse`
    public func describeTransitGatewayAttachmentsPaginated(input: DescribeTransitGatewayAttachmentsInput) -> ClientRuntime.PaginatorSequence<DescribeTransitGatewayAttachmentsInput, DescribeTransitGatewayAttachmentsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeTransitGatewayAttachmentsInput, DescribeTransitGatewayAttachmentsOutputResponse>(input: input, inputKey: \DescribeTransitGatewayAttachmentsInput.nextToken, outputKey: \DescribeTransitGatewayAttachmentsOutputResponse.nextToken, paginationFunction: self.describeTransitGatewayAttachments(input:))
    }
}

extension DescribeTransitGatewayAttachmentsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeTransitGatewayAttachmentsInput {
        return DescribeTransitGatewayAttachmentsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayAttachmentIds: self.transitGatewayAttachmentIds
        )}
}

extension PaginatorSequence where Input == DescribeTransitGatewayAttachmentsInput, Output == DescribeTransitGatewayAttachmentsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeTransitGatewayAttachmentsPaginated`
    /// to access the nested member `[EC2ClientTypes.TransitGatewayAttachment]`
    /// - Returns: `[EC2ClientTypes.TransitGatewayAttachment]`
    public func transitGatewayAttachments() async throws -> [EC2ClientTypes.TransitGatewayAttachment] {
        return try await self.asyncCompactMap { item in item.transitGatewayAttachments }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeTransitGatewayConnectPeersOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeTransitGatewayConnectPeersInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeTransitGatewayConnectPeersOutputResponse`
    public func describeTransitGatewayConnectPeersPaginated(input: DescribeTransitGatewayConnectPeersInput) -> ClientRuntime.PaginatorSequence<DescribeTransitGatewayConnectPeersInput, DescribeTransitGatewayConnectPeersOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeTransitGatewayConnectPeersInput, DescribeTransitGatewayConnectPeersOutputResponse>(input: input, inputKey: \DescribeTransitGatewayConnectPeersInput.nextToken, outputKey: \DescribeTransitGatewayConnectPeersOutputResponse.nextToken, paginationFunction: self.describeTransitGatewayConnectPeers(input:))
    }
}

extension DescribeTransitGatewayConnectPeersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeTransitGatewayConnectPeersInput {
        return DescribeTransitGatewayConnectPeersInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayConnectPeerIds: self.transitGatewayConnectPeerIds
        )}
}

extension PaginatorSequence where Input == DescribeTransitGatewayConnectPeersInput, Output == DescribeTransitGatewayConnectPeersOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeTransitGatewayConnectPeersPaginated`
    /// to access the nested member `[EC2ClientTypes.TransitGatewayConnectPeer]`
    /// - Returns: `[EC2ClientTypes.TransitGatewayConnectPeer]`
    public func transitGatewayConnectPeers() async throws -> [EC2ClientTypes.TransitGatewayConnectPeer] {
        return try await self.asyncCompactMap { item in item.transitGatewayConnectPeers }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeTransitGatewayConnectsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeTransitGatewayConnectsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeTransitGatewayConnectsOutputResponse`
    public func describeTransitGatewayConnectsPaginated(input: DescribeTransitGatewayConnectsInput) -> ClientRuntime.PaginatorSequence<DescribeTransitGatewayConnectsInput, DescribeTransitGatewayConnectsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeTransitGatewayConnectsInput, DescribeTransitGatewayConnectsOutputResponse>(input: input, inputKey: \DescribeTransitGatewayConnectsInput.nextToken, outputKey: \DescribeTransitGatewayConnectsOutputResponse.nextToken, paginationFunction: self.describeTransitGatewayConnects(input:))
    }
}

extension DescribeTransitGatewayConnectsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeTransitGatewayConnectsInput {
        return DescribeTransitGatewayConnectsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayAttachmentIds: self.transitGatewayAttachmentIds
        )}
}

extension PaginatorSequence where Input == DescribeTransitGatewayConnectsInput, Output == DescribeTransitGatewayConnectsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeTransitGatewayConnectsPaginated`
    /// to access the nested member `[EC2ClientTypes.TransitGatewayConnect]`
    /// - Returns: `[EC2ClientTypes.TransitGatewayConnect]`
    public func transitGatewayConnects() async throws -> [EC2ClientTypes.TransitGatewayConnect] {
        return try await self.asyncCompactMap { item in item.transitGatewayConnects }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeTransitGatewayMulticastDomainsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeTransitGatewayMulticastDomainsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeTransitGatewayMulticastDomainsOutputResponse`
    public func describeTransitGatewayMulticastDomainsPaginated(input: DescribeTransitGatewayMulticastDomainsInput) -> ClientRuntime.PaginatorSequence<DescribeTransitGatewayMulticastDomainsInput, DescribeTransitGatewayMulticastDomainsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeTransitGatewayMulticastDomainsInput, DescribeTransitGatewayMulticastDomainsOutputResponse>(input: input, inputKey: \DescribeTransitGatewayMulticastDomainsInput.nextToken, outputKey: \DescribeTransitGatewayMulticastDomainsOutputResponse.nextToken, paginationFunction: self.describeTransitGatewayMulticastDomains(input:))
    }
}

extension DescribeTransitGatewayMulticastDomainsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeTransitGatewayMulticastDomainsInput {
        return DescribeTransitGatewayMulticastDomainsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayMulticastDomainIds: self.transitGatewayMulticastDomainIds
        )}
}

extension PaginatorSequence where Input == DescribeTransitGatewayMulticastDomainsInput, Output == DescribeTransitGatewayMulticastDomainsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeTransitGatewayMulticastDomainsPaginated`
    /// to access the nested member `[EC2ClientTypes.TransitGatewayMulticastDomain]`
    /// - Returns: `[EC2ClientTypes.TransitGatewayMulticastDomain]`
    public func transitGatewayMulticastDomains() async throws -> [EC2ClientTypes.TransitGatewayMulticastDomain] {
        return try await self.asyncCompactMap { item in item.transitGatewayMulticastDomains }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeTransitGatewayPeeringAttachmentsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeTransitGatewayPeeringAttachmentsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeTransitGatewayPeeringAttachmentsOutputResponse`
    public func describeTransitGatewayPeeringAttachmentsPaginated(input: DescribeTransitGatewayPeeringAttachmentsInput) -> ClientRuntime.PaginatorSequence<DescribeTransitGatewayPeeringAttachmentsInput, DescribeTransitGatewayPeeringAttachmentsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeTransitGatewayPeeringAttachmentsInput, DescribeTransitGatewayPeeringAttachmentsOutputResponse>(input: input, inputKey: \DescribeTransitGatewayPeeringAttachmentsInput.nextToken, outputKey: \DescribeTransitGatewayPeeringAttachmentsOutputResponse.nextToken, paginationFunction: self.describeTransitGatewayPeeringAttachments(input:))
    }
}

extension DescribeTransitGatewayPeeringAttachmentsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeTransitGatewayPeeringAttachmentsInput {
        return DescribeTransitGatewayPeeringAttachmentsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayAttachmentIds: self.transitGatewayAttachmentIds
        )}
}

extension PaginatorSequence where Input == DescribeTransitGatewayPeeringAttachmentsInput, Output == DescribeTransitGatewayPeeringAttachmentsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeTransitGatewayPeeringAttachmentsPaginated`
    /// to access the nested member `[EC2ClientTypes.TransitGatewayPeeringAttachment]`
    /// - Returns: `[EC2ClientTypes.TransitGatewayPeeringAttachment]`
    public func transitGatewayPeeringAttachments() async throws -> [EC2ClientTypes.TransitGatewayPeeringAttachment] {
        return try await self.asyncCompactMap { item in item.transitGatewayPeeringAttachments }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeTransitGatewayPolicyTablesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeTransitGatewayPolicyTablesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeTransitGatewayPolicyTablesOutputResponse`
    public func describeTransitGatewayPolicyTablesPaginated(input: DescribeTransitGatewayPolicyTablesInput) -> ClientRuntime.PaginatorSequence<DescribeTransitGatewayPolicyTablesInput, DescribeTransitGatewayPolicyTablesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeTransitGatewayPolicyTablesInput, DescribeTransitGatewayPolicyTablesOutputResponse>(input: input, inputKey: \DescribeTransitGatewayPolicyTablesInput.nextToken, outputKey: \DescribeTransitGatewayPolicyTablesOutputResponse.nextToken, paginationFunction: self.describeTransitGatewayPolicyTables(input:))
    }
}

extension DescribeTransitGatewayPolicyTablesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeTransitGatewayPolicyTablesInput {
        return DescribeTransitGatewayPolicyTablesInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayPolicyTableIds: self.transitGatewayPolicyTableIds
        )}
}

extension PaginatorSequence where Input == DescribeTransitGatewayPolicyTablesInput, Output == DescribeTransitGatewayPolicyTablesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeTransitGatewayPolicyTablesPaginated`
    /// to access the nested member `[EC2ClientTypes.TransitGatewayPolicyTable]`
    /// - Returns: `[EC2ClientTypes.TransitGatewayPolicyTable]`
    public func transitGatewayPolicyTables() async throws -> [EC2ClientTypes.TransitGatewayPolicyTable] {
        return try await self.asyncCompactMap { item in item.transitGatewayPolicyTables }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeTransitGatewayRouteTableAnnouncementsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeTransitGatewayRouteTableAnnouncementsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeTransitGatewayRouteTableAnnouncementsOutputResponse`
    public func describeTransitGatewayRouteTableAnnouncementsPaginated(input: DescribeTransitGatewayRouteTableAnnouncementsInput) -> ClientRuntime.PaginatorSequence<DescribeTransitGatewayRouteTableAnnouncementsInput, DescribeTransitGatewayRouteTableAnnouncementsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeTransitGatewayRouteTableAnnouncementsInput, DescribeTransitGatewayRouteTableAnnouncementsOutputResponse>(input: input, inputKey: \DescribeTransitGatewayRouteTableAnnouncementsInput.nextToken, outputKey: \DescribeTransitGatewayRouteTableAnnouncementsOutputResponse.nextToken, paginationFunction: self.describeTransitGatewayRouteTableAnnouncements(input:))
    }
}

extension DescribeTransitGatewayRouteTableAnnouncementsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeTransitGatewayRouteTableAnnouncementsInput {
        return DescribeTransitGatewayRouteTableAnnouncementsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayRouteTableAnnouncementIds: self.transitGatewayRouteTableAnnouncementIds
        )}
}

extension PaginatorSequence where Input == DescribeTransitGatewayRouteTableAnnouncementsInput, Output == DescribeTransitGatewayRouteTableAnnouncementsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeTransitGatewayRouteTableAnnouncementsPaginated`
    /// to access the nested member `[EC2ClientTypes.TransitGatewayRouteTableAnnouncement]`
    /// - Returns: `[EC2ClientTypes.TransitGatewayRouteTableAnnouncement]`
    public func transitGatewayRouteTableAnnouncements() async throws -> [EC2ClientTypes.TransitGatewayRouteTableAnnouncement] {
        return try await self.asyncCompactMap { item in item.transitGatewayRouteTableAnnouncements }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeTransitGatewayRouteTablesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeTransitGatewayRouteTablesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeTransitGatewayRouteTablesOutputResponse`
    public func describeTransitGatewayRouteTablesPaginated(input: DescribeTransitGatewayRouteTablesInput) -> ClientRuntime.PaginatorSequence<DescribeTransitGatewayRouteTablesInput, DescribeTransitGatewayRouteTablesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeTransitGatewayRouteTablesInput, DescribeTransitGatewayRouteTablesOutputResponse>(input: input, inputKey: \DescribeTransitGatewayRouteTablesInput.nextToken, outputKey: \DescribeTransitGatewayRouteTablesOutputResponse.nextToken, paginationFunction: self.describeTransitGatewayRouteTables(input:))
    }
}

extension DescribeTransitGatewayRouteTablesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeTransitGatewayRouteTablesInput {
        return DescribeTransitGatewayRouteTablesInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayRouteTableIds: self.transitGatewayRouteTableIds
        )}
}

extension PaginatorSequence where Input == DescribeTransitGatewayRouteTablesInput, Output == DescribeTransitGatewayRouteTablesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeTransitGatewayRouteTablesPaginated`
    /// to access the nested member `[EC2ClientTypes.TransitGatewayRouteTable]`
    /// - Returns: `[EC2ClientTypes.TransitGatewayRouteTable]`
    public func transitGatewayRouteTables() async throws -> [EC2ClientTypes.TransitGatewayRouteTable] {
        return try await self.asyncCompactMap { item in item.transitGatewayRouteTables }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeTransitGatewaysOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeTransitGatewaysInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeTransitGatewaysOutputResponse`
    public func describeTransitGatewaysPaginated(input: DescribeTransitGatewaysInput) -> ClientRuntime.PaginatorSequence<DescribeTransitGatewaysInput, DescribeTransitGatewaysOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeTransitGatewaysInput, DescribeTransitGatewaysOutputResponse>(input: input, inputKey: \DescribeTransitGatewaysInput.nextToken, outputKey: \DescribeTransitGatewaysOutputResponse.nextToken, paginationFunction: self.describeTransitGateways(input:))
    }
}

extension DescribeTransitGatewaysInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeTransitGatewaysInput {
        return DescribeTransitGatewaysInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayIds: self.transitGatewayIds
        )}
}

extension PaginatorSequence where Input == DescribeTransitGatewaysInput, Output == DescribeTransitGatewaysOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeTransitGatewaysPaginated`
    /// to access the nested member `[EC2ClientTypes.TransitGateway]`
    /// - Returns: `[EC2ClientTypes.TransitGateway]`
    public func transitGateways() async throws -> [EC2ClientTypes.TransitGateway] {
        return try await self.asyncCompactMap { item in item.transitGateways }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeTransitGatewayVpcAttachmentsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeTransitGatewayVpcAttachmentsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeTransitGatewayVpcAttachmentsOutputResponse`
    public func describeTransitGatewayVpcAttachmentsPaginated(input: DescribeTransitGatewayVpcAttachmentsInput) -> ClientRuntime.PaginatorSequence<DescribeTransitGatewayVpcAttachmentsInput, DescribeTransitGatewayVpcAttachmentsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeTransitGatewayVpcAttachmentsInput, DescribeTransitGatewayVpcAttachmentsOutputResponse>(input: input, inputKey: \DescribeTransitGatewayVpcAttachmentsInput.nextToken, outputKey: \DescribeTransitGatewayVpcAttachmentsOutputResponse.nextToken, paginationFunction: self.describeTransitGatewayVpcAttachments(input:))
    }
}

extension DescribeTransitGatewayVpcAttachmentsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeTransitGatewayVpcAttachmentsInput {
        return DescribeTransitGatewayVpcAttachmentsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayAttachmentIds: self.transitGatewayAttachmentIds
        )}
}

extension PaginatorSequence where Input == DescribeTransitGatewayVpcAttachmentsInput, Output == DescribeTransitGatewayVpcAttachmentsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeTransitGatewayVpcAttachmentsPaginated`
    /// to access the nested member `[EC2ClientTypes.TransitGatewayVpcAttachment]`
    /// - Returns: `[EC2ClientTypes.TransitGatewayVpcAttachment]`
    public func transitGatewayVpcAttachments() async throws -> [EC2ClientTypes.TransitGatewayVpcAttachment] {
        return try await self.asyncCompactMap { item in item.transitGatewayVpcAttachments }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeTrunkInterfaceAssociationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeTrunkInterfaceAssociationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeTrunkInterfaceAssociationsOutputResponse`
    public func describeTrunkInterfaceAssociationsPaginated(input: DescribeTrunkInterfaceAssociationsInput) -> ClientRuntime.PaginatorSequence<DescribeTrunkInterfaceAssociationsInput, DescribeTrunkInterfaceAssociationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeTrunkInterfaceAssociationsInput, DescribeTrunkInterfaceAssociationsOutputResponse>(input: input, inputKey: \DescribeTrunkInterfaceAssociationsInput.nextToken, outputKey: \DescribeTrunkInterfaceAssociationsOutputResponse.nextToken, paginationFunction: self.describeTrunkInterfaceAssociations(input:))
    }
}

extension DescribeTrunkInterfaceAssociationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeTrunkInterfaceAssociationsInput {
        return DescribeTrunkInterfaceAssociationsInput(
            associationIds: self.associationIds,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeTrunkInterfaceAssociationsInput, Output == DescribeTrunkInterfaceAssociationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeTrunkInterfaceAssociationsPaginated`
    /// to access the nested member `[EC2ClientTypes.TrunkInterfaceAssociation]`
    /// - Returns: `[EC2ClientTypes.TrunkInterfaceAssociation]`
    public func interfaceAssociations() async throws -> [EC2ClientTypes.TrunkInterfaceAssociation] {
        return try await self.asyncCompactMap { item in item.interfaceAssociations }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeVerifiedAccessEndpointsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeVerifiedAccessEndpointsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeVerifiedAccessEndpointsOutputResponse`
    public func describeVerifiedAccessEndpointsPaginated(input: DescribeVerifiedAccessEndpointsInput) -> ClientRuntime.PaginatorSequence<DescribeVerifiedAccessEndpointsInput, DescribeVerifiedAccessEndpointsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeVerifiedAccessEndpointsInput, DescribeVerifiedAccessEndpointsOutputResponse>(input: input, inputKey: \DescribeVerifiedAccessEndpointsInput.nextToken, outputKey: \DescribeVerifiedAccessEndpointsOutputResponse.nextToken, paginationFunction: self.describeVerifiedAccessEndpoints(input:))
    }
}

extension DescribeVerifiedAccessEndpointsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeVerifiedAccessEndpointsInput {
        return DescribeVerifiedAccessEndpointsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            verifiedAccessEndpointIds: self.verifiedAccessEndpointIds,
            verifiedAccessGroupId: self.verifiedAccessGroupId,
            verifiedAccessInstanceId: self.verifiedAccessInstanceId
        )}
}

extension PaginatorSequence where Input == DescribeVerifiedAccessEndpointsInput, Output == DescribeVerifiedAccessEndpointsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeVerifiedAccessEndpointsPaginated`
    /// to access the nested member `[EC2ClientTypes.VerifiedAccessEndpoint]`
    /// - Returns: `[EC2ClientTypes.VerifiedAccessEndpoint]`
    public func verifiedAccessEndpoints() async throws -> [EC2ClientTypes.VerifiedAccessEndpoint] {
        return try await self.asyncCompactMap { item in item.verifiedAccessEndpoints }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeVerifiedAccessGroupsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeVerifiedAccessGroupsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeVerifiedAccessGroupsOutputResponse`
    public func describeVerifiedAccessGroupsPaginated(input: DescribeVerifiedAccessGroupsInput) -> ClientRuntime.PaginatorSequence<DescribeVerifiedAccessGroupsInput, DescribeVerifiedAccessGroupsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeVerifiedAccessGroupsInput, DescribeVerifiedAccessGroupsOutputResponse>(input: input, inputKey: \DescribeVerifiedAccessGroupsInput.nextToken, outputKey: \DescribeVerifiedAccessGroupsOutputResponse.nextToken, paginationFunction: self.describeVerifiedAccessGroups(input:))
    }
}

extension DescribeVerifiedAccessGroupsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeVerifiedAccessGroupsInput {
        return DescribeVerifiedAccessGroupsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            verifiedAccessGroupIds: self.verifiedAccessGroupIds,
            verifiedAccessInstanceId: self.verifiedAccessInstanceId
        )}
}

extension PaginatorSequence where Input == DescribeVerifiedAccessGroupsInput, Output == DescribeVerifiedAccessGroupsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeVerifiedAccessGroupsPaginated`
    /// to access the nested member `[EC2ClientTypes.VerifiedAccessGroup]`
    /// - Returns: `[EC2ClientTypes.VerifiedAccessGroup]`
    public func verifiedAccessGroups() async throws -> [EC2ClientTypes.VerifiedAccessGroup] {
        return try await self.asyncCompactMap { item in item.verifiedAccessGroups }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeVerifiedAccessInstanceLoggingConfigurationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeVerifiedAccessInstanceLoggingConfigurationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeVerifiedAccessInstanceLoggingConfigurationsOutputResponse`
    public func describeVerifiedAccessInstanceLoggingConfigurationsPaginated(input: DescribeVerifiedAccessInstanceLoggingConfigurationsInput) -> ClientRuntime.PaginatorSequence<DescribeVerifiedAccessInstanceLoggingConfigurationsInput, DescribeVerifiedAccessInstanceLoggingConfigurationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeVerifiedAccessInstanceLoggingConfigurationsInput, DescribeVerifiedAccessInstanceLoggingConfigurationsOutputResponse>(input: input, inputKey: \DescribeVerifiedAccessInstanceLoggingConfigurationsInput.nextToken, outputKey: \DescribeVerifiedAccessInstanceLoggingConfigurationsOutputResponse.nextToken, paginationFunction: self.describeVerifiedAccessInstanceLoggingConfigurations(input:))
    }
}

extension DescribeVerifiedAccessInstanceLoggingConfigurationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeVerifiedAccessInstanceLoggingConfigurationsInput {
        return DescribeVerifiedAccessInstanceLoggingConfigurationsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            verifiedAccessInstanceIds: self.verifiedAccessInstanceIds
        )}
}

extension PaginatorSequence where Input == DescribeVerifiedAccessInstanceLoggingConfigurationsInput, Output == DescribeVerifiedAccessInstanceLoggingConfigurationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeVerifiedAccessInstanceLoggingConfigurationsPaginated`
    /// to access the nested member `[EC2ClientTypes.VerifiedAccessInstanceLoggingConfiguration]`
    /// - Returns: `[EC2ClientTypes.VerifiedAccessInstanceLoggingConfiguration]`
    public func loggingConfigurations() async throws -> [EC2ClientTypes.VerifiedAccessInstanceLoggingConfiguration] {
        return try await self.asyncCompactMap { item in item.loggingConfigurations }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeVerifiedAccessInstancesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeVerifiedAccessInstancesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeVerifiedAccessInstancesOutputResponse`
    public func describeVerifiedAccessInstancesPaginated(input: DescribeVerifiedAccessInstancesInput) -> ClientRuntime.PaginatorSequence<DescribeVerifiedAccessInstancesInput, DescribeVerifiedAccessInstancesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeVerifiedAccessInstancesInput, DescribeVerifiedAccessInstancesOutputResponse>(input: input, inputKey: \DescribeVerifiedAccessInstancesInput.nextToken, outputKey: \DescribeVerifiedAccessInstancesOutputResponse.nextToken, paginationFunction: self.describeVerifiedAccessInstances(input:))
    }
}

extension DescribeVerifiedAccessInstancesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeVerifiedAccessInstancesInput {
        return DescribeVerifiedAccessInstancesInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            verifiedAccessInstanceIds: self.verifiedAccessInstanceIds
        )}
}

extension PaginatorSequence where Input == DescribeVerifiedAccessInstancesInput, Output == DescribeVerifiedAccessInstancesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeVerifiedAccessInstancesPaginated`
    /// to access the nested member `[EC2ClientTypes.VerifiedAccessInstance]`
    /// - Returns: `[EC2ClientTypes.VerifiedAccessInstance]`
    public func verifiedAccessInstances() async throws -> [EC2ClientTypes.VerifiedAccessInstance] {
        return try await self.asyncCompactMap { item in item.verifiedAccessInstances }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeVerifiedAccessTrustProvidersOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeVerifiedAccessTrustProvidersInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeVerifiedAccessTrustProvidersOutputResponse`
    public func describeVerifiedAccessTrustProvidersPaginated(input: DescribeVerifiedAccessTrustProvidersInput) -> ClientRuntime.PaginatorSequence<DescribeVerifiedAccessTrustProvidersInput, DescribeVerifiedAccessTrustProvidersOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeVerifiedAccessTrustProvidersInput, DescribeVerifiedAccessTrustProvidersOutputResponse>(input: input, inputKey: \DescribeVerifiedAccessTrustProvidersInput.nextToken, outputKey: \DescribeVerifiedAccessTrustProvidersOutputResponse.nextToken, paginationFunction: self.describeVerifiedAccessTrustProviders(input:))
    }
}

extension DescribeVerifiedAccessTrustProvidersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeVerifiedAccessTrustProvidersInput {
        return DescribeVerifiedAccessTrustProvidersInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            verifiedAccessTrustProviderIds: self.verifiedAccessTrustProviderIds
        )}
}

extension PaginatorSequence where Input == DescribeVerifiedAccessTrustProvidersInput, Output == DescribeVerifiedAccessTrustProvidersOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeVerifiedAccessTrustProvidersPaginated`
    /// to access the nested member `[EC2ClientTypes.VerifiedAccessTrustProvider]`
    /// - Returns: `[EC2ClientTypes.VerifiedAccessTrustProvider]`
    public func verifiedAccessTrustProviders() async throws -> [EC2ClientTypes.VerifiedAccessTrustProvider] {
        return try await self.asyncCompactMap { item in item.verifiedAccessTrustProviders }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeVolumesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeVolumesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeVolumesOutputResponse`
    public func describeVolumesPaginated(input: DescribeVolumesInput) -> ClientRuntime.PaginatorSequence<DescribeVolumesInput, DescribeVolumesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeVolumesInput, DescribeVolumesOutputResponse>(input: input, inputKey: \DescribeVolumesInput.nextToken, outputKey: \DescribeVolumesOutputResponse.nextToken, paginationFunction: self.describeVolumes(input:))
    }
}

extension DescribeVolumesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeVolumesInput {
        return DescribeVolumesInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            volumeIds: self.volumeIds
        )}
}

extension PaginatorSequence where Input == DescribeVolumesInput, Output == DescribeVolumesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeVolumesPaginated`
    /// to access the nested member `[EC2ClientTypes.Volume]`
    /// - Returns: `[EC2ClientTypes.Volume]`
    public func volumes() async throws -> [EC2ClientTypes.Volume] {
        return try await self.asyncCompactMap { item in item.volumes }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeVolumesModificationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeVolumesModificationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeVolumesModificationsOutputResponse`
    public func describeVolumesModificationsPaginated(input: DescribeVolumesModificationsInput) -> ClientRuntime.PaginatorSequence<DescribeVolumesModificationsInput, DescribeVolumesModificationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeVolumesModificationsInput, DescribeVolumesModificationsOutputResponse>(input: input, inputKey: \DescribeVolumesModificationsInput.nextToken, outputKey: \DescribeVolumesModificationsOutputResponse.nextToken, paginationFunction: self.describeVolumesModifications(input:))
    }
}

extension DescribeVolumesModificationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeVolumesModificationsInput {
        return DescribeVolumesModificationsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            volumeIds: self.volumeIds
        )}
}

extension PaginatorSequence where Input == DescribeVolumesModificationsInput, Output == DescribeVolumesModificationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeVolumesModificationsPaginated`
    /// to access the nested member `[EC2ClientTypes.VolumeModification]`
    /// - Returns: `[EC2ClientTypes.VolumeModification]`
    public func volumesModifications() async throws -> [EC2ClientTypes.VolumeModification] {
        return try await self.asyncCompactMap { item in item.volumesModifications }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeVolumeStatusOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeVolumeStatusInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeVolumeStatusOutputResponse`
    public func describeVolumeStatusPaginated(input: DescribeVolumeStatusInput) -> ClientRuntime.PaginatorSequence<DescribeVolumeStatusInput, DescribeVolumeStatusOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeVolumeStatusInput, DescribeVolumeStatusOutputResponse>(input: input, inputKey: \DescribeVolumeStatusInput.nextToken, outputKey: \DescribeVolumeStatusOutputResponse.nextToken, paginationFunction: self.describeVolumeStatus(input:))
    }
}

extension DescribeVolumeStatusInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeVolumeStatusInput {
        return DescribeVolumeStatusInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            volumeIds: self.volumeIds
        )}
}

extension PaginatorSequence where Input == DescribeVolumeStatusInput, Output == DescribeVolumeStatusOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeVolumeStatusPaginated`
    /// to access the nested member `[EC2ClientTypes.VolumeStatusItem]`
    /// - Returns: `[EC2ClientTypes.VolumeStatusItem]`
    public func volumeStatuses() async throws -> [EC2ClientTypes.VolumeStatusItem] {
        return try await self.asyncCompactMap { item in item.volumeStatuses }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeVpcClassicLinkDnsSupportOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeVpcClassicLinkDnsSupportInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeVpcClassicLinkDnsSupportOutputResponse`
    public func describeVpcClassicLinkDnsSupportPaginated(input: DescribeVpcClassicLinkDnsSupportInput) -> ClientRuntime.PaginatorSequence<DescribeVpcClassicLinkDnsSupportInput, DescribeVpcClassicLinkDnsSupportOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeVpcClassicLinkDnsSupportInput, DescribeVpcClassicLinkDnsSupportOutputResponse>(input: input, inputKey: \DescribeVpcClassicLinkDnsSupportInput.nextToken, outputKey: \DescribeVpcClassicLinkDnsSupportOutputResponse.nextToken, paginationFunction: self.describeVpcClassicLinkDnsSupport(input:))
    }
}

extension DescribeVpcClassicLinkDnsSupportInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeVpcClassicLinkDnsSupportInput {
        return DescribeVpcClassicLinkDnsSupportInput(
            maxResults: self.maxResults,
            nextToken: token,
            vpcIds: self.vpcIds
        )}
}

extension PaginatorSequence where Input == DescribeVpcClassicLinkDnsSupportInput, Output == DescribeVpcClassicLinkDnsSupportOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeVpcClassicLinkDnsSupportPaginated`
    /// to access the nested member `[EC2ClientTypes.ClassicLinkDnsSupport]`
    /// - Returns: `[EC2ClientTypes.ClassicLinkDnsSupport]`
    public func vpcs() async throws -> [EC2ClientTypes.ClassicLinkDnsSupport] {
        return try await self.asyncCompactMap { item in item.vpcs }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeVpcEndpointConnectionNotificationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeVpcEndpointConnectionNotificationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeVpcEndpointConnectionNotificationsOutputResponse`
    public func describeVpcEndpointConnectionNotificationsPaginated(input: DescribeVpcEndpointConnectionNotificationsInput) -> ClientRuntime.PaginatorSequence<DescribeVpcEndpointConnectionNotificationsInput, DescribeVpcEndpointConnectionNotificationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeVpcEndpointConnectionNotificationsInput, DescribeVpcEndpointConnectionNotificationsOutputResponse>(input: input, inputKey: \DescribeVpcEndpointConnectionNotificationsInput.nextToken, outputKey: \DescribeVpcEndpointConnectionNotificationsOutputResponse.nextToken, paginationFunction: self.describeVpcEndpointConnectionNotifications(input:))
    }
}

extension DescribeVpcEndpointConnectionNotificationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeVpcEndpointConnectionNotificationsInput {
        return DescribeVpcEndpointConnectionNotificationsInput(
            connectionNotificationId: self.connectionNotificationId,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeVpcEndpointConnectionNotificationsInput, Output == DescribeVpcEndpointConnectionNotificationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeVpcEndpointConnectionNotificationsPaginated`
    /// to access the nested member `[EC2ClientTypes.ConnectionNotification]`
    /// - Returns: `[EC2ClientTypes.ConnectionNotification]`
    public func connectionNotificationSet() async throws -> [EC2ClientTypes.ConnectionNotification] {
        return try await self.asyncCompactMap { item in item.connectionNotificationSet }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeVpcEndpointConnectionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeVpcEndpointConnectionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeVpcEndpointConnectionsOutputResponse`
    public func describeVpcEndpointConnectionsPaginated(input: DescribeVpcEndpointConnectionsInput) -> ClientRuntime.PaginatorSequence<DescribeVpcEndpointConnectionsInput, DescribeVpcEndpointConnectionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeVpcEndpointConnectionsInput, DescribeVpcEndpointConnectionsOutputResponse>(input: input, inputKey: \DescribeVpcEndpointConnectionsInput.nextToken, outputKey: \DescribeVpcEndpointConnectionsOutputResponse.nextToken, paginationFunction: self.describeVpcEndpointConnections(input:))
    }
}

extension DescribeVpcEndpointConnectionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeVpcEndpointConnectionsInput {
        return DescribeVpcEndpointConnectionsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeVpcEndpointConnectionsInput, Output == DescribeVpcEndpointConnectionsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeVpcEndpointConnectionsPaginated`
    /// to access the nested member `[EC2ClientTypes.VpcEndpointConnection]`
    /// - Returns: `[EC2ClientTypes.VpcEndpointConnection]`
    public func vpcEndpointConnections() async throws -> [EC2ClientTypes.VpcEndpointConnection] {
        return try await self.asyncCompactMap { item in item.vpcEndpointConnections }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeVpcEndpointsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeVpcEndpointsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeVpcEndpointsOutputResponse`
    public func describeVpcEndpointsPaginated(input: DescribeVpcEndpointsInput) -> ClientRuntime.PaginatorSequence<DescribeVpcEndpointsInput, DescribeVpcEndpointsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeVpcEndpointsInput, DescribeVpcEndpointsOutputResponse>(input: input, inputKey: \DescribeVpcEndpointsInput.nextToken, outputKey: \DescribeVpcEndpointsOutputResponse.nextToken, paginationFunction: self.describeVpcEndpoints(input:))
    }
}

extension DescribeVpcEndpointsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeVpcEndpointsInput {
        return DescribeVpcEndpointsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            vpcEndpointIds: self.vpcEndpointIds
        )}
}

extension PaginatorSequence where Input == DescribeVpcEndpointsInput, Output == DescribeVpcEndpointsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeVpcEndpointsPaginated`
    /// to access the nested member `[EC2ClientTypes.VpcEndpoint]`
    /// - Returns: `[EC2ClientTypes.VpcEndpoint]`
    public func vpcEndpoints() async throws -> [EC2ClientTypes.VpcEndpoint] {
        return try await self.asyncCompactMap { item in item.vpcEndpoints }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeVpcEndpointServiceConfigurationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeVpcEndpointServiceConfigurationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeVpcEndpointServiceConfigurationsOutputResponse`
    public func describeVpcEndpointServiceConfigurationsPaginated(input: DescribeVpcEndpointServiceConfigurationsInput) -> ClientRuntime.PaginatorSequence<DescribeVpcEndpointServiceConfigurationsInput, DescribeVpcEndpointServiceConfigurationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeVpcEndpointServiceConfigurationsInput, DescribeVpcEndpointServiceConfigurationsOutputResponse>(input: input, inputKey: \DescribeVpcEndpointServiceConfigurationsInput.nextToken, outputKey: \DescribeVpcEndpointServiceConfigurationsOutputResponse.nextToken, paginationFunction: self.describeVpcEndpointServiceConfigurations(input:))
    }
}

extension DescribeVpcEndpointServiceConfigurationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeVpcEndpointServiceConfigurationsInput {
        return DescribeVpcEndpointServiceConfigurationsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            serviceIds: self.serviceIds
        )}
}

extension PaginatorSequence where Input == DescribeVpcEndpointServiceConfigurationsInput, Output == DescribeVpcEndpointServiceConfigurationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeVpcEndpointServiceConfigurationsPaginated`
    /// to access the nested member `[EC2ClientTypes.ServiceConfiguration]`
    /// - Returns: `[EC2ClientTypes.ServiceConfiguration]`
    public func serviceConfigurations() async throws -> [EC2ClientTypes.ServiceConfiguration] {
        return try await self.asyncCompactMap { item in item.serviceConfigurations }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeVpcEndpointServicePermissionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeVpcEndpointServicePermissionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeVpcEndpointServicePermissionsOutputResponse`
    public func describeVpcEndpointServicePermissionsPaginated(input: DescribeVpcEndpointServicePermissionsInput) -> ClientRuntime.PaginatorSequence<DescribeVpcEndpointServicePermissionsInput, DescribeVpcEndpointServicePermissionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeVpcEndpointServicePermissionsInput, DescribeVpcEndpointServicePermissionsOutputResponse>(input: input, inputKey: \DescribeVpcEndpointServicePermissionsInput.nextToken, outputKey: \DescribeVpcEndpointServicePermissionsOutputResponse.nextToken, paginationFunction: self.describeVpcEndpointServicePermissions(input:))
    }
}

extension DescribeVpcEndpointServicePermissionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeVpcEndpointServicePermissionsInput {
        return DescribeVpcEndpointServicePermissionsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            serviceId: self.serviceId
        )}
}

extension PaginatorSequence where Input == DescribeVpcEndpointServicePermissionsInput, Output == DescribeVpcEndpointServicePermissionsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeVpcEndpointServicePermissionsPaginated`
    /// to access the nested member `[EC2ClientTypes.AllowedPrincipal]`
    /// - Returns: `[EC2ClientTypes.AllowedPrincipal]`
    public func allowedPrincipals() async throws -> [EC2ClientTypes.AllowedPrincipal] {
        return try await self.asyncCompactMap { item in item.allowedPrincipals }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeVpcPeeringConnectionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeVpcPeeringConnectionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeVpcPeeringConnectionsOutputResponse`
    public func describeVpcPeeringConnectionsPaginated(input: DescribeVpcPeeringConnectionsInput) -> ClientRuntime.PaginatorSequence<DescribeVpcPeeringConnectionsInput, DescribeVpcPeeringConnectionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeVpcPeeringConnectionsInput, DescribeVpcPeeringConnectionsOutputResponse>(input: input, inputKey: \DescribeVpcPeeringConnectionsInput.nextToken, outputKey: \DescribeVpcPeeringConnectionsOutputResponse.nextToken, paginationFunction: self.describeVpcPeeringConnections(input:))
    }
}

extension DescribeVpcPeeringConnectionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeVpcPeeringConnectionsInput {
        return DescribeVpcPeeringConnectionsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            vpcPeeringConnectionIds: self.vpcPeeringConnectionIds
        )}
}

extension PaginatorSequence where Input == DescribeVpcPeeringConnectionsInput, Output == DescribeVpcPeeringConnectionsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeVpcPeeringConnectionsPaginated`
    /// to access the nested member `[EC2ClientTypes.VpcPeeringConnection]`
    /// - Returns: `[EC2ClientTypes.VpcPeeringConnection]`
    public func vpcPeeringConnections() async throws -> [EC2ClientTypes.VpcPeeringConnection] {
        return try await self.asyncCompactMap { item in item.vpcPeeringConnections }
    }
}
extension EC2Client {
    /// Paginate over `[DescribeVpcsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeVpcsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeVpcsOutputResponse`
    public func describeVpcsPaginated(input: DescribeVpcsInput) -> ClientRuntime.PaginatorSequence<DescribeVpcsInput, DescribeVpcsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeVpcsInput, DescribeVpcsOutputResponse>(input: input, inputKey: \DescribeVpcsInput.nextToken, outputKey: \DescribeVpcsOutputResponse.nextToken, paginationFunction: self.describeVpcs(input:))
    }
}

extension DescribeVpcsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeVpcsInput {
        return DescribeVpcsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            vpcIds: self.vpcIds
        )}
}

extension PaginatorSequence where Input == DescribeVpcsInput, Output == DescribeVpcsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeVpcsPaginated`
    /// to access the nested member `[EC2ClientTypes.Vpc]`
    /// - Returns: `[EC2ClientTypes.Vpc]`
    public func vpcs() async throws -> [EC2ClientTypes.Vpc] {
        return try await self.asyncCompactMap { item in item.vpcs }
    }
}
extension EC2Client {
    /// Paginate over `[GetAssociatedIpv6PoolCidrsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetAssociatedIpv6PoolCidrsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetAssociatedIpv6PoolCidrsOutputResponse`
    public func getAssociatedIpv6PoolCidrsPaginated(input: GetAssociatedIpv6PoolCidrsInput) -> ClientRuntime.PaginatorSequence<GetAssociatedIpv6PoolCidrsInput, GetAssociatedIpv6PoolCidrsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetAssociatedIpv6PoolCidrsInput, GetAssociatedIpv6PoolCidrsOutputResponse>(input: input, inputKey: \GetAssociatedIpv6PoolCidrsInput.nextToken, outputKey: \GetAssociatedIpv6PoolCidrsOutputResponse.nextToken, paginationFunction: self.getAssociatedIpv6PoolCidrs(input:))
    }
}

extension GetAssociatedIpv6PoolCidrsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetAssociatedIpv6PoolCidrsInput {
        return GetAssociatedIpv6PoolCidrsInput(
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token,
            poolId: self.poolId
        )}
}

extension PaginatorSequence where Input == GetAssociatedIpv6PoolCidrsInput, Output == GetAssociatedIpv6PoolCidrsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getAssociatedIpv6PoolCidrsPaginated`
    /// to access the nested member `[EC2ClientTypes.Ipv6CidrAssociation]`
    /// - Returns: `[EC2ClientTypes.Ipv6CidrAssociation]`
    public func ipv6CidrAssociations() async throws -> [EC2ClientTypes.Ipv6CidrAssociation] {
        return try await self.asyncCompactMap { item in item.ipv6CidrAssociations }
    }
}
extension EC2Client {
    /// Paginate over `[GetAwsNetworkPerformanceDataOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetAwsNetworkPerformanceDataInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetAwsNetworkPerformanceDataOutputResponse`
    public func getAwsNetworkPerformanceDataPaginated(input: GetAwsNetworkPerformanceDataInput) -> ClientRuntime.PaginatorSequence<GetAwsNetworkPerformanceDataInput, GetAwsNetworkPerformanceDataOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetAwsNetworkPerformanceDataInput, GetAwsNetworkPerformanceDataOutputResponse>(input: input, inputKey: \GetAwsNetworkPerformanceDataInput.nextToken, outputKey: \GetAwsNetworkPerformanceDataOutputResponse.nextToken, paginationFunction: self.getAwsNetworkPerformanceData(input:))
    }
}

extension GetAwsNetworkPerformanceDataInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetAwsNetworkPerformanceDataInput {
        return GetAwsNetworkPerformanceDataInput(
            dataQueries: self.dataQueries,
            dryRun: self.dryRun,
            endTime: self.endTime,
            maxResults: self.maxResults,
            nextToken: token,
            startTime: self.startTime
        )}
}

extension PaginatorSequence where Input == GetAwsNetworkPerformanceDataInput, Output == GetAwsNetworkPerformanceDataOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getAwsNetworkPerformanceDataPaginated`
    /// to access the nested member `[EC2ClientTypes.DataResponse]`
    /// - Returns: `[EC2ClientTypes.DataResponse]`
    public func dataResponses() async throws -> [EC2ClientTypes.DataResponse] {
        return try await self.asyncCompactMap { item in item.dataResponses }
    }
}
extension EC2Client {
    /// Paginate over `[GetGroupsForCapacityReservationOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetGroupsForCapacityReservationInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetGroupsForCapacityReservationOutputResponse`
    public func getGroupsForCapacityReservationPaginated(input: GetGroupsForCapacityReservationInput) -> ClientRuntime.PaginatorSequence<GetGroupsForCapacityReservationInput, GetGroupsForCapacityReservationOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetGroupsForCapacityReservationInput, GetGroupsForCapacityReservationOutputResponse>(input: input, inputKey: \GetGroupsForCapacityReservationInput.nextToken, outputKey: \GetGroupsForCapacityReservationOutputResponse.nextToken, paginationFunction: self.getGroupsForCapacityReservation(input:))
    }
}

extension GetGroupsForCapacityReservationInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetGroupsForCapacityReservationInput {
        return GetGroupsForCapacityReservationInput(
            capacityReservationId: self.capacityReservationId,
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == GetGroupsForCapacityReservationInput, Output == GetGroupsForCapacityReservationOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getGroupsForCapacityReservationPaginated`
    /// to access the nested member `[EC2ClientTypes.CapacityReservationGroup]`
    /// - Returns: `[EC2ClientTypes.CapacityReservationGroup]`
    public func capacityReservationGroups() async throws -> [EC2ClientTypes.CapacityReservationGroup] {
        return try await self.asyncCompactMap { item in item.capacityReservationGroups }
    }
}
extension EC2Client {
    /// Paginate over `[GetInstanceTypesFromInstanceRequirementsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetInstanceTypesFromInstanceRequirementsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetInstanceTypesFromInstanceRequirementsOutputResponse`
    public func getInstanceTypesFromInstanceRequirementsPaginated(input: GetInstanceTypesFromInstanceRequirementsInput) -> ClientRuntime.PaginatorSequence<GetInstanceTypesFromInstanceRequirementsInput, GetInstanceTypesFromInstanceRequirementsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetInstanceTypesFromInstanceRequirementsInput, GetInstanceTypesFromInstanceRequirementsOutputResponse>(input: input, inputKey: \GetInstanceTypesFromInstanceRequirementsInput.nextToken, outputKey: \GetInstanceTypesFromInstanceRequirementsOutputResponse.nextToken, paginationFunction: self.getInstanceTypesFromInstanceRequirements(input:))
    }
}

extension GetInstanceTypesFromInstanceRequirementsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetInstanceTypesFromInstanceRequirementsInput {
        return GetInstanceTypesFromInstanceRequirementsInput(
            architectureTypes: self.architectureTypes,
            dryRun: self.dryRun,
            instanceRequirements: self.instanceRequirements,
            maxResults: self.maxResults,
            nextToken: token,
            virtualizationTypes: self.virtualizationTypes
        )}
}

extension PaginatorSequence where Input == GetInstanceTypesFromInstanceRequirementsInput, Output == GetInstanceTypesFromInstanceRequirementsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getInstanceTypesFromInstanceRequirementsPaginated`
    /// to access the nested member `[EC2ClientTypes.InstanceTypeInfoFromInstanceRequirements]`
    /// - Returns: `[EC2ClientTypes.InstanceTypeInfoFromInstanceRequirements]`
    public func instanceTypes() async throws -> [EC2ClientTypes.InstanceTypeInfoFromInstanceRequirements] {
        return try await self.asyncCompactMap { item in item.instanceTypes }
    }
}
extension EC2Client {
    /// Paginate over `[GetIpamAddressHistoryOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetIpamAddressHistoryInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetIpamAddressHistoryOutputResponse`
    public func getIpamAddressHistoryPaginated(input: GetIpamAddressHistoryInput) -> ClientRuntime.PaginatorSequence<GetIpamAddressHistoryInput, GetIpamAddressHistoryOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetIpamAddressHistoryInput, GetIpamAddressHistoryOutputResponse>(input: input, inputKey: \GetIpamAddressHistoryInput.nextToken, outputKey: \GetIpamAddressHistoryOutputResponse.nextToken, paginationFunction: self.getIpamAddressHistory(input:))
    }
}

extension GetIpamAddressHistoryInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetIpamAddressHistoryInput {
        return GetIpamAddressHistoryInput(
            cidr: self.cidr,
            dryRun: self.dryRun,
            endTime: self.endTime,
            ipamScopeId: self.ipamScopeId,
            maxResults: self.maxResults,
            nextToken: token,
            startTime: self.startTime,
            vpcId: self.vpcId
        )}
}

extension PaginatorSequence where Input == GetIpamAddressHistoryInput, Output == GetIpamAddressHistoryOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getIpamAddressHistoryPaginated`
    /// to access the nested member `[EC2ClientTypes.IpamAddressHistoryRecord]`
    /// - Returns: `[EC2ClientTypes.IpamAddressHistoryRecord]`
    public func historyRecords() async throws -> [EC2ClientTypes.IpamAddressHistoryRecord] {
        return try await self.asyncCompactMap { item in item.historyRecords }
    }
}
extension EC2Client {
    /// Paginate over `[GetIpamDiscoveredAccountsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetIpamDiscoveredAccountsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetIpamDiscoveredAccountsOutputResponse`
    public func getIpamDiscoveredAccountsPaginated(input: GetIpamDiscoveredAccountsInput) -> ClientRuntime.PaginatorSequence<GetIpamDiscoveredAccountsInput, GetIpamDiscoveredAccountsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetIpamDiscoveredAccountsInput, GetIpamDiscoveredAccountsOutputResponse>(input: input, inputKey: \GetIpamDiscoveredAccountsInput.nextToken, outputKey: \GetIpamDiscoveredAccountsOutputResponse.nextToken, paginationFunction: self.getIpamDiscoveredAccounts(input:))
    }
}

extension GetIpamDiscoveredAccountsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetIpamDiscoveredAccountsInput {
        return GetIpamDiscoveredAccountsInput(
            discoveryRegion: self.discoveryRegion,
            dryRun: self.dryRun,
            filters: self.filters,
            ipamResourceDiscoveryId: self.ipamResourceDiscoveryId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == GetIpamDiscoveredAccountsInput, Output == GetIpamDiscoveredAccountsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getIpamDiscoveredAccountsPaginated`
    /// to access the nested member `[EC2ClientTypes.IpamDiscoveredAccount]`
    /// - Returns: `[EC2ClientTypes.IpamDiscoveredAccount]`
    public func ipamDiscoveredAccounts() async throws -> [EC2ClientTypes.IpamDiscoveredAccount] {
        return try await self.asyncCompactMap { item in item.ipamDiscoveredAccounts }
    }
}
extension EC2Client {
    /// Paginate over `[GetIpamDiscoveredResourceCidrsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetIpamDiscoveredResourceCidrsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetIpamDiscoveredResourceCidrsOutputResponse`
    public func getIpamDiscoveredResourceCidrsPaginated(input: GetIpamDiscoveredResourceCidrsInput) -> ClientRuntime.PaginatorSequence<GetIpamDiscoveredResourceCidrsInput, GetIpamDiscoveredResourceCidrsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetIpamDiscoveredResourceCidrsInput, GetIpamDiscoveredResourceCidrsOutputResponse>(input: input, inputKey: \GetIpamDiscoveredResourceCidrsInput.nextToken, outputKey: \GetIpamDiscoveredResourceCidrsOutputResponse.nextToken, paginationFunction: self.getIpamDiscoveredResourceCidrs(input:))
    }
}

extension GetIpamDiscoveredResourceCidrsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetIpamDiscoveredResourceCidrsInput {
        return GetIpamDiscoveredResourceCidrsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            ipamResourceDiscoveryId: self.ipamResourceDiscoveryId,
            maxResults: self.maxResults,
            nextToken: token,
            resourceRegion: self.resourceRegion
        )}
}

extension PaginatorSequence where Input == GetIpamDiscoveredResourceCidrsInput, Output == GetIpamDiscoveredResourceCidrsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getIpamDiscoveredResourceCidrsPaginated`
    /// to access the nested member `[EC2ClientTypes.IpamDiscoveredResourceCidr]`
    /// - Returns: `[EC2ClientTypes.IpamDiscoveredResourceCidr]`
    public func ipamDiscoveredResourceCidrs() async throws -> [EC2ClientTypes.IpamDiscoveredResourceCidr] {
        return try await self.asyncCompactMap { item in item.ipamDiscoveredResourceCidrs }
    }
}
extension EC2Client {
    /// Paginate over `[GetIpamPoolAllocationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetIpamPoolAllocationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetIpamPoolAllocationsOutputResponse`
    public func getIpamPoolAllocationsPaginated(input: GetIpamPoolAllocationsInput) -> ClientRuntime.PaginatorSequence<GetIpamPoolAllocationsInput, GetIpamPoolAllocationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetIpamPoolAllocationsInput, GetIpamPoolAllocationsOutputResponse>(input: input, inputKey: \GetIpamPoolAllocationsInput.nextToken, outputKey: \GetIpamPoolAllocationsOutputResponse.nextToken, paginationFunction: self.getIpamPoolAllocations(input:))
    }
}

extension GetIpamPoolAllocationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetIpamPoolAllocationsInput {
        return GetIpamPoolAllocationsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            ipamPoolAllocationId: self.ipamPoolAllocationId,
            ipamPoolId: self.ipamPoolId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == GetIpamPoolAllocationsInput, Output == GetIpamPoolAllocationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getIpamPoolAllocationsPaginated`
    /// to access the nested member `[EC2ClientTypes.IpamPoolAllocation]`
    /// - Returns: `[EC2ClientTypes.IpamPoolAllocation]`
    public func ipamPoolAllocations() async throws -> [EC2ClientTypes.IpamPoolAllocation] {
        return try await self.asyncCompactMap { item in item.ipamPoolAllocations }
    }
}
extension EC2Client {
    /// Paginate over `[GetIpamPoolCidrsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetIpamPoolCidrsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetIpamPoolCidrsOutputResponse`
    public func getIpamPoolCidrsPaginated(input: GetIpamPoolCidrsInput) -> ClientRuntime.PaginatorSequence<GetIpamPoolCidrsInput, GetIpamPoolCidrsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetIpamPoolCidrsInput, GetIpamPoolCidrsOutputResponse>(input: input, inputKey: \GetIpamPoolCidrsInput.nextToken, outputKey: \GetIpamPoolCidrsOutputResponse.nextToken, paginationFunction: self.getIpamPoolCidrs(input:))
    }
}

extension GetIpamPoolCidrsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetIpamPoolCidrsInput {
        return GetIpamPoolCidrsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            ipamPoolId: self.ipamPoolId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == GetIpamPoolCidrsInput, Output == GetIpamPoolCidrsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getIpamPoolCidrsPaginated`
    /// to access the nested member `[EC2ClientTypes.IpamPoolCidr]`
    /// - Returns: `[EC2ClientTypes.IpamPoolCidr]`
    public func ipamPoolCidrs() async throws -> [EC2ClientTypes.IpamPoolCidr] {
        return try await self.asyncCompactMap { item in item.ipamPoolCidrs }
    }
}
extension EC2Client {
    /// Paginate over `[GetIpamResourceCidrsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetIpamResourceCidrsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetIpamResourceCidrsOutputResponse`
    public func getIpamResourceCidrsPaginated(input: GetIpamResourceCidrsInput) -> ClientRuntime.PaginatorSequence<GetIpamResourceCidrsInput, GetIpamResourceCidrsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetIpamResourceCidrsInput, GetIpamResourceCidrsOutputResponse>(input: input, inputKey: \GetIpamResourceCidrsInput.nextToken, outputKey: \GetIpamResourceCidrsOutputResponse.nextToken, paginationFunction: self.getIpamResourceCidrs(input:))
    }
}

extension GetIpamResourceCidrsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetIpamResourceCidrsInput {
        return GetIpamResourceCidrsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            ipamPoolId: self.ipamPoolId,
            ipamScopeId: self.ipamScopeId,
            maxResults: self.maxResults,
            nextToken: token,
            resourceId: self.resourceId,
            resourceOwner: self.resourceOwner,
            resourceTag: self.resourceTag,
            resourceType: self.resourceType
        )}
}

extension PaginatorSequence where Input == GetIpamResourceCidrsInput, Output == GetIpamResourceCidrsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getIpamResourceCidrsPaginated`
    /// to access the nested member `[EC2ClientTypes.IpamResourceCidr]`
    /// - Returns: `[EC2ClientTypes.IpamResourceCidr]`
    public func ipamResourceCidrs() async throws -> [EC2ClientTypes.IpamResourceCidr] {
        return try await self.asyncCompactMap { item in item.ipamResourceCidrs }
    }
}
extension EC2Client {
    /// Paginate over `[GetManagedPrefixListAssociationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetManagedPrefixListAssociationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetManagedPrefixListAssociationsOutputResponse`
    public func getManagedPrefixListAssociationsPaginated(input: GetManagedPrefixListAssociationsInput) -> ClientRuntime.PaginatorSequence<GetManagedPrefixListAssociationsInput, GetManagedPrefixListAssociationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetManagedPrefixListAssociationsInput, GetManagedPrefixListAssociationsOutputResponse>(input: input, inputKey: \GetManagedPrefixListAssociationsInput.nextToken, outputKey: \GetManagedPrefixListAssociationsOutputResponse.nextToken, paginationFunction: self.getManagedPrefixListAssociations(input:))
    }
}

extension GetManagedPrefixListAssociationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetManagedPrefixListAssociationsInput {
        return GetManagedPrefixListAssociationsInput(
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token,
            prefixListId: self.prefixListId
        )}
}

extension PaginatorSequence where Input == GetManagedPrefixListAssociationsInput, Output == GetManagedPrefixListAssociationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getManagedPrefixListAssociationsPaginated`
    /// to access the nested member `[EC2ClientTypes.PrefixListAssociation]`
    /// - Returns: `[EC2ClientTypes.PrefixListAssociation]`
    public func prefixListAssociations() async throws -> [EC2ClientTypes.PrefixListAssociation] {
        return try await self.asyncCompactMap { item in item.prefixListAssociations }
    }
}
extension EC2Client {
    /// Paginate over `[GetManagedPrefixListEntriesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetManagedPrefixListEntriesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetManagedPrefixListEntriesOutputResponse`
    public func getManagedPrefixListEntriesPaginated(input: GetManagedPrefixListEntriesInput) -> ClientRuntime.PaginatorSequence<GetManagedPrefixListEntriesInput, GetManagedPrefixListEntriesOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetManagedPrefixListEntriesInput, GetManagedPrefixListEntriesOutputResponse>(input: input, inputKey: \GetManagedPrefixListEntriesInput.nextToken, outputKey: \GetManagedPrefixListEntriesOutputResponse.nextToken, paginationFunction: self.getManagedPrefixListEntries(input:))
    }
}

extension GetManagedPrefixListEntriesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetManagedPrefixListEntriesInput {
        return GetManagedPrefixListEntriesInput(
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token,
            prefixListId: self.prefixListId,
            targetVersion: self.targetVersion
        )}
}

extension PaginatorSequence where Input == GetManagedPrefixListEntriesInput, Output == GetManagedPrefixListEntriesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getManagedPrefixListEntriesPaginated`
    /// to access the nested member `[EC2ClientTypes.PrefixListEntry]`
    /// - Returns: `[EC2ClientTypes.PrefixListEntry]`
    public func entries() async throws -> [EC2ClientTypes.PrefixListEntry] {
        return try await self.asyncCompactMap { item in item.entries }
    }
}
extension EC2Client {
    /// Paginate over `[GetSpotPlacementScoresOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetSpotPlacementScoresInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetSpotPlacementScoresOutputResponse`
    public func getSpotPlacementScoresPaginated(input: GetSpotPlacementScoresInput) -> ClientRuntime.PaginatorSequence<GetSpotPlacementScoresInput, GetSpotPlacementScoresOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetSpotPlacementScoresInput, GetSpotPlacementScoresOutputResponse>(input: input, inputKey: \GetSpotPlacementScoresInput.nextToken, outputKey: \GetSpotPlacementScoresOutputResponse.nextToken, paginationFunction: self.getSpotPlacementScores(input:))
    }
}

extension GetSpotPlacementScoresInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetSpotPlacementScoresInput {
        return GetSpotPlacementScoresInput(
            dryRun: self.dryRun,
            instanceRequirementsWithMetadata: self.instanceRequirementsWithMetadata,
            instanceTypes: self.instanceTypes,
            maxResults: self.maxResults,
            nextToken: token,
            regionNames: self.regionNames,
            singleAvailabilityZone: self.singleAvailabilityZone,
            targetCapacity: self.targetCapacity,
            targetCapacityUnitType: self.targetCapacityUnitType
        )}
}

extension PaginatorSequence where Input == GetSpotPlacementScoresInput, Output == GetSpotPlacementScoresOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getSpotPlacementScoresPaginated`
    /// to access the nested member `[EC2ClientTypes.SpotPlacementScore]`
    /// - Returns: `[EC2ClientTypes.SpotPlacementScore]`
    public func spotPlacementScores() async throws -> [EC2ClientTypes.SpotPlacementScore] {
        return try await self.asyncCompactMap { item in item.spotPlacementScores }
    }
}
extension EC2Client {
    /// Paginate over `[GetTransitGatewayAttachmentPropagationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetTransitGatewayAttachmentPropagationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetTransitGatewayAttachmentPropagationsOutputResponse`
    public func getTransitGatewayAttachmentPropagationsPaginated(input: GetTransitGatewayAttachmentPropagationsInput) -> ClientRuntime.PaginatorSequence<GetTransitGatewayAttachmentPropagationsInput, GetTransitGatewayAttachmentPropagationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetTransitGatewayAttachmentPropagationsInput, GetTransitGatewayAttachmentPropagationsOutputResponse>(input: input, inputKey: \GetTransitGatewayAttachmentPropagationsInput.nextToken, outputKey: \GetTransitGatewayAttachmentPropagationsOutputResponse.nextToken, paginationFunction: self.getTransitGatewayAttachmentPropagations(input:))
    }
}

extension GetTransitGatewayAttachmentPropagationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetTransitGatewayAttachmentPropagationsInput {
        return GetTransitGatewayAttachmentPropagationsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayAttachmentId: self.transitGatewayAttachmentId
        )}
}

extension PaginatorSequence where Input == GetTransitGatewayAttachmentPropagationsInput, Output == GetTransitGatewayAttachmentPropagationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getTransitGatewayAttachmentPropagationsPaginated`
    /// to access the nested member `[EC2ClientTypes.TransitGatewayAttachmentPropagation]`
    /// - Returns: `[EC2ClientTypes.TransitGatewayAttachmentPropagation]`
    public func transitGatewayAttachmentPropagations() async throws -> [EC2ClientTypes.TransitGatewayAttachmentPropagation] {
        return try await self.asyncCompactMap { item in item.transitGatewayAttachmentPropagations }
    }
}
extension EC2Client {
    /// Paginate over `[GetTransitGatewayMulticastDomainAssociationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetTransitGatewayMulticastDomainAssociationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetTransitGatewayMulticastDomainAssociationsOutputResponse`
    public func getTransitGatewayMulticastDomainAssociationsPaginated(input: GetTransitGatewayMulticastDomainAssociationsInput) -> ClientRuntime.PaginatorSequence<GetTransitGatewayMulticastDomainAssociationsInput, GetTransitGatewayMulticastDomainAssociationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetTransitGatewayMulticastDomainAssociationsInput, GetTransitGatewayMulticastDomainAssociationsOutputResponse>(input: input, inputKey: \GetTransitGatewayMulticastDomainAssociationsInput.nextToken, outputKey: \GetTransitGatewayMulticastDomainAssociationsOutputResponse.nextToken, paginationFunction: self.getTransitGatewayMulticastDomainAssociations(input:))
    }
}

extension GetTransitGatewayMulticastDomainAssociationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetTransitGatewayMulticastDomainAssociationsInput {
        return GetTransitGatewayMulticastDomainAssociationsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayMulticastDomainId: self.transitGatewayMulticastDomainId
        )}
}

extension PaginatorSequence where Input == GetTransitGatewayMulticastDomainAssociationsInput, Output == GetTransitGatewayMulticastDomainAssociationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getTransitGatewayMulticastDomainAssociationsPaginated`
    /// to access the nested member `[EC2ClientTypes.TransitGatewayMulticastDomainAssociation]`
    /// - Returns: `[EC2ClientTypes.TransitGatewayMulticastDomainAssociation]`
    public func multicastDomainAssociations() async throws -> [EC2ClientTypes.TransitGatewayMulticastDomainAssociation] {
        return try await self.asyncCompactMap { item in item.multicastDomainAssociations }
    }
}
extension EC2Client {
    /// Paginate over `[GetTransitGatewayPolicyTableAssociationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetTransitGatewayPolicyTableAssociationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetTransitGatewayPolicyTableAssociationsOutputResponse`
    public func getTransitGatewayPolicyTableAssociationsPaginated(input: GetTransitGatewayPolicyTableAssociationsInput) -> ClientRuntime.PaginatorSequence<GetTransitGatewayPolicyTableAssociationsInput, GetTransitGatewayPolicyTableAssociationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetTransitGatewayPolicyTableAssociationsInput, GetTransitGatewayPolicyTableAssociationsOutputResponse>(input: input, inputKey: \GetTransitGatewayPolicyTableAssociationsInput.nextToken, outputKey: \GetTransitGatewayPolicyTableAssociationsOutputResponse.nextToken, paginationFunction: self.getTransitGatewayPolicyTableAssociations(input:))
    }
}

extension GetTransitGatewayPolicyTableAssociationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetTransitGatewayPolicyTableAssociationsInput {
        return GetTransitGatewayPolicyTableAssociationsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayPolicyTableId: self.transitGatewayPolicyTableId
        )}
}

extension PaginatorSequence where Input == GetTransitGatewayPolicyTableAssociationsInput, Output == GetTransitGatewayPolicyTableAssociationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getTransitGatewayPolicyTableAssociationsPaginated`
    /// to access the nested member `[EC2ClientTypes.TransitGatewayPolicyTableAssociation]`
    /// - Returns: `[EC2ClientTypes.TransitGatewayPolicyTableAssociation]`
    public func associations() async throws -> [EC2ClientTypes.TransitGatewayPolicyTableAssociation] {
        return try await self.asyncCompactMap { item in item.associations }
    }
}
extension EC2Client {
    /// Paginate over `[GetTransitGatewayPrefixListReferencesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetTransitGatewayPrefixListReferencesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetTransitGatewayPrefixListReferencesOutputResponse`
    public func getTransitGatewayPrefixListReferencesPaginated(input: GetTransitGatewayPrefixListReferencesInput) -> ClientRuntime.PaginatorSequence<GetTransitGatewayPrefixListReferencesInput, GetTransitGatewayPrefixListReferencesOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetTransitGatewayPrefixListReferencesInput, GetTransitGatewayPrefixListReferencesOutputResponse>(input: input, inputKey: \GetTransitGatewayPrefixListReferencesInput.nextToken, outputKey: \GetTransitGatewayPrefixListReferencesOutputResponse.nextToken, paginationFunction: self.getTransitGatewayPrefixListReferences(input:))
    }
}

extension GetTransitGatewayPrefixListReferencesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetTransitGatewayPrefixListReferencesInput {
        return GetTransitGatewayPrefixListReferencesInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayRouteTableId: self.transitGatewayRouteTableId
        )}
}

extension PaginatorSequence where Input == GetTransitGatewayPrefixListReferencesInput, Output == GetTransitGatewayPrefixListReferencesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getTransitGatewayPrefixListReferencesPaginated`
    /// to access the nested member `[EC2ClientTypes.TransitGatewayPrefixListReference]`
    /// - Returns: `[EC2ClientTypes.TransitGatewayPrefixListReference]`
    public func transitGatewayPrefixListReferences() async throws -> [EC2ClientTypes.TransitGatewayPrefixListReference] {
        return try await self.asyncCompactMap { item in item.transitGatewayPrefixListReferences }
    }
}
extension EC2Client {
    /// Paginate over `[GetTransitGatewayRouteTableAssociationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetTransitGatewayRouteTableAssociationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetTransitGatewayRouteTableAssociationsOutputResponse`
    public func getTransitGatewayRouteTableAssociationsPaginated(input: GetTransitGatewayRouteTableAssociationsInput) -> ClientRuntime.PaginatorSequence<GetTransitGatewayRouteTableAssociationsInput, GetTransitGatewayRouteTableAssociationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetTransitGatewayRouteTableAssociationsInput, GetTransitGatewayRouteTableAssociationsOutputResponse>(input: input, inputKey: \GetTransitGatewayRouteTableAssociationsInput.nextToken, outputKey: \GetTransitGatewayRouteTableAssociationsOutputResponse.nextToken, paginationFunction: self.getTransitGatewayRouteTableAssociations(input:))
    }
}

extension GetTransitGatewayRouteTableAssociationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetTransitGatewayRouteTableAssociationsInput {
        return GetTransitGatewayRouteTableAssociationsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayRouteTableId: self.transitGatewayRouteTableId
        )}
}

extension PaginatorSequence where Input == GetTransitGatewayRouteTableAssociationsInput, Output == GetTransitGatewayRouteTableAssociationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getTransitGatewayRouteTableAssociationsPaginated`
    /// to access the nested member `[EC2ClientTypes.TransitGatewayRouteTableAssociation]`
    /// - Returns: `[EC2ClientTypes.TransitGatewayRouteTableAssociation]`
    public func associations() async throws -> [EC2ClientTypes.TransitGatewayRouteTableAssociation] {
        return try await self.asyncCompactMap { item in item.associations }
    }
}
extension EC2Client {
    /// Paginate over `[GetTransitGatewayRouteTablePropagationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetTransitGatewayRouteTablePropagationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetTransitGatewayRouteTablePropagationsOutputResponse`
    public func getTransitGatewayRouteTablePropagationsPaginated(input: GetTransitGatewayRouteTablePropagationsInput) -> ClientRuntime.PaginatorSequence<GetTransitGatewayRouteTablePropagationsInput, GetTransitGatewayRouteTablePropagationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetTransitGatewayRouteTablePropagationsInput, GetTransitGatewayRouteTablePropagationsOutputResponse>(input: input, inputKey: \GetTransitGatewayRouteTablePropagationsInput.nextToken, outputKey: \GetTransitGatewayRouteTablePropagationsOutputResponse.nextToken, paginationFunction: self.getTransitGatewayRouteTablePropagations(input:))
    }
}

extension GetTransitGatewayRouteTablePropagationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetTransitGatewayRouteTablePropagationsInput {
        return GetTransitGatewayRouteTablePropagationsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayRouteTableId: self.transitGatewayRouteTableId
        )}
}

extension PaginatorSequence where Input == GetTransitGatewayRouteTablePropagationsInput, Output == GetTransitGatewayRouteTablePropagationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getTransitGatewayRouteTablePropagationsPaginated`
    /// to access the nested member `[EC2ClientTypes.TransitGatewayRouteTablePropagation]`
    /// - Returns: `[EC2ClientTypes.TransitGatewayRouteTablePropagation]`
    public func transitGatewayRouteTablePropagations() async throws -> [EC2ClientTypes.TransitGatewayRouteTablePropagation] {
        return try await self.asyncCompactMap { item in item.transitGatewayRouteTablePropagations }
    }
}
extension EC2Client {
    /// Paginate over `[GetVpnConnectionDeviceTypesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetVpnConnectionDeviceTypesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetVpnConnectionDeviceTypesOutputResponse`
    public func getVpnConnectionDeviceTypesPaginated(input: GetVpnConnectionDeviceTypesInput) -> ClientRuntime.PaginatorSequence<GetVpnConnectionDeviceTypesInput, GetVpnConnectionDeviceTypesOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetVpnConnectionDeviceTypesInput, GetVpnConnectionDeviceTypesOutputResponse>(input: input, inputKey: \GetVpnConnectionDeviceTypesInput.nextToken, outputKey: \GetVpnConnectionDeviceTypesOutputResponse.nextToken, paginationFunction: self.getVpnConnectionDeviceTypes(input:))
    }
}

extension GetVpnConnectionDeviceTypesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetVpnConnectionDeviceTypesInput {
        return GetVpnConnectionDeviceTypesInput(
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == GetVpnConnectionDeviceTypesInput, Output == GetVpnConnectionDeviceTypesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getVpnConnectionDeviceTypesPaginated`
    /// to access the nested member `[EC2ClientTypes.VpnConnectionDeviceType]`
    /// - Returns: `[EC2ClientTypes.VpnConnectionDeviceType]`
    public func vpnConnectionDeviceTypes() async throws -> [EC2ClientTypes.VpnConnectionDeviceType] {
        return try await self.asyncCompactMap { item in item.vpnConnectionDeviceTypes }
    }
}
extension EC2Client {
    /// Paginate over `[ListImagesInRecycleBinOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListImagesInRecycleBinInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListImagesInRecycleBinOutputResponse`
    public func listImagesInRecycleBinPaginated(input: ListImagesInRecycleBinInput) -> ClientRuntime.PaginatorSequence<ListImagesInRecycleBinInput, ListImagesInRecycleBinOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListImagesInRecycleBinInput, ListImagesInRecycleBinOutputResponse>(input: input, inputKey: \ListImagesInRecycleBinInput.nextToken, outputKey: \ListImagesInRecycleBinOutputResponse.nextToken, paginationFunction: self.listImagesInRecycleBin(input:))
    }
}

extension ListImagesInRecycleBinInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListImagesInRecycleBinInput {
        return ListImagesInRecycleBinInput(
            dryRun: self.dryRun,
            imageIds: self.imageIds,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListImagesInRecycleBinInput, Output == ListImagesInRecycleBinOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listImagesInRecycleBinPaginated`
    /// to access the nested member `[EC2ClientTypes.ImageRecycleBinInfo]`
    /// - Returns: `[EC2ClientTypes.ImageRecycleBinInfo]`
    public func images() async throws -> [EC2ClientTypes.ImageRecycleBinInfo] {
        return try await self.asyncCompactMap { item in item.images }
    }
}
extension EC2Client {
    /// Paginate over `[ListSnapshotsInRecycleBinOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListSnapshotsInRecycleBinInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListSnapshotsInRecycleBinOutputResponse`
    public func listSnapshotsInRecycleBinPaginated(input: ListSnapshotsInRecycleBinInput) -> ClientRuntime.PaginatorSequence<ListSnapshotsInRecycleBinInput, ListSnapshotsInRecycleBinOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListSnapshotsInRecycleBinInput, ListSnapshotsInRecycleBinOutputResponse>(input: input, inputKey: \ListSnapshotsInRecycleBinInput.nextToken, outputKey: \ListSnapshotsInRecycleBinOutputResponse.nextToken, paginationFunction: self.listSnapshotsInRecycleBin(input:))
    }
}

extension ListSnapshotsInRecycleBinInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSnapshotsInRecycleBinInput {
        return ListSnapshotsInRecycleBinInput(
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token,
            snapshotIds: self.snapshotIds
        )}
}

extension PaginatorSequence where Input == ListSnapshotsInRecycleBinInput, Output == ListSnapshotsInRecycleBinOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listSnapshotsInRecycleBinPaginated`
    /// to access the nested member `[EC2ClientTypes.SnapshotRecycleBinInfo]`
    /// - Returns: `[EC2ClientTypes.SnapshotRecycleBinInfo]`
    public func snapshots() async throws -> [EC2ClientTypes.SnapshotRecycleBinInfo] {
        return try await self.asyncCompactMap { item in item.snapshots }
    }
}
extension EC2Client {
    /// Paginate over `[SearchLocalGatewayRoutesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[SearchLocalGatewayRoutesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `SearchLocalGatewayRoutesOutputResponse`
    public func searchLocalGatewayRoutesPaginated(input: SearchLocalGatewayRoutesInput) -> ClientRuntime.PaginatorSequence<SearchLocalGatewayRoutesInput, SearchLocalGatewayRoutesOutputResponse> {
        return ClientRuntime.PaginatorSequence<SearchLocalGatewayRoutesInput, SearchLocalGatewayRoutesOutputResponse>(input: input, inputKey: \SearchLocalGatewayRoutesInput.nextToken, outputKey: \SearchLocalGatewayRoutesOutputResponse.nextToken, paginationFunction: self.searchLocalGatewayRoutes(input:))
    }
}

extension SearchLocalGatewayRoutesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SearchLocalGatewayRoutesInput {
        return SearchLocalGatewayRoutesInput(
            dryRun: self.dryRun,
            filters: self.filters,
            localGatewayRouteTableId: self.localGatewayRouteTableId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == SearchLocalGatewayRoutesInput, Output == SearchLocalGatewayRoutesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `searchLocalGatewayRoutesPaginated`
    /// to access the nested member `[EC2ClientTypes.LocalGatewayRoute]`
    /// - Returns: `[EC2ClientTypes.LocalGatewayRoute]`
    public func routes() async throws -> [EC2ClientTypes.LocalGatewayRoute] {
        return try await self.asyncCompactMap { item in item.routes }
    }
}
extension EC2Client {
    /// Paginate over `[SearchTransitGatewayMulticastGroupsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[SearchTransitGatewayMulticastGroupsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `SearchTransitGatewayMulticastGroupsOutputResponse`
    public func searchTransitGatewayMulticastGroupsPaginated(input: SearchTransitGatewayMulticastGroupsInput) -> ClientRuntime.PaginatorSequence<SearchTransitGatewayMulticastGroupsInput, SearchTransitGatewayMulticastGroupsOutputResponse> {
        return ClientRuntime.PaginatorSequence<SearchTransitGatewayMulticastGroupsInput, SearchTransitGatewayMulticastGroupsOutputResponse>(input: input, inputKey: \SearchTransitGatewayMulticastGroupsInput.nextToken, outputKey: \SearchTransitGatewayMulticastGroupsOutputResponse.nextToken, paginationFunction: self.searchTransitGatewayMulticastGroups(input:))
    }
}

extension SearchTransitGatewayMulticastGroupsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SearchTransitGatewayMulticastGroupsInput {
        return SearchTransitGatewayMulticastGroupsInput(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayMulticastDomainId: self.transitGatewayMulticastDomainId
        )}
}

extension PaginatorSequence where Input == SearchTransitGatewayMulticastGroupsInput, Output == SearchTransitGatewayMulticastGroupsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `searchTransitGatewayMulticastGroupsPaginated`
    /// to access the nested member `[EC2ClientTypes.TransitGatewayMulticastGroup]`
    /// - Returns: `[EC2ClientTypes.TransitGatewayMulticastGroup]`
    public func multicastGroups() async throws -> [EC2ClientTypes.TransitGatewayMulticastGroup] {
        return try await self.asyncCompactMap { item in item.multicastGroups }
    }
}
