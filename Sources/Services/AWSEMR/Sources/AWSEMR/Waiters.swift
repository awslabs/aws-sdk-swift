// Code generated by smithy-swift-codegen. DO NOT EDIT!

import class ClientRuntime.Waiter
import enum ClientRuntime.JMESUtils
import struct ClientRuntime.WaiterConfiguration
import struct ClientRuntime.WaiterOptions
import struct ClientRuntime.WaiterOutcome

extension EMRClient {

    static func clusterRunningWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeClusterInput, DescribeClusterOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeClusterInput, DescribeClusterOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeClusterInput, result: Swift.Result<DescribeClusterOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Cluster.Status.State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "RUNNING"
                guard case .success(let output) = result else { return false }
                let cluster = output.cluster
                let status = cluster?.status
                let state = status?.state
                return ClientRuntime.JMESUtils.compare(state, ==, "RUNNING")
            }),
            .init(state: .success, matcher: { (input: DescribeClusterInput, result: Swift.Result<DescribeClusterOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Cluster.Status.State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "WAITING"
                guard case .success(let output) = result else { return false }
                let cluster = output.cluster
                let status = cluster?.status
                let state = status?.state
                return ClientRuntime.JMESUtils.compare(state, ==, "WAITING")
            }),
            .init(state: .failure, matcher: { (input: DescribeClusterInput, result: Swift.Result<DescribeClusterOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Cluster.Status.State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "TERMINATING"
                guard case .success(let output) = result else { return false }
                let cluster = output.cluster
                let status = cluster?.status
                let state = status?.state
                return ClientRuntime.JMESUtils.compare(state, ==, "TERMINATING")
            }),
            .init(state: .failure, matcher: { (input: DescribeClusterInput, result: Swift.Result<DescribeClusterOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Cluster.Status.State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "TERMINATED"
                guard case .success(let output) = result else { return false }
                let cluster = output.cluster
                let status = cluster?.status
                let state = status?.state
                return ClientRuntime.JMESUtils.compare(state, ==, "TERMINATED")
            }),
            .init(state: .failure, matcher: { (input: DescribeClusterInput, result: Swift.Result<DescribeClusterOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Cluster.Status.State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "TERMINATED_WITH_ERRORS"
                guard case .success(let output) = result else { return false }
                let cluster = output.cluster
                let status = cluster?.status
                let state = status?.state
                return ClientRuntime.JMESUtils.compare(state, ==, "TERMINATED_WITH_ERRORS")
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeClusterInput, DescribeClusterOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the ClusterRunning event on the describeCluster operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeClusterInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilClusterRunning(options: ClientRuntime.WaiterOptions, input: DescribeClusterInput) async throws -> ClientRuntime.WaiterOutcome<DescribeClusterOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.clusterRunningWaiterConfig(), operation: self.describeCluster(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func clusterTerminatedWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeClusterInput, DescribeClusterOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeClusterInput, DescribeClusterOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeClusterInput, result: Swift.Result<DescribeClusterOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Cluster.Status.State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "TERMINATED"
                guard case .success(let output) = result else { return false }
                let cluster = output.cluster
                let status = cluster?.status
                let state = status?.state
                return ClientRuntime.JMESUtils.compare(state, ==, "TERMINATED")
            }),
            .init(state: .failure, matcher: { (input: DescribeClusterInput, result: Swift.Result<DescribeClusterOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Cluster.Status.State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "TERMINATED_WITH_ERRORS"
                guard case .success(let output) = result else { return false }
                let cluster = output.cluster
                let status = cluster?.status
                let state = status?.state
                return ClientRuntime.JMESUtils.compare(state, ==, "TERMINATED_WITH_ERRORS")
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeClusterInput, DescribeClusterOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the ClusterTerminated event on the describeCluster operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeClusterInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilClusterTerminated(options: ClientRuntime.WaiterOptions, input: DescribeClusterInput) async throws -> ClientRuntime.WaiterOutcome<DescribeClusterOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.clusterTerminatedWaiterConfig(), operation: self.describeCluster(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func stepCompleteWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeStepInput, DescribeStepOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeStepInput, DescribeStepOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeStepInput, result: Swift.Result<DescribeStepOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Step.Status.State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "COMPLETED"
                guard case .success(let output) = result else { return false }
                let step = output.step
                let status = step?.status
                let state = status?.state
                return ClientRuntime.JMESUtils.compare(state, ==, "COMPLETED")
            }),
            .init(state: .failure, matcher: { (input: DescribeStepInput, result: Swift.Result<DescribeStepOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Step.Status.State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "FAILED"
                guard case .success(let output) = result else { return false }
                let step = output.step
                let status = step?.status
                let state = status?.state
                return ClientRuntime.JMESUtils.compare(state, ==, "FAILED")
            }),
            .init(state: .failure, matcher: { (input: DescribeStepInput, result: Swift.Result<DescribeStepOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Step.Status.State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "CANCELLED"
                guard case .success(let output) = result else { return false }
                let step = output.step
                let status = step?.status
                let state = status?.state
                return ClientRuntime.JMESUtils.compare(state, ==, "CANCELLED")
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeStepInput, DescribeStepOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the StepComplete event on the describeStep operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeStepInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilStepComplete(options: ClientRuntime.WaiterOptions, input: DescribeStepInput) async throws -> ClientRuntime.WaiterOutcome<DescribeStepOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.stepCompleteWaiterConfig(), operation: self.describeStep(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }
}
