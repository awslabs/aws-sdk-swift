//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.mapReadingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

public struct CreateStudioSessionMappingOutput {

    public init() { }
}

public struct DeleteStudioOutput {

    public init() { }
}

public struct DeleteStudioSessionMappingOutput {

    public init() { }
}

public struct ModifyInstanceFleetOutput {

    public init() { }
}

public struct ModifyInstanceGroupsOutput {

    public init() { }
}

public struct SetKeepJobFlowAliveWhenNoStepsOutput {

    public init() { }
}

public struct SetTerminationProtectionOutput {

    public init() { }
}

public struct SetUnhealthyNodeReplacementOutput {

    public init() { }
}

public struct SetVisibleToAllUsersOutput {

    public init() { }
}

public struct StopNotebookExecutionOutput {

    public init() { }
}

public struct TerminateJobFlowsOutput {

    public init() { }
}

public struct UpdateStudioOutput {

    public init() { }
}

public struct UpdateStudioSessionMappingOutput {

    public init() { }
}

extension EMRClientTypes {

    public enum ActionOnFailure: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelAndWait
        case `continue`
        case terminateCluster
        case terminateJobFlow
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionOnFailure] {
            return [
                .cancelAndWait,
                .continue,
                .terminateCluster,
                .terminateJobFlow
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelAndWait: return "CANCEL_AND_WAIT"
            case .continue: return "CONTINUE"
            case .terminateCluster: return "TERMINATE_CLUSTER"
            case .terminateJobFlow: return "TERMINATE_JOB_FLOW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// This exception occurs when there is an internal failure in the Amazon EMR service.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message associated with the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception occurs when there is something wrong with user input.
public struct InvalidRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The error code associated with the exception.
        public internal(set) var errorCode: Swift.String? = nil
        /// The message associated with the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        errorCode: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.errorCode = errorCode
        self.properties.message = message
    }
}

extension EMRClientTypes {

    public enum InstanceFleetType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case core
        case master
        case task
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceFleetType] {
            return [
                .core,
                .master,
                .task
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .core: return "CORE"
            case .master: return "MASTER"
            case .task: return "TASK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// EBS volume specifications such as volume type, IOPS, size (GiB) and throughput (MiB/s) that are requested for the EBS volume attached to an Amazon EC2 instance in the cluster.
    public struct VolumeSpecification {
        /// The number of I/O operations per second (IOPS) that the volume supports.
        public var iops: Swift.Int?
        /// The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.
        /// This member is required.
        public var sizeInGB: Swift.Int?
        /// The throughput, in mebibyte per second (MiB/s). This optional parameter can be a number from 125 - 1000 and is valid only for gp3 volumes.
        public var throughput: Swift.Int?
        /// The volume type. Volume types supported are gp3, gp2, io1, st1, sc1, and standard.
        /// This member is required.
        public var volumeType: Swift.String?

        public init(
            iops: Swift.Int? = nil,
            sizeInGB: Swift.Int? = nil,
            throughput: Swift.Int? = nil,
            volumeType: Swift.String? = nil
        )
        {
            self.iops = iops
            self.sizeInGB = sizeInGB
            self.throughput = throughput
            self.volumeType = volumeType
        }
    }

}

extension EMRClientTypes {
    /// Configuration of requested EBS block device associated with the instance group with count of volumes that are associated to every instance.
    public struct EbsBlockDeviceConfig {
        /// EBS volume specifications such as volume type, IOPS, size (GiB) and throughput (MiB/s) that are requested for the EBS volume attached to an Amazon EC2 instance in the cluster.
        /// This member is required.
        public var volumeSpecification: EMRClientTypes.VolumeSpecification?
        /// Number of EBS volumes with a specific volume configuration that are associated with every instance in the instance group
        public var volumesPerInstance: Swift.Int?

        public init(
            volumeSpecification: EMRClientTypes.VolumeSpecification? = nil,
            volumesPerInstance: Swift.Int? = nil
        )
        {
            self.volumeSpecification = volumeSpecification
            self.volumesPerInstance = volumesPerInstance
        }
    }

}

extension EMRClientTypes {
    /// The Amazon EBS configuration of a cluster instance.
    public struct EbsConfiguration {
        /// An array of Amazon EBS volume specifications attached to a cluster instance.
        public var ebsBlockDeviceConfigs: [EMRClientTypes.EbsBlockDeviceConfig]?
        /// Indicates whether an Amazon EBS volume is EBS-optimized.
        public var ebsOptimized: Swift.Bool?

        public init(
            ebsBlockDeviceConfigs: [EMRClientTypes.EbsBlockDeviceConfig]? = nil,
            ebsOptimized: Swift.Bool? = nil
        )
        {
            self.ebsBlockDeviceConfigs = ebsBlockDeviceConfigs
            self.ebsOptimized = ebsOptimized
        }
    }

}

extension EMRClientTypes {

    public enum OnDemandProvisioningAllocationStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case lowestPrice
        case prioritized
        case sdkUnknown(Swift.String)

        public static var allCases: [OnDemandProvisioningAllocationStrategy] {
            return [
                .lowestPrice,
                .prioritized
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .lowestPrice: return "lowest-price"
            case .prioritized: return "prioritized"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {

    public enum OnDemandCapacityReservationPreference: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case `open`
        case sdkUnknown(Swift.String)

        public static var allCases: [OnDemandCapacityReservationPreference] {
            return [
                .none,
                .open
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "none"
            case .open: return "open"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {

    public enum OnDemandCapacityReservationUsageStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case useCapacityReservationsFirst
        case sdkUnknown(Swift.String)

        public static var allCases: [OnDemandCapacityReservationUsageStrategy] {
            return [
                .useCapacityReservationsFirst
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .useCapacityReservationsFirst: return "use-capacity-reservations-first"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// Describes the strategy for using unused Capacity Reservations for fulfilling On-Demand capacity.
    public struct OnDemandCapacityReservationOptions {
        /// Indicates the instance's Capacity Reservation preferences. Possible preferences include:
        ///
        /// * open - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
        ///
        /// * none - The instance avoids running in a Capacity Reservation even if one is available. The instance runs as an On-Demand Instance.
        public var capacityReservationPreference: EMRClientTypes.OnDemandCapacityReservationPreference?
        /// The ARN of the Capacity Reservation resource group in which to run the instance.
        public var capacityReservationResourceGroupArn: Swift.String?
        /// Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity. If you specify use-capacity-reservations-first, the fleet uses unused Capacity Reservations to fulfill On-Demand capacity up to the target On-Demand capacity. If multiple instance pools have unused Capacity Reservations, the On-Demand allocation strategy (lowest-price) is applied. If the number of unused Capacity Reservations is less than the On-Demand target capacity, the remaining On-Demand target capacity is launched according to the On-Demand allocation strategy (lowest-price). If you do not specify a value, the fleet fulfills the On-Demand capacity according to the chosen On-Demand allocation strategy.
        public var usageStrategy: EMRClientTypes.OnDemandCapacityReservationUsageStrategy?

        public init(
            capacityReservationPreference: EMRClientTypes.OnDemandCapacityReservationPreference? = nil,
            capacityReservationResourceGroupArn: Swift.String? = nil,
            usageStrategy: EMRClientTypes.OnDemandCapacityReservationUsageStrategy? = nil
        )
        {
            self.capacityReservationPreference = capacityReservationPreference
            self.capacityReservationResourceGroupArn = capacityReservationResourceGroupArn
            self.usageStrategy = usageStrategy
        }
    }

}

extension EMRClientTypes {
    /// The launch specification for On-Demand Instances in the instance fleet, which determines the allocation strategy. The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions. On-Demand Instances allocation strategy is available in Amazon EMR releases 5.12.1 and later.
    public struct OnDemandProvisioningSpecification {
        /// Specifies the strategy to use in launching On-Demand instance fleets. Available options are lowest-price and prioritized. lowest-price specifies to launch the instances with the lowest price first, and prioritized specifies that Amazon EMR should launch the instances with the highest priority first. The default is lowest-price.
        /// This member is required.
        public var allocationStrategy: EMRClientTypes.OnDemandProvisioningAllocationStrategy?
        /// The launch specification for On-Demand instances in the instance fleet, which determines the allocation strategy.
        public var capacityReservationOptions: EMRClientTypes.OnDemandCapacityReservationOptions?

        public init(
            allocationStrategy: EMRClientTypes.OnDemandProvisioningAllocationStrategy? = nil,
            capacityReservationOptions: EMRClientTypes.OnDemandCapacityReservationOptions? = nil
        )
        {
            self.allocationStrategy = allocationStrategy
            self.capacityReservationOptions = capacityReservationOptions
        }
    }

}

extension EMRClientTypes {

    public enum SpotProvisioningAllocationStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case capacityOptimized
        case capacityOptimizedPrioritized
        case diversified
        case lowestPrice
        case priceCapacityOptimized
        case sdkUnknown(Swift.String)

        public static var allCases: [SpotProvisioningAllocationStrategy] {
            return [
                .capacityOptimized,
                .capacityOptimizedPrioritized,
                .diversified,
                .lowestPrice,
                .priceCapacityOptimized
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .capacityOptimized: return "capacity-optimized"
            case .capacityOptimizedPrioritized: return "capacity-optimized-prioritized"
            case .diversified: return "diversified"
            case .lowestPrice: return "lowest-price"
            case .priceCapacityOptimized: return "price-capacity-optimized"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {

    public enum SpotProvisioningTimeoutAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case switchToOnDemand
        case terminateCluster
        case sdkUnknown(Swift.String)

        public static var allCases: [SpotProvisioningTimeoutAction] {
            return [
                .switchToOnDemand,
                .terminateCluster
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .switchToOnDemand: return "SWITCH_TO_ON_DEMAND"
            case .terminateCluster: return "TERMINATE_CLUSTER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// The launch specification for Spot Instances in the instance fleet, which determines the defined duration, provisioning timeout behavior, and allocation strategy. The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions. Spot Instance allocation strategy is available in Amazon EMR releases 5.12.1 and later. Spot Instances with a defined duration (also known as Spot blocks) are no longer available to new customers from July 1, 2021. For customers who have previously used the feature, we will continue to support Spot Instances with a defined duration until December 31, 2022.
    public struct SpotProvisioningSpecification {
        /// Specifies one of the following strategies to launch Spot Instance fleets: capacity-optimized, price-capacity-optimized, lowest-price, or diversified, and capacity-optimized-prioritized. For more information on the provisioning strategies, see [Allocation strategies for Spot Instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-allocation-strategy.html) in the Amazon EC2 User Guide for Linux Instances. When you launch a Spot Instance fleet with the old console, it automatically launches with the capacity-optimized strategy. You can't change the allocation strategy from the old console.
        public var allocationStrategy: EMRClientTypes.SpotProvisioningAllocationStrategy?
        /// The defined duration for Spot Instances (also known as Spot blocks) in minutes. When specified, the Spot Instance does not terminate before the defined duration expires, and defined duration pricing for Spot Instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot Instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot Instance for termination and provides a Spot Instance termination notice, which gives the instance a two-minute warning before it terminates. Spot Instances with a defined duration (also known as Spot blocks) are no longer available to new customers from July 1, 2021. For customers who have previously used the feature, we will continue to support Spot Instances with a defined duration until December 31, 2022.
        public var blockDurationMinutes: Swift.Int?
        /// The action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot Instances could not be provisioned within the Spot provisioning timeout. Valid values are TERMINATE_CLUSTER and SWITCH_TO_ON_DEMAND. SWITCH_TO_ON_DEMAND specifies that if no Spot Instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
        /// This member is required.
        public var timeoutAction: EMRClientTypes.SpotProvisioningTimeoutAction?
        /// The Spot provisioning timeout period in minutes. If Spot Instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
        /// This member is required.
        public var timeoutDurationMinutes: Swift.Int?

        public init(
            allocationStrategy: EMRClientTypes.SpotProvisioningAllocationStrategy? = nil,
            blockDurationMinutes: Swift.Int? = nil,
            timeoutAction: EMRClientTypes.SpotProvisioningTimeoutAction? = nil,
            timeoutDurationMinutes: Swift.Int? = nil
        )
        {
            self.allocationStrategy = allocationStrategy
            self.blockDurationMinutes = blockDurationMinutes
            self.timeoutAction = timeoutAction
            self.timeoutDurationMinutes = timeoutDurationMinutes
        }
    }

}

extension EMRClientTypes {
    /// The launch specification for On-Demand and Spot Instances in the fleet. The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions. On-Demand and Spot instance allocation strategies are available in Amazon EMR releases 5.12.1 and later.
    public struct InstanceFleetProvisioningSpecifications {
        /// The launch specification for On-Demand Instances in the instance fleet, which determines the allocation strategy and capacity reservation options. The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions. On-Demand Instances allocation strategy is available in Amazon EMR releases 5.12.1 and later.
        public var onDemandSpecification: EMRClientTypes.OnDemandProvisioningSpecification?
        /// The launch specification for Spot instances in the fleet, which determines the allocation strategy, defined duration, and provisioning timeout behavior.
        public var spotSpecification: EMRClientTypes.SpotProvisioningSpecification?

        public init(
            onDemandSpecification: EMRClientTypes.OnDemandProvisioningSpecification? = nil,
            spotSpecification: EMRClientTypes.SpotProvisioningSpecification? = nil
        )
        {
            self.onDemandSpecification = onDemandSpecification
            self.spotSpecification = spotSpecification
        }
    }

}

extension EMRClientTypes {
    /// The resize specification for On-Demand Instances in the instance fleet, which contains the resize timeout period.
    public struct OnDemandResizingSpecification {
        /// Specifies the allocation strategy to use to launch On-Demand instances during a resize. The default is lowest-price.
        public var allocationStrategy: EMRClientTypes.OnDemandProvisioningAllocationStrategy?
        /// Describes the strategy for using unused Capacity Reservations for fulfilling On-Demand capacity.
        public var capacityReservationOptions: EMRClientTypes.OnDemandCapacityReservationOptions?
        /// On-Demand resize timeout in minutes. If On-Demand Instances are not provisioned within this time, the resize workflow stops. The minimum value is 5 minutes, and the maximum value is 10,080 minutes (7 days). The timeout applies to all resize workflows on the Instance Fleet. The resize could be triggered by Amazon EMR Managed Scaling or by the customer (via Amazon EMR Console, Amazon EMR CLI modify-instance-fleet or Amazon EMR SDK ModifyInstanceFleet API) or by Amazon EMR due to Amazon EC2 Spot Reclamation.
        public var timeoutDurationMinutes: Swift.Int?

        public init(
            allocationStrategy: EMRClientTypes.OnDemandProvisioningAllocationStrategy? = nil,
            capacityReservationOptions: EMRClientTypes.OnDemandCapacityReservationOptions? = nil,
            timeoutDurationMinutes: Swift.Int? = nil
        )
        {
            self.allocationStrategy = allocationStrategy
            self.capacityReservationOptions = capacityReservationOptions
            self.timeoutDurationMinutes = timeoutDurationMinutes
        }
    }

}

extension EMRClientTypes {
    /// The resize specification for Spot Instances in the instance fleet, which contains the resize timeout period.
    public struct SpotResizingSpecification {
        /// Specifies the allocation strategy to use to launch Spot instances during a resize. If you run Amazon EMR releases 6.9.0 or higher, the default is price-capacity-optimized. If you run Amazon EMR releases 6.8.0 or lower, the default is capacity-optimized.
        public var allocationStrategy: EMRClientTypes.SpotProvisioningAllocationStrategy?
        /// Spot resize timeout in minutes. If Spot Instances are not provisioned within this time, the resize workflow will stop provisioning of Spot instances. Minimum value is 5 minutes and maximum value is 10,080 minutes (7 days). The timeout applies to all resize workflows on the Instance Fleet. The resize could be triggered by Amazon EMR Managed Scaling or by the customer (via Amazon EMR Console, Amazon EMR CLI modify-instance-fleet or Amazon EMR SDK ModifyInstanceFleet API) or by Amazon EMR due to Amazon EC2 Spot Reclamation.
        public var timeoutDurationMinutes: Swift.Int?

        public init(
            allocationStrategy: EMRClientTypes.SpotProvisioningAllocationStrategy? = nil,
            timeoutDurationMinutes: Swift.Int? = nil
        )
        {
            self.allocationStrategy = allocationStrategy
            self.timeoutDurationMinutes = timeoutDurationMinutes
        }
    }

}

extension EMRClientTypes {
    /// The resize specification for On-Demand and Spot Instances in the fleet.
    public struct InstanceFleetResizingSpecifications {
        /// The resize specification for On-Demand Instances in the instance fleet, which contains the allocation strategy, capacity reservation options, and the resize timeout period.
        public var onDemandResizeSpecification: EMRClientTypes.OnDemandResizingSpecification?
        /// The resize specification for Spot Instances in the instance fleet, which contains the allocation strategy and the resize timeout period.
        public var spotResizeSpecification: EMRClientTypes.SpotResizingSpecification?

        public init(
            onDemandResizeSpecification: EMRClientTypes.OnDemandResizingSpecification? = nil,
            spotResizeSpecification: EMRClientTypes.SpotResizingSpecification? = nil
        )
        {
            self.onDemandResizeSpecification = onDemandResizeSpecification
            self.spotResizeSpecification = spotResizeSpecification
        }
    }

}

public struct AddInstanceFleetOutput {
    /// The Amazon Resource Name of the cluster.
    public var clusterArn: Swift.String?
    /// The unique identifier of the cluster.
    public var clusterId: Swift.String?
    /// The unique identifier of the instance fleet.
    public var instanceFleetId: Swift.String?

    public init(
        clusterArn: Swift.String? = nil,
        clusterId: Swift.String? = nil,
        instanceFleetId: Swift.String? = nil
    )
    {
        self.clusterArn = clusterArn
        self.clusterId = clusterId
        self.instanceFleetId = instanceFleetId
    }
}

/// Indicates that an error occurred while processing the request and that the request was not completed.
public struct InternalServerError: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "InternalFailure" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

extension EMRClientTypes {
    /// The upper and lower Amazon EC2 instance limits for an automatic scaling policy. Automatic scaling activities triggered by automatic scaling rules will not cause an instance group to grow above or below these limits.
    public struct ScalingConstraints {
        /// The upper boundary of Amazon EC2 instances in an instance group beyond which scaling activities are not allowed to grow. Scale-out activities will not add instances beyond this boundary.
        /// This member is required.
        public var maxCapacity: Swift.Int?
        /// The lower boundary of Amazon EC2 instances in an instance group below which scaling activities are not allowed to shrink. Scale-in activities will not terminate instances below this boundary.
        /// This member is required.
        public var minCapacity: Swift.Int?

        public init(
            maxCapacity: Swift.Int? = nil,
            minCapacity: Swift.Int? = nil
        )
        {
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
        }
    }

}

extension EMRClientTypes {

    public enum MarketType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case onDemand
        case spot
        case sdkUnknown(Swift.String)

        public static var allCases: [MarketType] {
            return [
                .onDemand,
                .spot
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .onDemand: return "ON_DEMAND"
            case .spot: return "SPOT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {

    public enum AdjustmentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case changeInCapacity
        case exactCapacity
        case percentChangeInCapacity
        case sdkUnknown(Swift.String)

        public static var allCases: [AdjustmentType] {
            return [
                .changeInCapacity,
                .exactCapacity,
                .percentChangeInCapacity
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .changeInCapacity: return "CHANGE_IN_CAPACITY"
            case .exactCapacity: return "EXACT_CAPACITY"
            case .percentChangeInCapacity: return "PERCENT_CHANGE_IN_CAPACITY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// An automatic scaling configuration, which describes how the policy adds or removes instances, the cooldown period, and the number of Amazon EC2 instances that will be added each time the CloudWatch metric alarm condition is satisfied.
    public struct SimpleScalingPolicyConfiguration {
        /// The way in which Amazon EC2 instances are added (if ScalingAdjustment is a positive number) or terminated (if ScalingAdjustment is a negative number) each time the scaling activity is triggered. CHANGE_IN_CAPACITY is the default. CHANGE_IN_CAPACITY indicates that the Amazon EC2 instance count increments or decrements by ScalingAdjustment, which should be expressed as an integer. PERCENT_CHANGE_IN_CAPACITY indicates the instance count increments or decrements by the percentage specified by ScalingAdjustment, which should be expressed as an integer. For example, 20 indicates an increase in 20% increments of cluster capacity. EXACT_CAPACITY indicates the scaling activity results in an instance group with the number of Amazon EC2 instances specified by ScalingAdjustment, which should be expressed as a positive integer.
        public var adjustmentType: EMRClientTypes.AdjustmentType?
        /// The amount of time, in seconds, after a scaling activity completes before any further trigger-related scaling activities can start. The default value is 0.
        public var coolDown: Swift.Int?
        /// The amount by which to scale in or scale out, based on the specified AdjustmentType. A positive value adds to the instance group's Amazon EC2 instance count while a negative number removes instances. If AdjustmentType is set to EXACT_CAPACITY, the number should only be a positive integer. If AdjustmentType is set to PERCENT_CHANGE_IN_CAPACITY, the value should express the percentage as an integer. For example, -20 indicates a decrease in 20% increments of cluster capacity.
        /// This member is required.
        public var scalingAdjustment: Swift.Int?

        public init(
            adjustmentType: EMRClientTypes.AdjustmentType? = nil,
            coolDown: Swift.Int? = nil,
            scalingAdjustment: Swift.Int? = nil
        )
        {
            self.adjustmentType = adjustmentType
            self.coolDown = coolDown
            self.scalingAdjustment = scalingAdjustment
        }
    }

}

extension EMRClientTypes {
    /// The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment.
    public struct ScalingAction {
        /// Not available for instance groups. Instance groups use the market type specified for the group.
        public var market: EMRClientTypes.MarketType?
        /// The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment.
        /// This member is required.
        public var simpleScalingPolicyConfiguration: EMRClientTypes.SimpleScalingPolicyConfiguration?

        public init(
            market: EMRClientTypes.MarketType? = nil,
            simpleScalingPolicyConfiguration: EMRClientTypes.SimpleScalingPolicyConfiguration? = nil
        )
        {
            self.market = market
            self.simpleScalingPolicyConfiguration = simpleScalingPolicyConfiguration
        }
    }

}

extension EMRClientTypes {

    public enum ComparisonOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case greaterThan
        case greaterThanOrEqual
        case lessThan
        case lessThanOrEqual
        case sdkUnknown(Swift.String)

        public static var allCases: [ComparisonOperator] {
            return [
                .greaterThan,
                .greaterThanOrEqual,
                .lessThan,
                .lessThanOrEqual
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .greaterThan: return "GREATER_THAN"
            case .greaterThanOrEqual: return "GREATER_THAN_OR_EQUAL"
            case .lessThan: return "LESS_THAN"
            case .lessThanOrEqual: return "LESS_THAN_OR_EQUAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// A CloudWatch dimension, which is specified using a Key (known as a Name in CloudWatch), Value pair. By default, Amazon EMR uses one dimension whose Key is JobFlowID and Value is a variable representing the cluster ID, which is ${emr.clusterId}. This enables the rule to bootstrap when the cluster ID becomes available.
    public struct MetricDimension {
        /// The dimension name.
        public var key: Swift.String?
        /// The dimension value.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension EMRClientTypes {

    public enum Statistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case average
        case maximum
        case minimum
        case sampleCount
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [Statistic] {
            return [
                .average,
                .maximum,
                .minimum,
                .sampleCount,
                .sum
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .average: return "AVERAGE"
            case .maximum: return "MAXIMUM"
            case .minimum: return "MINIMUM"
            case .sampleCount: return "SAMPLE_COUNT"
            case .sum: return "SUM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {

    public enum Unit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bits
        case bitsPerSecond
        case bytes
        case bytesPerSecond
        case count
        case countPerSecond
        case gigaBits
        case gigaBitsPerSecond
        case gigaBytes
        case gigaBytesPerSecond
        case kiloBits
        case kiloBitsPerSecond
        case kiloBytes
        case kiloBytesPerSecond
        case megaBits
        case megaBitsPerSecond
        case megaBytes
        case megaBytesPerSecond
        case microSeconds
        case milliSeconds
        case `none`
        case percent
        case seconds
        case teraBits
        case teraBitsPerSecond
        case teraBytes
        case teraBytesPerSecond
        case sdkUnknown(Swift.String)

        public static var allCases: [Unit] {
            return [
                .bits,
                .bitsPerSecond,
                .bytes,
                .bytesPerSecond,
                .count,
                .countPerSecond,
                .gigaBits,
                .gigaBitsPerSecond,
                .gigaBytes,
                .gigaBytesPerSecond,
                .kiloBits,
                .kiloBitsPerSecond,
                .kiloBytes,
                .kiloBytesPerSecond,
                .megaBits,
                .megaBitsPerSecond,
                .megaBytes,
                .megaBytesPerSecond,
                .microSeconds,
                .milliSeconds,
                .none,
                .percent,
                .seconds,
                .teraBits,
                .teraBitsPerSecond,
                .teraBytes,
                .teraBytesPerSecond
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bits: return "BITS"
            case .bitsPerSecond: return "BITS_PER_SECOND"
            case .bytes: return "BYTES"
            case .bytesPerSecond: return "BYTES_PER_SECOND"
            case .count: return "COUNT"
            case .countPerSecond: return "COUNT_PER_SECOND"
            case .gigaBits: return "GIGA_BITS"
            case .gigaBitsPerSecond: return "GIGA_BITS_PER_SECOND"
            case .gigaBytes: return "GIGA_BYTES"
            case .gigaBytesPerSecond: return "GIGA_BYTES_PER_SECOND"
            case .kiloBits: return "KILO_BITS"
            case .kiloBitsPerSecond: return "KILO_BITS_PER_SECOND"
            case .kiloBytes: return "KILO_BYTES"
            case .kiloBytesPerSecond: return "KILO_BYTES_PER_SECOND"
            case .megaBits: return "MEGA_BITS"
            case .megaBitsPerSecond: return "MEGA_BITS_PER_SECOND"
            case .megaBytes: return "MEGA_BYTES"
            case .megaBytesPerSecond: return "MEGA_BYTES_PER_SECOND"
            case .microSeconds: return "MICRO_SECONDS"
            case .milliSeconds: return "MILLI_SECONDS"
            case .none: return "NONE"
            case .percent: return "PERCENT"
            case .seconds: return "SECONDS"
            case .teraBits: return "TERA_BITS"
            case .teraBitsPerSecond: return "TERA_BITS_PER_SECOND"
            case .teraBytes: return "TERA_BYTES"
            case .teraBytesPerSecond: return "TERA_BYTES_PER_SECOND"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// The definition of a CloudWatch metric alarm, which determines when an automatic scaling activity is triggered. When the defined alarm conditions are satisfied, scaling activity begins.
    public struct CloudWatchAlarmDefinition {
        /// Determines how the metric specified by MetricName is compared to the value specified by Threshold.
        /// This member is required.
        public var comparisonOperator: EMRClientTypes.ComparisonOperator?
        /// A CloudWatch metric dimension.
        public var dimensions: [EMRClientTypes.MetricDimension]?
        /// The number of periods, in five-minute increments, during which the alarm condition must exist before the alarm triggers automatic scaling activity. The default value is 1.
        public var evaluationPeriods: Swift.Int?
        /// The name of the CloudWatch metric that is watched to determine an alarm condition.
        /// This member is required.
        public var metricName: Swift.String?
        /// The namespace for the CloudWatch metric. The default is AWS/ElasticMapReduce.
        public var namespace: Swift.String?
        /// The period, in seconds, over which the statistic is applied. CloudWatch metrics for Amazon EMR are emitted every five minutes (300 seconds), so if you specify a CloudWatch metric, specify 300.
        /// This member is required.
        public var period: Swift.Int?
        /// The statistic to apply to the metric associated with the alarm. The default is AVERAGE.
        public var statistic: EMRClientTypes.Statistic?
        /// The value against which the specified statistic is compared.
        /// This member is required.
        public var threshold: Swift.Double?
        /// The unit of measure associated with the CloudWatch metric being watched. The value specified for Unit must correspond to the units specified in the CloudWatch metric.
        public var unit: EMRClientTypes.Unit?

        public init(
            comparisonOperator: EMRClientTypes.ComparisonOperator? = nil,
            dimensions: [EMRClientTypes.MetricDimension]? = nil,
            evaluationPeriods: Swift.Int? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil,
            period: Swift.Int? = nil,
            statistic: EMRClientTypes.Statistic? = nil,
            threshold: Swift.Double? = nil,
            unit: EMRClientTypes.Unit? = nil
        )
        {
            self.comparisonOperator = comparisonOperator
            self.dimensions = dimensions
            self.evaluationPeriods = evaluationPeriods
            self.metricName = metricName
            self.namespace = namespace
            self.period = period
            self.statistic = statistic
            self.threshold = threshold
            self.unit = unit
        }
    }

}

extension EMRClientTypes {
    /// The conditions that trigger an automatic scaling activity.
    public struct ScalingTrigger {
        /// The definition of a CloudWatch metric alarm. When the defined alarm conditions are met along with other trigger parameters, scaling activity begins.
        /// This member is required.
        public var cloudWatchAlarmDefinition: EMRClientTypes.CloudWatchAlarmDefinition?

        public init(
            cloudWatchAlarmDefinition: EMRClientTypes.CloudWatchAlarmDefinition? = nil
        )
        {
            self.cloudWatchAlarmDefinition = cloudWatchAlarmDefinition
        }
    }

}

extension EMRClientTypes {
    /// A scale-in or scale-out rule that defines scaling activity, including the CloudWatch metric alarm that triggers activity, how Amazon EC2 instances are added or removed, and the periodicity of adjustments. The automatic scaling policy for an instance group can comprise one or more automatic scaling rules.
    public struct ScalingRule {
        /// The conditions that trigger an automatic scaling activity.
        /// This member is required.
        public var action: EMRClientTypes.ScalingAction?
        /// A friendly, more verbose description of the automatic scaling rule.
        public var description: Swift.String?
        /// The name used to identify an automatic scaling rule. Rule names must be unique within a scaling policy.
        /// This member is required.
        public var name: Swift.String?
        /// The CloudWatch alarm definition that determines when automatic scaling activity is triggered.
        /// This member is required.
        public var trigger: EMRClientTypes.ScalingTrigger?

        public init(
            action: EMRClientTypes.ScalingAction? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            trigger: EMRClientTypes.ScalingTrigger? = nil
        )
        {
            self.action = action
            self.description = description
            self.name = name
            self.trigger = trigger
        }
    }

}

extension EMRClientTypes {
    /// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. An automatic scaling policy defines how an instance group dynamically adds and terminates Amazon EC2 instances in response to the value of a CloudWatch metric. See [PutAutoScalingPolicy].
    public struct AutoScalingPolicy {
        /// The upper and lower Amazon EC2 instance limits for an automatic scaling policy. Automatic scaling activity will not cause an instance group to grow above or below these limits.
        /// This member is required.
        public var constraints: EMRClientTypes.ScalingConstraints?
        /// The scale-in and scale-out rules that comprise the automatic scaling policy.
        /// This member is required.
        public var rules: [EMRClientTypes.ScalingRule]?

        public init(
            constraints: EMRClientTypes.ScalingConstraints? = nil,
            rules: [EMRClientTypes.ScalingRule]? = nil
        )
        {
            self.constraints = constraints
            self.rules = rules
        }
    }

}

extension EMRClientTypes {

    public enum InstanceRoleType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case core
        case master
        case task
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceRoleType] {
            return [
                .core,
                .master,
                .task
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .core: return "CORE"
            case .master: return "MASTER"
            case .task: return "TASK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Output from an AddInstanceGroups call.
public struct AddInstanceGroupsOutput {
    /// The Amazon Resource Name of the cluster.
    public var clusterArn: Swift.String?
    /// Instance group IDs of the newly created instance groups.
    public var instanceGroupIds: [Swift.String]?
    /// The job flow ID in which the instance groups are added.
    public var jobFlowId: Swift.String?

    public init(
        clusterArn: Swift.String? = nil,
        instanceGroupIds: [Swift.String]? = nil,
        jobFlowId: Swift.String? = nil
    )
    {
        self.clusterArn = clusterArn
        self.instanceGroupIds = instanceGroupIds
        self.jobFlowId = jobFlowId
    }
}

extension EMRClientTypes {
    /// A key-value pair.
    public struct KeyValue {
        /// The unique identifier of a key-value pair.
        public var key: Swift.String?
        /// The value part of the identified key.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension EMRClientTypes {
    /// A job flow step consisting of a JAR file whose main function will be executed. The main function submits a job for Hadoop to execute and waits for the job to finish or fail.
    public struct HadoopJarStepConfig {
        /// A list of command line arguments passed to the JAR file's main function when executed.
        public var args: [Swift.String]?
        /// A path to a JAR file run during the step.
        /// This member is required.
        public var jar: Swift.String?
        /// The name of the main class in the specified Java file. If not specified, the JAR file should specify a Main-Class in its manifest file.
        public var mainClass: Swift.String?
        /// A list of Java properties that are set when the step runs. You can use these properties to pass key-value pairs to your main function.
        public var properties: [EMRClientTypes.KeyValue]?

        public init(
            args: [Swift.String]? = nil,
            jar: Swift.String? = nil,
            mainClass: Swift.String? = nil,
            properties: [EMRClientTypes.KeyValue]? = nil
        )
        {
            self.args = args
            self.jar = jar
            self.mainClass = mainClass
            self.properties = properties
        }
    }

}

extension EMRClientTypes {
    /// Specification for a cluster (job flow) step.
    public struct StepConfig {
        /// The action to take when the step fails. Use one of the following values:
        ///
        /// * TERMINATE_CLUSTER - Shuts down the cluster.
        ///
        /// * CANCEL_AND_WAIT - Cancels any pending steps and returns the cluster to the WAITING state.
        ///
        /// * CONTINUE - Continues to the next step in the queue.
        ///
        /// * TERMINATE_JOB_FLOW - Shuts down the cluster. TERMINATE_JOB_FLOW is provided for backward compatibility. We recommend using TERMINATE_CLUSTER instead.
        ///
        ///
        /// If a cluster's StepConcurrencyLevel is greater than 1, do not use AddJobFlowSteps to submit a step with this parameter set to CANCEL_AND_WAIT or TERMINATE_CLUSTER. The step is not submitted and the action fails with a message that the ActionOnFailure setting is not valid. If you change a cluster's StepConcurrencyLevel to be greater than 1 while a step is running, the ActionOnFailure parameter may not behave as you expect. In this case, for a step that fails with this parameter set to CANCEL_AND_WAIT, pending steps and the running step are not canceled; for a step that fails with this parameter set to TERMINATE_CLUSTER, the cluster does not terminate.
        public var actionOnFailure: EMRClientTypes.ActionOnFailure?
        /// The JAR file used for the step.
        /// This member is required.
        public var hadoopJarStep: EMRClientTypes.HadoopJarStepConfig?
        /// The name of the step.
        /// This member is required.
        public var name: Swift.String?

        public init(
            actionOnFailure: EMRClientTypes.ActionOnFailure? = nil,
            hadoopJarStep: EMRClientTypes.HadoopJarStepConfig? = nil,
            name: Swift.String? = nil
        )
        {
            self.actionOnFailure = actionOnFailure
            self.hadoopJarStep = hadoopJarStep
            self.name = name
        }
    }

}

/// The input argument to the [AddJobFlowSteps] operation.
public struct AddJobFlowStepsInput {
    /// The Amazon Resource Name (ARN) of the runtime role for a step on the cluster. The runtime role can be a cross-account IAM role. The runtime role ARN is a combination of account ID, role name, and role type using the following format: arn:partition:service:region:account:resource. For example, arn:aws:IAM::1234567890:role/ReadOnly is a correctly formatted runtime role ARN.
    public var executionRoleArn: Swift.String?
    /// A string that uniquely identifies the job flow. This identifier is returned by [RunJobFlow] and can also be obtained from [ListClusters].
    /// This member is required.
    public var jobFlowId: Swift.String?
    /// A list of [StepConfig] to be executed by the job flow.
    /// This member is required.
    public var steps: [EMRClientTypes.StepConfig]?

    public init(
        executionRoleArn: Swift.String? = nil,
        jobFlowId: Swift.String? = nil,
        steps: [EMRClientTypes.StepConfig]? = nil
    )
    {
        self.executionRoleArn = executionRoleArn
        self.jobFlowId = jobFlowId
        self.steps = steps
    }
}

/// The output for the [AddJobFlowSteps] operation.
public struct AddJobFlowStepsOutput {
    /// The identifiers of the list of steps added to the job flow.
    public var stepIds: [Swift.String]?

    public init(
        stepIds: [Swift.String]? = nil
    )
    {
        self.stepIds = stepIds
    }
}

extension EMRClientTypes {
    /// A key-value pair containing user-defined metadata that you can associate with an Amazon EMR resource. Tags make it easier to associate clusters in various ways, such as grouping clusters to track your Amazon EMR resource allocation costs. For more information, see [Tag Clusters](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-tags.html).
    public struct Tag {
        /// A user-defined key, which is the minimum required information for a valid tag. For more information, see [Tag](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-tags.html).
        public var key: Swift.String?
        /// A user-defined value, which is optional in a tag. For more information, see [Tag Clusters](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-tags.html).
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

/// This input identifies an Amazon EMR resource and a list of tags to attach.
public struct AddTagsInput {
    /// The Amazon EMR resource identifier to which tags will be added. For example, a cluster identifier or an Amazon EMR Studio ID.
    /// This member is required.
    public var resourceId: Swift.String?
    /// A list of tags to associate with a resource. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.
    /// This member is required.
    public var tags: [EMRClientTypes.Tag]?

    public init(
        resourceId: Swift.String? = nil,
        tags: [EMRClientTypes.Tag]? = nil
    )
    {
        self.resourceId = resourceId
        self.tags = tags
    }
}

/// This output indicates the result of adding tags to a resource.
public struct AddTagsOutput {

    public init() { }
}

extension EMRClientTypes {
    /// With Amazon EMR release version 4.0 and later, the only accepted parameter is the application name. To pass arguments to applications, you use configuration classifications specified using configuration JSON objects. For more information, see [Configuring Applications](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-configure-apps.html). With earlier Amazon EMR releases, the application is any Amazon or third-party software that you can add to the cluster. This structure contains a list of strings that indicates the software to use with the cluster and accepts a user argument list. Amazon EMR accepts and forwards the argument list to the corresponding installation script as bootstrap action argument.
    public struct Application {
        /// This option is for advanced users only. This is meta information about third-party applications that third-party vendors use for testing purposes.
        public var additionalInfo: [Swift.String: Swift.String]?
        /// Arguments for Amazon EMR to pass to the application.
        public var args: [Swift.String]?
        /// The name of the application.
        public var name: Swift.String?
        /// The version of the application.
        public var version: Swift.String?

        public init(
            additionalInfo: [Swift.String: Swift.String]? = nil,
            args: [Swift.String]? = nil,
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.additionalInfo = additionalInfo
            self.args = args
            self.name = name
            self.version = version
        }
    }

}

extension EMRClientTypes {

    public enum AuthMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case iam
        case sso
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthMode] {
            return [
                .iam,
                .sso
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .iam: return "IAM"
            case .sso: return "SSO"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {

    public enum AutoScalingPolicyState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case attached
        case attaching
        case detached
        case detaching
        case failed
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoScalingPolicyState] {
            return [
                .attached,
                .attaching,
                .detached,
                .detaching,
                .failed,
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .attached: return "ATTACHED"
            case .attaching: return "ATTACHING"
            case .detached: return "DETACHED"
            case .detaching: return "DETACHING"
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {

    public enum AutoScalingPolicyStateChangeReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cleanupFailure
        case provisionFailure
        case userRequest
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoScalingPolicyStateChangeReasonCode] {
            return [
                .cleanupFailure,
                .provisionFailure,
                .userRequest
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cleanupFailure: return "CLEANUP_FAILURE"
            case .provisionFailure: return "PROVISION_FAILURE"
            case .userRequest: return "USER_REQUEST"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// The reason for an [AutoScalingPolicyStatus] change.
    public struct AutoScalingPolicyStateChangeReason {
        /// The code indicating the reason for the change in status.USER_REQUEST indicates that the scaling policy status was changed by a user. PROVISION_FAILURE indicates that the status change was because the policy failed to provision. CLEANUP_FAILURE indicates an error.
        public var code: EMRClientTypes.AutoScalingPolicyStateChangeReasonCode?
        /// A friendly, more verbose message that accompanies an automatic scaling policy state change.
        public var message: Swift.String?

        public init(
            code: EMRClientTypes.AutoScalingPolicyStateChangeReasonCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension EMRClientTypes {
    /// The status of an automatic scaling policy.
    public struct AutoScalingPolicyStatus {
        /// Indicates the status of the automatic scaling policy.
        public var state: EMRClientTypes.AutoScalingPolicyState?
        /// The reason for a change in status.
        public var stateChangeReason: EMRClientTypes.AutoScalingPolicyStateChangeReason?

        public init(
            state: EMRClientTypes.AutoScalingPolicyState? = nil,
            stateChangeReason: EMRClientTypes.AutoScalingPolicyStateChangeReason? = nil
        )
        {
            self.state = state
            self.stateChangeReason = stateChangeReason
        }
    }

}

extension EMRClientTypes {
    /// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates Amazon EC2 instances in response to the value of a CloudWatch metric. See [PutAutoScalingPolicy].
    public struct AutoScalingPolicyDescription {
        /// The upper and lower Amazon EC2 instance limits for an automatic scaling policy. Automatic scaling activity will not cause an instance group to grow above or below these limits.
        public var constraints: EMRClientTypes.ScalingConstraints?
        /// The scale-in and scale-out rules that comprise the automatic scaling policy.
        public var rules: [EMRClientTypes.ScalingRule]?
        /// The status of an automatic scaling policy.
        public var status: EMRClientTypes.AutoScalingPolicyStatus?

        public init(
            constraints: EMRClientTypes.ScalingConstraints? = nil,
            rules: [EMRClientTypes.ScalingRule]? = nil,
            status: EMRClientTypes.AutoScalingPolicyStatus? = nil
        )
        {
            self.constraints = constraints
            self.rules = rules
            self.status = status
        }
    }

}

extension EMRClientTypes {
    /// An auto-termination policy for an Amazon EMR cluster. An auto-termination policy defines the amount of idle time in seconds after which a cluster automatically terminates. For alternative cluster termination options, see [Control cluster termination](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-termination.html).
    public struct AutoTerminationPolicy {
        /// Specifies the amount of idle time in seconds after which the cluster automatically terminates. You can specify a minimum of 60 seconds and a maximum of 604800 seconds (seven days).
        public var idleTimeout: Swift.Int?

        public init(
            idleTimeout: Swift.Int? = nil
        )
        {
            self.idleTimeout = idleTimeout
        }
    }

}

extension EMRClientTypes {
    /// A list of port ranges that are permitted to allow inbound traffic from all public IP addresses. To specify a single port, use the same value for MinRange and MaxRange.
    public struct PortRange {
        /// The smallest port number in a specified range of port numbers.
        public var maxRange: Swift.Int?
        /// The smallest port number in a specified range of port numbers.
        /// This member is required.
        public var minRange: Swift.Int?

        public init(
            maxRange: Swift.Int? = nil,
            minRange: Swift.Int? = nil
        )
        {
            self.maxRange = maxRange
            self.minRange = minRange
        }
    }

}

extension EMRClientTypes {
    /// Properties that describe the Amazon Web Services principal that created the BlockPublicAccessConfiguration using the PutBlockPublicAccessConfiguration action as well as the date and time that the configuration was created. Each time a configuration for block public access is updated, Amazon EMR updates this metadata.
    public struct BlockPublicAccessConfigurationMetadata {
        /// The Amazon Resource Name that created or last modified the configuration.
        /// This member is required.
        public var createdByArn: Swift.String?
        /// The date and time that the configuration was created.
        /// This member is required.
        public var creationDateTime: Foundation.Date?

        public init(
            createdByArn: Swift.String? = nil,
            creationDateTime: Foundation.Date? = nil
        )
        {
            self.createdByArn = createdByArn
            self.creationDateTime = creationDateTime
        }
    }

}

extension EMRClientTypes {
    /// Configuration of the script to run during a bootstrap action.
    public struct ScriptBootstrapActionConfig {
        /// A list of command line arguments to pass to the bootstrap action script.
        public var args: [Swift.String]?
        /// Location in Amazon S3 of the script to run during a bootstrap action.
        /// This member is required.
        public var path: Swift.String?

        public init(
            args: [Swift.String]? = nil,
            path: Swift.String? = nil
        )
        {
            self.args = args
            self.path = path
        }
    }

}

extension EMRClientTypes {
    /// Configuration of a bootstrap action.
    public struct BootstrapActionConfig {
        /// The name of the bootstrap action.
        /// This member is required.
        public var name: Swift.String?
        /// The script run by the bootstrap action.
        /// This member is required.
        public var scriptBootstrapAction: EMRClientTypes.ScriptBootstrapActionConfig?

        public init(
            name: Swift.String? = nil,
            scriptBootstrapAction: EMRClientTypes.ScriptBootstrapActionConfig? = nil
        )
        {
            self.name = name
            self.scriptBootstrapAction = scriptBootstrapAction
        }
    }

}

extension EMRClientTypes {
    /// Reports the configuration of a bootstrap action in a cluster (job flow).
    public struct BootstrapActionDetail {
        /// A description of the bootstrap action.
        public var bootstrapActionConfig: EMRClientTypes.BootstrapActionConfig?

        public init(
            bootstrapActionConfig: EMRClientTypes.BootstrapActionConfig? = nil
        )
        {
            self.bootstrapActionConfig = bootstrapActionConfig
        }
    }

}

extension EMRClientTypes {

    public enum StepCancellationOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case sendInterrupt
        case terminateProcess
        case sdkUnknown(Swift.String)

        public static var allCases: [StepCancellationOption] {
            return [
                .sendInterrupt,
                .terminateProcess
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .sendInterrupt: return "SEND_INTERRUPT"
            case .terminateProcess: return "TERMINATE_PROCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The input argument to the [CancelSteps] operation.
public struct CancelStepsInput {
    /// The ClusterID for the specified steps that will be canceled. Use [RunJobFlow] and [ListClusters] to get ClusterIDs.
    /// This member is required.
    public var clusterId: Swift.String?
    /// The option to choose to cancel RUNNING steps. By default, the value is SEND_INTERRUPT.
    public var stepCancellationOption: EMRClientTypes.StepCancellationOption?
    /// The list of StepIDs to cancel. Use [ListSteps] to get steps and their states for the specified cluster.
    /// This member is required.
    public var stepIds: [Swift.String]?

    public init(
        clusterId: Swift.String? = nil,
        stepCancellationOption: EMRClientTypes.StepCancellationOption? = nil,
        stepIds: [Swift.String]? = nil
    )
    {
        self.clusterId = clusterId
        self.stepCancellationOption = stepCancellationOption
        self.stepIds = stepIds
    }
}

extension EMRClientTypes {

    public enum CancelStepsRequestStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case submitted
        case sdkUnknown(Swift.String)

        public static var allCases: [CancelStepsRequestStatus] {
            return [
                .failed,
                .submitted
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .submitted: return "SUBMITTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// Specification of the status of a CancelSteps request. Available only in Amazon EMR version 4.8.0 and later, excluding version 5.0.0.
    public struct CancelStepsInfo {
        /// The reason for the failure if the CancelSteps request fails.
        public var reason: Swift.String?
        /// The status of a CancelSteps Request. The value may be SUBMITTED or FAILED.
        public var status: EMRClientTypes.CancelStepsRequestStatus?
        /// The encrypted StepId of a step.
        public var stepId: Swift.String?

        public init(
            reason: Swift.String? = nil,
            status: EMRClientTypes.CancelStepsRequestStatus? = nil,
            stepId: Swift.String? = nil
        )
        {
            self.reason = reason
            self.status = status
            self.stepId = stepId
        }
    }

}

/// The output for the [CancelSteps] operation.
public struct CancelStepsOutput {
    /// A list of [CancelStepsInfo], which shows the status of specified cancel requests for each StepID specified.
    public var cancelStepsInfoList: [EMRClientTypes.CancelStepsInfo]?

    public init(
        cancelStepsInfoList: [EMRClientTypes.CancelStepsInfo]? = nil
    )
    {
        self.cancelStepsInfoList = cancelStepsInfoList
    }
}

extension EMRClientTypes {
    /// Provides information about the Amazon EC2 instances in a cluster grouped by category. For example, key name, subnet ID, IAM instance profile, and so on.
    public struct Ec2InstanceAttributes {
        /// A list of additional Amazon EC2 security group IDs for the master node.
        public var additionalMasterSecurityGroups: [Swift.String]?
        /// A list of additional Amazon EC2 security group IDs for the core and task nodes.
        public var additionalSlaveSecurityGroups: [Swift.String]?
        /// The Availability Zone in which the cluster will run.
        public var ec2AvailabilityZone: Swift.String?
        /// The name of the Amazon EC2 key pair to use when connecting with SSH into the master node as a user named "hadoop".
        public var ec2KeyName: Swift.String?
        /// Set this parameter to the identifier of the Amazon VPC subnet where you want the cluster to launch. If you do not specify this value, and your account supports EC2-Classic, the cluster launches in EC2-Classic.
        public var ec2SubnetId: Swift.String?
        /// The identifier of the Amazon EC2 security group for the master node.
        public var emrManagedMasterSecurityGroup: Swift.String?
        /// The identifier of the Amazon EC2 security group for the core and task nodes.
        public var emrManagedSlaveSecurityGroup: Swift.String?
        /// The IAM role that was specified when the cluster was launched. The Amazon EC2 instances of the cluster assume this role.
        public var iamInstanceProfile: Swift.String?
        /// Applies to clusters configured with the instance fleets option. Specifies one or more Availability Zones in which to launch Amazon EC2 cluster instances when the EC2-Classic network configuration is supported. Amazon EMR chooses the Availability Zone with the best fit from among the list of RequestedEc2AvailabilityZones, and then launches all cluster instances within that Availability Zone. If you do not specify this value, Amazon EMR chooses the Availability Zone for you. RequestedEc2SubnetIDs and RequestedEc2AvailabilityZones cannot be specified together.
        public var requestedEc2AvailabilityZones: [Swift.String]?
        /// Applies to clusters configured with the instance fleets option. Specifies the unique identifier of one or more Amazon EC2 subnets in which to launch Amazon EC2 cluster instances. Subnets must exist within the same VPC. Amazon EMR chooses the Amazon EC2 subnet with the best fit from among the list of RequestedEc2SubnetIds, and then launches all cluster instances within that Subnet. If this value is not specified, and the account and Region support EC2-Classic networks, the cluster launches instances in the EC2-Classic network and uses RequestedEc2AvailabilityZones instead of this setting. If EC2-Classic is not supported, and no Subnet is specified, Amazon EMR chooses the subnet for you. RequestedEc2SubnetIDs and RequestedEc2AvailabilityZones cannot be specified together.
        public var requestedEc2SubnetIds: [Swift.String]?
        /// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
        public var serviceAccessSecurityGroup: Swift.String?

        public init(
            additionalMasterSecurityGroups: [Swift.String]? = nil,
            additionalSlaveSecurityGroups: [Swift.String]? = nil,
            ec2AvailabilityZone: Swift.String? = nil,
            ec2KeyName: Swift.String? = nil,
            ec2SubnetId: Swift.String? = nil,
            emrManagedMasterSecurityGroup: Swift.String? = nil,
            emrManagedSlaveSecurityGroup: Swift.String? = nil,
            iamInstanceProfile: Swift.String? = nil,
            requestedEc2AvailabilityZones: [Swift.String]? = nil,
            requestedEc2SubnetIds: [Swift.String]? = nil,
            serviceAccessSecurityGroup: Swift.String? = nil
        )
        {
            self.additionalMasterSecurityGroups = additionalMasterSecurityGroups
            self.additionalSlaveSecurityGroups = additionalSlaveSecurityGroups
            self.ec2AvailabilityZone = ec2AvailabilityZone
            self.ec2KeyName = ec2KeyName
            self.ec2SubnetId = ec2SubnetId
            self.emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroup
            self.emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroup
            self.iamInstanceProfile = iamInstanceProfile
            self.requestedEc2AvailabilityZones = requestedEc2AvailabilityZones
            self.requestedEc2SubnetIds = requestedEc2SubnetIds
            self.serviceAccessSecurityGroup = serviceAccessSecurityGroup
        }
    }

}

extension EMRClientTypes {

    public enum InstanceCollectionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case instanceFleet
        case instanceGroup
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceCollectionType] {
            return [
                .instanceFleet,
                .instanceGroup
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .instanceFleet: return "INSTANCE_FLEET"
            case .instanceGroup: return "INSTANCE_GROUP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// Attributes for Kerberos configuration when Kerberos authentication is enabled using a security configuration. For more information see [Use Kerberos Authentication](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-kerberos.html) in the Amazon EMR Management Guide.
    public struct KerberosAttributes {
        /// The Active Directory password for ADDomainJoinUser.
        public var adDomainJoinPassword: Swift.String?
        /// Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain.
        public var adDomainJoinUser: Swift.String?
        /// Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password, which must be identical across realms.
        public var crossRealmTrustPrincipalPassword: Swift.String?
        /// The password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster.
        /// This member is required.
        public var kdcAdminPassword: Swift.String?
        /// The name of the Kerberos realm to which all nodes in a cluster belong. For example, EC2.INTERNAL.
        /// This member is required.
        public var realm: Swift.String?

        public init(
            adDomainJoinPassword: Swift.String? = nil,
            adDomainJoinUser: Swift.String? = nil,
            crossRealmTrustPrincipalPassword: Swift.String? = nil,
            kdcAdminPassword: Swift.String? = nil,
            realm: Swift.String? = nil
        )
        {
            self.adDomainJoinPassword = adDomainJoinPassword
            self.adDomainJoinUser = adDomainJoinUser
            self.crossRealmTrustPrincipalPassword = crossRealmTrustPrincipalPassword
            self.kdcAdminPassword = kdcAdminPassword
            self.realm = realm
        }
    }

}

extension EMRClientTypes {

    public enum PlacementGroupStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cluster
        case `none`
        case partition
        case spread
        case sdkUnknown(Swift.String)

        public static var allCases: [PlacementGroupStrategy] {
            return [
                .cluster,
                .none,
                .partition,
                .spread
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cluster: return "CLUSTER"
            case .none: return "NONE"
            case .partition: return "PARTITION"
            case .spread: return "SPREAD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// Placement group configuration for an Amazon EMR cluster. The configuration specifies the placement strategy that can be applied to instance roles during cluster creation. To use this configuration, consider attaching managed policy AmazonElasticMapReducePlacementGroupPolicy to the Amazon EMR role.
    public struct PlacementGroupConfig {
        /// Role of the instance in the cluster. Starting with Amazon EMR release 5.23.0, the only supported instance role is MASTER.
        /// This member is required.
        public var instanceRole: EMRClientTypes.InstanceRoleType?
        /// Amazon EC2 Placement Group strategy associated with instance role. Starting with Amazon EMR release 5.23.0, the only supported placement strategy is SPREAD for the MASTER instance role.
        public var placementStrategy: EMRClientTypes.PlacementGroupStrategy?

        public init(
            instanceRole: EMRClientTypes.InstanceRoleType? = nil,
            placementStrategy: EMRClientTypes.PlacementGroupStrategy? = nil
        )
        {
            self.instanceRole = instanceRole
            self.placementStrategy = placementStrategy
        }
    }

}

extension EMRClientTypes {

    public enum RepoUpgradeOnBoot: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case security
        case sdkUnknown(Swift.String)

        public static var allCases: [RepoUpgradeOnBoot] {
            return [
                .none,
                .security
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .security: return "SECURITY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {

    public enum ScaleDownBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case terminateAtInstanceHour
        case terminateAtTaskCompletion
        case sdkUnknown(Swift.String)

        public static var allCases: [ScaleDownBehavior] {
            return [
                .terminateAtInstanceHour,
                .terminateAtTaskCompletion
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .terminateAtInstanceHour: return "TERMINATE_AT_INSTANCE_HOUR"
            case .terminateAtTaskCompletion: return "TERMINATE_AT_TASK_COMPLETION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// A tuple that provides information about an error that caused a cluster to terminate.
    public struct ErrorDetail {
        /// The name or code associated with the error.
        public var errorCode: Swift.String?
        /// A list of key value pairs that provides contextual information about why an error occured.
        public var errorData: [[Swift.String: Swift.String]]?
        /// A message that describes the error.
        public var errorMessage: Swift.String?

        public init(
            errorCode: Swift.String? = nil,
            errorData: [[Swift.String: Swift.String]]? = nil,
            errorMessage: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorData = errorData
            self.errorMessage = errorMessage
        }
    }

}

extension EMRClientTypes {

    public enum ClusterState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bootstrapping
        case running
        case starting
        case terminated
        case terminatedWithErrors
        case terminating
        case waiting
        case sdkUnknown(Swift.String)

        public static var allCases: [ClusterState] {
            return [
                .bootstrapping,
                .running,
                .starting,
                .terminated,
                .terminatedWithErrors,
                .terminating,
                .waiting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bootstrapping: return "BOOTSTRAPPING"
            case .running: return "RUNNING"
            case .starting: return "STARTING"
            case .terminated: return "TERMINATED"
            case .terminatedWithErrors: return "TERMINATED_WITH_ERRORS"
            case .terminating: return "TERMINATING"
            case .waiting: return "WAITING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {

    public enum ClusterStateChangeReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allStepsCompleted
        case bootstrapFailure
        case instanceFailure
        case instanceFleetTimeout
        case internalError
        case stepFailure
        case userRequest
        case validationError
        case sdkUnknown(Swift.String)

        public static var allCases: [ClusterStateChangeReasonCode] {
            return [
                .allStepsCompleted,
                .bootstrapFailure,
                .instanceFailure,
                .instanceFleetTimeout,
                .internalError,
                .stepFailure,
                .userRequest,
                .validationError
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allStepsCompleted: return "ALL_STEPS_COMPLETED"
            case .bootstrapFailure: return "BOOTSTRAP_FAILURE"
            case .instanceFailure: return "INSTANCE_FAILURE"
            case .instanceFleetTimeout: return "INSTANCE_FLEET_TIMEOUT"
            case .internalError: return "INTERNAL_ERROR"
            case .stepFailure: return "STEP_FAILURE"
            case .userRequest: return "USER_REQUEST"
            case .validationError: return "VALIDATION_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// The reason that the cluster changed to its current state.
    public struct ClusterStateChangeReason {
        /// The programmatic code for the state change reason.
        public var code: EMRClientTypes.ClusterStateChangeReasonCode?
        /// The descriptive message for the state change reason.
        public var message: Swift.String?

        public init(
            code: EMRClientTypes.ClusterStateChangeReasonCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension EMRClientTypes {
    /// Represents the timeline of the cluster's lifecycle.
    public struct ClusterTimeline {
        /// The creation date and time of the cluster.
        public var creationDateTime: Foundation.Date?
        /// The date and time when the cluster was terminated.
        public var endDateTime: Foundation.Date?
        /// The date and time when the cluster was ready to run steps.
        public var readyDateTime: Foundation.Date?

        public init(
            creationDateTime: Foundation.Date? = nil,
            endDateTime: Foundation.Date? = nil,
            readyDateTime: Foundation.Date? = nil
        )
        {
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.readyDateTime = readyDateTime
        }
    }

}

extension EMRClientTypes {
    /// The detailed status of the cluster.
    public struct ClusterStatus {
        /// A list of tuples that provides information about the errors that caused a cluster to terminate. This structure can contain up to 10 different ErrorDetail tuples.
        public var errorDetails: [EMRClientTypes.ErrorDetail]?
        /// The current state of the cluster.
        public var state: EMRClientTypes.ClusterState?
        /// The reason for the cluster status change.
        public var stateChangeReason: EMRClientTypes.ClusterStateChangeReason?
        /// A timeline that represents the status of a cluster over the lifetime of the cluster.
        public var timeline: EMRClientTypes.ClusterTimeline?

        public init(
            errorDetails: [EMRClientTypes.ErrorDetail]? = nil,
            state: EMRClientTypes.ClusterState? = nil,
            stateChangeReason: EMRClientTypes.ClusterStateChangeReason? = nil,
            timeline: EMRClientTypes.ClusterTimeline? = nil
        )
        {
            self.errorDetails = errorDetails
            self.state = state
            self.stateChangeReason = stateChangeReason
            self.timeline = timeline
        }
    }

}

extension EMRClientTypes {
    /// The summary description of the cluster.
    public struct ClusterSummary {
        /// The Amazon Resource Name of the cluster.
        public var clusterArn: Swift.String?
        /// The unique identifier for the cluster.
        public var id: Swift.String?
        /// The name of the cluster.
        public var name: Swift.String?
        /// An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time for every hour an m1.small instance runs. Larger instances are weighted more, so an Amazon EC2 instance that is roughly four times more expensive would result in the normalized instance hours being incremented by four. This result is only an approximation and does not reflect the actual billing rate.
        public var normalizedInstanceHours: Swift.Int?
        /// The Amazon Resource Name (ARN) of the Outpost where the cluster is launched.
        public var outpostArn: Swift.String?
        /// The details about the current status of the cluster.
        public var status: EMRClientTypes.ClusterStatus?

        public init(
            clusterArn: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            normalizedInstanceHours: Swift.Int? = nil,
            outpostArn: Swift.String? = nil,
            status: EMRClientTypes.ClusterStatus? = nil
        )
        {
            self.clusterArn = clusterArn
            self.id = id
            self.name = name
            self.normalizedInstanceHours = normalizedInstanceHours
            self.outpostArn = outpostArn
            self.status = status
        }
    }

}

extension EMRClientTypes {
    /// An entity describing an executable that runs on a cluster.
    public struct Command {
        /// Arguments for Amazon EMR to pass to the command for execution.
        public var args: [Swift.String]?
        /// The name of the command.
        public var name: Swift.String?
        /// The Amazon S3 location of the command script.
        public var scriptPath: Swift.String?

        public init(
            args: [Swift.String]? = nil,
            name: Swift.String? = nil,
            scriptPath: Swift.String? = nil
        )
        {
            self.args = args
            self.name = name
            self.scriptPath = scriptPath
        }
    }

}

extension EMRClientTypes {

    public enum ComputeLimitsUnitType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case instancefleetunits
        case instances
        case vcpu
        case sdkUnknown(Swift.String)

        public static var allCases: [ComputeLimitsUnitType] {
            return [
                .instancefleetunits,
                .instances,
                .vcpu
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .instancefleetunits: return "InstanceFleetUnits"
            case .instances: return "Instances"
            case .vcpu: return "VCPU"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// The Amazon EC2 unit limits for a managed scaling policy. The managed scaling activity of a cluster can not be above or below these limits. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
    public struct ComputeLimits {
        /// The upper boundary of Amazon EC2 units. It is measured through vCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
        /// This member is required.
        public var maximumCapacityUnits: Swift.Int?
        /// The upper boundary of Amazon EC2 units for core node type in a cluster. It is measured through vCPU cores or instances for instance groups and measured through units for instance fleets. The core units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between core and task nodes.
        public var maximumCoreCapacityUnits: Swift.Int?
        /// The upper boundary of On-Demand Amazon EC2 units. It is measured through vCPU cores or instances for instance groups and measured through units for instance fleets. The On-Demand units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between On-Demand and Spot Instances.
        public var maximumOnDemandCapacityUnits: Swift.Int?
        /// The lower boundary of Amazon EC2 units. It is measured through vCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
        /// This member is required.
        public var minimumCapacityUnits: Swift.Int?
        /// The unit type used for specifying a managed scaling policy.
        /// This member is required.
        public var unitType: EMRClientTypes.ComputeLimitsUnitType?

        public init(
            maximumCapacityUnits: Swift.Int? = nil,
            maximumCoreCapacityUnits: Swift.Int? = nil,
            maximumOnDemandCapacityUnits: Swift.Int? = nil,
            minimumCapacityUnits: Swift.Int? = nil,
            unitType: EMRClientTypes.ComputeLimitsUnitType? = nil
        )
        {
            self.maximumCapacityUnits = maximumCapacityUnits
            self.maximumCoreCapacityUnits = maximumCoreCapacityUnits
            self.maximumOnDemandCapacityUnits = maximumOnDemandCapacityUnits
            self.minimumCapacityUnits = minimumCapacityUnits
            self.unitType = unitType
        }
    }

}

public struct CreateSecurityConfigurationInput {
    /// The name of the security configuration.
    /// This member is required.
    public var name: Swift.String?
    /// The security configuration details in JSON format. For JSON parameters and examples, see [Use Security Configurations to Set Up Cluster Security](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-security-configurations.html) in the Amazon EMR Management Guide.
    /// This member is required.
    public var securityConfiguration: Swift.String?

    public init(
        name: Swift.String? = nil,
        securityConfiguration: Swift.String? = nil
    )
    {
        self.name = name
        self.securityConfiguration = securityConfiguration
    }
}

public struct CreateSecurityConfigurationOutput {
    /// The date and time the security configuration was created.
    /// This member is required.
    public var creationDateTime: Foundation.Date?
    /// The name of the security configuration.
    /// This member is required.
    public var name: Swift.String?

    public init(
        creationDateTime: Foundation.Date? = nil,
        name: Swift.String? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.name = name
    }
}

extension EMRClientTypes {

    public enum IdcUserAssignment: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `optional`
        case `required`
        case sdkUnknown(Swift.String)

        public static var allCases: [IdcUserAssignment] {
            return [
                .optional,
                .required
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .optional: return "OPTIONAL"
            case .required: return "REQUIRED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateStudioInput {
    /// Specifies whether the Studio authenticates users using IAM or IAM Identity Center.
    /// This member is required.
    public var authMode: EMRClientTypes.AuthMode?
    /// The Amazon S3 location to back up Amazon EMR Studio Workspaces and notebook files.
    /// This member is required.
    public var defaultS3Location: Swift.String?
    /// A detailed description of the Amazon EMR Studio.
    public var description: Swift.String?
    /// The KMS key identifier (ARN) used to encrypt Amazon EMR Studio workspace and notebook files when backed up to Amazon S3.
    public var encryptionKeyArn: Swift.String?
    /// The ID of the Amazon EMR Studio Engine security group. The Engine security group allows inbound network traffic from the Workspace security group, and it must be in the same VPC specified by VpcId.
    /// This member is required.
    public var engineSecurityGroupId: Swift.String?
    /// The ARN of the IAM Identity Center instance to create the Studio application.
    public var idcInstanceArn: Swift.String?
    /// Specifies whether IAM Identity Center user assignment is REQUIRED or OPTIONAL. If the value is set to REQUIRED, users must be explicitly assigned to the Studio application to access the Studio.
    public var idcUserAssignment: EMRClientTypes.IdcUserAssignment?
    /// The authentication endpoint of your identity provider (IdP). Specify this value when you use IAM authentication and want to let federated users log in to a Studio with the Studio URL and credentials from your IdP. Amazon EMR Studio redirects users to this endpoint to enter credentials.
    public var idpAuthUrl: Swift.String?
    /// The name that your identity provider (IdP) uses for its RelayState parameter. For example, RelayState or TargetSource. Specify this value when you use IAM authentication and want to let federated users log in to a Studio using the Studio URL. The RelayState parameter differs by IdP.
    public var idpRelayStateParameterName: Swift.String?
    /// A descriptive name for the Amazon EMR Studio.
    /// This member is required.
    public var name: Swift.String?
    /// The IAM role that the Amazon EMR Studio assumes. The service role provides a way for Amazon EMR Studio to interoperate with other Amazon Web Services services.
    /// This member is required.
    public var serviceRole: Swift.String?
    /// A list of subnet IDs to associate with the Amazon EMR Studio. A Studio can have a maximum of 5 subnets. The subnets must belong to the VPC specified by VpcId. Studio users can create a Workspace in any of the specified subnets.
    /// This member is required.
    public var subnetIds: [Swift.String]?
    /// A list of tags to associate with the Amazon EMR Studio. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.
    public var tags: [EMRClientTypes.Tag]?
    /// A Boolean indicating whether to enable Trusted identity propagation for the Studio. The default value is false.
    public var trustedIdentityPropagationEnabled: Swift.Bool?
    /// The IAM user role that users and groups assume when logged in to an Amazon EMR Studio. Only specify a UserRole when you use IAM Identity Center authentication. The permissions attached to the UserRole can be scoped down for each user or group using session policies.
    public var userRole: Swift.String?
    /// The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the Studio.
    /// This member is required.
    public var vpcId: Swift.String?
    /// The ID of the Amazon EMR Studio Workspace security group. The Workspace security group allows outbound network traffic to resources in the Engine security group, and it must be in the same VPC specified by VpcId.
    /// This member is required.
    public var workspaceSecurityGroupId: Swift.String?

    public init(
        authMode: EMRClientTypes.AuthMode? = nil,
        defaultS3Location: Swift.String? = nil,
        description: Swift.String? = nil,
        encryptionKeyArn: Swift.String? = nil,
        engineSecurityGroupId: Swift.String? = nil,
        idcInstanceArn: Swift.String? = nil,
        idcUserAssignment: EMRClientTypes.IdcUserAssignment? = nil,
        idpAuthUrl: Swift.String? = nil,
        idpRelayStateParameterName: Swift.String? = nil,
        name: Swift.String? = nil,
        serviceRole: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [EMRClientTypes.Tag]? = nil,
        trustedIdentityPropagationEnabled: Swift.Bool? = nil,
        userRole: Swift.String? = nil,
        vpcId: Swift.String? = nil,
        workspaceSecurityGroupId: Swift.String? = nil
    )
    {
        self.authMode = authMode
        self.defaultS3Location = defaultS3Location
        self.description = description
        self.encryptionKeyArn = encryptionKeyArn
        self.engineSecurityGroupId = engineSecurityGroupId
        self.idcInstanceArn = idcInstanceArn
        self.idcUserAssignment = idcUserAssignment
        self.idpAuthUrl = idpAuthUrl
        self.idpRelayStateParameterName = idpRelayStateParameterName
        self.name = name
        self.serviceRole = serviceRole
        self.subnetIds = subnetIds
        self.tags = tags
        self.trustedIdentityPropagationEnabled = trustedIdentityPropagationEnabled
        self.userRole = userRole
        self.vpcId = vpcId
        self.workspaceSecurityGroupId = workspaceSecurityGroupId
    }
}

public struct CreateStudioOutput {
    /// The ID of the Amazon EMR Studio.
    public var studioId: Swift.String?
    /// The unique Studio access URL.
    public var url: Swift.String?

    public init(
        studioId: Swift.String? = nil,
        url: Swift.String? = nil
    )
    {
        self.studioId = studioId
        self.url = url
    }
}

extension EMRClientTypes {

    public enum IdentityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case group
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [IdentityType] {
            return [
                .group,
                .user
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .group: return "GROUP"
            case .user: return "USER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateStudioSessionMappingInput {
    /// The globally unique identifier (GUID) of the user or group from the IAM Identity Center Identity Store. For more information, see [UserId](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId) and [GroupId](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId) in the IAM Identity Center Identity Store API Reference. Either IdentityName or IdentityId must be specified, but not both.
    public var identityId: Swift.String?
    /// The name of the user or group. For more information, see [UserName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName) and [DisplayName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName) in the IAM Identity Center Identity Store API Reference. Either IdentityName or IdentityId must be specified, but not both.
    public var identityName: Swift.String?
    /// Specifies whether the identity to map to the Amazon EMR Studio is a user or a group.
    /// This member is required.
    public var identityType: EMRClientTypes.IdentityType?
    /// The Amazon Resource Name (ARN) for the session policy that will be applied to the user or group. You should specify the ARN for the session policy that you want to apply, not the ARN of your user role. For more information, see [Create an Amazon EMR Studio User Role with Session Policies](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-studio-user-role.html).
    /// This member is required.
    public var sessionPolicyArn: Swift.String?
    /// The ID of the Amazon EMR Studio to which the user or group will be mapped.
    /// This member is required.
    public var studioId: Swift.String?

    public init(
        identityId: Swift.String? = nil,
        identityName: Swift.String? = nil,
        identityType: EMRClientTypes.IdentityType? = nil,
        sessionPolicyArn: Swift.String? = nil,
        studioId: Swift.String? = nil
    )
    {
        self.identityId = identityId
        self.identityName = identityName
        self.identityType = identityType
        self.sessionPolicyArn = sessionPolicyArn
        self.studioId = studioId
    }
}

extension EMRClientTypes {
    /// The username and password that you use to connect to cluster endpoints.
    public struct UsernamePassword {
        /// The password associated with the temporary credentials that you use to connect to cluster endpoints.
        public var password: Swift.String?
        /// The username associated with the temporary credentials that you use to connect to cluster endpoints.
        public var username: Swift.String?

        public init(
            password: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.password = password
            self.username = username
        }
    }

}

extension EMRClientTypes.UsernamePassword: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension EMRClientTypes {
    /// The credentials that you can use to connect to cluster endpoints. Credentials consist of a username and a password.
    public enum Credentials {
        /// The username and password that you use to connect to cluster endpoints.
        case usernamepassword(EMRClientTypes.UsernamePassword)
        case sdkUnknown(Swift.String)
    }

}

public struct DeleteSecurityConfigurationInput {
    /// The name of the security configuration.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteSecurityConfigurationOutput {

    public init() { }
}

public struct DeleteStudioInput {
    /// The ID of the Amazon EMR Studio.
    /// This member is required.
    public var studioId: Swift.String?

    public init(
        studioId: Swift.String? = nil
    )
    {
        self.studioId = studioId
    }
}

public struct DeleteStudioSessionMappingInput {
    /// The globally unique identifier (GUID) of the user or group to remove from the Amazon EMR Studio. For more information, see [UserId](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId) and [GroupId](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId) in the IAM Identity Center Identity Store API Reference. Either IdentityName or IdentityId must be specified.
    public var identityId: Swift.String?
    /// The name of the user name or group to remove from the Amazon EMR Studio. For more information, see [UserName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName) and [DisplayName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName) in the IAM Identity Center Store API Reference. Either IdentityName or IdentityId must be specified.
    public var identityName: Swift.String?
    /// Specifies whether the identity to delete from the Amazon EMR Studio is a user or a group.
    /// This member is required.
    public var identityType: EMRClientTypes.IdentityType?
    /// The ID of the Amazon EMR Studio.
    /// This member is required.
    public var studioId: Swift.String?

    public init(
        identityId: Swift.String? = nil,
        identityName: Swift.String? = nil,
        identityType: EMRClientTypes.IdentityType? = nil,
        studioId: Swift.String? = nil
    )
    {
        self.identityId = identityId
        self.identityName = identityName
        self.identityType = identityType
        self.studioId = studioId
    }
}

/// This input determines which cluster to describe.
public struct DescribeClusterInput {
    /// The identifier of the cluster to describe.
    /// This member is required.
    public var clusterId: Swift.String?

    public init(
        clusterId: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
    }
}

extension EMRClientTypes {

    /// The type of instance.
    public enum JobFlowExecutionState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bootstrapping
        case completed
        case failed
        case running
        case shuttingDown
        case starting
        case terminated
        case waiting
        case sdkUnknown(Swift.String)

        public static var allCases: [JobFlowExecutionState] {
            return [
                .bootstrapping,
                .completed,
                .failed,
                .running,
                .shuttingDown,
                .starting,
                .terminated,
                .waiting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bootstrapping: return "BOOTSTRAPPING"
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .running: return "RUNNING"
            case .shuttingDown: return "SHUTTING_DOWN"
            case .starting: return "STARTING"
            case .terminated: return "TERMINATED"
            case .waiting: return "WAITING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The input for the [DescribeJobFlows] operation.
public struct DescribeJobFlowsInput {
    /// Return only job flows created after this date and time.
    public var createdAfter: Foundation.Date?
    /// Return only job flows created before this date and time.
    public var createdBefore: Foundation.Date?
    /// Return only job flows whose job flow ID is contained in this list.
    public var jobFlowIds: [Swift.String]?
    /// Return only job flows whose state is contained in this list.
    public var jobFlowStates: [EMRClientTypes.JobFlowExecutionState]?

    public init(
        createdAfter: Foundation.Date? = nil,
        createdBefore: Foundation.Date? = nil,
        jobFlowIds: [Swift.String]? = nil,
        jobFlowStates: [EMRClientTypes.JobFlowExecutionState]? = nil
    )
    {
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.jobFlowIds = jobFlowIds
        self.jobFlowStates = jobFlowStates
    }
}

extension EMRClientTypes {
    /// Describes the status of the cluster (job flow).
    public struct JobFlowExecutionStatusDetail {
        /// The creation date and time of the job flow.
        /// This member is required.
        public var creationDateTime: Foundation.Date?
        /// The completion date and time of the job flow.
        public var endDateTime: Foundation.Date?
        /// Description of the job flow last changed state.
        public var lastStateChangeReason: Swift.String?
        /// The date and time when the job flow was ready to start running bootstrap actions.
        public var readyDateTime: Foundation.Date?
        /// The start date and time of the job flow.
        public var startDateTime: Foundation.Date?
        /// The state of the job flow.
        /// This member is required.
        public var state: EMRClientTypes.JobFlowExecutionState?

        public init(
            creationDateTime: Foundation.Date? = nil,
            endDateTime: Foundation.Date? = nil,
            lastStateChangeReason: Swift.String? = nil,
            readyDateTime: Foundation.Date? = nil,
            startDateTime: Foundation.Date? = nil,
            state: EMRClientTypes.JobFlowExecutionState? = nil
        )
        {
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.lastStateChangeReason = lastStateChangeReason
            self.readyDateTime = readyDateTime
            self.startDateTime = startDateTime
            self.state = state
        }
    }

}

extension EMRClientTypes {

    public enum InstanceGroupState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case arrested
        case bootstrapping
        case ended
        case provisioning
        case reconfiguring
        case resizing
        case running
        case shuttingDown
        case suspended
        case terminated
        case terminating
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceGroupState] {
            return [
                .arrested,
                .bootstrapping,
                .ended,
                .provisioning,
                .reconfiguring,
                .resizing,
                .running,
                .shuttingDown,
                .suspended,
                .terminated,
                .terminating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .arrested: return "ARRESTED"
            case .bootstrapping: return "BOOTSTRAPPING"
            case .ended: return "ENDED"
            case .provisioning: return "PROVISIONING"
            case .reconfiguring: return "RECONFIGURING"
            case .resizing: return "RESIZING"
            case .running: return "RUNNING"
            case .shuttingDown: return "SHUTTING_DOWN"
            case .suspended: return "SUSPENDED"
            case .terminated: return "TERMINATED"
            case .terminating: return "TERMINATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// Detailed information about an instance group.
    public struct InstanceGroupDetail {
        /// If specified, indicates that the instance group uses Spot Instances. This is the maximum price you are willing to pay for Spot Instances. Specify OnDemandPrice to set the amount equal to the On-Demand price, or specify an amount in USD.
        public var bidPrice: Swift.String?
        /// The date/time the instance group was created.
        /// This member is required.
        public var creationDateTime: Foundation.Date?
        /// The custom AMI ID to use for the provisioned instance group.
        public var customAmiId: Swift.String?
        /// The date/time the instance group was terminated.
        public var endDateTime: Foundation.Date?
        /// Unique identifier for the instance group.
        public var instanceGroupId: Swift.String?
        /// Target number of instances to run in the instance group.
        /// This member is required.
        public var instanceRequestCount: Swift.Int?
        /// Instance group role in the cluster
        /// This member is required.
        public var instanceRole: EMRClientTypes.InstanceRoleType?
        /// Actual count of running instances.
        /// This member is required.
        public var instanceRunningCount: Swift.Int?
        /// Amazon EC2 instance type.
        /// This member is required.
        public var instanceType: Swift.String?
        /// Details regarding the state of the instance group.
        public var lastStateChangeReason: Swift.String?
        /// Market type of the Amazon EC2 instances used to create a cluster node.
        /// This member is required.
        public var market: EMRClientTypes.MarketType?
        /// Friendly name for the instance group.
        public var name: Swift.String?
        /// The date/time the instance group was available to the cluster.
        public var readyDateTime: Foundation.Date?
        /// The date/time the instance group was started.
        public var startDateTime: Foundation.Date?
        /// State of instance group. The following values are no longer supported: STARTING, TERMINATED, and FAILED.
        /// This member is required.
        public var state: EMRClientTypes.InstanceGroupState?

        public init(
            bidPrice: Swift.String? = nil,
            creationDateTime: Foundation.Date? = nil,
            customAmiId: Swift.String? = nil,
            endDateTime: Foundation.Date? = nil,
            instanceGroupId: Swift.String? = nil,
            instanceRequestCount: Swift.Int? = nil,
            instanceRole: EMRClientTypes.InstanceRoleType? = nil,
            instanceRunningCount: Swift.Int? = nil,
            instanceType: Swift.String? = nil,
            lastStateChangeReason: Swift.String? = nil,
            market: EMRClientTypes.MarketType? = nil,
            name: Swift.String? = nil,
            readyDateTime: Foundation.Date? = nil,
            startDateTime: Foundation.Date? = nil,
            state: EMRClientTypes.InstanceGroupState? = nil
        )
        {
            self.bidPrice = bidPrice
            self.creationDateTime = creationDateTime
            self.customAmiId = customAmiId
            self.endDateTime = endDateTime
            self.instanceGroupId = instanceGroupId
            self.instanceRequestCount = instanceRequestCount
            self.instanceRole = instanceRole
            self.instanceRunningCount = instanceRunningCount
            self.instanceType = instanceType
            self.lastStateChangeReason = lastStateChangeReason
            self.market = market
            self.name = name
            self.readyDateTime = readyDateTime
            self.startDateTime = startDateTime
            self.state = state
        }
    }

}

extension EMRClientTypes {
    /// The Amazon EC2 Availability Zone configuration of the cluster (job flow).
    public struct PlacementType {
        /// The Amazon EC2 Availability Zone for the cluster. AvailabilityZone is used for uniform instance groups, while AvailabilityZones (plural) is used for instance fleets.
        public var availabilityZone: Swift.String?
        /// When multiple Availability Zones are specified, Amazon EMR evaluates them and launches instances in the optimal Availability Zone. AvailabilityZones is used for instance fleets, while AvailabilityZone (singular) is used for uniform instance groups. The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions.
        public var availabilityZones: [Swift.String]?

        public init(
            availabilityZone: Swift.String? = nil,
            availabilityZones: [Swift.String]? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.availabilityZones = availabilityZones
        }
    }

}

extension EMRClientTypes {
    /// Specify the type of Amazon EC2 instances that the cluster (job flow) runs on.
    public struct JobFlowInstancesDetail {
        /// The name of an Amazon EC2 key pair that can be used to connect to the master node using SSH.
        public var ec2KeyName: Swift.String?
        /// For clusters launched within Amazon Virtual Private Cloud, this is the identifier of the subnet where the cluster was launched.
        public var ec2SubnetId: Swift.String?
        /// The Hadoop version for the cluster.
        public var hadoopVersion: Swift.String?
        /// The number of Amazon EC2 instances in the cluster. If the value is 1, the same instance serves as both the master and core and task node. If the value is greater than 1, one instance is the master node and all others are core and task nodes.
        /// This member is required.
        public var instanceCount: Swift.Int?
        /// Details about the instance groups in a cluster.
        public var instanceGroups: [EMRClientTypes.InstanceGroupDetail]?
        /// Specifies whether the cluster should remain available after completing all steps.
        public var keepJobFlowAliveWhenNoSteps: Swift.Bool?
        /// The Amazon EC2 instance identifier of the master node.
        public var masterInstanceId: Swift.String?
        /// The Amazon EC2 master node instance type.
        /// This member is required.
        public var masterInstanceType: Swift.String?
        /// The DNS name of the master node. If the cluster is on a private subnet, this is the private DNS name. On a public subnet, this is the public DNS name.
        public var masterPublicDnsName: Swift.String?
        /// An approximation of the cost of the cluster, represented in m1.small/hours. This value is increased one time for every hour that an m1.small instance runs. Larger instances are weighted more heavily, so an Amazon EC2 instance that is roughly four times more expensive would result in the normalized instance hours being increased incrementally four times. This result is only an approximation and does not reflect the actual billing rate.
        public var normalizedInstanceHours: Swift.Int?
        /// The Amazon EC2 Availability Zone for the cluster.
        public var placement: EMRClientTypes.PlacementType?
        /// The Amazon EC2 core and task node instance type.
        /// This member is required.
        public var slaveInstanceType: Swift.String?
        /// Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
        public var terminationProtected: Swift.Bool?
        /// Indicates whether Amazon EMR should gracefully replace core nodes that have degraded within the cluster.
        public var unhealthyNodeReplacement: Swift.Bool?

        public init(
            ec2KeyName: Swift.String? = nil,
            ec2SubnetId: Swift.String? = nil,
            hadoopVersion: Swift.String? = nil,
            instanceCount: Swift.Int? = nil,
            instanceGroups: [EMRClientTypes.InstanceGroupDetail]? = nil,
            keepJobFlowAliveWhenNoSteps: Swift.Bool? = nil,
            masterInstanceId: Swift.String? = nil,
            masterInstanceType: Swift.String? = nil,
            masterPublicDnsName: Swift.String? = nil,
            normalizedInstanceHours: Swift.Int? = nil,
            placement: EMRClientTypes.PlacementType? = nil,
            slaveInstanceType: Swift.String? = nil,
            terminationProtected: Swift.Bool? = nil,
            unhealthyNodeReplacement: Swift.Bool? = nil
        )
        {
            self.ec2KeyName = ec2KeyName
            self.ec2SubnetId = ec2SubnetId
            self.hadoopVersion = hadoopVersion
            self.instanceCount = instanceCount
            self.instanceGroups = instanceGroups
            self.keepJobFlowAliveWhenNoSteps = keepJobFlowAliveWhenNoSteps
            self.masterInstanceId = masterInstanceId
            self.masterInstanceType = masterInstanceType
            self.masterPublicDnsName = masterPublicDnsName
            self.normalizedInstanceHours = normalizedInstanceHours
            self.placement = placement
            self.slaveInstanceType = slaveInstanceType
            self.terminationProtected = terminationProtected
            self.unhealthyNodeReplacement = unhealthyNodeReplacement
        }
    }

}

extension EMRClientTypes {

    public enum StepExecutionState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelled
        case completed
        case `continue`
        case failed
        case interrupted
        case pending
        case running
        case sdkUnknown(Swift.String)

        public static var allCases: [StepExecutionState] {
            return [
                .cancelled,
                .completed,
                .continue,
                .failed,
                .interrupted,
                .pending,
                .running
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .completed: return "COMPLETED"
            case .continue: return "CONTINUE"
            case .failed: return "FAILED"
            case .interrupted: return "INTERRUPTED"
            case .pending: return "PENDING"
            case .running: return "RUNNING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// The execution state of a step.
    public struct StepExecutionStatusDetail {
        /// The creation date and time of the step.
        /// This member is required.
        public var creationDateTime: Foundation.Date?
        /// The completion date and time of the step.
        public var endDateTime: Foundation.Date?
        /// A description of the step's current state.
        public var lastStateChangeReason: Swift.String?
        /// The start date and time of the step.
        public var startDateTime: Foundation.Date?
        /// The state of the step.
        /// This member is required.
        public var state: EMRClientTypes.StepExecutionState?

        public init(
            creationDateTime: Foundation.Date? = nil,
            endDateTime: Foundation.Date? = nil,
            lastStateChangeReason: Swift.String? = nil,
            startDateTime: Foundation.Date? = nil,
            state: EMRClientTypes.StepExecutionState? = nil
        )
        {
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.lastStateChangeReason = lastStateChangeReason
            self.startDateTime = startDateTime
            self.state = state
        }
    }

}

extension EMRClientTypes {
    /// Combines the execution state and configuration of a step.
    public struct StepDetail {
        /// The description of the step status.
        /// This member is required.
        public var executionStatusDetail: EMRClientTypes.StepExecutionStatusDetail?
        /// The step configuration.
        /// This member is required.
        public var stepConfig: EMRClientTypes.StepConfig?

        public init(
            executionStatusDetail: EMRClientTypes.StepExecutionStatusDetail? = nil,
            stepConfig: EMRClientTypes.StepConfig? = nil
        )
        {
            self.executionStatusDetail = executionStatusDetail
            self.stepConfig = stepConfig
        }
    }

}

extension EMRClientTypes {
    /// A description of a cluster (job flow).
    public struct JobFlowDetail {
        /// Applies only to Amazon EMR AMI versions 3.x and 2.x. For Amazon EMR releases 4.0 and later, ReleaseLabel is used. To specify a custom AMI, use CustomAmiID.
        public var amiVersion: Swift.String?
        /// An IAM role for automatic scaling policies. The default role is EMR_AutoScaling_DefaultRole. The IAM role provides a way for the automatic scaling feature to get the required permissions it needs to launch and terminate Amazon EC2 instances in an instance group.
        public var autoScalingRole: Swift.String?
        /// A list of the bootstrap actions run by the job flow.
        public var bootstrapActions: [EMRClientTypes.BootstrapActionDetail]?
        /// Describes the execution status of the job flow.
        /// This member is required.
        public var executionStatusDetail: EMRClientTypes.JobFlowExecutionStatusDetail?
        /// Describes the Amazon EC2 instances of the job flow.
        /// This member is required.
        public var instances: EMRClientTypes.JobFlowInstancesDetail?
        /// The job flow identifier.
        /// This member is required.
        public var jobFlowId: Swift.String?
        /// The IAM role that was specified when the job flow was launched. The Amazon EC2 instances of the job flow assume this role.
        public var jobFlowRole: Swift.String?
        /// The KMS key used for encrypting log files. This attribute is only available with Amazon EMR 5.30.0 and later, excluding 6.0.0.
        public var logEncryptionKmsKeyId: Swift.String?
        /// The location in Amazon S3 where log files for the job are stored.
        public var logUri: Swift.String?
        /// The name of the job flow.
        /// This member is required.
        public var name: Swift.String?
        /// The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. TERMINATE_AT_INSTANCE_HOUR indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. TERMINATE_AT_TASK_COMPLETION indicates that Amazon EMR adds nodes to a deny list and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. TERMINATE_AT_TASK_COMPLETION available only in Amazon EMR releases 4.1.0 and later, and is the default for releases of Amazon EMR earlier than 5.1.0.
        public var scaleDownBehavior: EMRClientTypes.ScaleDownBehavior?
        /// The IAM role that is assumed by the Amazon EMR service to access Amazon Web Services resources on your behalf.
        public var serviceRole: Swift.String?
        /// A list of steps run by the job flow.
        public var steps: [EMRClientTypes.StepDetail]?
        /// A list of strings set by third-party software when the job flow is launched. If you are not using third-party software to manage the job flow, this value is empty.
        public var supportedProducts: [Swift.String]?
        /// Indicates whether the cluster is visible to IAM principals in the Amazon Web Services account associated with the cluster. When true, IAM principals in the Amazon Web Services account can perform Amazon EMR cluster actions that their IAM policies allow. When false, only the IAM principal that created the cluster and the Amazon Web Services account root user can perform Amazon EMR actions, regardless of IAM permissions policies attached to other IAM principals. The default value is true if a value is not provided when creating a cluster using the Amazon EMR API [RunJobFlow] command, the CLI [create-cluster](https://docs.aws.amazon.com/cli/latest/reference/emr/create-cluster.html) command, or the Amazon Web Services Management Console.
        public var visibleToAllUsers: Swift.Bool?

        public init(
            amiVersion: Swift.String? = nil,
            autoScalingRole: Swift.String? = nil,
            bootstrapActions: [EMRClientTypes.BootstrapActionDetail]? = nil,
            executionStatusDetail: EMRClientTypes.JobFlowExecutionStatusDetail? = nil,
            instances: EMRClientTypes.JobFlowInstancesDetail? = nil,
            jobFlowId: Swift.String? = nil,
            jobFlowRole: Swift.String? = nil,
            logEncryptionKmsKeyId: Swift.String? = nil,
            logUri: Swift.String? = nil,
            name: Swift.String? = nil,
            scaleDownBehavior: EMRClientTypes.ScaleDownBehavior? = nil,
            serviceRole: Swift.String? = nil,
            steps: [EMRClientTypes.StepDetail]? = nil,
            supportedProducts: [Swift.String]? = nil,
            visibleToAllUsers: Swift.Bool? = nil
        )
        {
            self.amiVersion = amiVersion
            self.autoScalingRole = autoScalingRole
            self.bootstrapActions = bootstrapActions
            self.executionStatusDetail = executionStatusDetail
            self.instances = instances
            self.jobFlowId = jobFlowId
            self.jobFlowRole = jobFlowRole
            self.logEncryptionKmsKeyId = logEncryptionKmsKeyId
            self.logUri = logUri
            self.name = name
            self.scaleDownBehavior = scaleDownBehavior
            self.serviceRole = serviceRole
            self.steps = steps
            self.supportedProducts = supportedProducts
            self.visibleToAllUsers = visibleToAllUsers
        }
    }

}

/// The output for the [DescribeJobFlows] operation.
public struct DescribeJobFlowsOutput {
    /// A list of job flows matching the parameters supplied.
    public var jobFlows: [EMRClientTypes.JobFlowDetail]?

    public init(
        jobFlows: [EMRClientTypes.JobFlowDetail]? = nil
    )
    {
        self.jobFlows = jobFlows
    }
}

public struct DescribeNotebookExecutionInput {
    /// The unique identifier of the notebook execution.
    /// This member is required.
    public var notebookExecutionId: Swift.String?

    public init(
        notebookExecutionId: Swift.String? = nil
    )
    {
        self.notebookExecutionId = notebookExecutionId
    }
}

extension EMRClientTypes {

    public enum ExecutionEngineType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case emr
        case sdkUnknown(Swift.String)

        public static var allCases: [ExecutionEngineType] {
            return [
                .emr
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .emr: return "EMR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// Specifies the execution engine (cluster) to run the notebook and perform the notebook execution, for example, an Amazon EMR cluster.
    public struct ExecutionEngineConfig {
        /// The execution role ARN required for the notebook execution.
        public var executionRoleArn: Swift.String?
        /// The unique identifier of the execution engine. For an Amazon EMR cluster, this is the cluster ID.
        /// This member is required.
        public var id: Swift.String?
        /// An optional unique ID of an Amazon EC2 security group to associate with the master instance of the Amazon EMR cluster for this notebook execution. For more information see [Specifying Amazon EC2 Security Groups for Amazon EMR Notebooks](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-managed-notebooks-security-groups.html) in the EMR Management Guide.
        public var masterInstanceSecurityGroupId: Swift.String?
        /// The type of execution engine. A value of EMR specifies an Amazon EMR cluster.
        public var type: EMRClientTypes.ExecutionEngineType?

        public init(
            executionRoleArn: Swift.String? = nil,
            id: Swift.String? = nil,
            masterInstanceSecurityGroupId: Swift.String? = nil,
            type: EMRClientTypes.ExecutionEngineType? = nil
        )
        {
            self.executionRoleArn = executionRoleArn
            self.id = id
            self.masterInstanceSecurityGroupId = masterInstanceSecurityGroupId
            self.type = type
        }
    }

}

extension EMRClientTypes {
    /// The Amazon S3 location that stores the notebook execution input.
    public struct NotebookS3LocationForOutput {
        /// The Amazon S3 bucket that stores the notebook execution input.
        public var bucket: Swift.String?
        /// The key to the Amazon S3 location that stores the notebook execution input.
        public var key: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            key: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.key = key
        }
    }

}

extension EMRClientTypes {

    public enum OutputNotebookFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case html
        case sdkUnknown(Swift.String)

        public static var allCases: [OutputNotebookFormat] {
            return [
                .html
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .html: return "HTML"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// The Amazon S3 location that stores the notebook execution output.
    public struct OutputNotebookS3LocationForOutput {
        /// The Amazon S3 bucket that stores the notebook execution output.
        public var bucket: Swift.String?
        /// The key to the Amazon S3 location that stores the notebook execution output.
        public var key: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            key: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.key = key
        }
    }

}

extension EMRClientTypes {

    public enum NotebookExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case failing
        case finished
        case finishing
        case running
        case starting
        case startPending
        case stopped
        case stopping
        case stopPending
        case sdkUnknown(Swift.String)

        public static var allCases: [NotebookExecutionStatus] {
            return [
                .failed,
                .failing,
                .finished,
                .finishing,
                .running,
                .starting,
                .startPending,
                .stopped,
                .stopping,
                .stopPending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .failing: return "FAILING"
            case .finished: return "FINISHED"
            case .finishing: return "FINISHING"
            case .running: return "RUNNING"
            case .starting: return "STARTING"
            case .startPending: return "START_PENDING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case .stopPending: return "STOP_PENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// A notebook execution. An execution is a specific instance that an Amazon EMR Notebook is run using the StartNotebookExecution action.
    public struct NotebookExecution {
        /// The Amazon Resource Name (ARN) of the notebook execution.
        public var arn: Swift.String?
        /// The unique identifier of the Amazon EMR Notebook that is used for the notebook execution.
        public var editorId: Swift.String?
        /// The timestamp when notebook execution ended.
        public var endTime: Foundation.Date?
        /// The environment variables associated with the notebook execution.
        public var environmentVariables: [Swift.String: Swift.String]?
        /// The execution engine, such as an Amazon EMR cluster, used to run the Amazon EMR notebook and perform the notebook execution.
        public var executionEngine: EMRClientTypes.ExecutionEngineConfig?
        /// The reason for the latest status change of the notebook execution.
        public var lastStateChangeReason: Swift.String?
        /// The unique identifier of a notebook execution.
        public var notebookExecutionId: Swift.String?
        /// A name for the notebook execution.
        public var notebookExecutionName: Swift.String?
        /// The unique identifier of the Amazon EC2 security group associated with the Amazon EMR Notebook instance. For more information see [Specifying Amazon EC2 Security Groups for Amazon EMR Notebooks](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-managed-notebooks-security-groups.html) in the Amazon EMR Management Guide.
        public var notebookInstanceSecurityGroupId: Swift.String?
        /// Input parameters in JSON format passed to the Amazon EMR Notebook at runtime for execution.
        public var notebookParams: Swift.String?
        /// The Amazon S3 location that stores the notebook execution input.
        public var notebookS3Location: EMRClientTypes.NotebookS3LocationForOutput?
        /// The output format for the notebook execution.
        public var outputNotebookFormat: EMRClientTypes.OutputNotebookFormat?
        /// The Amazon S3 location for the notebook execution output.
        public var outputNotebookS3Location: EMRClientTypes.OutputNotebookS3LocationForOutput?
        /// The location of the notebook execution's output file in Amazon S3.
        public var outputNotebookURI: Swift.String?
        /// The timestamp when notebook execution started.
        public var startTime: Foundation.Date?
        /// The status of the notebook execution.
        ///
        /// * START_PENDING indicates that the cluster has received the execution request but execution has not begun.
        ///
        /// * STARTING indicates that the execution is starting on the cluster.
        ///
        /// * RUNNING indicates that the execution is being processed by the cluster.
        ///
        /// * FINISHING indicates that execution processing is in the final stages.
        ///
        /// * FINISHED indicates that the execution has completed without error.
        ///
        /// * FAILING indicates that the execution is failing and will not finish successfully.
        ///
        /// * FAILED indicates that the execution failed.
        ///
        /// * STOP_PENDING indicates that the cluster has received a StopNotebookExecution request and the stop is pending.
        ///
        /// * STOPPING indicates that the cluster is in the process of stopping the execution as a result of a StopNotebookExecution request.
        ///
        /// * STOPPED indicates that the execution stopped because of a StopNotebookExecution request.
        public var status: EMRClientTypes.NotebookExecutionStatus?
        /// A list of tags associated with a notebook execution. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters and an optional value string with a maximum of 256 characters.
        public var tags: [EMRClientTypes.Tag]?

        public init(
            arn: Swift.String? = nil,
            editorId: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            environmentVariables: [Swift.String: Swift.String]? = nil,
            executionEngine: EMRClientTypes.ExecutionEngineConfig? = nil,
            lastStateChangeReason: Swift.String? = nil,
            notebookExecutionId: Swift.String? = nil,
            notebookExecutionName: Swift.String? = nil,
            notebookInstanceSecurityGroupId: Swift.String? = nil,
            notebookParams: Swift.String? = nil,
            notebookS3Location: EMRClientTypes.NotebookS3LocationForOutput? = nil,
            outputNotebookFormat: EMRClientTypes.OutputNotebookFormat? = nil,
            outputNotebookS3Location: EMRClientTypes.OutputNotebookS3LocationForOutput? = nil,
            outputNotebookURI: Swift.String? = nil,
            startTime: Foundation.Date? = nil,
            status: EMRClientTypes.NotebookExecutionStatus? = nil,
            tags: [EMRClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.editorId = editorId
            self.endTime = endTime
            self.environmentVariables = environmentVariables
            self.executionEngine = executionEngine
            self.lastStateChangeReason = lastStateChangeReason
            self.notebookExecutionId = notebookExecutionId
            self.notebookExecutionName = notebookExecutionName
            self.notebookInstanceSecurityGroupId = notebookInstanceSecurityGroupId
            self.notebookParams = notebookParams
            self.notebookS3Location = notebookS3Location
            self.outputNotebookFormat = outputNotebookFormat
            self.outputNotebookS3Location = outputNotebookS3Location
            self.outputNotebookURI = outputNotebookURI
            self.startTime = startTime
            self.status = status
            self.tags = tags
        }
    }

}

public struct DescribeNotebookExecutionOutput {
    /// Properties of the notebook execution.
    public var notebookExecution: EMRClientTypes.NotebookExecution?

    public init(
        notebookExecution: EMRClientTypes.NotebookExecution? = nil
    )
    {
        self.notebookExecution = notebookExecution
    }
}

public struct DescribeReleaseLabelInput {
    /// Reserved for future use. Currently set to null.
    public var maxResults: Swift.Int?
    /// The pagination token. Reserved for future use. Currently set to null.
    public var nextToken: Swift.String?
    /// The target release label to be described.
    public var releaseLabel: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        releaseLabel: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.releaseLabel = releaseLabel
    }
}

extension EMRClientTypes {
    /// The returned release label application names or versions.
    public struct SimplifiedApplication {
        /// The returned release label application name. For example, hadoop.
        public var name: Swift.String?
        /// The returned release label application version. For example, 3.2.1.
        public var version: Swift.String?

        public init(
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.name = name
            self.version = version
        }
    }

}

extension EMRClientTypes {
    /// The Amazon Linux release specified for a cluster in the RunJobFlow request.
    public struct OSRelease {
        /// The Amazon Linux release specified for a cluster in the RunJobFlow request. The format is as shown in [ Amazon Linux 2 Release Notes ](https://docs.aws.amazon.com/AL2/latest/relnotes/relnotes-20220218.html). For example, 2.0.20220218.1.
        public var label: Swift.String?

        public init(
            label: Swift.String? = nil
        )
        {
            self.label = label
        }
    }

}

public struct DescribeReleaseLabelOutput {
    /// The list of applications available for the target release label. Name is the name of the application. Version is the concise version of the application.
    public var applications: [EMRClientTypes.SimplifiedApplication]?
    /// The list of available Amazon Linux release versions for an Amazon EMR release. Contains a Label field that is formatted as shown in [ Amazon Linux 2 Release Notes ](https://docs.aws.amazon.com/AL2/latest/relnotes/relnotes-al2.html). For example, [2.0.20220218.1](https://docs.aws.amazon.com/AL2/latest/relnotes/relnotes-20220218.html).
    public var availableOSReleases: [EMRClientTypes.OSRelease]?
    /// The pagination token. Reserved for future use. Currently set to null.
    public var nextToken: Swift.String?
    /// The target release label described in the response.
    public var releaseLabel: Swift.String?

    public init(
        applications: [EMRClientTypes.SimplifiedApplication]? = nil,
        availableOSReleases: [EMRClientTypes.OSRelease]? = nil,
        nextToken: Swift.String? = nil,
        releaseLabel: Swift.String? = nil
    )
    {
        self.applications = applications
        self.availableOSReleases = availableOSReleases
        self.nextToken = nextToken
        self.releaseLabel = releaseLabel
    }
}

public struct DescribeSecurityConfigurationInput {
    /// The name of the security configuration.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DescribeSecurityConfigurationOutput {
    /// The date and time the security configuration was created
    public var creationDateTime: Foundation.Date?
    /// The name of the security configuration.
    public var name: Swift.String?
    /// The security configuration details in JSON format.
    public var securityConfiguration: Swift.String?

    public init(
        creationDateTime: Foundation.Date? = nil,
        name: Swift.String? = nil,
        securityConfiguration: Swift.String? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.name = name
        self.securityConfiguration = securityConfiguration
    }
}

/// This input determines which step to describe.
public struct DescribeStepInput {
    /// The identifier of the cluster with steps to describe.
    /// This member is required.
    public var clusterId: Swift.String?
    /// The identifier of the step to describe.
    /// This member is required.
    public var stepId: Swift.String?

    public init(
        clusterId: Swift.String? = nil,
        stepId: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
        self.stepId = stepId
    }
}

extension EMRClientTypes {
    /// A cluster step consisting of a JAR file whose main function will be executed. The main function submits a job for Hadoop to execute and waits for the job to finish or fail.
    public struct HadoopStepConfig {
        /// The list of command line arguments to pass to the JAR file's main function for execution.
        public var args: [Swift.String]?
        /// The path to the JAR file that runs during the step.
        public var jar: Swift.String?
        /// The name of the main class in the specified Java file. If not specified, the JAR file should specify a main class in its manifest file.
        public var mainClass: Swift.String?
        /// The list of Java properties that are set when the step runs. You can use these properties to pass key-value pairs to your main function.
        public var properties: [Swift.String: Swift.String]?

        public init(
            args: [Swift.String]? = nil,
            jar: Swift.String? = nil,
            mainClass: Swift.String? = nil,
            properties: [Swift.String: Swift.String]? = nil
        )
        {
            self.args = args
            self.jar = jar
            self.mainClass = mainClass
            self.properties = properties
        }
    }

}

extension EMRClientTypes {
    /// The details of the step failure. The service attempts to detect the root cause for many common failures.
    public struct FailureDetails {
        /// The path to the log file where the step failure root cause was originally recorded.
        public var logFile: Swift.String?
        /// The descriptive message including the error the Amazon EMR service has identified as the cause of step failure. This is text from an error log that describes the root cause of the failure.
        public var message: Swift.String?
        /// The reason for the step failure. In the case where the service cannot successfully determine the root cause of the failure, it returns "Unknown Error" as a reason.
        public var reason: Swift.String?

        public init(
            logFile: Swift.String? = nil,
            message: Swift.String? = nil,
            reason: Swift.String? = nil
        )
        {
            self.logFile = logFile
            self.message = message
            self.reason = reason
        }
    }

}

extension EMRClientTypes {

    public enum StepState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelled
        case cancelPending
        case completed
        case failed
        case interrupted
        case pending
        case running
        case sdkUnknown(Swift.String)

        public static var allCases: [StepState] {
            return [
                .cancelled,
                .cancelPending,
                .completed,
                .failed,
                .interrupted,
                .pending,
                .running
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .cancelPending: return "CANCEL_PENDING"
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .interrupted: return "INTERRUPTED"
            case .pending: return "PENDING"
            case .running: return "RUNNING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {

    public enum StepStateChangeReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [StepStateChangeReasonCode] {
            return [
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// The details of the step state change reason.
    public struct StepStateChangeReason {
        /// The programmable code for the state change reason. Note: Currently, the service provides no code for the state change.
        public var code: EMRClientTypes.StepStateChangeReasonCode?
        /// The descriptive message for the state change reason.
        public var message: Swift.String?

        public init(
            code: EMRClientTypes.StepStateChangeReasonCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension EMRClientTypes {
    /// The timeline of the cluster step lifecycle.
    public struct StepTimeline {
        /// The date and time when the cluster step was created.
        public var creationDateTime: Foundation.Date?
        /// The date and time when the cluster step execution completed or failed.
        public var endDateTime: Foundation.Date?
        /// The date and time when the cluster step execution started.
        public var startDateTime: Foundation.Date?

        public init(
            creationDateTime: Foundation.Date? = nil,
            endDateTime: Foundation.Date? = nil,
            startDateTime: Foundation.Date? = nil
        )
        {
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.startDateTime = startDateTime
        }
    }

}

extension EMRClientTypes {
    /// The execution status details of the cluster step.
    public struct StepStatus {
        /// The details for the step failure including reason, message, and log file path where the root cause was identified.
        public var failureDetails: EMRClientTypes.FailureDetails?
        /// The execution state of the cluster step.
        public var state: EMRClientTypes.StepState?
        /// The reason for the step execution status change.
        public var stateChangeReason: EMRClientTypes.StepStateChangeReason?
        /// The timeline of the cluster step status over time.
        public var timeline: EMRClientTypes.StepTimeline?

        public init(
            failureDetails: EMRClientTypes.FailureDetails? = nil,
            state: EMRClientTypes.StepState? = nil,
            stateChangeReason: EMRClientTypes.StepStateChangeReason? = nil,
            timeline: EMRClientTypes.StepTimeline? = nil
        )
        {
            self.failureDetails = failureDetails
            self.state = state
            self.stateChangeReason = stateChangeReason
            self.timeline = timeline
        }
    }

}

extension EMRClientTypes {
    /// This represents a step in a cluster.
    public struct Step {
        /// The action to take when the cluster step fails. Possible values are TERMINATE_CLUSTER, CANCEL_AND_WAIT, and CONTINUE. TERMINATE_JOB_FLOW is provided for backward compatibility. We recommend using TERMINATE_CLUSTER instead. If a cluster's StepConcurrencyLevel is greater than 1, do not use AddJobFlowSteps to submit a step with this parameter set to CANCEL_AND_WAIT or TERMINATE_CLUSTER. The step is not submitted and the action fails with a message that the ActionOnFailure setting is not valid. If you change a cluster's StepConcurrencyLevel to be greater than 1 while a step is running, the ActionOnFailure parameter may not behave as you expect. In this case, for a step that fails with this parameter set to CANCEL_AND_WAIT, pending steps and the running step are not canceled; for a step that fails with this parameter set to TERMINATE_CLUSTER, the cluster does not terminate.
        public var actionOnFailure: EMRClientTypes.ActionOnFailure?
        /// The Hadoop job configuration of the cluster step.
        public var config: EMRClientTypes.HadoopStepConfig?
        /// The Amazon Resource Name (ARN) of the runtime role for a step on the cluster. The runtime role can be a cross-account IAM role. The runtime role ARN is a combination of account ID, role name, and role type using the following format: arn:partition:service:region:account:resource. For example, arn:aws:IAM::1234567890:role/ReadOnly is a correctly formatted runtime role ARN.
        public var executionRoleArn: Swift.String?
        /// The identifier of the cluster step.
        public var id: Swift.String?
        /// The name of the cluster step.
        public var name: Swift.String?
        /// The current execution status details of the cluster step.
        public var status: EMRClientTypes.StepStatus?

        public init(
            actionOnFailure: EMRClientTypes.ActionOnFailure? = nil,
            config: EMRClientTypes.HadoopStepConfig? = nil,
            executionRoleArn: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            status: EMRClientTypes.StepStatus? = nil
        )
        {
            self.actionOnFailure = actionOnFailure
            self.config = config
            self.executionRoleArn = executionRoleArn
            self.id = id
            self.name = name
            self.status = status
        }
    }

}

/// This output contains the description of the cluster step.
public struct DescribeStepOutput {
    /// The step details for the requested step identifier.
    public var step: EMRClientTypes.Step?

    public init(
        step: EMRClientTypes.Step? = nil
    )
    {
        self.step = step
    }
}

public struct DescribeStudioInput {
    /// The Amazon EMR Studio ID.
    /// This member is required.
    public var studioId: Swift.String?

    public init(
        studioId: Swift.String? = nil
    )
    {
        self.studioId = studioId
    }
}

extension EMRClientTypes {
    /// Details for an Amazon EMR Studio including ID, creation time, name, and so on.
    public struct Studio {
        /// Specifies whether the Amazon EMR Studio authenticates users with IAM or IAM Identity Center.
        public var authMode: EMRClientTypes.AuthMode?
        /// The time the Amazon EMR Studio was created.
        public var creationTime: Foundation.Date?
        /// The Amazon S3 location to back up Amazon EMR Studio Workspaces and notebook files.
        public var defaultS3Location: Swift.String?
        /// The detailed description of the Amazon EMR Studio.
        public var description: Swift.String?
        /// The KMS key identifier (ARN) used to encrypt Amazon EMR Studio workspace and notebook files when backed up to Amazon S3.
        public var encryptionKeyArn: Swift.String?
        /// The ID of the Engine security group associated with the Amazon EMR Studio. The Engine security group allows inbound network traffic from resources in the Workspace security group.
        public var engineSecurityGroupId: Swift.String?
        /// The ARN of the IAM Identity Center instance the Studio application belongs to.
        public var idcInstanceArn: Swift.String?
        /// Indicates whether the Studio has REQUIRED or OPTIONAL IAM Identity Center user assignment. If the value is set to REQUIRED, users must be explicitly assigned to the Studio application to access the Studio.
        public var idcUserAssignment: EMRClientTypes.IdcUserAssignment?
        /// Your identity provider's authentication endpoint. Amazon EMR Studio redirects federated users to this endpoint for authentication when logging in to a Studio with the Studio URL.
        public var idpAuthUrl: Swift.String?
        /// The name of your identity provider's RelayState parameter.
        public var idpRelayStateParameterName: Swift.String?
        /// The name of the Amazon EMR Studio.
        public var name: Swift.String?
        /// The name of the IAM role assumed by the Amazon EMR Studio.
        public var serviceRole: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon EMR Studio.
        public var studioArn: Swift.String?
        /// The ID of the Amazon EMR Studio.
        public var studioId: Swift.String?
        /// The list of IDs of the subnets associated with the Amazon EMR Studio.
        public var subnetIds: [Swift.String]?
        /// A list of tags associated with the Amazon EMR Studio.
        public var tags: [EMRClientTypes.Tag]?
        /// Indicates whether the Studio has Trusted identity propagation enabled. The default value is false.
        public var trustedIdentityPropagationEnabled: Swift.Bool?
        /// The unique access URL of the Amazon EMR Studio.
        public var url: Swift.String?
        /// The name of the IAM role assumed by users logged in to the Amazon EMR Studio. A Studio only requires a UserRole when you use IAM authentication.
        public var userRole: Swift.String?
        /// The ID of the VPC associated with the Amazon EMR Studio.
        public var vpcId: Swift.String?
        /// The ID of the Workspace security group associated with the Amazon EMR Studio. The Workspace security group allows outbound network traffic to resources in the Engine security group and to the internet.
        public var workspaceSecurityGroupId: Swift.String?

        public init(
            authMode: EMRClientTypes.AuthMode? = nil,
            creationTime: Foundation.Date? = nil,
            defaultS3Location: Swift.String? = nil,
            description: Swift.String? = nil,
            encryptionKeyArn: Swift.String? = nil,
            engineSecurityGroupId: Swift.String? = nil,
            idcInstanceArn: Swift.String? = nil,
            idcUserAssignment: EMRClientTypes.IdcUserAssignment? = nil,
            idpAuthUrl: Swift.String? = nil,
            idpRelayStateParameterName: Swift.String? = nil,
            name: Swift.String? = nil,
            serviceRole: Swift.String? = nil,
            studioArn: Swift.String? = nil,
            studioId: Swift.String? = nil,
            subnetIds: [Swift.String]? = nil,
            tags: [EMRClientTypes.Tag]? = nil,
            trustedIdentityPropagationEnabled: Swift.Bool? = nil,
            url: Swift.String? = nil,
            userRole: Swift.String? = nil,
            vpcId: Swift.String? = nil,
            workspaceSecurityGroupId: Swift.String? = nil
        )
        {
            self.authMode = authMode
            self.creationTime = creationTime
            self.defaultS3Location = defaultS3Location
            self.description = description
            self.encryptionKeyArn = encryptionKeyArn
            self.engineSecurityGroupId = engineSecurityGroupId
            self.idcInstanceArn = idcInstanceArn
            self.idcUserAssignment = idcUserAssignment
            self.idpAuthUrl = idpAuthUrl
            self.idpRelayStateParameterName = idpRelayStateParameterName
            self.name = name
            self.serviceRole = serviceRole
            self.studioArn = studioArn
            self.studioId = studioId
            self.subnetIds = subnetIds
            self.tags = tags
            self.trustedIdentityPropagationEnabled = trustedIdentityPropagationEnabled
            self.url = url
            self.userRole = userRole
            self.vpcId = vpcId
            self.workspaceSecurityGroupId = workspaceSecurityGroupId
        }
    }

}

public struct DescribeStudioOutput {
    /// The Amazon EMR Studio details.
    public var studio: EMRClientTypes.Studio?

    public init(
        studio: EMRClientTypes.Studio? = nil
    )
    {
        self.studio = studio
    }
}

extension EMRClientTypes {
    /// Configuration of requested EBS block device associated with the instance group.
    public struct EbsBlockDevice {
        /// The device name that is exposed to the instance, such as /dev/sdh.
        public var device: Swift.String?
        /// EBS volume specifications such as volume type, IOPS, size (GiB) and throughput (MiB/s) that are requested for the EBS volume attached to an Amazon EC2 instance in the cluster.
        public var volumeSpecification: EMRClientTypes.VolumeSpecification?

        public init(
            device: Swift.String? = nil,
            volumeSpecification: EMRClientTypes.VolumeSpecification? = nil
        )
        {
            self.device = device
            self.volumeSpecification = volumeSpecification
        }
    }

}

extension EMRClientTypes {
    /// EBS block device that's attached to an Amazon EC2 instance.
    public struct EbsVolume {
        /// The device name that is exposed to the instance, such as /dev/sdh.
        public var device: Swift.String?
        /// The volume identifier of the EBS volume.
        public var volumeId: Swift.String?

        public init(
            device: Swift.String? = nil,
            volumeId: Swift.String? = nil
        )
        {
            self.device = device
            self.volumeId = volumeId
        }
    }

}

public struct GetAutoTerminationPolicyInput {
    /// Specifies the ID of the Amazon EMR cluster for which the auto-termination policy will be fetched.
    /// This member is required.
    public var clusterId: Swift.String?

    public init(
        clusterId: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
    }
}

public struct GetAutoTerminationPolicyOutput {
    /// Specifies the auto-termination policy that is attached to an Amazon EMR cluster.
    public var autoTerminationPolicy: EMRClientTypes.AutoTerminationPolicy?

    public init(
        autoTerminationPolicy: EMRClientTypes.AutoTerminationPolicy? = nil
    )
    {
        self.autoTerminationPolicy = autoTerminationPolicy
    }
}

public struct GetBlockPublicAccessConfigurationInput {

    public init() { }
}

public struct GetClusterSessionCredentialsInput {
    /// The unique identifier of the cluster.
    /// This member is required.
    public var clusterId: Swift.String?
    /// The Amazon Resource Name (ARN) of the runtime role for interactive workload submission on the cluster. The runtime role can be a cross-account IAM role. The runtime role ARN is a combination of account ID, role name, and role type using the following format: arn:partition:service:region:account:resource.
    public var executionRoleArn: Swift.String?

    public init(
        clusterId: Swift.String? = nil,
        executionRoleArn: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
        self.executionRoleArn = executionRoleArn
    }
}

public struct GetClusterSessionCredentialsOutput {
    /// The credentials that you can use to connect to cluster endpoints that support username and password authentication.
    public var credentials: EMRClientTypes.Credentials?
    /// The time when the credentials that are returned by the GetClusterSessionCredentials API expire.
    public var expiresAt: Foundation.Date?

    public init(
        credentials: EMRClientTypes.Credentials? = nil,
        expiresAt: Foundation.Date? = nil
    )
    {
        self.credentials = credentials
        self.expiresAt = expiresAt
    }
}

public struct GetManagedScalingPolicyInput {
    /// Specifies the ID of the cluster for which the managed scaling policy will be fetched.
    /// This member is required.
    public var clusterId: Swift.String?

    public init(
        clusterId: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
    }
}

extension EMRClientTypes {
    /// Managed scaling policy for an Amazon EMR cluster. The policy specifies the limits for resources that can be added or terminated from a cluster. The policy only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
    public struct ManagedScalingPolicy {
        /// The Amazon EC2 unit limits for a managed scaling policy. The managed scaling activity of a cluster is not allowed to go above or below these limits. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
        public var computeLimits: EMRClientTypes.ComputeLimits?

        public init(
            computeLimits: EMRClientTypes.ComputeLimits? = nil
        )
        {
            self.computeLimits = computeLimits
        }
    }

}

public struct GetManagedScalingPolicyOutput {
    /// Specifies the managed scaling policy that is attached to an Amazon EMR cluster.
    public var managedScalingPolicy: EMRClientTypes.ManagedScalingPolicy?

    public init(
        managedScalingPolicy: EMRClientTypes.ManagedScalingPolicy? = nil
    )
    {
        self.managedScalingPolicy = managedScalingPolicy
    }
}

public struct GetStudioSessionMappingInput {
    /// The globally unique identifier (GUID) of the user or group. For more information, see [UserId](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId) and [GroupId](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId) in the IAM Identity Center Identity Store API Reference. Either IdentityName or IdentityId must be specified.
    public var identityId: Swift.String?
    /// The name of the user or group to fetch. For more information, see [UserName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName) and [DisplayName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName) in the IAM Identity Center Identity Store API Reference. Either IdentityName or IdentityId must be specified.
    public var identityName: Swift.String?
    /// Specifies whether the identity to fetch is a user or a group.
    /// This member is required.
    public var identityType: EMRClientTypes.IdentityType?
    /// The ID of the Amazon EMR Studio.
    /// This member is required.
    public var studioId: Swift.String?

    public init(
        identityId: Swift.String? = nil,
        identityName: Swift.String? = nil,
        identityType: EMRClientTypes.IdentityType? = nil,
        studioId: Swift.String? = nil
    )
    {
        self.identityId = identityId
        self.identityName = identityName
        self.identityType = identityType
        self.studioId = studioId
    }
}

extension EMRClientTypes {
    /// Details for an Amazon EMR Studio session mapping including creation time, user or group ID, Studio ID, and so on.
    public struct SessionMappingDetail {
        /// The time the session mapping was created.
        public var creationTime: Foundation.Date?
        /// The globally unique identifier (GUID) of the user or group.
        public var identityId: Swift.String?
        /// The name of the user or group. For more information, see [UserName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName) and [DisplayName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName) in the IAM Identity Center Identity Store API Reference.
        public var identityName: Swift.String?
        /// Specifies whether the identity mapped to the Amazon EMR Studio is a user or a group.
        public var identityType: EMRClientTypes.IdentityType?
        /// The time the session mapping was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the session policy associated with the user or group.
        public var sessionPolicyArn: Swift.String?
        /// The ID of the Amazon EMR Studio.
        public var studioId: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            identityId: Swift.String? = nil,
            identityName: Swift.String? = nil,
            identityType: EMRClientTypes.IdentityType? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            sessionPolicyArn: Swift.String? = nil,
            studioId: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.identityId = identityId
            self.identityName = identityName
            self.identityType = identityType
            self.lastModifiedTime = lastModifiedTime
            self.sessionPolicyArn = sessionPolicyArn
            self.studioId = studioId
        }
    }

}

public struct GetStudioSessionMappingOutput {
    /// The session mapping details for the specified Amazon EMR Studio and identity, including session policy ARN and creation time.
    public var sessionMapping: EMRClientTypes.SessionMappingDetail?

    public init(
        sessionMapping: EMRClientTypes.SessionMappingDetail? = nil
    )
    {
        self.sessionMapping = sessionMapping
    }
}

/// This input determines which bootstrap actions to retrieve.
public struct ListBootstrapActionsInput {
    /// The cluster identifier for the bootstrap actions to list.
    /// This member is required.
    public var clusterId: Swift.String?
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?

    public init(
        clusterId: Swift.String? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
        self.marker = marker
    }
}

/// This output contains the bootstrap actions detail.
public struct ListBootstrapActionsOutput {
    /// The bootstrap actions associated with the cluster.
    public var bootstrapActions: [EMRClientTypes.Command]?
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?

    public init(
        bootstrapActions: [EMRClientTypes.Command]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.bootstrapActions = bootstrapActions
        self.marker = marker
    }
}

/// This input determines how the ListClusters action filters the list of clusters that it returns.
public struct ListClustersInput {
    /// The cluster state filters to apply when listing clusters. Clusters that change state while this action runs may be not be returned as expected in the list of clusters.
    public var clusterStates: [EMRClientTypes.ClusterState]?
    /// The creation date and time beginning value filter for listing clusters.
    public var createdAfter: Foundation.Date?
    /// The creation date and time end value filter for listing clusters.
    public var createdBefore: Foundation.Date?
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?

    public init(
        clusterStates: [EMRClientTypes.ClusterState]? = nil,
        createdAfter: Foundation.Date? = nil,
        createdBefore: Foundation.Date? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusterStates = clusterStates
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.marker = marker
    }
}

/// This contains a ClusterSummaryList with the cluster details; for example, the cluster IDs, names, and status.
public struct ListClustersOutput {
    /// The list of clusters for the account based on the given filters.
    public var clusters: [EMRClientTypes.ClusterSummary]?
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?

    public init(
        clusters: [EMRClientTypes.ClusterSummary]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusters = clusters
        self.marker = marker
    }
}

public struct ListInstanceFleetsInput {
    /// The unique identifier of the cluster.
    /// This member is required.
    public var clusterId: Swift.String?
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?

    public init(
        clusterId: Swift.String? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
        self.marker = marker
    }
}

extension EMRClientTypes {

    public enum InstanceFleetState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bootstrapping
        case provisioning
        case resizing
        case running
        case suspended
        case terminated
        case terminating
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceFleetState] {
            return [
                .bootstrapping,
                .provisioning,
                .resizing,
                .running,
                .suspended,
                .terminated,
                .terminating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bootstrapping: return "BOOTSTRAPPING"
            case .provisioning: return "PROVISIONING"
            case .resizing: return "RESIZING"
            case .running: return "RUNNING"
            case .suspended: return "SUSPENDED"
            case .terminated: return "TERMINATED"
            case .terminating: return "TERMINATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {

    public enum InstanceFleetStateChangeReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case clusterTerminated
        case instanceFailure
        case internalError
        case validationError
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceFleetStateChangeReasonCode] {
            return [
                .clusterTerminated,
                .instanceFailure,
                .internalError,
                .validationError
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .clusterTerminated: return "CLUSTER_TERMINATED"
            case .instanceFailure: return "INSTANCE_FAILURE"
            case .internalError: return "INTERNAL_ERROR"
            case .validationError: return "VALIDATION_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// Provides status change reason details for the instance fleet. The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions.
    public struct InstanceFleetStateChangeReason {
        /// A code corresponding to the reason the state change occurred.
        public var code: EMRClientTypes.InstanceFleetStateChangeReasonCode?
        /// An explanatory message.
        public var message: Swift.String?

        public init(
            code: EMRClientTypes.InstanceFleetStateChangeReasonCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension EMRClientTypes {
    /// Provides historical timestamps for the instance fleet, including the time of creation, the time it became ready to run jobs, and the time of termination. The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions.
    public struct InstanceFleetTimeline {
        /// The time and date the instance fleet was created.
        public var creationDateTime: Foundation.Date?
        /// The time and date the instance fleet terminated.
        public var endDateTime: Foundation.Date?
        /// The time and date the instance fleet was ready to run jobs.
        public var readyDateTime: Foundation.Date?

        public init(
            creationDateTime: Foundation.Date? = nil,
            endDateTime: Foundation.Date? = nil,
            readyDateTime: Foundation.Date? = nil
        )
        {
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.readyDateTime = readyDateTime
        }
    }

}

extension EMRClientTypes {
    /// The status of the instance fleet. The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions.
    public struct InstanceFleetStatus {
        /// A code representing the instance fleet status.
        ///
        /// * PROVISIONING—The instance fleet is provisioning Amazon EC2 resources and is not yet ready to run jobs.
        ///
        /// * BOOTSTRAPPING—Amazon EC2 instances and other resources have been provisioned and the bootstrap actions specified for the instances are underway.
        ///
        /// * RUNNING—Amazon EC2 instances and other resources are running. They are either executing jobs or waiting to execute jobs.
        ///
        /// * RESIZING—A resize operation is underway. Amazon EC2 instances are either being added or removed.
        ///
        /// * SUSPENDED—A resize operation could not complete. Existing Amazon EC2 instances are running, but instances can't be added or removed.
        ///
        /// * TERMINATING—The instance fleet is terminating Amazon EC2 instances.
        ///
        /// * TERMINATED—The instance fleet is no longer active, and all Amazon EC2 instances have been terminated.
        public var state: EMRClientTypes.InstanceFleetState?
        /// Provides status change reason details for the instance fleet.
        public var stateChangeReason: EMRClientTypes.InstanceFleetStateChangeReason?
        /// Provides historical timestamps for the instance fleet, including the time of creation, the time it became ready to run jobs, and the time of termination.
        public var timeline: EMRClientTypes.InstanceFleetTimeline?

        public init(
            state: EMRClientTypes.InstanceFleetState? = nil,
            stateChangeReason: EMRClientTypes.InstanceFleetStateChangeReason? = nil,
            timeline: EMRClientTypes.InstanceFleetTimeline? = nil
        )
        {
            self.state = state
            self.stateChangeReason = stateChangeReason
            self.timeline = timeline
        }
    }

}

/// This input determines which instance groups to retrieve.
public struct ListInstanceGroupsInput {
    /// The identifier of the cluster for which to list the instance groups.
    /// This member is required.
    public var clusterId: Swift.String?
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?

    public init(
        clusterId: Swift.String? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
        self.marker = marker
    }
}

extension EMRClientTypes {

    public enum InstanceGroupType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case core
        case master
        case task
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceGroupType] {
            return [
                .core,
                .master,
                .task
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .core: return "CORE"
            case .master: return "MASTER"
            case .task: return "TASK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// Custom policy for requesting termination protection or termination of specific instances when shrinking an instance group.
    public struct InstanceResizePolicy {
        /// Decommissioning timeout override for the specific list of instances to be terminated.
        public var instanceTerminationTimeout: Swift.Int?
        /// Specific list of instances to be protected when shrinking an instance group.
        public var instancesToProtect: [Swift.String]?
        /// Specific list of instances to be terminated when shrinking an instance group.
        public var instancesToTerminate: [Swift.String]?

        public init(
            instanceTerminationTimeout: Swift.Int? = nil,
            instancesToProtect: [Swift.String]? = nil,
            instancesToTerminate: [Swift.String]? = nil
        )
        {
            self.instanceTerminationTimeout = instanceTerminationTimeout
            self.instancesToProtect = instancesToProtect
            self.instancesToTerminate = instancesToTerminate
        }
    }

}

extension EMRClientTypes {
    /// Policy for customizing shrink operations. Allows configuration of decommissioning timeout and targeted instance shrinking.
    public struct ShrinkPolicy {
        /// The desired timeout for decommissioning an instance. Overrides the default YARN decommissioning timeout.
        public var decommissionTimeout: Swift.Int?
        /// Custom policy for requesting termination protection or termination of specific instances when shrinking an instance group.
        public var instanceResizePolicy: EMRClientTypes.InstanceResizePolicy?

        public init(
            decommissionTimeout: Swift.Int? = nil,
            instanceResizePolicy: EMRClientTypes.InstanceResizePolicy? = nil
        )
        {
            self.decommissionTimeout = decommissionTimeout
            self.instanceResizePolicy = instanceResizePolicy
        }
    }

}

extension EMRClientTypes {

    public enum InstanceGroupStateChangeReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case clusterTerminated
        case instanceFailure
        case internalError
        case validationError
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceGroupStateChangeReasonCode] {
            return [
                .clusterTerminated,
                .instanceFailure,
                .internalError,
                .validationError
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .clusterTerminated: return "CLUSTER_TERMINATED"
            case .instanceFailure: return "INSTANCE_FAILURE"
            case .internalError: return "INTERNAL_ERROR"
            case .validationError: return "VALIDATION_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// The status change reason details for the instance group.
    public struct InstanceGroupStateChangeReason {
        /// The programmable code for the state change reason.
        public var code: EMRClientTypes.InstanceGroupStateChangeReasonCode?
        /// The status change reason description.
        public var message: Swift.String?

        public init(
            code: EMRClientTypes.InstanceGroupStateChangeReasonCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension EMRClientTypes {
    /// The timeline of the instance group lifecycle.
    public struct InstanceGroupTimeline {
        /// The creation date and time of the instance group.
        public var creationDateTime: Foundation.Date?
        /// The date and time when the instance group terminated.
        public var endDateTime: Foundation.Date?
        /// The date and time when the instance group became ready to perform tasks.
        public var readyDateTime: Foundation.Date?

        public init(
            creationDateTime: Foundation.Date? = nil,
            endDateTime: Foundation.Date? = nil,
            readyDateTime: Foundation.Date? = nil
        )
        {
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.readyDateTime = readyDateTime
        }
    }

}

extension EMRClientTypes {
    /// The details of the instance group status.
    public struct InstanceGroupStatus {
        /// The current state of the instance group.
        public var state: EMRClientTypes.InstanceGroupState?
        /// The status change reason details for the instance group.
        public var stateChangeReason: EMRClientTypes.InstanceGroupStateChangeReason?
        /// The timeline of the instance group status over time.
        public var timeline: EMRClientTypes.InstanceGroupTimeline?

        public init(
            state: EMRClientTypes.InstanceGroupState? = nil,
            stateChangeReason: EMRClientTypes.InstanceGroupStateChangeReason? = nil,
            timeline: EMRClientTypes.InstanceGroupTimeline? = nil
        )
        {
            self.state = state
            self.stateChangeReason = stateChangeReason
            self.timeline = timeline
        }
    }

}

extension EMRClientTypes {

    public enum InstanceState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awaitingFulfillment
        case bootstrapping
        case provisioning
        case running
        case terminated
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceState] {
            return [
                .awaitingFulfillment,
                .bootstrapping,
                .provisioning,
                .running,
                .terminated
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awaitingFulfillment: return "AWAITING_FULFILLMENT"
            case .bootstrapping: return "BOOTSTRAPPING"
            case .provisioning: return "PROVISIONING"
            case .running: return "RUNNING"
            case .terminated: return "TERMINATED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// This input determines which instances to list.
public struct ListInstancesInput {
    /// The identifier of the cluster for which to list the instances.
    /// This member is required.
    public var clusterId: Swift.String?
    /// The unique identifier of the instance fleet.
    public var instanceFleetId: Swift.String?
    /// The node type of the instance fleet. For example MASTER, CORE, or TASK.
    public var instanceFleetType: EMRClientTypes.InstanceFleetType?
    /// The identifier of the instance group for which to list the instances.
    public var instanceGroupId: Swift.String?
    /// The type of instance group for which to list the instances.
    public var instanceGroupTypes: [EMRClientTypes.InstanceGroupType]?
    /// A list of instance states that will filter the instances returned with this request.
    public var instanceStates: [EMRClientTypes.InstanceState]?
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?

    public init(
        clusterId: Swift.String? = nil,
        instanceFleetId: Swift.String? = nil,
        instanceFleetType: EMRClientTypes.InstanceFleetType? = nil,
        instanceGroupId: Swift.String? = nil,
        instanceGroupTypes: [EMRClientTypes.InstanceGroupType]? = nil,
        instanceStates: [EMRClientTypes.InstanceState]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
        self.instanceFleetId = instanceFleetId
        self.instanceFleetType = instanceFleetType
        self.instanceGroupId = instanceGroupId
        self.instanceGroupTypes = instanceGroupTypes
        self.instanceStates = instanceStates
        self.marker = marker
    }
}

extension EMRClientTypes {

    public enum InstanceStateChangeReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bootstrapFailure
        case clusterTerminated
        case instanceFailure
        case internalError
        case validationError
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceStateChangeReasonCode] {
            return [
                .bootstrapFailure,
                .clusterTerminated,
                .instanceFailure,
                .internalError,
                .validationError
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bootstrapFailure: return "BOOTSTRAP_FAILURE"
            case .clusterTerminated: return "CLUSTER_TERMINATED"
            case .instanceFailure: return "INSTANCE_FAILURE"
            case .internalError: return "INTERNAL_ERROR"
            case .validationError: return "VALIDATION_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EMRClientTypes {
    /// The details of the status change reason for the instance.
    public struct InstanceStateChangeReason {
        /// The programmable code for the state change reason.
        public var code: EMRClientTypes.InstanceStateChangeReasonCode?
        /// The status change reason description.
        public var message: Swift.String?

        public init(
            code: EMRClientTypes.InstanceStateChangeReasonCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension EMRClientTypes {
    /// The timeline of the instance lifecycle.
    public struct InstanceTimeline {
        /// The creation date and time of the instance.
        public var creationDateTime: Foundation.Date?
        /// The date and time when the instance was terminated.
        public var endDateTime: Foundation.Date?
        /// The date and time when the instance was ready to perform tasks.
        public var readyDateTime: Foundation.Date?

        public init(
            creationDateTime: Foundation.Date? = nil,
            endDateTime: Foundation.Date? = nil,
            readyDateTime: Foundation.Date? = nil
        )
        {
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.readyDateTime = readyDateTime
        }
    }

}

extension EMRClientTypes {
    /// The instance status details.
    public struct InstanceStatus {
        /// The current state of the instance.
        public var state: EMRClientTypes.InstanceState?
        /// The details of the status change reason for the instance.
        public var stateChangeReason: EMRClientTypes.InstanceStateChangeReason?
        /// The timeline of the instance status over time.
        public var timeline: EMRClientTypes.InstanceTimeline?

        public init(
            state: EMRClientTypes.InstanceState? = nil,
            stateChangeReason: EMRClientTypes.InstanceStateChangeReason? = nil,
            timeline: EMRClientTypes.InstanceTimeline? = nil
        )
        {
            self.state = state
            self.stateChangeReason = stateChangeReason
            self.timeline = timeline
        }
    }

}

extension EMRClientTypes {
    /// Represents an Amazon EC2 instance provisioned as part of cluster.
    public struct Instance {
        /// The list of Amazon EBS volumes that are attached to this instance.
        public var ebsVolumes: [EMRClientTypes.EbsVolume]?
        /// The unique identifier of the instance in Amazon EC2.
        public var ec2InstanceId: Swift.String?
        /// The unique identifier for the instance in Amazon EMR.
        public var id: Swift.String?
        /// The unique identifier of the instance fleet to which an Amazon EC2 instance belongs.
        public var instanceFleetId: Swift.String?
        /// The identifier of the instance group to which this instance belongs.
        public var instanceGroupId: Swift.String?
        /// The Amazon EC2 instance type, for example m3.xlarge.
        public var instanceType: Swift.String?
        /// The instance purchasing option. Valid values are ON_DEMAND or SPOT.
        public var market: EMRClientTypes.MarketType?
        /// The private DNS name of the instance.
        public var privateDnsName: Swift.String?
        /// The private IP address of the instance.
        public var privateIpAddress: Swift.String?
        /// The public DNS name of the instance.
        public var publicDnsName: Swift.String?
        /// The public IP address of the instance.
        public var publicIpAddress: Swift.String?
        /// The current status of the instance.
        public var status: EMRClientTypes.InstanceStatus?

        public init(
            ebsVolumes: [EMRClientTypes.EbsVolume]? = nil,
            ec2InstanceId: Swift.String? = nil,
            id: Swift.String? = nil,
            instanceFleetId: Swift.String? = nil,
            instanceGroupId: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            market: EMRClientTypes.MarketType? = nil,
            privateDnsName: Swift.String? = nil,
            privateIpAddress: Swift.String? = nil,
            publicDnsName: Swift.String? = nil,
            publicIpAddress: Swift.String? = nil,
            status: EMRClientTypes.InstanceStatus? = nil
        )
        {
            self.ebsVolumes = ebsVolumes
            self.ec2InstanceId = ec2InstanceId
            self.id = id
            self.instanceFleetId = instanceFleetId
            self.instanceGroupId = instanceGroupId
            self.instanceType = instanceType
            self.market = market
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
            self.publicDnsName = publicDnsName
            self.publicIpAddress = publicIpAddress
            self.status = status
        }
    }

}

/// This output contains the list of instances.
public struct ListInstancesOutput {
    /// The list of instances for the cluster and given filters.
    public var instances: [EMRClientTypes.Instance]?
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?

    public init(
        instances: [EMRClientTypes.Instance]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.instances = instances
        self.marker = marker
    }
}

public struct ListNotebookExecutionsInput {
    /// The unique ID of the editor associated with the notebook execution.
    public var editorId: Swift.String?
    /// The unique ID of the execution engine.
    public var executionEngineId: Swift.String?
    /// The beginning of time range filter for listing notebook executions. The default is the timestamp of 30 days ago.
    public var from: Foundation.Date?
    /// The pagination token, returned by a previous ListNotebookExecutions call, that indicates the start of the list for this ListNotebookExecutions call.
    public var marker: Swift.String?
    /// The status filter for listing notebook executions.
    ///
    /// * START_PENDING indicates that the cluster has received the execution request but execution has not begun.
    ///
    /// * STARTING indicates that the execution is starting on the cluster.
    ///
    /// * RUNNING indicates that the execution is being processed by the cluster.
    ///
    /// * FINISHING indicates that execution processing is in the final stages.
    ///
    /// * FINISHED indicates that the execution has completed without error.
    ///
    /// * FAILING indicates that the execution is failing and will not finish successfully.
    ///
    /// * FAILED indicates that the execution failed.
    ///
    /// * STOP_PENDING indicates that the cluster has received a StopNotebookExecution request and the stop is pending.
    ///
    /// * STOPPING indicates that the cluster is in the process of stopping the execution as a result of a StopNotebookExecution request.
    ///
    /// * STOPPED indicates that the execution stopped because of a StopNotebookExecution request.
    public var status: EMRClientTypes.NotebookExecutionStatus?
    /// The end of time range filter for listing notebook executions. The default is the current timestamp.
    public var to: Foundation.Date?

    public init(
        editorId: Swift.String? = nil,
        executionEngineId: Swift.String? = nil,
        from: Foundation.Date? = nil,
        marker: Swift.String? = nil,
        status: EMRClientTypes.NotebookExecutionStatus? = nil,
        to: Foundation.Date? = nil
    )
    {
        self.editorId = editorId
        self.executionEngineId = executionEngineId
        self.from = from
        self.marker = marker
        self.status = status
        self.to = to
    }
}

extension EMRClientTypes {
    /// Details for a notebook execution. The details include information such as the unique ID and status of the notebook execution.
    public struct NotebookExecutionSummary {
        /// The unique identifier of the editor associated with the notebook execution.
        public var editorId: Swift.String?
        /// The timestamp when notebook execution started.
        public var endTime: Foundation.Date?
        /// The unique ID of the execution engine for the notebook execution.
        public var executionEngineId: Swift.String?
        /// The unique identifier of the notebook execution.
        public var notebookExecutionId: Swift.String?
        /// The name of the notebook execution.
        public var notebookExecutionName: Swift.String?
        /// The Amazon S3 location that stores the notebook execution input.
        public var notebookS3Location: EMRClientTypes.NotebookS3LocationForOutput?
        /// The timestamp when notebook execution started.
        public var startTime: Foundation.Date?
        /// The status of the notebook execution.
        ///
        /// * START_PENDING indicates that the cluster has received the execution request but execution has not begun.
        ///
        /// * STARTING indicates that the execution is starting on the cluster.
        ///
        /// * RUNNING indicates that the execution is being processed by the cluster.
        ///
        /// * FINISHING indicates that execution processing is in the final stages.
        ///
        /// * FINISHED indicates that the execution has completed without error.
        ///
        /// * FAILING indicates that the execution is failing and will not finish successfully.
        ///
        /// * FAILED indicates that the execution failed.
        ///
        /// * STOP_PENDING indicates that the cluster has received a StopNotebookExecution request and the stop is pending.
        ///
        /// * STOPPING indicates that the cluster is in the process of stopping the execution as a result of a StopNotebookExecution request.
        ///
        /// * STOPPED indicates that the execution stopped because of a StopNotebookExecution request.
        public var status: EMRClientTypes.NotebookExecutionStatus?

        public init(
            editorId: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            executionEngineId: Swift.String? = nil,
            notebookExecutionId: Swift.String? = nil,
            notebookExecutionName: Swift.String? = nil,
            notebookS3Location: EMRClientTypes.NotebookS3LocationForOutput? = nil,
            startTime: Foundation.Date? = nil,
            status: EMRClientTypes.NotebookExecutionStatus? = nil
        )
        {
            self.editorId = editorId
            self.endTime = endTime
            self.executionEngineId = executionEngineId
            self.notebookExecutionId = notebookExecutionId
            self.notebookExecutionName = notebookExecutionName
            self.notebookS3Location = notebookS3Location
            self.startTime = startTime
            self.status = status
        }
    }

}

public struct ListNotebookExecutionsOutput {
    /// A pagination token that a subsequent ListNotebookExecutions can use to determine the next set of results to retrieve.
    public var marker: Swift.String?
    /// A list of notebook executions.
    public var notebookExecutions: [EMRClientTypes.NotebookExecutionSummary]?

    public init(
        marker: Swift.String? = nil,
        notebookExecutions: [EMRClientTypes.NotebookExecutionSummary]? = nil
    )
    {
        self.marker = marker
        self.notebookExecutions = notebookExecutions
    }
}

extension EMRClientTypes {
    /// The release label filters by application or version prefix.
    public struct ReleaseLabelFilter {
        /// Optional release label application filter. For example, spark@2.1.0.
        public var application: Swift.String?
        /// Optional release label version prefix filter. For example, emr-5.
        public var `prefix`: Swift.String?

        public init(
            application: Swift.String? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.application = application
            self.`prefix` = `prefix`
        }
    }

}

public struct ListReleaseLabelsInput {
    /// Filters the results of the request. Prefix specifies the prefix of release labels to return. Application specifies the application (with/without version) of release labels to return.
    public var filters: EMRClientTypes.ReleaseLabelFilter?
    /// Defines the maximum number of release labels to return in a single response. The default is 100.
    public var maxResults: Swift.Int?
    /// Specifies the next page of results. If NextToken is not specified, which is usually the case for the first request of ListReleaseLabels, the first page of results are determined by other filtering parameters or by the latest version. The ListReleaseLabels request fails if the identity (Amazon Web Services account ID) and all filtering parameters are different from the original request, or if the NextToken is expired or tampered with.
    public var nextToken: Swift.String?

    public init(
        filters: EMRClientTypes.ReleaseLabelFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListReleaseLabelsOutput {
    /// Used to paginate the next page of results if specified in the next ListReleaseLabels request.
    public var nextToken: Swift.String?
    /// The returned release labels.
    public var releaseLabels: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        releaseLabels: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.releaseLabels = releaseLabels
    }
}

public struct ListSecurityConfigurationsInput {
    /// The pagination token that indicates the set of results to retrieve.
    public var marker: Swift.String?

    public init(
        marker: Swift.String? = nil
    )
    {
        self.marker = marker
    }
}

extension EMRClientTypes {
    /// The creation date and time, and name, of a security configuration.
    public struct SecurityConfigurationSummary {
        /// The date and time the security configuration was created.
        public var creationDateTime: Foundation.Date?
        /// The name of the security configuration.
        public var name: Swift.String?

        public init(
            creationDateTime: Foundation.Date? = nil,
            name: Swift.String? = nil
        )
        {
            self.creationDateTime = creationDateTime
            self.name = name
        }
    }

}

public struct ListSecurityConfigurationsOutput {
    /// A pagination token that indicates the next set of results to retrieve. Include the marker in the next ListSecurityConfiguration call to retrieve the next page of results, if required.
    public var marker: Swift.String?
    /// The creation date and time, and name, of each security configuration.
    public var securityConfigurations: [EMRClientTypes.SecurityConfigurationSummary]?

    public init(
        marker: Swift.String? = nil,
        securityConfigurations: [EMRClientTypes.SecurityConfigurationSummary]? = nil
    )
    {
        self.marker = marker
        self.securityConfigurations = securityConfigurations
    }
}

/// This input determines which steps to list.
public struct ListStepsInput {
    /// The identifier of the cluster for which to list the steps.
    /// This member is required.
    public var clusterId: Swift.String?
    /// The maximum number of steps that a single ListSteps action returns is 50. To return a longer list of steps, use multiple ListSteps actions along with the Marker parameter, which is a pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?
    /// The filter to limit the step list based on the identifier of the steps. You can specify a maximum of ten Step IDs. The character constraint applies to the overall length of the array.
    public var stepIds: [Swift.String]?
    /// The filter to limit the step list based on certain states.
    public var stepStates: [EMRClientTypes.StepState]?

    public init(
        clusterId: Swift.String? = nil,
        marker: Swift.String? = nil,
        stepIds: [Swift.String]? = nil,
        stepStates: [EMRClientTypes.StepState]? = nil
    )
    {
        self.clusterId = clusterId
        self.marker = marker
        self.stepIds = stepIds
        self.stepStates = stepStates
    }
}

extension EMRClientTypes {
    /// The summary of the cluster step.
    public struct StepSummary {
        /// The action to take when the cluster step fails. Possible values are TERMINATE_CLUSTER, CANCEL_AND_WAIT, and CONTINUE. TERMINATE_JOB_FLOW is available for backward compatibility.
        public var actionOnFailure: EMRClientTypes.ActionOnFailure?
        /// The Hadoop job configuration of the cluster step.
        public var config: EMRClientTypes.HadoopStepConfig?
        /// The identifier of the cluster step.
        public var id: Swift.String?
        /// The name of the cluster step.
        public var name: Swift.String?
        /// The current execution status details of the cluster step.
        public var status: EMRClientTypes.StepStatus?

        public init(
            actionOnFailure: EMRClientTypes.ActionOnFailure? = nil,
            config: EMRClientTypes.HadoopStepConfig? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            status: EMRClientTypes.StepStatus? = nil
        )
        {
            self.actionOnFailure = actionOnFailure
            self.config = config
            self.id = id
            self.name = name
            self.status = status
        }
    }

}

/// This output contains the list of steps returned in reverse order. This means that the last step is the first element in the list.
public struct ListStepsOutput {
    /// The maximum number of steps that a single ListSteps action returns is 50. To return a longer list of steps, use multiple ListSteps actions along with the Marker parameter, which is a pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?
    /// The filtered list of steps for the cluster.
    public var steps: [EMRClientTypes.StepSummary]?

    public init(
        marker: Swift.String? = nil,
        steps: [EMRClientTypes.StepSummary]? = nil
    )
    {
        self.marker = marker
        self.steps = steps
    }
}

public struct ListStudiosInput {
    /// The pagination token that indicates the set of results to retrieve.
    public var marker: Swift.String?

    public init(
        marker: Swift.String? = nil
    )
    {
        self.marker = marker
    }
}

extension EMRClientTypes {
    /// Details for an Amazon EMR Studio, including ID, Name, VPC, and Description. To fetch additional details such as subnets, IAM roles, security groups, and tags for the Studio, use the [DescribeStudio] API.
    public struct StudioSummary {
        /// Specifies whether the Studio authenticates users using IAM or IAM Identity Center.
        public var authMode: EMRClientTypes.AuthMode?
        /// The time when the Amazon EMR Studio was created.
        public var creationTime: Foundation.Date?
        /// The detailed description of the Amazon EMR Studio.
        public var description: Swift.String?
        /// The name of the Amazon EMR Studio.
        public var name: Swift.String?
        /// The ID of the Amazon EMR Studio.
        public var studioId: Swift.String?
        /// The unique access URL of the Amazon EMR Studio.
        public var url: Swift.String?
        /// The ID of the Virtual Private Cloud (Amazon VPC) associated with the Amazon EMR Studio.
        public var vpcId: Swift.String?

        public init(
            authMode: EMRClientTypes.AuthMode? = nil,
            creationTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            studioId: Swift.String? = nil,
            url: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.authMode = authMode
            self.creationTime = creationTime
            self.description = description
            self.name = name
            self.studioId = studioId
            self.url = url
            self.vpcId = vpcId
        }
    }

}

public struct ListStudiosOutput {
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?
    /// The list of Studio summary objects.
    public var studios: [EMRClientTypes.StudioSummary]?

    public init(
        marker: Swift.String? = nil,
        studios: [EMRClientTypes.StudioSummary]? = nil
    )
    {
        self.marker = marker
        self.studios = studios
    }
}

public struct ListStudioSessionMappingsInput {
    /// Specifies whether to return session mappings for users or groups. If not specified, the results include session mapping details for both users and groups.
    public var identityType: EMRClientTypes.IdentityType?
    /// The pagination token that indicates the set of results to retrieve.
    public var marker: Swift.String?
    /// The ID of the Amazon EMR Studio.
    public var studioId: Swift.String?

    public init(
        identityType: EMRClientTypes.IdentityType? = nil,
        marker: Swift.String? = nil,
        studioId: Swift.String? = nil
    )
    {
        self.identityType = identityType
        self.marker = marker
        self.studioId = studioId
    }
}

extension EMRClientTypes {
    /// Details for an Amazon EMR Studio session mapping. The details do not include the time the session mapping was last modified.
    public struct SessionMappingSummary {
        /// The time the session mapping was created.
        public var creationTime: Foundation.Date?
        /// The globally unique identifier (GUID) of the user or group from the IAM Identity Center Identity Store.
        public var identityId: Swift.String?
        /// The name of the user or group. For more information, see [UserName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName) and [DisplayName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName) in the IAM Identity Center Identity Store API Reference.
        public var identityName: Swift.String?
        /// Specifies whether the identity mapped to the Amazon EMR Studio is a user or a group.
        public var identityType: EMRClientTypes.IdentityType?
        /// The Amazon Resource Name (ARN) of the session policy associated with the user or group.
        public var sessionPolicyArn: Swift.String?
        /// The ID of the Amazon EMR Studio.
        public var studioId: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            identityId: Swift.String? = nil,
            identityName: Swift.String? = nil,
            identityType: EMRClientTypes.IdentityType? = nil,
            sessionPolicyArn: Swift.String? = nil,
            studioId: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.identityId = identityId
            self.identityName = identityName
            self.identityType = identityType
            self.sessionPolicyArn = sessionPolicyArn
            self.studioId = studioId
        }
    }

}

public struct ListStudioSessionMappingsOutput {
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?
    /// A list of session mapping summary objects. Each object includes session mapping details such as creation time, identity type (user or group), and Amazon EMR Studio ID.
    public var sessionMappings: [EMRClientTypes.SessionMappingSummary]?

    public init(
        marker: Swift.String? = nil,
        sessionMappings: [EMRClientTypes.SessionMappingSummary]? = nil
    )
    {
        self.marker = marker
        self.sessionMappings = sessionMappings
    }
}

public struct ListSupportedInstanceTypesInput {
    /// The pagination token that marks the next set of results to retrieve.
    public var marker: Swift.String?
    /// The Amazon EMR release label determines the [versions of open-source application packages](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-release-app-versions-6.x.html) that Amazon EMR has installed on the cluster. Release labels are in the format emr-x.x.x, where x.x.x is an Amazon EMR release number such as emr-6.10.0. For more information about Amazon EMR releases and their included application versions and features, see the [Amazon EMR Release Guide](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-release-components.html) .
    /// This member is required.
    public var releaseLabel: Swift.String?

    public init(
        marker: Swift.String? = nil,
        releaseLabel: Swift.String? = nil
    )
    {
        self.marker = marker
        self.releaseLabel = releaseLabel
    }
}

extension EMRClientTypes {
    /// An instance type that the specified Amazon EMR release supports.
    public struct SupportedInstanceType {
        /// The CPU architecture, for example X86_64 or AARCH64.
        public var architecture: Swift.String?
        /// Indicates whether the SupportedInstanceType supports Amazon EBS optimization.
        public var ebsOptimizedAvailable: Swift.Bool?
        /// Indicates whether the SupportedInstanceType uses Amazon EBS optimization by default.
        public var ebsOptimizedByDefault: Swift.Bool?
        /// Indicates whether the SupportedInstanceType only supports Amazon EBS.
        public var ebsStorageOnly: Swift.Bool?
        /// The Amazon EC2 family and generation for the SupportedInstanceType.
        public var instanceFamilyId: Swift.String?
        /// Indicates whether the SupportedInstanceType only supports 64-bit architecture.
        public var is64BitsOnly: Swift.Bool?
        /// The amount of memory that is available to Amazon EMR from the SupportedInstanceType. The kernel and hypervisor software consume some memory, so this value might be lower than the overall memory for the instance type.
        public var memoryGB: Swift.Float?
        /// Number of disks for the SupportedInstanceType. This value is 0 for Amazon EBS-only instance types.
        public var numberOfDisks: Swift.Int?
        /// StorageGB represents the storage capacity of the SupportedInstanceType. This value is 0 for Amazon EBS-only instance types.
        public var storageGB: Swift.Int?
        /// The [Amazon EC2 instance type](http://aws.amazon.com/ec2/instance-types/), for example m5.xlarge, of the SupportedInstanceType.
        public var type: Swift.String?
        /// The number of vCPUs available for the SupportedInstanceType.
        public var vcpu: Swift.Int?

        public init(
            architecture: Swift.String? = nil,
            ebsOptimizedAvailable: Swift.Bool? = nil,
            ebsOptimizedByDefault: Swift.Bool? = nil,
            ebsStorageOnly: Swift.Bool? = nil,
            instanceFamilyId: Swift.String? = nil,
            is64BitsOnly: Swift.Bool? = nil,
            memoryGB: Swift.Float? = nil,
            numberOfDisks: Swift.Int? = nil,
            storageGB: Swift.Int? = nil,
            type: Swift.String? = nil,
            vcpu: Swift.Int? = nil
        )
        {
            self.architecture = architecture
            self.ebsOptimizedAvailable = ebsOptimizedAvailable
            self.ebsOptimizedByDefault = ebsOptimizedByDefault
            self.ebsStorageOnly = ebsStorageOnly
            self.instanceFamilyId = instanceFamilyId
            self.is64BitsOnly = is64BitsOnly
            self.memoryGB = memoryGB
            self.numberOfDisks = numberOfDisks
            self.storageGB = storageGB
            self.type = type
            self.vcpu = vcpu
        }
    }

}

public struct ListSupportedInstanceTypesOutput {
    /// The pagination token that marks the next set of results to retrieve.
    public var marker: Swift.String?
    /// The list of instance types that the release specified in ListSupportedInstanceTypesInput$ReleaseLabel supports, filtered by Amazon Web Services Region.
    public var supportedInstanceTypes: [EMRClientTypes.SupportedInstanceType]?

    public init(
        marker: Swift.String? = nil,
        supportedInstanceTypes: [EMRClientTypes.SupportedInstanceType]? = nil
    )
    {
        self.marker = marker
        self.supportedInstanceTypes = supportedInstanceTypes
    }
}

public struct ModifyClusterInput {
    /// The unique identifier of the cluster.
    /// This member is required.
    public var clusterId: Swift.String?
    /// The number of steps that can be executed concurrently. You can specify a minimum of 1 step and a maximum of 256 steps. We recommend that you do not change this parameter while steps are running or the ActionOnFailure setting may not behave as expected. For more information see [Step$ActionOnFailure].
    public var stepConcurrencyLevel: Swift.Int?

    public init(
        clusterId: Swift.String? = nil,
        stepConcurrencyLevel: Swift.Int? = nil
    )
    {
        self.clusterId = clusterId
        self.stepConcurrencyLevel = stepConcurrencyLevel
    }
}

public struct ModifyClusterOutput {
    /// The number of steps that can be executed concurrently.
    public var stepConcurrencyLevel: Swift.Int?

    public init(
        stepConcurrencyLevel: Swift.Int? = nil
    )
    {
        self.stepConcurrencyLevel = stepConcurrencyLevel
    }
}

extension EMRClientTypes {

    public enum ReconfigurationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case merge
        case overwrite
        case sdkUnknown(Swift.String)

        public static var allCases: [ReconfigurationType] {
            return [
                .merge,
                .overwrite
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .merge: return "MERGE"
            case .overwrite: return "OVERWRITE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct PutAutoScalingPolicyInput {
    /// Specifies the definition of the automatic scaling policy.
    /// This member is required.
    public var autoScalingPolicy: EMRClientTypes.AutoScalingPolicy?
    /// Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
    /// This member is required.
    public var clusterId: Swift.String?
    /// Specifies the ID of the instance group to which the automatic scaling policy is applied.
    /// This member is required.
    public var instanceGroupId: Swift.String?

    public init(
        autoScalingPolicy: EMRClientTypes.AutoScalingPolicy? = nil,
        clusterId: Swift.String? = nil,
        instanceGroupId: Swift.String? = nil
    )
    {
        self.autoScalingPolicy = autoScalingPolicy
        self.clusterId = clusterId
        self.instanceGroupId = instanceGroupId
    }
}

public struct PutAutoScalingPolicyOutput {
    /// The automatic scaling policy definition.
    public var autoScalingPolicy: EMRClientTypes.AutoScalingPolicyDescription?
    /// The Amazon Resource Name (ARN) of the cluster.
    public var clusterArn: Swift.String?
    /// Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
    public var clusterId: Swift.String?
    /// Specifies the ID of the instance group to which the scaling policy is applied.
    public var instanceGroupId: Swift.String?

    public init(
        autoScalingPolicy: EMRClientTypes.AutoScalingPolicyDescription? = nil,
        clusterArn: Swift.String? = nil,
        clusterId: Swift.String? = nil,
        instanceGroupId: Swift.String? = nil
    )
    {
        self.autoScalingPolicy = autoScalingPolicy
        self.clusterArn = clusterArn
        self.clusterId = clusterId
        self.instanceGroupId = instanceGroupId
    }
}

public struct PutAutoTerminationPolicyInput {
    /// Specifies the auto-termination policy to attach to the cluster.
    public var autoTerminationPolicy: EMRClientTypes.AutoTerminationPolicy?
    /// Specifies the ID of the Amazon EMR cluster to which the auto-termination policy will be attached.
    /// This member is required.
    public var clusterId: Swift.String?

    public init(
        autoTerminationPolicy: EMRClientTypes.AutoTerminationPolicy? = nil,
        clusterId: Swift.String? = nil
    )
    {
        self.autoTerminationPolicy = autoTerminationPolicy
        self.clusterId = clusterId
    }
}

public struct PutAutoTerminationPolicyOutput {

    public init() { }
}

public struct PutBlockPublicAccessConfigurationOutput {

    public init() { }
}

public struct PutManagedScalingPolicyInput {
    /// Specifies the ID of an Amazon EMR cluster where the managed scaling policy is attached.
    /// This member is required.
    public var clusterId: Swift.String?
    /// Specifies the constraints for the managed scaling policy.
    /// This member is required.
    public var managedScalingPolicy: EMRClientTypes.ManagedScalingPolicy?

    public init(
        clusterId: Swift.String? = nil,
        managedScalingPolicy: EMRClientTypes.ManagedScalingPolicy? = nil
    )
    {
        self.clusterId = clusterId
        self.managedScalingPolicy = managedScalingPolicy
    }
}

public struct PutManagedScalingPolicyOutput {

    public init() { }
}

public struct RemoveAutoScalingPolicyInput {
    /// Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
    /// This member is required.
    public var clusterId: Swift.String?
    /// Specifies the ID of the instance group to which the scaling policy is applied.
    /// This member is required.
    public var instanceGroupId: Swift.String?

    public init(
        clusterId: Swift.String? = nil,
        instanceGroupId: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
        self.instanceGroupId = instanceGroupId
    }
}

public struct RemoveAutoScalingPolicyOutput {

    public init() { }
}

public struct RemoveAutoTerminationPolicyInput {
    /// Specifies the ID of the Amazon EMR cluster from which the auto-termination policy will be removed.
    /// This member is required.
    public var clusterId: Swift.String?

    public init(
        clusterId: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
    }
}

public struct RemoveAutoTerminationPolicyOutput {

    public init() { }
}

public struct RemoveManagedScalingPolicyInput {
    /// Specifies the ID of the cluster from which the managed scaling policy will be removed.
    /// This member is required.
    public var clusterId: Swift.String?

    public init(
        clusterId: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
    }
}

public struct RemoveManagedScalingPolicyOutput {

    public init() { }
}

/// This input identifies an Amazon EMR resource and a list of tags to remove.
public struct RemoveTagsInput {
    /// The Amazon EMR resource identifier from which tags will be removed. For example, a cluster identifier or an Amazon EMR Studio ID.
    /// This member is required.
    public var resourceId: Swift.String?
    /// A list of tag keys to remove from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceId: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceId = resourceId
        self.tagKeys = tagKeys
    }
}

/// This output indicates the result of removing tags from the resource.
public struct RemoveTagsOutput {

    public init() { }
}

extension EMRClientTypes {
    /// The list of supported product configurations that allow user-supplied arguments. Amazon EMR accepts these arguments and forwards them to the corresponding installation script as bootstrap action arguments.
    public struct SupportedProductConfig {
        /// The list of user-supplied arguments.
        public var args: [Swift.String]?
        /// The name of the product configuration.
        public var name: Swift.String?

        public init(
            args: [Swift.String]? = nil,
            name: Swift.String? = nil
        )
        {
            self.args = args
            self.name = name
        }
    }

}

/// The result of the [RunJobFlow] operation.
public struct RunJobFlowOutput {
    /// The Amazon Resource Name (ARN) of the cluster.
    public var clusterArn: Swift.String?
    /// A unique identifier for the job flow.
    public var jobFlowId: Swift.String?

    public init(
        clusterArn: Swift.String? = nil,
        jobFlowId: Swift.String? = nil
    )
    {
        self.clusterArn = clusterArn
        self.jobFlowId = jobFlowId
    }
}

public struct SetKeepJobFlowAliveWhenNoStepsInput {
    /// A list of strings that uniquely identify the clusters to protect. This identifier is returned by [RunJobFlow](https://docs.aws.amazon.com/emr/latest/APIReference/API_RunJobFlow.html) and can also be obtained from [DescribeJobFlows](https://docs.aws.amazon.com/emr/latest/APIReference/API_DescribeJobFlows.html).
    /// This member is required.
    public var jobFlowIds: [Swift.String]?
    /// A Boolean that indicates whether to terminate the cluster after all steps are executed.
    /// This member is required.
    public var keepJobFlowAliveWhenNoSteps: Swift.Bool?

    public init(
        jobFlowIds: [Swift.String]? = nil,
        keepJobFlowAliveWhenNoSteps: Swift.Bool? = nil
    )
    {
        self.jobFlowIds = jobFlowIds
        self.keepJobFlowAliveWhenNoSteps = keepJobFlowAliveWhenNoSteps
    }
}

/// The input argument to the [TerminationProtection] operation.
public struct SetTerminationProtectionInput {
    /// A list of strings that uniquely identify the clusters to protect. This identifier is returned by [RunJobFlow] and can also be obtained from [DescribeJobFlows] .
    /// This member is required.
    public var jobFlowIds: [Swift.String]?
    /// A Boolean that indicates whether to protect the cluster and prevent the Amazon EC2 instances in the cluster from shutting down due to API calls, user intervention, or job-flow error.
    /// This member is required.
    public var terminationProtected: Swift.Bool?

    public init(
        jobFlowIds: [Swift.String]? = nil,
        terminationProtected: Swift.Bool? = nil
    )
    {
        self.jobFlowIds = jobFlowIds
        self.terminationProtected = terminationProtected
    }
}

public struct SetUnhealthyNodeReplacementInput {
    /// The list of strings that uniquely identify the clusters for which to turn on unhealthy node replacement. You can get these identifiers by running the [RunJobFlow] or the [DescribeJobFlows] operations.
    /// This member is required.
    public var jobFlowIds: [Swift.String]?
    /// Indicates whether to turn on or turn off graceful unhealthy node replacement.
    /// This member is required.
    public var unhealthyNodeReplacement: Swift.Bool?

    public init(
        jobFlowIds: [Swift.String]? = nil,
        unhealthyNodeReplacement: Swift.Bool? = nil
    )
    {
        self.jobFlowIds = jobFlowIds
        self.unhealthyNodeReplacement = unhealthyNodeReplacement
    }
}

/// The input to the SetVisibleToAllUsers action.
public struct SetVisibleToAllUsersInput {
    /// The unique identifier of the job flow (cluster).
    /// This member is required.
    public var jobFlowIds: [Swift.String]?
    /// A value of true indicates that an IAM principal in the Amazon Web Services account can perform Amazon EMR actions on the cluster that the IAM policies attached to the principal allow. A value of false indicates that only the IAM principal that created the cluster and the Amazon Web Services root user can perform Amazon EMR actions on the cluster.
    /// This member is required.
    public var visibleToAllUsers: Swift.Bool?

    public init(
        jobFlowIds: [Swift.String]? = nil,
        visibleToAllUsers: Swift.Bool? = nil
    )
    {
        self.jobFlowIds = jobFlowIds
        self.visibleToAllUsers = visibleToAllUsers
    }
}

extension EMRClientTypes {
    /// The Amazon S3 location that stores the notebook execution input.
    public struct NotebookS3LocationFromInput {
        /// The Amazon S3 bucket that stores the notebook execution input.
        public var bucket: Swift.String?
        /// The key to the Amazon S3 location that stores the notebook execution input.
        public var key: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            key: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.key = key
        }
    }

}

extension EMRClientTypes {
    /// The Amazon S3 location that stores the notebook execution output.
    public struct OutputNotebookS3LocationFromInput {
        /// The Amazon S3 bucket that stores the notebook execution output.
        public var bucket: Swift.String?
        /// The key to the Amazon S3 location that stores the notebook execution output.
        public var key: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            key: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.key = key
        }
    }

}

public struct StartNotebookExecutionInput {
    /// The unique identifier of the Amazon EMR Notebook to use for notebook execution.
    public var editorId: Swift.String?
    /// The environment variables associated with the notebook execution.
    public var environmentVariables: [Swift.String: Swift.String]?
    /// Specifies the execution engine (cluster) that runs the notebook execution.
    /// This member is required.
    public var executionEngine: EMRClientTypes.ExecutionEngineConfig?
    /// An optional name for the notebook execution.
    public var notebookExecutionName: Swift.String?
    /// The unique identifier of the Amazon EC2 security group to associate with the Amazon EMR Notebook for this notebook execution.
    public var notebookInstanceSecurityGroupId: Swift.String?
    /// Input parameters in JSON format passed to the Amazon EMR Notebook at runtime for execution.
    public var notebookParams: Swift.String?
    /// The Amazon S3 location for the notebook execution input.
    public var notebookS3Location: EMRClientTypes.NotebookS3LocationFromInput?
    /// The output format for the notebook execution.
    public var outputNotebookFormat: EMRClientTypes.OutputNotebookFormat?
    /// The Amazon S3 location for the notebook execution output.
    public var outputNotebookS3Location: EMRClientTypes.OutputNotebookS3LocationFromInput?
    /// The path and file name of the notebook file for this execution, relative to the path specified for the Amazon EMR Notebook. For example, if you specify a path of s3://MyBucket/MyNotebooks when you create an Amazon EMR Notebook for a notebook with an ID of e-ABCDEFGHIJK1234567890ABCD (the EditorID of this request), and you specify a RelativePath of my_notebook_executions/notebook_execution.ipynb, the location of the file for the notebook execution is s3://MyBucket/MyNotebooks/e-ABCDEFGHIJK1234567890ABCD/my_notebook_executions/notebook_execution.ipynb.
    public var relativePath: Swift.String?
    /// The name or ARN of the IAM role that is used as the service role for Amazon EMR (the Amazon EMR role) for the notebook execution.
    /// This member is required.
    public var serviceRole: Swift.String?
    /// A list of tags associated with a notebook execution. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters and an optional value string with a maximum of 256 characters.
    public var tags: [EMRClientTypes.Tag]?

    public init(
        editorId: Swift.String? = nil,
        environmentVariables: [Swift.String: Swift.String]? = nil,
        executionEngine: EMRClientTypes.ExecutionEngineConfig? = nil,
        notebookExecutionName: Swift.String? = nil,
        notebookInstanceSecurityGroupId: Swift.String? = nil,
        notebookParams: Swift.String? = nil,
        notebookS3Location: EMRClientTypes.NotebookS3LocationFromInput? = nil,
        outputNotebookFormat: EMRClientTypes.OutputNotebookFormat? = nil,
        outputNotebookS3Location: EMRClientTypes.OutputNotebookS3LocationFromInput? = nil,
        relativePath: Swift.String? = nil,
        serviceRole: Swift.String? = nil,
        tags: [EMRClientTypes.Tag]? = nil
    )
    {
        self.editorId = editorId
        self.environmentVariables = environmentVariables
        self.executionEngine = executionEngine
        self.notebookExecutionName = notebookExecutionName
        self.notebookInstanceSecurityGroupId = notebookInstanceSecurityGroupId
        self.notebookParams = notebookParams
        self.notebookS3Location = notebookS3Location
        self.outputNotebookFormat = outputNotebookFormat
        self.outputNotebookS3Location = outputNotebookS3Location
        self.relativePath = relativePath
        self.serviceRole = serviceRole
        self.tags = tags
    }
}

public struct StartNotebookExecutionOutput {
    /// The unique identifier of the notebook execution.
    public var notebookExecutionId: Swift.String?

    public init(
        notebookExecutionId: Swift.String? = nil
    )
    {
        self.notebookExecutionId = notebookExecutionId
    }
}

public struct StopNotebookExecutionInput {
    /// The unique identifier of the notebook execution.
    /// This member is required.
    public var notebookExecutionId: Swift.String?

    public init(
        notebookExecutionId: Swift.String? = nil
    )
    {
        self.notebookExecutionId = notebookExecutionId
    }
}

/// Input to the [TerminateJobFlows] operation.
public struct TerminateJobFlowsInput {
    /// A list of job flows to be shut down.
    /// This member is required.
    public var jobFlowIds: [Swift.String]?

    public init(
        jobFlowIds: [Swift.String]? = nil
    )
    {
        self.jobFlowIds = jobFlowIds
    }
}

public struct UpdateStudioInput {
    /// The Amazon S3 location to back up Workspaces and notebook files for the Amazon EMR Studio.
    public var defaultS3Location: Swift.String?
    /// A detailed description to assign to the Amazon EMR Studio.
    public var description: Swift.String?
    /// The KMS key identifier (ARN) used to encrypt Amazon EMR Studio workspace and notebook files when backed up to Amazon S3.
    public var encryptionKeyArn: Swift.String?
    /// A descriptive name for the Amazon EMR Studio.
    public var name: Swift.String?
    /// The ID of the Amazon EMR Studio to update.
    /// This member is required.
    public var studioId: Swift.String?
    /// A list of subnet IDs to associate with the Amazon EMR Studio. The list can include new subnet IDs, but must also include all of the subnet IDs previously associated with the Studio. The list order does not matter. A Studio can have a maximum of 5 subnets. The subnets must belong to the same VPC as the Studio.
    public var subnetIds: [Swift.String]?

    public init(
        defaultS3Location: Swift.String? = nil,
        description: Swift.String? = nil,
        encryptionKeyArn: Swift.String? = nil,
        name: Swift.String? = nil,
        studioId: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil
    )
    {
        self.defaultS3Location = defaultS3Location
        self.description = description
        self.encryptionKeyArn = encryptionKeyArn
        self.name = name
        self.studioId = studioId
        self.subnetIds = subnetIds
    }
}

public struct UpdateStudioSessionMappingInput {
    /// The globally unique identifier (GUID) of the user or group. For more information, see [UserId](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId) and [GroupId](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId) in the IAM Identity Center Identity Store API Reference. Either IdentityName or IdentityId must be specified.
    public var identityId: Swift.String?
    /// The name of the user or group to update. For more information, see [UserName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName) and [DisplayName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName) in the IAM Identity Center Identity Store API Reference. Either IdentityName or IdentityId must be specified.
    public var identityName: Swift.String?
    /// Specifies whether the identity to update is a user or a group.
    /// This member is required.
    public var identityType: EMRClientTypes.IdentityType?
    /// The Amazon Resource Name (ARN) of the session policy to associate with the specified user or group.
    /// This member is required.
    public var sessionPolicyArn: Swift.String?
    /// The ID of the Amazon EMR Studio.
    /// This member is required.
    public var studioId: Swift.String?

    public init(
        identityId: Swift.String? = nil,
        identityName: Swift.String? = nil,
        identityType: EMRClientTypes.IdentityType? = nil,
        sessionPolicyArn: Swift.String? = nil,
        studioId: Swift.String? = nil
    )
    {
        self.identityId = identityId
        self.identityName = identityName
        self.identityType = identityType
        self.sessionPolicyArn = sessionPolicyArn
        self.studioId = studioId
    }
}

extension EMRClientTypes {
    /// Amazon EMR releases 4.x or later. An optional configuration specification to be used when provisioning cluster instances, which can include configurations for applications and software bundled with Amazon EMR. A configuration consists of a classification, properties, and optional nested configurations. A classification refers to an application-specific configuration file. Properties are the settings you want to change in that file. For more information, see [Configuring Applications](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-configure-apps.html).
    public struct Configuration {
        /// The classification within a configuration.
        public var classification: Swift.String?
        /// A list of additional configurations to apply within a configuration object.
        public var configurations: [EMRClientTypes.Configuration]?
        /// A set of properties specified within a configuration classification.
        public var properties: [Swift.String: Swift.String]?

        public init(
            classification: Swift.String? = nil,
            configurations: [EMRClientTypes.Configuration]? = nil,
            properties: [Swift.String: Swift.String]? = nil
        )
        {
            self.classification = classification
            self.configurations = configurations
            self.properties = properties
        }
    }

}

extension EMRClientTypes {
    /// A configuration for Amazon EMR block public access. When BlockPublicSecurityGroupRules is set to true, Amazon EMR prevents cluster creation if one of the cluster's security groups has a rule that allows inbound traffic from 0.0.0.0/0 or ::/0 on a port, unless the port is specified as an exception using PermittedPublicSecurityGroupRuleRanges.
    public struct BlockPublicAccessConfiguration {
        /// Indicates whether Amazon EMR block public access is enabled (true) or disabled (false). By default, the value is false for accounts that have created Amazon EMR clusters before July 2019. For accounts created after this, the default is true.
        /// This member is required.
        public var blockPublicSecurityGroupRules: Swift.Bool?
        /// The classification within a configuration.
        public var classification: Swift.String?
        /// A list of additional configurations to apply within a configuration object.
        public var configurations: [EMRClientTypes.Configuration]?
        /// Specifies ports and port ranges that are permitted to have security group rules that allow inbound traffic from all public sources. For example, if Port 23 (Telnet) is specified for PermittedPublicSecurityGroupRuleRanges, Amazon EMR allows cluster creation if a security group associated with the cluster has a rule that allows inbound traffic on Port 23 from IPv4 0.0.0.0/0 or IPv6 port ::/0 as the source. By default, Port 22, which is used for SSH access to the cluster Amazon EC2 instances, is in the list of PermittedPublicSecurityGroupRuleRanges.
        public var permittedPublicSecurityGroupRuleRanges: [EMRClientTypes.PortRange]?
        /// A set of properties specified within a configuration classification.
        public var properties: [Swift.String: Swift.String]?

        public init(
            blockPublicSecurityGroupRules: Swift.Bool? = nil,
            classification: Swift.String? = nil,
            configurations: [EMRClientTypes.Configuration]? = nil,
            permittedPublicSecurityGroupRuleRanges: [EMRClientTypes.PortRange]? = nil,
            properties: [Swift.String: Swift.String]? = nil
        )
        {
            self.blockPublicSecurityGroupRules = blockPublicSecurityGroupRules
            self.classification = classification
            self.configurations = configurations
            self.permittedPublicSecurityGroupRuleRanges = permittedPublicSecurityGroupRuleRanges
            self.properties = properties
        }
    }

}

extension EMRClientTypes {
    /// The detailed description of the cluster.
    public struct Cluster {
        /// The applications installed on this cluster.
        public var applications: [EMRClientTypes.Application]?
        /// An IAM role for automatic scaling policies. The default role is EMR_AutoScaling_DefaultRole. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate Amazon EC2 instances in an instance group.
        public var autoScalingRole: Swift.String?
        /// Specifies whether the cluster should terminate after completing all steps.
        public var autoTerminate: Swift.Bool?
        /// The Amazon Resource Name of the cluster.
        public var clusterArn: Swift.String?
        /// Applies only to Amazon EMR releases 4.x and later. The list of configurations that are supplied to the Amazon EMR cluster.
        public var configurations: [EMRClientTypes.Configuration]?
        /// Available only in Amazon EMR releases 5.7.0 and later. The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
        public var customAmiId: Swift.String?
        /// The IOPS, of the Amazon EBS root device volume of the Linux AMI that is used for each Amazon EC2 instance. Available in Amazon EMR releases 6.15.0 and later.
        public var ebsRootVolumeIops: Swift.Int?
        /// The size, in GiB, of the Amazon EBS root device volume of the Linux AMI that is used for each Amazon EC2 instance. Available in Amazon EMR releases 4.x and later.
        public var ebsRootVolumeSize: Swift.Int?
        /// The throughput, in MiB/s, of the Amazon EBS root device volume of the Linux AMI that is used for each Amazon EC2 instance. Available in Amazon EMR releases 6.15.0 and later.
        public var ebsRootVolumeThroughput: Swift.Int?
        /// Provides information about the Amazon EC2 instances in a cluster grouped by category. For example, key name, subnet ID, IAM instance profile, and so on.
        public var ec2InstanceAttributes: EMRClientTypes.Ec2InstanceAttributes?
        /// The unique identifier for the cluster.
        public var id: Swift.String?
        /// The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions. The instance group configuration of the cluster. A value of INSTANCE_GROUP indicates a uniform instance group configuration. A value of INSTANCE_FLEET indicates an instance fleets configuration.
        public var instanceCollectionType: EMRClientTypes.InstanceCollectionType?
        /// Attributes for Kerberos configuration when Kerberos authentication is enabled using a security configuration. For more information see [Use Kerberos Authentication](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-kerberos.html) in the Amazon EMR Management Guide.
        public var kerberosAttributes: EMRClientTypes.KerberosAttributes?
        /// The KMS key used for encrypting log files. This attribute is only available with Amazon EMR 5.30.0 and later, excluding Amazon EMR 6.0.0.
        public var logEncryptionKmsKeyId: Swift.String?
        /// The path to the Amazon S3 location where logs for this cluster are stored.
        public var logUri: Swift.String?
        /// The DNS name of the master node. If the cluster is on a private subnet, this is the private DNS name. On a public subnet, this is the public DNS name.
        public var masterPublicDnsName: Swift.String?
        /// The name of the cluster. This parameter can't contain the characters <, >, $, |, or ` (backtick).
        public var name: Swift.String?
        /// An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time for every hour an m1.small instance runs. Larger instances are weighted more, so an Amazon EC2 instance that is roughly four times more expensive would result in the normalized instance hours being incremented by four. This result is only an approximation and does not reflect the actual billing rate.
        public var normalizedInstanceHours: Swift.Int?
        /// The Amazon Linux release specified in a cluster launch RunJobFlow request. If no Amazon Linux release was specified, the default Amazon Linux release is shown in the response.
        public var osReleaseLabel: Swift.String?
        /// The Amazon Resource Name (ARN) of the Outpost where the cluster is launched.
        public var outpostArn: Swift.String?
        /// Placement group configured for an Amazon EMR cluster.
        public var placementGroups: [EMRClientTypes.PlacementGroupConfig]?
        /// The Amazon EMR release label, which determines the version of open-source application packages installed on the cluster. Release labels are in the form emr-x.x.x, where x.x.x is an Amazon EMR release version such as emr-5.14.0. For more information about Amazon EMR release versions and included application versions and features, see [https://docs.aws.amazon.com/emr/latest/ReleaseGuide/](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/). The release label applies only to Amazon EMR releases version 4.0 and later. Earlier versions use AmiVersion.
        public var releaseLabel: Swift.String?
        /// Applies only when CustomAmiID is used. Specifies the type of updates that the Amazon Linux AMI package repositories apply when an instance boots using the AMI.
        public var repoUpgradeOnBoot: EMRClientTypes.RepoUpgradeOnBoot?
        /// The AMI version requested for this cluster.
        public var requestedAmiVersion: Swift.String?
        /// The AMI version running on this cluster.
        public var runningAmiVersion: Swift.String?
        /// The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. TERMINATE_AT_INSTANCE_HOUR indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. TERMINATE_AT_TASK_COMPLETION indicates that Amazon EMR adds nodes to a deny list and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. TERMINATE_AT_TASK_COMPLETION is available only in Amazon EMR releases 4.1.0 and later, and is the default for versions of Amazon EMR earlier than 5.1.0.
        public var scaleDownBehavior: EMRClientTypes.ScaleDownBehavior?
        /// The name of the security configuration applied to the cluster.
        public var securityConfiguration: Swift.String?
        /// The IAM role that Amazon EMR assumes in order to access Amazon Web Services resources on your behalf.
        public var serviceRole: Swift.String?
        /// The current status details about the cluster.
        public var status: EMRClientTypes.ClusterStatus?
        /// Specifies the number of steps that can be executed concurrently.
        public var stepConcurrencyLevel: Swift.Int?
        /// A list of tags associated with a cluster.
        public var tags: [EMRClientTypes.Tag]?
        /// Indicates whether Amazon EMR will lock the cluster to prevent the Amazon EC2 instances from being terminated by an API call or user intervention, or in the event of a cluster error.
        public var terminationProtected: Swift.Bool?
        /// Indicates whether Amazon EMR should gracefully replace Amazon EC2 core instances that have degraded within the cluster.
        public var unhealthyNodeReplacement: Swift.Bool?
        /// Indicates whether the cluster is visible to IAM principals in the Amazon Web Services account associated with the cluster. When true, IAM principals in the Amazon Web Services account can perform Amazon EMR cluster actions on the cluster that their IAM policies allow. When false, only the IAM principal that created the cluster and the Amazon Web Services account root user can perform Amazon EMR actions, regardless of IAM permissions policies attached to other IAM principals. The default value is true if a value is not provided when creating a cluster using the Amazon EMR API [RunJobFlow] command, the CLI [create-cluster](https://docs.aws.amazon.com/cli/latest/reference/emr/create-cluster.html) command, or the Amazon Web Services Management Console.
        public var visibleToAllUsers: Swift.Bool?

        public init(
            applications: [EMRClientTypes.Application]? = nil,
            autoScalingRole: Swift.String? = nil,
            autoTerminate: Swift.Bool? = nil,
            clusterArn: Swift.String? = nil,
            configurations: [EMRClientTypes.Configuration]? = nil,
            customAmiId: Swift.String? = nil,
            ebsRootVolumeIops: Swift.Int? = nil,
            ebsRootVolumeSize: Swift.Int? = nil,
            ebsRootVolumeThroughput: Swift.Int? = nil,
            ec2InstanceAttributes: EMRClientTypes.Ec2InstanceAttributes? = nil,
            id: Swift.String? = nil,
            instanceCollectionType: EMRClientTypes.InstanceCollectionType? = nil,
            kerberosAttributes: EMRClientTypes.KerberosAttributes? = nil,
            logEncryptionKmsKeyId: Swift.String? = nil,
            logUri: Swift.String? = nil,
            masterPublicDnsName: Swift.String? = nil,
            name: Swift.String? = nil,
            normalizedInstanceHours: Swift.Int? = nil,
            osReleaseLabel: Swift.String? = nil,
            outpostArn: Swift.String? = nil,
            placementGroups: [EMRClientTypes.PlacementGroupConfig]? = nil,
            releaseLabel: Swift.String? = nil,
            repoUpgradeOnBoot: EMRClientTypes.RepoUpgradeOnBoot? = nil,
            requestedAmiVersion: Swift.String? = nil,
            runningAmiVersion: Swift.String? = nil,
            scaleDownBehavior: EMRClientTypes.ScaleDownBehavior? = nil,
            securityConfiguration: Swift.String? = nil,
            serviceRole: Swift.String? = nil,
            status: EMRClientTypes.ClusterStatus? = nil,
            stepConcurrencyLevel: Swift.Int? = nil,
            tags: [EMRClientTypes.Tag]? = nil,
            terminationProtected: Swift.Bool? = nil,
            unhealthyNodeReplacement: Swift.Bool? = nil,
            visibleToAllUsers: Swift.Bool? = nil
        )
        {
            self.applications = applications
            self.autoScalingRole = autoScalingRole
            self.autoTerminate = autoTerminate
            self.clusterArn = clusterArn
            self.configurations = configurations
            self.customAmiId = customAmiId
            self.ebsRootVolumeIops = ebsRootVolumeIops
            self.ebsRootVolumeSize = ebsRootVolumeSize
            self.ebsRootVolumeThroughput = ebsRootVolumeThroughput
            self.ec2InstanceAttributes = ec2InstanceAttributes
            self.id = id
            self.instanceCollectionType = instanceCollectionType
            self.kerberosAttributes = kerberosAttributes
            self.logEncryptionKmsKeyId = logEncryptionKmsKeyId
            self.logUri = logUri
            self.masterPublicDnsName = masterPublicDnsName
            self.name = name
            self.normalizedInstanceHours = normalizedInstanceHours
            self.osReleaseLabel = osReleaseLabel
            self.outpostArn = outpostArn
            self.placementGroups = placementGroups
            self.releaseLabel = releaseLabel
            self.repoUpgradeOnBoot = repoUpgradeOnBoot
            self.requestedAmiVersion = requestedAmiVersion
            self.runningAmiVersion = runningAmiVersion
            self.scaleDownBehavior = scaleDownBehavior
            self.securityConfiguration = securityConfiguration
            self.serviceRole = serviceRole
            self.status = status
            self.stepConcurrencyLevel = stepConcurrencyLevel
            self.tags = tags
            self.terminationProtected = terminationProtected
            self.unhealthyNodeReplacement = unhealthyNodeReplacement
            self.visibleToAllUsers = visibleToAllUsers
        }
    }

}

extension EMRClientTypes {
    /// Configuration defining a new instance group.
    public struct InstanceGroupConfig {
        /// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates Amazon EC2 instances in response to the value of a CloudWatch metric. See [PutAutoScalingPolicy].
        public var autoScalingPolicy: EMRClientTypes.AutoScalingPolicy?
        /// If specified, indicates that the instance group uses Spot Instances. This is the maximum price you are willing to pay for Spot Instances. Specify OnDemandPrice to set the amount equal to the On-Demand price, or specify an amount in USD.
        public var bidPrice: Swift.String?
        /// Amazon EMR releases 4.x or later. The list of configurations supplied for an Amazon EMR cluster instance group. You can specify a separate configuration for each instance group (master, core, and task).
        public var configurations: [EMRClientTypes.Configuration]?
        /// The custom AMI ID to use for the provisioned instance group.
        public var customAmiId: Swift.String?
        /// EBS configurations that will be attached to each Amazon EC2 instance in the instance group.
        public var ebsConfiguration: EMRClientTypes.EbsConfiguration?
        /// Target number of instances for the instance group.
        /// This member is required.
        public var instanceCount: Swift.Int?
        /// The role of the instance group in the cluster.
        /// This member is required.
        public var instanceRole: EMRClientTypes.InstanceRoleType?
        /// The Amazon EC2 instance type for all instances in the instance group.
        /// This member is required.
        public var instanceType: Swift.String?
        /// Market type of the Amazon EC2 instances used to create a cluster node.
        public var market: EMRClientTypes.MarketType?
        /// Friendly name given to the instance group.
        public var name: Swift.String?

        public init(
            autoScalingPolicy: EMRClientTypes.AutoScalingPolicy? = nil,
            bidPrice: Swift.String? = nil,
            configurations: [EMRClientTypes.Configuration]? = nil,
            customAmiId: Swift.String? = nil,
            ebsConfiguration: EMRClientTypes.EbsConfiguration? = nil,
            instanceCount: Swift.Int? = nil,
            instanceRole: EMRClientTypes.InstanceRoleType? = nil,
            instanceType: Swift.String? = nil,
            market: EMRClientTypes.MarketType? = nil,
            name: Swift.String? = nil
        )
        {
            self.autoScalingPolicy = autoScalingPolicy
            self.bidPrice = bidPrice
            self.configurations = configurations
            self.customAmiId = customAmiId
            self.ebsConfiguration = ebsConfiguration
            self.instanceCount = instanceCount
            self.instanceRole = instanceRole
            self.instanceType = instanceType
            self.market = market
            self.name = name
        }
    }

}

extension EMRClientTypes {
    /// Modify the size or configurations of an instance group.
    public struct InstanceGroupModifyConfig {
        /// A list of new or modified configurations to apply for an instance group.
        public var configurations: [EMRClientTypes.Configuration]?
        /// The Amazon EC2 InstanceIds to terminate. After you terminate the instances, the instance group will not return to its original requested size.
        public var ec2InstanceIdsToTerminate: [Swift.String]?
        /// Target size for the instance group.
        public var instanceCount: Swift.Int?
        /// Unique ID of the instance group to modify.
        /// This member is required.
        public var instanceGroupId: Swift.String?
        /// Type of reconfiguration requested. Valid values are MERGE and OVERWRITE.
        public var reconfigurationType: EMRClientTypes.ReconfigurationType?
        /// Policy for customizing shrink operations.
        public var shrinkPolicy: EMRClientTypes.ShrinkPolicy?

        public init(
            configurations: [EMRClientTypes.Configuration]? = nil,
            ec2InstanceIdsToTerminate: [Swift.String]? = nil,
            instanceCount: Swift.Int? = nil,
            instanceGroupId: Swift.String? = nil,
            reconfigurationType: EMRClientTypes.ReconfigurationType? = nil,
            shrinkPolicy: EMRClientTypes.ShrinkPolicy? = nil
        )
        {
            self.configurations = configurations
            self.ec2InstanceIdsToTerminate = ec2InstanceIdsToTerminate
            self.instanceCount = instanceCount
            self.instanceGroupId = instanceGroupId
            self.reconfigurationType = reconfigurationType
            self.shrinkPolicy = shrinkPolicy
        }
    }

}

extension EMRClientTypes {
    /// An instance type configuration for each instance type in an instance fleet, which determines the Amazon EC2 instances Amazon EMR attempts to provision to fulfill On-Demand and Spot target capacities. When you use an allocation strategy, you can include a maximum of 30 instance type configurations for a fleet. For more information about how to use an allocation strategy, see [Configure Instance Fleets](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-fleet.html). Without an allocation strategy, you may specify a maximum of five instance type configurations for a fleet. The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions.
    public struct InstanceTypeConfig {
        /// The bid price for each Amazon EC2 Spot Instance type as defined by InstanceType. Expressed in USD. If neither BidPrice nor BidPriceAsPercentageOfOnDemandPrice is provided, BidPriceAsPercentageOfOnDemandPrice defaults to 100%.
        public var bidPrice: Swift.String?
        /// The bid price, as a percentage of On-Demand price, for each Amazon EC2 Spot Instance as defined by InstanceType. Expressed as a number (for example, 20 specifies 20%). If neither BidPrice nor BidPriceAsPercentageOfOnDemandPrice is provided, BidPriceAsPercentageOfOnDemandPrice defaults to 100%.
        public var bidPriceAsPercentageOfOnDemandPrice: Swift.Double?
        /// A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster.
        public var configurations: [EMRClientTypes.Configuration]?
        /// The custom AMI ID to use for the instance type.
        public var customAmiId: Swift.String?
        /// The configuration of Amazon Elastic Block Store (Amazon EBS) attached to each instance as defined by InstanceType.
        public var ebsConfiguration: EMRClientTypes.EbsConfiguration?
        /// An Amazon EC2 instance type, such as m3.xlarge.
        /// This member is required.
        public var instanceType: Swift.String?
        /// The priority at which Amazon EMR launches the Amazon EC2 instances with this instance type. Priority starts at 0, which is the highest priority. Amazon EMR considers the highest priority first.
        public var priority: Swift.Double?
        /// The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in [InstanceFleetConfig]. This value is 1 for a master instance fleet, and must be 1 or greater for core and task instance fleets. Defaults to 1 if not specified.
        public var weightedCapacity: Swift.Int?

        public init(
            bidPrice: Swift.String? = nil,
            bidPriceAsPercentageOfOnDemandPrice: Swift.Double? = nil,
            configurations: [EMRClientTypes.Configuration]? = nil,
            customAmiId: Swift.String? = nil,
            ebsConfiguration: EMRClientTypes.EbsConfiguration? = nil,
            instanceType: Swift.String? = nil,
            priority: Swift.Double? = nil,
            weightedCapacity: Swift.Int? = nil
        )
        {
            self.bidPrice = bidPrice
            self.bidPriceAsPercentageOfOnDemandPrice = bidPriceAsPercentageOfOnDemandPrice
            self.configurations = configurations
            self.customAmiId = customAmiId
            self.ebsConfiguration = ebsConfiguration
            self.instanceType = instanceType
            self.priority = priority
            self.weightedCapacity = weightedCapacity
        }
    }

}

extension EMRClientTypes {
    /// The configuration specification for each instance type in an instance fleet. The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions.
    public struct InstanceTypeSpecification {
        /// The bid price for each Amazon EC2 Spot Instance type as defined by InstanceType. Expressed in USD.
        public var bidPrice: Swift.String?
        /// The bid price, as a percentage of On-Demand price, for each Amazon EC2 Spot Instance as defined by InstanceType. Expressed as a number (for example, 20 specifies 20%).
        public var bidPriceAsPercentageOfOnDemandPrice: Swift.Double?
        /// A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software bundled with Amazon EMR.
        public var configurations: [EMRClientTypes.Configuration]?
        /// The custom AMI ID to use for the instance type.
        public var customAmiId: Swift.String?
        /// The configuration of Amazon Elastic Block Store (Amazon EBS) attached to each instance as defined by InstanceType.
        public var ebsBlockDevices: [EMRClientTypes.EbsBlockDevice]?
        /// Evaluates to TRUE when the specified InstanceType is EBS-optimized.
        public var ebsOptimized: Swift.Bool?
        /// The Amazon EC2 instance type, for example m3.xlarge.
        public var instanceType: Swift.String?
        /// The priority at which Amazon EMR launches the Amazon EC2 instances with this instance type. Priority starts at 0, which is the highest priority. Amazon EMR considers the highest priority first.
        public var priority: Swift.Double?
        /// The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in [InstanceFleetConfig]. Capacity values represent performance characteristics such as vCPUs, memory, or I/O. If not specified, the default value is 1.
        public var weightedCapacity: Swift.Int?

        public init(
            bidPrice: Swift.String? = nil,
            bidPriceAsPercentageOfOnDemandPrice: Swift.Double? = nil,
            configurations: [EMRClientTypes.Configuration]? = nil,
            customAmiId: Swift.String? = nil,
            ebsBlockDevices: [EMRClientTypes.EbsBlockDevice]? = nil,
            ebsOptimized: Swift.Bool? = nil,
            instanceType: Swift.String? = nil,
            priority: Swift.Double? = nil,
            weightedCapacity: Swift.Int? = nil
        )
        {
            self.bidPrice = bidPrice
            self.bidPriceAsPercentageOfOnDemandPrice = bidPriceAsPercentageOfOnDemandPrice
            self.configurations = configurations
            self.customAmiId = customAmiId
            self.ebsBlockDevices = ebsBlockDevices
            self.ebsOptimized = ebsOptimized
            self.instanceType = instanceType
            self.priority = priority
            self.weightedCapacity = weightedCapacity
        }
    }

}

/// This output contains the description of the cluster.
public struct DescribeClusterOutput {
    /// This output contains the details for the requested cluster.
    public var cluster: EMRClientTypes.Cluster?

    public init(
        cluster: EMRClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

public struct GetBlockPublicAccessConfigurationOutput {
    /// A configuration for Amazon EMR block public access. The configuration applies to all clusters created in your account for the current Region. The configuration specifies whether block public access is enabled. If block public access is enabled, security groups associated with the cluster cannot have rules that allow inbound traffic from 0.0.0.0/0 or ::/0 on a port, unless the port is specified as an exception using PermittedPublicSecurityGroupRuleRanges in the BlockPublicAccessConfiguration. By default, Port 22 (SSH) is an exception, and public access is allowed on this port. You can change this by updating the block public access configuration to remove the exception. For accounts that created clusters in a Region before November 25, 2019, block public access is disabled by default in that Region. To use this feature, you must manually enable and configure it. For accounts that did not create an Amazon EMR cluster in a Region before this date, block public access is enabled by default in that Region.
    /// This member is required.
    public var blockPublicAccessConfiguration: EMRClientTypes.BlockPublicAccessConfiguration?
    /// Properties that describe the Amazon Web Services principal that created the BlockPublicAccessConfiguration using the PutBlockPublicAccessConfiguration action as well as the date and time that the configuration was created. Each time a configuration for block public access is updated, Amazon EMR updates this metadata.
    /// This member is required.
    public var blockPublicAccessConfigurationMetadata: EMRClientTypes.BlockPublicAccessConfigurationMetadata?

    public init(
        blockPublicAccessConfiguration: EMRClientTypes.BlockPublicAccessConfiguration? = nil,
        blockPublicAccessConfigurationMetadata: EMRClientTypes.BlockPublicAccessConfigurationMetadata? = nil
    )
    {
        self.blockPublicAccessConfiguration = blockPublicAccessConfiguration
        self.blockPublicAccessConfigurationMetadata = blockPublicAccessConfigurationMetadata
    }
}

public struct PutBlockPublicAccessConfigurationInput {
    /// A configuration for Amazon EMR block public access. The configuration applies to all clusters created in your account for the current Region. The configuration specifies whether block public access is enabled. If block public access is enabled, security groups associated with the cluster cannot have rules that allow inbound traffic from 0.0.0.0/0 or ::/0 on a port, unless the port is specified as an exception using PermittedPublicSecurityGroupRuleRanges in the BlockPublicAccessConfiguration. By default, Port 22 (SSH) is an exception, and public access is allowed on this port. You can change this by updating BlockPublicSecurityGroupRules to remove the exception. For accounts that created clusters in a Region before November 25, 2019, block public access is disabled by default in that Region. To use this feature, you must manually enable and configure it. For accounts that did not create an Amazon EMR cluster in a Region before this date, block public access is enabled by default in that Region.
    /// This member is required.
    public var blockPublicAccessConfiguration: EMRClientTypes.BlockPublicAccessConfiguration?

    public init(
        blockPublicAccessConfiguration: EMRClientTypes.BlockPublicAccessConfiguration? = nil
    )
    {
        self.blockPublicAccessConfiguration = blockPublicAccessConfiguration
    }
}

extension EMRClientTypes {
    /// Describes an instance fleet, which is a group of Amazon EC2 instances that host a particular node type (master, core, or task) in an Amazon EMR cluster. Instance fleets can consist of a mix of instance types and On-Demand and Spot Instances, which are provisioned to meet a defined target capacity. The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions.
    public struct InstanceFleet {
        /// The unique identifier of the instance fleet.
        public var id: Swift.String?
        /// The node type that the instance fleet hosts. Valid values are MASTER, CORE, or TASK.
        public var instanceFleetType: EMRClientTypes.InstanceFleetType?
        /// An array of specifications for the instance types that comprise an instance fleet.
        public var instanceTypeSpecifications: [EMRClientTypes.InstanceTypeSpecification]?
        /// Describes the launch specification for an instance fleet.
        public var launchSpecifications: EMRClientTypes.InstanceFleetProvisioningSpecifications?
        /// A friendly name for the instance fleet.
        public var name: Swift.String?
        /// The number of On-Demand units that have been provisioned for the instance fleet to fulfill TargetOnDemandCapacity. This provisioned capacity might be less than or greater than TargetOnDemandCapacity.
        public var provisionedOnDemandCapacity: Swift.Int?
        /// The number of Spot units that have been provisioned for this instance fleet to fulfill TargetSpotCapacity. This provisioned capacity might be less than or greater than TargetSpotCapacity.
        public var provisionedSpotCapacity: Swift.Int?
        /// The resize specification for the instance fleet.
        public var resizeSpecifications: EMRClientTypes.InstanceFleetResizingSpecifications?
        /// The current status of the instance fleet.
        public var status: EMRClientTypes.InstanceFleetStatus?
        /// The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand Instances to provision. When the instance fleet launches, Amazon EMR tries to provision On-Demand Instances as specified by [InstanceTypeConfig]. Each instance configuration has a specified WeightedCapacity. When an On-Demand Instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. You can use [InstanceFleet$ProvisionedOnDemandCapacity] to determine the Spot capacity units that have been provisioned for the instance fleet. If not specified or set to 0, only Spot Instances are provisioned for the instance fleet using TargetSpotCapacity. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1.
        public var targetOnDemandCapacity: Swift.Int?
        /// The target capacity of Spot units for the instance fleet, which determines how many Spot Instances to provision. When the instance fleet launches, Amazon EMR tries to provision Spot Instances as specified by [InstanceTypeConfig]. Each instance configuration has a specified WeightedCapacity. When a Spot instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. You can use [InstanceFleet$ProvisionedSpotCapacity] to determine the Spot capacity units that have been provisioned for the instance fleet. If not specified or set to 0, only On-Demand Instances are provisioned for the instance fleet. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1.
        public var targetSpotCapacity: Swift.Int?

        public init(
            id: Swift.String? = nil,
            instanceFleetType: EMRClientTypes.InstanceFleetType? = nil,
            instanceTypeSpecifications: [EMRClientTypes.InstanceTypeSpecification]? = nil,
            launchSpecifications: EMRClientTypes.InstanceFleetProvisioningSpecifications? = nil,
            name: Swift.String? = nil,
            provisionedOnDemandCapacity: Swift.Int? = nil,
            provisionedSpotCapacity: Swift.Int? = nil,
            resizeSpecifications: EMRClientTypes.InstanceFleetResizingSpecifications? = nil,
            status: EMRClientTypes.InstanceFleetStatus? = nil,
            targetOnDemandCapacity: Swift.Int? = nil,
            targetSpotCapacity: Swift.Int? = nil
        )
        {
            self.id = id
            self.instanceFleetType = instanceFleetType
            self.instanceTypeSpecifications = instanceTypeSpecifications
            self.launchSpecifications = launchSpecifications
            self.name = name
            self.provisionedOnDemandCapacity = provisionedOnDemandCapacity
            self.provisionedSpotCapacity = provisionedSpotCapacity
            self.resizeSpecifications = resizeSpecifications
            self.status = status
            self.targetOnDemandCapacity = targetOnDemandCapacity
            self.targetSpotCapacity = targetSpotCapacity
        }
    }

}

extension EMRClientTypes {
    /// The configuration that defines an instance fleet. The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions.
    public struct InstanceFleetConfig {
        /// The node type that the instance fleet hosts. Valid values are MASTER, CORE, and TASK.
        /// This member is required.
        public var instanceFleetType: EMRClientTypes.InstanceFleetType?
        /// The instance type configurations that define the Amazon EC2 instances in the instance fleet.
        public var instanceTypeConfigs: [EMRClientTypes.InstanceTypeConfig]?
        /// The launch specification for the instance fleet.
        public var launchSpecifications: EMRClientTypes.InstanceFleetProvisioningSpecifications?
        /// The friendly name of the instance fleet.
        public var name: Swift.String?
        /// The resize specification for the instance fleet.
        public var resizeSpecifications: EMRClientTypes.InstanceFleetResizingSpecifications?
        /// The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand Instances to provision. When the instance fleet launches, Amazon EMR tries to provision On-Demand Instances as specified by [InstanceTypeConfig]. Each instance configuration has a specified WeightedCapacity. When an On-Demand Instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. If not specified or set to 0, only Spot Instances are provisioned for the instance fleet using TargetSpotCapacity. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1.
        public var targetOnDemandCapacity: Swift.Int?
        /// The target capacity of Spot units for the instance fleet, which determines how many Spot Instances to provision. When the instance fleet launches, Amazon EMR tries to provision Spot Instances as specified by [InstanceTypeConfig]. Each instance configuration has a specified WeightedCapacity. When a Spot Instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. If not specified or set to 0, only On-Demand Instances are provisioned for the instance fleet. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1.
        public var targetSpotCapacity: Swift.Int?

        public init(
            instanceFleetType: EMRClientTypes.InstanceFleetType? = nil,
            instanceTypeConfigs: [EMRClientTypes.InstanceTypeConfig]? = nil,
            launchSpecifications: EMRClientTypes.InstanceFleetProvisioningSpecifications? = nil,
            name: Swift.String? = nil,
            resizeSpecifications: EMRClientTypes.InstanceFleetResizingSpecifications? = nil,
            targetOnDemandCapacity: Swift.Int? = nil,
            targetSpotCapacity: Swift.Int? = nil
        )
        {
            self.instanceFleetType = instanceFleetType
            self.instanceTypeConfigs = instanceTypeConfigs
            self.launchSpecifications = launchSpecifications
            self.name = name
            self.resizeSpecifications = resizeSpecifications
            self.targetOnDemandCapacity = targetOnDemandCapacity
            self.targetSpotCapacity = targetSpotCapacity
        }
    }

}

extension EMRClientTypes {
    /// Configuration parameters for an instance fleet modification request. The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions.
    public struct InstanceFleetModifyConfig {
        /// A unique identifier for the instance fleet.
        /// This member is required.
        public var instanceFleetId: Swift.String?
        /// An array of InstanceTypeConfig objects that specify how Amazon EMR provisions Amazon EC2 instances when it fulfills On-Demand and Spot capacities. For more information, see [InstanceTypeConfig](https://docs.aws.amazon.com/emr/latest/APIReference/API_InstanceTypeConfig.html).
        public var instanceTypeConfigs: [EMRClientTypes.InstanceTypeConfig]?
        /// The resize specification for the instance fleet.
        public var resizeSpecifications: EMRClientTypes.InstanceFleetResizingSpecifications?
        /// The target capacity of On-Demand units for the instance fleet. For more information see [InstanceFleetConfig$TargetOnDemandCapacity].
        public var targetOnDemandCapacity: Swift.Int?
        /// The target capacity of Spot units for the instance fleet. For more information, see [InstanceFleetConfig$TargetSpotCapacity].
        public var targetSpotCapacity: Swift.Int?

        public init(
            instanceFleetId: Swift.String? = nil,
            instanceTypeConfigs: [EMRClientTypes.InstanceTypeConfig]? = nil,
            resizeSpecifications: EMRClientTypes.InstanceFleetResizingSpecifications? = nil,
            targetOnDemandCapacity: Swift.Int? = nil,
            targetSpotCapacity: Swift.Int? = nil
        )
        {
            self.instanceFleetId = instanceFleetId
            self.instanceTypeConfigs = instanceTypeConfigs
            self.resizeSpecifications = resizeSpecifications
            self.targetOnDemandCapacity = targetOnDemandCapacity
            self.targetSpotCapacity = targetSpotCapacity
        }
    }

}

/// Input to an AddInstanceGroups call.
public struct AddInstanceGroupsInput {
    /// Instance groups to add.
    /// This member is required.
    public var instanceGroups: [EMRClientTypes.InstanceGroupConfig]?
    /// Job flow in which to add the instance groups.
    /// This member is required.
    public var jobFlowId: Swift.String?

    public init(
        instanceGroups: [EMRClientTypes.InstanceGroupConfig]? = nil,
        jobFlowId: Swift.String? = nil
    )
    {
        self.instanceGroups = instanceGroups
        self.jobFlowId = jobFlowId
    }
}

/// Change the size of some instance groups.
public struct ModifyInstanceGroupsInput {
    /// The ID of the cluster to which the instance group belongs.
    public var clusterId: Swift.String?
    /// Instance groups to change.
    public var instanceGroups: [EMRClientTypes.InstanceGroupModifyConfig]?

    public init(
        clusterId: Swift.String? = nil,
        instanceGroups: [EMRClientTypes.InstanceGroupModifyConfig]? = nil
    )
    {
        self.clusterId = clusterId
        self.instanceGroups = instanceGroups
    }
}

extension EMRClientTypes {
    /// This entity represents an instance group, which is a group of instances that have common purpose. For example, CORE instance group is used for HDFS.
    public struct InstanceGroup {
        /// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates Amazon EC2 instances in response to the value of a CloudWatch metric. See PutAutoScalingPolicy.
        public var autoScalingPolicy: EMRClientTypes.AutoScalingPolicyDescription?
        /// If specified, indicates that the instance group uses Spot Instances. This is the maximum price you are willing to pay for Spot Instances. Specify OnDemandPrice to set the amount equal to the On-Demand price, or specify an amount in USD.
        public var bidPrice: Swift.String?
        /// Amazon EMR releases 4.x or later. The list of configurations supplied for an Amazon EMR cluster instance group. You can specify a separate configuration for each instance group (master, core, and task).
        public var configurations: [EMRClientTypes.Configuration]?
        /// The version number of the requested configuration specification for this instance group.
        public var configurationsVersion: Swift.Int?
        /// The custom AMI ID to use for the provisioned instance group.
        public var customAmiId: Swift.String?
        /// The EBS block devices that are mapped to this instance group.
        public var ebsBlockDevices: [EMRClientTypes.EbsBlockDevice]?
        /// If the instance group is EBS-optimized. An Amazon EBS-optimized instance uses an optimized configuration stack and provides additional, dedicated capacity for Amazon EBS I/O.
        public var ebsOptimized: Swift.Bool?
        /// The identifier of the instance group.
        public var id: Swift.String?
        /// The type of the instance group. Valid values are MASTER, CORE or TASK.
        public var instanceGroupType: EMRClientTypes.InstanceGroupType?
        /// The Amazon EC2 instance type for all instances in the instance group.
        public var instanceType: Swift.String?
        /// A list of configurations that were successfully applied for an instance group last time.
        public var lastSuccessfullyAppliedConfigurations: [EMRClientTypes.Configuration]?
        /// The version number of a configuration specification that was successfully applied for an instance group last time.
        public var lastSuccessfullyAppliedConfigurationsVersion: Swift.Int?
        /// The marketplace to provision instances for this group. Valid values are ON_DEMAND or SPOT.
        public var market: EMRClientTypes.MarketType?
        /// The name of the instance group.
        public var name: Swift.String?
        /// The target number of instances for the instance group.
        public var requestedInstanceCount: Swift.Int?
        /// The number of instances currently running in this instance group.
        public var runningInstanceCount: Swift.Int?
        /// Policy for customizing shrink operations.
        public var shrinkPolicy: EMRClientTypes.ShrinkPolicy?
        /// The current status of the instance group.
        public var status: EMRClientTypes.InstanceGroupStatus?

        public init(
            autoScalingPolicy: EMRClientTypes.AutoScalingPolicyDescription? = nil,
            bidPrice: Swift.String? = nil,
            configurations: [EMRClientTypes.Configuration]? = nil,
            configurationsVersion: Swift.Int? = nil,
            customAmiId: Swift.String? = nil,
            ebsBlockDevices: [EMRClientTypes.EbsBlockDevice]? = nil,
            ebsOptimized: Swift.Bool? = nil,
            id: Swift.String? = nil,
            instanceGroupType: EMRClientTypes.InstanceGroupType? = nil,
            instanceType: Swift.String? = nil,
            lastSuccessfullyAppliedConfigurations: [EMRClientTypes.Configuration]? = nil,
            lastSuccessfullyAppliedConfigurationsVersion: Swift.Int? = nil,
            market: EMRClientTypes.MarketType? = nil,
            name: Swift.String? = nil,
            requestedInstanceCount: Swift.Int? = nil,
            runningInstanceCount: Swift.Int? = nil,
            shrinkPolicy: EMRClientTypes.ShrinkPolicy? = nil,
            status: EMRClientTypes.InstanceGroupStatus? = nil
        )
        {
            self.autoScalingPolicy = autoScalingPolicy
            self.bidPrice = bidPrice
            self.configurations = configurations
            self.configurationsVersion = configurationsVersion
            self.customAmiId = customAmiId
            self.ebsBlockDevices = ebsBlockDevices
            self.ebsOptimized = ebsOptimized
            self.id = id
            self.instanceGroupType = instanceGroupType
            self.instanceType = instanceType
            self.lastSuccessfullyAppliedConfigurations = lastSuccessfullyAppliedConfigurations
            self.lastSuccessfullyAppliedConfigurationsVersion = lastSuccessfullyAppliedConfigurationsVersion
            self.market = market
            self.name = name
            self.requestedInstanceCount = requestedInstanceCount
            self.runningInstanceCount = runningInstanceCount
            self.shrinkPolicy = shrinkPolicy
            self.status = status
        }
    }

}

public struct AddInstanceFleetInput {
    /// The unique identifier of the cluster.
    /// This member is required.
    public var clusterId: Swift.String?
    /// Specifies the configuration of the instance fleet.
    /// This member is required.
    public var instanceFleet: EMRClientTypes.InstanceFleetConfig?

    public init(
        clusterId: Swift.String? = nil,
        instanceFleet: EMRClientTypes.InstanceFleetConfig? = nil
    )
    {
        self.clusterId = clusterId
        self.instanceFleet = instanceFleet
    }
}

public struct ModifyInstanceFleetInput {
    /// The unique identifier of the cluster.
    /// This member is required.
    public var clusterId: Swift.String?
    /// The configuration parameters of the instance fleet.
    /// This member is required.
    public var instanceFleet: EMRClientTypes.InstanceFleetModifyConfig?

    public init(
        clusterId: Swift.String? = nil,
        instanceFleet: EMRClientTypes.InstanceFleetModifyConfig? = nil
    )
    {
        self.clusterId = clusterId
        self.instanceFleet = instanceFleet
    }
}

public struct ListInstanceFleetsOutput {
    /// The list of instance fleets for the cluster and given filters.
    public var instanceFleets: [EMRClientTypes.InstanceFleet]?
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?

    public init(
        instanceFleets: [EMRClientTypes.InstanceFleet]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.instanceFleets = instanceFleets
        self.marker = marker
    }
}

/// This input determines which instance groups to retrieve.
public struct ListInstanceGroupsOutput {
    /// The list of instance groups for the cluster and given filters.
    public var instanceGroups: [EMRClientTypes.InstanceGroup]?
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?

    public init(
        instanceGroups: [EMRClientTypes.InstanceGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.instanceGroups = instanceGroups
        self.marker = marker
    }
}

extension EMRClientTypes {
    /// A description of the Amazon EC2 instance on which the cluster (job flow) runs. A valid JobFlowInstancesConfig must contain either InstanceGroups or InstanceFleets. They cannot be used together. You may also have MasterInstanceType, SlaveInstanceType, and InstanceCount (all three must be present), but we don't recommend this configuration.
    public struct JobFlowInstancesConfig {
        /// A list of additional Amazon EC2 security group IDs for the master node.
        public var additionalMasterSecurityGroups: [Swift.String]?
        /// A list of additional Amazon EC2 security group IDs for the core and task nodes.
        public var additionalSlaveSecurityGroups: [Swift.String]?
        /// The name of the Amazon EC2 key pair that can be used to connect to the master node using SSH as the user called "hadoop."
        public var ec2KeyName: Swift.String?
        /// Applies to clusters that use the uniform instance group configuration. To launch the cluster in Amazon Virtual Private Cloud (Amazon VPC), set this parameter to the identifier of the Amazon VPC subnet where you want the cluster to launch. If you do not specify this value and your account supports EC2-Classic, the cluster launches in EC2-Classic.
        public var ec2SubnetId: Swift.String?
        /// Applies to clusters that use the instance fleet configuration. When multiple Amazon EC2 subnet IDs are specified, Amazon EMR evaluates them and launches instances in the optimal subnet. The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions.
        public var ec2SubnetIds: [Swift.String]?
        /// The identifier of the Amazon EC2 security group for the master node. If you specify EmrManagedMasterSecurityGroup, you must also specify EmrManagedSlaveSecurityGroup.
        public var emrManagedMasterSecurityGroup: Swift.String?
        /// The identifier of the Amazon EC2 security group for the core and task nodes. If you specify EmrManagedSlaveSecurityGroup, you must also specify EmrManagedMasterSecurityGroup.
        public var emrManagedSlaveSecurityGroup: Swift.String?
        /// Applies only to Amazon EMR release versions earlier than 4.0. The Hadoop version for the cluster. Valid inputs are "0.18" (no longer maintained), "0.20" (no longer maintained), "0.20.205" (no longer maintained), "1.0.3", "2.2.0", or "2.4.0". If you do not set this value, the default of 0.18 is used, unless the AmiVersion parameter is set in the RunJobFlow call, in which case the default version of Hadoop for that AMI version is used.
        public var hadoopVersion: Swift.String?
        /// The number of Amazon EC2 instances in the cluster.
        public var instanceCount: Swift.Int?
        /// The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions. Describes the Amazon EC2 instances and instance configurations for clusters that use the instance fleet configuration.
        public var instanceFleets: [EMRClientTypes.InstanceFleetConfig]?
        /// Configuration for the instance groups in a cluster.
        public var instanceGroups: [EMRClientTypes.InstanceGroupConfig]?
        /// Specifies whether the cluster should remain available after completing all steps. Defaults to false. For more information about configuring cluster termination, see [Control Cluster Termination](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-termination.html) in the EMR Management Guide.
        public var keepJobFlowAliveWhenNoSteps: Swift.Bool?
        /// The Amazon EC2 instance type of the master node.
        public var masterInstanceType: Swift.String?
        /// The Availability Zone in which the cluster runs.
        public var placement: EMRClientTypes.PlacementType?
        /// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
        public var serviceAccessSecurityGroup: Swift.String?
        /// The Amazon EC2 instance type of the core and task nodes.
        public var slaveInstanceType: Swift.String?
        /// Specifies whether to lock the cluster to prevent the Amazon EC2 instances from being terminated by API call, user intervention, or in the event of a job-flow error.
        public var terminationProtected: Swift.Bool?
        /// Indicates whether Amazon EMR should gracefully replace core nodes that have degraded within the cluster.
        public var unhealthyNodeReplacement: Swift.Bool?

        public init(
            additionalMasterSecurityGroups: [Swift.String]? = nil,
            additionalSlaveSecurityGroups: [Swift.String]? = nil,
            ec2KeyName: Swift.String? = nil,
            ec2SubnetId: Swift.String? = nil,
            ec2SubnetIds: [Swift.String]? = nil,
            emrManagedMasterSecurityGroup: Swift.String? = nil,
            emrManagedSlaveSecurityGroup: Swift.String? = nil,
            hadoopVersion: Swift.String? = nil,
            instanceCount: Swift.Int? = nil,
            instanceFleets: [EMRClientTypes.InstanceFleetConfig]? = nil,
            instanceGroups: [EMRClientTypes.InstanceGroupConfig]? = nil,
            keepJobFlowAliveWhenNoSteps: Swift.Bool? = nil,
            masterInstanceType: Swift.String? = nil,
            placement: EMRClientTypes.PlacementType? = nil,
            serviceAccessSecurityGroup: Swift.String? = nil,
            slaveInstanceType: Swift.String? = nil,
            terminationProtected: Swift.Bool? = nil,
            unhealthyNodeReplacement: Swift.Bool? = nil
        )
        {
            self.additionalMasterSecurityGroups = additionalMasterSecurityGroups
            self.additionalSlaveSecurityGroups = additionalSlaveSecurityGroups
            self.ec2KeyName = ec2KeyName
            self.ec2SubnetId = ec2SubnetId
            self.ec2SubnetIds = ec2SubnetIds
            self.emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroup
            self.emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroup
            self.hadoopVersion = hadoopVersion
            self.instanceCount = instanceCount
            self.instanceFleets = instanceFleets
            self.instanceGroups = instanceGroups
            self.keepJobFlowAliveWhenNoSteps = keepJobFlowAliveWhenNoSteps
            self.masterInstanceType = masterInstanceType
            self.placement = placement
            self.serviceAccessSecurityGroup = serviceAccessSecurityGroup
            self.slaveInstanceType = slaveInstanceType
            self.terminationProtected = terminationProtected
            self.unhealthyNodeReplacement = unhealthyNodeReplacement
        }
    }

}

/// Input to the [RunJobFlow] operation.
public struct RunJobFlowInput {
    /// A JSON string for selecting additional features.
    public var additionalInfo: Swift.String?
    /// Applies only to Amazon EMR AMI versions 3.x and 2.x. For Amazon EMR releases 4.0 and later, ReleaseLabel is used. To specify a custom AMI, use CustomAmiID.
    public var amiVersion: Swift.String?
    /// Applies to Amazon EMR releases 4.0 and later. A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster. For a list of applications available for each Amazon EMR release version, see the [Amazon EMRRelease Guide](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/).
    public var applications: [EMRClientTypes.Application]?
    /// An IAM role for automatic scaling policies. The default role is EMR_AutoScaling_DefaultRole. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate Amazon EC2 instances in an instance group.
    public var autoScalingRole: Swift.String?
    /// An auto-termination policy for an Amazon EMR cluster. An auto-termination policy defines the amount of idle time in seconds after which a cluster automatically terminates. For alternative cluster termination options, see [Control cluster termination](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-termination.html).
    public var autoTerminationPolicy: EMRClientTypes.AutoTerminationPolicy?
    /// A list of bootstrap actions to run before Hadoop starts on the cluster nodes.
    public var bootstrapActions: [EMRClientTypes.BootstrapActionConfig]?
    /// For Amazon EMR releases 4.0 and later. The list of configurations supplied for the Amazon EMR cluster that you are creating.
    public var configurations: [EMRClientTypes.Configuration]?
    /// Available only in Amazon EMR releases 5.7.0 and later. The ID of a custom Amazon EBS-backed Linux AMI. If specified, Amazon EMR uses this AMI when it launches cluster Amazon EC2 instances. For more information about custom AMIs in Amazon EMR, see [Using a Custom AMI](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-custom-ami.html) in the Amazon EMR Management Guide. If omitted, the cluster uses the base Linux AMI for the ReleaseLabel specified. For Amazon EMR releases 2.x and 3.x, use AmiVersion instead. For information about creating a custom AMI, see [Creating an Amazon EBS-Backed Linux AMI](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html) in the Amazon Elastic Compute Cloud User Guide for Linux Instances. For information about finding an AMI ID, see [Finding a Linux AMI](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html).
    public var customAmiId: Swift.String?
    /// The IOPS, of the Amazon EBS root device volume of the Linux AMI that is used for each Amazon EC2 instance. Available in Amazon EMR releases 6.15.0 and later.
    public var ebsRootVolumeIops: Swift.Int?
    /// The size, in GiB, of the Amazon EBS root device volume of the Linux AMI that is used for each Amazon EC2 instance. Available in Amazon EMR releases 4.x and later.
    public var ebsRootVolumeSize: Swift.Int?
    /// The throughput, in MiB/s, of the Amazon EBS root device volume of the Linux AMI that is used for each Amazon EC2 instance. Available in Amazon EMR releases 6.15.0 and later.
    public var ebsRootVolumeThroughput: Swift.Int?
    /// A specification of the number and type of Amazon EC2 instances.
    /// This member is required.
    public var instances: EMRClientTypes.JobFlowInstancesConfig?
    /// Also called instance profile and Amazon EC2 role. An IAM role for an Amazon EMR cluster. The Amazon EC2 instances of the cluster assume this role. The default role is EMR_EC2_DefaultRole. In order to use the default role, you must have already created it using the CLI or console.
    public var jobFlowRole: Swift.String?
    /// Attributes for Kerberos configuration when Kerberos authentication is enabled using a security configuration. For more information see [Use Kerberos Authentication](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-kerberos.html) in the Amazon EMR Management Guide.
    public var kerberosAttributes: EMRClientTypes.KerberosAttributes?
    /// The KMS key used for encrypting log files. If a value is not provided, the logs remain encrypted by AES-256. This attribute is only available with Amazon EMR releases 5.30.0 and later, excluding Amazon EMR 6.0.0.
    public var logEncryptionKmsKeyId: Swift.String?
    /// The location in Amazon S3 to write the log files of the job flow. If a value is not provided, logs are not created.
    public var logUri: Swift.String?
    /// The specified managed scaling policy for an Amazon EMR cluster.
    public var managedScalingPolicy: EMRClientTypes.ManagedScalingPolicy?
    /// The name of the job flow.
    /// This member is required.
    public var name: Swift.String?
    /// For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and later, use Applications. A list of strings that indicates third-party software to use with the job flow that accepts a user argument list. Amazon EMR accepts and forwards the argument list to the corresponding installation script as bootstrap action arguments. For more information, see "Launch a Job Flow on the MapR Distribution for Hadoop" in the [Amazon EMR Developer Guide](https://docs.aws.amazon.com/emr/latest/DeveloperGuide/emr-dg.pdf). Supported values are:
    ///
    /// * "mapr-m3" - launch the cluster using MapR M3 Edition.
    ///
    /// * "mapr-m5" - launch the cluster using MapR M5 Edition.
    ///
    /// * "mapr" with the user arguments specifying "--edition,m3" or "--edition,m5" - launch the job flow using MapR M3 or M5 Edition respectively.
    ///
    /// * "mapr-m7" - launch the cluster using MapR M7 Edition.
    ///
    /// * "hunk" - launch the cluster with the Hunk Big Data Analytics Platform.
    ///
    /// * "hue"- launch the cluster with Hue installed.
    ///
    /// * "spark" - launch the cluster with Apache Spark installed.
    ///
    /// * "ganglia" - launch the cluster with the Ganglia Monitoring System installed.
    public var newSupportedProducts: [EMRClientTypes.SupportedProductConfig]?
    /// Specifies a particular Amazon Linux release for all nodes in a cluster launch RunJobFlow request. If a release is not specified, Amazon EMR uses the latest validated Amazon Linux release for cluster launch.
    public var osReleaseLabel: Swift.String?
    /// The specified placement group configuration for an Amazon EMR cluster.
    public var placementGroupConfigs: [EMRClientTypes.PlacementGroupConfig]?
    /// The Amazon EMR release label, which determines the version of open-source application packages installed on the cluster. Release labels are in the form emr-x.x.x, where x.x.x is an Amazon EMR release version such as emr-5.14.0. For more information about Amazon EMR release versions and included application versions and features, see [https://docs.aws.amazon.com/emr/latest/ReleaseGuide/](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/). The release label applies only to Amazon EMR releases version 4.0 and later. Earlier versions use AmiVersion.
    public var releaseLabel: Swift.String?
    /// Applies only when CustomAmiID is used. Specifies which updates from the Amazon Linux AMI package repositories to apply automatically when the instance boots using the AMI. If omitted, the default is SECURITY, which indicates that only security updates are applied. If NONE is specified, no updates are applied, and all updates must be applied manually.
    public var repoUpgradeOnBoot: EMRClientTypes.RepoUpgradeOnBoot?
    /// Specifies the way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. TERMINATE_AT_INSTANCE_HOUR indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. TERMINATE_AT_TASK_COMPLETION indicates that Amazon EMR adds nodes to a deny list and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. TERMINATE_AT_TASK_COMPLETION available only in Amazon EMR releases 4.1.0 and later, and is the default for releases of Amazon EMR earlier than 5.1.0.
    public var scaleDownBehavior: EMRClientTypes.ScaleDownBehavior?
    /// The name of a security configuration to apply to the cluster.
    public var securityConfiguration: Swift.String?
    /// The IAM role that Amazon EMR assumes in order to access Amazon Web Services resources on your behalf. If you've created a custom service role path, you must specify it for the service role when you launch your cluster.
    public var serviceRole: Swift.String?
    /// Specifies the number of steps that can be executed concurrently. The default value is 1. The maximum value is 256.
    public var stepConcurrencyLevel: Swift.Int?
    /// A list of steps to run.
    public var steps: [EMRClientTypes.StepConfig]?
    /// For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and later, use Applications. A list of strings that indicates third-party software to use. For more information, see the [Amazon EMR Developer Guide](https://docs.aws.amazon.com/emr/latest/DeveloperGuide/emr-dg.pdf). Currently supported values are:
    ///
    /// * "mapr-m3" - launch the job flow using MapR M3 Edition.
    ///
    /// * "mapr-m5" - launch the job flow using MapR M5 Edition.
    public var supportedProducts: [Swift.String]?
    /// A list of tags to associate with a cluster and propagate to Amazon EC2 instances.
    public var tags: [EMRClientTypes.Tag]?
    /// The VisibleToAllUsers parameter is no longer supported. By default, the value is set to true. Setting it to false now has no effect. Set this value to true so that IAM principals in the Amazon Web Services account associated with the cluster can perform Amazon EMR actions on the cluster that their IAM policies allow. This value defaults to true for clusters created using the Amazon EMR API or the CLI [create-cluster](https://docs.aws.amazon.com/cli/latest/reference/emr/create-cluster.html) command. When set to false, only the IAM principal that created the cluster and the Amazon Web Services account root user can perform Amazon EMR actions for the cluster, regardless of the IAM permissions policies attached to other IAM principals. For more information, see [Understanding the Amazon EMR cluster VisibleToAllUsers setting](https://docs.aws.amazon.com/emr/latest/ManagementGuide/security_IAM_emr-with-IAM.html#security_set_visible_to_all_users) in the Amazon EMR Management Guide.
    public var visibleToAllUsers: Swift.Bool?

    public init(
        additionalInfo: Swift.String? = nil,
        amiVersion: Swift.String? = nil,
        applications: [EMRClientTypes.Application]? = nil,
        autoScalingRole: Swift.String? = nil,
        autoTerminationPolicy: EMRClientTypes.AutoTerminationPolicy? = nil,
        bootstrapActions: [EMRClientTypes.BootstrapActionConfig]? = nil,
        configurations: [EMRClientTypes.Configuration]? = nil,
        customAmiId: Swift.String? = nil,
        ebsRootVolumeIops: Swift.Int? = nil,
        ebsRootVolumeSize: Swift.Int? = nil,
        ebsRootVolumeThroughput: Swift.Int? = nil,
        instances: EMRClientTypes.JobFlowInstancesConfig? = nil,
        jobFlowRole: Swift.String? = nil,
        kerberosAttributes: EMRClientTypes.KerberosAttributes? = nil,
        logEncryptionKmsKeyId: Swift.String? = nil,
        logUri: Swift.String? = nil,
        managedScalingPolicy: EMRClientTypes.ManagedScalingPolicy? = nil,
        name: Swift.String? = nil,
        newSupportedProducts: [EMRClientTypes.SupportedProductConfig]? = nil,
        osReleaseLabel: Swift.String? = nil,
        placementGroupConfigs: [EMRClientTypes.PlacementGroupConfig]? = nil,
        releaseLabel: Swift.String? = nil,
        repoUpgradeOnBoot: EMRClientTypes.RepoUpgradeOnBoot? = nil,
        scaleDownBehavior: EMRClientTypes.ScaleDownBehavior? = nil,
        securityConfiguration: Swift.String? = nil,
        serviceRole: Swift.String? = nil,
        stepConcurrencyLevel: Swift.Int? = nil,
        steps: [EMRClientTypes.StepConfig]? = nil,
        supportedProducts: [Swift.String]? = nil,
        tags: [EMRClientTypes.Tag]? = nil,
        visibleToAllUsers: Swift.Bool? = nil
    )
    {
        self.additionalInfo = additionalInfo
        self.amiVersion = amiVersion
        self.applications = applications
        self.autoScalingRole = autoScalingRole
        self.autoTerminationPolicy = autoTerminationPolicy
        self.bootstrapActions = bootstrapActions
        self.configurations = configurations
        self.customAmiId = customAmiId
        self.ebsRootVolumeIops = ebsRootVolumeIops
        self.ebsRootVolumeSize = ebsRootVolumeSize
        self.ebsRootVolumeThroughput = ebsRootVolumeThroughput
        self.instances = instances
        self.jobFlowRole = jobFlowRole
        self.kerberosAttributes = kerberosAttributes
        self.logEncryptionKmsKeyId = logEncryptionKmsKeyId
        self.logUri = logUri
        self.managedScalingPolicy = managedScalingPolicy
        self.name = name
        self.newSupportedProducts = newSupportedProducts
        self.osReleaseLabel = osReleaseLabel
        self.placementGroupConfigs = placementGroupConfigs
        self.releaseLabel = releaseLabel
        self.repoUpgradeOnBoot = repoUpgradeOnBoot
        self.scaleDownBehavior = scaleDownBehavior
        self.securityConfiguration = securityConfiguration
        self.serviceRole = serviceRole
        self.stepConcurrencyLevel = stepConcurrencyLevel
        self.steps = steps
        self.supportedProducts = supportedProducts
        self.tags = tags
        self.visibleToAllUsers = visibleToAllUsers
    }
}

extension AddInstanceFleetInput {

    static func urlPathProvider(_ value: AddInstanceFleetInput) -> Swift.String? {
        return "/"
    }
}

extension AddInstanceGroupsInput {

    static func urlPathProvider(_ value: AddInstanceGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension AddJobFlowStepsInput {

    static func urlPathProvider(_ value: AddJobFlowStepsInput) -> Swift.String? {
        return "/"
    }
}

extension AddTagsInput {

    static func urlPathProvider(_ value: AddTagsInput) -> Swift.String? {
        return "/"
    }
}

extension CancelStepsInput {

    static func urlPathProvider(_ value: CancelStepsInput) -> Swift.String? {
        return "/"
    }
}

extension CreateSecurityConfigurationInput {

    static func urlPathProvider(_ value: CreateSecurityConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension CreateStudioInput {

    static func urlPathProvider(_ value: CreateStudioInput) -> Swift.String? {
        return "/"
    }
}

extension CreateStudioSessionMappingInput {

    static func urlPathProvider(_ value: CreateStudioSessionMappingInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteSecurityConfigurationInput {

    static func urlPathProvider(_ value: DeleteSecurityConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteStudioInput {

    static func urlPathProvider(_ value: DeleteStudioInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteStudioSessionMappingInput {

    static func urlPathProvider(_ value: DeleteStudioSessionMappingInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeClusterInput {

    static func urlPathProvider(_ value: DescribeClusterInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeJobFlowsInput {

    static func urlPathProvider(_ value: DescribeJobFlowsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeNotebookExecutionInput {

    static func urlPathProvider(_ value: DescribeNotebookExecutionInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeReleaseLabelInput {

    static func urlPathProvider(_ value: DescribeReleaseLabelInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeSecurityConfigurationInput {

    static func urlPathProvider(_ value: DescribeSecurityConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeStepInput {

    static func urlPathProvider(_ value: DescribeStepInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeStudioInput {

    static func urlPathProvider(_ value: DescribeStudioInput) -> Swift.String? {
        return "/"
    }
}

extension GetAutoTerminationPolicyInput {

    static func urlPathProvider(_ value: GetAutoTerminationPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension GetBlockPublicAccessConfigurationInput {

    static func urlPathProvider(_ value: GetBlockPublicAccessConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension GetClusterSessionCredentialsInput {

    static func urlPathProvider(_ value: GetClusterSessionCredentialsInput) -> Swift.String? {
        return "/"
    }
}

extension GetManagedScalingPolicyInput {

    static func urlPathProvider(_ value: GetManagedScalingPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension GetStudioSessionMappingInput {

    static func urlPathProvider(_ value: GetStudioSessionMappingInput) -> Swift.String? {
        return "/"
    }
}

extension ListBootstrapActionsInput {

    static func urlPathProvider(_ value: ListBootstrapActionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListClustersInput {

    static func urlPathProvider(_ value: ListClustersInput) -> Swift.String? {
        return "/"
    }
}

extension ListInstanceFleetsInput {

    static func urlPathProvider(_ value: ListInstanceFleetsInput) -> Swift.String? {
        return "/"
    }
}

extension ListInstanceGroupsInput {

    static func urlPathProvider(_ value: ListInstanceGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension ListInstancesInput {

    static func urlPathProvider(_ value: ListInstancesInput) -> Swift.String? {
        return "/"
    }
}

extension ListNotebookExecutionsInput {

    static func urlPathProvider(_ value: ListNotebookExecutionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListReleaseLabelsInput {

    static func urlPathProvider(_ value: ListReleaseLabelsInput) -> Swift.String? {
        return "/"
    }
}

extension ListSecurityConfigurationsInput {

    static func urlPathProvider(_ value: ListSecurityConfigurationsInput) -> Swift.String? {
        return "/"
    }
}

extension ListStepsInput {

    static func urlPathProvider(_ value: ListStepsInput) -> Swift.String? {
        return "/"
    }
}

extension ListStudiosInput {

    static func urlPathProvider(_ value: ListStudiosInput) -> Swift.String? {
        return "/"
    }
}

extension ListStudioSessionMappingsInput {

    static func urlPathProvider(_ value: ListStudioSessionMappingsInput) -> Swift.String? {
        return "/"
    }
}

extension ListSupportedInstanceTypesInput {

    static func urlPathProvider(_ value: ListSupportedInstanceTypesInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyClusterInput {

    static func urlPathProvider(_ value: ModifyClusterInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyInstanceFleetInput {

    static func urlPathProvider(_ value: ModifyInstanceFleetInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyInstanceGroupsInput {

    static func urlPathProvider(_ value: ModifyInstanceGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension PutAutoScalingPolicyInput {

    static func urlPathProvider(_ value: PutAutoScalingPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension PutAutoTerminationPolicyInput {

    static func urlPathProvider(_ value: PutAutoTerminationPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension PutBlockPublicAccessConfigurationInput {

    static func urlPathProvider(_ value: PutBlockPublicAccessConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension PutManagedScalingPolicyInput {

    static func urlPathProvider(_ value: PutManagedScalingPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension RemoveAutoScalingPolicyInput {

    static func urlPathProvider(_ value: RemoveAutoScalingPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension RemoveAutoTerminationPolicyInput {

    static func urlPathProvider(_ value: RemoveAutoTerminationPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension RemoveManagedScalingPolicyInput {

    static func urlPathProvider(_ value: RemoveManagedScalingPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension RemoveTagsInput {

    static func urlPathProvider(_ value: RemoveTagsInput) -> Swift.String? {
        return "/"
    }
}

extension RunJobFlowInput {

    static func urlPathProvider(_ value: RunJobFlowInput) -> Swift.String? {
        return "/"
    }
}

extension SetKeepJobFlowAliveWhenNoStepsInput {

    static func urlPathProvider(_ value: SetKeepJobFlowAliveWhenNoStepsInput) -> Swift.String? {
        return "/"
    }
}

extension SetTerminationProtectionInput {

    static func urlPathProvider(_ value: SetTerminationProtectionInput) -> Swift.String? {
        return "/"
    }
}

extension SetUnhealthyNodeReplacementInput {

    static func urlPathProvider(_ value: SetUnhealthyNodeReplacementInput) -> Swift.String? {
        return "/"
    }
}

extension SetVisibleToAllUsersInput {

    static func urlPathProvider(_ value: SetVisibleToAllUsersInput) -> Swift.String? {
        return "/"
    }
}

extension StartNotebookExecutionInput {

    static func urlPathProvider(_ value: StartNotebookExecutionInput) -> Swift.String? {
        return "/"
    }
}

extension StopNotebookExecutionInput {

    static func urlPathProvider(_ value: StopNotebookExecutionInput) -> Swift.String? {
        return "/"
    }
}

extension TerminateJobFlowsInput {

    static func urlPathProvider(_ value: TerminateJobFlowsInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateStudioInput {

    static func urlPathProvider(_ value: UpdateStudioInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateStudioSessionMappingInput {

    static func urlPathProvider(_ value: UpdateStudioSessionMappingInput) -> Swift.String? {
        return "/"
    }
}

extension AddInstanceFleetInput {

    static func write(value: AddInstanceFleetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterId"].write(value.clusterId)
        try writer["InstanceFleet"].write(value.instanceFleet, with: EMRClientTypes.InstanceFleetConfig.write(value:to:))
    }
}

extension AddInstanceGroupsInput {

    static func write(value: AddInstanceGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InstanceGroups"].writeList(value.instanceGroups, memberWritingClosure: EMRClientTypes.InstanceGroupConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["JobFlowId"].write(value.jobFlowId)
    }
}

extension AddJobFlowStepsInput {

    static func write(value: AddJobFlowStepsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExecutionRoleArn"].write(value.executionRoleArn)
        try writer["JobFlowId"].write(value.jobFlowId)
        try writer["Steps"].writeList(value.steps, memberWritingClosure: EMRClientTypes.StepConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension AddTagsInput {

    static func write(value: AddTagsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceId"].write(value.resourceId)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: EMRClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CancelStepsInput {

    static func write(value: CancelStepsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterId"].write(value.clusterId)
        try writer["StepCancellationOption"].write(value.stepCancellationOption)
        try writer["StepIds"].writeList(value.stepIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateSecurityConfigurationInput {

    static func write(value: CreateSecurityConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["SecurityConfiguration"].write(value.securityConfiguration)
    }
}

extension CreateStudioInput {

    static func write(value: CreateStudioInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AuthMode"].write(value.authMode)
        try writer["DefaultS3Location"].write(value.defaultS3Location)
        try writer["Description"].write(value.description)
        try writer["EncryptionKeyArn"].write(value.encryptionKeyArn)
        try writer["EngineSecurityGroupId"].write(value.engineSecurityGroupId)
        try writer["IdcInstanceArn"].write(value.idcInstanceArn)
        try writer["IdcUserAssignment"].write(value.idcUserAssignment)
        try writer["IdpAuthUrl"].write(value.idpAuthUrl)
        try writer["IdpRelayStateParameterName"].write(value.idpRelayStateParameterName)
        try writer["Name"].write(value.name)
        try writer["ServiceRole"].write(value.serviceRole)
        try writer["SubnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: EMRClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TrustedIdentityPropagationEnabled"].write(value.trustedIdentityPropagationEnabled)
        try writer["UserRole"].write(value.userRole)
        try writer["VpcId"].write(value.vpcId)
        try writer["WorkspaceSecurityGroupId"].write(value.workspaceSecurityGroupId)
    }
}

extension CreateStudioSessionMappingInput {

    static func write(value: CreateStudioSessionMappingInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IdentityId"].write(value.identityId)
        try writer["IdentityName"].write(value.identityName)
        try writer["IdentityType"].write(value.identityType)
        try writer["SessionPolicyArn"].write(value.sessionPolicyArn)
        try writer["StudioId"].write(value.studioId)
    }
}

extension DeleteSecurityConfigurationInput {

    static func write(value: DeleteSecurityConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DeleteStudioInput {

    static func write(value: DeleteStudioInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["StudioId"].write(value.studioId)
    }
}

extension DeleteStudioSessionMappingInput {

    static func write(value: DeleteStudioSessionMappingInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IdentityId"].write(value.identityId)
        try writer["IdentityName"].write(value.identityName)
        try writer["IdentityType"].write(value.identityType)
        try writer["StudioId"].write(value.studioId)
    }
}

extension DescribeClusterInput {

    static func write(value: DescribeClusterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterId"].write(value.clusterId)
    }
}

extension DescribeJobFlowsInput {

    static func write(value: DescribeJobFlowsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreatedAfter"].writeTimestamp(value.createdAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreatedBefore"].writeTimestamp(value.createdBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["JobFlowIds"].writeList(value.jobFlowIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["JobFlowStates"].writeList(value.jobFlowStates, memberWritingClosure: SmithyReadWrite.WritingClosureBox<EMRClientTypes.JobFlowExecutionState>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DescribeNotebookExecutionInput {

    static func write(value: DescribeNotebookExecutionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NotebookExecutionId"].write(value.notebookExecutionId)
    }
}

extension DescribeReleaseLabelInput {

    static func write(value: DescribeReleaseLabelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ReleaseLabel"].write(value.releaseLabel)
    }
}

extension DescribeSecurityConfigurationInput {

    static func write(value: DescribeSecurityConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DescribeStepInput {

    static func write(value: DescribeStepInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterId"].write(value.clusterId)
        try writer["StepId"].write(value.stepId)
    }
}

extension DescribeStudioInput {

    static func write(value: DescribeStudioInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["StudioId"].write(value.studioId)
    }
}

extension GetAutoTerminationPolicyInput {

    static func write(value: GetAutoTerminationPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterId"].write(value.clusterId)
    }
}

extension GetBlockPublicAccessConfigurationInput {

    static func write(value: GetBlockPublicAccessConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension GetClusterSessionCredentialsInput {

    static func write(value: GetClusterSessionCredentialsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterId"].write(value.clusterId)
        try writer["ExecutionRoleArn"].write(value.executionRoleArn)
    }
}

extension GetManagedScalingPolicyInput {

    static func write(value: GetManagedScalingPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterId"].write(value.clusterId)
    }
}

extension GetStudioSessionMappingInput {

    static func write(value: GetStudioSessionMappingInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IdentityId"].write(value.identityId)
        try writer["IdentityName"].write(value.identityName)
        try writer["IdentityType"].write(value.identityType)
        try writer["StudioId"].write(value.studioId)
    }
}

extension ListBootstrapActionsInput {

    static func write(value: ListBootstrapActionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterId"].write(value.clusterId)
        try writer["Marker"].write(value.marker)
    }
}

extension ListClustersInput {

    static func write(value: ListClustersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterStates"].writeList(value.clusterStates, memberWritingClosure: SmithyReadWrite.WritingClosureBox<EMRClientTypes.ClusterState>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CreatedAfter"].writeTimestamp(value.createdAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreatedBefore"].writeTimestamp(value.createdBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["Marker"].write(value.marker)
    }
}

extension ListInstanceFleetsInput {

    static func write(value: ListInstanceFleetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterId"].write(value.clusterId)
        try writer["Marker"].write(value.marker)
    }
}

extension ListInstanceGroupsInput {

    static func write(value: ListInstanceGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterId"].write(value.clusterId)
        try writer["Marker"].write(value.marker)
    }
}

extension ListInstancesInput {

    static func write(value: ListInstancesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterId"].write(value.clusterId)
        try writer["InstanceFleetId"].write(value.instanceFleetId)
        try writer["InstanceFleetType"].write(value.instanceFleetType)
        try writer["InstanceGroupId"].write(value.instanceGroupId)
        try writer["InstanceGroupTypes"].writeList(value.instanceGroupTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<EMRClientTypes.InstanceGroupType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InstanceStates"].writeList(value.instanceStates, memberWritingClosure: SmithyReadWrite.WritingClosureBox<EMRClientTypes.InstanceState>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Marker"].write(value.marker)
    }
}

extension ListNotebookExecutionsInput {

    static func write(value: ListNotebookExecutionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EditorId"].write(value.editorId)
        try writer["ExecutionEngineId"].write(value.executionEngineId)
        try writer["From"].writeTimestamp(value.from, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["Marker"].write(value.marker)
        try writer["Status"].write(value.status)
        try writer["To"].writeTimestamp(value.to, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ListReleaseLabelsInput {

    static func write(value: ListReleaseLabelsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filters"].write(value.filters, with: EMRClientTypes.ReleaseLabelFilter.write(value:to:))
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListSecurityConfigurationsInput {

    static func write(value: ListSecurityConfigurationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Marker"].write(value.marker)
    }
}

extension ListStepsInput {

    static func write(value: ListStepsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterId"].write(value.clusterId)
        try writer["Marker"].write(value.marker)
        try writer["StepIds"].writeList(value.stepIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StepStates"].writeList(value.stepStates, memberWritingClosure: SmithyReadWrite.WritingClosureBox<EMRClientTypes.StepState>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ListStudiosInput {

    static func write(value: ListStudiosInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Marker"].write(value.marker)
    }
}

extension ListStudioSessionMappingsInput {

    static func write(value: ListStudioSessionMappingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IdentityType"].write(value.identityType)
        try writer["Marker"].write(value.marker)
        try writer["StudioId"].write(value.studioId)
    }
}

extension ListSupportedInstanceTypesInput {

    static func write(value: ListSupportedInstanceTypesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Marker"].write(value.marker)
        try writer["ReleaseLabel"].write(value.releaseLabel)
    }
}

extension ModifyClusterInput {

    static func write(value: ModifyClusterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterId"].write(value.clusterId)
        try writer["StepConcurrencyLevel"].write(value.stepConcurrencyLevel)
    }
}

extension ModifyInstanceFleetInput {

    static func write(value: ModifyInstanceFleetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterId"].write(value.clusterId)
        try writer["InstanceFleet"].write(value.instanceFleet, with: EMRClientTypes.InstanceFleetModifyConfig.write(value:to:))
    }
}

extension ModifyInstanceGroupsInput {

    static func write(value: ModifyInstanceGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterId"].write(value.clusterId)
        try writer["InstanceGroups"].writeList(value.instanceGroups, memberWritingClosure: EMRClientTypes.InstanceGroupModifyConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PutAutoScalingPolicyInput {

    static func write(value: PutAutoScalingPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingPolicy"].write(value.autoScalingPolicy, with: EMRClientTypes.AutoScalingPolicy.write(value:to:))
        try writer["ClusterId"].write(value.clusterId)
        try writer["InstanceGroupId"].write(value.instanceGroupId)
    }
}

extension PutAutoTerminationPolicyInput {

    static func write(value: PutAutoTerminationPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoTerminationPolicy"].write(value.autoTerminationPolicy, with: EMRClientTypes.AutoTerminationPolicy.write(value:to:))
        try writer["ClusterId"].write(value.clusterId)
    }
}

extension PutBlockPublicAccessConfigurationInput {

    static func write(value: PutBlockPublicAccessConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BlockPublicAccessConfiguration"].write(value.blockPublicAccessConfiguration, with: EMRClientTypes.BlockPublicAccessConfiguration.write(value:to:))
    }
}

extension PutManagedScalingPolicyInput {

    static func write(value: PutManagedScalingPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterId"].write(value.clusterId)
        try writer["ManagedScalingPolicy"].write(value.managedScalingPolicy, with: EMRClientTypes.ManagedScalingPolicy.write(value:to:))
    }
}

extension RemoveAutoScalingPolicyInput {

    static func write(value: RemoveAutoScalingPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterId"].write(value.clusterId)
        try writer["InstanceGroupId"].write(value.instanceGroupId)
    }
}

extension RemoveAutoTerminationPolicyInput {

    static func write(value: RemoveAutoTerminationPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterId"].write(value.clusterId)
    }
}

extension RemoveManagedScalingPolicyInput {

    static func write(value: RemoveManagedScalingPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterId"].write(value.clusterId)
    }
}

extension RemoveTagsInput {

    static func write(value: RemoveTagsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceId"].write(value.resourceId)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension RunJobFlowInput {

    static func write(value: RunJobFlowInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdditionalInfo"].write(value.additionalInfo)
        try writer["AmiVersion"].write(value.amiVersion)
        try writer["Applications"].writeList(value.applications, memberWritingClosure: EMRClientTypes.Application.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AutoScalingRole"].write(value.autoScalingRole)
        try writer["AutoTerminationPolicy"].write(value.autoTerminationPolicy, with: EMRClientTypes.AutoTerminationPolicy.write(value:to:))
        try writer["BootstrapActions"].writeList(value.bootstrapActions, memberWritingClosure: EMRClientTypes.BootstrapActionConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Configurations"].writeList(value.configurations, memberWritingClosure: EMRClientTypes.Configuration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CustomAmiId"].write(value.customAmiId)
        try writer["EbsRootVolumeIops"].write(value.ebsRootVolumeIops)
        try writer["EbsRootVolumeSize"].write(value.ebsRootVolumeSize)
        try writer["EbsRootVolumeThroughput"].write(value.ebsRootVolumeThroughput)
        try writer["Instances"].write(value.instances, with: EMRClientTypes.JobFlowInstancesConfig.write(value:to:))
        try writer["JobFlowRole"].write(value.jobFlowRole)
        try writer["KerberosAttributes"].write(value.kerberosAttributes, with: EMRClientTypes.KerberosAttributes.write(value:to:))
        try writer["LogEncryptionKmsKeyId"].write(value.logEncryptionKmsKeyId)
        try writer["LogUri"].write(value.logUri)
        try writer["ManagedScalingPolicy"].write(value.managedScalingPolicy, with: EMRClientTypes.ManagedScalingPolicy.write(value:to:))
        try writer["Name"].write(value.name)
        try writer["NewSupportedProducts"].writeList(value.newSupportedProducts, memberWritingClosure: EMRClientTypes.SupportedProductConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OSReleaseLabel"].write(value.osReleaseLabel)
        try writer["PlacementGroupConfigs"].writeList(value.placementGroupConfigs, memberWritingClosure: EMRClientTypes.PlacementGroupConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ReleaseLabel"].write(value.releaseLabel)
        try writer["RepoUpgradeOnBoot"].write(value.repoUpgradeOnBoot)
        try writer["ScaleDownBehavior"].write(value.scaleDownBehavior)
        try writer["SecurityConfiguration"].write(value.securityConfiguration)
        try writer["ServiceRole"].write(value.serviceRole)
        try writer["StepConcurrencyLevel"].write(value.stepConcurrencyLevel)
        try writer["Steps"].writeList(value.steps, memberWritingClosure: EMRClientTypes.StepConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SupportedProducts"].writeList(value.supportedProducts, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: EMRClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VisibleToAllUsers"].write(value.visibleToAllUsers)
    }
}

extension SetKeepJobFlowAliveWhenNoStepsInput {

    static func write(value: SetKeepJobFlowAliveWhenNoStepsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobFlowIds"].writeList(value.jobFlowIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KeepJobFlowAliveWhenNoSteps"].write(value.keepJobFlowAliveWhenNoSteps)
    }
}

extension SetTerminationProtectionInput {

    static func write(value: SetTerminationProtectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobFlowIds"].writeList(value.jobFlowIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TerminationProtected"].write(value.terminationProtected)
    }
}

extension SetUnhealthyNodeReplacementInput {

    static func write(value: SetUnhealthyNodeReplacementInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobFlowIds"].writeList(value.jobFlowIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UnhealthyNodeReplacement"].write(value.unhealthyNodeReplacement)
    }
}

extension SetVisibleToAllUsersInput {

    static func write(value: SetVisibleToAllUsersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobFlowIds"].writeList(value.jobFlowIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VisibleToAllUsers"].write(value.visibleToAllUsers)
    }
}

extension StartNotebookExecutionInput {

    static func write(value: StartNotebookExecutionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EditorId"].write(value.editorId)
        try writer["EnvironmentVariables"].writeMap(value.environmentVariables, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ExecutionEngine"].write(value.executionEngine, with: EMRClientTypes.ExecutionEngineConfig.write(value:to:))
        try writer["NotebookExecutionName"].write(value.notebookExecutionName)
        try writer["NotebookInstanceSecurityGroupId"].write(value.notebookInstanceSecurityGroupId)
        try writer["NotebookParams"].write(value.notebookParams)
        try writer["NotebookS3Location"].write(value.notebookS3Location, with: EMRClientTypes.NotebookS3LocationFromInput.write(value:to:))
        try writer["OutputNotebookFormat"].write(value.outputNotebookFormat)
        try writer["OutputNotebookS3Location"].write(value.outputNotebookS3Location, with: EMRClientTypes.OutputNotebookS3LocationFromInput.write(value:to:))
        try writer["RelativePath"].write(value.relativePath)
        try writer["ServiceRole"].write(value.serviceRole)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: EMRClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension StopNotebookExecutionInput {

    static func write(value: StopNotebookExecutionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NotebookExecutionId"].write(value.notebookExecutionId)
    }
}

extension TerminateJobFlowsInput {

    static func write(value: TerminateJobFlowsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobFlowIds"].writeList(value.jobFlowIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateStudioInput {

    static func write(value: UpdateStudioInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DefaultS3Location"].write(value.defaultS3Location)
        try writer["Description"].write(value.description)
        try writer["EncryptionKeyArn"].write(value.encryptionKeyArn)
        try writer["Name"].write(value.name)
        try writer["StudioId"].write(value.studioId)
        try writer["SubnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateStudioSessionMappingInput {

    static func write(value: UpdateStudioSessionMappingInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IdentityId"].write(value.identityId)
        try writer["IdentityName"].write(value.identityName)
        try writer["IdentityType"].write(value.identityType)
        try writer["SessionPolicyArn"].write(value.sessionPolicyArn)
        try writer["StudioId"].write(value.studioId)
    }
}

extension AddInstanceFleetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddInstanceFleetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AddInstanceFleetOutput()
        value.clusterArn = try reader["ClusterArn"].readIfPresent()
        value.clusterId = try reader["ClusterId"].readIfPresent()
        value.instanceFleetId = try reader["InstanceFleetId"].readIfPresent()
        return value
    }
}

extension AddInstanceGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddInstanceGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AddInstanceGroupsOutput()
        value.clusterArn = try reader["ClusterArn"].readIfPresent()
        value.instanceGroupIds = try reader["InstanceGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.jobFlowId = try reader["JobFlowId"].readIfPresent()
        return value
    }
}

extension AddJobFlowStepsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddJobFlowStepsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AddJobFlowStepsOutput()
        value.stepIds = try reader["StepIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AddTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddTagsOutput {
        return AddTagsOutput()
    }
}

extension CancelStepsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelStepsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CancelStepsOutput()
        value.cancelStepsInfoList = try reader["CancelStepsInfoList"].readListIfPresent(memberReadingClosure: EMRClientTypes.CancelStepsInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateSecurityConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSecurityConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateSecurityConfigurationOutput()
        value.creationDateTime = try reader["CreationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.name = try reader["Name"].readIfPresent() ?? ""
        return value
    }
}

extension CreateStudioOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateStudioOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateStudioOutput()
        value.studioId = try reader["StudioId"].readIfPresent()
        value.url = try reader["Url"].readIfPresent()
        return value
    }
}

extension CreateStudioSessionMappingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateStudioSessionMappingOutput {
        return CreateStudioSessionMappingOutput()
    }
}

extension DeleteSecurityConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSecurityConfigurationOutput {
        return DeleteSecurityConfigurationOutput()
    }
}

extension DeleteStudioOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteStudioOutput {
        return DeleteStudioOutput()
    }
}

extension DeleteStudioSessionMappingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteStudioSessionMappingOutput {
        return DeleteStudioSessionMappingOutput()
    }
}

extension DescribeClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeClusterOutput()
        value.cluster = try reader["Cluster"].readIfPresent(with: EMRClientTypes.Cluster.read(from:))
        return value
    }
}

extension DescribeJobFlowsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeJobFlowsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeJobFlowsOutput()
        value.jobFlows = try reader["JobFlows"].readListIfPresent(memberReadingClosure: EMRClientTypes.JobFlowDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeNotebookExecutionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeNotebookExecutionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeNotebookExecutionOutput()
        value.notebookExecution = try reader["NotebookExecution"].readIfPresent(with: EMRClientTypes.NotebookExecution.read(from:))
        return value
    }
}

extension DescribeReleaseLabelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeReleaseLabelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeReleaseLabelOutput()
        value.applications = try reader["Applications"].readListIfPresent(memberReadingClosure: EMRClientTypes.SimplifiedApplication.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.availableOSReleases = try reader["AvailableOSReleases"].readListIfPresent(memberReadingClosure: EMRClientTypes.OSRelease.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.releaseLabel = try reader["ReleaseLabel"].readIfPresent()
        return value
    }
}

extension DescribeSecurityConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeSecurityConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeSecurityConfigurationOutput()
        value.creationDateTime = try reader["CreationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.securityConfiguration = try reader["SecurityConfiguration"].readIfPresent()
        return value
    }
}

extension DescribeStepOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeStepOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeStepOutput()
        value.step = try reader["Step"].readIfPresent(with: EMRClientTypes.Step.read(from:))
        return value
    }
}

extension DescribeStudioOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeStudioOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeStudioOutput()
        value.studio = try reader["Studio"].readIfPresent(with: EMRClientTypes.Studio.read(from:))
        return value
    }
}

extension GetAutoTerminationPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAutoTerminationPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAutoTerminationPolicyOutput()
        value.autoTerminationPolicy = try reader["AutoTerminationPolicy"].readIfPresent(with: EMRClientTypes.AutoTerminationPolicy.read(from:))
        return value
    }
}

extension GetBlockPublicAccessConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBlockPublicAccessConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBlockPublicAccessConfigurationOutput()
        value.blockPublicAccessConfiguration = try reader["BlockPublicAccessConfiguration"].readIfPresent(with: EMRClientTypes.BlockPublicAccessConfiguration.read(from:))
        value.blockPublicAccessConfigurationMetadata = try reader["BlockPublicAccessConfigurationMetadata"].readIfPresent(with: EMRClientTypes.BlockPublicAccessConfigurationMetadata.read(from:))
        return value
    }
}

extension GetClusterSessionCredentialsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetClusterSessionCredentialsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetClusterSessionCredentialsOutput()
        value.credentials = try reader["Credentials"].readIfPresent(with: EMRClientTypes.Credentials.read(from:))
        value.expiresAt = try reader["ExpiresAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension GetManagedScalingPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetManagedScalingPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetManagedScalingPolicyOutput()
        value.managedScalingPolicy = try reader["ManagedScalingPolicy"].readIfPresent(with: EMRClientTypes.ManagedScalingPolicy.read(from:))
        return value
    }
}

extension GetStudioSessionMappingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetStudioSessionMappingOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetStudioSessionMappingOutput()
        value.sessionMapping = try reader["SessionMapping"].readIfPresent(with: EMRClientTypes.SessionMappingDetail.read(from:))
        return value
    }
}

extension ListBootstrapActionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBootstrapActionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListBootstrapActionsOutput()
        value.bootstrapActions = try reader["BootstrapActions"].readListIfPresent(memberReadingClosure: EMRClientTypes.Command.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension ListClustersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListClustersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListClustersOutput()
        value.clusters = try reader["Clusters"].readListIfPresent(memberReadingClosure: EMRClientTypes.ClusterSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension ListInstanceFleetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListInstanceFleetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListInstanceFleetsOutput()
        value.instanceFleets = try reader["InstanceFleets"].readListIfPresent(memberReadingClosure: EMRClientTypes.InstanceFleet.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension ListInstanceGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListInstanceGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListInstanceGroupsOutput()
        value.instanceGroups = try reader["InstanceGroups"].readListIfPresent(memberReadingClosure: EMRClientTypes.InstanceGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension ListInstancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListInstancesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListInstancesOutput()
        value.instances = try reader["Instances"].readListIfPresent(memberReadingClosure: EMRClientTypes.Instance.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension ListNotebookExecutionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListNotebookExecutionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListNotebookExecutionsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.notebookExecutions = try reader["NotebookExecutions"].readListIfPresent(memberReadingClosure: EMRClientTypes.NotebookExecutionSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListReleaseLabelsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListReleaseLabelsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListReleaseLabelsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.releaseLabels = try reader["ReleaseLabels"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSecurityConfigurationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSecurityConfigurationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSecurityConfigurationsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.securityConfigurations = try reader["SecurityConfigurations"].readListIfPresent(memberReadingClosure: EMRClientTypes.SecurityConfigurationSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListStepsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListStepsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListStepsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.steps = try reader["Steps"].readListIfPresent(memberReadingClosure: EMRClientTypes.StepSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListStudiosOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListStudiosOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListStudiosOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.studios = try reader["Studios"].readListIfPresent(memberReadingClosure: EMRClientTypes.StudioSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListStudioSessionMappingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListStudioSessionMappingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListStudioSessionMappingsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.sessionMappings = try reader["SessionMappings"].readListIfPresent(memberReadingClosure: EMRClientTypes.SessionMappingSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSupportedInstanceTypesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSupportedInstanceTypesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSupportedInstanceTypesOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.supportedInstanceTypes = try reader["SupportedInstanceTypes"].readListIfPresent(memberReadingClosure: EMRClientTypes.SupportedInstanceType.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ModifyClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ModifyClusterOutput()
        value.stepConcurrencyLevel = try reader["StepConcurrencyLevel"].readIfPresent()
        return value
    }
}

extension ModifyInstanceFleetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyInstanceFleetOutput {
        return ModifyInstanceFleetOutput()
    }
}

extension ModifyInstanceGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyInstanceGroupsOutput {
        return ModifyInstanceGroupsOutput()
    }
}

extension PutAutoScalingPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutAutoScalingPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutAutoScalingPolicyOutput()
        value.autoScalingPolicy = try reader["AutoScalingPolicy"].readIfPresent(with: EMRClientTypes.AutoScalingPolicyDescription.read(from:))
        value.clusterArn = try reader["ClusterArn"].readIfPresent()
        value.clusterId = try reader["ClusterId"].readIfPresent()
        value.instanceGroupId = try reader["InstanceGroupId"].readIfPresent()
        return value
    }
}

extension PutAutoTerminationPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutAutoTerminationPolicyOutput {
        return PutAutoTerminationPolicyOutput()
    }
}

extension PutBlockPublicAccessConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutBlockPublicAccessConfigurationOutput {
        return PutBlockPublicAccessConfigurationOutput()
    }
}

extension PutManagedScalingPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutManagedScalingPolicyOutput {
        return PutManagedScalingPolicyOutput()
    }
}

extension RemoveAutoScalingPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveAutoScalingPolicyOutput {
        return RemoveAutoScalingPolicyOutput()
    }
}

extension RemoveAutoTerminationPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveAutoTerminationPolicyOutput {
        return RemoveAutoTerminationPolicyOutput()
    }
}

extension RemoveManagedScalingPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveManagedScalingPolicyOutput {
        return RemoveManagedScalingPolicyOutput()
    }
}

extension RemoveTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveTagsOutput {
        return RemoveTagsOutput()
    }
}

extension RunJobFlowOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RunJobFlowOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RunJobFlowOutput()
        value.clusterArn = try reader["ClusterArn"].readIfPresent()
        value.jobFlowId = try reader["JobFlowId"].readIfPresent()
        return value
    }
}

extension SetKeepJobFlowAliveWhenNoStepsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetKeepJobFlowAliveWhenNoStepsOutput {
        return SetKeepJobFlowAliveWhenNoStepsOutput()
    }
}

extension SetTerminationProtectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetTerminationProtectionOutput {
        return SetTerminationProtectionOutput()
    }
}

extension SetUnhealthyNodeReplacementOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetUnhealthyNodeReplacementOutput {
        return SetUnhealthyNodeReplacementOutput()
    }
}

extension SetVisibleToAllUsersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetVisibleToAllUsersOutput {
        return SetVisibleToAllUsersOutput()
    }
}

extension StartNotebookExecutionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartNotebookExecutionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartNotebookExecutionOutput()
        value.notebookExecutionId = try reader["NotebookExecutionId"].readIfPresent()
        return value
    }
}

extension StopNotebookExecutionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopNotebookExecutionOutput {
        return StopNotebookExecutionOutput()
    }
}

extension TerminateJobFlowsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TerminateJobFlowsOutput {
        return TerminateJobFlowsOutput()
    }
}

extension UpdateStudioOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateStudioOutput {
        return UpdateStudioOutput()
    }
}

extension UpdateStudioSessionMappingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateStudioSessionMappingOutput {
        return UpdateStudioSessionMappingOutput()
    }
}

enum AddInstanceFleetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AddInstanceGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalServerError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AddJobFlowStepsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalServerError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AddTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CancelStepsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSecurityConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateStudioOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateStudioSessionMappingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSecurityConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteStudioOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteStudioSessionMappingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeJobFlowsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalServerError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeNotebookExecutionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeReleaseLabelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeSecurityConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeStepOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeStudioOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAutoTerminationPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBlockPublicAccessConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetClusterSessionCredentialsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetManagedScalingPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetStudioSessionMappingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBootstrapActionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListClustersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListInstanceFleetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListInstanceGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListInstancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListNotebookExecutionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListReleaseLabelsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSecurityConfigurationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListStepsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListStudiosOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListStudioSessionMappingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSupportedInstanceTypesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyInstanceFleetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyInstanceGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalServerError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutAutoScalingPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutAutoTerminationPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutBlockPublicAccessConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutManagedScalingPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveAutoScalingPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveAutoTerminationPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveManagedScalingPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RunJobFlowOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalServerError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetKeepJobFlowAliveWhenNoStepsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalServerError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetTerminationProtectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalServerError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetUnhealthyNodeReplacementOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalServerError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetVisibleToAllUsersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalServerError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartNotebookExecutionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopNotebookExecutionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TerminateJobFlowsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalServerError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateStudioOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateStudioSessionMappingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidRequestException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidRequestException {
        let reader = baseError.errorBodyReader
        var value = InvalidRequestException()
        value.properties.errorCode = try reader["ErrorCode"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerError {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerError {
        var value = InternalServerError()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension EMRClientTypes.CancelStepsInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.CancelStepsInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.CancelStepsInfo()
        value.stepId = try reader["StepId"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.reason = try reader["Reason"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.Cluster {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.Cluster {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.Cluster()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent(with: EMRClientTypes.ClusterStatus.read(from:))
        value.ec2InstanceAttributes = try reader["Ec2InstanceAttributes"].readIfPresent(with: EMRClientTypes.Ec2InstanceAttributes.read(from:))
        value.instanceCollectionType = try reader["InstanceCollectionType"].readIfPresent()
        value.logUri = try reader["LogUri"].readIfPresent()
        value.logEncryptionKmsKeyId = try reader["LogEncryptionKmsKeyId"].readIfPresent()
        value.requestedAmiVersion = try reader["RequestedAmiVersion"].readIfPresent()
        value.runningAmiVersion = try reader["RunningAmiVersion"].readIfPresent()
        value.releaseLabel = try reader["ReleaseLabel"].readIfPresent()
        value.autoTerminate = try reader["AutoTerminate"].readIfPresent()
        value.terminationProtected = try reader["TerminationProtected"].readIfPresent()
        value.unhealthyNodeReplacement = try reader["UnhealthyNodeReplacement"].readIfPresent()
        value.visibleToAllUsers = try reader["VisibleToAllUsers"].readIfPresent()
        value.applications = try reader["Applications"].readListIfPresent(memberReadingClosure: EMRClientTypes.Application.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: EMRClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.serviceRole = try reader["ServiceRole"].readIfPresent()
        value.normalizedInstanceHours = try reader["NormalizedInstanceHours"].readIfPresent()
        value.masterPublicDnsName = try reader["MasterPublicDnsName"].readIfPresent()
        value.configurations = try reader["Configurations"].readListIfPresent(memberReadingClosure: EMRClientTypes.Configuration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.securityConfiguration = try reader["SecurityConfiguration"].readIfPresent()
        value.autoScalingRole = try reader["AutoScalingRole"].readIfPresent()
        value.scaleDownBehavior = try reader["ScaleDownBehavior"].readIfPresent()
        value.customAmiId = try reader["CustomAmiId"].readIfPresent()
        value.ebsRootVolumeSize = try reader["EbsRootVolumeSize"].readIfPresent()
        value.repoUpgradeOnBoot = try reader["RepoUpgradeOnBoot"].readIfPresent()
        value.kerberosAttributes = try reader["KerberosAttributes"].readIfPresent(with: EMRClientTypes.KerberosAttributes.read(from:))
        value.clusterArn = try reader["ClusterArn"].readIfPresent()
        value.outpostArn = try reader["OutpostArn"].readIfPresent()
        value.stepConcurrencyLevel = try reader["StepConcurrencyLevel"].readIfPresent()
        value.placementGroups = try reader["PlacementGroups"].readListIfPresent(memberReadingClosure: EMRClientTypes.PlacementGroupConfig.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.osReleaseLabel = try reader["OSReleaseLabel"].readIfPresent()
        value.ebsRootVolumeIops = try reader["EbsRootVolumeIops"].readIfPresent()
        value.ebsRootVolumeThroughput = try reader["EbsRootVolumeThroughput"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.PlacementGroupConfig {

    static func write(value: EMRClientTypes.PlacementGroupConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InstanceRole"].write(value.instanceRole)
        try writer["PlacementStrategy"].write(value.placementStrategy)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.PlacementGroupConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.PlacementGroupConfig()
        value.instanceRole = try reader["InstanceRole"].readIfPresent() ?? .sdkUnknown("")
        value.placementStrategy = try reader["PlacementStrategy"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.KerberosAttributes {

    static func write(value: EMRClientTypes.KerberosAttributes?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ADDomainJoinPassword"].write(value.adDomainJoinPassword)
        try writer["ADDomainJoinUser"].write(value.adDomainJoinUser)
        try writer["CrossRealmTrustPrincipalPassword"].write(value.crossRealmTrustPrincipalPassword)
        try writer["KdcAdminPassword"].write(value.kdcAdminPassword)
        try writer["Realm"].write(value.realm)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.KerberosAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.KerberosAttributes()
        value.realm = try reader["Realm"].readIfPresent() ?? ""
        value.kdcAdminPassword = try reader["KdcAdminPassword"].readIfPresent() ?? ""
        value.crossRealmTrustPrincipalPassword = try reader["CrossRealmTrustPrincipalPassword"].readIfPresent()
        value.adDomainJoinUser = try reader["ADDomainJoinUser"].readIfPresent()
        value.adDomainJoinPassword = try reader["ADDomainJoinPassword"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.Configuration {

    static func write(value: EMRClientTypes.Configuration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Classification"].write(value.classification)
        try writer["Configurations"].writeList(value.configurations, memberWritingClosure: EMRClientTypes.Configuration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Properties"].writeMap(value.properties, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.Configuration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.Configuration()
        value.classification = try reader["Classification"].readIfPresent()
        value.configurations = try reader["Configurations"].readListIfPresent(memberReadingClosure: EMRClientTypes.Configuration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.properties = try reader["Properties"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension EMRClientTypes.Tag {

    static func write(value: EMRClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.Application {

    static func write(value: EMRClientTypes.Application?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdditionalInfo"].writeMap(value.additionalInfo, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Args"].writeList(value.args, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Name"].write(value.name)
        try writer["Version"].write(value.version)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.Application {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.Application()
        value.name = try reader["Name"].readIfPresent()
        value.version = try reader["Version"].readIfPresent()
        value.args = try reader["Args"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.additionalInfo = try reader["AdditionalInfo"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension EMRClientTypes.Ec2InstanceAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.Ec2InstanceAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.Ec2InstanceAttributes()
        value.ec2KeyName = try reader["Ec2KeyName"].readIfPresent()
        value.ec2SubnetId = try reader["Ec2SubnetId"].readIfPresent()
        value.requestedEc2SubnetIds = try reader["RequestedEc2SubnetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.ec2AvailabilityZone = try reader["Ec2AvailabilityZone"].readIfPresent()
        value.requestedEc2AvailabilityZones = try reader["RequestedEc2AvailabilityZones"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.iamInstanceProfile = try reader["IamInstanceProfile"].readIfPresent()
        value.emrManagedMasterSecurityGroup = try reader["EmrManagedMasterSecurityGroup"].readIfPresent()
        value.emrManagedSlaveSecurityGroup = try reader["EmrManagedSlaveSecurityGroup"].readIfPresent()
        value.serviceAccessSecurityGroup = try reader["ServiceAccessSecurityGroup"].readIfPresent()
        value.additionalMasterSecurityGroups = try reader["AdditionalMasterSecurityGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.additionalSlaveSecurityGroups = try reader["AdditionalSlaveSecurityGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EMRClientTypes.ClusterStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.ClusterStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.ClusterStatus()
        value.state = try reader["State"].readIfPresent()
        value.stateChangeReason = try reader["StateChangeReason"].readIfPresent(with: EMRClientTypes.ClusterStateChangeReason.read(from:))
        value.timeline = try reader["Timeline"].readIfPresent(with: EMRClientTypes.ClusterTimeline.read(from:))
        value.errorDetails = try reader["ErrorDetails"].readListIfPresent(memberReadingClosure: EMRClientTypes.ErrorDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EMRClientTypes.ErrorDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.ErrorDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.ErrorDetail()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.errorData = try reader["ErrorData"].readListIfPresent(memberReadingClosure: SmithyReadWrite.mapReadingClosure(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), memberNodeInfo: "member", isFlattened: false)
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.ClusterTimeline {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.ClusterTimeline {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.ClusterTimeline()
        value.creationDateTime = try reader["CreationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.readyDateTime = try reader["ReadyDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endDateTime = try reader["EndDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension EMRClientTypes.ClusterStateChangeReason {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.ClusterStateChangeReason {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.ClusterStateChangeReason()
        value.code = try reader["Code"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.JobFlowDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.JobFlowDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.JobFlowDetail()
        value.jobFlowId = try reader["JobFlowId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.logUri = try reader["LogUri"].readIfPresent()
        value.logEncryptionKmsKeyId = try reader["LogEncryptionKmsKeyId"].readIfPresent()
        value.amiVersion = try reader["AmiVersion"].readIfPresent()
        value.executionStatusDetail = try reader["ExecutionStatusDetail"].readIfPresent(with: EMRClientTypes.JobFlowExecutionStatusDetail.read(from:))
        value.instances = try reader["Instances"].readIfPresent(with: EMRClientTypes.JobFlowInstancesDetail.read(from:))
        value.steps = try reader["Steps"].readListIfPresent(memberReadingClosure: EMRClientTypes.StepDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.bootstrapActions = try reader["BootstrapActions"].readListIfPresent(memberReadingClosure: EMRClientTypes.BootstrapActionDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.supportedProducts = try reader["SupportedProducts"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.visibleToAllUsers = try reader["VisibleToAllUsers"].readIfPresent()
        value.jobFlowRole = try reader["JobFlowRole"].readIfPresent()
        value.serviceRole = try reader["ServiceRole"].readIfPresent()
        value.autoScalingRole = try reader["AutoScalingRole"].readIfPresent()
        value.scaleDownBehavior = try reader["ScaleDownBehavior"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.BootstrapActionDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.BootstrapActionDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.BootstrapActionDetail()
        value.bootstrapActionConfig = try reader["BootstrapActionConfig"].readIfPresent(with: EMRClientTypes.BootstrapActionConfig.read(from:))
        return value
    }
}

extension EMRClientTypes.BootstrapActionConfig {

    static func write(value: EMRClientTypes.BootstrapActionConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["ScriptBootstrapAction"].write(value.scriptBootstrapAction, with: EMRClientTypes.ScriptBootstrapActionConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.BootstrapActionConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.BootstrapActionConfig()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.scriptBootstrapAction = try reader["ScriptBootstrapAction"].readIfPresent(with: EMRClientTypes.ScriptBootstrapActionConfig.read(from:))
        return value
    }
}

extension EMRClientTypes.ScriptBootstrapActionConfig {

    static func write(value: EMRClientTypes.ScriptBootstrapActionConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Args"].writeList(value.args, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Path"].write(value.path)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.ScriptBootstrapActionConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.ScriptBootstrapActionConfig()
        value.path = try reader["Path"].readIfPresent() ?? ""
        value.args = try reader["Args"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EMRClientTypes.StepDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.StepDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.StepDetail()
        value.stepConfig = try reader["StepConfig"].readIfPresent(with: EMRClientTypes.StepConfig.read(from:))
        value.executionStatusDetail = try reader["ExecutionStatusDetail"].readIfPresent(with: EMRClientTypes.StepExecutionStatusDetail.read(from:))
        return value
    }
}

extension EMRClientTypes.StepExecutionStatusDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.StepExecutionStatusDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.StepExecutionStatusDetail()
        value.state = try reader["State"].readIfPresent() ?? .sdkUnknown("")
        value.creationDateTime = try reader["CreationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.startDateTime = try reader["StartDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endDateTime = try reader["EndDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastStateChangeReason = try reader["LastStateChangeReason"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.StepConfig {

    static func write(value: EMRClientTypes.StepConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ActionOnFailure"].write(value.actionOnFailure)
        try writer["HadoopJarStep"].write(value.hadoopJarStep, with: EMRClientTypes.HadoopJarStepConfig.write(value:to:))
        try writer["Name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.StepConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.StepConfig()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.actionOnFailure = try reader["ActionOnFailure"].readIfPresent()
        value.hadoopJarStep = try reader["HadoopJarStep"].readIfPresent(with: EMRClientTypes.HadoopJarStepConfig.read(from:))
        return value
    }
}

extension EMRClientTypes.HadoopJarStepConfig {

    static func write(value: EMRClientTypes.HadoopJarStepConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Args"].writeList(value.args, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Jar"].write(value.jar)
        try writer["MainClass"].write(value.mainClass)
        try writer["Properties"].writeList(value.properties, memberWritingClosure: EMRClientTypes.KeyValue.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.HadoopJarStepConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.HadoopJarStepConfig()
        value.properties = try reader["Properties"].readListIfPresent(memberReadingClosure: EMRClientTypes.KeyValue.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.jar = try reader["Jar"].readIfPresent() ?? ""
        value.mainClass = try reader["MainClass"].readIfPresent()
        value.args = try reader["Args"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EMRClientTypes.KeyValue {

    static func write(value: EMRClientTypes.KeyValue?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.KeyValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.KeyValue()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.JobFlowInstancesDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.JobFlowInstancesDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.JobFlowInstancesDetail()
        value.masterInstanceType = try reader["MasterInstanceType"].readIfPresent() ?? ""
        value.masterPublicDnsName = try reader["MasterPublicDnsName"].readIfPresent()
        value.masterInstanceId = try reader["MasterInstanceId"].readIfPresent()
        value.slaveInstanceType = try reader["SlaveInstanceType"].readIfPresent() ?? ""
        value.instanceCount = try reader["InstanceCount"].readIfPresent() ?? 0
        value.instanceGroups = try reader["InstanceGroups"].readListIfPresent(memberReadingClosure: EMRClientTypes.InstanceGroupDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.normalizedInstanceHours = try reader["NormalizedInstanceHours"].readIfPresent()
        value.ec2KeyName = try reader["Ec2KeyName"].readIfPresent()
        value.ec2SubnetId = try reader["Ec2SubnetId"].readIfPresent()
        value.placement = try reader["Placement"].readIfPresent(with: EMRClientTypes.PlacementType.read(from:))
        value.keepJobFlowAliveWhenNoSteps = try reader["KeepJobFlowAliveWhenNoSteps"].readIfPresent()
        value.terminationProtected = try reader["TerminationProtected"].readIfPresent()
        value.unhealthyNodeReplacement = try reader["UnhealthyNodeReplacement"].readIfPresent()
        value.hadoopVersion = try reader["HadoopVersion"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.PlacementType {

    static func write(value: EMRClientTypes.PlacementType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AvailabilityZone"].write(value.availabilityZone)
        try writer["AvailabilityZones"].writeList(value.availabilityZones, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.PlacementType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.PlacementType()
        value.availabilityZone = try reader["AvailabilityZone"].readIfPresent()
        value.availabilityZones = try reader["AvailabilityZones"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EMRClientTypes.InstanceGroupDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.InstanceGroupDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.InstanceGroupDetail()
        value.instanceGroupId = try reader["InstanceGroupId"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.market = try reader["Market"].readIfPresent() ?? .sdkUnknown("")
        value.instanceRole = try reader["InstanceRole"].readIfPresent() ?? .sdkUnknown("")
        value.bidPrice = try reader["BidPrice"].readIfPresent()
        value.instanceType = try reader["InstanceType"].readIfPresent() ?? ""
        value.instanceRequestCount = try reader["InstanceRequestCount"].readIfPresent() ?? 0
        value.instanceRunningCount = try reader["InstanceRunningCount"].readIfPresent() ?? 0
        value.state = try reader["State"].readIfPresent() ?? .sdkUnknown("")
        value.lastStateChangeReason = try reader["LastStateChangeReason"].readIfPresent()
        value.creationDateTime = try reader["CreationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.startDateTime = try reader["StartDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.readyDateTime = try reader["ReadyDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endDateTime = try reader["EndDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.customAmiId = try reader["CustomAmiId"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.JobFlowExecutionStatusDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.JobFlowExecutionStatusDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.JobFlowExecutionStatusDetail()
        value.state = try reader["State"].readIfPresent() ?? .sdkUnknown("")
        value.creationDateTime = try reader["CreationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.startDateTime = try reader["StartDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.readyDateTime = try reader["ReadyDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endDateTime = try reader["EndDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastStateChangeReason = try reader["LastStateChangeReason"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.NotebookExecution {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.NotebookExecution {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.NotebookExecution()
        value.notebookExecutionId = try reader["NotebookExecutionId"].readIfPresent()
        value.editorId = try reader["EditorId"].readIfPresent()
        value.executionEngine = try reader["ExecutionEngine"].readIfPresent(with: EMRClientTypes.ExecutionEngineConfig.read(from:))
        value.notebookExecutionName = try reader["NotebookExecutionName"].readIfPresent()
        value.notebookParams = try reader["NotebookParams"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.arn = try reader["Arn"].readIfPresent()
        value.outputNotebookURI = try reader["OutputNotebookURI"].readIfPresent()
        value.lastStateChangeReason = try reader["LastStateChangeReason"].readIfPresent()
        value.notebookInstanceSecurityGroupId = try reader["NotebookInstanceSecurityGroupId"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: EMRClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.notebookS3Location = try reader["NotebookS3Location"].readIfPresent(with: EMRClientTypes.NotebookS3LocationForOutput.read(from:))
        value.outputNotebookS3Location = try reader["OutputNotebookS3Location"].readIfPresent(with: EMRClientTypes.OutputNotebookS3LocationForOutput.read(from:))
        value.outputNotebookFormat = try reader["OutputNotebookFormat"].readIfPresent()
        value.environmentVariables = try reader["EnvironmentVariables"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension EMRClientTypes.OutputNotebookS3LocationForOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.OutputNotebookS3LocationForOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.OutputNotebookS3LocationForOutput()
        value.bucket = try reader["Bucket"].readIfPresent()
        value.key = try reader["Key"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.NotebookS3LocationForOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.NotebookS3LocationForOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.NotebookS3LocationForOutput()
        value.bucket = try reader["Bucket"].readIfPresent()
        value.key = try reader["Key"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.ExecutionEngineConfig {

    static func write(value: EMRClientTypes.ExecutionEngineConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExecutionRoleArn"].write(value.executionRoleArn)
        try writer["Id"].write(value.id)
        try writer["MasterInstanceSecurityGroupId"].write(value.masterInstanceSecurityGroupId)
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.ExecutionEngineConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.ExecutionEngineConfig()
        value.id = try reader["Id"].readIfPresent() ?? ""
        value.type = try reader["Type"].readIfPresent()
        value.masterInstanceSecurityGroupId = try reader["MasterInstanceSecurityGroupId"].readIfPresent()
        value.executionRoleArn = try reader["ExecutionRoleArn"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.SimplifiedApplication {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.SimplifiedApplication {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.SimplifiedApplication()
        value.name = try reader["Name"].readIfPresent()
        value.version = try reader["Version"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.OSRelease {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.OSRelease {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.OSRelease()
        value.label = try reader["Label"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.Step {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.Step {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.Step()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.config = try reader["Config"].readIfPresent(with: EMRClientTypes.HadoopStepConfig.read(from:))
        value.actionOnFailure = try reader["ActionOnFailure"].readIfPresent()
        value.status = try reader["Status"].readIfPresent(with: EMRClientTypes.StepStatus.read(from:))
        value.executionRoleArn = try reader["ExecutionRoleArn"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.StepStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.StepStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.StepStatus()
        value.state = try reader["State"].readIfPresent()
        value.stateChangeReason = try reader["StateChangeReason"].readIfPresent(with: EMRClientTypes.StepStateChangeReason.read(from:))
        value.failureDetails = try reader["FailureDetails"].readIfPresent(with: EMRClientTypes.FailureDetails.read(from:))
        value.timeline = try reader["Timeline"].readIfPresent(with: EMRClientTypes.StepTimeline.read(from:))
        return value
    }
}

extension EMRClientTypes.StepTimeline {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.StepTimeline {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.StepTimeline()
        value.creationDateTime = try reader["CreationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.startDateTime = try reader["StartDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endDateTime = try reader["EndDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension EMRClientTypes.FailureDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.FailureDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.FailureDetails()
        value.reason = try reader["Reason"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.logFile = try reader["LogFile"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.StepStateChangeReason {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.StepStateChangeReason {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.StepStateChangeReason()
        value.code = try reader["Code"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.HadoopStepConfig {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.HadoopStepConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.HadoopStepConfig()
        value.jar = try reader["Jar"].readIfPresent()
        value.properties = try reader["Properties"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.mainClass = try reader["MainClass"].readIfPresent()
        value.args = try reader["Args"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EMRClientTypes.Studio {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.Studio {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.Studio()
        value.studioId = try reader["StudioId"].readIfPresent()
        value.studioArn = try reader["StudioArn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.authMode = try reader["AuthMode"].readIfPresent()
        value.vpcId = try reader["VpcId"].readIfPresent()
        value.subnetIds = try reader["SubnetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.serviceRole = try reader["ServiceRole"].readIfPresent()
        value.userRole = try reader["UserRole"].readIfPresent()
        value.workspaceSecurityGroupId = try reader["WorkspaceSecurityGroupId"].readIfPresent()
        value.engineSecurityGroupId = try reader["EngineSecurityGroupId"].readIfPresent()
        value.url = try reader["Url"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.defaultS3Location = try reader["DefaultS3Location"].readIfPresent()
        value.idpAuthUrl = try reader["IdpAuthUrl"].readIfPresent()
        value.idpRelayStateParameterName = try reader["IdpRelayStateParameterName"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: EMRClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.idcInstanceArn = try reader["IdcInstanceArn"].readIfPresent()
        value.trustedIdentityPropagationEnabled = try reader["TrustedIdentityPropagationEnabled"].readIfPresent()
        value.idcUserAssignment = try reader["IdcUserAssignment"].readIfPresent()
        value.encryptionKeyArn = try reader["EncryptionKeyArn"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.AutoTerminationPolicy {

    static func write(value: EMRClientTypes.AutoTerminationPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IdleTimeout"].write(value.idleTimeout)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.AutoTerminationPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.AutoTerminationPolicy()
        value.idleTimeout = try reader["IdleTimeout"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.BlockPublicAccessConfiguration {

    static func write(value: EMRClientTypes.BlockPublicAccessConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BlockPublicSecurityGroupRules"].write(value.blockPublicSecurityGroupRules)
        try writer["Classification"].write(value.classification)
        try writer["Configurations"].writeList(value.configurations, memberWritingClosure: EMRClientTypes.Configuration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PermittedPublicSecurityGroupRuleRanges"].writeList(value.permittedPublicSecurityGroupRuleRanges, memberWritingClosure: EMRClientTypes.PortRange.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Properties"].writeMap(value.properties, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.BlockPublicAccessConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.BlockPublicAccessConfiguration()
        value.blockPublicSecurityGroupRules = try reader["BlockPublicSecurityGroupRules"].readIfPresent() ?? false
        value.permittedPublicSecurityGroupRuleRanges = try reader["PermittedPublicSecurityGroupRuleRanges"].readListIfPresent(memberReadingClosure: EMRClientTypes.PortRange.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.classification = try reader["Classification"].readIfPresent()
        value.configurations = try reader["Configurations"].readListIfPresent(memberReadingClosure: EMRClientTypes.Configuration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.properties = try reader["Properties"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension EMRClientTypes.PortRange {

    static func write(value: EMRClientTypes.PortRange?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxRange"].write(value.maxRange)
        try writer["MinRange"].write(value.minRange)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.PortRange {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.PortRange()
        value.minRange = try reader["MinRange"].readIfPresent() ?? 0
        value.maxRange = try reader["MaxRange"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.BlockPublicAccessConfigurationMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.BlockPublicAccessConfigurationMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.BlockPublicAccessConfigurationMetadata()
        value.creationDateTime = try reader["CreationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.createdByArn = try reader["CreatedByArn"].readIfPresent() ?? ""
        return value
    }
}

extension EMRClientTypes.Credentials {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.Credentials {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "UsernamePassword":
                return .usernamepassword(try reader["UsernamePassword"].read(with: EMRClientTypes.UsernamePassword.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension EMRClientTypes.UsernamePassword {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.UsernamePassword {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.UsernamePassword()
        value.username = try reader["Username"].readIfPresent()
        value.password = try reader["Password"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.ManagedScalingPolicy {

    static func write(value: EMRClientTypes.ManagedScalingPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ComputeLimits"].write(value.computeLimits, with: EMRClientTypes.ComputeLimits.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.ManagedScalingPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.ManagedScalingPolicy()
        value.computeLimits = try reader["ComputeLimits"].readIfPresent(with: EMRClientTypes.ComputeLimits.read(from:))
        return value
    }
}

extension EMRClientTypes.ComputeLimits {

    static func write(value: EMRClientTypes.ComputeLimits?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaximumCapacityUnits"].write(value.maximumCapacityUnits)
        try writer["MaximumCoreCapacityUnits"].write(value.maximumCoreCapacityUnits)
        try writer["MaximumOnDemandCapacityUnits"].write(value.maximumOnDemandCapacityUnits)
        try writer["MinimumCapacityUnits"].write(value.minimumCapacityUnits)
        try writer["UnitType"].write(value.unitType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.ComputeLimits {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.ComputeLimits()
        value.unitType = try reader["UnitType"].readIfPresent() ?? .sdkUnknown("")
        value.minimumCapacityUnits = try reader["MinimumCapacityUnits"].readIfPresent() ?? 0
        value.maximumCapacityUnits = try reader["MaximumCapacityUnits"].readIfPresent() ?? 0
        value.maximumOnDemandCapacityUnits = try reader["MaximumOnDemandCapacityUnits"].readIfPresent()
        value.maximumCoreCapacityUnits = try reader["MaximumCoreCapacityUnits"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.SessionMappingDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.SessionMappingDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.SessionMappingDetail()
        value.studioId = try reader["StudioId"].readIfPresent()
        value.identityId = try reader["IdentityId"].readIfPresent()
        value.identityName = try reader["IdentityName"].readIfPresent()
        value.identityType = try reader["IdentityType"].readIfPresent()
        value.sessionPolicyArn = try reader["SessionPolicyArn"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension EMRClientTypes.Command {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.Command {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.Command()
        value.name = try reader["Name"].readIfPresent()
        value.scriptPath = try reader["ScriptPath"].readIfPresent()
        value.args = try reader["Args"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EMRClientTypes.ClusterSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.ClusterSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.ClusterSummary()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent(with: EMRClientTypes.ClusterStatus.read(from:))
        value.normalizedInstanceHours = try reader["NormalizedInstanceHours"].readIfPresent()
        value.clusterArn = try reader["ClusterArn"].readIfPresent()
        value.outpostArn = try reader["OutpostArn"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.InstanceFleet {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.InstanceFleet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.InstanceFleet()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent(with: EMRClientTypes.InstanceFleetStatus.read(from:))
        value.instanceFleetType = try reader["InstanceFleetType"].readIfPresent()
        value.targetOnDemandCapacity = try reader["TargetOnDemandCapacity"].readIfPresent()
        value.targetSpotCapacity = try reader["TargetSpotCapacity"].readIfPresent()
        value.provisionedOnDemandCapacity = try reader["ProvisionedOnDemandCapacity"].readIfPresent()
        value.provisionedSpotCapacity = try reader["ProvisionedSpotCapacity"].readIfPresent()
        value.instanceTypeSpecifications = try reader["InstanceTypeSpecifications"].readListIfPresent(memberReadingClosure: EMRClientTypes.InstanceTypeSpecification.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.launchSpecifications = try reader["LaunchSpecifications"].readIfPresent(with: EMRClientTypes.InstanceFleetProvisioningSpecifications.read(from:))
        value.resizeSpecifications = try reader["ResizeSpecifications"].readIfPresent(with: EMRClientTypes.InstanceFleetResizingSpecifications.read(from:))
        return value
    }
}

extension EMRClientTypes.InstanceFleetResizingSpecifications {

    static func write(value: EMRClientTypes.InstanceFleetResizingSpecifications?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["OnDemandResizeSpecification"].write(value.onDemandResizeSpecification, with: EMRClientTypes.OnDemandResizingSpecification.write(value:to:))
        try writer["SpotResizeSpecification"].write(value.spotResizeSpecification, with: EMRClientTypes.SpotResizingSpecification.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.InstanceFleetResizingSpecifications {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.InstanceFleetResizingSpecifications()
        value.spotResizeSpecification = try reader["SpotResizeSpecification"].readIfPresent(with: EMRClientTypes.SpotResizingSpecification.read(from:))
        value.onDemandResizeSpecification = try reader["OnDemandResizeSpecification"].readIfPresent(with: EMRClientTypes.OnDemandResizingSpecification.read(from:))
        return value
    }
}

extension EMRClientTypes.OnDemandResizingSpecification {

    static func write(value: EMRClientTypes.OnDemandResizingSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AllocationStrategy"].write(value.allocationStrategy)
        try writer["CapacityReservationOptions"].write(value.capacityReservationOptions, with: EMRClientTypes.OnDemandCapacityReservationOptions.write(value:to:))
        try writer["TimeoutDurationMinutes"].write(value.timeoutDurationMinutes)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.OnDemandResizingSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.OnDemandResizingSpecification()
        value.timeoutDurationMinutes = try reader["TimeoutDurationMinutes"].readIfPresent()
        value.allocationStrategy = try reader["AllocationStrategy"].readIfPresent()
        value.capacityReservationOptions = try reader["CapacityReservationOptions"].readIfPresent(with: EMRClientTypes.OnDemandCapacityReservationOptions.read(from:))
        return value
    }
}

extension EMRClientTypes.OnDemandCapacityReservationOptions {

    static func write(value: EMRClientTypes.OnDemandCapacityReservationOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CapacityReservationPreference"].write(value.capacityReservationPreference)
        try writer["CapacityReservationResourceGroupArn"].write(value.capacityReservationResourceGroupArn)
        try writer["UsageStrategy"].write(value.usageStrategy)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.OnDemandCapacityReservationOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.OnDemandCapacityReservationOptions()
        value.usageStrategy = try reader["UsageStrategy"].readIfPresent()
        value.capacityReservationPreference = try reader["CapacityReservationPreference"].readIfPresent()
        value.capacityReservationResourceGroupArn = try reader["CapacityReservationResourceGroupArn"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.SpotResizingSpecification {

    static func write(value: EMRClientTypes.SpotResizingSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AllocationStrategy"].write(value.allocationStrategy)
        try writer["TimeoutDurationMinutes"].write(value.timeoutDurationMinutes)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.SpotResizingSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.SpotResizingSpecification()
        value.timeoutDurationMinutes = try reader["TimeoutDurationMinutes"].readIfPresent()
        value.allocationStrategy = try reader["AllocationStrategy"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.InstanceFleetProvisioningSpecifications {

    static func write(value: EMRClientTypes.InstanceFleetProvisioningSpecifications?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["OnDemandSpecification"].write(value.onDemandSpecification, with: EMRClientTypes.OnDemandProvisioningSpecification.write(value:to:))
        try writer["SpotSpecification"].write(value.spotSpecification, with: EMRClientTypes.SpotProvisioningSpecification.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.InstanceFleetProvisioningSpecifications {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.InstanceFleetProvisioningSpecifications()
        value.spotSpecification = try reader["SpotSpecification"].readIfPresent(with: EMRClientTypes.SpotProvisioningSpecification.read(from:))
        value.onDemandSpecification = try reader["OnDemandSpecification"].readIfPresent(with: EMRClientTypes.OnDemandProvisioningSpecification.read(from:))
        return value
    }
}

extension EMRClientTypes.OnDemandProvisioningSpecification {

    static func write(value: EMRClientTypes.OnDemandProvisioningSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AllocationStrategy"].write(value.allocationStrategy)
        try writer["CapacityReservationOptions"].write(value.capacityReservationOptions, with: EMRClientTypes.OnDemandCapacityReservationOptions.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.OnDemandProvisioningSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.OnDemandProvisioningSpecification()
        value.allocationStrategy = try reader["AllocationStrategy"].readIfPresent() ?? .sdkUnknown("")
        value.capacityReservationOptions = try reader["CapacityReservationOptions"].readIfPresent(with: EMRClientTypes.OnDemandCapacityReservationOptions.read(from:))
        return value
    }
}

extension EMRClientTypes.SpotProvisioningSpecification {

    static func write(value: EMRClientTypes.SpotProvisioningSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AllocationStrategy"].write(value.allocationStrategy)
        try writer["BlockDurationMinutes"].write(value.blockDurationMinutes)
        try writer["TimeoutAction"].write(value.timeoutAction)
        try writer["TimeoutDurationMinutes"].write(value.timeoutDurationMinutes)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.SpotProvisioningSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.SpotProvisioningSpecification()
        value.timeoutDurationMinutes = try reader["TimeoutDurationMinutes"].readIfPresent() ?? 0
        value.timeoutAction = try reader["TimeoutAction"].readIfPresent() ?? .sdkUnknown("")
        value.blockDurationMinutes = try reader["BlockDurationMinutes"].readIfPresent()
        value.allocationStrategy = try reader["AllocationStrategy"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.InstanceTypeSpecification {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.InstanceTypeSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.InstanceTypeSpecification()
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.weightedCapacity = try reader["WeightedCapacity"].readIfPresent()
        value.bidPrice = try reader["BidPrice"].readIfPresent()
        value.bidPriceAsPercentageOfOnDemandPrice = try reader["BidPriceAsPercentageOfOnDemandPrice"].readIfPresent()
        value.configurations = try reader["Configurations"].readListIfPresent(memberReadingClosure: EMRClientTypes.Configuration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.ebsBlockDevices = try reader["EbsBlockDevices"].readListIfPresent(memberReadingClosure: EMRClientTypes.EbsBlockDevice.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.ebsOptimized = try reader["EbsOptimized"].readIfPresent()
        value.customAmiId = try reader["CustomAmiId"].readIfPresent()
        value.priority = try reader["Priority"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.EbsBlockDevice {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.EbsBlockDevice {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.EbsBlockDevice()
        value.volumeSpecification = try reader["VolumeSpecification"].readIfPresent(with: EMRClientTypes.VolumeSpecification.read(from:))
        value.device = try reader["Device"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.VolumeSpecification {

    static func write(value: EMRClientTypes.VolumeSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Iops"].write(value.iops)
        try writer["SizeInGB"].write(value.sizeInGB)
        try writer["Throughput"].write(value.throughput)
        try writer["VolumeType"].write(value.volumeType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.VolumeSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.VolumeSpecification()
        value.volumeType = try reader["VolumeType"].readIfPresent() ?? ""
        value.iops = try reader["Iops"].readIfPresent()
        value.sizeInGB = try reader["SizeInGB"].readIfPresent() ?? 0
        value.throughput = try reader["Throughput"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.InstanceFleetStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.InstanceFleetStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.InstanceFleetStatus()
        value.state = try reader["State"].readIfPresent()
        value.stateChangeReason = try reader["StateChangeReason"].readIfPresent(with: EMRClientTypes.InstanceFleetStateChangeReason.read(from:))
        value.timeline = try reader["Timeline"].readIfPresent(with: EMRClientTypes.InstanceFleetTimeline.read(from:))
        return value
    }
}

extension EMRClientTypes.InstanceFleetTimeline {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.InstanceFleetTimeline {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.InstanceFleetTimeline()
        value.creationDateTime = try reader["CreationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.readyDateTime = try reader["ReadyDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endDateTime = try reader["EndDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension EMRClientTypes.InstanceFleetStateChangeReason {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.InstanceFleetStateChangeReason {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.InstanceFleetStateChangeReason()
        value.code = try reader["Code"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.InstanceGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.InstanceGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.InstanceGroup()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.market = try reader["Market"].readIfPresent()
        value.instanceGroupType = try reader["InstanceGroupType"].readIfPresent()
        value.bidPrice = try reader["BidPrice"].readIfPresent()
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.requestedInstanceCount = try reader["RequestedInstanceCount"].readIfPresent()
        value.runningInstanceCount = try reader["RunningInstanceCount"].readIfPresent()
        value.status = try reader["Status"].readIfPresent(with: EMRClientTypes.InstanceGroupStatus.read(from:))
        value.configurations = try reader["Configurations"].readListIfPresent(memberReadingClosure: EMRClientTypes.Configuration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.configurationsVersion = try reader["ConfigurationsVersion"].readIfPresent()
        value.lastSuccessfullyAppliedConfigurations = try reader["LastSuccessfullyAppliedConfigurations"].readListIfPresent(memberReadingClosure: EMRClientTypes.Configuration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastSuccessfullyAppliedConfigurationsVersion = try reader["LastSuccessfullyAppliedConfigurationsVersion"].readIfPresent()
        value.ebsBlockDevices = try reader["EbsBlockDevices"].readListIfPresent(memberReadingClosure: EMRClientTypes.EbsBlockDevice.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.ebsOptimized = try reader["EbsOptimized"].readIfPresent()
        value.shrinkPolicy = try reader["ShrinkPolicy"].readIfPresent(with: EMRClientTypes.ShrinkPolicy.read(from:))
        value.autoScalingPolicy = try reader["AutoScalingPolicy"].readIfPresent(with: EMRClientTypes.AutoScalingPolicyDescription.read(from:))
        value.customAmiId = try reader["CustomAmiId"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.AutoScalingPolicyDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.AutoScalingPolicyDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.AutoScalingPolicyDescription()
        value.status = try reader["Status"].readIfPresent(with: EMRClientTypes.AutoScalingPolicyStatus.read(from:))
        value.constraints = try reader["Constraints"].readIfPresent(with: EMRClientTypes.ScalingConstraints.read(from:))
        value.rules = try reader["Rules"].readListIfPresent(memberReadingClosure: EMRClientTypes.ScalingRule.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EMRClientTypes.ScalingRule {

    static func write(value: EMRClientTypes.ScalingRule?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Action"].write(value.action, with: EMRClientTypes.ScalingAction.write(value:to:))
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
        try writer["Trigger"].write(value.trigger, with: EMRClientTypes.ScalingTrigger.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.ScalingRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.ScalingRule()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.description = try reader["Description"].readIfPresent()
        value.action = try reader["Action"].readIfPresent(with: EMRClientTypes.ScalingAction.read(from:))
        value.trigger = try reader["Trigger"].readIfPresent(with: EMRClientTypes.ScalingTrigger.read(from:))
        return value
    }
}

extension EMRClientTypes.ScalingTrigger {

    static func write(value: EMRClientTypes.ScalingTrigger?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CloudWatchAlarmDefinition"].write(value.cloudWatchAlarmDefinition, with: EMRClientTypes.CloudWatchAlarmDefinition.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.ScalingTrigger {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.ScalingTrigger()
        value.cloudWatchAlarmDefinition = try reader["CloudWatchAlarmDefinition"].readIfPresent(with: EMRClientTypes.CloudWatchAlarmDefinition.read(from:))
        return value
    }
}

extension EMRClientTypes.CloudWatchAlarmDefinition {

    static func write(value: EMRClientTypes.CloudWatchAlarmDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ComparisonOperator"].write(value.comparisonOperator)
        try writer["Dimensions"].writeList(value.dimensions, memberWritingClosure: EMRClientTypes.MetricDimension.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EvaluationPeriods"].write(value.evaluationPeriods)
        try writer["MetricName"].write(value.metricName)
        try writer["Namespace"].write(value.namespace)
        try writer["Period"].write(value.period)
        try writer["Statistic"].write(value.statistic)
        try writer["Threshold"].write(value.threshold)
        try writer["Unit"].write(value.unit)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.CloudWatchAlarmDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.CloudWatchAlarmDefinition()
        value.comparisonOperator = try reader["ComparisonOperator"].readIfPresent() ?? .sdkUnknown("")
        value.evaluationPeriods = try reader["EvaluationPeriods"].readIfPresent()
        value.metricName = try reader["MetricName"].readIfPresent() ?? ""
        value.namespace = try reader["Namespace"].readIfPresent()
        value.period = try reader["Period"].readIfPresent() ?? 0
        value.statistic = try reader["Statistic"].readIfPresent()
        value.threshold = try reader["Threshold"].readIfPresent() ?? 0.0
        value.unit = try reader["Unit"].readIfPresent()
        value.dimensions = try reader["Dimensions"].readListIfPresent(memberReadingClosure: EMRClientTypes.MetricDimension.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EMRClientTypes.MetricDimension {

    static func write(value: EMRClientTypes.MetricDimension?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.MetricDimension {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.MetricDimension()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.ScalingAction {

    static func write(value: EMRClientTypes.ScalingAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Market"].write(value.market)
        try writer["SimpleScalingPolicyConfiguration"].write(value.simpleScalingPolicyConfiguration, with: EMRClientTypes.SimpleScalingPolicyConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.ScalingAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.ScalingAction()
        value.market = try reader["Market"].readIfPresent()
        value.simpleScalingPolicyConfiguration = try reader["SimpleScalingPolicyConfiguration"].readIfPresent(with: EMRClientTypes.SimpleScalingPolicyConfiguration.read(from:))
        return value
    }
}

extension EMRClientTypes.SimpleScalingPolicyConfiguration {

    static func write(value: EMRClientTypes.SimpleScalingPolicyConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdjustmentType"].write(value.adjustmentType)
        try writer["CoolDown"].write(value.coolDown)
        try writer["ScalingAdjustment"].write(value.scalingAdjustment)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.SimpleScalingPolicyConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.SimpleScalingPolicyConfiguration()
        value.adjustmentType = try reader["AdjustmentType"].readIfPresent()
        value.scalingAdjustment = try reader["ScalingAdjustment"].readIfPresent() ?? 0
        value.coolDown = try reader["CoolDown"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.ScalingConstraints {

    static func write(value: EMRClientTypes.ScalingConstraints?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxCapacity"].write(value.maxCapacity)
        try writer["MinCapacity"].write(value.minCapacity)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.ScalingConstraints {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.ScalingConstraints()
        value.minCapacity = try reader["MinCapacity"].readIfPresent() ?? 0
        value.maxCapacity = try reader["MaxCapacity"].readIfPresent() ?? 0
        return value
    }
}

extension EMRClientTypes.AutoScalingPolicyStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.AutoScalingPolicyStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.AutoScalingPolicyStatus()
        value.state = try reader["State"].readIfPresent()
        value.stateChangeReason = try reader["StateChangeReason"].readIfPresent(with: EMRClientTypes.AutoScalingPolicyStateChangeReason.read(from:))
        return value
    }
}

extension EMRClientTypes.AutoScalingPolicyStateChangeReason {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.AutoScalingPolicyStateChangeReason {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.AutoScalingPolicyStateChangeReason()
        value.code = try reader["Code"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.ShrinkPolicy {

    static func write(value: EMRClientTypes.ShrinkPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DecommissionTimeout"].write(value.decommissionTimeout)
        try writer["InstanceResizePolicy"].write(value.instanceResizePolicy, with: EMRClientTypes.InstanceResizePolicy.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.ShrinkPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.ShrinkPolicy()
        value.decommissionTimeout = try reader["DecommissionTimeout"].readIfPresent()
        value.instanceResizePolicy = try reader["InstanceResizePolicy"].readIfPresent(with: EMRClientTypes.InstanceResizePolicy.read(from:))
        return value
    }
}

extension EMRClientTypes.InstanceResizePolicy {

    static func write(value: EMRClientTypes.InstanceResizePolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InstanceTerminationTimeout"].write(value.instanceTerminationTimeout)
        try writer["InstancesToProtect"].writeList(value.instancesToProtect, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InstancesToTerminate"].writeList(value.instancesToTerminate, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.InstanceResizePolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.InstanceResizePolicy()
        value.instancesToTerminate = try reader["InstancesToTerminate"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.instancesToProtect = try reader["InstancesToProtect"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.instanceTerminationTimeout = try reader["InstanceTerminationTimeout"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.InstanceGroupStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.InstanceGroupStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.InstanceGroupStatus()
        value.state = try reader["State"].readIfPresent()
        value.stateChangeReason = try reader["StateChangeReason"].readIfPresent(with: EMRClientTypes.InstanceGroupStateChangeReason.read(from:))
        value.timeline = try reader["Timeline"].readIfPresent(with: EMRClientTypes.InstanceGroupTimeline.read(from:))
        return value
    }
}

extension EMRClientTypes.InstanceGroupTimeline {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.InstanceGroupTimeline {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.InstanceGroupTimeline()
        value.creationDateTime = try reader["CreationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.readyDateTime = try reader["ReadyDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endDateTime = try reader["EndDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension EMRClientTypes.InstanceGroupStateChangeReason {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.InstanceGroupStateChangeReason {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.InstanceGroupStateChangeReason()
        value.code = try reader["Code"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.Instance {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.Instance {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.Instance()
        value.id = try reader["Id"].readIfPresent()
        value.ec2InstanceId = try reader["Ec2InstanceId"].readIfPresent()
        value.publicDnsName = try reader["PublicDnsName"].readIfPresent()
        value.publicIpAddress = try reader["PublicIpAddress"].readIfPresent()
        value.privateDnsName = try reader["PrivateDnsName"].readIfPresent()
        value.privateIpAddress = try reader["PrivateIpAddress"].readIfPresent()
        value.status = try reader["Status"].readIfPresent(with: EMRClientTypes.InstanceStatus.read(from:))
        value.instanceGroupId = try reader["InstanceGroupId"].readIfPresent()
        value.instanceFleetId = try reader["InstanceFleetId"].readIfPresent()
        value.market = try reader["Market"].readIfPresent()
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.ebsVolumes = try reader["EbsVolumes"].readListIfPresent(memberReadingClosure: EMRClientTypes.EbsVolume.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EMRClientTypes.EbsVolume {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.EbsVolume {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.EbsVolume()
        value.device = try reader["Device"].readIfPresent()
        value.volumeId = try reader["VolumeId"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.InstanceStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.InstanceStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.InstanceStatus()
        value.state = try reader["State"].readIfPresent()
        value.stateChangeReason = try reader["StateChangeReason"].readIfPresent(with: EMRClientTypes.InstanceStateChangeReason.read(from:))
        value.timeline = try reader["Timeline"].readIfPresent(with: EMRClientTypes.InstanceTimeline.read(from:))
        return value
    }
}

extension EMRClientTypes.InstanceTimeline {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.InstanceTimeline {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.InstanceTimeline()
        value.creationDateTime = try reader["CreationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.readyDateTime = try reader["ReadyDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endDateTime = try reader["EndDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension EMRClientTypes.InstanceStateChangeReason {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.InstanceStateChangeReason {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.InstanceStateChangeReason()
        value.code = try reader["Code"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.NotebookExecutionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.NotebookExecutionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.NotebookExecutionSummary()
        value.notebookExecutionId = try reader["NotebookExecutionId"].readIfPresent()
        value.editorId = try reader["EditorId"].readIfPresent()
        value.notebookExecutionName = try reader["NotebookExecutionName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.notebookS3Location = try reader["NotebookS3Location"].readIfPresent(with: EMRClientTypes.NotebookS3LocationForOutput.read(from:))
        value.executionEngineId = try reader["ExecutionEngineId"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.SecurityConfigurationSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.SecurityConfigurationSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.SecurityConfigurationSummary()
        value.name = try reader["Name"].readIfPresent()
        value.creationDateTime = try reader["CreationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension EMRClientTypes.StepSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.StepSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.StepSummary()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.config = try reader["Config"].readIfPresent(with: EMRClientTypes.HadoopStepConfig.read(from:))
        value.actionOnFailure = try reader["ActionOnFailure"].readIfPresent()
        value.status = try reader["Status"].readIfPresent(with: EMRClientTypes.StepStatus.read(from:))
        return value
    }
}

extension EMRClientTypes.StudioSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.StudioSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.StudioSummary()
        value.studioId = try reader["StudioId"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.vpcId = try reader["VpcId"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.url = try reader["Url"].readIfPresent()
        value.authMode = try reader["AuthMode"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension EMRClientTypes.SessionMappingSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.SessionMappingSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.SessionMappingSummary()
        value.studioId = try reader["StudioId"].readIfPresent()
        value.identityId = try reader["IdentityId"].readIfPresent()
        value.identityName = try reader["IdentityName"].readIfPresent()
        value.identityType = try reader["IdentityType"].readIfPresent()
        value.sessionPolicyArn = try reader["SessionPolicyArn"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension EMRClientTypes.SupportedInstanceType {

    static func read(from reader: SmithyJSON.Reader) throws -> EMRClientTypes.SupportedInstanceType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EMRClientTypes.SupportedInstanceType()
        value.type = try reader["Type"].readIfPresent()
        value.memoryGB = try reader["MemoryGB"].readIfPresent()
        value.storageGB = try reader["StorageGB"].readIfPresent()
        value.vcpu = try reader["VCPU"].readIfPresent()
        value.is64BitsOnly = try reader["Is64BitsOnly"].readIfPresent()
        value.instanceFamilyId = try reader["InstanceFamilyId"].readIfPresent()
        value.ebsOptimizedAvailable = try reader["EbsOptimizedAvailable"].readIfPresent()
        value.ebsOptimizedByDefault = try reader["EbsOptimizedByDefault"].readIfPresent()
        value.numberOfDisks = try reader["NumberOfDisks"].readIfPresent()
        value.ebsStorageOnly = try reader["EbsStorageOnly"].readIfPresent()
        value.architecture = try reader["Architecture"].readIfPresent()
        return value
    }
}

extension EMRClientTypes.InstanceFleetConfig {

    static func write(value: EMRClientTypes.InstanceFleetConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InstanceFleetType"].write(value.instanceFleetType)
        try writer["InstanceTypeConfigs"].writeList(value.instanceTypeConfigs, memberWritingClosure: EMRClientTypes.InstanceTypeConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LaunchSpecifications"].write(value.launchSpecifications, with: EMRClientTypes.InstanceFleetProvisioningSpecifications.write(value:to:))
        try writer["Name"].write(value.name)
        try writer["ResizeSpecifications"].write(value.resizeSpecifications, with: EMRClientTypes.InstanceFleetResizingSpecifications.write(value:to:))
        try writer["TargetOnDemandCapacity"].write(value.targetOnDemandCapacity)
        try writer["TargetSpotCapacity"].write(value.targetSpotCapacity)
    }
}

extension EMRClientTypes.InstanceTypeConfig {

    static func write(value: EMRClientTypes.InstanceTypeConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BidPrice"].write(value.bidPrice)
        try writer["BidPriceAsPercentageOfOnDemandPrice"].write(value.bidPriceAsPercentageOfOnDemandPrice)
        try writer["Configurations"].writeList(value.configurations, memberWritingClosure: EMRClientTypes.Configuration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CustomAmiId"].write(value.customAmiId)
        try writer["EbsConfiguration"].write(value.ebsConfiguration, with: EMRClientTypes.EbsConfiguration.write(value:to:))
        try writer["InstanceType"].write(value.instanceType)
        try writer["Priority"].write(value.priority)
        try writer["WeightedCapacity"].write(value.weightedCapacity)
    }
}

extension EMRClientTypes.EbsConfiguration {

    static func write(value: EMRClientTypes.EbsConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EbsBlockDeviceConfigs"].writeList(value.ebsBlockDeviceConfigs, memberWritingClosure: EMRClientTypes.EbsBlockDeviceConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EbsOptimized"].write(value.ebsOptimized)
    }
}

extension EMRClientTypes.EbsBlockDeviceConfig {

    static func write(value: EMRClientTypes.EbsBlockDeviceConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["VolumeSpecification"].write(value.volumeSpecification, with: EMRClientTypes.VolumeSpecification.write(value:to:))
        try writer["VolumesPerInstance"].write(value.volumesPerInstance)
    }
}

extension EMRClientTypes.InstanceGroupConfig {

    static func write(value: EMRClientTypes.InstanceGroupConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingPolicy"].write(value.autoScalingPolicy, with: EMRClientTypes.AutoScalingPolicy.write(value:to:))
        try writer["BidPrice"].write(value.bidPrice)
        try writer["Configurations"].writeList(value.configurations, memberWritingClosure: EMRClientTypes.Configuration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CustomAmiId"].write(value.customAmiId)
        try writer["EbsConfiguration"].write(value.ebsConfiguration, with: EMRClientTypes.EbsConfiguration.write(value:to:))
        try writer["InstanceCount"].write(value.instanceCount)
        try writer["InstanceRole"].write(value.instanceRole)
        try writer["InstanceType"].write(value.instanceType)
        try writer["Market"].write(value.market)
        try writer["Name"].write(value.name)
    }
}

extension EMRClientTypes.AutoScalingPolicy {

    static func write(value: EMRClientTypes.AutoScalingPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Constraints"].write(value.constraints, with: EMRClientTypes.ScalingConstraints.write(value:to:))
        try writer["Rules"].writeList(value.rules, memberWritingClosure: EMRClientTypes.ScalingRule.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension EMRClientTypes.ReleaseLabelFilter {

    static func write(value: EMRClientTypes.ReleaseLabelFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Application"].write(value.application)
        try writer["Prefix"].write(value.`prefix`)
    }
}

extension EMRClientTypes.InstanceFleetModifyConfig {

    static func write(value: EMRClientTypes.InstanceFleetModifyConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InstanceFleetId"].write(value.instanceFleetId)
        try writer["InstanceTypeConfigs"].writeList(value.instanceTypeConfigs, memberWritingClosure: EMRClientTypes.InstanceTypeConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ResizeSpecifications"].write(value.resizeSpecifications, with: EMRClientTypes.InstanceFleetResizingSpecifications.write(value:to:))
        try writer["TargetOnDemandCapacity"].write(value.targetOnDemandCapacity)
        try writer["TargetSpotCapacity"].write(value.targetSpotCapacity)
    }
}

extension EMRClientTypes.InstanceGroupModifyConfig {

    static func write(value: EMRClientTypes.InstanceGroupModifyConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Configurations"].writeList(value.configurations, memberWritingClosure: EMRClientTypes.Configuration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EC2InstanceIdsToTerminate"].writeList(value.ec2InstanceIdsToTerminate, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InstanceCount"].write(value.instanceCount)
        try writer["InstanceGroupId"].write(value.instanceGroupId)
        try writer["ReconfigurationType"].write(value.reconfigurationType)
        try writer["ShrinkPolicy"].write(value.shrinkPolicy, with: EMRClientTypes.ShrinkPolicy.write(value:to:))
    }
}

extension EMRClientTypes.JobFlowInstancesConfig {

    static func write(value: EMRClientTypes.JobFlowInstancesConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdditionalMasterSecurityGroups"].writeList(value.additionalMasterSecurityGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AdditionalSlaveSecurityGroups"].writeList(value.additionalSlaveSecurityGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Ec2KeyName"].write(value.ec2KeyName)
        try writer["Ec2SubnetId"].write(value.ec2SubnetId)
        try writer["Ec2SubnetIds"].writeList(value.ec2SubnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EmrManagedMasterSecurityGroup"].write(value.emrManagedMasterSecurityGroup)
        try writer["EmrManagedSlaveSecurityGroup"].write(value.emrManagedSlaveSecurityGroup)
        try writer["HadoopVersion"].write(value.hadoopVersion)
        try writer["InstanceCount"].write(value.instanceCount)
        try writer["InstanceFleets"].writeList(value.instanceFleets, memberWritingClosure: EMRClientTypes.InstanceFleetConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InstanceGroups"].writeList(value.instanceGroups, memberWritingClosure: EMRClientTypes.InstanceGroupConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KeepJobFlowAliveWhenNoSteps"].write(value.keepJobFlowAliveWhenNoSteps)
        try writer["MasterInstanceType"].write(value.masterInstanceType)
        try writer["Placement"].write(value.placement, with: EMRClientTypes.PlacementType.write(value:to:))
        try writer["ServiceAccessSecurityGroup"].write(value.serviceAccessSecurityGroup)
        try writer["SlaveInstanceType"].write(value.slaveInstanceType)
        try writer["TerminationProtected"].write(value.terminationProtected)
        try writer["UnhealthyNodeReplacement"].write(value.unhealthyNodeReplacement)
    }
}

extension EMRClientTypes.SupportedProductConfig {

    static func write(value: EMRClientTypes.SupportedProductConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Args"].writeList(value.args, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Name"].write(value.name)
    }
}

extension EMRClientTypes.NotebookS3LocationFromInput {

    static func write(value: EMRClientTypes.NotebookS3LocationFromInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Bucket"].write(value.bucket)
        try writer["Key"].write(value.key)
    }
}

extension EMRClientTypes.OutputNotebookS3LocationFromInput {

    static func write(value: EMRClientTypes.OutputNotebookS3LocationFromInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Bucket"].write(value.bucket)
        try writer["Key"].write(value.key)
    }
}

public enum EMRClientTypes {}
