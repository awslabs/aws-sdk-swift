// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension EMRClientTypes {
    public enum ActionOnFailure: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelAndWait
        case `continue`
        case terminateCluster
        case terminateJobFlow
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionOnFailure] {
            return [
                .cancelAndWait,
                .continue,
                .terminateCluster,
                .terminateJobFlow,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelAndWait: return "CANCEL_AND_WAIT"
            case .continue: return "CONTINUE"
            case .terminateCluster: return "TERMINATE_CLUSTER"
            case .terminateJobFlow: return "TERMINATE_JOB_FLOW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ActionOnFailure(rawValue: rawValue) ?? ActionOnFailure.sdkUnknown(rawValue)
        }
    }
}

extension AddInstanceFleetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case instanceFleet = "InstanceFleet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let instanceFleet = self.instanceFleet {
            try encodeContainer.encode(instanceFleet, forKey: .instanceFleet)
        }
    }
}

extension AddInstanceFleetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AddInstanceFleetInput: Swift.Equatable {
    /// The unique identifier of the cluster.
    /// This member is required.
    public var clusterId: Swift.String?
    /// Specifies the configuration of the instance fleet.
    /// This member is required.
    public var instanceFleet: EMRClientTypes.InstanceFleetConfig?

    public init (
        clusterId: Swift.String? = nil,
        instanceFleet: EMRClientTypes.InstanceFleetConfig? = nil
    )
    {
        self.clusterId = clusterId
        self.instanceFleet = instanceFleet
    }
}

struct AddInstanceFleetInputBody: Swift.Equatable {
    let clusterId: Swift.String?
    let instanceFleet: EMRClientTypes.InstanceFleetConfig?
}

extension AddInstanceFleetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case instanceFleet = "InstanceFleet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let instanceFleetDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceFleetConfig.self, forKey: .instanceFleet)
        instanceFleet = instanceFleetDecoded
    }
}

extension AddInstanceFleetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddInstanceFleetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AddInstanceFleetOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddInstanceFleetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AddInstanceFleetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.clusterArn = output.clusterArn
            self.clusterId = output.clusterId
            self.instanceFleetId = output.instanceFleetId
        } else {
            self.clusterArn = nil
            self.clusterId = nil
            self.instanceFleetId = nil
        }
    }
}

public struct AddInstanceFleetOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name of the cluster.
    public var clusterArn: Swift.String?
    /// The unique identifier of the cluster.
    public var clusterId: Swift.String?
    /// The unique identifier of the instance fleet.
    public var instanceFleetId: Swift.String?

    public init (
        clusterArn: Swift.String? = nil,
        clusterId: Swift.String? = nil,
        instanceFleetId: Swift.String? = nil
    )
    {
        self.clusterArn = clusterArn
        self.clusterId = clusterId
        self.instanceFleetId = instanceFleetId
    }
}

struct AddInstanceFleetOutputResponseBody: Swift.Equatable {
    let clusterId: Swift.String?
    let instanceFleetId: Swift.String?
    let clusterArn: Swift.String?
}

extension AddInstanceFleetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterArn = "ClusterArn"
        case clusterId = "ClusterId"
        case instanceFleetId = "InstanceFleetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let instanceFleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceFleetId)
        instanceFleetId = instanceFleetIdDecoded
        let clusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
    }
}

extension AddInstanceGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceGroups = "InstanceGroups"
        case jobFlowId = "JobFlowId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceGroups = instanceGroups {
            var instanceGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceGroups)
            for instancegroupconfig0 in instanceGroups {
                try instanceGroupsContainer.encode(instancegroupconfig0)
            }
        }
        if let jobFlowId = self.jobFlowId {
            try encodeContainer.encode(jobFlowId, forKey: .jobFlowId)
        }
    }
}

extension AddInstanceGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Input to an AddInstanceGroups call.
public struct AddInstanceGroupsInput: Swift.Equatable {
    /// Instance groups to add.
    /// This member is required.
    public var instanceGroups: [EMRClientTypes.InstanceGroupConfig]?
    /// Job flow in which to add the instance groups.
    /// This member is required.
    public var jobFlowId: Swift.String?

    public init (
        instanceGroups: [EMRClientTypes.InstanceGroupConfig]? = nil,
        jobFlowId: Swift.String? = nil
    )
    {
        self.instanceGroups = instanceGroups
        self.jobFlowId = jobFlowId
    }
}

struct AddInstanceGroupsInputBody: Swift.Equatable {
    let instanceGroups: [EMRClientTypes.InstanceGroupConfig]?
    let jobFlowId: Swift.String?
}

extension AddInstanceGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceGroups = "InstanceGroups"
        case jobFlowId = "JobFlowId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceGroupsContainer = try containerValues.decodeIfPresent([EMRClientTypes.InstanceGroupConfig?].self, forKey: .instanceGroups)
        var instanceGroupsDecoded0:[EMRClientTypes.InstanceGroupConfig]? = nil
        if let instanceGroupsContainer = instanceGroupsContainer {
            instanceGroupsDecoded0 = [EMRClientTypes.InstanceGroupConfig]()
            for structure0 in instanceGroupsContainer {
                if let structure0 = structure0 {
                    instanceGroupsDecoded0?.append(structure0)
                }
            }
        }
        instanceGroups = instanceGroupsDecoded0
        let jobFlowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobFlowId)
        jobFlowId = jobFlowIdDecoded
    }
}

extension AddInstanceGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddInstanceGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailure" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AddInstanceGroupsOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddInstanceGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AddInstanceGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.clusterArn = output.clusterArn
            self.instanceGroupIds = output.instanceGroupIds
            self.jobFlowId = output.jobFlowId
        } else {
            self.clusterArn = nil
            self.instanceGroupIds = nil
            self.jobFlowId = nil
        }
    }
}

/// Output from an AddInstanceGroups call.
public struct AddInstanceGroupsOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name of the cluster.
    public var clusterArn: Swift.String?
    /// Instance group IDs of the newly created instance groups.
    public var instanceGroupIds: [Swift.String]?
    /// The job flow ID in which the instance groups are added.
    public var jobFlowId: Swift.String?

    public init (
        clusterArn: Swift.String? = nil,
        instanceGroupIds: [Swift.String]? = nil,
        jobFlowId: Swift.String? = nil
    )
    {
        self.clusterArn = clusterArn
        self.instanceGroupIds = instanceGroupIds
        self.jobFlowId = jobFlowId
    }
}

struct AddInstanceGroupsOutputResponseBody: Swift.Equatable {
    let jobFlowId: Swift.String?
    let instanceGroupIds: [Swift.String]?
    let clusterArn: Swift.String?
}

extension AddInstanceGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterArn = "ClusterArn"
        case instanceGroupIds = "InstanceGroupIds"
        case jobFlowId = "JobFlowId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobFlowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobFlowId)
        jobFlowId = jobFlowIdDecoded
        let instanceGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceGroupIds)
        var instanceGroupIdsDecoded0:[Swift.String]? = nil
        if let instanceGroupIdsContainer = instanceGroupIdsContainer {
            instanceGroupIdsDecoded0 = [Swift.String]()
            for string0 in instanceGroupIdsContainer {
                if let string0 = string0 {
                    instanceGroupIdsDecoded0?.append(string0)
                }
            }
        }
        instanceGroupIds = instanceGroupIdsDecoded0
        let clusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
    }
}

extension AddJobFlowStepsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionRoleArn = "ExecutionRoleArn"
        case jobFlowId = "JobFlowId"
        case steps = "Steps"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionRoleArn = self.executionRoleArn {
            try encodeContainer.encode(executionRoleArn, forKey: .executionRoleArn)
        }
        if let jobFlowId = self.jobFlowId {
            try encodeContainer.encode(jobFlowId, forKey: .jobFlowId)
        }
        if let steps = steps {
            var stepsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .steps)
            for stepconfig0 in steps {
                try stepsContainer.encode(stepconfig0)
            }
        }
    }
}

extension AddJobFlowStepsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input argument to the [AddJobFlowSteps] operation.
public struct AddJobFlowStepsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the runtime role for a step on the cluster. The runtime role can be a cross-account IAM role. The runtime role ARN is a combination of account ID, role name, and role type using the following format: arn:partition:service:region:account:resource. For example, arn:aws:iam::1234567890:role/ReadOnly is a correctly formatted runtime role ARN.
    public var executionRoleArn: Swift.String?
    /// A string that uniquely identifies the job flow. This identifier is returned by [RunJobFlow] and can also be obtained from [ListClusters].
    /// This member is required.
    public var jobFlowId: Swift.String?
    /// A list of [StepConfig] to be executed by the job flow.
    /// This member is required.
    public var steps: [EMRClientTypes.StepConfig]?

    public init (
        executionRoleArn: Swift.String? = nil,
        jobFlowId: Swift.String? = nil,
        steps: [EMRClientTypes.StepConfig]? = nil
    )
    {
        self.executionRoleArn = executionRoleArn
        self.jobFlowId = jobFlowId
        self.steps = steps
    }
}

struct AddJobFlowStepsInputBody: Swift.Equatable {
    let jobFlowId: Swift.String?
    let steps: [EMRClientTypes.StepConfig]?
    let executionRoleArn: Swift.String?
}

extension AddJobFlowStepsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionRoleArn = "ExecutionRoleArn"
        case jobFlowId = "JobFlowId"
        case steps = "Steps"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobFlowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobFlowId)
        jobFlowId = jobFlowIdDecoded
        let stepsContainer = try containerValues.decodeIfPresent([EMRClientTypes.StepConfig?].self, forKey: .steps)
        var stepsDecoded0:[EMRClientTypes.StepConfig]? = nil
        if let stepsContainer = stepsContainer {
            stepsDecoded0 = [EMRClientTypes.StepConfig]()
            for structure0 in stepsContainer {
                if let structure0 = structure0 {
                    stepsDecoded0?.append(structure0)
                }
            }
        }
        steps = stepsDecoded0
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
    }
}

extension AddJobFlowStepsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddJobFlowStepsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailure" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AddJobFlowStepsOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddJobFlowStepsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AddJobFlowStepsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stepIds = output.stepIds
        } else {
            self.stepIds = nil
        }
    }
}

/// The output for the [AddJobFlowSteps] operation.
public struct AddJobFlowStepsOutputResponse: Swift.Equatable {
    /// The identifiers of the list of steps added to the job flow.
    public var stepIds: [Swift.String]?

    public init (
        stepIds: [Swift.String]? = nil
    )
    {
        self.stepIds = stepIds
    }
}

struct AddJobFlowStepsOutputResponseBody: Swift.Equatable {
    let stepIds: [Swift.String]?
}

extension AddJobFlowStepsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stepIds = "StepIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stepIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .stepIds)
        var stepIdsDecoded0:[Swift.String]? = nil
        if let stepIdsContainer = stepIdsContainer {
            stepIdsDecoded0 = [Swift.String]()
            for string0 in stepIdsContainer {
                if let string0 = string0 {
                    stepIdsDecoded0?.append(string0)
                }
            }
        }
        stepIds = stepIdsDecoded0
    }
}

extension AddTagsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = self.resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension AddTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// This input identifies an Amazon EMR resource and a list of tags to attach.
public struct AddTagsInput: Swift.Equatable {
    /// The Amazon EMR resource identifier to which tags will be added. For example, a cluster identifier or an Amazon EMR Studio ID.
    /// This member is required.
    public var resourceId: Swift.String?
    /// A list of tags to associate with a resource. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.
    /// This member is required.
    public var tags: [EMRClientTypes.Tag]?

    public init (
        resourceId: Swift.String? = nil,
        tags: [EMRClientTypes.Tag]? = nil
    )
    {
        self.resourceId = resourceId
        self.tags = tags
    }
}

struct AddTagsInputBody: Swift.Equatable {
    let resourceId: Swift.String?
    let tags: [EMRClientTypes.Tag]?
}

extension AddTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([EMRClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[EMRClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [EMRClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension AddTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AddTagsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// This output indicates the result of adding tags to a resource.
public struct AddTagsOutputResponse: Swift.Equatable {

    public init () { }
}

extension EMRClientTypes {
    public enum AdjustmentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case changeInCapacity
        case exactCapacity
        case percentChangeInCapacity
        case sdkUnknown(Swift.String)

        public static var allCases: [AdjustmentType] {
            return [
                .changeInCapacity,
                .exactCapacity,
                .percentChangeInCapacity,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .changeInCapacity: return "CHANGE_IN_CAPACITY"
            case .exactCapacity: return "EXACT_CAPACITY"
            case .percentChangeInCapacity: return "PERCENT_CHANGE_IN_CAPACITY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AdjustmentType(rawValue: rawValue) ?? AdjustmentType.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.Application: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalInfo = "AdditionalInfo"
        case args = "Args"
        case name = "Name"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalInfo = additionalInfo {
            var additionalInfoContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .additionalInfo)
            for (dictKey0, stringMap0) in additionalInfo {
                try additionalInfoContainer.encode(stringMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let args = args {
            var argsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .args)
            for string0 in args {
                try argsContainer.encode(string0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let argsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .args)
        var argsDecoded0:[Swift.String]? = nil
        if let argsContainer = argsContainer {
            argsDecoded0 = [Swift.String]()
            for string0 in argsContainer {
                if let string0 = string0 {
                    argsDecoded0?.append(string0)
                }
            }
        }
        args = argsDecoded0
        let additionalInfoContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .additionalInfo)
        var additionalInfoDecoded0: [Swift.String:Swift.String]? = nil
        if let additionalInfoContainer = additionalInfoContainer {
            additionalInfoDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in additionalInfoContainer {
                if let string0 = string0 {
                    additionalInfoDecoded0?[key0] = string0
                }
            }
        }
        additionalInfo = additionalInfoDecoded0
    }
}

extension EMRClientTypes {
    /// With Amazon EMR release version 4.0 and later, the only accepted parameter is the application name. To pass arguments to applications, you use configuration classifications specified using configuration JSON objects. For more information, see [Configuring Applications](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-configure-apps.html). With earlier Amazon EMR releases, the application is any Amazon or third-party software that you can add to the cluster. This structure contains a list of strings that indicates the software to use with the cluster and accepts a user argument list. Amazon EMR accepts and forwards the argument list to the corresponding installation script as bootstrap action argument.
    public struct Application: Swift.Equatable {
        /// This option is for advanced users only. This is meta information about third-party applications that third-party vendors use for testing purposes.
        public var additionalInfo: [Swift.String:Swift.String]?
        /// Arguments for Amazon EMR to pass to the application.
        public var args: [Swift.String]?
        /// The name of the application.
        public var name: Swift.String?
        /// The version of the application.
        public var version: Swift.String?

        public init (
            additionalInfo: [Swift.String:Swift.String]? = nil,
            args: [Swift.String]? = nil,
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.additionalInfo = additionalInfo
            self.args = args
            self.name = name
            self.version = version
        }
    }

}

extension EMRClientTypes {
    public enum AuthMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case iam
        case sso
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthMode] {
            return [
                .iam,
                .sso,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .iam: return "IAM"
            case .sso: return "SSO"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuthMode(rawValue: rawValue) ?? AuthMode.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.AutoScalingPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case constraints = "Constraints"
        case rules = "Rules"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let constraints = self.constraints {
            try encodeContainer.encode(constraints, forKey: .constraints)
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for scalingrule0 in rules {
                try rulesContainer.encode(scalingrule0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let constraintsDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ScalingConstraints.self, forKey: .constraints)
        constraints = constraintsDecoded
        let rulesContainer = try containerValues.decodeIfPresent([EMRClientTypes.ScalingRule?].self, forKey: .rules)
        var rulesDecoded0:[EMRClientTypes.ScalingRule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [EMRClientTypes.ScalingRule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
    }
}

extension EMRClientTypes {
    /// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. An automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. See [PutAutoScalingPolicy].
    public struct AutoScalingPolicy: Swift.Equatable {
        /// The upper and lower EC2 instance limits for an automatic scaling policy. Automatic scaling activity will not cause an instance group to grow above or below these limits.
        /// This member is required.
        public var constraints: EMRClientTypes.ScalingConstraints?
        /// The scale-in and scale-out rules that comprise the automatic scaling policy.
        /// This member is required.
        public var rules: [EMRClientTypes.ScalingRule]?

        public init (
            constraints: EMRClientTypes.ScalingConstraints? = nil,
            rules: [EMRClientTypes.ScalingRule]? = nil
        )
        {
            self.constraints = constraints
            self.rules = rules
        }
    }

}

extension EMRClientTypes.AutoScalingPolicyDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case constraints = "Constraints"
        case rules = "Rules"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let constraints = self.constraints {
            try encodeContainer.encode(constraints, forKey: .constraints)
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for scalingrule0 in rules {
                try rulesContainer.encode(scalingrule0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(EMRClientTypes.AutoScalingPolicyStatus.self, forKey: .status)
        status = statusDecoded
        let constraintsDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ScalingConstraints.self, forKey: .constraints)
        constraints = constraintsDecoded
        let rulesContainer = try containerValues.decodeIfPresent([EMRClientTypes.ScalingRule?].self, forKey: .rules)
        var rulesDecoded0:[EMRClientTypes.ScalingRule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [EMRClientTypes.ScalingRule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
    }
}

extension EMRClientTypes {
    /// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. See [PutAutoScalingPolicy].
    public struct AutoScalingPolicyDescription: Swift.Equatable {
        /// The upper and lower EC2 instance limits for an automatic scaling policy. Automatic scaling activity will not cause an instance group to grow above or below these limits.
        public var constraints: EMRClientTypes.ScalingConstraints?
        /// The scale-in and scale-out rules that comprise the automatic scaling policy.
        public var rules: [EMRClientTypes.ScalingRule]?
        /// The status of an automatic scaling policy.
        public var status: EMRClientTypes.AutoScalingPolicyStatus?

        public init (
            constraints: EMRClientTypes.ScalingConstraints? = nil,
            rules: [EMRClientTypes.ScalingRule]? = nil,
            status: EMRClientTypes.AutoScalingPolicyStatus? = nil
        )
        {
            self.constraints = constraints
            self.rules = rules
            self.status = status
        }
    }

}

extension EMRClientTypes {
    public enum AutoScalingPolicyState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case attached
        case attaching
        case detached
        case detaching
        case failed
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoScalingPolicyState] {
            return [
                .attached,
                .attaching,
                .detached,
                .detaching,
                .failed,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .attached: return "ATTACHED"
            case .attaching: return "ATTACHING"
            case .detached: return "DETACHED"
            case .detaching: return "DETACHING"
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoScalingPolicyState(rawValue: rawValue) ?? AutoScalingPolicyState.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.AutoScalingPolicyStateChangeReason: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.AutoScalingPolicyStateChangeReasonCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EMRClientTypes {
    /// The reason for an [AutoScalingPolicyStatus] change.
    public struct AutoScalingPolicyStateChangeReason: Swift.Equatable {
        /// The code indicating the reason for the change in status.USER_REQUEST indicates that the scaling policy status was changed by a user. PROVISION_FAILURE indicates that the status change was because the policy failed to provision. CLEANUP_FAILURE indicates an error.
        public var code: EMRClientTypes.AutoScalingPolicyStateChangeReasonCode?
        /// A friendly, more verbose message that accompanies an automatic scaling policy state change.
        public var message: Swift.String?

        public init (
            code: EMRClientTypes.AutoScalingPolicyStateChangeReasonCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension EMRClientTypes {
    public enum AutoScalingPolicyStateChangeReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cleanupFailure
        case provisionFailure
        case userRequest
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoScalingPolicyStateChangeReasonCode] {
            return [
                .cleanupFailure,
                .provisionFailure,
                .userRequest,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cleanupFailure: return "CLEANUP_FAILURE"
            case .provisionFailure: return "PROVISION_FAILURE"
            case .userRequest: return "USER_REQUEST"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoScalingPolicyStateChangeReasonCode(rawValue: rawValue) ?? AutoScalingPolicyStateChangeReasonCode.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.AutoScalingPolicyStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case state = "State"
        case stateChangeReason = "StateChangeReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateChangeReason = self.stateChangeReason {
            try encodeContainer.encode(stateChangeReason, forKey: .stateChangeReason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(EMRClientTypes.AutoScalingPolicyState.self, forKey: .state)
        state = stateDecoded
        let stateChangeReasonDecoded = try containerValues.decodeIfPresent(EMRClientTypes.AutoScalingPolicyStateChangeReason.self, forKey: .stateChangeReason)
        stateChangeReason = stateChangeReasonDecoded
    }
}

extension EMRClientTypes {
    /// The status of an automatic scaling policy.
    public struct AutoScalingPolicyStatus: Swift.Equatable {
        /// Indicates the status of the automatic scaling policy.
        public var state: EMRClientTypes.AutoScalingPolicyState?
        /// The reason for a change in status.
        public var stateChangeReason: EMRClientTypes.AutoScalingPolicyStateChangeReason?

        public init (
            state: EMRClientTypes.AutoScalingPolicyState? = nil,
            stateChangeReason: EMRClientTypes.AutoScalingPolicyStateChangeReason? = nil
        )
        {
            self.state = state
            self.stateChangeReason = stateChangeReason
        }
    }

}

extension EMRClientTypes.AutoTerminationPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case idleTimeout = "IdleTimeout"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if idleTimeout != 0 {
            try encodeContainer.encode(idleTimeout, forKey: .idleTimeout)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idleTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .idleTimeout) ?? 0
        idleTimeout = idleTimeoutDecoded
    }
}

extension EMRClientTypes {
    /// An auto-termination policy for an Amazon EMR cluster. An auto-termination policy defines the amount of idle time in seconds after which a cluster automatically terminates. For alternative cluster termination options, see [Control cluster termination](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-termination.html).
    public struct AutoTerminationPolicy: Swift.Equatable {
        /// Specifies the amount of idle time in seconds after which the cluster automatically terminates. You can specify a minimum of 60 seconds and a maximum of 604800 seconds (seven days).
        public var idleTimeout: Swift.Int

        public init (
            idleTimeout: Swift.Int = 0
        )
        {
            self.idleTimeout = idleTimeout
        }
    }

}

extension EMRClientTypes.BlockPublicAccessConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blockPublicSecurityGroupRules = "BlockPublicSecurityGroupRules"
        case classification = "Classification"
        case configurations = "Configurations"
        case permittedPublicSecurityGroupRuleRanges = "PermittedPublicSecurityGroupRuleRanges"
        case properties = "Properties"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if blockPublicSecurityGroupRules != false {
            try encodeContainer.encode(blockPublicSecurityGroupRules, forKey: .blockPublicSecurityGroupRules)
        }
        if let classification = self.classification {
            try encodeContainer.encode(classification, forKey: .classification)
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configuration0 in configurations {
                try configurationsContainer.encode(configuration0)
            }
        }
        if let permittedPublicSecurityGroupRuleRanges = permittedPublicSecurityGroupRuleRanges {
            var permittedPublicSecurityGroupRuleRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .permittedPublicSecurityGroupRuleRanges)
            for portrange0 in permittedPublicSecurityGroupRuleRanges {
                try permittedPublicSecurityGroupRuleRangesContainer.encode(portrange0)
            }
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .properties)
            for (dictKey0, stringMap0) in properties {
                try propertiesContainer.encode(stringMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blockPublicSecurityGroupRulesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .blockPublicSecurityGroupRules) ?? false
        blockPublicSecurityGroupRules = blockPublicSecurityGroupRulesDecoded
        let permittedPublicSecurityGroupRuleRangesContainer = try containerValues.decodeIfPresent([EMRClientTypes.PortRange?].self, forKey: .permittedPublicSecurityGroupRuleRanges)
        var permittedPublicSecurityGroupRuleRangesDecoded0:[EMRClientTypes.PortRange]? = nil
        if let permittedPublicSecurityGroupRuleRangesContainer = permittedPublicSecurityGroupRuleRangesContainer {
            permittedPublicSecurityGroupRuleRangesDecoded0 = [EMRClientTypes.PortRange]()
            for structure0 in permittedPublicSecurityGroupRuleRangesContainer {
                if let structure0 = structure0 {
                    permittedPublicSecurityGroupRuleRangesDecoded0?.append(structure0)
                }
            }
        }
        permittedPublicSecurityGroupRuleRanges = permittedPublicSecurityGroupRuleRangesDecoded0
        let classificationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .classification)
        classification = classificationDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([EMRClientTypes.Configuration?].self, forKey: .configurations)
        var configurationsDecoded0:[EMRClientTypes.Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [EMRClientTypes.Configuration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
        let propertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .properties)
        var propertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in propertiesContainer {
                if let string0 = string0 {
                    propertiesDecoded0?[key0] = string0
                }
            }
        }
        properties = propertiesDecoded0
    }
}

extension EMRClientTypes {
    /// A configuration for Amazon EMR block public access. When BlockPublicSecurityGroupRules is set to true, Amazon EMR prevents cluster creation if one of the cluster's security groups has a rule that allows inbound traffic from 0.0.0.0/0 or ::/0 on a port, unless the port is specified as an exception using PermittedPublicSecurityGroupRuleRanges.
    public struct BlockPublicAccessConfiguration: Swift.Equatable {
        /// Indicates whether Amazon EMR block public access is enabled (true) or disabled (false). By default, the value is false for accounts that have created EMR clusters before July 2019. For accounts created after this, the default is true.
        /// This member is required.
        public var blockPublicSecurityGroupRules: Swift.Bool
        /// The classification within a configuration.
        public var classification: Swift.String?
        /// A list of additional configurations to apply within a configuration object.
        public var configurations: [EMRClientTypes.Configuration]?
        /// Specifies ports and port ranges that are permitted to have security group rules that allow inbound traffic from all public sources. For example, if Port 23 (Telnet) is specified for PermittedPublicSecurityGroupRuleRanges, Amazon EMR allows cluster creation if a security group associated with the cluster has a rule that allows inbound traffic on Port 23 from IPv4 0.0.0.0/0 or IPv6 port ::/0 as the source. By default, Port 22, which is used for SSH access to the cluster EC2 instances, is in the list of PermittedPublicSecurityGroupRuleRanges.
        public var permittedPublicSecurityGroupRuleRanges: [EMRClientTypes.PortRange]?
        /// A set of properties specified within a configuration classification.
        public var properties: [Swift.String:Swift.String]?

        public init (
            blockPublicSecurityGroupRules: Swift.Bool = false,
            classification: Swift.String? = nil,
            configurations: [EMRClientTypes.Configuration]? = nil,
            permittedPublicSecurityGroupRuleRanges: [EMRClientTypes.PortRange]? = nil,
            properties: [Swift.String:Swift.String]? = nil
        )
        {
            self.blockPublicSecurityGroupRules = blockPublicSecurityGroupRules
            self.classification = classification
            self.configurations = configurations
            self.permittedPublicSecurityGroupRuleRanges = permittedPublicSecurityGroupRuleRanges
            self.properties = properties
        }
    }

}

extension EMRClientTypes.BlockPublicAccessConfigurationMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdByArn = "CreatedByArn"
        case creationDateTime = "CreationDateTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdByArn = self.createdByArn {
            try encodeContainer.encode(createdByArn, forKey: .createdByArn)
        }
        if let creationDateTime = self.creationDateTime {
            try encodeContainer.encodeTimestamp(creationDateTime, format: .epochSeconds, forKey: .creationDateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let createdByArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByArn)
        createdByArn = createdByArnDecoded
    }
}

extension EMRClientTypes {
    /// Properties that describe the Amazon Web Services principal that created the BlockPublicAccessConfiguration using the PutBlockPublicAccessConfiguration action as well as the date and time that the configuration was created. Each time a configuration for block public access is updated, Amazon EMR updates this metadata.
    public struct BlockPublicAccessConfigurationMetadata: Swift.Equatable {
        /// The Amazon Resource Name that created or last modified the configuration.
        /// This member is required.
        public var createdByArn: Swift.String?
        /// The date and time that the configuration was created.
        /// This member is required.
        public var creationDateTime: ClientRuntime.Date?

        public init (
            createdByArn: Swift.String? = nil,
            creationDateTime: ClientRuntime.Date? = nil
        )
        {
            self.createdByArn = createdByArn
            self.creationDateTime = creationDateTime
        }
    }

}

extension EMRClientTypes.BootstrapActionConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case scriptBootstrapAction = "ScriptBootstrapAction"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scriptBootstrapAction = self.scriptBootstrapAction {
            try encodeContainer.encode(scriptBootstrapAction, forKey: .scriptBootstrapAction)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scriptBootstrapActionDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ScriptBootstrapActionConfig.self, forKey: .scriptBootstrapAction)
        scriptBootstrapAction = scriptBootstrapActionDecoded
    }
}

extension EMRClientTypes {
    /// Configuration of a bootstrap action.
    public struct BootstrapActionConfig: Swift.Equatable {
        /// The name of the bootstrap action.
        /// This member is required.
        public var name: Swift.String?
        /// The script run by the bootstrap action.
        /// This member is required.
        public var scriptBootstrapAction: EMRClientTypes.ScriptBootstrapActionConfig?

        public init (
            name: Swift.String? = nil,
            scriptBootstrapAction: EMRClientTypes.ScriptBootstrapActionConfig? = nil
        )
        {
            self.name = name
            self.scriptBootstrapAction = scriptBootstrapAction
        }
    }

}

extension EMRClientTypes.BootstrapActionDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bootstrapActionConfig = "BootstrapActionConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bootstrapActionConfig = self.bootstrapActionConfig {
            try encodeContainer.encode(bootstrapActionConfig, forKey: .bootstrapActionConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bootstrapActionConfigDecoded = try containerValues.decodeIfPresent(EMRClientTypes.BootstrapActionConfig.self, forKey: .bootstrapActionConfig)
        bootstrapActionConfig = bootstrapActionConfigDecoded
    }
}

extension EMRClientTypes {
    /// Reports the configuration of a bootstrap action in a cluster (job flow).
    public struct BootstrapActionDetail: Swift.Equatable {
        /// A description of the bootstrap action.
        public var bootstrapActionConfig: EMRClientTypes.BootstrapActionConfig?

        public init (
            bootstrapActionConfig: EMRClientTypes.BootstrapActionConfig? = nil
        )
        {
            self.bootstrapActionConfig = bootstrapActionConfig
        }
    }

}

extension EMRClientTypes.CancelStepsInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reason = "Reason"
        case status = "Status"
        case stepId = "StepId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let stepId = self.stepId {
            try encodeContainer.encode(stepId, forKey: .stepId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stepIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stepId)
        stepId = stepIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EMRClientTypes.CancelStepsRequestStatus.self, forKey: .status)
        status = statusDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension EMRClientTypes {
    /// Specification of the status of a CancelSteps request. Available only in Amazon EMR version 4.8.0 and later, excluding version 5.0.0.
    public struct CancelStepsInfo: Swift.Equatable {
        /// The reason for the failure if the CancelSteps request fails.
        public var reason: Swift.String?
        /// The status of a CancelSteps Request. The value may be SUBMITTED or FAILED.
        public var status: EMRClientTypes.CancelStepsRequestStatus?
        /// The encrypted StepId of a step.
        public var stepId: Swift.String?

        public init (
            reason: Swift.String? = nil,
            status: EMRClientTypes.CancelStepsRequestStatus? = nil,
            stepId: Swift.String? = nil
        )
        {
            self.reason = reason
            self.status = status
            self.stepId = stepId
        }
    }

}

extension CancelStepsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case stepCancellationOption = "StepCancellationOption"
        case stepIds = "StepIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let stepCancellationOption = self.stepCancellationOption {
            try encodeContainer.encode(stepCancellationOption.rawValue, forKey: .stepCancellationOption)
        }
        if let stepIds = stepIds {
            var stepIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stepIds)
            for xmlstringmaxlen2560 in stepIds {
                try stepIdsContainer.encode(xmlstringmaxlen2560)
            }
        }
    }
}

extension CancelStepsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input argument to the [CancelSteps] operation.
public struct CancelStepsInput: Swift.Equatable {
    /// The ClusterID for the specified steps that will be canceled. Use [RunJobFlow] and [ListClusters] to get ClusterIDs.
    /// This member is required.
    public var clusterId: Swift.String?
    /// The option to choose to cancel RUNNING steps. By default, the value is SEND_INTERRUPT.
    public var stepCancellationOption: EMRClientTypes.StepCancellationOption?
    /// The list of StepIDs to cancel. Use [ListSteps] to get steps and their states for the specified cluster.
    /// This member is required.
    public var stepIds: [Swift.String]?

    public init (
        clusterId: Swift.String? = nil,
        stepCancellationOption: EMRClientTypes.StepCancellationOption? = nil,
        stepIds: [Swift.String]? = nil
    )
    {
        self.clusterId = clusterId
        self.stepCancellationOption = stepCancellationOption
        self.stepIds = stepIds
    }
}

struct CancelStepsInputBody: Swift.Equatable {
    let clusterId: Swift.String?
    let stepIds: [Swift.String]?
    let stepCancellationOption: EMRClientTypes.StepCancellationOption?
}

extension CancelStepsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case stepCancellationOption = "StepCancellationOption"
        case stepIds = "StepIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let stepIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .stepIds)
        var stepIdsDecoded0:[Swift.String]? = nil
        if let stepIdsContainer = stepIdsContainer {
            stepIdsDecoded0 = [Swift.String]()
            for string0 in stepIdsContainer {
                if let string0 = string0 {
                    stepIdsDecoded0?.append(string0)
                }
            }
        }
        stepIds = stepIdsDecoded0
        let stepCancellationOptionDecoded = try containerValues.decodeIfPresent(EMRClientTypes.StepCancellationOption.self, forKey: .stepCancellationOption)
        stepCancellationOption = stepCancellationOptionDecoded
    }
}

extension CancelStepsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelStepsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailure" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CancelStepsOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelStepsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CancelStepsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cancelStepsInfoList = output.cancelStepsInfoList
        } else {
            self.cancelStepsInfoList = nil
        }
    }
}

/// The output for the [CancelSteps] operation.
public struct CancelStepsOutputResponse: Swift.Equatable {
    /// A list of [CancelStepsInfo], which shows the status of specified cancel requests for each StepID specified.
    public var cancelStepsInfoList: [EMRClientTypes.CancelStepsInfo]?

    public init (
        cancelStepsInfoList: [EMRClientTypes.CancelStepsInfo]? = nil
    )
    {
        self.cancelStepsInfoList = cancelStepsInfoList
    }
}

struct CancelStepsOutputResponseBody: Swift.Equatable {
    let cancelStepsInfoList: [EMRClientTypes.CancelStepsInfo]?
}

extension CancelStepsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cancelStepsInfoList = "CancelStepsInfoList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cancelStepsInfoListContainer = try containerValues.decodeIfPresent([EMRClientTypes.CancelStepsInfo?].self, forKey: .cancelStepsInfoList)
        var cancelStepsInfoListDecoded0:[EMRClientTypes.CancelStepsInfo]? = nil
        if let cancelStepsInfoListContainer = cancelStepsInfoListContainer {
            cancelStepsInfoListDecoded0 = [EMRClientTypes.CancelStepsInfo]()
            for structure0 in cancelStepsInfoListContainer {
                if let structure0 = structure0 {
                    cancelStepsInfoListDecoded0?.append(structure0)
                }
            }
        }
        cancelStepsInfoList = cancelStepsInfoListDecoded0
    }
}

extension EMRClientTypes {
    public enum CancelStepsRequestStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case submitted
        case sdkUnknown(Swift.String)

        public static var allCases: [CancelStepsRequestStatus] {
            return [
                .failed,
                .submitted,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .submitted: return "SUBMITTED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CancelStepsRequestStatus(rawValue: rawValue) ?? CancelStepsRequestStatus.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.CloudWatchAlarmDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comparisonOperator = "ComparisonOperator"
        case dimensions = "Dimensions"
        case evaluationPeriods = "EvaluationPeriods"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case period = "Period"
        case statistic = "Statistic"
        case threshold = "Threshold"
        case unit = "Unit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparisonOperator = self.comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let dimensions = dimensions {
            var dimensionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensions)
            for metricdimension0 in dimensions {
                try dimensionsContainer.encode(metricdimension0)
            }
        }
        if let evaluationPeriods = self.evaluationPeriods {
            try encodeContainer.encode(evaluationPeriods, forKey: .evaluationPeriods)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let namespace = self.namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
        if let period = self.period {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let statistic = self.statistic {
            try encodeContainer.encode(statistic.rawValue, forKey: .statistic)
        }
        if let threshold = self.threshold {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
        if let unit = self.unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let evaluationPeriodsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evaluationPeriods)
        evaluationPeriods = evaluationPeriodsDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(EMRClientTypes.Statistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let thresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .threshold)
        threshold = thresholdDecoded
        let unitDecoded = try containerValues.decodeIfPresent(EMRClientTypes.Unit.self, forKey: .unit)
        unit = unitDecoded
        let dimensionsContainer = try containerValues.decodeIfPresent([EMRClientTypes.MetricDimension?].self, forKey: .dimensions)
        var dimensionsDecoded0:[EMRClientTypes.MetricDimension]? = nil
        if let dimensionsContainer = dimensionsContainer {
            dimensionsDecoded0 = [EMRClientTypes.MetricDimension]()
            for structure0 in dimensionsContainer {
                if let structure0 = structure0 {
                    dimensionsDecoded0?.append(structure0)
                }
            }
        }
        dimensions = dimensionsDecoded0
    }
}

extension EMRClientTypes {
    /// The definition of a CloudWatch metric alarm, which determines when an automatic scaling activity is triggered. When the defined alarm conditions are satisfied, scaling activity begins.
    public struct CloudWatchAlarmDefinition: Swift.Equatable {
        /// Determines how the metric specified by MetricName is compared to the value specified by Threshold.
        /// This member is required.
        public var comparisonOperator: EMRClientTypes.ComparisonOperator?
        /// A CloudWatch metric dimension.
        public var dimensions: [EMRClientTypes.MetricDimension]?
        /// The number of periods, in five-minute increments, during which the alarm condition must exist before the alarm triggers automatic scaling activity. The default value is 1.
        public var evaluationPeriods: Swift.Int?
        /// The name of the CloudWatch metric that is watched to determine an alarm condition.
        /// This member is required.
        public var metricName: Swift.String?
        /// The namespace for the CloudWatch metric. The default is AWS/ElasticMapReduce.
        public var namespace: Swift.String?
        /// The period, in seconds, over which the statistic is applied. EMR CloudWatch metrics are emitted every five minutes (300 seconds), so if an EMR CloudWatch metric is specified, specify 300.
        /// This member is required.
        public var period: Swift.Int?
        /// The statistic to apply to the metric associated with the alarm. The default is AVERAGE.
        public var statistic: EMRClientTypes.Statistic?
        /// The value against which the specified statistic is compared.
        /// This member is required.
        public var threshold: Swift.Double?
        /// The unit of measure associated with the CloudWatch metric being watched. The value specified for Unit must correspond to the units specified in the CloudWatch metric.
        public var unit: EMRClientTypes.Unit?

        public init (
            comparisonOperator: EMRClientTypes.ComparisonOperator? = nil,
            dimensions: [EMRClientTypes.MetricDimension]? = nil,
            evaluationPeriods: Swift.Int? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil,
            period: Swift.Int? = nil,
            statistic: EMRClientTypes.Statistic? = nil,
            threshold: Swift.Double? = nil,
            unit: EMRClientTypes.Unit? = nil
        )
        {
            self.comparisonOperator = comparisonOperator
            self.dimensions = dimensions
            self.evaluationPeriods = evaluationPeriods
            self.metricName = metricName
            self.namespace = namespace
            self.period = period
            self.statistic = statistic
            self.threshold = threshold
            self.unit = unit
        }
    }

}

extension EMRClientTypes.Cluster: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applications = "Applications"
        case autoScalingRole = "AutoScalingRole"
        case autoTerminate = "AutoTerminate"
        case clusterArn = "ClusterArn"
        case configurations = "Configurations"
        case customAmiId = "CustomAmiId"
        case ebsRootVolumeSize = "EbsRootVolumeSize"
        case ec2InstanceAttributes = "Ec2InstanceAttributes"
        case id = "Id"
        case instanceCollectionType = "InstanceCollectionType"
        case kerberosAttributes = "KerberosAttributes"
        case logEncryptionKmsKeyId = "LogEncryptionKmsKeyId"
        case logUri = "LogUri"
        case masterPublicDnsName = "MasterPublicDnsName"
        case name = "Name"
        case normalizedInstanceHours = "NormalizedInstanceHours"
        case osReleaseLabel = "OSReleaseLabel"
        case outpostArn = "OutpostArn"
        case placementGroups = "PlacementGroups"
        case releaseLabel = "ReleaseLabel"
        case repoUpgradeOnBoot = "RepoUpgradeOnBoot"
        case requestedAmiVersion = "RequestedAmiVersion"
        case runningAmiVersion = "RunningAmiVersion"
        case scaleDownBehavior = "ScaleDownBehavior"
        case securityConfiguration = "SecurityConfiguration"
        case serviceRole = "ServiceRole"
        case status = "Status"
        case stepConcurrencyLevel = "StepConcurrencyLevel"
        case tags = "Tags"
        case terminationProtected = "TerminationProtected"
        case visibleToAllUsers = "VisibleToAllUsers"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applications = applications {
            var applicationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .applications)
            for application0 in applications {
                try applicationsContainer.encode(application0)
            }
        }
        if let autoScalingRole = self.autoScalingRole {
            try encodeContainer.encode(autoScalingRole, forKey: .autoScalingRole)
        }
        if autoTerminate != false {
            try encodeContainer.encode(autoTerminate, forKey: .autoTerminate)
        }
        if let clusterArn = self.clusterArn {
            try encodeContainer.encode(clusterArn, forKey: .clusterArn)
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configuration0 in configurations {
                try configurationsContainer.encode(configuration0)
            }
        }
        if let customAmiId = self.customAmiId {
            try encodeContainer.encode(customAmiId, forKey: .customAmiId)
        }
        if let ebsRootVolumeSize = self.ebsRootVolumeSize {
            try encodeContainer.encode(ebsRootVolumeSize, forKey: .ebsRootVolumeSize)
        }
        if let ec2InstanceAttributes = self.ec2InstanceAttributes {
            try encodeContainer.encode(ec2InstanceAttributes, forKey: .ec2InstanceAttributes)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let instanceCollectionType = self.instanceCollectionType {
            try encodeContainer.encode(instanceCollectionType.rawValue, forKey: .instanceCollectionType)
        }
        if let kerberosAttributes = self.kerberosAttributes {
            try encodeContainer.encode(kerberosAttributes, forKey: .kerberosAttributes)
        }
        if let logEncryptionKmsKeyId = self.logEncryptionKmsKeyId {
            try encodeContainer.encode(logEncryptionKmsKeyId, forKey: .logEncryptionKmsKeyId)
        }
        if let logUri = self.logUri {
            try encodeContainer.encode(logUri, forKey: .logUri)
        }
        if let masterPublicDnsName = self.masterPublicDnsName {
            try encodeContainer.encode(masterPublicDnsName, forKey: .masterPublicDnsName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let normalizedInstanceHours = self.normalizedInstanceHours {
            try encodeContainer.encode(normalizedInstanceHours, forKey: .normalizedInstanceHours)
        }
        if let osReleaseLabel = self.osReleaseLabel {
            try encodeContainer.encode(osReleaseLabel, forKey: .osReleaseLabel)
        }
        if let outpostArn = self.outpostArn {
            try encodeContainer.encode(outpostArn, forKey: .outpostArn)
        }
        if let placementGroups = placementGroups {
            var placementGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .placementGroups)
            for placementgroupconfig0 in placementGroups {
                try placementGroupsContainer.encode(placementgroupconfig0)
            }
        }
        if let releaseLabel = self.releaseLabel {
            try encodeContainer.encode(releaseLabel, forKey: .releaseLabel)
        }
        if let repoUpgradeOnBoot = self.repoUpgradeOnBoot {
            try encodeContainer.encode(repoUpgradeOnBoot.rawValue, forKey: .repoUpgradeOnBoot)
        }
        if let requestedAmiVersion = self.requestedAmiVersion {
            try encodeContainer.encode(requestedAmiVersion, forKey: .requestedAmiVersion)
        }
        if let runningAmiVersion = self.runningAmiVersion {
            try encodeContainer.encode(runningAmiVersion, forKey: .runningAmiVersion)
        }
        if let scaleDownBehavior = self.scaleDownBehavior {
            try encodeContainer.encode(scaleDownBehavior.rawValue, forKey: .scaleDownBehavior)
        }
        if let securityConfiguration = self.securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
        if let serviceRole = self.serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let stepConcurrencyLevel = self.stepConcurrencyLevel {
            try encodeContainer.encode(stepConcurrencyLevel, forKey: .stepConcurrencyLevel)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if terminationProtected != false {
            try encodeContainer.encode(terminationProtected, forKey: .terminationProtected)
        }
        if visibleToAllUsers != false {
            try encodeContainer.encode(visibleToAllUsers, forKey: .visibleToAllUsers)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ClusterStatus.self, forKey: .status)
        status = statusDecoded
        let ec2InstanceAttributesDecoded = try containerValues.decodeIfPresent(EMRClientTypes.Ec2InstanceAttributes.self, forKey: .ec2InstanceAttributes)
        ec2InstanceAttributes = ec2InstanceAttributesDecoded
        let instanceCollectionTypeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceCollectionType.self, forKey: .instanceCollectionType)
        instanceCollectionType = instanceCollectionTypeDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logUri)
        logUri = logUriDecoded
        let logEncryptionKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logEncryptionKmsKeyId)
        logEncryptionKmsKeyId = logEncryptionKmsKeyIdDecoded
        let requestedAmiVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestedAmiVersion)
        requestedAmiVersion = requestedAmiVersionDecoded
        let runningAmiVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runningAmiVersion)
        runningAmiVersion = runningAmiVersionDecoded
        let releaseLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .releaseLabel)
        releaseLabel = releaseLabelDecoded
        let autoTerminateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoTerminate) ?? false
        autoTerminate = autoTerminateDecoded
        let terminationProtectedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .terminationProtected) ?? false
        terminationProtected = terminationProtectedDecoded
        let visibleToAllUsersDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .visibleToAllUsers) ?? false
        visibleToAllUsers = visibleToAllUsersDecoded
        let applicationsContainer = try containerValues.decodeIfPresent([EMRClientTypes.Application?].self, forKey: .applications)
        var applicationsDecoded0:[EMRClientTypes.Application]? = nil
        if let applicationsContainer = applicationsContainer {
            applicationsDecoded0 = [EMRClientTypes.Application]()
            for structure0 in applicationsContainer {
                if let structure0 = structure0 {
                    applicationsDecoded0?.append(structure0)
                }
            }
        }
        applications = applicationsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([EMRClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[EMRClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [EMRClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let normalizedInstanceHoursDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .normalizedInstanceHours)
        normalizedInstanceHours = normalizedInstanceHoursDecoded
        let masterPublicDnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterPublicDnsName)
        masterPublicDnsName = masterPublicDnsNameDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([EMRClientTypes.Configuration?].self, forKey: .configurations)
        var configurationsDecoded0:[EMRClientTypes.Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [EMRClientTypes.Configuration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let autoScalingRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingRole)
        autoScalingRole = autoScalingRoleDecoded
        let scaleDownBehaviorDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ScaleDownBehavior.self, forKey: .scaleDownBehavior)
        scaleDownBehavior = scaleDownBehaviorDecoded
        let customAmiIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customAmiId)
        customAmiId = customAmiIdDecoded
        let ebsRootVolumeSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ebsRootVolumeSize)
        ebsRootVolumeSize = ebsRootVolumeSizeDecoded
        let repoUpgradeOnBootDecoded = try containerValues.decodeIfPresent(EMRClientTypes.RepoUpgradeOnBoot.self, forKey: .repoUpgradeOnBoot)
        repoUpgradeOnBoot = repoUpgradeOnBootDecoded
        let kerberosAttributesDecoded = try containerValues.decodeIfPresent(EMRClientTypes.KerberosAttributes.self, forKey: .kerberosAttributes)
        kerberosAttributes = kerberosAttributesDecoded
        let clusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
        let outpostArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outpostArn)
        outpostArn = outpostArnDecoded
        let stepConcurrencyLevelDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .stepConcurrencyLevel)
        stepConcurrencyLevel = stepConcurrencyLevelDecoded
        let placementGroupsContainer = try containerValues.decodeIfPresent([EMRClientTypes.PlacementGroupConfig?].self, forKey: .placementGroups)
        var placementGroupsDecoded0:[EMRClientTypes.PlacementGroupConfig]? = nil
        if let placementGroupsContainer = placementGroupsContainer {
            placementGroupsDecoded0 = [EMRClientTypes.PlacementGroupConfig]()
            for structure0 in placementGroupsContainer {
                if let structure0 = structure0 {
                    placementGroupsDecoded0?.append(structure0)
                }
            }
        }
        placementGroups = placementGroupsDecoded0
        let osReleaseLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .osReleaseLabel)
        osReleaseLabel = osReleaseLabelDecoded
    }
}

extension EMRClientTypes {
    /// The detailed description of the cluster.
    public struct Cluster: Swift.Equatable {
        /// The applications installed on this cluster.
        public var applications: [EMRClientTypes.Application]?
        /// An IAM role for automatic scaling policies. The default role is EMR_AutoScaling_DefaultRole. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
        public var autoScalingRole: Swift.String?
        /// Specifies whether the cluster should terminate after completing all steps.
        public var autoTerminate: Swift.Bool
        /// The Amazon Resource Name of the cluster.
        public var clusterArn: Swift.String?
        /// Applies only to Amazon EMR releases 4.x and later. The list of Configurations supplied to the EMR cluster.
        public var configurations: [EMRClientTypes.Configuration]?
        /// Available only in Amazon EMR version 5.7.0 and later. The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
        public var customAmiId: Swift.String?
        /// The size, in GiB, of the Amazon EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later.
        public var ebsRootVolumeSize: Swift.Int?
        /// Provides information about the EC2 instances in a cluster grouped by category. For example, key name, subnet ID, IAM instance profile, and so on.
        public var ec2InstanceAttributes: EMRClientTypes.Ec2InstanceAttributes?
        /// The unique identifier for the cluster.
        public var id: Swift.String?
        /// The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions. The instance group configuration of the cluster. A value of INSTANCE_GROUP indicates a uniform instance group configuration. A value of INSTANCE_FLEET indicates an instance fleets configuration.
        public var instanceCollectionType: EMRClientTypes.InstanceCollectionType?
        /// Attributes for Kerberos configuration when Kerberos authentication is enabled using a security configuration. For more information see [Use Kerberos Authentication](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-kerberos.html) in the Amazon EMR Management Guide.
        public var kerberosAttributes: EMRClientTypes.KerberosAttributes?
        /// The KMS key used for encrypting log files. This attribute is only available with EMR version 5.30.0 and later, excluding EMR 6.0.0.
        public var logEncryptionKmsKeyId: Swift.String?
        /// The path to the Amazon S3 location where logs for this cluster are stored.
        public var logUri: Swift.String?
        /// The DNS name of the master node. If the cluster is on a private subnet, this is the private DNS name. On a public subnet, this is the public DNS name.
        public var masterPublicDnsName: Swift.String?
        /// The name of the cluster.
        public var name: Swift.String?
        /// An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time for every hour an m1.small instance runs. Larger instances are weighted more, so an EC2 instance that is roughly four times more expensive would result in the normalized instance hours being incremented by four. This result is only an approximation and does not reflect the actual billing rate.
        public var normalizedInstanceHours: Swift.Int?
        /// The Amazon Linux release specified in a cluster launch RunJobFlow request. If no Amazon Linux release was specified, the default Amazon Linux release is shown in the response.
        public var osReleaseLabel: Swift.String?
        /// The Amazon Resource Name (ARN) of the Outpost where the cluster is launched.
        public var outpostArn: Swift.String?
        /// Placement group configured for an Amazon EMR cluster.
        public var placementGroups: [EMRClientTypes.PlacementGroupConfig]?
        /// The Amazon EMR release label, which determines the version of open-source application packages installed on the cluster. Release labels are in the form emr-x.x.x, where x.x.x is an Amazon EMR release version such as emr-5.14.0. For more information about Amazon EMR release versions and included application versions and features, see [https://docs.aws.amazon.com/emr/latest/ReleaseGuide/](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/). The release label applies only to Amazon EMR releases version 4.0 and later. Earlier versions use AmiVersion.
        public var releaseLabel: Swift.String?
        /// Applies only when CustomAmiID is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI.
        public var repoUpgradeOnBoot: EMRClientTypes.RepoUpgradeOnBoot?
        /// The AMI version requested for this cluster.
        public var requestedAmiVersion: Swift.String?
        /// The AMI version running on this cluster.
        public var runningAmiVersion: Swift.String?
        /// The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. TERMINATE_AT_INSTANCE_HOUR indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. TERMINATE_AT_TASK_COMPLETION indicates that Amazon EMR adds nodes to a deny list and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. TERMINATE_AT_TASK_COMPLETION is available only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR earlier than 5.1.0.
        public var scaleDownBehavior: EMRClientTypes.ScaleDownBehavior?
        /// The name of the security configuration applied to the cluster.
        public var securityConfiguration: Swift.String?
        /// The IAM role that Amazon EMR assumes in order to access Amazon Web Services resources on your behalf.
        public var serviceRole: Swift.String?
        /// The current status details about the cluster.
        public var status: EMRClientTypes.ClusterStatus?
        /// Specifies the number of steps that can be executed concurrently.
        public var stepConcurrencyLevel: Swift.Int?
        /// A list of tags associated with a cluster.
        public var tags: [EMRClientTypes.Tag]?
        /// Indicates whether Amazon EMR will lock the cluster to prevent the EC2 instances from being terminated by an API call or user intervention, or in the event of a cluster error.
        public var terminationProtected: Swift.Bool
        /// Indicates whether the cluster is visible to IAM principals in the Amazon Web Services account associated with the cluster. When true, IAM principals in the Amazon Web Services account can perform EMR cluster actions on the cluster that their IAM policies allow. When false, only the IAM principal that created the cluster and the Amazon Web Services account root user can perform EMR actions, regardless of IAM permissions policies attached to other IAM principals. The default value is true if a value is not provided when creating a cluster using the EMR API [RunJobFlow] command, the CLI [create-cluster](https://docs.aws.amazon.com/cli/latest/reference/emr/create-cluster.html) command, or the Amazon Web Services Management Console.
        public var visibleToAllUsers: Swift.Bool

        public init (
            applications: [EMRClientTypes.Application]? = nil,
            autoScalingRole: Swift.String? = nil,
            autoTerminate: Swift.Bool = false,
            clusterArn: Swift.String? = nil,
            configurations: [EMRClientTypes.Configuration]? = nil,
            customAmiId: Swift.String? = nil,
            ebsRootVolumeSize: Swift.Int? = nil,
            ec2InstanceAttributes: EMRClientTypes.Ec2InstanceAttributes? = nil,
            id: Swift.String? = nil,
            instanceCollectionType: EMRClientTypes.InstanceCollectionType? = nil,
            kerberosAttributes: EMRClientTypes.KerberosAttributes? = nil,
            logEncryptionKmsKeyId: Swift.String? = nil,
            logUri: Swift.String? = nil,
            masterPublicDnsName: Swift.String? = nil,
            name: Swift.String? = nil,
            normalizedInstanceHours: Swift.Int? = nil,
            osReleaseLabel: Swift.String? = nil,
            outpostArn: Swift.String? = nil,
            placementGroups: [EMRClientTypes.PlacementGroupConfig]? = nil,
            releaseLabel: Swift.String? = nil,
            repoUpgradeOnBoot: EMRClientTypes.RepoUpgradeOnBoot? = nil,
            requestedAmiVersion: Swift.String? = nil,
            runningAmiVersion: Swift.String? = nil,
            scaleDownBehavior: EMRClientTypes.ScaleDownBehavior? = nil,
            securityConfiguration: Swift.String? = nil,
            serviceRole: Swift.String? = nil,
            status: EMRClientTypes.ClusterStatus? = nil,
            stepConcurrencyLevel: Swift.Int? = nil,
            tags: [EMRClientTypes.Tag]? = nil,
            terminationProtected: Swift.Bool = false,
            visibleToAllUsers: Swift.Bool = false
        )
        {
            self.applications = applications
            self.autoScalingRole = autoScalingRole
            self.autoTerminate = autoTerminate
            self.clusterArn = clusterArn
            self.configurations = configurations
            self.customAmiId = customAmiId
            self.ebsRootVolumeSize = ebsRootVolumeSize
            self.ec2InstanceAttributes = ec2InstanceAttributes
            self.id = id
            self.instanceCollectionType = instanceCollectionType
            self.kerberosAttributes = kerberosAttributes
            self.logEncryptionKmsKeyId = logEncryptionKmsKeyId
            self.logUri = logUri
            self.masterPublicDnsName = masterPublicDnsName
            self.name = name
            self.normalizedInstanceHours = normalizedInstanceHours
            self.osReleaseLabel = osReleaseLabel
            self.outpostArn = outpostArn
            self.placementGroups = placementGroups
            self.releaseLabel = releaseLabel
            self.repoUpgradeOnBoot = repoUpgradeOnBoot
            self.requestedAmiVersion = requestedAmiVersion
            self.runningAmiVersion = runningAmiVersion
            self.scaleDownBehavior = scaleDownBehavior
            self.securityConfiguration = securityConfiguration
            self.serviceRole = serviceRole
            self.status = status
            self.stepConcurrencyLevel = stepConcurrencyLevel
            self.tags = tags
            self.terminationProtected = terminationProtected
            self.visibleToAllUsers = visibleToAllUsers
        }
    }

}

extension EMRClientTypes {
    public enum ClusterState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bootstrapping
        case running
        case starting
        case terminated
        case terminatedWithErrors
        case terminating
        case waiting
        case sdkUnknown(Swift.String)

        public static var allCases: [ClusterState] {
            return [
                .bootstrapping,
                .running,
                .starting,
                .terminated,
                .terminatedWithErrors,
                .terminating,
                .waiting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bootstrapping: return "BOOTSTRAPPING"
            case .running: return "RUNNING"
            case .starting: return "STARTING"
            case .terminated: return "TERMINATED"
            case .terminatedWithErrors: return "TERMINATED_WITH_ERRORS"
            case .terminating: return "TERMINATING"
            case .waiting: return "WAITING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ClusterState(rawValue: rawValue) ?? ClusterState.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.ClusterStateChangeReason: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ClusterStateChangeReasonCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EMRClientTypes {
    /// The reason that the cluster changed to its current state.
    public struct ClusterStateChangeReason: Swift.Equatable {
        /// The programmatic code for the state change reason.
        public var code: EMRClientTypes.ClusterStateChangeReasonCode?
        /// The descriptive message for the state change reason.
        public var message: Swift.String?

        public init (
            code: EMRClientTypes.ClusterStateChangeReasonCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension EMRClientTypes {
    public enum ClusterStateChangeReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allStepsCompleted
        case bootstrapFailure
        case instanceFailure
        case instanceFleetTimeout
        case internalError
        case stepFailure
        case userRequest
        case validationError
        case sdkUnknown(Swift.String)

        public static var allCases: [ClusterStateChangeReasonCode] {
            return [
                .allStepsCompleted,
                .bootstrapFailure,
                .instanceFailure,
                .instanceFleetTimeout,
                .internalError,
                .stepFailure,
                .userRequest,
                .validationError,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allStepsCompleted: return "ALL_STEPS_COMPLETED"
            case .bootstrapFailure: return "BOOTSTRAP_FAILURE"
            case .instanceFailure: return "INSTANCE_FAILURE"
            case .instanceFleetTimeout: return "INSTANCE_FLEET_TIMEOUT"
            case .internalError: return "INTERNAL_ERROR"
            case .stepFailure: return "STEP_FAILURE"
            case .userRequest: return "USER_REQUEST"
            case .validationError: return "VALIDATION_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ClusterStateChangeReasonCode(rawValue: rawValue) ?? ClusterStateChangeReasonCode.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.ClusterStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case state = "State"
        case stateChangeReason = "StateChangeReason"
        case timeline = "Timeline"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateChangeReason = self.stateChangeReason {
            try encodeContainer.encode(stateChangeReason, forKey: .stateChangeReason)
        }
        if let timeline = self.timeline {
            try encodeContainer.encode(timeline, forKey: .timeline)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ClusterState.self, forKey: .state)
        state = stateDecoded
        let stateChangeReasonDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ClusterStateChangeReason.self, forKey: .stateChangeReason)
        stateChangeReason = stateChangeReasonDecoded
        let timelineDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ClusterTimeline.self, forKey: .timeline)
        timeline = timelineDecoded
    }
}

extension EMRClientTypes {
    /// The detailed status of the cluster.
    public struct ClusterStatus: Swift.Equatable {
        /// The current state of the cluster.
        public var state: EMRClientTypes.ClusterState?
        /// The reason for the cluster status change.
        public var stateChangeReason: EMRClientTypes.ClusterStateChangeReason?
        /// A timeline that represents the status of a cluster over the lifetime of the cluster.
        public var timeline: EMRClientTypes.ClusterTimeline?

        public init (
            state: EMRClientTypes.ClusterState? = nil,
            stateChangeReason: EMRClientTypes.ClusterStateChangeReason? = nil,
            timeline: EMRClientTypes.ClusterTimeline? = nil
        )
        {
            self.state = state
            self.stateChangeReason = stateChangeReason
            self.timeline = timeline
        }
    }

}

extension EMRClientTypes.ClusterSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterArn = "ClusterArn"
        case id = "Id"
        case name = "Name"
        case normalizedInstanceHours = "NormalizedInstanceHours"
        case outpostArn = "OutpostArn"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterArn = self.clusterArn {
            try encodeContainer.encode(clusterArn, forKey: .clusterArn)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let normalizedInstanceHours = self.normalizedInstanceHours {
            try encodeContainer.encode(normalizedInstanceHours, forKey: .normalizedInstanceHours)
        }
        if let outpostArn = self.outpostArn {
            try encodeContainer.encode(outpostArn, forKey: .outpostArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ClusterStatus.self, forKey: .status)
        status = statusDecoded
        let normalizedInstanceHoursDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .normalizedInstanceHours)
        normalizedInstanceHours = normalizedInstanceHoursDecoded
        let clusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
        let outpostArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outpostArn)
        outpostArn = outpostArnDecoded
    }
}

extension EMRClientTypes {
    /// The summary description of the cluster.
    public struct ClusterSummary: Swift.Equatable {
        /// The Amazon Resource Name of the cluster.
        public var clusterArn: Swift.String?
        /// The unique identifier for the cluster.
        public var id: Swift.String?
        /// The name of the cluster.
        public var name: Swift.String?
        /// An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time for every hour an m1.small instance runs. Larger instances are weighted more, so an EC2 instance that is roughly four times more expensive would result in the normalized instance hours being incremented by four. This result is only an approximation and does not reflect the actual billing rate.
        public var normalizedInstanceHours: Swift.Int?
        /// The Amazon Resource Name (ARN) of the Outpost where the cluster is launched.
        public var outpostArn: Swift.String?
        /// The details about the current status of the cluster.
        public var status: EMRClientTypes.ClusterStatus?

        public init (
            clusterArn: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            normalizedInstanceHours: Swift.Int? = nil,
            outpostArn: Swift.String? = nil,
            status: EMRClientTypes.ClusterStatus? = nil
        )
        {
            self.clusterArn = clusterArn
            self.id = id
            self.name = name
            self.normalizedInstanceHours = normalizedInstanceHours
            self.outpostArn = outpostArn
            self.status = status
        }
    }

}

extension EMRClientTypes.ClusterTimeline: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDateTime = "CreationDateTime"
        case endDateTime = "EndDateTime"
        case readyDateTime = "ReadyDateTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDateTime = self.creationDateTime {
            try encodeContainer.encodeTimestamp(creationDateTime, format: .epochSeconds, forKey: .creationDateTime)
        }
        if let endDateTime = self.endDateTime {
            try encodeContainer.encodeTimestamp(endDateTime, format: .epochSeconds, forKey: .endDateTime)
        }
        if let readyDateTime = self.readyDateTime {
            try encodeContainer.encodeTimestamp(readyDateTime, format: .epochSeconds, forKey: .readyDateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let readyDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .readyDateTime)
        readyDateTime = readyDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
    }
}

extension EMRClientTypes {
    /// Represents the timeline of the cluster's lifecycle.
    public struct ClusterTimeline: Swift.Equatable {
        /// The creation date and time of the cluster.
        public var creationDateTime: ClientRuntime.Date?
        /// The date and time when the cluster was terminated.
        public var endDateTime: ClientRuntime.Date?
        /// The date and time when the cluster was ready to run steps.
        public var readyDateTime: ClientRuntime.Date?

        public init (
            creationDateTime: ClientRuntime.Date? = nil,
            endDateTime: ClientRuntime.Date? = nil,
            readyDateTime: ClientRuntime.Date? = nil
        )
        {
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.readyDateTime = readyDateTime
        }
    }

}

extension EMRClientTypes.Command: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case args = "Args"
        case name = "Name"
        case scriptPath = "ScriptPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let args = args {
            var argsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .args)
            for string0 in args {
                try argsContainer.encode(string0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scriptPath = self.scriptPath {
            try encodeContainer.encode(scriptPath, forKey: .scriptPath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scriptPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scriptPath)
        scriptPath = scriptPathDecoded
        let argsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .args)
        var argsDecoded0:[Swift.String]? = nil
        if let argsContainer = argsContainer {
            argsDecoded0 = [Swift.String]()
            for string0 in argsContainer {
                if let string0 = string0 {
                    argsDecoded0?.append(string0)
                }
            }
        }
        args = argsDecoded0
    }
}

extension EMRClientTypes {
    /// An entity describing an executable that runs on a cluster.
    public struct Command: Swift.Equatable {
        /// Arguments for Amazon EMR to pass to the command for execution.
        public var args: [Swift.String]?
        /// The name of the command.
        public var name: Swift.String?
        /// The Amazon S3 location of the command script.
        public var scriptPath: Swift.String?

        public init (
            args: [Swift.String]? = nil,
            name: Swift.String? = nil,
            scriptPath: Swift.String? = nil
        )
        {
            self.args = args
            self.name = name
            self.scriptPath = scriptPath
        }
    }

}

extension EMRClientTypes {
    public enum ComparisonOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case greaterThan
        case greaterThanOrEqual
        case lessThan
        case lessThanOrEqual
        case sdkUnknown(Swift.String)

        public static var allCases: [ComparisonOperator] {
            return [
                .greaterThan,
                .greaterThanOrEqual,
                .lessThan,
                .lessThanOrEqual,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .greaterThan: return "GREATER_THAN"
            case .greaterThanOrEqual: return "GREATER_THAN_OR_EQUAL"
            case .lessThan: return "LESS_THAN"
            case .lessThanOrEqual: return "LESS_THAN_OR_EQUAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ComparisonOperator(rawValue: rawValue) ?? ComparisonOperator.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.ComputeLimits: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maximumCapacityUnits = "MaximumCapacityUnits"
        case maximumCoreCapacityUnits = "MaximumCoreCapacityUnits"
        case maximumOnDemandCapacityUnits = "MaximumOnDemandCapacityUnits"
        case minimumCapacityUnits = "MinimumCapacityUnits"
        case unitType = "UnitType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maximumCapacityUnits = self.maximumCapacityUnits {
            try encodeContainer.encode(maximumCapacityUnits, forKey: .maximumCapacityUnits)
        }
        if let maximumCoreCapacityUnits = self.maximumCoreCapacityUnits {
            try encodeContainer.encode(maximumCoreCapacityUnits, forKey: .maximumCoreCapacityUnits)
        }
        if let maximumOnDemandCapacityUnits = self.maximumOnDemandCapacityUnits {
            try encodeContainer.encode(maximumOnDemandCapacityUnits, forKey: .maximumOnDemandCapacityUnits)
        }
        if let minimumCapacityUnits = self.minimumCapacityUnits {
            try encodeContainer.encode(minimumCapacityUnits, forKey: .minimumCapacityUnits)
        }
        if let unitType = self.unitType {
            try encodeContainer.encode(unitType.rawValue, forKey: .unitType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let unitTypeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ComputeLimitsUnitType.self, forKey: .unitType)
        unitType = unitTypeDecoded
        let minimumCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumCapacityUnits)
        minimumCapacityUnits = minimumCapacityUnitsDecoded
        let maximumCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumCapacityUnits)
        maximumCapacityUnits = maximumCapacityUnitsDecoded
        let maximumOnDemandCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumOnDemandCapacityUnits)
        maximumOnDemandCapacityUnits = maximumOnDemandCapacityUnitsDecoded
        let maximumCoreCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumCoreCapacityUnits)
        maximumCoreCapacityUnits = maximumCoreCapacityUnitsDecoded
    }
}

extension EMRClientTypes {
    /// The EC2 unit limits for a managed scaling policy. The managed scaling activity of a cluster can not be above or below these limits. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
    public struct ComputeLimits: Swift.Equatable {
        /// The upper boundary of EC2 units. It is measured through vCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
        /// This member is required.
        public var maximumCapacityUnits: Swift.Int?
        /// The upper boundary of EC2 units for core node type in a cluster. It is measured through vCPU cores or instances for instance groups and measured through units for instance fleets. The core units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between core and task nodes.
        public var maximumCoreCapacityUnits: Swift.Int?
        /// The upper boundary of On-Demand EC2 units. It is measured through vCPU cores or instances for instance groups and measured through units for instance fleets. The On-Demand units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between On-Demand and Spot Instances.
        public var maximumOnDemandCapacityUnits: Swift.Int?
        /// The lower boundary of EC2 units. It is measured through vCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
        /// This member is required.
        public var minimumCapacityUnits: Swift.Int?
        /// The unit type used for specifying a managed scaling policy.
        /// This member is required.
        public var unitType: EMRClientTypes.ComputeLimitsUnitType?

        public init (
            maximumCapacityUnits: Swift.Int? = nil,
            maximumCoreCapacityUnits: Swift.Int? = nil,
            maximumOnDemandCapacityUnits: Swift.Int? = nil,
            minimumCapacityUnits: Swift.Int? = nil,
            unitType: EMRClientTypes.ComputeLimitsUnitType? = nil
        )
        {
            self.maximumCapacityUnits = maximumCapacityUnits
            self.maximumCoreCapacityUnits = maximumCoreCapacityUnits
            self.maximumOnDemandCapacityUnits = maximumOnDemandCapacityUnits
            self.minimumCapacityUnits = minimumCapacityUnits
            self.unitType = unitType
        }
    }

}

extension EMRClientTypes {
    public enum ComputeLimitsUnitType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case instancefleetunits
        case instances
        case vcpu
        case sdkUnknown(Swift.String)

        public static var allCases: [ComputeLimitsUnitType] {
            return [
                .instancefleetunits,
                .instances,
                .vcpu,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .instancefleetunits: return "InstanceFleetUnits"
            case .instances: return "Instances"
            case .vcpu: return "VCPU"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ComputeLimitsUnitType(rawValue: rawValue) ?? ComputeLimitsUnitType.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.Configuration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case classification = "Classification"
        case configurations = "Configurations"
        case properties = "Properties"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let classification = self.classification {
            try encodeContainer.encode(classification, forKey: .classification)
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configuration0 in configurations {
                try configurationsContainer.encode(configuration0)
            }
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .properties)
            for (dictKey0, stringMap0) in properties {
                try propertiesContainer.encode(stringMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let classificationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .classification)
        classification = classificationDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([EMRClientTypes.Configuration?].self, forKey: .configurations)
        var configurationsDecoded0:[EMRClientTypes.Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [EMRClientTypes.Configuration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
        let propertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .properties)
        var propertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in propertiesContainer {
                if let string0 = string0 {
                    propertiesDecoded0?[key0] = string0
                }
            }
        }
        properties = propertiesDecoded0
    }
}

extension EMRClientTypes {
    /// Amazon EMR releases 4.x or later. An optional configuration specification to be used when provisioning cluster instances, which can include configurations for applications and software bundled with Amazon EMR. A configuration consists of a classification, properties, and optional nested configurations. A classification refers to an application-specific configuration file. Properties are the settings you want to change in that file. For more information, see [Configuring Applications](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-configure-apps.html).
    public struct Configuration: Swift.Equatable {
        /// The classification within a configuration.
        public var classification: Swift.String?
        /// A list of additional configurations to apply within a configuration object.
        public var configurations: [EMRClientTypes.Configuration]?
        /// A set of properties specified within a configuration classification.
        public var properties: [Swift.String:Swift.String]?

        public init (
            classification: Swift.String? = nil,
            configurations: [EMRClientTypes.Configuration]? = nil,
            properties: [Swift.String:Swift.String]? = nil
        )
        {
            self.classification = classification
            self.configurations = configurations
            self.properties = properties
        }
    }

}

extension CreateSecurityConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case securityConfiguration = "SecurityConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let securityConfiguration = self.securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
    }
}

extension CreateSecurityConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateSecurityConfigurationInput: Swift.Equatable {
    /// The name of the security configuration.
    /// This member is required.
    public var name: Swift.String?
    /// The security configuration details in JSON format. For JSON parameters and examples, see [Use Security Configurations to Set Up Cluster Security](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-security-configurations.html) in the Amazon EMR Management Guide.
    /// This member is required.
    public var securityConfiguration: Swift.String?

    public init (
        name: Swift.String? = nil,
        securityConfiguration: Swift.String? = nil
    )
    {
        self.name = name
        self.securityConfiguration = securityConfiguration
    }
}

struct CreateSecurityConfigurationInputBody: Swift.Equatable {
    let name: Swift.String?
    let securityConfiguration: Swift.String?
}

extension CreateSecurityConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case securityConfiguration = "SecurityConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
    }
}

extension CreateSecurityConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateSecurityConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateSecurityConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateSecurityConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateSecurityConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationDateTime = output.creationDateTime
            self.name = output.name
        } else {
            self.creationDateTime = nil
            self.name = nil
        }
    }
}

public struct CreateSecurityConfigurationOutputResponse: Swift.Equatable {
    /// The date and time the security configuration was created.
    /// This member is required.
    public var creationDateTime: ClientRuntime.Date?
    /// The name of the security configuration.
    /// This member is required.
    public var name: Swift.String?

    public init (
        creationDateTime: ClientRuntime.Date? = nil,
        name: Swift.String? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.name = name
    }
}

struct CreateSecurityConfigurationOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
    let creationDateTime: ClientRuntime.Date?
}

extension CreateSecurityConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDateTime = "CreationDateTime"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let creationDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
    }
}

extension CreateStudioInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authMode = "AuthMode"
        case defaultS3Location = "DefaultS3Location"
        case description = "Description"
        case engineSecurityGroupId = "EngineSecurityGroupId"
        case idpAuthUrl = "IdpAuthUrl"
        case idpRelayStateParameterName = "IdpRelayStateParameterName"
        case name = "Name"
        case serviceRole = "ServiceRole"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case userRole = "UserRole"
        case vpcId = "VpcId"
        case workspaceSecurityGroupId = "WorkspaceSecurityGroupId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authMode = self.authMode {
            try encodeContainer.encode(authMode.rawValue, forKey: .authMode)
        }
        if let defaultS3Location = self.defaultS3Location {
            try encodeContainer.encode(defaultS3Location, forKey: .defaultS3Location)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let engineSecurityGroupId = self.engineSecurityGroupId {
            try encodeContainer.encode(engineSecurityGroupId, forKey: .engineSecurityGroupId)
        }
        if let idpAuthUrl = self.idpAuthUrl {
            try encodeContainer.encode(idpAuthUrl, forKey: .idpAuthUrl)
        }
        if let idpRelayStateParameterName = self.idpRelayStateParameterName {
            try encodeContainer.encode(idpRelayStateParameterName, forKey: .idpRelayStateParameterName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let serviceRole = self.serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for string0 in subnetIds {
                try subnetIdsContainer.encode(string0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let userRole = self.userRole {
            try encodeContainer.encode(userRole, forKey: .userRole)
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
        if let workspaceSecurityGroupId = self.workspaceSecurityGroupId {
            try encodeContainer.encode(workspaceSecurityGroupId, forKey: .workspaceSecurityGroupId)
        }
    }
}

extension CreateStudioInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateStudioInput: Swift.Equatable {
    /// Specifies whether the Studio authenticates users using IAM or IAM Identity Center.
    /// This member is required.
    public var authMode: EMRClientTypes.AuthMode?
    /// The Amazon S3 location to back up Amazon EMR Studio Workspaces and notebook files.
    /// This member is required.
    public var defaultS3Location: Swift.String?
    /// A detailed description of the Amazon EMR Studio.
    public var description: Swift.String?
    /// The ID of the Amazon EMR Studio Engine security group. The Engine security group allows inbound network traffic from the Workspace security group, and it must be in the same VPC specified by VpcId.
    /// This member is required.
    public var engineSecurityGroupId: Swift.String?
    /// The authentication endpoint of your identity provider (IdP). Specify this value when you use IAM authentication and want to let federated users log in to a Studio with the Studio URL and credentials from your IdP. Amazon EMR Studio redirects users to this endpoint to enter credentials.
    public var idpAuthUrl: Swift.String?
    /// The name that your identity provider (IdP) uses for its RelayState parameter. For example, RelayState or TargetSource. Specify this value when you use IAM authentication and want to let federated users log in to a Studio using the Studio URL. The RelayState parameter differs by IdP.
    public var idpRelayStateParameterName: Swift.String?
    /// A descriptive name for the Amazon EMR Studio.
    /// This member is required.
    public var name: Swift.String?
    /// The IAM role that the Amazon EMR Studio assumes. The service role provides a way for Amazon EMR Studio to interoperate with other Amazon Web Services services.
    /// This member is required.
    public var serviceRole: Swift.String?
    /// A list of subnet IDs to associate with the Amazon EMR Studio. A Studio can have a maximum of 5 subnets. The subnets must belong to the VPC specified by VpcId. Studio users can create a Workspace in any of the specified subnets.
    /// This member is required.
    public var subnetIds: [Swift.String]?
    /// A list of tags to associate with the Amazon EMR Studio. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.
    public var tags: [EMRClientTypes.Tag]?
    /// The IAM user role that users and groups assume when logged in to an Amazon EMR Studio. Only specify a UserRole when you use IAM Identity Center authentication. The permissions attached to the UserRole can be scoped down for each user or group using session policies.
    public var userRole: Swift.String?
    /// The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the Studio.
    /// This member is required.
    public var vpcId: Swift.String?
    /// The ID of the Amazon EMR Studio Workspace security group. The Workspace security group allows outbound network traffic to resources in the Engine security group, and it must be in the same VPC specified by VpcId.
    /// This member is required.
    public var workspaceSecurityGroupId: Swift.String?

    public init (
        authMode: EMRClientTypes.AuthMode? = nil,
        defaultS3Location: Swift.String? = nil,
        description: Swift.String? = nil,
        engineSecurityGroupId: Swift.String? = nil,
        idpAuthUrl: Swift.String? = nil,
        idpRelayStateParameterName: Swift.String? = nil,
        name: Swift.String? = nil,
        serviceRole: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [EMRClientTypes.Tag]? = nil,
        userRole: Swift.String? = nil,
        vpcId: Swift.String? = nil,
        workspaceSecurityGroupId: Swift.String? = nil
    )
    {
        self.authMode = authMode
        self.defaultS3Location = defaultS3Location
        self.description = description
        self.engineSecurityGroupId = engineSecurityGroupId
        self.idpAuthUrl = idpAuthUrl
        self.idpRelayStateParameterName = idpRelayStateParameterName
        self.name = name
        self.serviceRole = serviceRole
        self.subnetIds = subnetIds
        self.tags = tags
        self.userRole = userRole
        self.vpcId = vpcId
        self.workspaceSecurityGroupId = workspaceSecurityGroupId
    }
}

struct CreateStudioInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let authMode: EMRClientTypes.AuthMode?
    let vpcId: Swift.String?
    let subnetIds: [Swift.String]?
    let serviceRole: Swift.String?
    let userRole: Swift.String?
    let workspaceSecurityGroupId: Swift.String?
    let engineSecurityGroupId: Swift.String?
    let defaultS3Location: Swift.String?
    let idpAuthUrl: Swift.String?
    let idpRelayStateParameterName: Swift.String?
    let tags: [EMRClientTypes.Tag]?
}

extension CreateStudioInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authMode = "AuthMode"
        case defaultS3Location = "DefaultS3Location"
        case description = "Description"
        case engineSecurityGroupId = "EngineSecurityGroupId"
        case idpAuthUrl = "IdpAuthUrl"
        case idpRelayStateParameterName = "IdpRelayStateParameterName"
        case name = "Name"
        case serviceRole = "ServiceRole"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case userRole = "UserRole"
        case vpcId = "VpcId"
        case workspaceSecurityGroupId = "WorkspaceSecurityGroupId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let authModeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.AuthMode.self, forKey: .authMode)
        authMode = authModeDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let userRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userRole)
        userRole = userRoleDecoded
        let workspaceSecurityGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workspaceSecurityGroupId)
        workspaceSecurityGroupId = workspaceSecurityGroupIdDecoded
        let engineSecurityGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineSecurityGroupId)
        engineSecurityGroupId = engineSecurityGroupIdDecoded
        let defaultS3LocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultS3Location)
        defaultS3Location = defaultS3LocationDecoded
        let idpAuthUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idpAuthUrl)
        idpAuthUrl = idpAuthUrlDecoded
        let idpRelayStateParameterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idpRelayStateParameterName)
        idpRelayStateParameterName = idpRelayStateParameterNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([EMRClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[EMRClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [EMRClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateStudioOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateStudioOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateStudioOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateStudioOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateStudioOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.studioId = output.studioId
            self.url = output.url
        } else {
            self.studioId = nil
            self.url = nil
        }
    }
}

public struct CreateStudioOutputResponse: Swift.Equatable {
    /// The ID of the Amazon EMR Studio.
    public var studioId: Swift.String?
    /// The unique Studio access URL.
    public var url: Swift.String?

    public init (
        studioId: Swift.String? = nil,
        url: Swift.String? = nil
    )
    {
        self.studioId = studioId
        self.url = url
    }
}

struct CreateStudioOutputResponseBody: Swift.Equatable {
    let studioId: Swift.String?
    let url: Swift.String?
}

extension CreateStudioOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case studioId = "StudioId"
        case url = "Url"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
    }
}

extension CreateStudioSessionMappingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityId = "IdentityId"
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case sessionPolicyArn = "SessionPolicyArn"
        case studioId = "StudioId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identityId = self.identityId {
            try encodeContainer.encode(identityId, forKey: .identityId)
        }
        if let identityName = self.identityName {
            try encodeContainer.encode(identityName, forKey: .identityName)
        }
        if let identityType = self.identityType {
            try encodeContainer.encode(identityType.rawValue, forKey: .identityType)
        }
        if let sessionPolicyArn = self.sessionPolicyArn {
            try encodeContainer.encode(sessionPolicyArn, forKey: .sessionPolicyArn)
        }
        if let studioId = self.studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
    }
}

extension CreateStudioSessionMappingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateStudioSessionMappingInput: Swift.Equatable {
    /// The globally unique identifier (GUID) of the user or group from the IAM Identity Center Identity Store. For more information, see [UserId](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId) and [GroupId](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId) in the IAM Identity Center Identity Store API Reference. Either IdentityName or IdentityId must be specified, but not both.
    public var identityId: Swift.String?
    /// The name of the user or group. For more information, see [UserName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName) and [DisplayName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName) in the IAM Identity Center Identity Store API Reference. Either IdentityName or IdentityId must be specified, but not both.
    public var identityName: Swift.String?
    /// Specifies whether the identity to map to the Amazon EMR Studio is a user or a group.
    /// This member is required.
    public var identityType: EMRClientTypes.IdentityType?
    /// The Amazon Resource Name (ARN) for the session policy that will be applied to the user or group. You should specify the ARN for the session policy that you want to apply, not the ARN of your user role. For more information, see [Create an EMR Studio User Role with Session Policies](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-studio-user-role.html).
    /// This member is required.
    public var sessionPolicyArn: Swift.String?
    /// The ID of the Amazon EMR Studio to which the user or group will be mapped.
    /// This member is required.
    public var studioId: Swift.String?

    public init (
        identityId: Swift.String? = nil,
        identityName: Swift.String? = nil,
        identityType: EMRClientTypes.IdentityType? = nil,
        sessionPolicyArn: Swift.String? = nil,
        studioId: Swift.String? = nil
    )
    {
        self.identityId = identityId
        self.identityName = identityName
        self.identityType = identityType
        self.sessionPolicyArn = sessionPolicyArn
        self.studioId = studioId
    }
}

struct CreateStudioSessionMappingInputBody: Swift.Equatable {
    let studioId: Swift.String?
    let identityId: Swift.String?
    let identityName: Swift.String?
    let identityType: EMRClientTypes.IdentityType?
    let sessionPolicyArn: Swift.String?
}

extension CreateStudioSessionMappingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityId = "IdentityId"
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case sessionPolicyArn = "SessionPolicyArn"
        case studioId = "StudioId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let identityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityId)
        identityId = identityIdDecoded
        let identityNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityName)
        identityName = identityNameDecoded
        let identityTypeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let sessionPolicyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sessionPolicyArn)
        sessionPolicyArn = sessionPolicyArnDecoded
    }
}

extension CreateStudioSessionMappingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateStudioSessionMappingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailure" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateStudioSessionMappingOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateStudioSessionMappingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateStudioSessionMappingOutputResponse: Swift.Equatable {

    public init () { }
}

extension EMRClientTypes.Credentials: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case usernamepassword = "UsernamePassword"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .usernamepassword(usernamepassword):
                try container.encode(usernamepassword, forKey: .usernamepassword)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let usernamepasswordDecoded = try values.decodeIfPresent(EMRClientTypes.UsernamePassword.self, forKey: .usernamepassword)
        if let usernamepassword = usernamepasswordDecoded {
            self = .usernamepassword(usernamepassword)
            return
        }
        self = .sdkUnknown("")
    }
}

extension EMRClientTypes {
    /// The credentials that you can use to connect to cluster endpoints. Credentials consist of a username and a password.
    public enum Credentials: Swift.Equatable {
        /// The username and password that you use to connect to cluster endpoints.
        case usernamepassword(EMRClientTypes.UsernamePassword)
        case sdkUnknown(Swift.String)
    }

}

extension DeleteSecurityConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension DeleteSecurityConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteSecurityConfigurationInput: Swift.Equatable {
    /// The name of the security configuration.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteSecurityConfigurationInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension DeleteSecurityConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteSecurityConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSecurityConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteSecurityConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSecurityConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteSecurityConfigurationOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteStudioInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case studioId = "StudioId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let studioId = self.studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
    }
}

extension DeleteStudioInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteStudioInput: Swift.Equatable {
    /// The ID of the Amazon EMR Studio.
    /// This member is required.
    public var studioId: Swift.String?

    public init (
        studioId: Swift.String? = nil
    )
    {
        self.studioId = studioId
    }
}

struct DeleteStudioInputBody: Swift.Equatable {
    let studioId: Swift.String?
}

extension DeleteStudioInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case studioId = "StudioId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioId)
        studioId = studioIdDecoded
    }
}

extension DeleteStudioOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteStudioOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteStudioOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteStudioOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteStudioOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteStudioSessionMappingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityId = "IdentityId"
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case studioId = "StudioId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identityId = self.identityId {
            try encodeContainer.encode(identityId, forKey: .identityId)
        }
        if let identityName = self.identityName {
            try encodeContainer.encode(identityName, forKey: .identityName)
        }
        if let identityType = self.identityType {
            try encodeContainer.encode(identityType.rawValue, forKey: .identityType)
        }
        if let studioId = self.studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
    }
}

extension DeleteStudioSessionMappingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteStudioSessionMappingInput: Swift.Equatable {
    /// The globally unique identifier (GUID) of the user or group to remove from the Amazon EMR Studio. For more information, see [UserId](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId) and [GroupId](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId) in the IAM Identity Center Identity Store API Reference. Either IdentityName or IdentityId must be specified.
    public var identityId: Swift.String?
    /// The name of the user name or group to remove from the Amazon EMR Studio. For more information, see [UserName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName) and [DisplayName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName) in the IAM Identity Center Store API Reference. Either IdentityName or IdentityId must be specified.
    public var identityName: Swift.String?
    /// Specifies whether the identity to delete from the Amazon EMR Studio is a user or a group.
    /// This member is required.
    public var identityType: EMRClientTypes.IdentityType?
    /// The ID of the Amazon EMR Studio.
    /// This member is required.
    public var studioId: Swift.String?

    public init (
        identityId: Swift.String? = nil,
        identityName: Swift.String? = nil,
        identityType: EMRClientTypes.IdentityType? = nil,
        studioId: Swift.String? = nil
    )
    {
        self.identityId = identityId
        self.identityName = identityName
        self.identityType = identityType
        self.studioId = studioId
    }
}

struct DeleteStudioSessionMappingInputBody: Swift.Equatable {
    let studioId: Swift.String?
    let identityId: Swift.String?
    let identityName: Swift.String?
    let identityType: EMRClientTypes.IdentityType?
}

extension DeleteStudioSessionMappingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityId = "IdentityId"
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case studioId = "StudioId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let identityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityId)
        identityId = identityIdDecoded
        let identityNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityName)
        identityName = identityNameDecoded
        let identityTypeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
    }
}

extension DeleteStudioSessionMappingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteStudioSessionMappingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailure" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteStudioSessionMappingOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteStudioSessionMappingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteStudioSessionMappingOutputResponse: Swift.Equatable {

    public init () { }
}

extension DescribeClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
    }
}

extension DescribeClusterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// This input determines which cluster to describe.
public struct DescribeClusterInput: Swift.Equatable {
    /// The identifier of the cluster to describe.
    /// This member is required.
    public var clusterId: Swift.String?

    public init (
        clusterId: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
    }
}

struct DescribeClusterInputBody: Swift.Equatable {
    let clusterId: Swift.String?
}

extension DescribeClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
    }
}

extension DescribeClusterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeClusterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeClusterOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeClusterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeClusterOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

/// This output contains the description of the cluster.
public struct DescribeClusterOutputResponse: Swift.Equatable {
    /// This output contains the details for the requested cluster.
    public var cluster: EMRClientTypes.Cluster?

    public init (
        cluster: EMRClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct DescribeClusterOutputResponseBody: Swift.Equatable {
    let cluster: EMRClientTypes.Cluster?
}

extension DescribeClusterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster = "Cluster"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(EMRClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

extension DescribeJobFlowsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case jobFlowIds = "JobFlowIds"
        case jobFlowStates = "JobFlowStates"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAfter = self.createdAfter {
            try encodeContainer.encodeTimestamp(createdAfter, format: .epochSeconds, forKey: .createdAfter)
        }
        if let createdBefore = self.createdBefore {
            try encodeContainer.encodeTimestamp(createdBefore, format: .epochSeconds, forKey: .createdBefore)
        }
        if let jobFlowIds = jobFlowIds {
            var jobFlowIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobFlowIds)
            for xmlstring0 in jobFlowIds {
                try jobFlowIdsContainer.encode(xmlstring0)
            }
        }
        if let jobFlowStates = jobFlowStates {
            var jobFlowStatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobFlowStates)
            for jobflowexecutionstate0 in jobFlowStates {
                try jobFlowStatesContainer.encode(jobflowexecutionstate0.rawValue)
            }
        }
    }
}

extension DescribeJobFlowsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for the [DescribeJobFlows] operation.
public struct DescribeJobFlowsInput: Swift.Equatable {
    /// Return only job flows created after this date and time.
    public var createdAfter: ClientRuntime.Date?
    /// Return only job flows created before this date and time.
    public var createdBefore: ClientRuntime.Date?
    /// Return only job flows whose job flow ID is contained in this list.
    public var jobFlowIds: [Swift.String]?
    /// Return only job flows whose state is contained in this list.
    public var jobFlowStates: [EMRClientTypes.JobFlowExecutionState]?

    public init (
        createdAfter: ClientRuntime.Date? = nil,
        createdBefore: ClientRuntime.Date? = nil,
        jobFlowIds: [Swift.String]? = nil,
        jobFlowStates: [EMRClientTypes.JobFlowExecutionState]? = nil
    )
    {
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.jobFlowIds = jobFlowIds
        self.jobFlowStates = jobFlowStates
    }
}

struct DescribeJobFlowsInputBody: Swift.Equatable {
    let createdAfter: ClientRuntime.Date?
    let createdBefore: ClientRuntime.Date?
    let jobFlowIds: [Swift.String]?
    let jobFlowStates: [EMRClientTypes.JobFlowExecutionState]?
}

extension DescribeJobFlowsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case jobFlowIds = "JobFlowIds"
        case jobFlowStates = "JobFlowStates"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createdAfterDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAfter)
        createdAfter = createdAfterDecoded
        let createdBeforeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdBefore)
        createdBefore = createdBeforeDecoded
        let jobFlowIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .jobFlowIds)
        var jobFlowIdsDecoded0:[Swift.String]? = nil
        if let jobFlowIdsContainer = jobFlowIdsContainer {
            jobFlowIdsDecoded0 = [Swift.String]()
            for string0 in jobFlowIdsContainer {
                if let string0 = string0 {
                    jobFlowIdsDecoded0?.append(string0)
                }
            }
        }
        jobFlowIds = jobFlowIdsDecoded0
        let jobFlowStatesContainer = try containerValues.decodeIfPresent([EMRClientTypes.JobFlowExecutionState?].self, forKey: .jobFlowStates)
        var jobFlowStatesDecoded0:[EMRClientTypes.JobFlowExecutionState]? = nil
        if let jobFlowStatesContainer = jobFlowStatesContainer {
            jobFlowStatesDecoded0 = [EMRClientTypes.JobFlowExecutionState]()
            for enum0 in jobFlowStatesContainer {
                if let enum0 = enum0 {
                    jobFlowStatesDecoded0?.append(enum0)
                }
            }
        }
        jobFlowStates = jobFlowStatesDecoded0
    }
}

extension DescribeJobFlowsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeJobFlowsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailure" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeJobFlowsOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeJobFlowsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeJobFlowsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobFlows = output.jobFlows
        } else {
            self.jobFlows = nil
        }
    }
}

/// The output for the [DescribeJobFlows] operation.
public struct DescribeJobFlowsOutputResponse: Swift.Equatable {
    /// A list of job flows matching the parameters supplied.
    public var jobFlows: [EMRClientTypes.JobFlowDetail]?

    public init (
        jobFlows: [EMRClientTypes.JobFlowDetail]? = nil
    )
    {
        self.jobFlows = jobFlows
    }
}

struct DescribeJobFlowsOutputResponseBody: Swift.Equatable {
    let jobFlows: [EMRClientTypes.JobFlowDetail]?
}

extension DescribeJobFlowsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobFlows = "JobFlows"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobFlowsContainer = try containerValues.decodeIfPresent([EMRClientTypes.JobFlowDetail?].self, forKey: .jobFlows)
        var jobFlowsDecoded0:[EMRClientTypes.JobFlowDetail]? = nil
        if let jobFlowsContainer = jobFlowsContainer {
            jobFlowsDecoded0 = [EMRClientTypes.JobFlowDetail]()
            for structure0 in jobFlowsContainer {
                if let structure0 = structure0 {
                    jobFlowsDecoded0?.append(structure0)
                }
            }
        }
        jobFlows = jobFlowsDecoded0
    }
}

extension DescribeNotebookExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookExecutionId = "NotebookExecutionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notebookExecutionId = self.notebookExecutionId {
            try encodeContainer.encode(notebookExecutionId, forKey: .notebookExecutionId)
        }
    }
}

extension DescribeNotebookExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeNotebookExecutionInput: Swift.Equatable {
    /// The unique identifier of the notebook execution.
    /// This member is required.
    public var notebookExecutionId: Swift.String?

    public init (
        notebookExecutionId: Swift.String? = nil
    )
    {
        self.notebookExecutionId = notebookExecutionId
    }
}

struct DescribeNotebookExecutionInputBody: Swift.Equatable {
    let notebookExecutionId: Swift.String?
}

extension DescribeNotebookExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookExecutionId = "NotebookExecutionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookExecutionId)
        notebookExecutionId = notebookExecutionIdDecoded
    }
}

extension DescribeNotebookExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeNotebookExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailure" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeNotebookExecutionOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeNotebookExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeNotebookExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.notebookExecution = output.notebookExecution
        } else {
            self.notebookExecution = nil
        }
    }
}

public struct DescribeNotebookExecutionOutputResponse: Swift.Equatable {
    /// Properties of the notebook execution.
    public var notebookExecution: EMRClientTypes.NotebookExecution?

    public init (
        notebookExecution: EMRClientTypes.NotebookExecution? = nil
    )
    {
        self.notebookExecution = notebookExecution
    }
}

struct DescribeNotebookExecutionOutputResponseBody: Swift.Equatable {
    let notebookExecution: EMRClientTypes.NotebookExecution?
}

extension DescribeNotebookExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookExecution = "NotebookExecution"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookExecutionDecoded = try containerValues.decodeIfPresent(EMRClientTypes.NotebookExecution.self, forKey: .notebookExecution)
        notebookExecution = notebookExecutionDecoded
    }
}

extension DescribeReleaseLabelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case releaseLabel = "ReleaseLabel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let releaseLabel = self.releaseLabel {
            try encodeContainer.encode(releaseLabel, forKey: .releaseLabel)
        }
    }
}

extension DescribeReleaseLabelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeReleaseLabelInput: Swift.Equatable {
    /// Reserved for future use. Currently set to null.
    public var maxResults: Swift.Int?
    /// The pagination token. Reserved for future use. Currently set to null.
    public var nextToken: Swift.String?
    /// The target release label to be described.
    public var releaseLabel: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        releaseLabel: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.releaseLabel = releaseLabel
    }
}

struct DescribeReleaseLabelInputBody: Swift.Equatable {
    let releaseLabel: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension DescribeReleaseLabelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case releaseLabel = "ReleaseLabel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let releaseLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .releaseLabel)
        releaseLabel = releaseLabelDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension DescribeReleaseLabelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeReleaseLabelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeReleaseLabelOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeReleaseLabelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeReleaseLabelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.applications = output.applications
            self.availableOSReleases = output.availableOSReleases
            self.nextToken = output.nextToken
            self.releaseLabel = output.releaseLabel
        } else {
            self.applications = nil
            self.availableOSReleases = nil
            self.nextToken = nil
            self.releaseLabel = nil
        }
    }
}

public struct DescribeReleaseLabelOutputResponse: Swift.Equatable {
    /// The list of applications available for the target release label. Name is the name of the application. Version is the concise version of the application.
    public var applications: [EMRClientTypes.SimplifiedApplication]?
    /// The list of available Amazon Linux release versions for an Amazon EMR release. Contains a Label field that is formatted as shown in [ Amazon Linux 2 Release Notes ](https://docs.aws.amazon.com/AL2/latest/relnotes/relnotes-al2.html). For example, [2.0.20220218.1](https://docs.aws.amazon.com/AL2/latest/relnotes/relnotes-20220218.html).
    public var availableOSReleases: [EMRClientTypes.OSRelease]?
    /// The pagination token. Reserved for future use. Currently set to null.
    public var nextToken: Swift.String?
    /// The target release label described in the response.
    public var releaseLabel: Swift.String?

    public init (
        applications: [EMRClientTypes.SimplifiedApplication]? = nil,
        availableOSReleases: [EMRClientTypes.OSRelease]? = nil,
        nextToken: Swift.String? = nil,
        releaseLabel: Swift.String? = nil
    )
    {
        self.applications = applications
        self.availableOSReleases = availableOSReleases
        self.nextToken = nextToken
        self.releaseLabel = releaseLabel
    }
}

struct DescribeReleaseLabelOutputResponseBody: Swift.Equatable {
    let releaseLabel: Swift.String?
    let applications: [EMRClientTypes.SimplifiedApplication]?
    let nextToken: Swift.String?
    let availableOSReleases: [EMRClientTypes.OSRelease]?
}

extension DescribeReleaseLabelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applications = "Applications"
        case availableOSReleases = "AvailableOSReleases"
        case nextToken = "NextToken"
        case releaseLabel = "ReleaseLabel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let releaseLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .releaseLabel)
        releaseLabel = releaseLabelDecoded
        let applicationsContainer = try containerValues.decodeIfPresent([EMRClientTypes.SimplifiedApplication?].self, forKey: .applications)
        var applicationsDecoded0:[EMRClientTypes.SimplifiedApplication]? = nil
        if let applicationsContainer = applicationsContainer {
            applicationsDecoded0 = [EMRClientTypes.SimplifiedApplication]()
            for structure0 in applicationsContainer {
                if let structure0 = structure0 {
                    applicationsDecoded0?.append(structure0)
                }
            }
        }
        applications = applicationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let availableOSReleasesContainer = try containerValues.decodeIfPresent([EMRClientTypes.OSRelease?].self, forKey: .availableOSReleases)
        var availableOSReleasesDecoded0:[EMRClientTypes.OSRelease]? = nil
        if let availableOSReleasesContainer = availableOSReleasesContainer {
            availableOSReleasesDecoded0 = [EMRClientTypes.OSRelease]()
            for structure0 in availableOSReleasesContainer {
                if let structure0 = structure0 {
                    availableOSReleasesDecoded0?.append(structure0)
                }
            }
        }
        availableOSReleases = availableOSReleasesDecoded0
    }
}

extension DescribeSecurityConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension DescribeSecurityConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeSecurityConfigurationInput: Swift.Equatable {
    /// The name of the security configuration.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DescribeSecurityConfigurationInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension DescribeSecurityConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DescribeSecurityConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeSecurityConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeSecurityConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeSecurityConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeSecurityConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationDateTime = output.creationDateTime
            self.name = output.name
            self.securityConfiguration = output.securityConfiguration
        } else {
            self.creationDateTime = nil
            self.name = nil
            self.securityConfiguration = nil
        }
    }
}

public struct DescribeSecurityConfigurationOutputResponse: Swift.Equatable {
    /// The date and time the security configuration was created
    public var creationDateTime: ClientRuntime.Date?
    /// The name of the security configuration.
    public var name: Swift.String?
    /// The security configuration details in JSON format.
    public var securityConfiguration: Swift.String?

    public init (
        creationDateTime: ClientRuntime.Date? = nil,
        name: Swift.String? = nil,
        securityConfiguration: Swift.String? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.name = name
        self.securityConfiguration = securityConfiguration
    }
}

struct DescribeSecurityConfigurationOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
    let securityConfiguration: Swift.String?
    let creationDateTime: ClientRuntime.Date?
}

extension DescribeSecurityConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDateTime = "CreationDateTime"
        case name = "Name"
        case securityConfiguration = "SecurityConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let creationDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
    }
}

extension DescribeStepInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case stepId = "StepId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let stepId = self.stepId {
            try encodeContainer.encode(stepId, forKey: .stepId)
        }
    }
}

extension DescribeStepInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// This input determines which step to describe.
public struct DescribeStepInput: Swift.Equatable {
    /// The identifier of the cluster with steps to describe.
    /// This member is required.
    public var clusterId: Swift.String?
    /// The identifier of the step to describe.
    /// This member is required.
    public var stepId: Swift.String?

    public init (
        clusterId: Swift.String? = nil,
        stepId: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
        self.stepId = stepId
    }
}

struct DescribeStepInputBody: Swift.Equatable {
    let clusterId: Swift.String?
    let stepId: Swift.String?
}

extension DescribeStepInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case stepId = "StepId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let stepIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stepId)
        stepId = stepIdDecoded
    }
}

extension DescribeStepOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeStepOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeStepOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStepOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeStepOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.step = output.step
        } else {
            self.step = nil
        }
    }
}

/// This output contains the description of the cluster step.
public struct DescribeStepOutputResponse: Swift.Equatable {
    /// The step details for the requested step identifier.
    public var step: EMRClientTypes.Step?

    public init (
        step: EMRClientTypes.Step? = nil
    )
    {
        self.step = step
    }
}

struct DescribeStepOutputResponseBody: Swift.Equatable {
    let step: EMRClientTypes.Step?
}

extension DescribeStepOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case step = "Step"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stepDecoded = try containerValues.decodeIfPresent(EMRClientTypes.Step.self, forKey: .step)
        step = stepDecoded
    }
}

extension DescribeStudioInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case studioId = "StudioId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let studioId = self.studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
    }
}

extension DescribeStudioInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeStudioInput: Swift.Equatable {
    /// The Amazon EMR Studio ID.
    /// This member is required.
    public var studioId: Swift.String?

    public init (
        studioId: Swift.String? = nil
    )
    {
        self.studioId = studioId
    }
}

struct DescribeStudioInputBody: Swift.Equatable {
    let studioId: Swift.String?
}

extension DescribeStudioInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case studioId = "StudioId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioId)
        studioId = studioIdDecoded
    }
}

extension DescribeStudioOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeStudioOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeStudioOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStudioOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeStudioOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.studio = output.studio
        } else {
            self.studio = nil
        }
    }
}

public struct DescribeStudioOutputResponse: Swift.Equatable {
    /// The Amazon EMR Studio details.
    public var studio: EMRClientTypes.Studio?

    public init (
        studio: EMRClientTypes.Studio? = nil
    )
    {
        self.studio = studio
    }
}

struct DescribeStudioOutputResponseBody: Swift.Equatable {
    let studio: EMRClientTypes.Studio?
}

extension DescribeStudioOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case studio = "Studio"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioDecoded = try containerValues.decodeIfPresent(EMRClientTypes.Studio.self, forKey: .studio)
        studio = studioDecoded
    }
}

extension EMRClientTypes.EbsBlockDevice: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case device = "Device"
        case volumeSpecification = "VolumeSpecification"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let device = self.device {
            try encodeContainer.encode(device, forKey: .device)
        }
        if let volumeSpecification = self.volumeSpecification {
            try encodeContainer.encode(volumeSpecification, forKey: .volumeSpecification)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeSpecificationDecoded = try containerValues.decodeIfPresent(EMRClientTypes.VolumeSpecification.self, forKey: .volumeSpecification)
        volumeSpecification = volumeSpecificationDecoded
        let deviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .device)
        device = deviceDecoded
    }
}

extension EMRClientTypes {
    /// Configuration of requested EBS block device associated with the instance group.
    public struct EbsBlockDevice: Swift.Equatable {
        /// The device name that is exposed to the instance, such as /dev/sdh.
        public var device: Swift.String?
        /// EBS volume specifications such as volume type, IOPS, size (GiB) and throughput (MiB/s) that are requested for the EBS volume attached to an EC2 instance in the cluster.
        public var volumeSpecification: EMRClientTypes.VolumeSpecification?

        public init (
            device: Swift.String? = nil,
            volumeSpecification: EMRClientTypes.VolumeSpecification? = nil
        )
        {
            self.device = device
            self.volumeSpecification = volumeSpecification
        }
    }

}

extension EMRClientTypes.EbsBlockDeviceConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case volumeSpecification = "VolumeSpecification"
        case volumesPerInstance = "VolumesPerInstance"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let volumeSpecification = self.volumeSpecification {
            try encodeContainer.encode(volumeSpecification, forKey: .volumeSpecification)
        }
        if let volumesPerInstance = self.volumesPerInstance {
            try encodeContainer.encode(volumesPerInstance, forKey: .volumesPerInstance)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeSpecificationDecoded = try containerValues.decodeIfPresent(EMRClientTypes.VolumeSpecification.self, forKey: .volumeSpecification)
        volumeSpecification = volumeSpecificationDecoded
        let volumesPerInstanceDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumesPerInstance)
        volumesPerInstance = volumesPerInstanceDecoded
    }
}

extension EMRClientTypes {
    /// Configuration of requested EBS block device associated with the instance group with count of volumes that are associated to every instance.
    public struct EbsBlockDeviceConfig: Swift.Equatable {
        /// EBS volume specifications such as volume type, IOPS, size (GiB) and throughput (MiB/s) that are requested for the EBS volume attached to an EC2 instance in the cluster.
        /// This member is required.
        public var volumeSpecification: EMRClientTypes.VolumeSpecification?
        /// Number of EBS volumes with a specific volume configuration that are associated with every instance in the instance group
        public var volumesPerInstance: Swift.Int?

        public init (
            volumeSpecification: EMRClientTypes.VolumeSpecification? = nil,
            volumesPerInstance: Swift.Int? = nil
        )
        {
            self.volumeSpecification = volumeSpecification
            self.volumesPerInstance = volumesPerInstance
        }
    }

}

extension EMRClientTypes.EbsConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ebsBlockDeviceConfigs = "EbsBlockDeviceConfigs"
        case ebsOptimized = "EbsOptimized"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ebsBlockDeviceConfigs = ebsBlockDeviceConfigs {
            var ebsBlockDeviceConfigsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ebsBlockDeviceConfigs)
            for ebsblockdeviceconfig0 in ebsBlockDeviceConfigs {
                try ebsBlockDeviceConfigsContainer.encode(ebsblockdeviceconfig0)
            }
        }
        if let ebsOptimized = self.ebsOptimized {
            try encodeContainer.encode(ebsOptimized, forKey: .ebsOptimized)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ebsBlockDeviceConfigsContainer = try containerValues.decodeIfPresent([EMRClientTypes.EbsBlockDeviceConfig?].self, forKey: .ebsBlockDeviceConfigs)
        var ebsBlockDeviceConfigsDecoded0:[EMRClientTypes.EbsBlockDeviceConfig]? = nil
        if let ebsBlockDeviceConfigsContainer = ebsBlockDeviceConfigsContainer {
            ebsBlockDeviceConfigsDecoded0 = [EMRClientTypes.EbsBlockDeviceConfig]()
            for structure0 in ebsBlockDeviceConfigsContainer {
                if let structure0 = structure0 {
                    ebsBlockDeviceConfigsDecoded0?.append(structure0)
                }
            }
        }
        ebsBlockDeviceConfigs = ebsBlockDeviceConfigsDecoded0
        let ebsOptimizedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ebsOptimized)
        ebsOptimized = ebsOptimizedDecoded
    }
}

extension EMRClientTypes {
    /// The Amazon EBS configuration of a cluster instance.
    public struct EbsConfiguration: Swift.Equatable {
        /// An array of Amazon EBS volume specifications attached to a cluster instance.
        public var ebsBlockDeviceConfigs: [EMRClientTypes.EbsBlockDeviceConfig]?
        /// Indicates whether an Amazon EBS volume is EBS-optimized.
        public var ebsOptimized: Swift.Bool?

        public init (
            ebsBlockDeviceConfigs: [EMRClientTypes.EbsBlockDeviceConfig]? = nil,
            ebsOptimized: Swift.Bool? = nil
        )
        {
            self.ebsBlockDeviceConfigs = ebsBlockDeviceConfigs
            self.ebsOptimized = ebsOptimized
        }
    }

}

extension EMRClientTypes.EbsVolume: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case device = "Device"
        case volumeId = "VolumeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let device = self.device {
            try encodeContainer.encode(device, forKey: .device)
        }
        if let volumeId = self.volumeId {
            try encodeContainer.encode(volumeId, forKey: .volumeId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .device)
        device = deviceDecoded
        let volumeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
    }
}

extension EMRClientTypes {
    /// EBS block device that's attached to an EC2 instance.
    public struct EbsVolume: Swift.Equatable {
        /// The device name that is exposed to the instance, such as /dev/sdh.
        public var device: Swift.String?
        /// The volume identifier of the EBS volume.
        public var volumeId: Swift.String?

        public init (
            device: Swift.String? = nil,
            volumeId: Swift.String? = nil
        )
        {
            self.device = device
            self.volumeId = volumeId
        }
    }

}

extension EMRClientTypes.Ec2InstanceAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalMasterSecurityGroups = "AdditionalMasterSecurityGroups"
        case additionalSlaveSecurityGroups = "AdditionalSlaveSecurityGroups"
        case ec2AvailabilityZone = "Ec2AvailabilityZone"
        case ec2KeyName = "Ec2KeyName"
        case ec2SubnetId = "Ec2SubnetId"
        case emrManagedMasterSecurityGroup = "EmrManagedMasterSecurityGroup"
        case emrManagedSlaveSecurityGroup = "EmrManagedSlaveSecurityGroup"
        case iamInstanceProfile = "IamInstanceProfile"
        case requestedEc2AvailabilityZones = "RequestedEc2AvailabilityZones"
        case requestedEc2SubnetIds = "RequestedEc2SubnetIds"
        case serviceAccessSecurityGroup = "ServiceAccessSecurityGroup"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalMasterSecurityGroups = additionalMasterSecurityGroups {
            var additionalMasterSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalMasterSecurityGroups)
            for string0 in additionalMasterSecurityGroups {
                try additionalMasterSecurityGroupsContainer.encode(string0)
            }
        }
        if let additionalSlaveSecurityGroups = additionalSlaveSecurityGroups {
            var additionalSlaveSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalSlaveSecurityGroups)
            for string0 in additionalSlaveSecurityGroups {
                try additionalSlaveSecurityGroupsContainer.encode(string0)
            }
        }
        if let ec2AvailabilityZone = self.ec2AvailabilityZone {
            try encodeContainer.encode(ec2AvailabilityZone, forKey: .ec2AvailabilityZone)
        }
        if let ec2KeyName = self.ec2KeyName {
            try encodeContainer.encode(ec2KeyName, forKey: .ec2KeyName)
        }
        if let ec2SubnetId = self.ec2SubnetId {
            try encodeContainer.encode(ec2SubnetId, forKey: .ec2SubnetId)
        }
        if let emrManagedMasterSecurityGroup = self.emrManagedMasterSecurityGroup {
            try encodeContainer.encode(emrManagedMasterSecurityGroup, forKey: .emrManagedMasterSecurityGroup)
        }
        if let emrManagedSlaveSecurityGroup = self.emrManagedSlaveSecurityGroup {
            try encodeContainer.encode(emrManagedSlaveSecurityGroup, forKey: .emrManagedSlaveSecurityGroup)
        }
        if let iamInstanceProfile = self.iamInstanceProfile {
            try encodeContainer.encode(iamInstanceProfile, forKey: .iamInstanceProfile)
        }
        if let requestedEc2AvailabilityZones = requestedEc2AvailabilityZones {
            var requestedEc2AvailabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .requestedEc2AvailabilityZones)
            for xmlstringmaxlen2560 in requestedEc2AvailabilityZones {
                try requestedEc2AvailabilityZonesContainer.encode(xmlstringmaxlen2560)
            }
        }
        if let requestedEc2SubnetIds = requestedEc2SubnetIds {
            var requestedEc2SubnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .requestedEc2SubnetIds)
            for xmlstringmaxlen2560 in requestedEc2SubnetIds {
                try requestedEc2SubnetIdsContainer.encode(xmlstringmaxlen2560)
            }
        }
        if let serviceAccessSecurityGroup = self.serviceAccessSecurityGroup {
            try encodeContainer.encode(serviceAccessSecurityGroup, forKey: .serviceAccessSecurityGroup)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ec2KeyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2KeyName)
        ec2KeyName = ec2KeyNameDecoded
        let ec2SubnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2SubnetId)
        ec2SubnetId = ec2SubnetIdDecoded
        let requestedEc2SubnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .requestedEc2SubnetIds)
        var requestedEc2SubnetIdsDecoded0:[Swift.String]? = nil
        if let requestedEc2SubnetIdsContainer = requestedEc2SubnetIdsContainer {
            requestedEc2SubnetIdsDecoded0 = [Swift.String]()
            for string0 in requestedEc2SubnetIdsContainer {
                if let string0 = string0 {
                    requestedEc2SubnetIdsDecoded0?.append(string0)
                }
            }
        }
        requestedEc2SubnetIds = requestedEc2SubnetIdsDecoded0
        let ec2AvailabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2AvailabilityZone)
        ec2AvailabilityZone = ec2AvailabilityZoneDecoded
        let requestedEc2AvailabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .requestedEc2AvailabilityZones)
        var requestedEc2AvailabilityZonesDecoded0:[Swift.String]? = nil
        if let requestedEc2AvailabilityZonesContainer = requestedEc2AvailabilityZonesContainer {
            requestedEc2AvailabilityZonesDecoded0 = [Swift.String]()
            for string0 in requestedEc2AvailabilityZonesContainer {
                if let string0 = string0 {
                    requestedEc2AvailabilityZonesDecoded0?.append(string0)
                }
            }
        }
        requestedEc2AvailabilityZones = requestedEc2AvailabilityZonesDecoded0
        let iamInstanceProfileDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamInstanceProfile)
        iamInstanceProfile = iamInstanceProfileDecoded
        let emrManagedMasterSecurityGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emrManagedMasterSecurityGroup)
        emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroupDecoded
        let emrManagedSlaveSecurityGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emrManagedSlaveSecurityGroup)
        emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroupDecoded
        let serviceAccessSecurityGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceAccessSecurityGroup)
        serviceAccessSecurityGroup = serviceAccessSecurityGroupDecoded
        let additionalMasterSecurityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalMasterSecurityGroups)
        var additionalMasterSecurityGroupsDecoded0:[Swift.String]? = nil
        if let additionalMasterSecurityGroupsContainer = additionalMasterSecurityGroupsContainer {
            additionalMasterSecurityGroupsDecoded0 = [Swift.String]()
            for string0 in additionalMasterSecurityGroupsContainer {
                if let string0 = string0 {
                    additionalMasterSecurityGroupsDecoded0?.append(string0)
                }
            }
        }
        additionalMasterSecurityGroups = additionalMasterSecurityGroupsDecoded0
        let additionalSlaveSecurityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalSlaveSecurityGroups)
        var additionalSlaveSecurityGroupsDecoded0:[Swift.String]? = nil
        if let additionalSlaveSecurityGroupsContainer = additionalSlaveSecurityGroupsContainer {
            additionalSlaveSecurityGroupsDecoded0 = [Swift.String]()
            for string0 in additionalSlaveSecurityGroupsContainer {
                if let string0 = string0 {
                    additionalSlaveSecurityGroupsDecoded0?.append(string0)
                }
            }
        }
        additionalSlaveSecurityGroups = additionalSlaveSecurityGroupsDecoded0
    }
}

extension EMRClientTypes {
    /// Provides information about the EC2 instances in a cluster grouped by category. For example, key name, subnet ID, IAM instance profile, and so on.
    public struct Ec2InstanceAttributes: Swift.Equatable {
        /// A list of additional Amazon EC2 security group IDs for the master node.
        public var additionalMasterSecurityGroups: [Swift.String]?
        /// A list of additional Amazon EC2 security group IDs for the core and task nodes.
        public var additionalSlaveSecurityGroups: [Swift.String]?
        /// The Availability Zone in which the cluster will run.
        public var ec2AvailabilityZone: Swift.String?
        /// The name of the Amazon EC2 key pair to use when connecting with SSH into the master node as a user named "hadoop".
        public var ec2KeyName: Swift.String?
        /// Set this parameter to the identifier of the Amazon VPC subnet where you want the cluster to launch. If you do not specify this value, and your account supports EC2-Classic, the cluster launches in EC2-Classic.
        public var ec2SubnetId: Swift.String?
        /// The identifier of the Amazon EC2 security group for the master node.
        public var emrManagedMasterSecurityGroup: Swift.String?
        /// The identifier of the Amazon EC2 security group for the core and task nodes.
        public var emrManagedSlaveSecurityGroup: Swift.String?
        /// The IAM role that was specified when the cluster was launched. The EC2 instances of the cluster assume this role.
        public var iamInstanceProfile: Swift.String?
        /// Applies to clusters configured with the instance fleets option. Specifies one or more Availability Zones in which to launch EC2 cluster instances when the EC2-Classic network configuration is supported. Amazon EMR chooses the Availability Zone with the best fit from among the list of RequestedEc2AvailabilityZones, and then launches all cluster instances within that Availability Zone. If you do not specify this value, Amazon EMR chooses the Availability Zone for you. RequestedEc2SubnetIDs and RequestedEc2AvailabilityZones cannot be specified together.
        public var requestedEc2AvailabilityZones: [Swift.String]?
        /// Applies to clusters configured with the instance fleets option. Specifies the unique identifier of one or more Amazon EC2 subnets in which to launch EC2 cluster instances. Subnets must exist within the same VPC. Amazon EMR chooses the EC2 subnet with the best fit from among the list of RequestedEc2SubnetIds, and then launches all cluster instances within that Subnet. If this value is not specified, and the account and Region support EC2-Classic networks, the cluster launches instances in the EC2-Classic network and uses RequestedEc2AvailabilityZones instead of this setting. If EC2-Classic is not supported, and no Subnet is specified, Amazon EMR chooses the subnet for you. RequestedEc2SubnetIDs and RequestedEc2AvailabilityZones cannot be specified together.
        public var requestedEc2SubnetIds: [Swift.String]?
        /// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
        public var serviceAccessSecurityGroup: Swift.String?

        public init (
            additionalMasterSecurityGroups: [Swift.String]? = nil,
            additionalSlaveSecurityGroups: [Swift.String]? = nil,
            ec2AvailabilityZone: Swift.String? = nil,
            ec2KeyName: Swift.String? = nil,
            ec2SubnetId: Swift.String? = nil,
            emrManagedMasterSecurityGroup: Swift.String? = nil,
            emrManagedSlaveSecurityGroup: Swift.String? = nil,
            iamInstanceProfile: Swift.String? = nil,
            requestedEc2AvailabilityZones: [Swift.String]? = nil,
            requestedEc2SubnetIds: [Swift.String]? = nil,
            serviceAccessSecurityGroup: Swift.String? = nil
        )
        {
            self.additionalMasterSecurityGroups = additionalMasterSecurityGroups
            self.additionalSlaveSecurityGroups = additionalSlaveSecurityGroups
            self.ec2AvailabilityZone = ec2AvailabilityZone
            self.ec2KeyName = ec2KeyName
            self.ec2SubnetId = ec2SubnetId
            self.emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroup
            self.emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroup
            self.iamInstanceProfile = iamInstanceProfile
            self.requestedEc2AvailabilityZones = requestedEc2AvailabilityZones
            self.requestedEc2SubnetIds = requestedEc2SubnetIds
            self.serviceAccessSecurityGroup = serviceAccessSecurityGroup
        }
    }

}

extension EMRClientTypes.ExecutionEngineConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case masterInstanceSecurityGroupId = "MasterInstanceSecurityGroupId"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let masterInstanceSecurityGroupId = self.masterInstanceSecurityGroupId {
            try encodeContainer.encode(masterInstanceSecurityGroupId, forKey: .masterInstanceSecurityGroupId)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let typeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ExecutionEngineType.self, forKey: .type)
        type = typeDecoded
        let masterInstanceSecurityGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterInstanceSecurityGroupId)
        masterInstanceSecurityGroupId = masterInstanceSecurityGroupIdDecoded
    }
}

extension EMRClientTypes {
    /// Specifies the execution engine (cluster) to run the notebook and perform the notebook execution, for example, an EMR cluster.
    public struct ExecutionEngineConfig: Swift.Equatable {
        /// The unique identifier of the execution engine. For an EMR cluster, this is the cluster ID.
        /// This member is required.
        public var id: Swift.String?
        /// An optional unique ID of an EC2 security group to associate with the master instance of the EMR cluster for this notebook execution. For more information see [Specifying EC2 Security Groups for EMR Notebooks](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-managed-notebooks-security-groups.html) in the EMR Management Guide.
        public var masterInstanceSecurityGroupId: Swift.String?
        /// The type of execution engine. A value of EMR specifies an EMR cluster.
        public var type: EMRClientTypes.ExecutionEngineType?

        public init (
            id: Swift.String? = nil,
            masterInstanceSecurityGroupId: Swift.String? = nil,
            type: EMRClientTypes.ExecutionEngineType? = nil
        )
        {
            self.id = id
            self.masterInstanceSecurityGroupId = masterInstanceSecurityGroupId
            self.type = type
        }
    }

}

extension EMRClientTypes {
    public enum ExecutionEngineType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case emr
        case sdkUnknown(Swift.String)

        public static var allCases: [ExecutionEngineType] {
            return [
                .emr,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .emr: return "EMR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExecutionEngineType(rawValue: rawValue) ?? ExecutionEngineType.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.FailureDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logFile = "LogFile"
        case message = "Message"
        case reason = "Reason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logFile = self.logFile {
            try encodeContainer.encode(logFile, forKey: .logFile)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let logFileDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logFile)
        logFile = logFileDecoded
    }
}

extension EMRClientTypes {
    /// The details of the step failure. The service attempts to detect the root cause for many common failures.
    public struct FailureDetails: Swift.Equatable {
        /// The path to the log file where the step failure root cause was originally recorded.
        public var logFile: Swift.String?
        /// The descriptive message including the error the Amazon EMR service has identified as the cause of step failure. This is text from an error log that describes the root cause of the failure.
        public var message: Swift.String?
        /// The reason for the step failure. In the case where the service cannot successfully determine the root cause of the failure, it returns "Unknown Error" as a reason.
        public var reason: Swift.String?

        public init (
            logFile: Swift.String? = nil,
            message: Swift.String? = nil,
            reason: Swift.String? = nil
        )
        {
            self.logFile = logFile
            self.message = message
            self.reason = reason
        }
    }

}

extension GetAutoTerminationPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
    }
}

extension GetAutoTerminationPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetAutoTerminationPolicyInput: Swift.Equatable {
    /// Specifies the ID of the Amazon EMR cluster for which the auto-termination policy will be fetched.
    /// This member is required.
    public var clusterId: Swift.String?

    public init (
        clusterId: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
    }
}

struct GetAutoTerminationPolicyInputBody: Swift.Equatable {
    let clusterId: Swift.String?
}

extension GetAutoTerminationPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
    }
}

extension GetAutoTerminationPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAutoTerminationPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetAutoTerminationPolicyOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAutoTerminationPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetAutoTerminationPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.autoTerminationPolicy = output.autoTerminationPolicy
        } else {
            self.autoTerminationPolicy = nil
        }
    }
}

public struct GetAutoTerminationPolicyOutputResponse: Swift.Equatable {
    /// Specifies the auto-termination policy that is attached to an Amazon EMR cluster.
    public var autoTerminationPolicy: EMRClientTypes.AutoTerminationPolicy?

    public init (
        autoTerminationPolicy: EMRClientTypes.AutoTerminationPolicy? = nil
    )
    {
        self.autoTerminationPolicy = autoTerminationPolicy
    }
}

struct GetAutoTerminationPolicyOutputResponseBody: Swift.Equatable {
    let autoTerminationPolicy: EMRClientTypes.AutoTerminationPolicy?
}

extension GetAutoTerminationPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoTerminationPolicy = "AutoTerminationPolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoTerminationPolicyDecoded = try containerValues.decodeIfPresent(EMRClientTypes.AutoTerminationPolicy.self, forKey: .autoTerminationPolicy)
        autoTerminationPolicy = autoTerminationPolicyDecoded
    }
}

extension GetBlockPublicAccessConfigurationInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension GetBlockPublicAccessConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBlockPublicAccessConfigurationInput: Swift.Equatable {

    public init () { }
}

struct GetBlockPublicAccessConfigurationInputBody: Swift.Equatable {
}

extension GetBlockPublicAccessConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBlockPublicAccessConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBlockPublicAccessConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetBlockPublicAccessConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBlockPublicAccessConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetBlockPublicAccessConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.blockPublicAccessConfiguration = output.blockPublicAccessConfiguration
            self.blockPublicAccessConfigurationMetadata = output.blockPublicAccessConfigurationMetadata
        } else {
            self.blockPublicAccessConfiguration = nil
            self.blockPublicAccessConfigurationMetadata = nil
        }
    }
}

public struct GetBlockPublicAccessConfigurationOutputResponse: Swift.Equatable {
    /// A configuration for Amazon EMR block public access. The configuration applies to all clusters created in your account for the current Region. The configuration specifies whether block public access is enabled. If block public access is enabled, security groups associated with the cluster cannot have rules that allow inbound traffic from 0.0.0.0/0 or ::/0 on a port, unless the port is specified as an exception using PermittedPublicSecurityGroupRuleRanges in the BlockPublicAccessConfiguration. By default, Port 22 (SSH) is an exception, and public access is allowed on this port. You can change this by updating the block public access configuration to remove the exception. For accounts that created clusters in a Region before November 25, 2019, block public access is disabled by default in that Region. To use this feature, you must manually enable and configure it. For accounts that did not create an EMR cluster in a Region before this date, block public access is enabled by default in that Region.
    /// This member is required.
    public var blockPublicAccessConfiguration: EMRClientTypes.BlockPublicAccessConfiguration?
    /// Properties that describe the Amazon Web Services principal that created the BlockPublicAccessConfiguration using the PutBlockPublicAccessConfiguration action as well as the date and time that the configuration was created. Each time a configuration for block public access is updated, Amazon EMR updates this metadata.
    /// This member is required.
    public var blockPublicAccessConfigurationMetadata: EMRClientTypes.BlockPublicAccessConfigurationMetadata?

    public init (
        blockPublicAccessConfiguration: EMRClientTypes.BlockPublicAccessConfiguration? = nil,
        blockPublicAccessConfigurationMetadata: EMRClientTypes.BlockPublicAccessConfigurationMetadata? = nil
    )
    {
        self.blockPublicAccessConfiguration = blockPublicAccessConfiguration
        self.blockPublicAccessConfigurationMetadata = blockPublicAccessConfigurationMetadata
    }
}

struct GetBlockPublicAccessConfigurationOutputResponseBody: Swift.Equatable {
    let blockPublicAccessConfiguration: EMRClientTypes.BlockPublicAccessConfiguration?
    let blockPublicAccessConfigurationMetadata: EMRClientTypes.BlockPublicAccessConfigurationMetadata?
}

extension GetBlockPublicAccessConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blockPublicAccessConfiguration = "BlockPublicAccessConfiguration"
        case blockPublicAccessConfigurationMetadata = "BlockPublicAccessConfigurationMetadata"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blockPublicAccessConfigurationDecoded = try containerValues.decodeIfPresent(EMRClientTypes.BlockPublicAccessConfiguration.self, forKey: .blockPublicAccessConfiguration)
        blockPublicAccessConfiguration = blockPublicAccessConfigurationDecoded
        let blockPublicAccessConfigurationMetadataDecoded = try containerValues.decodeIfPresent(EMRClientTypes.BlockPublicAccessConfigurationMetadata.self, forKey: .blockPublicAccessConfigurationMetadata)
        blockPublicAccessConfigurationMetadata = blockPublicAccessConfigurationMetadataDecoded
    }
}

extension GetClusterSessionCredentialsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case executionRoleArn = "ExecutionRoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let executionRoleArn = self.executionRoleArn {
            try encodeContainer.encode(executionRoleArn, forKey: .executionRoleArn)
        }
    }
}

extension GetClusterSessionCredentialsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetClusterSessionCredentialsInput: Swift.Equatable {
    /// The unique identifier of the cluster.
    /// This member is required.
    public var clusterId: Swift.String?
    /// The Amazon Resource Name (ARN) of the runtime role for interactive workload submission on the cluster. The runtime role can be a cross-account IAM role. The runtime role ARN is a combination of account ID, role name, and role type using the following format: arn:partition:service:region:account:resource.
    /// This member is required.
    public var executionRoleArn: Swift.String?

    public init (
        clusterId: Swift.String? = nil,
        executionRoleArn: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
        self.executionRoleArn = executionRoleArn
    }
}

struct GetClusterSessionCredentialsInputBody: Swift.Equatable {
    let clusterId: Swift.String?
    let executionRoleArn: Swift.String?
}

extension GetClusterSessionCredentialsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case executionRoleArn = "ExecutionRoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
    }
}

extension GetClusterSessionCredentialsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetClusterSessionCredentialsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailure" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetClusterSessionCredentialsOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetClusterSessionCredentialsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetClusterSessionCredentialsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.credentials = output.credentials
            self.expiresAt = output.expiresAt
        } else {
            self.credentials = nil
            self.expiresAt = nil
        }
    }
}

public struct GetClusterSessionCredentialsOutputResponse: Swift.Equatable {
    /// The credentials that you can use to connect to cluster endpoints that support username-based and password-based authentication.
    public var credentials: EMRClientTypes.Credentials?
    /// The time when the credentials that are returned by the GetClusterSessionCredentials API expire.
    public var expiresAt: ClientRuntime.Date?

    public init (
        credentials: EMRClientTypes.Credentials? = nil,
        expiresAt: ClientRuntime.Date? = nil
    )
    {
        self.credentials = credentials
        self.expiresAt = expiresAt
    }
}

struct GetClusterSessionCredentialsOutputResponseBody: Swift.Equatable {
    let credentials: EMRClientTypes.Credentials?
    let expiresAt: ClientRuntime.Date?
}

extension GetClusterSessionCredentialsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case credentials = "Credentials"
        case expiresAt = "ExpiresAt"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let credentialsDecoded = try containerValues.decodeIfPresent(EMRClientTypes.Credentials.self, forKey: .credentials)
        credentials = credentialsDecoded
        let expiresAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .expiresAt)
        expiresAt = expiresAtDecoded
    }
}

extension GetManagedScalingPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
    }
}

extension GetManagedScalingPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetManagedScalingPolicyInput: Swift.Equatable {
    /// Specifies the ID of the cluster for which the managed scaling policy will be fetched.
    /// This member is required.
    public var clusterId: Swift.String?

    public init (
        clusterId: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
    }
}

struct GetManagedScalingPolicyInputBody: Swift.Equatable {
    let clusterId: Swift.String?
}

extension GetManagedScalingPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
    }
}

extension GetManagedScalingPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetManagedScalingPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetManagedScalingPolicyOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetManagedScalingPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetManagedScalingPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.managedScalingPolicy = output.managedScalingPolicy
        } else {
            self.managedScalingPolicy = nil
        }
    }
}

public struct GetManagedScalingPolicyOutputResponse: Swift.Equatable {
    /// Specifies the managed scaling policy that is attached to an Amazon EMR cluster.
    public var managedScalingPolicy: EMRClientTypes.ManagedScalingPolicy?

    public init (
        managedScalingPolicy: EMRClientTypes.ManagedScalingPolicy? = nil
    )
    {
        self.managedScalingPolicy = managedScalingPolicy
    }
}

struct GetManagedScalingPolicyOutputResponseBody: Swift.Equatable {
    let managedScalingPolicy: EMRClientTypes.ManagedScalingPolicy?
}

extension GetManagedScalingPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case managedScalingPolicy = "ManagedScalingPolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let managedScalingPolicyDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ManagedScalingPolicy.self, forKey: .managedScalingPolicy)
        managedScalingPolicy = managedScalingPolicyDecoded
    }
}

extension GetStudioSessionMappingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityId = "IdentityId"
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case studioId = "StudioId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identityId = self.identityId {
            try encodeContainer.encode(identityId, forKey: .identityId)
        }
        if let identityName = self.identityName {
            try encodeContainer.encode(identityName, forKey: .identityName)
        }
        if let identityType = self.identityType {
            try encodeContainer.encode(identityType.rawValue, forKey: .identityType)
        }
        if let studioId = self.studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
    }
}

extension GetStudioSessionMappingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetStudioSessionMappingInput: Swift.Equatable {
    /// The globally unique identifier (GUID) of the user or group. For more information, see [UserId](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId) and [GroupId](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId) in the IAM Identity Center Identity Store API Reference. Either IdentityName or IdentityId must be specified.
    public var identityId: Swift.String?
    /// The name of the user or group to fetch. For more information, see [UserName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName) and [DisplayName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName) in the IAM Identity Center Identity Store API Reference. Either IdentityName or IdentityId must be specified.
    public var identityName: Swift.String?
    /// Specifies whether the identity to fetch is a user or a group.
    /// This member is required.
    public var identityType: EMRClientTypes.IdentityType?
    /// The ID of the Amazon EMR Studio.
    /// This member is required.
    public var studioId: Swift.String?

    public init (
        identityId: Swift.String? = nil,
        identityName: Swift.String? = nil,
        identityType: EMRClientTypes.IdentityType? = nil,
        studioId: Swift.String? = nil
    )
    {
        self.identityId = identityId
        self.identityName = identityName
        self.identityType = identityType
        self.studioId = studioId
    }
}

struct GetStudioSessionMappingInputBody: Swift.Equatable {
    let studioId: Swift.String?
    let identityId: Swift.String?
    let identityName: Swift.String?
    let identityType: EMRClientTypes.IdentityType?
}

extension GetStudioSessionMappingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityId = "IdentityId"
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case studioId = "StudioId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let identityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityId)
        identityId = identityIdDecoded
        let identityNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityName)
        identityName = identityNameDecoded
        let identityTypeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
    }
}

extension GetStudioSessionMappingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetStudioSessionMappingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailure" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetStudioSessionMappingOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetStudioSessionMappingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetStudioSessionMappingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.sessionMapping = output.sessionMapping
        } else {
            self.sessionMapping = nil
        }
    }
}

public struct GetStudioSessionMappingOutputResponse: Swift.Equatable {
    /// The session mapping details for the specified Amazon EMR Studio and identity, including session policy ARN and creation time.
    public var sessionMapping: EMRClientTypes.SessionMappingDetail?

    public init (
        sessionMapping: EMRClientTypes.SessionMappingDetail? = nil
    )
    {
        self.sessionMapping = sessionMapping
    }
}

struct GetStudioSessionMappingOutputResponseBody: Swift.Equatable {
    let sessionMapping: EMRClientTypes.SessionMappingDetail?
}

extension GetStudioSessionMappingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sessionMapping = "SessionMapping"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sessionMappingDecoded = try containerValues.decodeIfPresent(EMRClientTypes.SessionMappingDetail.self, forKey: .sessionMapping)
        sessionMapping = sessionMappingDecoded
    }
}

extension EMRClientTypes.HadoopJarStepConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case args = "Args"
        case jar = "Jar"
        case mainClass = "MainClass"
        case properties = "Properties"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let args = args {
            var argsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .args)
            for xmlstring0 in args {
                try argsContainer.encode(xmlstring0)
            }
        }
        if let jar = self.jar {
            try encodeContainer.encode(jar, forKey: .jar)
        }
        if let mainClass = self.mainClass {
            try encodeContainer.encode(mainClass, forKey: .mainClass)
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .properties)
            for keyvalue0 in properties {
                try propertiesContainer.encode(keyvalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let propertiesContainer = try containerValues.decodeIfPresent([EMRClientTypes.KeyValue?].self, forKey: .properties)
        var propertiesDecoded0:[EMRClientTypes.KeyValue]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [EMRClientTypes.KeyValue]()
            for structure0 in propertiesContainer {
                if let structure0 = structure0 {
                    propertiesDecoded0?.append(structure0)
                }
            }
        }
        properties = propertiesDecoded0
        let jarDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jar)
        jar = jarDecoded
        let mainClassDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mainClass)
        mainClass = mainClassDecoded
        let argsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .args)
        var argsDecoded0:[Swift.String]? = nil
        if let argsContainer = argsContainer {
            argsDecoded0 = [Swift.String]()
            for string0 in argsContainer {
                if let string0 = string0 {
                    argsDecoded0?.append(string0)
                }
            }
        }
        args = argsDecoded0
    }
}

extension EMRClientTypes {
    /// A job flow step consisting of a JAR file whose main function will be executed. The main function submits a job for Hadoop to execute and waits for the job to finish or fail.
    public struct HadoopJarStepConfig: Swift.Equatable {
        /// A list of command line arguments passed to the JAR file's main function when executed.
        public var args: [Swift.String]?
        /// A path to a JAR file run during the step.
        /// This member is required.
        public var jar: Swift.String?
        /// The name of the main class in the specified Java file. If not specified, the JAR file should specify a Main-Class in its manifest file.
        public var mainClass: Swift.String?
        /// A list of Java properties that are set when the step runs. You can use these properties to pass key-value pairs to your main function.
        public var properties: [EMRClientTypes.KeyValue]?

        public init (
            args: [Swift.String]? = nil,
            jar: Swift.String? = nil,
            mainClass: Swift.String? = nil,
            properties: [EMRClientTypes.KeyValue]? = nil
        )
        {
            self.args = args
            self.jar = jar
            self.mainClass = mainClass
            self.properties = properties
        }
    }

}

extension EMRClientTypes.HadoopStepConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case args = "Args"
        case jar = "Jar"
        case mainClass = "MainClass"
        case properties = "Properties"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let args = args {
            var argsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .args)
            for string0 in args {
                try argsContainer.encode(string0)
            }
        }
        if let jar = self.jar {
            try encodeContainer.encode(jar, forKey: .jar)
        }
        if let mainClass = self.mainClass {
            try encodeContainer.encode(mainClass, forKey: .mainClass)
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .properties)
            for (dictKey0, stringMap0) in properties {
                try propertiesContainer.encode(stringMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jarDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jar)
        jar = jarDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .properties)
        var propertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in propertiesContainer {
                if let string0 = string0 {
                    propertiesDecoded0?[key0] = string0
                }
            }
        }
        properties = propertiesDecoded0
        let mainClassDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mainClass)
        mainClass = mainClassDecoded
        let argsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .args)
        var argsDecoded0:[Swift.String]? = nil
        if let argsContainer = argsContainer {
            argsDecoded0 = [Swift.String]()
            for string0 in argsContainer {
                if let string0 = string0 {
                    argsDecoded0?.append(string0)
                }
            }
        }
        args = argsDecoded0
    }
}

extension EMRClientTypes {
    /// A cluster step consisting of a JAR file whose main function will be executed. The main function submits a job for Hadoop to execute and waits for the job to finish or fail.
    public struct HadoopStepConfig: Swift.Equatable {
        /// The list of command line arguments to pass to the JAR file's main function for execution.
        public var args: [Swift.String]?
        /// The path to the JAR file that runs during the step.
        public var jar: Swift.String?
        /// The name of the main class in the specified Java file. If not specified, the JAR file should specify a main class in its manifest file.
        public var mainClass: Swift.String?
        /// The list of Java properties that are set when the step runs. You can use these properties to pass key-value pairs to your main function.
        public var properties: [Swift.String:Swift.String]?

        public init (
            args: [Swift.String]? = nil,
            jar: Swift.String? = nil,
            mainClass: Swift.String? = nil,
            properties: [Swift.String:Swift.String]? = nil
        )
        {
            self.args = args
            self.jar = jar
            self.mainClass = mainClass
            self.properties = properties
        }
    }

}

extension EMRClientTypes {
    public enum IdentityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case group
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [IdentityType] {
            return [
                .group,
                .user,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .group: return "GROUP"
            case .user: return "USER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IdentityType(rawValue: rawValue) ?? IdentityType.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.Instance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ebsVolumes = "EbsVolumes"
        case ec2InstanceId = "Ec2InstanceId"
        case id = "Id"
        case instanceFleetId = "InstanceFleetId"
        case instanceGroupId = "InstanceGroupId"
        case instanceType = "InstanceType"
        case market = "Market"
        case privateDnsName = "PrivateDnsName"
        case privateIpAddress = "PrivateIpAddress"
        case publicDnsName = "PublicDnsName"
        case publicIpAddress = "PublicIpAddress"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ebsVolumes = ebsVolumes {
            var ebsVolumesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ebsVolumes)
            for ebsvolume0 in ebsVolumes {
                try ebsVolumesContainer.encode(ebsvolume0)
            }
        }
        if let ec2InstanceId = self.ec2InstanceId {
            try encodeContainer.encode(ec2InstanceId, forKey: .ec2InstanceId)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let instanceFleetId = self.instanceFleetId {
            try encodeContainer.encode(instanceFleetId, forKey: .instanceFleetId)
        }
        if let instanceGroupId = self.instanceGroupId {
            try encodeContainer.encode(instanceGroupId, forKey: .instanceGroupId)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let market = self.market {
            try encodeContainer.encode(market.rawValue, forKey: .market)
        }
        if let privateDnsName = self.privateDnsName {
            try encodeContainer.encode(privateDnsName, forKey: .privateDnsName)
        }
        if let privateIpAddress = self.privateIpAddress {
            try encodeContainer.encode(privateIpAddress, forKey: .privateIpAddress)
        }
        if let publicDnsName = self.publicDnsName {
            try encodeContainer.encode(publicDnsName, forKey: .publicDnsName)
        }
        if let publicIpAddress = self.publicIpAddress {
            try encodeContainer.encode(publicIpAddress, forKey: .publicIpAddress)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let ec2InstanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2InstanceId)
        ec2InstanceId = ec2InstanceIdDecoded
        let publicDnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicDnsName)
        publicDnsName = publicDnsNameDecoded
        let publicIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicIpAddress)
        publicIpAddress = publicIpAddressDecoded
        let privateDnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateDnsName)
        privateDnsName = privateDnsNameDecoded
        let privateIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateIpAddress)
        privateIpAddress = privateIpAddressDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceStatus.self, forKey: .status)
        status = statusDecoded
        let instanceGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceGroupId)
        instanceGroupId = instanceGroupIdDecoded
        let instanceFleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceFleetId)
        instanceFleetId = instanceFleetIdDecoded
        let marketDecoded = try containerValues.decodeIfPresent(EMRClientTypes.MarketType.self, forKey: .market)
        market = marketDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let ebsVolumesContainer = try containerValues.decodeIfPresent([EMRClientTypes.EbsVolume?].self, forKey: .ebsVolumes)
        var ebsVolumesDecoded0:[EMRClientTypes.EbsVolume]? = nil
        if let ebsVolumesContainer = ebsVolumesContainer {
            ebsVolumesDecoded0 = [EMRClientTypes.EbsVolume]()
            for structure0 in ebsVolumesContainer {
                if let structure0 = structure0 {
                    ebsVolumesDecoded0?.append(structure0)
                }
            }
        }
        ebsVolumes = ebsVolumesDecoded0
    }
}

extension EMRClientTypes {
    /// Represents an EC2 instance provisioned as part of cluster.
    public struct Instance: Swift.Equatable {
        /// The list of Amazon EBS volumes that are attached to this instance.
        public var ebsVolumes: [EMRClientTypes.EbsVolume]?
        /// The unique identifier of the instance in Amazon EC2.
        public var ec2InstanceId: Swift.String?
        /// The unique identifier for the instance in Amazon EMR.
        public var id: Swift.String?
        /// The unique identifier of the instance fleet to which an EC2 instance belongs.
        public var instanceFleetId: Swift.String?
        /// The identifier of the instance group to which this instance belongs.
        public var instanceGroupId: Swift.String?
        /// The EC2 instance type, for example m3.xlarge.
        public var instanceType: Swift.String?
        /// The instance purchasing option. Valid values are ON_DEMAND or SPOT.
        public var market: EMRClientTypes.MarketType?
        /// The private DNS name of the instance.
        public var privateDnsName: Swift.String?
        /// The private IP address of the instance.
        public var privateIpAddress: Swift.String?
        /// The public DNS name of the instance.
        public var publicDnsName: Swift.String?
        /// The public IP address of the instance.
        public var publicIpAddress: Swift.String?
        /// The current status of the instance.
        public var status: EMRClientTypes.InstanceStatus?

        public init (
            ebsVolumes: [EMRClientTypes.EbsVolume]? = nil,
            ec2InstanceId: Swift.String? = nil,
            id: Swift.String? = nil,
            instanceFleetId: Swift.String? = nil,
            instanceGroupId: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            market: EMRClientTypes.MarketType? = nil,
            privateDnsName: Swift.String? = nil,
            privateIpAddress: Swift.String? = nil,
            publicDnsName: Swift.String? = nil,
            publicIpAddress: Swift.String? = nil,
            status: EMRClientTypes.InstanceStatus? = nil
        )
        {
            self.ebsVolumes = ebsVolumes
            self.ec2InstanceId = ec2InstanceId
            self.id = id
            self.instanceFleetId = instanceFleetId
            self.instanceGroupId = instanceGroupId
            self.instanceType = instanceType
            self.market = market
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
            self.publicDnsName = publicDnsName
            self.publicIpAddress = publicIpAddress
            self.status = status
        }
    }

}

extension EMRClientTypes {
    public enum InstanceCollectionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case instanceFleet
        case instanceGroup
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceCollectionType] {
            return [
                .instanceFleet,
                .instanceGroup,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .instanceFleet: return "INSTANCE_FLEET"
            case .instanceGroup: return "INSTANCE_GROUP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceCollectionType(rawValue: rawValue) ?? InstanceCollectionType.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.InstanceFleet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case instanceFleetType = "InstanceFleetType"
        case instanceTypeSpecifications = "InstanceTypeSpecifications"
        case launchSpecifications = "LaunchSpecifications"
        case name = "Name"
        case provisionedOnDemandCapacity = "ProvisionedOnDemandCapacity"
        case provisionedSpotCapacity = "ProvisionedSpotCapacity"
        case status = "Status"
        case targetOnDemandCapacity = "TargetOnDemandCapacity"
        case targetSpotCapacity = "TargetSpotCapacity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let instanceFleetType = self.instanceFleetType {
            try encodeContainer.encode(instanceFleetType.rawValue, forKey: .instanceFleetType)
        }
        if let instanceTypeSpecifications = instanceTypeSpecifications {
            var instanceTypeSpecificationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceTypeSpecifications)
            for instancetypespecification0 in instanceTypeSpecifications {
                try instanceTypeSpecificationsContainer.encode(instancetypespecification0)
            }
        }
        if let launchSpecifications = self.launchSpecifications {
            try encodeContainer.encode(launchSpecifications, forKey: .launchSpecifications)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let provisionedOnDemandCapacity = self.provisionedOnDemandCapacity {
            try encodeContainer.encode(provisionedOnDemandCapacity, forKey: .provisionedOnDemandCapacity)
        }
        if let provisionedSpotCapacity = self.provisionedSpotCapacity {
            try encodeContainer.encode(provisionedSpotCapacity, forKey: .provisionedSpotCapacity)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let targetOnDemandCapacity = self.targetOnDemandCapacity {
            try encodeContainer.encode(targetOnDemandCapacity, forKey: .targetOnDemandCapacity)
        }
        if let targetSpotCapacity = self.targetSpotCapacity {
            try encodeContainer.encode(targetSpotCapacity, forKey: .targetSpotCapacity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceFleetStatus.self, forKey: .status)
        status = statusDecoded
        let instanceFleetTypeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceFleetType.self, forKey: .instanceFleetType)
        instanceFleetType = instanceFleetTypeDecoded
        let targetOnDemandCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .targetOnDemandCapacity)
        targetOnDemandCapacity = targetOnDemandCapacityDecoded
        let targetSpotCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .targetSpotCapacity)
        targetSpotCapacity = targetSpotCapacityDecoded
        let provisionedOnDemandCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .provisionedOnDemandCapacity)
        provisionedOnDemandCapacity = provisionedOnDemandCapacityDecoded
        let provisionedSpotCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .provisionedSpotCapacity)
        provisionedSpotCapacity = provisionedSpotCapacityDecoded
        let instanceTypeSpecificationsContainer = try containerValues.decodeIfPresent([EMRClientTypes.InstanceTypeSpecification?].self, forKey: .instanceTypeSpecifications)
        var instanceTypeSpecificationsDecoded0:[EMRClientTypes.InstanceTypeSpecification]? = nil
        if let instanceTypeSpecificationsContainer = instanceTypeSpecificationsContainer {
            instanceTypeSpecificationsDecoded0 = [EMRClientTypes.InstanceTypeSpecification]()
            for structure0 in instanceTypeSpecificationsContainer {
                if let structure0 = structure0 {
                    instanceTypeSpecificationsDecoded0?.append(structure0)
                }
            }
        }
        instanceTypeSpecifications = instanceTypeSpecificationsDecoded0
        let launchSpecificationsDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceFleetProvisioningSpecifications.self, forKey: .launchSpecifications)
        launchSpecifications = launchSpecificationsDecoded
    }
}

extension EMRClientTypes {
    /// Describes an instance fleet, which is a group of EC2 instances that host a particular node type (master, core, or task) in an Amazon EMR cluster. Instance fleets can consist of a mix of instance types and On-Demand and Spot Instances, which are provisioned to meet a defined target capacity. The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.
    public struct InstanceFleet: Swift.Equatable {
        /// The unique identifier of the instance fleet.
        public var id: Swift.String?
        /// The node type that the instance fleet hosts. Valid values are MASTER, CORE, or TASK.
        public var instanceFleetType: EMRClientTypes.InstanceFleetType?
        /// An array of specifications for the instance types that comprise an instance fleet.
        public var instanceTypeSpecifications: [EMRClientTypes.InstanceTypeSpecification]?
        /// Describes the launch specification for an instance fleet.
        public var launchSpecifications: EMRClientTypes.InstanceFleetProvisioningSpecifications?
        /// A friendly name for the instance fleet.
        public var name: Swift.String?
        /// The number of On-Demand units that have been provisioned for the instance fleet to fulfill TargetOnDemandCapacity. This provisioned capacity might be less than or greater than TargetOnDemandCapacity.
        public var provisionedOnDemandCapacity: Swift.Int?
        /// The number of Spot units that have been provisioned for this instance fleet to fulfill TargetSpotCapacity. This provisioned capacity might be less than or greater than TargetSpotCapacity.
        public var provisionedSpotCapacity: Swift.Int?
        /// The current status of the instance fleet.
        public var status: EMRClientTypes.InstanceFleetStatus?
        /// The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand Instances to provision. When the instance fleet launches, Amazon EMR tries to provision On-Demand Instances as specified by [InstanceTypeConfig]. Each instance configuration has a specified WeightedCapacity. When an On-Demand Instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. You can use [InstanceFleet$ProvisionedOnDemandCapacity] to determine the Spot capacity units that have been provisioned for the instance fleet. If not specified or set to 0, only Spot Instances are provisioned for the instance fleet using TargetSpotCapacity. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1.
        public var targetOnDemandCapacity: Swift.Int?
        /// The target capacity of Spot units for the instance fleet, which determines how many Spot Instances to provision. When the instance fleet launches, Amazon EMR tries to provision Spot Instances as specified by [InstanceTypeConfig]. Each instance configuration has a specified WeightedCapacity. When a Spot instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. You can use [InstanceFleet$ProvisionedSpotCapacity] to determine the Spot capacity units that have been provisioned for the instance fleet. If not specified or set to 0, only On-Demand Instances are provisioned for the instance fleet. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1.
        public var targetSpotCapacity: Swift.Int?

        public init (
            id: Swift.String? = nil,
            instanceFleetType: EMRClientTypes.InstanceFleetType? = nil,
            instanceTypeSpecifications: [EMRClientTypes.InstanceTypeSpecification]? = nil,
            launchSpecifications: EMRClientTypes.InstanceFleetProvisioningSpecifications? = nil,
            name: Swift.String? = nil,
            provisionedOnDemandCapacity: Swift.Int? = nil,
            provisionedSpotCapacity: Swift.Int? = nil,
            status: EMRClientTypes.InstanceFleetStatus? = nil,
            targetOnDemandCapacity: Swift.Int? = nil,
            targetSpotCapacity: Swift.Int? = nil
        )
        {
            self.id = id
            self.instanceFleetType = instanceFleetType
            self.instanceTypeSpecifications = instanceTypeSpecifications
            self.launchSpecifications = launchSpecifications
            self.name = name
            self.provisionedOnDemandCapacity = provisionedOnDemandCapacity
            self.provisionedSpotCapacity = provisionedSpotCapacity
            self.status = status
            self.targetOnDemandCapacity = targetOnDemandCapacity
            self.targetSpotCapacity = targetSpotCapacity
        }
    }

}

extension EMRClientTypes.InstanceFleetConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceFleetType = "InstanceFleetType"
        case instanceTypeConfigs = "InstanceTypeConfigs"
        case launchSpecifications = "LaunchSpecifications"
        case name = "Name"
        case targetOnDemandCapacity = "TargetOnDemandCapacity"
        case targetSpotCapacity = "TargetSpotCapacity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceFleetType = self.instanceFleetType {
            try encodeContainer.encode(instanceFleetType.rawValue, forKey: .instanceFleetType)
        }
        if let instanceTypeConfigs = instanceTypeConfigs {
            var instanceTypeConfigsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceTypeConfigs)
            for instancetypeconfig0 in instanceTypeConfigs {
                try instanceTypeConfigsContainer.encode(instancetypeconfig0)
            }
        }
        if let launchSpecifications = self.launchSpecifications {
            try encodeContainer.encode(launchSpecifications, forKey: .launchSpecifications)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let targetOnDemandCapacity = self.targetOnDemandCapacity {
            try encodeContainer.encode(targetOnDemandCapacity, forKey: .targetOnDemandCapacity)
        }
        if let targetSpotCapacity = self.targetSpotCapacity {
            try encodeContainer.encode(targetSpotCapacity, forKey: .targetSpotCapacity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let instanceFleetTypeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceFleetType.self, forKey: .instanceFleetType)
        instanceFleetType = instanceFleetTypeDecoded
        let targetOnDemandCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .targetOnDemandCapacity)
        targetOnDemandCapacity = targetOnDemandCapacityDecoded
        let targetSpotCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .targetSpotCapacity)
        targetSpotCapacity = targetSpotCapacityDecoded
        let instanceTypeConfigsContainer = try containerValues.decodeIfPresent([EMRClientTypes.InstanceTypeConfig?].self, forKey: .instanceTypeConfigs)
        var instanceTypeConfigsDecoded0:[EMRClientTypes.InstanceTypeConfig]? = nil
        if let instanceTypeConfigsContainer = instanceTypeConfigsContainer {
            instanceTypeConfigsDecoded0 = [EMRClientTypes.InstanceTypeConfig]()
            for structure0 in instanceTypeConfigsContainer {
                if let structure0 = structure0 {
                    instanceTypeConfigsDecoded0?.append(structure0)
                }
            }
        }
        instanceTypeConfigs = instanceTypeConfigsDecoded0
        let launchSpecificationsDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceFleetProvisioningSpecifications.self, forKey: .launchSpecifications)
        launchSpecifications = launchSpecificationsDecoded
    }
}

extension EMRClientTypes {
    /// The configuration that defines an instance fleet. The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.
    public struct InstanceFleetConfig: Swift.Equatable {
        /// The node type that the instance fleet hosts. Valid values are MASTER, CORE, and TASK.
        /// This member is required.
        public var instanceFleetType: EMRClientTypes.InstanceFleetType?
        /// The instance type configurations that define the EC2 instances in the instance fleet.
        public var instanceTypeConfigs: [EMRClientTypes.InstanceTypeConfig]?
        /// The launch specification for the instance fleet.
        public var launchSpecifications: EMRClientTypes.InstanceFleetProvisioningSpecifications?
        /// The friendly name of the instance fleet.
        public var name: Swift.String?
        /// The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand Instances to provision. When the instance fleet launches, Amazon EMR tries to provision On-Demand Instances as specified by [InstanceTypeConfig]. Each instance configuration has a specified WeightedCapacity. When an On-Demand Instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. If not specified or set to 0, only Spot Instances are provisioned for the instance fleet using TargetSpotCapacity. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1.
        public var targetOnDemandCapacity: Swift.Int?
        /// The target capacity of Spot units for the instance fleet, which determines how many Spot Instances to provision. When the instance fleet launches, Amazon EMR tries to provision Spot Instances as specified by [InstanceTypeConfig]. Each instance configuration has a specified WeightedCapacity. When a Spot Instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. If not specified or set to 0, only On-Demand Instances are provisioned for the instance fleet. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1.
        public var targetSpotCapacity: Swift.Int?

        public init (
            instanceFleetType: EMRClientTypes.InstanceFleetType? = nil,
            instanceTypeConfigs: [EMRClientTypes.InstanceTypeConfig]? = nil,
            launchSpecifications: EMRClientTypes.InstanceFleetProvisioningSpecifications? = nil,
            name: Swift.String? = nil,
            targetOnDemandCapacity: Swift.Int? = nil,
            targetSpotCapacity: Swift.Int? = nil
        )
        {
            self.instanceFleetType = instanceFleetType
            self.instanceTypeConfigs = instanceTypeConfigs
            self.launchSpecifications = launchSpecifications
            self.name = name
            self.targetOnDemandCapacity = targetOnDemandCapacity
            self.targetSpotCapacity = targetSpotCapacity
        }
    }

}

extension EMRClientTypes.InstanceFleetModifyConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceFleetId = "InstanceFleetId"
        case targetOnDemandCapacity = "TargetOnDemandCapacity"
        case targetSpotCapacity = "TargetSpotCapacity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceFleetId = self.instanceFleetId {
            try encodeContainer.encode(instanceFleetId, forKey: .instanceFleetId)
        }
        if let targetOnDemandCapacity = self.targetOnDemandCapacity {
            try encodeContainer.encode(targetOnDemandCapacity, forKey: .targetOnDemandCapacity)
        }
        if let targetSpotCapacity = self.targetSpotCapacity {
            try encodeContainer.encode(targetSpotCapacity, forKey: .targetSpotCapacity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceFleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceFleetId)
        instanceFleetId = instanceFleetIdDecoded
        let targetOnDemandCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .targetOnDemandCapacity)
        targetOnDemandCapacity = targetOnDemandCapacityDecoded
        let targetSpotCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .targetSpotCapacity)
        targetSpotCapacity = targetSpotCapacityDecoded
    }
}

extension EMRClientTypes {
    /// Configuration parameters for an instance fleet modification request. The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.
    public struct InstanceFleetModifyConfig: Swift.Equatable {
        /// A unique identifier for the instance fleet.
        /// This member is required.
        public var instanceFleetId: Swift.String?
        /// The target capacity of On-Demand units for the instance fleet. For more information see [InstanceFleetConfig$TargetOnDemandCapacity].
        public var targetOnDemandCapacity: Swift.Int?
        /// The target capacity of Spot units for the instance fleet. For more information, see [InstanceFleetConfig$TargetSpotCapacity].
        public var targetSpotCapacity: Swift.Int?

        public init (
            instanceFleetId: Swift.String? = nil,
            targetOnDemandCapacity: Swift.Int? = nil,
            targetSpotCapacity: Swift.Int? = nil
        )
        {
            self.instanceFleetId = instanceFleetId
            self.targetOnDemandCapacity = targetOnDemandCapacity
            self.targetSpotCapacity = targetSpotCapacity
        }
    }

}

extension EMRClientTypes.InstanceFleetProvisioningSpecifications: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case onDemandSpecification = "OnDemandSpecification"
        case spotSpecification = "SpotSpecification"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let onDemandSpecification = self.onDemandSpecification {
            try encodeContainer.encode(onDemandSpecification, forKey: .onDemandSpecification)
        }
        if let spotSpecification = self.spotSpecification {
            try encodeContainer.encode(spotSpecification, forKey: .spotSpecification)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let spotSpecificationDecoded = try containerValues.decodeIfPresent(EMRClientTypes.SpotProvisioningSpecification.self, forKey: .spotSpecification)
        spotSpecification = spotSpecificationDecoded
        let onDemandSpecificationDecoded = try containerValues.decodeIfPresent(EMRClientTypes.OnDemandProvisioningSpecification.self, forKey: .onDemandSpecification)
        onDemandSpecification = onDemandSpecificationDecoded
    }
}

extension EMRClientTypes {
    /// The launch specification for Spot Instances in the fleet, which determines the defined duration, provisioning timeout behavior, and allocation strategy. The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions. On-Demand and Spot Instance allocation strategies are available in Amazon EMR version 5.12.1 and later.
    public struct InstanceFleetProvisioningSpecifications: Swift.Equatable {
        /// The launch specification for On-Demand Instances in the instance fleet, which determines the allocation strategy. The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions. On-Demand Instances allocation strategy is available in Amazon EMR version 5.12.1 and later.
        public var onDemandSpecification: EMRClientTypes.OnDemandProvisioningSpecification?
        /// The launch specification for Spot Instances in the fleet, which determines the defined duration, provisioning timeout behavior, and allocation strategy.
        public var spotSpecification: EMRClientTypes.SpotProvisioningSpecification?

        public init (
            onDemandSpecification: EMRClientTypes.OnDemandProvisioningSpecification? = nil,
            spotSpecification: EMRClientTypes.SpotProvisioningSpecification? = nil
        )
        {
            self.onDemandSpecification = onDemandSpecification
            self.spotSpecification = spotSpecification
        }
    }

}

extension EMRClientTypes {
    public enum InstanceFleetState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bootstrapping
        case provisioning
        case resizing
        case running
        case suspended
        case terminated
        case terminating
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceFleetState] {
            return [
                .bootstrapping,
                .provisioning,
                .resizing,
                .running,
                .suspended,
                .terminated,
                .terminating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bootstrapping: return "BOOTSTRAPPING"
            case .provisioning: return "PROVISIONING"
            case .resizing: return "RESIZING"
            case .running: return "RUNNING"
            case .suspended: return "SUSPENDED"
            case .terminated: return "TERMINATED"
            case .terminating: return "TERMINATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceFleetState(rawValue: rawValue) ?? InstanceFleetState.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.InstanceFleetStateChangeReason: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceFleetStateChangeReasonCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EMRClientTypes {
    /// Provides status change reason details for the instance fleet. The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.
    public struct InstanceFleetStateChangeReason: Swift.Equatable {
        /// A code corresponding to the reason the state change occurred.
        public var code: EMRClientTypes.InstanceFleetStateChangeReasonCode?
        /// An explanatory message.
        public var message: Swift.String?

        public init (
            code: EMRClientTypes.InstanceFleetStateChangeReasonCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension EMRClientTypes {
    public enum InstanceFleetStateChangeReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case clusterTerminated
        case instanceFailure
        case internalError
        case validationError
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceFleetStateChangeReasonCode] {
            return [
                .clusterTerminated,
                .instanceFailure,
                .internalError,
                .validationError,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .clusterTerminated: return "CLUSTER_TERMINATED"
            case .instanceFailure: return "INSTANCE_FAILURE"
            case .internalError: return "INTERNAL_ERROR"
            case .validationError: return "VALIDATION_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceFleetStateChangeReasonCode(rawValue: rawValue) ?? InstanceFleetStateChangeReasonCode.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.InstanceFleetStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case state = "State"
        case stateChangeReason = "StateChangeReason"
        case timeline = "Timeline"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateChangeReason = self.stateChangeReason {
            try encodeContainer.encode(stateChangeReason, forKey: .stateChangeReason)
        }
        if let timeline = self.timeline {
            try encodeContainer.encode(timeline, forKey: .timeline)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceFleetState.self, forKey: .state)
        state = stateDecoded
        let stateChangeReasonDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceFleetStateChangeReason.self, forKey: .stateChangeReason)
        stateChangeReason = stateChangeReasonDecoded
        let timelineDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceFleetTimeline.self, forKey: .timeline)
        timeline = timelineDecoded
    }
}

extension EMRClientTypes {
    /// The status of the instance fleet. The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.
    public struct InstanceFleetStatus: Swift.Equatable {
        /// A code representing the instance fleet status.
        ///
        /// * PROVISIONING—The instance fleet is provisioning EC2 resources and is not yet ready to run jobs.
        ///
        /// * BOOTSTRAPPING—EC2 instances and other resources have been provisioned and the bootstrap actions specified for the instances are underway.
        ///
        /// * RUNNING—EC2 instances and other resources are running. They are either executing jobs or waiting to execute jobs.
        ///
        /// * RESIZING—A resize operation is underway. EC2 instances are either being added or removed.
        ///
        /// * SUSPENDED—A resize operation could not complete. Existing EC2 instances are running, but instances can't be added or removed.
        ///
        /// * TERMINATING—The instance fleet is terminating EC2 instances.
        ///
        /// * TERMINATED—The instance fleet is no longer active, and all EC2 instances have been terminated.
        public var state: EMRClientTypes.InstanceFleetState?
        /// Provides status change reason details for the instance fleet.
        public var stateChangeReason: EMRClientTypes.InstanceFleetStateChangeReason?
        /// Provides historical timestamps for the instance fleet, including the time of creation, the time it became ready to run jobs, and the time of termination.
        public var timeline: EMRClientTypes.InstanceFleetTimeline?

        public init (
            state: EMRClientTypes.InstanceFleetState? = nil,
            stateChangeReason: EMRClientTypes.InstanceFleetStateChangeReason? = nil,
            timeline: EMRClientTypes.InstanceFleetTimeline? = nil
        )
        {
            self.state = state
            self.stateChangeReason = stateChangeReason
            self.timeline = timeline
        }
    }

}

extension EMRClientTypes.InstanceFleetTimeline: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDateTime = "CreationDateTime"
        case endDateTime = "EndDateTime"
        case readyDateTime = "ReadyDateTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDateTime = self.creationDateTime {
            try encodeContainer.encodeTimestamp(creationDateTime, format: .epochSeconds, forKey: .creationDateTime)
        }
        if let endDateTime = self.endDateTime {
            try encodeContainer.encodeTimestamp(endDateTime, format: .epochSeconds, forKey: .endDateTime)
        }
        if let readyDateTime = self.readyDateTime {
            try encodeContainer.encodeTimestamp(readyDateTime, format: .epochSeconds, forKey: .readyDateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let readyDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .readyDateTime)
        readyDateTime = readyDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
    }
}

extension EMRClientTypes {
    /// Provides historical timestamps for the instance fleet, including the time of creation, the time it became ready to run jobs, and the time of termination. The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.
    public struct InstanceFleetTimeline: Swift.Equatable {
        /// The time and date the instance fleet was created.
        public var creationDateTime: ClientRuntime.Date?
        /// The time and date the instance fleet terminated.
        public var endDateTime: ClientRuntime.Date?
        /// The time and date the instance fleet was ready to run jobs.
        public var readyDateTime: ClientRuntime.Date?

        public init (
            creationDateTime: ClientRuntime.Date? = nil,
            endDateTime: ClientRuntime.Date? = nil,
            readyDateTime: ClientRuntime.Date? = nil
        )
        {
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.readyDateTime = readyDateTime
        }
    }

}

extension EMRClientTypes {
    public enum InstanceFleetType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case core
        case master
        case task
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceFleetType] {
            return [
                .core,
                .master,
                .task,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .core: return "CORE"
            case .master: return "MASTER"
            case .task: return "TASK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceFleetType(rawValue: rawValue) ?? InstanceFleetType.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.InstanceGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingPolicy = "AutoScalingPolicy"
        case bidPrice = "BidPrice"
        case configurations = "Configurations"
        case configurationsVersion = "ConfigurationsVersion"
        case customAmiId = "CustomAmiId"
        case ebsBlockDevices = "EbsBlockDevices"
        case ebsOptimized = "EbsOptimized"
        case id = "Id"
        case instanceGroupType = "InstanceGroupType"
        case instanceType = "InstanceType"
        case lastSuccessfullyAppliedConfigurations = "LastSuccessfullyAppliedConfigurations"
        case lastSuccessfullyAppliedConfigurationsVersion = "LastSuccessfullyAppliedConfigurationsVersion"
        case market = "Market"
        case name = "Name"
        case requestedInstanceCount = "RequestedInstanceCount"
        case runningInstanceCount = "RunningInstanceCount"
        case shrinkPolicy = "ShrinkPolicy"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingPolicy = self.autoScalingPolicy {
            try encodeContainer.encode(autoScalingPolicy, forKey: .autoScalingPolicy)
        }
        if let bidPrice = self.bidPrice {
            try encodeContainer.encode(bidPrice, forKey: .bidPrice)
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configuration0 in configurations {
                try configurationsContainer.encode(configuration0)
            }
        }
        if configurationsVersion != 0 {
            try encodeContainer.encode(configurationsVersion, forKey: .configurationsVersion)
        }
        if let customAmiId = self.customAmiId {
            try encodeContainer.encode(customAmiId, forKey: .customAmiId)
        }
        if let ebsBlockDevices = ebsBlockDevices {
            var ebsBlockDevicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ebsBlockDevices)
            for ebsblockdevice0 in ebsBlockDevices {
                try ebsBlockDevicesContainer.encode(ebsblockdevice0)
            }
        }
        if let ebsOptimized = self.ebsOptimized {
            try encodeContainer.encode(ebsOptimized, forKey: .ebsOptimized)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let instanceGroupType = self.instanceGroupType {
            try encodeContainer.encode(instanceGroupType.rawValue, forKey: .instanceGroupType)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let lastSuccessfullyAppliedConfigurations = lastSuccessfullyAppliedConfigurations {
            var lastSuccessfullyAppliedConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lastSuccessfullyAppliedConfigurations)
            for configuration0 in lastSuccessfullyAppliedConfigurations {
                try lastSuccessfullyAppliedConfigurationsContainer.encode(configuration0)
            }
        }
        if lastSuccessfullyAppliedConfigurationsVersion != 0 {
            try encodeContainer.encode(lastSuccessfullyAppliedConfigurationsVersion, forKey: .lastSuccessfullyAppliedConfigurationsVersion)
        }
        if let market = self.market {
            try encodeContainer.encode(market.rawValue, forKey: .market)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let requestedInstanceCount = self.requestedInstanceCount {
            try encodeContainer.encode(requestedInstanceCount, forKey: .requestedInstanceCount)
        }
        if let runningInstanceCount = self.runningInstanceCount {
            try encodeContainer.encode(runningInstanceCount, forKey: .runningInstanceCount)
        }
        if let shrinkPolicy = self.shrinkPolicy {
            try encodeContainer.encode(shrinkPolicy, forKey: .shrinkPolicy)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let marketDecoded = try containerValues.decodeIfPresent(EMRClientTypes.MarketType.self, forKey: .market)
        market = marketDecoded
        let instanceGroupTypeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceGroupType.self, forKey: .instanceGroupType)
        instanceGroupType = instanceGroupTypeDecoded
        let bidPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bidPrice)
        bidPrice = bidPriceDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let requestedInstanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .requestedInstanceCount)
        requestedInstanceCount = requestedInstanceCountDecoded
        let runningInstanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .runningInstanceCount)
        runningInstanceCount = runningInstanceCountDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceGroupStatus.self, forKey: .status)
        status = statusDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([EMRClientTypes.Configuration?].self, forKey: .configurations)
        var configurationsDecoded0:[EMRClientTypes.Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [EMRClientTypes.Configuration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
        let configurationsVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .configurationsVersion) ?? 0
        configurationsVersion = configurationsVersionDecoded
        let lastSuccessfullyAppliedConfigurationsContainer = try containerValues.decodeIfPresent([EMRClientTypes.Configuration?].self, forKey: .lastSuccessfullyAppliedConfigurations)
        var lastSuccessfullyAppliedConfigurationsDecoded0:[EMRClientTypes.Configuration]? = nil
        if let lastSuccessfullyAppliedConfigurationsContainer = lastSuccessfullyAppliedConfigurationsContainer {
            lastSuccessfullyAppliedConfigurationsDecoded0 = [EMRClientTypes.Configuration]()
            for structure0 in lastSuccessfullyAppliedConfigurationsContainer {
                if let structure0 = structure0 {
                    lastSuccessfullyAppliedConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        lastSuccessfullyAppliedConfigurations = lastSuccessfullyAppliedConfigurationsDecoded0
        let lastSuccessfullyAppliedConfigurationsVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastSuccessfullyAppliedConfigurationsVersion) ?? 0
        lastSuccessfullyAppliedConfigurationsVersion = lastSuccessfullyAppliedConfigurationsVersionDecoded
        let ebsBlockDevicesContainer = try containerValues.decodeIfPresent([EMRClientTypes.EbsBlockDevice?].self, forKey: .ebsBlockDevices)
        var ebsBlockDevicesDecoded0:[EMRClientTypes.EbsBlockDevice]? = nil
        if let ebsBlockDevicesContainer = ebsBlockDevicesContainer {
            ebsBlockDevicesDecoded0 = [EMRClientTypes.EbsBlockDevice]()
            for structure0 in ebsBlockDevicesContainer {
                if let structure0 = structure0 {
                    ebsBlockDevicesDecoded0?.append(structure0)
                }
            }
        }
        ebsBlockDevices = ebsBlockDevicesDecoded0
        let ebsOptimizedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ebsOptimized)
        ebsOptimized = ebsOptimizedDecoded
        let shrinkPolicyDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ShrinkPolicy.self, forKey: .shrinkPolicy)
        shrinkPolicy = shrinkPolicyDecoded
        let autoScalingPolicyDecoded = try containerValues.decodeIfPresent(EMRClientTypes.AutoScalingPolicyDescription.self, forKey: .autoScalingPolicy)
        autoScalingPolicy = autoScalingPolicyDecoded
        let customAmiIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customAmiId)
        customAmiId = customAmiIdDecoded
    }
}

extension EMRClientTypes {
    /// This entity represents an instance group, which is a group of instances that have common purpose. For example, CORE instance group is used for HDFS.
    public struct InstanceGroup: Swift.Equatable {
        /// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. See PutAutoScalingPolicy.
        public var autoScalingPolicy: EMRClientTypes.AutoScalingPolicyDescription?
        /// If specified, indicates that the instance group uses Spot Instances. This is the maximum price you are willing to pay for Spot Instances. Specify OnDemandPrice to set the amount equal to the On-Demand price, or specify an amount in USD.
        public var bidPrice: Swift.String?
        /// Amazon EMR releases 4.x or later. The list of configurations supplied for an Amazon EMR cluster instance group. You can specify a separate configuration for each instance group (master, core, and task).
        public var configurations: [EMRClientTypes.Configuration]?
        /// The version number of the requested configuration specification for this instance group.
        public var configurationsVersion: Swift.Int
        /// The custom AMI ID to use for the provisioned instance group.
        public var customAmiId: Swift.String?
        /// The EBS block devices that are mapped to this instance group.
        public var ebsBlockDevices: [EMRClientTypes.EbsBlockDevice]?
        /// If the instance group is EBS-optimized. An Amazon EBS-optimized instance uses an optimized configuration stack and provides additional, dedicated capacity for Amazon EBS I/O.
        public var ebsOptimized: Swift.Bool?
        /// The identifier of the instance group.
        public var id: Swift.String?
        /// The type of the instance group. Valid values are MASTER, CORE or TASK.
        public var instanceGroupType: EMRClientTypes.InstanceGroupType?
        /// The EC2 instance type for all instances in the instance group.
        public var instanceType: Swift.String?
        /// A list of configurations that were successfully applied for an instance group last time.
        public var lastSuccessfullyAppliedConfigurations: [EMRClientTypes.Configuration]?
        /// The version number of a configuration specification that was successfully applied for an instance group last time.
        public var lastSuccessfullyAppliedConfigurationsVersion: Swift.Int
        /// The marketplace to provision instances for this group. Valid values are ON_DEMAND or SPOT.
        public var market: EMRClientTypes.MarketType?
        /// The name of the instance group.
        public var name: Swift.String?
        /// The target number of instances for the instance group.
        public var requestedInstanceCount: Swift.Int?
        /// The number of instances currently running in this instance group.
        public var runningInstanceCount: Swift.Int?
        /// Policy for customizing shrink operations.
        public var shrinkPolicy: EMRClientTypes.ShrinkPolicy?
        /// The current status of the instance group.
        public var status: EMRClientTypes.InstanceGroupStatus?

        public init (
            autoScalingPolicy: EMRClientTypes.AutoScalingPolicyDescription? = nil,
            bidPrice: Swift.String? = nil,
            configurations: [EMRClientTypes.Configuration]? = nil,
            configurationsVersion: Swift.Int = 0,
            customAmiId: Swift.String? = nil,
            ebsBlockDevices: [EMRClientTypes.EbsBlockDevice]? = nil,
            ebsOptimized: Swift.Bool? = nil,
            id: Swift.String? = nil,
            instanceGroupType: EMRClientTypes.InstanceGroupType? = nil,
            instanceType: Swift.String? = nil,
            lastSuccessfullyAppliedConfigurations: [EMRClientTypes.Configuration]? = nil,
            lastSuccessfullyAppliedConfigurationsVersion: Swift.Int = 0,
            market: EMRClientTypes.MarketType? = nil,
            name: Swift.String? = nil,
            requestedInstanceCount: Swift.Int? = nil,
            runningInstanceCount: Swift.Int? = nil,
            shrinkPolicy: EMRClientTypes.ShrinkPolicy? = nil,
            status: EMRClientTypes.InstanceGroupStatus? = nil
        )
        {
            self.autoScalingPolicy = autoScalingPolicy
            self.bidPrice = bidPrice
            self.configurations = configurations
            self.configurationsVersion = configurationsVersion
            self.customAmiId = customAmiId
            self.ebsBlockDevices = ebsBlockDevices
            self.ebsOptimized = ebsOptimized
            self.id = id
            self.instanceGroupType = instanceGroupType
            self.instanceType = instanceType
            self.lastSuccessfullyAppliedConfigurations = lastSuccessfullyAppliedConfigurations
            self.lastSuccessfullyAppliedConfigurationsVersion = lastSuccessfullyAppliedConfigurationsVersion
            self.market = market
            self.name = name
            self.requestedInstanceCount = requestedInstanceCount
            self.runningInstanceCount = runningInstanceCount
            self.shrinkPolicy = shrinkPolicy
            self.status = status
        }
    }

}

extension EMRClientTypes.InstanceGroupConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingPolicy = "AutoScalingPolicy"
        case bidPrice = "BidPrice"
        case configurations = "Configurations"
        case customAmiId = "CustomAmiId"
        case ebsConfiguration = "EbsConfiguration"
        case instanceCount = "InstanceCount"
        case instanceRole = "InstanceRole"
        case instanceType = "InstanceType"
        case market = "Market"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingPolicy = self.autoScalingPolicy {
            try encodeContainer.encode(autoScalingPolicy, forKey: .autoScalingPolicy)
        }
        if let bidPrice = self.bidPrice {
            try encodeContainer.encode(bidPrice, forKey: .bidPrice)
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configuration0 in configurations {
                try configurationsContainer.encode(configuration0)
            }
        }
        if let customAmiId = self.customAmiId {
            try encodeContainer.encode(customAmiId, forKey: .customAmiId)
        }
        if let ebsConfiguration = self.ebsConfiguration {
            try encodeContainer.encode(ebsConfiguration, forKey: .ebsConfiguration)
        }
        if let instanceCount = self.instanceCount {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceRole = self.instanceRole {
            try encodeContainer.encode(instanceRole.rawValue, forKey: .instanceRole)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let market = self.market {
            try encodeContainer.encode(market.rawValue, forKey: .market)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let marketDecoded = try containerValues.decodeIfPresent(EMRClientTypes.MarketType.self, forKey: .market)
        market = marketDecoded
        let instanceRoleDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceRoleType.self, forKey: .instanceRole)
        instanceRole = instanceRoleDecoded
        let bidPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bidPrice)
        bidPrice = bidPriceDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([EMRClientTypes.Configuration?].self, forKey: .configurations)
        var configurationsDecoded0:[EMRClientTypes.Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [EMRClientTypes.Configuration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
        let ebsConfigurationDecoded = try containerValues.decodeIfPresent(EMRClientTypes.EbsConfiguration.self, forKey: .ebsConfiguration)
        ebsConfiguration = ebsConfigurationDecoded
        let autoScalingPolicyDecoded = try containerValues.decodeIfPresent(EMRClientTypes.AutoScalingPolicy.self, forKey: .autoScalingPolicy)
        autoScalingPolicy = autoScalingPolicyDecoded
        let customAmiIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customAmiId)
        customAmiId = customAmiIdDecoded
    }
}

extension EMRClientTypes {
    /// Configuration defining a new instance group.
    public struct InstanceGroupConfig: Swift.Equatable {
        /// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. See [PutAutoScalingPolicy].
        public var autoScalingPolicy: EMRClientTypes.AutoScalingPolicy?
        /// If specified, indicates that the instance group uses Spot Instances. This is the maximum price you are willing to pay for Spot Instances. Specify OnDemandPrice to set the amount equal to the On-Demand price, or specify an amount in USD.
        public var bidPrice: Swift.String?
        /// Amazon EMR releases 4.x or later. The list of configurations supplied for an EMR cluster instance group. You can specify a separate configuration for each instance group (master, core, and task).
        public var configurations: [EMRClientTypes.Configuration]?
        /// The custom AMI ID to use for the provisioned instance group.
        public var customAmiId: Swift.String?
        /// EBS configurations that will be attached to each EC2 instance in the instance group.
        public var ebsConfiguration: EMRClientTypes.EbsConfiguration?
        /// Target number of instances for the instance group.
        /// This member is required.
        public var instanceCount: Swift.Int?
        /// The role of the instance group in the cluster.
        /// This member is required.
        public var instanceRole: EMRClientTypes.InstanceRoleType?
        /// The EC2 instance type for all instances in the instance group.
        /// This member is required.
        public var instanceType: Swift.String?
        /// Market type of the EC2 instances used to create a cluster node.
        public var market: EMRClientTypes.MarketType?
        /// Friendly name given to the instance group.
        public var name: Swift.String?

        public init (
            autoScalingPolicy: EMRClientTypes.AutoScalingPolicy? = nil,
            bidPrice: Swift.String? = nil,
            configurations: [EMRClientTypes.Configuration]? = nil,
            customAmiId: Swift.String? = nil,
            ebsConfiguration: EMRClientTypes.EbsConfiguration? = nil,
            instanceCount: Swift.Int? = nil,
            instanceRole: EMRClientTypes.InstanceRoleType? = nil,
            instanceType: Swift.String? = nil,
            market: EMRClientTypes.MarketType? = nil,
            name: Swift.String? = nil
        )
        {
            self.autoScalingPolicy = autoScalingPolicy
            self.bidPrice = bidPrice
            self.configurations = configurations
            self.customAmiId = customAmiId
            self.ebsConfiguration = ebsConfiguration
            self.instanceCount = instanceCount
            self.instanceRole = instanceRole
            self.instanceType = instanceType
            self.market = market
            self.name = name
        }
    }

}

extension EMRClientTypes.InstanceGroupDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bidPrice = "BidPrice"
        case creationDateTime = "CreationDateTime"
        case customAmiId = "CustomAmiId"
        case endDateTime = "EndDateTime"
        case instanceGroupId = "InstanceGroupId"
        case instanceRequestCount = "InstanceRequestCount"
        case instanceRole = "InstanceRole"
        case instanceRunningCount = "InstanceRunningCount"
        case instanceType = "InstanceType"
        case lastStateChangeReason = "LastStateChangeReason"
        case market = "Market"
        case name = "Name"
        case readyDateTime = "ReadyDateTime"
        case startDateTime = "StartDateTime"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bidPrice = self.bidPrice {
            try encodeContainer.encode(bidPrice, forKey: .bidPrice)
        }
        if let creationDateTime = self.creationDateTime {
            try encodeContainer.encodeTimestamp(creationDateTime, format: .epochSeconds, forKey: .creationDateTime)
        }
        if let customAmiId = self.customAmiId {
            try encodeContainer.encode(customAmiId, forKey: .customAmiId)
        }
        if let endDateTime = self.endDateTime {
            try encodeContainer.encodeTimestamp(endDateTime, format: .epochSeconds, forKey: .endDateTime)
        }
        if let instanceGroupId = self.instanceGroupId {
            try encodeContainer.encode(instanceGroupId, forKey: .instanceGroupId)
        }
        if let instanceRequestCount = self.instanceRequestCount {
            try encodeContainer.encode(instanceRequestCount, forKey: .instanceRequestCount)
        }
        if let instanceRole = self.instanceRole {
            try encodeContainer.encode(instanceRole.rawValue, forKey: .instanceRole)
        }
        if let instanceRunningCount = self.instanceRunningCount {
            try encodeContainer.encode(instanceRunningCount, forKey: .instanceRunningCount)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let lastStateChangeReason = self.lastStateChangeReason {
            try encodeContainer.encode(lastStateChangeReason, forKey: .lastStateChangeReason)
        }
        if let market = self.market {
            try encodeContainer.encode(market.rawValue, forKey: .market)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let readyDateTime = self.readyDateTime {
            try encodeContainer.encodeTimestamp(readyDateTime, format: .epochSeconds, forKey: .readyDateTime)
        }
        if let startDateTime = self.startDateTime {
            try encodeContainer.encodeTimestamp(startDateTime, format: .epochSeconds, forKey: .startDateTime)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceGroupId)
        instanceGroupId = instanceGroupIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let marketDecoded = try containerValues.decodeIfPresent(EMRClientTypes.MarketType.self, forKey: .market)
        market = marketDecoded
        let instanceRoleDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceRoleType.self, forKey: .instanceRole)
        instanceRole = instanceRoleDecoded
        let bidPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bidPrice)
        bidPrice = bidPriceDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let instanceRequestCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceRequestCount)
        instanceRequestCount = instanceRequestCountDecoded
        let instanceRunningCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceRunningCount)
        instanceRunningCount = instanceRunningCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceGroupState.self, forKey: .state)
        state = stateDecoded
        let lastStateChangeReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastStateChangeReason)
        lastStateChangeReason = lastStateChangeReasonDecoded
        let creationDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let startDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startDateTime)
        startDateTime = startDateTimeDecoded
        let readyDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .readyDateTime)
        readyDateTime = readyDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
        let customAmiIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customAmiId)
        customAmiId = customAmiIdDecoded
    }
}

extension EMRClientTypes {
    /// Detailed information about an instance group.
    public struct InstanceGroupDetail: Swift.Equatable {
        /// If specified, indicates that the instance group uses Spot Instances. This is the maximum price you are willing to pay for Spot Instances. Specify OnDemandPrice to set the amount equal to the On-Demand price, or specify an amount in USD.
        public var bidPrice: Swift.String?
        /// The date/time the instance group was created.
        /// This member is required.
        public var creationDateTime: ClientRuntime.Date?
        /// The custom AMI ID to use for the provisioned instance group.
        public var customAmiId: Swift.String?
        /// The date/time the instance group was terminated.
        public var endDateTime: ClientRuntime.Date?
        /// Unique identifier for the instance group.
        public var instanceGroupId: Swift.String?
        /// Target number of instances to run in the instance group.
        /// This member is required.
        public var instanceRequestCount: Swift.Int?
        /// Instance group role in the cluster
        /// This member is required.
        public var instanceRole: EMRClientTypes.InstanceRoleType?
        /// Actual count of running instances.
        /// This member is required.
        public var instanceRunningCount: Swift.Int?
        /// EC2 instance type.
        /// This member is required.
        public var instanceType: Swift.String?
        /// Details regarding the state of the instance group.
        public var lastStateChangeReason: Swift.String?
        /// Market type of the EC2 instances used to create a cluster node.
        /// This member is required.
        public var market: EMRClientTypes.MarketType?
        /// Friendly name for the instance group.
        public var name: Swift.String?
        /// The date/time the instance group was available to the cluster.
        public var readyDateTime: ClientRuntime.Date?
        /// The date/time the instance group was started.
        public var startDateTime: ClientRuntime.Date?
        /// State of instance group. The following values are no longer supported: STARTING, TERMINATED, and FAILED.
        /// This member is required.
        public var state: EMRClientTypes.InstanceGroupState?

        public init (
            bidPrice: Swift.String? = nil,
            creationDateTime: ClientRuntime.Date? = nil,
            customAmiId: Swift.String? = nil,
            endDateTime: ClientRuntime.Date? = nil,
            instanceGroupId: Swift.String? = nil,
            instanceRequestCount: Swift.Int? = nil,
            instanceRole: EMRClientTypes.InstanceRoleType? = nil,
            instanceRunningCount: Swift.Int? = nil,
            instanceType: Swift.String? = nil,
            lastStateChangeReason: Swift.String? = nil,
            market: EMRClientTypes.MarketType? = nil,
            name: Swift.String? = nil,
            readyDateTime: ClientRuntime.Date? = nil,
            startDateTime: ClientRuntime.Date? = nil,
            state: EMRClientTypes.InstanceGroupState? = nil
        )
        {
            self.bidPrice = bidPrice
            self.creationDateTime = creationDateTime
            self.customAmiId = customAmiId
            self.endDateTime = endDateTime
            self.instanceGroupId = instanceGroupId
            self.instanceRequestCount = instanceRequestCount
            self.instanceRole = instanceRole
            self.instanceRunningCount = instanceRunningCount
            self.instanceType = instanceType
            self.lastStateChangeReason = lastStateChangeReason
            self.market = market
            self.name = name
            self.readyDateTime = readyDateTime
            self.startDateTime = startDateTime
            self.state = state
        }
    }

}

extension EMRClientTypes.InstanceGroupModifyConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurations = "Configurations"
        case ec2InstanceIdsToTerminate = "EC2InstanceIdsToTerminate"
        case instanceCount = "InstanceCount"
        case instanceGroupId = "InstanceGroupId"
        case reconfigurationType = "ReconfigurationType"
        case shrinkPolicy = "ShrinkPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configuration0 in configurations {
                try configurationsContainer.encode(configuration0)
            }
        }
        if let ec2InstanceIdsToTerminate = ec2InstanceIdsToTerminate {
            var ec2InstanceIdsToTerminateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2InstanceIdsToTerminate)
            for instanceid0 in ec2InstanceIdsToTerminate {
                try ec2InstanceIdsToTerminateContainer.encode(instanceid0)
            }
        }
        if let instanceCount = self.instanceCount {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceGroupId = self.instanceGroupId {
            try encodeContainer.encode(instanceGroupId, forKey: .instanceGroupId)
        }
        if let reconfigurationType = self.reconfigurationType {
            try encodeContainer.encode(reconfigurationType.rawValue, forKey: .reconfigurationType)
        }
        if let shrinkPolicy = self.shrinkPolicy {
            try encodeContainer.encode(shrinkPolicy, forKey: .shrinkPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceGroupId)
        instanceGroupId = instanceGroupIdDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let ec2InstanceIdsToTerminateContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ec2InstanceIdsToTerminate)
        var ec2InstanceIdsToTerminateDecoded0:[Swift.String]? = nil
        if let ec2InstanceIdsToTerminateContainer = ec2InstanceIdsToTerminateContainer {
            ec2InstanceIdsToTerminateDecoded0 = [Swift.String]()
            for string0 in ec2InstanceIdsToTerminateContainer {
                if let string0 = string0 {
                    ec2InstanceIdsToTerminateDecoded0?.append(string0)
                }
            }
        }
        ec2InstanceIdsToTerminate = ec2InstanceIdsToTerminateDecoded0
        let shrinkPolicyDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ShrinkPolicy.self, forKey: .shrinkPolicy)
        shrinkPolicy = shrinkPolicyDecoded
        let reconfigurationTypeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ReconfigurationType.self, forKey: .reconfigurationType)
        reconfigurationType = reconfigurationTypeDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([EMRClientTypes.Configuration?].self, forKey: .configurations)
        var configurationsDecoded0:[EMRClientTypes.Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [EMRClientTypes.Configuration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
    }
}

extension EMRClientTypes {
    /// Modify the size or configurations of an instance group.
    public struct InstanceGroupModifyConfig: Swift.Equatable {
        /// A list of new or modified configurations to apply for an instance group.
        public var configurations: [EMRClientTypes.Configuration]?
        /// The EC2 InstanceIds to terminate. After you terminate the instances, the instance group will not return to its original requested size.
        public var ec2InstanceIdsToTerminate: [Swift.String]?
        /// Target size for the instance group.
        public var instanceCount: Swift.Int?
        /// Unique ID of the instance group to modify.
        /// This member is required.
        public var instanceGroupId: Swift.String?
        /// Type of reconfiguration requested. Valid values are MERGE and OVERWRITE.
        public var reconfigurationType: EMRClientTypes.ReconfigurationType?
        /// Policy for customizing shrink operations.
        public var shrinkPolicy: EMRClientTypes.ShrinkPolicy?

        public init (
            configurations: [EMRClientTypes.Configuration]? = nil,
            ec2InstanceIdsToTerminate: [Swift.String]? = nil,
            instanceCount: Swift.Int? = nil,
            instanceGroupId: Swift.String? = nil,
            reconfigurationType: EMRClientTypes.ReconfigurationType? = nil,
            shrinkPolicy: EMRClientTypes.ShrinkPolicy? = nil
        )
        {
            self.configurations = configurations
            self.ec2InstanceIdsToTerminate = ec2InstanceIdsToTerminate
            self.instanceCount = instanceCount
            self.instanceGroupId = instanceGroupId
            self.reconfigurationType = reconfigurationType
            self.shrinkPolicy = shrinkPolicy
        }
    }

}

extension EMRClientTypes {
    public enum InstanceGroupState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case arrested
        case bootstrapping
        case ended
        case provisioning
        case reconfiguring
        case resizing
        case running
        case shuttingDown
        case suspended
        case terminated
        case terminating
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceGroupState] {
            return [
                .arrested,
                .bootstrapping,
                .ended,
                .provisioning,
                .reconfiguring,
                .resizing,
                .running,
                .shuttingDown,
                .suspended,
                .terminated,
                .terminating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .arrested: return "ARRESTED"
            case .bootstrapping: return "BOOTSTRAPPING"
            case .ended: return "ENDED"
            case .provisioning: return "PROVISIONING"
            case .reconfiguring: return "RECONFIGURING"
            case .resizing: return "RESIZING"
            case .running: return "RUNNING"
            case .shuttingDown: return "SHUTTING_DOWN"
            case .suspended: return "SUSPENDED"
            case .terminated: return "TERMINATED"
            case .terminating: return "TERMINATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceGroupState(rawValue: rawValue) ?? InstanceGroupState.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.InstanceGroupStateChangeReason: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceGroupStateChangeReasonCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EMRClientTypes {
    /// The status change reason details for the instance group.
    public struct InstanceGroupStateChangeReason: Swift.Equatable {
        /// The programmable code for the state change reason.
        public var code: EMRClientTypes.InstanceGroupStateChangeReasonCode?
        /// The status change reason description.
        public var message: Swift.String?

        public init (
            code: EMRClientTypes.InstanceGroupStateChangeReasonCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension EMRClientTypes {
    public enum InstanceGroupStateChangeReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case clusterTerminated
        case instanceFailure
        case internalError
        case validationError
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceGroupStateChangeReasonCode] {
            return [
                .clusterTerminated,
                .instanceFailure,
                .internalError,
                .validationError,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .clusterTerminated: return "CLUSTER_TERMINATED"
            case .instanceFailure: return "INSTANCE_FAILURE"
            case .internalError: return "INTERNAL_ERROR"
            case .validationError: return "VALIDATION_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceGroupStateChangeReasonCode(rawValue: rawValue) ?? InstanceGroupStateChangeReasonCode.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.InstanceGroupStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case state = "State"
        case stateChangeReason = "StateChangeReason"
        case timeline = "Timeline"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateChangeReason = self.stateChangeReason {
            try encodeContainer.encode(stateChangeReason, forKey: .stateChangeReason)
        }
        if let timeline = self.timeline {
            try encodeContainer.encode(timeline, forKey: .timeline)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceGroupState.self, forKey: .state)
        state = stateDecoded
        let stateChangeReasonDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceGroupStateChangeReason.self, forKey: .stateChangeReason)
        stateChangeReason = stateChangeReasonDecoded
        let timelineDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceGroupTimeline.self, forKey: .timeline)
        timeline = timelineDecoded
    }
}

extension EMRClientTypes {
    /// The details of the instance group status.
    public struct InstanceGroupStatus: Swift.Equatable {
        /// The current state of the instance group.
        public var state: EMRClientTypes.InstanceGroupState?
        /// The status change reason details for the instance group.
        public var stateChangeReason: EMRClientTypes.InstanceGroupStateChangeReason?
        /// The timeline of the instance group status over time.
        public var timeline: EMRClientTypes.InstanceGroupTimeline?

        public init (
            state: EMRClientTypes.InstanceGroupState? = nil,
            stateChangeReason: EMRClientTypes.InstanceGroupStateChangeReason? = nil,
            timeline: EMRClientTypes.InstanceGroupTimeline? = nil
        )
        {
            self.state = state
            self.stateChangeReason = stateChangeReason
            self.timeline = timeline
        }
    }

}

extension EMRClientTypes.InstanceGroupTimeline: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDateTime = "CreationDateTime"
        case endDateTime = "EndDateTime"
        case readyDateTime = "ReadyDateTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDateTime = self.creationDateTime {
            try encodeContainer.encodeTimestamp(creationDateTime, format: .epochSeconds, forKey: .creationDateTime)
        }
        if let endDateTime = self.endDateTime {
            try encodeContainer.encodeTimestamp(endDateTime, format: .epochSeconds, forKey: .endDateTime)
        }
        if let readyDateTime = self.readyDateTime {
            try encodeContainer.encodeTimestamp(readyDateTime, format: .epochSeconds, forKey: .readyDateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let readyDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .readyDateTime)
        readyDateTime = readyDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
    }
}

extension EMRClientTypes {
    /// The timeline of the instance group lifecycle.
    public struct InstanceGroupTimeline: Swift.Equatable {
        /// The creation date and time of the instance group.
        public var creationDateTime: ClientRuntime.Date?
        /// The date and time when the instance group terminated.
        public var endDateTime: ClientRuntime.Date?
        /// The date and time when the instance group became ready to perform tasks.
        public var readyDateTime: ClientRuntime.Date?

        public init (
            creationDateTime: ClientRuntime.Date? = nil,
            endDateTime: ClientRuntime.Date? = nil,
            readyDateTime: ClientRuntime.Date? = nil
        )
        {
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.readyDateTime = readyDateTime
        }
    }

}

extension EMRClientTypes {
    public enum InstanceGroupType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case core
        case master
        case task
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceGroupType] {
            return [
                .core,
                .master,
                .task,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .core: return "CORE"
            case .master: return "MASTER"
            case .task: return "TASK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceGroupType(rawValue: rawValue) ?? InstanceGroupType.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.InstanceResizePolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceTerminationTimeout = "InstanceTerminationTimeout"
        case instancesToProtect = "InstancesToProtect"
        case instancesToTerminate = "InstancesToTerminate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceTerminationTimeout = self.instanceTerminationTimeout {
            try encodeContainer.encode(instanceTerminationTimeout, forKey: .instanceTerminationTimeout)
        }
        if let instancesToProtect = instancesToProtect {
            var instancesToProtectContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instancesToProtect)
            for instanceid0 in instancesToProtect {
                try instancesToProtectContainer.encode(instanceid0)
            }
        }
        if let instancesToTerminate = instancesToTerminate {
            var instancesToTerminateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instancesToTerminate)
            for instanceid0 in instancesToTerminate {
                try instancesToTerminateContainer.encode(instanceid0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instancesToTerminateContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instancesToTerminate)
        var instancesToTerminateDecoded0:[Swift.String]? = nil
        if let instancesToTerminateContainer = instancesToTerminateContainer {
            instancesToTerminateDecoded0 = [Swift.String]()
            for string0 in instancesToTerminateContainer {
                if let string0 = string0 {
                    instancesToTerminateDecoded0?.append(string0)
                }
            }
        }
        instancesToTerminate = instancesToTerminateDecoded0
        let instancesToProtectContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instancesToProtect)
        var instancesToProtectDecoded0:[Swift.String]? = nil
        if let instancesToProtectContainer = instancesToProtectContainer {
            instancesToProtectDecoded0 = [Swift.String]()
            for string0 in instancesToProtectContainer {
                if let string0 = string0 {
                    instancesToProtectDecoded0?.append(string0)
                }
            }
        }
        instancesToProtect = instancesToProtectDecoded0
        let instanceTerminationTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceTerminationTimeout)
        instanceTerminationTimeout = instanceTerminationTimeoutDecoded
    }
}

extension EMRClientTypes {
    /// Custom policy for requesting termination protection or termination of specific instances when shrinking an instance group.
    public struct InstanceResizePolicy: Swift.Equatable {
        /// Decommissioning timeout override for the specific list of instances to be terminated.
        public var instanceTerminationTimeout: Swift.Int?
        /// Specific list of instances to be protected when shrinking an instance group.
        public var instancesToProtect: [Swift.String]?
        /// Specific list of instances to be terminated when shrinking an instance group.
        public var instancesToTerminate: [Swift.String]?

        public init (
            instanceTerminationTimeout: Swift.Int? = nil,
            instancesToProtect: [Swift.String]? = nil,
            instancesToTerminate: [Swift.String]? = nil
        )
        {
            self.instanceTerminationTimeout = instanceTerminationTimeout
            self.instancesToProtect = instancesToProtect
            self.instancesToTerminate = instancesToTerminate
        }
    }

}

extension EMRClientTypes {
    public enum InstanceRoleType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case core
        case master
        case task
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceRoleType] {
            return [
                .core,
                .master,
                .task,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .core: return "CORE"
            case .master: return "MASTER"
            case .task: return "TASK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceRoleType(rawValue: rawValue) ?? InstanceRoleType.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes {
    public enum InstanceState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awaitingFulfillment
        case bootstrapping
        case provisioning
        case running
        case terminated
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceState] {
            return [
                .awaitingFulfillment,
                .bootstrapping,
                .provisioning,
                .running,
                .terminated,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awaitingFulfillment: return "AWAITING_FULFILLMENT"
            case .bootstrapping: return "BOOTSTRAPPING"
            case .provisioning: return "PROVISIONING"
            case .running: return "RUNNING"
            case .terminated: return "TERMINATED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceState(rawValue: rawValue) ?? InstanceState.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.InstanceStateChangeReason: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceStateChangeReasonCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EMRClientTypes {
    /// The details of the status change reason for the instance.
    public struct InstanceStateChangeReason: Swift.Equatable {
        /// The programmable code for the state change reason.
        public var code: EMRClientTypes.InstanceStateChangeReasonCode?
        /// The status change reason description.
        public var message: Swift.String?

        public init (
            code: EMRClientTypes.InstanceStateChangeReasonCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension EMRClientTypes {
    public enum InstanceStateChangeReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bootstrapFailure
        case clusterTerminated
        case instanceFailure
        case internalError
        case validationError
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceStateChangeReasonCode] {
            return [
                .bootstrapFailure,
                .clusterTerminated,
                .instanceFailure,
                .internalError,
                .validationError,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bootstrapFailure: return "BOOTSTRAP_FAILURE"
            case .clusterTerminated: return "CLUSTER_TERMINATED"
            case .instanceFailure: return "INSTANCE_FAILURE"
            case .internalError: return "INTERNAL_ERROR"
            case .validationError: return "VALIDATION_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceStateChangeReasonCode(rawValue: rawValue) ?? InstanceStateChangeReasonCode.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.InstanceStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case state = "State"
        case stateChangeReason = "StateChangeReason"
        case timeline = "Timeline"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateChangeReason = self.stateChangeReason {
            try encodeContainer.encode(stateChangeReason, forKey: .stateChangeReason)
        }
        if let timeline = self.timeline {
            try encodeContainer.encode(timeline, forKey: .timeline)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceState.self, forKey: .state)
        state = stateDecoded
        let stateChangeReasonDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceStateChangeReason.self, forKey: .stateChangeReason)
        stateChangeReason = stateChangeReasonDecoded
        let timelineDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceTimeline.self, forKey: .timeline)
        timeline = timelineDecoded
    }
}

extension EMRClientTypes {
    /// The instance status details.
    public struct InstanceStatus: Swift.Equatable {
        /// The current state of the instance.
        public var state: EMRClientTypes.InstanceState?
        /// The details of the status change reason for the instance.
        public var stateChangeReason: EMRClientTypes.InstanceStateChangeReason?
        /// The timeline of the instance status over time.
        public var timeline: EMRClientTypes.InstanceTimeline?

        public init (
            state: EMRClientTypes.InstanceState? = nil,
            stateChangeReason: EMRClientTypes.InstanceStateChangeReason? = nil,
            timeline: EMRClientTypes.InstanceTimeline? = nil
        )
        {
            self.state = state
            self.stateChangeReason = stateChangeReason
            self.timeline = timeline
        }
    }

}

extension EMRClientTypes.InstanceTimeline: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDateTime = "CreationDateTime"
        case endDateTime = "EndDateTime"
        case readyDateTime = "ReadyDateTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDateTime = self.creationDateTime {
            try encodeContainer.encodeTimestamp(creationDateTime, format: .epochSeconds, forKey: .creationDateTime)
        }
        if let endDateTime = self.endDateTime {
            try encodeContainer.encodeTimestamp(endDateTime, format: .epochSeconds, forKey: .endDateTime)
        }
        if let readyDateTime = self.readyDateTime {
            try encodeContainer.encodeTimestamp(readyDateTime, format: .epochSeconds, forKey: .readyDateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let readyDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .readyDateTime)
        readyDateTime = readyDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
    }
}

extension EMRClientTypes {
    /// The timeline of the instance lifecycle.
    public struct InstanceTimeline: Swift.Equatable {
        /// The creation date and time of the instance.
        public var creationDateTime: ClientRuntime.Date?
        /// The date and time when the instance was terminated.
        public var endDateTime: ClientRuntime.Date?
        /// The date and time when the instance was ready to perform tasks.
        public var readyDateTime: ClientRuntime.Date?

        public init (
            creationDateTime: ClientRuntime.Date? = nil,
            endDateTime: ClientRuntime.Date? = nil,
            readyDateTime: ClientRuntime.Date? = nil
        )
        {
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.readyDateTime = readyDateTime
        }
    }

}

extension EMRClientTypes.InstanceTypeConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bidPrice = "BidPrice"
        case bidPriceAsPercentageOfOnDemandPrice = "BidPriceAsPercentageOfOnDemandPrice"
        case configurations = "Configurations"
        case customAmiId = "CustomAmiId"
        case ebsConfiguration = "EbsConfiguration"
        case instanceType = "InstanceType"
        case weightedCapacity = "WeightedCapacity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bidPrice = self.bidPrice {
            try encodeContainer.encode(bidPrice, forKey: .bidPrice)
        }
        if let bidPriceAsPercentageOfOnDemandPrice = self.bidPriceAsPercentageOfOnDemandPrice {
            try encodeContainer.encode(bidPriceAsPercentageOfOnDemandPrice, forKey: .bidPriceAsPercentageOfOnDemandPrice)
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configuration0 in configurations {
                try configurationsContainer.encode(configuration0)
            }
        }
        if let customAmiId = self.customAmiId {
            try encodeContainer.encode(customAmiId, forKey: .customAmiId)
        }
        if let ebsConfiguration = self.ebsConfiguration {
            try encodeContainer.encode(ebsConfiguration, forKey: .ebsConfiguration)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let weightedCapacity = self.weightedCapacity {
            try encodeContainer.encode(weightedCapacity, forKey: .weightedCapacity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let weightedCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .weightedCapacity)
        weightedCapacity = weightedCapacityDecoded
        let bidPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bidPrice)
        bidPrice = bidPriceDecoded
        let bidPriceAsPercentageOfOnDemandPriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .bidPriceAsPercentageOfOnDemandPrice)
        bidPriceAsPercentageOfOnDemandPrice = bidPriceAsPercentageOfOnDemandPriceDecoded
        let ebsConfigurationDecoded = try containerValues.decodeIfPresent(EMRClientTypes.EbsConfiguration.self, forKey: .ebsConfiguration)
        ebsConfiguration = ebsConfigurationDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([EMRClientTypes.Configuration?].self, forKey: .configurations)
        var configurationsDecoded0:[EMRClientTypes.Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [EMRClientTypes.Configuration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
        let customAmiIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customAmiId)
        customAmiId = customAmiIdDecoded
    }
}

extension EMRClientTypes {
    /// An instance type configuration for each instance type in an instance fleet, which determines the EC2 instances Amazon EMR attempts to provision to fulfill On-Demand and Spot target capacities. When you use an allocation strategy, you can include a maximum of 30 instance type configurations for a fleet. For more information about how to use an allocation strategy, see [Configure Instance Fleets](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-fleet.html). Without an allocation strategy, you may specify a maximum of five instance type configurations for a fleet. The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.
    public struct InstanceTypeConfig: Swift.Equatable {
        /// The bid price for each EC2 Spot Instance type as defined by InstanceType. Expressed in USD. If neither BidPrice nor BidPriceAsPercentageOfOnDemandPrice is provided, BidPriceAsPercentageOfOnDemandPrice defaults to 100%.
        public var bidPrice: Swift.String?
        /// The bid price, as a percentage of On-Demand price, for each EC2 Spot Instance as defined by InstanceType. Expressed as a number (for example, 20 specifies 20%). If neither BidPrice nor BidPriceAsPercentageOfOnDemandPrice is provided, BidPriceAsPercentageOfOnDemandPrice defaults to 100%.
        public var bidPriceAsPercentageOfOnDemandPrice: Swift.Double?
        /// A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster.
        public var configurations: [EMRClientTypes.Configuration]?
        /// The custom AMI ID to use for the instance type.
        public var customAmiId: Swift.String?
        /// The configuration of Amazon Elastic Block Store (Amazon EBS) attached to each instance as defined by InstanceType.
        public var ebsConfiguration: EMRClientTypes.EbsConfiguration?
        /// An EC2 instance type, such as m3.xlarge.
        /// This member is required.
        public var instanceType: Swift.String?
        /// The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in [InstanceFleetConfig]. This value is 1 for a master instance fleet, and must be 1 or greater for core and task instance fleets. Defaults to 1 if not specified.
        public var weightedCapacity: Swift.Int?

        public init (
            bidPrice: Swift.String? = nil,
            bidPriceAsPercentageOfOnDemandPrice: Swift.Double? = nil,
            configurations: [EMRClientTypes.Configuration]? = nil,
            customAmiId: Swift.String? = nil,
            ebsConfiguration: EMRClientTypes.EbsConfiguration? = nil,
            instanceType: Swift.String? = nil,
            weightedCapacity: Swift.Int? = nil
        )
        {
            self.bidPrice = bidPrice
            self.bidPriceAsPercentageOfOnDemandPrice = bidPriceAsPercentageOfOnDemandPrice
            self.configurations = configurations
            self.customAmiId = customAmiId
            self.ebsConfiguration = ebsConfiguration
            self.instanceType = instanceType
            self.weightedCapacity = weightedCapacity
        }
    }

}

extension EMRClientTypes.InstanceTypeSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bidPrice = "BidPrice"
        case bidPriceAsPercentageOfOnDemandPrice = "BidPriceAsPercentageOfOnDemandPrice"
        case configurations = "Configurations"
        case customAmiId = "CustomAmiId"
        case ebsBlockDevices = "EbsBlockDevices"
        case ebsOptimized = "EbsOptimized"
        case instanceType = "InstanceType"
        case weightedCapacity = "WeightedCapacity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bidPrice = self.bidPrice {
            try encodeContainer.encode(bidPrice, forKey: .bidPrice)
        }
        if let bidPriceAsPercentageOfOnDemandPrice = self.bidPriceAsPercentageOfOnDemandPrice {
            try encodeContainer.encode(bidPriceAsPercentageOfOnDemandPrice, forKey: .bidPriceAsPercentageOfOnDemandPrice)
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configuration0 in configurations {
                try configurationsContainer.encode(configuration0)
            }
        }
        if let customAmiId = self.customAmiId {
            try encodeContainer.encode(customAmiId, forKey: .customAmiId)
        }
        if let ebsBlockDevices = ebsBlockDevices {
            var ebsBlockDevicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ebsBlockDevices)
            for ebsblockdevice0 in ebsBlockDevices {
                try ebsBlockDevicesContainer.encode(ebsblockdevice0)
            }
        }
        if let ebsOptimized = self.ebsOptimized {
            try encodeContainer.encode(ebsOptimized, forKey: .ebsOptimized)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let weightedCapacity = self.weightedCapacity {
            try encodeContainer.encode(weightedCapacity, forKey: .weightedCapacity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let weightedCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .weightedCapacity)
        weightedCapacity = weightedCapacityDecoded
        let bidPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bidPrice)
        bidPrice = bidPriceDecoded
        let bidPriceAsPercentageOfOnDemandPriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .bidPriceAsPercentageOfOnDemandPrice)
        bidPriceAsPercentageOfOnDemandPrice = bidPriceAsPercentageOfOnDemandPriceDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([EMRClientTypes.Configuration?].self, forKey: .configurations)
        var configurationsDecoded0:[EMRClientTypes.Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [EMRClientTypes.Configuration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
        let ebsBlockDevicesContainer = try containerValues.decodeIfPresent([EMRClientTypes.EbsBlockDevice?].self, forKey: .ebsBlockDevices)
        var ebsBlockDevicesDecoded0:[EMRClientTypes.EbsBlockDevice]? = nil
        if let ebsBlockDevicesContainer = ebsBlockDevicesContainer {
            ebsBlockDevicesDecoded0 = [EMRClientTypes.EbsBlockDevice]()
            for structure0 in ebsBlockDevicesContainer {
                if let structure0 = structure0 {
                    ebsBlockDevicesDecoded0?.append(structure0)
                }
            }
        }
        ebsBlockDevices = ebsBlockDevicesDecoded0
        let ebsOptimizedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ebsOptimized)
        ebsOptimized = ebsOptimizedDecoded
        let customAmiIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customAmiId)
        customAmiId = customAmiIdDecoded
    }
}

extension EMRClientTypes {
    /// The configuration specification for each instance type in an instance fleet. The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.
    public struct InstanceTypeSpecification: Swift.Equatable {
        /// The bid price for each EC2 Spot Instance type as defined by InstanceType. Expressed in USD.
        public var bidPrice: Swift.String?
        /// The bid price, as a percentage of On-Demand price, for each EC2 Spot Instance as defined by InstanceType. Expressed as a number (for example, 20 specifies 20%).
        public var bidPriceAsPercentageOfOnDemandPrice: Swift.Double?
        /// A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software bundled with Amazon EMR.
        public var configurations: [EMRClientTypes.Configuration]?
        /// The custom AMI ID to use for the instance type.
        public var customAmiId: Swift.String?
        /// The configuration of Amazon Elastic Block Store (Amazon EBS) attached to each instance as defined by InstanceType.
        public var ebsBlockDevices: [EMRClientTypes.EbsBlockDevice]?
        /// Evaluates to TRUE when the specified InstanceType is EBS-optimized.
        public var ebsOptimized: Swift.Bool?
        /// The EC2 instance type, for example m3.xlarge.
        public var instanceType: Swift.String?
        /// The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in [InstanceFleetConfig]. Capacity values represent performance characteristics such as vCPUs, memory, or I/O. If not specified, the default value is 1.
        public var weightedCapacity: Swift.Int?

        public init (
            bidPrice: Swift.String? = nil,
            bidPriceAsPercentageOfOnDemandPrice: Swift.Double? = nil,
            configurations: [EMRClientTypes.Configuration]? = nil,
            customAmiId: Swift.String? = nil,
            ebsBlockDevices: [EMRClientTypes.EbsBlockDevice]? = nil,
            ebsOptimized: Swift.Bool? = nil,
            instanceType: Swift.String? = nil,
            weightedCapacity: Swift.Int? = nil
        )
        {
            self.bidPrice = bidPrice
            self.bidPriceAsPercentageOfOnDemandPrice = bidPriceAsPercentageOfOnDemandPrice
            self.configurations = configurations
            self.customAmiId = customAmiId
            self.ebsBlockDevices = ebsBlockDevices
            self.ebsOptimized = ebsOptimized
            self.instanceType = instanceType
            self.weightedCapacity = weightedCapacity
        }
    }

}

extension InternalServerError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates that an error occurred while processing the request and that the request was not completed.
public struct InternalServerError: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server

    public init () { }
}

extension InternalServerException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception occurs when there is an internal failure in the Amazon EMR service.
public struct InternalServerException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// The message associated with the exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.errorCode = output.errorCode
            self.message = output.message
        } else {
            self.errorCode = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception occurs when there is something wrong with user input.
public struct InvalidRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The error code associated with the exception.
    public var errorCode: Swift.String?
    /// The message associated with the exception.
    public var message: Swift.String?

    public init (
        errorCode: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.errorCode = errorCode
        self.message = message
    }
}

struct InvalidRequestExceptionBody: Swift.Equatable {
    let errorCode: Swift.String?
    let message: Swift.String?
}

extension InvalidRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EMRClientTypes.JobFlowDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amiVersion = "AmiVersion"
        case autoScalingRole = "AutoScalingRole"
        case bootstrapActions = "BootstrapActions"
        case executionStatusDetail = "ExecutionStatusDetail"
        case instances = "Instances"
        case jobFlowId = "JobFlowId"
        case jobFlowRole = "JobFlowRole"
        case logEncryptionKmsKeyId = "LogEncryptionKmsKeyId"
        case logUri = "LogUri"
        case name = "Name"
        case scaleDownBehavior = "ScaleDownBehavior"
        case serviceRole = "ServiceRole"
        case steps = "Steps"
        case supportedProducts = "SupportedProducts"
        case visibleToAllUsers = "VisibleToAllUsers"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amiVersion = self.amiVersion {
            try encodeContainer.encode(amiVersion, forKey: .amiVersion)
        }
        if let autoScalingRole = self.autoScalingRole {
            try encodeContainer.encode(autoScalingRole, forKey: .autoScalingRole)
        }
        if let bootstrapActions = bootstrapActions {
            var bootstrapActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bootstrapActions)
            for bootstrapactiondetail0 in bootstrapActions {
                try bootstrapActionsContainer.encode(bootstrapactiondetail0)
            }
        }
        if let executionStatusDetail = self.executionStatusDetail {
            try encodeContainer.encode(executionStatusDetail, forKey: .executionStatusDetail)
        }
        if let instances = self.instances {
            try encodeContainer.encode(instances, forKey: .instances)
        }
        if let jobFlowId = self.jobFlowId {
            try encodeContainer.encode(jobFlowId, forKey: .jobFlowId)
        }
        if let jobFlowRole = self.jobFlowRole {
            try encodeContainer.encode(jobFlowRole, forKey: .jobFlowRole)
        }
        if let logEncryptionKmsKeyId = self.logEncryptionKmsKeyId {
            try encodeContainer.encode(logEncryptionKmsKeyId, forKey: .logEncryptionKmsKeyId)
        }
        if let logUri = self.logUri {
            try encodeContainer.encode(logUri, forKey: .logUri)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scaleDownBehavior = self.scaleDownBehavior {
            try encodeContainer.encode(scaleDownBehavior.rawValue, forKey: .scaleDownBehavior)
        }
        if let serviceRole = self.serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let steps = steps {
            var stepsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .steps)
            for stepdetail0 in steps {
                try stepsContainer.encode(stepdetail0)
            }
        }
        if let supportedProducts = supportedProducts {
            var supportedProductsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedProducts)
            for xmlstringmaxlen2560 in supportedProducts {
                try supportedProductsContainer.encode(xmlstringmaxlen2560)
            }
        }
        if visibleToAllUsers != false {
            try encodeContainer.encode(visibleToAllUsers, forKey: .visibleToAllUsers)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobFlowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobFlowId)
        jobFlowId = jobFlowIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logUri)
        logUri = logUriDecoded
        let logEncryptionKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logEncryptionKmsKeyId)
        logEncryptionKmsKeyId = logEncryptionKmsKeyIdDecoded
        let amiVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amiVersion)
        amiVersion = amiVersionDecoded
        let executionStatusDetailDecoded = try containerValues.decodeIfPresent(EMRClientTypes.JobFlowExecutionStatusDetail.self, forKey: .executionStatusDetail)
        executionStatusDetail = executionStatusDetailDecoded
        let instancesDecoded = try containerValues.decodeIfPresent(EMRClientTypes.JobFlowInstancesDetail.self, forKey: .instances)
        instances = instancesDecoded
        let stepsContainer = try containerValues.decodeIfPresent([EMRClientTypes.StepDetail?].self, forKey: .steps)
        var stepsDecoded0:[EMRClientTypes.StepDetail]? = nil
        if let stepsContainer = stepsContainer {
            stepsDecoded0 = [EMRClientTypes.StepDetail]()
            for structure0 in stepsContainer {
                if let structure0 = structure0 {
                    stepsDecoded0?.append(structure0)
                }
            }
        }
        steps = stepsDecoded0
        let bootstrapActionsContainer = try containerValues.decodeIfPresent([EMRClientTypes.BootstrapActionDetail?].self, forKey: .bootstrapActions)
        var bootstrapActionsDecoded0:[EMRClientTypes.BootstrapActionDetail]? = nil
        if let bootstrapActionsContainer = bootstrapActionsContainer {
            bootstrapActionsDecoded0 = [EMRClientTypes.BootstrapActionDetail]()
            for structure0 in bootstrapActionsContainer {
                if let structure0 = structure0 {
                    bootstrapActionsDecoded0?.append(structure0)
                }
            }
        }
        bootstrapActions = bootstrapActionsDecoded0
        let supportedProductsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .supportedProducts)
        var supportedProductsDecoded0:[Swift.String]? = nil
        if let supportedProductsContainer = supportedProductsContainer {
            supportedProductsDecoded0 = [Swift.String]()
            for string0 in supportedProductsContainer {
                if let string0 = string0 {
                    supportedProductsDecoded0?.append(string0)
                }
            }
        }
        supportedProducts = supportedProductsDecoded0
        let visibleToAllUsersDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .visibleToAllUsers) ?? false
        visibleToAllUsers = visibleToAllUsersDecoded
        let jobFlowRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobFlowRole)
        jobFlowRole = jobFlowRoleDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let autoScalingRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingRole)
        autoScalingRole = autoScalingRoleDecoded
        let scaleDownBehaviorDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ScaleDownBehavior.self, forKey: .scaleDownBehavior)
        scaleDownBehavior = scaleDownBehaviorDecoded
    }
}

extension EMRClientTypes {
    /// A description of a cluster (job flow).
    public struct JobFlowDetail: Swift.Equatable {
        /// Applies only to Amazon EMR AMI versions 3.x and 2.x. For Amazon EMR releases 4.0 and later, ReleaseLabel is used. To specify a custom AMI, use CustomAmiID.
        public var amiVersion: Swift.String?
        /// An IAM role for automatic scaling policies. The default role is EMR_AutoScaling_DefaultRole. The IAM role provides a way for the automatic scaling feature to get the required permissions it needs to launch and terminate EC2 instances in an instance group.
        public var autoScalingRole: Swift.String?
        /// A list of the bootstrap actions run by the job flow.
        public var bootstrapActions: [EMRClientTypes.BootstrapActionDetail]?
        /// Describes the execution status of the job flow.
        /// This member is required.
        public var executionStatusDetail: EMRClientTypes.JobFlowExecutionStatusDetail?
        /// Describes the Amazon EC2 instances of the job flow.
        /// This member is required.
        public var instances: EMRClientTypes.JobFlowInstancesDetail?
        /// The job flow identifier.
        /// This member is required.
        public var jobFlowId: Swift.String?
        /// The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
        public var jobFlowRole: Swift.String?
        /// The KMS key used for encrypting log files. This attribute is only available with EMR version 5.30.0 and later, excluding EMR 6.0.0.
        public var logEncryptionKmsKeyId: Swift.String?
        /// The location in Amazon S3 where log files for the job are stored.
        public var logUri: Swift.String?
        /// The name of the job flow.
        /// This member is required.
        public var name: Swift.String?
        /// The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. TERMINATE_AT_INSTANCE_HOUR indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. TERMINATE_AT_TASK_COMPLETION indicates that Amazon EMR adds nodes to a deny list and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. TERMINATE_AT_TASK_COMPLETION available only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR earlier than 5.1.0.
        public var scaleDownBehavior: EMRClientTypes.ScaleDownBehavior?
        /// The IAM role that is assumed by the Amazon EMR service to access Amazon Web Services resources on your behalf.
        public var serviceRole: Swift.String?
        /// A list of steps run by the job flow.
        public var steps: [EMRClientTypes.StepDetail]?
        /// A list of strings set by third-party software when the job flow is launched. If you are not using third-party software to manage the job flow, this value is empty.
        public var supportedProducts: [Swift.String]?
        /// Indicates whether the cluster is visible to IAM principals in the Amazon Web Services account associated with the cluster. When true, IAM principals in the Amazon Web Services account can perform EMR cluster actions that their IAM policies allow. When false, only the IAM principal that created the cluster and the Amazon Web Services account root user can perform EMR actions, regardless of IAM permissions policies attached to other IAM principals. The default value is true if a value is not provided when creating a cluster using the EMR API [RunJobFlow] command, the CLI [create-cluster](https://docs.aws.amazon.com/cli/latest/reference/emr/create-cluster.html) command, or the Amazon Web Services Management Console.
        public var visibleToAllUsers: Swift.Bool

        public init (
            amiVersion: Swift.String? = nil,
            autoScalingRole: Swift.String? = nil,
            bootstrapActions: [EMRClientTypes.BootstrapActionDetail]? = nil,
            executionStatusDetail: EMRClientTypes.JobFlowExecutionStatusDetail? = nil,
            instances: EMRClientTypes.JobFlowInstancesDetail? = nil,
            jobFlowId: Swift.String? = nil,
            jobFlowRole: Swift.String? = nil,
            logEncryptionKmsKeyId: Swift.String? = nil,
            logUri: Swift.String? = nil,
            name: Swift.String? = nil,
            scaleDownBehavior: EMRClientTypes.ScaleDownBehavior? = nil,
            serviceRole: Swift.String? = nil,
            steps: [EMRClientTypes.StepDetail]? = nil,
            supportedProducts: [Swift.String]? = nil,
            visibleToAllUsers: Swift.Bool = false
        )
        {
            self.amiVersion = amiVersion
            self.autoScalingRole = autoScalingRole
            self.bootstrapActions = bootstrapActions
            self.executionStatusDetail = executionStatusDetail
            self.instances = instances
            self.jobFlowId = jobFlowId
            self.jobFlowRole = jobFlowRole
            self.logEncryptionKmsKeyId = logEncryptionKmsKeyId
            self.logUri = logUri
            self.name = name
            self.scaleDownBehavior = scaleDownBehavior
            self.serviceRole = serviceRole
            self.steps = steps
            self.supportedProducts = supportedProducts
            self.visibleToAllUsers = visibleToAllUsers
        }
    }

}

extension EMRClientTypes {
    /// The type of instance.
    public enum JobFlowExecutionState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bootstrapping
        case completed
        case failed
        case running
        case shuttingDown
        case starting
        case terminated
        case waiting
        case sdkUnknown(Swift.String)

        public static var allCases: [JobFlowExecutionState] {
            return [
                .bootstrapping,
                .completed,
                .failed,
                .running,
                .shuttingDown,
                .starting,
                .terminated,
                .waiting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bootstrapping: return "BOOTSTRAPPING"
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .running: return "RUNNING"
            case .shuttingDown: return "SHUTTING_DOWN"
            case .starting: return "STARTING"
            case .terminated: return "TERMINATED"
            case .waiting: return "WAITING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobFlowExecutionState(rawValue: rawValue) ?? JobFlowExecutionState.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.JobFlowExecutionStatusDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDateTime = "CreationDateTime"
        case endDateTime = "EndDateTime"
        case lastStateChangeReason = "LastStateChangeReason"
        case readyDateTime = "ReadyDateTime"
        case startDateTime = "StartDateTime"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDateTime = self.creationDateTime {
            try encodeContainer.encodeTimestamp(creationDateTime, format: .epochSeconds, forKey: .creationDateTime)
        }
        if let endDateTime = self.endDateTime {
            try encodeContainer.encodeTimestamp(endDateTime, format: .epochSeconds, forKey: .endDateTime)
        }
        if let lastStateChangeReason = self.lastStateChangeReason {
            try encodeContainer.encode(lastStateChangeReason, forKey: .lastStateChangeReason)
        }
        if let readyDateTime = self.readyDateTime {
            try encodeContainer.encodeTimestamp(readyDateTime, format: .epochSeconds, forKey: .readyDateTime)
        }
        if let startDateTime = self.startDateTime {
            try encodeContainer.encodeTimestamp(startDateTime, format: .epochSeconds, forKey: .startDateTime)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(EMRClientTypes.JobFlowExecutionState.self, forKey: .state)
        state = stateDecoded
        let creationDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let startDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startDateTime)
        startDateTime = startDateTimeDecoded
        let readyDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .readyDateTime)
        readyDateTime = readyDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
        let lastStateChangeReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastStateChangeReason)
        lastStateChangeReason = lastStateChangeReasonDecoded
    }
}

extension EMRClientTypes {
    /// Describes the status of the cluster (job flow).
    public struct JobFlowExecutionStatusDetail: Swift.Equatable {
        /// The creation date and time of the job flow.
        /// This member is required.
        public var creationDateTime: ClientRuntime.Date?
        /// The completion date and time of the job flow.
        public var endDateTime: ClientRuntime.Date?
        /// Description of the job flow last changed state.
        public var lastStateChangeReason: Swift.String?
        /// The date and time when the job flow was ready to start running bootstrap actions.
        public var readyDateTime: ClientRuntime.Date?
        /// The start date and time of the job flow.
        public var startDateTime: ClientRuntime.Date?
        /// The state of the job flow.
        /// This member is required.
        public var state: EMRClientTypes.JobFlowExecutionState?

        public init (
            creationDateTime: ClientRuntime.Date? = nil,
            endDateTime: ClientRuntime.Date? = nil,
            lastStateChangeReason: Swift.String? = nil,
            readyDateTime: ClientRuntime.Date? = nil,
            startDateTime: ClientRuntime.Date? = nil,
            state: EMRClientTypes.JobFlowExecutionState? = nil
        )
        {
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.lastStateChangeReason = lastStateChangeReason
            self.readyDateTime = readyDateTime
            self.startDateTime = startDateTime
            self.state = state
        }
    }

}

extension EMRClientTypes.JobFlowInstancesConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalMasterSecurityGroups = "AdditionalMasterSecurityGroups"
        case additionalSlaveSecurityGroups = "AdditionalSlaveSecurityGroups"
        case ec2KeyName = "Ec2KeyName"
        case ec2SubnetId = "Ec2SubnetId"
        case ec2SubnetIds = "Ec2SubnetIds"
        case emrManagedMasterSecurityGroup = "EmrManagedMasterSecurityGroup"
        case emrManagedSlaveSecurityGroup = "EmrManagedSlaveSecurityGroup"
        case hadoopVersion = "HadoopVersion"
        case instanceCount = "InstanceCount"
        case instanceFleets = "InstanceFleets"
        case instanceGroups = "InstanceGroups"
        case keepJobFlowAliveWhenNoSteps = "KeepJobFlowAliveWhenNoSteps"
        case masterInstanceType = "MasterInstanceType"
        case placement = "Placement"
        case serviceAccessSecurityGroup = "ServiceAccessSecurityGroup"
        case slaveInstanceType = "SlaveInstanceType"
        case terminationProtected = "TerminationProtected"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalMasterSecurityGroups = additionalMasterSecurityGroups {
            var additionalMasterSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalMasterSecurityGroups)
            for xmlstringmaxlen2560 in additionalMasterSecurityGroups {
                try additionalMasterSecurityGroupsContainer.encode(xmlstringmaxlen2560)
            }
        }
        if let additionalSlaveSecurityGroups = additionalSlaveSecurityGroups {
            var additionalSlaveSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalSlaveSecurityGroups)
            for xmlstringmaxlen2560 in additionalSlaveSecurityGroups {
                try additionalSlaveSecurityGroupsContainer.encode(xmlstringmaxlen2560)
            }
        }
        if let ec2KeyName = self.ec2KeyName {
            try encodeContainer.encode(ec2KeyName, forKey: .ec2KeyName)
        }
        if let ec2SubnetId = self.ec2SubnetId {
            try encodeContainer.encode(ec2SubnetId, forKey: .ec2SubnetId)
        }
        if let ec2SubnetIds = ec2SubnetIds {
            var ec2SubnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2SubnetIds)
            for xmlstringmaxlen2560 in ec2SubnetIds {
                try ec2SubnetIdsContainer.encode(xmlstringmaxlen2560)
            }
        }
        if let emrManagedMasterSecurityGroup = self.emrManagedMasterSecurityGroup {
            try encodeContainer.encode(emrManagedMasterSecurityGroup, forKey: .emrManagedMasterSecurityGroup)
        }
        if let emrManagedSlaveSecurityGroup = self.emrManagedSlaveSecurityGroup {
            try encodeContainer.encode(emrManagedSlaveSecurityGroup, forKey: .emrManagedSlaveSecurityGroup)
        }
        if let hadoopVersion = self.hadoopVersion {
            try encodeContainer.encode(hadoopVersion, forKey: .hadoopVersion)
        }
        if let instanceCount = self.instanceCount {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceFleets = instanceFleets {
            var instanceFleetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceFleets)
            for instancefleetconfig0 in instanceFleets {
                try instanceFleetsContainer.encode(instancefleetconfig0)
            }
        }
        if let instanceGroups = instanceGroups {
            var instanceGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceGroups)
            for instancegroupconfig0 in instanceGroups {
                try instanceGroupsContainer.encode(instancegroupconfig0)
            }
        }
        if keepJobFlowAliveWhenNoSteps != false {
            try encodeContainer.encode(keepJobFlowAliveWhenNoSteps, forKey: .keepJobFlowAliveWhenNoSteps)
        }
        if let masterInstanceType = self.masterInstanceType {
            try encodeContainer.encode(masterInstanceType, forKey: .masterInstanceType)
        }
        if let placement = self.placement {
            try encodeContainer.encode(placement, forKey: .placement)
        }
        if let serviceAccessSecurityGroup = self.serviceAccessSecurityGroup {
            try encodeContainer.encode(serviceAccessSecurityGroup, forKey: .serviceAccessSecurityGroup)
        }
        if let slaveInstanceType = self.slaveInstanceType {
            try encodeContainer.encode(slaveInstanceType, forKey: .slaveInstanceType)
        }
        if terminationProtected != false {
            try encodeContainer.encode(terminationProtected, forKey: .terminationProtected)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let masterInstanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterInstanceType)
        masterInstanceType = masterInstanceTypeDecoded
        let slaveInstanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .slaveInstanceType)
        slaveInstanceType = slaveInstanceTypeDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let instanceGroupsContainer = try containerValues.decodeIfPresent([EMRClientTypes.InstanceGroupConfig?].self, forKey: .instanceGroups)
        var instanceGroupsDecoded0:[EMRClientTypes.InstanceGroupConfig]? = nil
        if let instanceGroupsContainer = instanceGroupsContainer {
            instanceGroupsDecoded0 = [EMRClientTypes.InstanceGroupConfig]()
            for structure0 in instanceGroupsContainer {
                if let structure0 = structure0 {
                    instanceGroupsDecoded0?.append(structure0)
                }
            }
        }
        instanceGroups = instanceGroupsDecoded0
        let instanceFleetsContainer = try containerValues.decodeIfPresent([EMRClientTypes.InstanceFleetConfig?].self, forKey: .instanceFleets)
        var instanceFleetsDecoded0:[EMRClientTypes.InstanceFleetConfig]? = nil
        if let instanceFleetsContainer = instanceFleetsContainer {
            instanceFleetsDecoded0 = [EMRClientTypes.InstanceFleetConfig]()
            for structure0 in instanceFleetsContainer {
                if let structure0 = structure0 {
                    instanceFleetsDecoded0?.append(structure0)
                }
            }
        }
        instanceFleets = instanceFleetsDecoded0
        let ec2KeyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2KeyName)
        ec2KeyName = ec2KeyNameDecoded
        let placementDecoded = try containerValues.decodeIfPresent(EMRClientTypes.PlacementType.self, forKey: .placement)
        placement = placementDecoded
        let keepJobFlowAliveWhenNoStepsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .keepJobFlowAliveWhenNoSteps) ?? false
        keepJobFlowAliveWhenNoSteps = keepJobFlowAliveWhenNoStepsDecoded
        let terminationProtectedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .terminationProtected) ?? false
        terminationProtected = terminationProtectedDecoded
        let hadoopVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hadoopVersion)
        hadoopVersion = hadoopVersionDecoded
        let ec2SubnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2SubnetId)
        ec2SubnetId = ec2SubnetIdDecoded
        let ec2SubnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ec2SubnetIds)
        var ec2SubnetIdsDecoded0:[Swift.String]? = nil
        if let ec2SubnetIdsContainer = ec2SubnetIdsContainer {
            ec2SubnetIdsDecoded0 = [Swift.String]()
            for string0 in ec2SubnetIdsContainer {
                if let string0 = string0 {
                    ec2SubnetIdsDecoded0?.append(string0)
                }
            }
        }
        ec2SubnetIds = ec2SubnetIdsDecoded0
        let emrManagedMasterSecurityGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emrManagedMasterSecurityGroup)
        emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroupDecoded
        let emrManagedSlaveSecurityGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emrManagedSlaveSecurityGroup)
        emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroupDecoded
        let serviceAccessSecurityGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceAccessSecurityGroup)
        serviceAccessSecurityGroup = serviceAccessSecurityGroupDecoded
        let additionalMasterSecurityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalMasterSecurityGroups)
        var additionalMasterSecurityGroupsDecoded0:[Swift.String]? = nil
        if let additionalMasterSecurityGroupsContainer = additionalMasterSecurityGroupsContainer {
            additionalMasterSecurityGroupsDecoded0 = [Swift.String]()
            for string0 in additionalMasterSecurityGroupsContainer {
                if let string0 = string0 {
                    additionalMasterSecurityGroupsDecoded0?.append(string0)
                }
            }
        }
        additionalMasterSecurityGroups = additionalMasterSecurityGroupsDecoded0
        let additionalSlaveSecurityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalSlaveSecurityGroups)
        var additionalSlaveSecurityGroupsDecoded0:[Swift.String]? = nil
        if let additionalSlaveSecurityGroupsContainer = additionalSlaveSecurityGroupsContainer {
            additionalSlaveSecurityGroupsDecoded0 = [Swift.String]()
            for string0 in additionalSlaveSecurityGroupsContainer {
                if let string0 = string0 {
                    additionalSlaveSecurityGroupsDecoded0?.append(string0)
                }
            }
        }
        additionalSlaveSecurityGroups = additionalSlaveSecurityGroupsDecoded0
    }
}

extension EMRClientTypes {
    /// A description of the Amazon EC2 instance on which the cluster (job flow) runs. A valid JobFlowInstancesConfig must contain either InstanceGroups or InstanceFleets. They cannot be used together. You may also have MasterInstanceType, SlaveInstanceType, and InstanceCount (all three must be present), but we don't recommend this configuration.
    public struct JobFlowInstancesConfig: Swift.Equatable {
        /// A list of additional Amazon EC2 security group IDs for the master node.
        public var additionalMasterSecurityGroups: [Swift.String]?
        /// A list of additional Amazon EC2 security group IDs for the core and task nodes.
        public var additionalSlaveSecurityGroups: [Swift.String]?
        /// The name of the EC2 key pair that can be used to connect to the master node using SSH as the user called "hadoop."
        public var ec2KeyName: Swift.String?
        /// Applies to clusters that use the uniform instance group configuration. To launch the cluster in Amazon Virtual Private Cloud (Amazon VPC), set this parameter to the identifier of the Amazon VPC subnet where you want the cluster to launch. If you do not specify this value and your account supports EC2-Classic, the cluster launches in EC2-Classic.
        public var ec2SubnetId: Swift.String?
        /// Applies to clusters that use the instance fleet configuration. When multiple EC2 subnet IDs are specified, Amazon EMR evaluates them and launches instances in the optimal subnet. The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.
        public var ec2SubnetIds: [Swift.String]?
        /// The identifier of the Amazon EC2 security group for the master node. If you specify EmrManagedMasterSecurityGroup, you must also specify EmrManagedSlaveSecurityGroup.
        public var emrManagedMasterSecurityGroup: Swift.String?
        /// The identifier of the Amazon EC2 security group for the core and task nodes. If you specify EmrManagedSlaveSecurityGroup, you must also specify EmrManagedMasterSecurityGroup.
        public var emrManagedSlaveSecurityGroup: Swift.String?
        /// Applies only to Amazon EMR release versions earlier than 4.0. The Hadoop version for the cluster. Valid inputs are "0.18" (no longer maintained), "0.20" (no longer maintained), "0.20.205" (no longer maintained), "1.0.3", "2.2.0", or "2.4.0". If you do not set this value, the default of 0.18 is used, unless the AmiVersion parameter is set in the RunJobFlow call, in which case the default version of Hadoop for that AMI version is used.
        public var hadoopVersion: Swift.String?
        /// The number of EC2 instances in the cluster.
        public var instanceCount: Swift.Int?
        /// The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions. Describes the EC2 instances and instance configurations for clusters that use the instance fleet configuration.
        public var instanceFleets: [EMRClientTypes.InstanceFleetConfig]?
        /// Configuration for the instance groups in a cluster.
        public var instanceGroups: [EMRClientTypes.InstanceGroupConfig]?
        /// Specifies whether the cluster should remain available after completing all steps. Defaults to true. For more information about configuring cluster termination, see [Control Cluster Termination](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-termination.html) in the EMR Management Guide.
        public var keepJobFlowAliveWhenNoSteps: Swift.Bool
        /// The EC2 instance type of the master node.
        public var masterInstanceType: Swift.String?
        /// The Availability Zone in which the cluster runs.
        public var placement: EMRClientTypes.PlacementType?
        /// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
        public var serviceAccessSecurityGroup: Swift.String?
        /// The EC2 instance type of the core and task nodes.
        public var slaveInstanceType: Swift.String?
        /// Specifies whether to lock the cluster to prevent the Amazon EC2 instances from being terminated by API call, user intervention, or in the event of a job-flow error.
        public var terminationProtected: Swift.Bool

        public init (
            additionalMasterSecurityGroups: [Swift.String]? = nil,
            additionalSlaveSecurityGroups: [Swift.String]? = nil,
            ec2KeyName: Swift.String? = nil,
            ec2SubnetId: Swift.String? = nil,
            ec2SubnetIds: [Swift.String]? = nil,
            emrManagedMasterSecurityGroup: Swift.String? = nil,
            emrManagedSlaveSecurityGroup: Swift.String? = nil,
            hadoopVersion: Swift.String? = nil,
            instanceCount: Swift.Int? = nil,
            instanceFleets: [EMRClientTypes.InstanceFleetConfig]? = nil,
            instanceGroups: [EMRClientTypes.InstanceGroupConfig]? = nil,
            keepJobFlowAliveWhenNoSteps: Swift.Bool = false,
            masterInstanceType: Swift.String? = nil,
            placement: EMRClientTypes.PlacementType? = nil,
            serviceAccessSecurityGroup: Swift.String? = nil,
            slaveInstanceType: Swift.String? = nil,
            terminationProtected: Swift.Bool = false
        )
        {
            self.additionalMasterSecurityGroups = additionalMasterSecurityGroups
            self.additionalSlaveSecurityGroups = additionalSlaveSecurityGroups
            self.ec2KeyName = ec2KeyName
            self.ec2SubnetId = ec2SubnetId
            self.ec2SubnetIds = ec2SubnetIds
            self.emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroup
            self.emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroup
            self.hadoopVersion = hadoopVersion
            self.instanceCount = instanceCount
            self.instanceFleets = instanceFleets
            self.instanceGroups = instanceGroups
            self.keepJobFlowAliveWhenNoSteps = keepJobFlowAliveWhenNoSteps
            self.masterInstanceType = masterInstanceType
            self.placement = placement
            self.serviceAccessSecurityGroup = serviceAccessSecurityGroup
            self.slaveInstanceType = slaveInstanceType
            self.terminationProtected = terminationProtected
        }
    }

}

extension EMRClientTypes.JobFlowInstancesDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ec2KeyName = "Ec2KeyName"
        case ec2SubnetId = "Ec2SubnetId"
        case hadoopVersion = "HadoopVersion"
        case instanceCount = "InstanceCount"
        case instanceGroups = "InstanceGroups"
        case keepJobFlowAliveWhenNoSteps = "KeepJobFlowAliveWhenNoSteps"
        case masterInstanceId = "MasterInstanceId"
        case masterInstanceType = "MasterInstanceType"
        case masterPublicDnsName = "MasterPublicDnsName"
        case normalizedInstanceHours = "NormalizedInstanceHours"
        case placement = "Placement"
        case slaveInstanceType = "SlaveInstanceType"
        case terminationProtected = "TerminationProtected"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ec2KeyName = self.ec2KeyName {
            try encodeContainer.encode(ec2KeyName, forKey: .ec2KeyName)
        }
        if let ec2SubnetId = self.ec2SubnetId {
            try encodeContainer.encode(ec2SubnetId, forKey: .ec2SubnetId)
        }
        if let hadoopVersion = self.hadoopVersion {
            try encodeContainer.encode(hadoopVersion, forKey: .hadoopVersion)
        }
        if let instanceCount = self.instanceCount {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceGroups = instanceGroups {
            var instanceGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceGroups)
            for instancegroupdetail0 in instanceGroups {
                try instanceGroupsContainer.encode(instancegroupdetail0)
            }
        }
        if keepJobFlowAliveWhenNoSteps != false {
            try encodeContainer.encode(keepJobFlowAliveWhenNoSteps, forKey: .keepJobFlowAliveWhenNoSteps)
        }
        if let masterInstanceId = self.masterInstanceId {
            try encodeContainer.encode(masterInstanceId, forKey: .masterInstanceId)
        }
        if let masterInstanceType = self.masterInstanceType {
            try encodeContainer.encode(masterInstanceType, forKey: .masterInstanceType)
        }
        if let masterPublicDnsName = self.masterPublicDnsName {
            try encodeContainer.encode(masterPublicDnsName, forKey: .masterPublicDnsName)
        }
        if let normalizedInstanceHours = self.normalizedInstanceHours {
            try encodeContainer.encode(normalizedInstanceHours, forKey: .normalizedInstanceHours)
        }
        if let placement = self.placement {
            try encodeContainer.encode(placement, forKey: .placement)
        }
        if let slaveInstanceType = self.slaveInstanceType {
            try encodeContainer.encode(slaveInstanceType, forKey: .slaveInstanceType)
        }
        if terminationProtected != false {
            try encodeContainer.encode(terminationProtected, forKey: .terminationProtected)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let masterInstanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterInstanceType)
        masterInstanceType = masterInstanceTypeDecoded
        let masterPublicDnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterPublicDnsName)
        masterPublicDnsName = masterPublicDnsNameDecoded
        let masterInstanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterInstanceId)
        masterInstanceId = masterInstanceIdDecoded
        let slaveInstanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .slaveInstanceType)
        slaveInstanceType = slaveInstanceTypeDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let instanceGroupsContainer = try containerValues.decodeIfPresent([EMRClientTypes.InstanceGroupDetail?].self, forKey: .instanceGroups)
        var instanceGroupsDecoded0:[EMRClientTypes.InstanceGroupDetail]? = nil
        if let instanceGroupsContainer = instanceGroupsContainer {
            instanceGroupsDecoded0 = [EMRClientTypes.InstanceGroupDetail]()
            for structure0 in instanceGroupsContainer {
                if let structure0 = structure0 {
                    instanceGroupsDecoded0?.append(structure0)
                }
            }
        }
        instanceGroups = instanceGroupsDecoded0
        let normalizedInstanceHoursDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .normalizedInstanceHours)
        normalizedInstanceHours = normalizedInstanceHoursDecoded
        let ec2KeyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2KeyName)
        ec2KeyName = ec2KeyNameDecoded
        let ec2SubnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2SubnetId)
        ec2SubnetId = ec2SubnetIdDecoded
        let placementDecoded = try containerValues.decodeIfPresent(EMRClientTypes.PlacementType.self, forKey: .placement)
        placement = placementDecoded
        let keepJobFlowAliveWhenNoStepsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .keepJobFlowAliveWhenNoSteps) ?? false
        keepJobFlowAliveWhenNoSteps = keepJobFlowAliveWhenNoStepsDecoded
        let terminationProtectedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .terminationProtected) ?? false
        terminationProtected = terminationProtectedDecoded
        let hadoopVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hadoopVersion)
        hadoopVersion = hadoopVersionDecoded
    }
}

extension EMRClientTypes {
    /// Specify the type of Amazon EC2 instances that the cluster (job flow) runs on.
    public struct JobFlowInstancesDetail: Swift.Equatable {
        /// The name of an Amazon EC2 key pair that can be used to connect to the master node using SSH.
        public var ec2KeyName: Swift.String?
        /// For clusters launched within Amazon Virtual Private Cloud, this is the identifier of the subnet where the cluster was launched.
        public var ec2SubnetId: Swift.String?
        /// The Hadoop version for the cluster.
        public var hadoopVersion: Swift.String?
        /// The number of Amazon EC2 instances in the cluster. If the value is 1, the same instance serves as both the master and core and task node. If the value is greater than 1, one instance is the master node and all others are core and task nodes.
        /// This member is required.
        public var instanceCount: Swift.Int?
        /// Details about the instance groups in a cluster.
        public var instanceGroups: [EMRClientTypes.InstanceGroupDetail]?
        /// Specifies whether the cluster should remain available after completing all steps.
        public var keepJobFlowAliveWhenNoSteps: Swift.Bool
        /// The Amazon EC2 instance identifier of the master node.
        public var masterInstanceId: Swift.String?
        /// The Amazon EC2 master node instance type.
        /// This member is required.
        public var masterInstanceType: Swift.String?
        /// The DNS name of the master node. If the cluster is on a private subnet, this is the private DNS name. On a public subnet, this is the public DNS name.
        public var masterPublicDnsName: Swift.String?
        /// An approximation of the cost of the cluster, represented in m1.small/hours. This value is increased one time for every hour that an m1.small instance runs. Larger instances are weighted more heavily, so an Amazon EC2 instance that is roughly four times more expensive would result in the normalized instance hours being increased incrementally four times. This result is only an approximation and does not reflect the actual billing rate.
        public var normalizedInstanceHours: Swift.Int?
        /// The Amazon EC2 Availability Zone for the cluster.
        public var placement: EMRClientTypes.PlacementType?
        /// The Amazon EC2 core and task node instance type.
        /// This member is required.
        public var slaveInstanceType: Swift.String?
        /// Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
        public var terminationProtected: Swift.Bool

        public init (
            ec2KeyName: Swift.String? = nil,
            ec2SubnetId: Swift.String? = nil,
            hadoopVersion: Swift.String? = nil,
            instanceCount: Swift.Int? = nil,
            instanceGroups: [EMRClientTypes.InstanceGroupDetail]? = nil,
            keepJobFlowAliveWhenNoSteps: Swift.Bool = false,
            masterInstanceId: Swift.String? = nil,
            masterInstanceType: Swift.String? = nil,
            masterPublicDnsName: Swift.String? = nil,
            normalizedInstanceHours: Swift.Int? = nil,
            placement: EMRClientTypes.PlacementType? = nil,
            slaveInstanceType: Swift.String? = nil,
            terminationProtected: Swift.Bool = false
        )
        {
            self.ec2KeyName = ec2KeyName
            self.ec2SubnetId = ec2SubnetId
            self.hadoopVersion = hadoopVersion
            self.instanceCount = instanceCount
            self.instanceGroups = instanceGroups
            self.keepJobFlowAliveWhenNoSteps = keepJobFlowAliveWhenNoSteps
            self.masterInstanceId = masterInstanceId
            self.masterInstanceType = masterInstanceType
            self.masterPublicDnsName = masterPublicDnsName
            self.normalizedInstanceHours = normalizedInstanceHours
            self.placement = placement
            self.slaveInstanceType = slaveInstanceType
            self.terminationProtected = terminationProtected
        }
    }

}

extension EMRClientTypes.KerberosAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adDomainJoinPassword = "ADDomainJoinPassword"
        case adDomainJoinUser = "ADDomainJoinUser"
        case crossRealmTrustPrincipalPassword = "CrossRealmTrustPrincipalPassword"
        case kdcAdminPassword = "KdcAdminPassword"
        case realm = "Realm"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adDomainJoinPassword = self.adDomainJoinPassword {
            try encodeContainer.encode(adDomainJoinPassword, forKey: .adDomainJoinPassword)
        }
        if let adDomainJoinUser = self.adDomainJoinUser {
            try encodeContainer.encode(adDomainJoinUser, forKey: .adDomainJoinUser)
        }
        if let crossRealmTrustPrincipalPassword = self.crossRealmTrustPrincipalPassword {
            try encodeContainer.encode(crossRealmTrustPrincipalPassword, forKey: .crossRealmTrustPrincipalPassword)
        }
        if let kdcAdminPassword = self.kdcAdminPassword {
            try encodeContainer.encode(kdcAdminPassword, forKey: .kdcAdminPassword)
        }
        if let realm = self.realm {
            try encodeContainer.encode(realm, forKey: .realm)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let realmDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .realm)
        realm = realmDecoded
        let kdcAdminPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kdcAdminPassword)
        kdcAdminPassword = kdcAdminPasswordDecoded
        let crossRealmTrustPrincipalPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .crossRealmTrustPrincipalPassword)
        crossRealmTrustPrincipalPassword = crossRealmTrustPrincipalPasswordDecoded
        let adDomainJoinUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adDomainJoinUser)
        adDomainJoinUser = adDomainJoinUserDecoded
        let adDomainJoinPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adDomainJoinPassword)
        adDomainJoinPassword = adDomainJoinPasswordDecoded
    }
}

extension EMRClientTypes {
    /// Attributes for Kerberos configuration when Kerberos authentication is enabled using a security configuration. For more information see [Use Kerberos Authentication](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-kerberos.html) in the Amazon EMR Management Guide.
    public struct KerberosAttributes: Swift.Equatable {
        /// The Active Directory password for ADDomainJoinUser.
        public var adDomainJoinPassword: Swift.String?
        /// Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain.
        public var adDomainJoinUser: Swift.String?
        /// Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password, which must be identical across realms.
        public var crossRealmTrustPrincipalPassword: Swift.String?
        /// The password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster.
        /// This member is required.
        public var kdcAdminPassword: Swift.String?
        /// The name of the Kerberos realm to which all nodes in a cluster belong. For example, EC2.INTERNAL.
        /// This member is required.
        public var realm: Swift.String?

        public init (
            adDomainJoinPassword: Swift.String? = nil,
            adDomainJoinUser: Swift.String? = nil,
            crossRealmTrustPrincipalPassword: Swift.String? = nil,
            kdcAdminPassword: Swift.String? = nil,
            realm: Swift.String? = nil
        )
        {
            self.adDomainJoinPassword = adDomainJoinPassword
            self.adDomainJoinUser = adDomainJoinUser
            self.crossRealmTrustPrincipalPassword = crossRealmTrustPrincipalPassword
            self.kdcAdminPassword = kdcAdminPassword
            self.realm = realm
        }
    }

}

extension EMRClientTypes.KeyValue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension EMRClientTypes {
    /// A key-value pair.
    public struct KeyValue: Swift.Equatable {
        /// The unique identifier of a key-value pair.
        public var key: Swift.String?
        /// The value part of the identified key.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension ListBootstrapActionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case marker = "Marker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let marker = self.marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
    }
}

extension ListBootstrapActionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// This input determines which bootstrap actions to retrieve.
public struct ListBootstrapActionsInput: Swift.Equatable {
    /// The cluster identifier for the bootstrap actions to list.
    /// This member is required.
    public var clusterId: Swift.String?
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?

    public init (
        clusterId: Swift.String? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
        self.marker = marker
    }
}

struct ListBootstrapActionsInputBody: Swift.Equatable {
    let clusterId: Swift.String?
    let marker: Swift.String?
}

extension ListBootstrapActionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListBootstrapActionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListBootstrapActionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListBootstrapActionsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListBootstrapActionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListBootstrapActionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bootstrapActions = output.bootstrapActions
            self.marker = output.marker
        } else {
            self.bootstrapActions = nil
            self.marker = nil
        }
    }
}

/// This output contains the bootstrap actions detail.
public struct ListBootstrapActionsOutputResponse: Swift.Equatable {
    /// The bootstrap actions associated with the cluster.
    public var bootstrapActions: [EMRClientTypes.Command]?
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?

    public init (
        bootstrapActions: [EMRClientTypes.Command]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.bootstrapActions = bootstrapActions
        self.marker = marker
    }
}

struct ListBootstrapActionsOutputResponseBody: Swift.Equatable {
    let bootstrapActions: [EMRClientTypes.Command]?
    let marker: Swift.String?
}

extension ListBootstrapActionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bootstrapActions = "BootstrapActions"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bootstrapActionsContainer = try containerValues.decodeIfPresent([EMRClientTypes.Command?].self, forKey: .bootstrapActions)
        var bootstrapActionsDecoded0:[EMRClientTypes.Command]? = nil
        if let bootstrapActionsContainer = bootstrapActionsContainer {
            bootstrapActionsDecoded0 = [EMRClientTypes.Command]()
            for structure0 in bootstrapActionsContainer {
                if let structure0 = structure0 {
                    bootstrapActionsDecoded0?.append(structure0)
                }
            }
        }
        bootstrapActions = bootstrapActionsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListClustersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterStates = "ClusterStates"
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case marker = "Marker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterStates = clusterStates {
            var clusterStatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .clusterStates)
            for clusterstate0 in clusterStates {
                try clusterStatesContainer.encode(clusterstate0.rawValue)
            }
        }
        if let createdAfter = self.createdAfter {
            try encodeContainer.encodeTimestamp(createdAfter, format: .epochSeconds, forKey: .createdAfter)
        }
        if let createdBefore = self.createdBefore {
            try encodeContainer.encodeTimestamp(createdBefore, format: .epochSeconds, forKey: .createdBefore)
        }
        if let marker = self.marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
    }
}

extension ListClustersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// This input determines how the ListClusters action filters the list of clusters that it returns.
public struct ListClustersInput: Swift.Equatable {
    /// The cluster state filters to apply when listing clusters. Clusters that change state while this action runs may be not be returned as expected in the list of clusters.
    public var clusterStates: [EMRClientTypes.ClusterState]?
    /// The creation date and time beginning value filter for listing clusters.
    public var createdAfter: ClientRuntime.Date?
    /// The creation date and time end value filter for listing clusters.
    public var createdBefore: ClientRuntime.Date?
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?

    public init (
        clusterStates: [EMRClientTypes.ClusterState]? = nil,
        createdAfter: ClientRuntime.Date? = nil,
        createdBefore: ClientRuntime.Date? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusterStates = clusterStates
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.marker = marker
    }
}

struct ListClustersInputBody: Swift.Equatable {
    let createdAfter: ClientRuntime.Date?
    let createdBefore: ClientRuntime.Date?
    let clusterStates: [EMRClientTypes.ClusterState]?
    let marker: Swift.String?
}

extension ListClustersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterStates = "ClusterStates"
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createdAfterDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAfter)
        createdAfter = createdAfterDecoded
        let createdBeforeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdBefore)
        createdBefore = createdBeforeDecoded
        let clusterStatesContainer = try containerValues.decodeIfPresent([EMRClientTypes.ClusterState?].self, forKey: .clusterStates)
        var clusterStatesDecoded0:[EMRClientTypes.ClusterState]? = nil
        if let clusterStatesContainer = clusterStatesContainer {
            clusterStatesDecoded0 = [EMRClientTypes.ClusterState]()
            for enum0 in clusterStatesContainer {
                if let enum0 = enum0 {
                    clusterStatesDecoded0?.append(enum0)
                }
            }
        }
        clusterStates = clusterStatesDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListClustersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListClustersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListClustersOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListClustersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListClustersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.clusters = output.clusters
            self.marker = output.marker
        } else {
            self.clusters = nil
            self.marker = nil
        }
    }
}

/// This contains a ClusterSummaryList with the cluster details; for example, the cluster IDs, names, and status.
public struct ListClustersOutputResponse: Swift.Equatable {
    /// The list of clusters for the account based on the given filters.
    public var clusters: [EMRClientTypes.ClusterSummary]?
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?

    public init (
        clusters: [EMRClientTypes.ClusterSummary]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusters = clusters
        self.marker = marker
    }
}

struct ListClustersOutputResponseBody: Swift.Equatable {
    let clusters: [EMRClientTypes.ClusterSummary]?
    let marker: Swift.String?
}

extension ListClustersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusters = "Clusters"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clustersContainer = try containerValues.decodeIfPresent([EMRClientTypes.ClusterSummary?].self, forKey: .clusters)
        var clustersDecoded0:[EMRClientTypes.ClusterSummary]? = nil
        if let clustersContainer = clustersContainer {
            clustersDecoded0 = [EMRClientTypes.ClusterSummary]()
            for structure0 in clustersContainer {
                if let structure0 = structure0 {
                    clustersDecoded0?.append(structure0)
                }
            }
        }
        clusters = clustersDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListInstanceFleetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case marker = "Marker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let marker = self.marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
    }
}

extension ListInstanceFleetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListInstanceFleetsInput: Swift.Equatable {
    /// The unique identifier of the cluster.
    /// This member is required.
    public var clusterId: Swift.String?
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?

    public init (
        clusterId: Swift.String? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
        self.marker = marker
    }
}

struct ListInstanceFleetsInputBody: Swift.Equatable {
    let clusterId: Swift.String?
    let marker: Swift.String?
}

extension ListInstanceFleetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListInstanceFleetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInstanceFleetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListInstanceFleetsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInstanceFleetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListInstanceFleetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceFleets = output.instanceFleets
            self.marker = output.marker
        } else {
            self.instanceFleets = nil
            self.marker = nil
        }
    }
}

public struct ListInstanceFleetsOutputResponse: Swift.Equatable {
    /// The list of instance fleets for the cluster and given filters.
    public var instanceFleets: [EMRClientTypes.InstanceFleet]?
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?

    public init (
        instanceFleets: [EMRClientTypes.InstanceFleet]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.instanceFleets = instanceFleets
        self.marker = marker
    }
}

struct ListInstanceFleetsOutputResponseBody: Swift.Equatable {
    let instanceFleets: [EMRClientTypes.InstanceFleet]?
    let marker: Swift.String?
}

extension ListInstanceFleetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceFleets = "InstanceFleets"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceFleetsContainer = try containerValues.decodeIfPresent([EMRClientTypes.InstanceFleet?].self, forKey: .instanceFleets)
        var instanceFleetsDecoded0:[EMRClientTypes.InstanceFleet]? = nil
        if let instanceFleetsContainer = instanceFleetsContainer {
            instanceFleetsDecoded0 = [EMRClientTypes.InstanceFleet]()
            for structure0 in instanceFleetsContainer {
                if let structure0 = structure0 {
                    instanceFleetsDecoded0?.append(structure0)
                }
            }
        }
        instanceFleets = instanceFleetsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListInstanceGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case marker = "Marker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let marker = self.marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
    }
}

extension ListInstanceGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// This input determines which instance groups to retrieve.
public struct ListInstanceGroupsInput: Swift.Equatable {
    /// The identifier of the cluster for which to list the instance groups.
    /// This member is required.
    public var clusterId: Swift.String?
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?

    public init (
        clusterId: Swift.String? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
        self.marker = marker
    }
}

struct ListInstanceGroupsInputBody: Swift.Equatable {
    let clusterId: Swift.String?
    let marker: Swift.String?
}

extension ListInstanceGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListInstanceGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInstanceGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListInstanceGroupsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInstanceGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListInstanceGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceGroups = output.instanceGroups
            self.marker = output.marker
        } else {
            self.instanceGroups = nil
            self.marker = nil
        }
    }
}

/// This input determines which instance groups to retrieve.
public struct ListInstanceGroupsOutputResponse: Swift.Equatable {
    /// The list of instance groups for the cluster and given filters.
    public var instanceGroups: [EMRClientTypes.InstanceGroup]?
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?

    public init (
        instanceGroups: [EMRClientTypes.InstanceGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.instanceGroups = instanceGroups
        self.marker = marker
    }
}

struct ListInstanceGroupsOutputResponseBody: Swift.Equatable {
    let instanceGroups: [EMRClientTypes.InstanceGroup]?
    let marker: Swift.String?
}

extension ListInstanceGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceGroups = "InstanceGroups"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceGroupsContainer = try containerValues.decodeIfPresent([EMRClientTypes.InstanceGroup?].self, forKey: .instanceGroups)
        var instanceGroupsDecoded0:[EMRClientTypes.InstanceGroup]? = nil
        if let instanceGroupsContainer = instanceGroupsContainer {
            instanceGroupsDecoded0 = [EMRClientTypes.InstanceGroup]()
            for structure0 in instanceGroupsContainer {
                if let structure0 = structure0 {
                    instanceGroupsDecoded0?.append(structure0)
                }
            }
        }
        instanceGroups = instanceGroupsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListInstancesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case instanceFleetId = "InstanceFleetId"
        case instanceFleetType = "InstanceFleetType"
        case instanceGroupId = "InstanceGroupId"
        case instanceGroupTypes = "InstanceGroupTypes"
        case instanceStates = "InstanceStates"
        case marker = "Marker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let instanceFleetId = self.instanceFleetId {
            try encodeContainer.encode(instanceFleetId, forKey: .instanceFleetId)
        }
        if let instanceFleetType = self.instanceFleetType {
            try encodeContainer.encode(instanceFleetType.rawValue, forKey: .instanceFleetType)
        }
        if let instanceGroupId = self.instanceGroupId {
            try encodeContainer.encode(instanceGroupId, forKey: .instanceGroupId)
        }
        if let instanceGroupTypes = instanceGroupTypes {
            var instanceGroupTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceGroupTypes)
            for instancegrouptype0 in instanceGroupTypes {
                try instanceGroupTypesContainer.encode(instancegrouptype0.rawValue)
            }
        }
        if let instanceStates = instanceStates {
            var instanceStatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceStates)
            for instancestate0 in instanceStates {
                try instanceStatesContainer.encode(instancestate0.rawValue)
            }
        }
        if let marker = self.marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
    }
}

extension ListInstancesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// This input determines which instances to list.
public struct ListInstancesInput: Swift.Equatable {
    /// The identifier of the cluster for which to list the instances.
    /// This member is required.
    public var clusterId: Swift.String?
    /// The unique identifier of the instance fleet.
    public var instanceFleetId: Swift.String?
    /// The node type of the instance fleet. For example MASTER, CORE, or TASK.
    public var instanceFleetType: EMRClientTypes.InstanceFleetType?
    /// The identifier of the instance group for which to list the instances.
    public var instanceGroupId: Swift.String?
    /// The type of instance group for which to list the instances.
    public var instanceGroupTypes: [EMRClientTypes.InstanceGroupType]?
    /// A list of instance states that will filter the instances returned with this request.
    public var instanceStates: [EMRClientTypes.InstanceState]?
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?

    public init (
        clusterId: Swift.String? = nil,
        instanceFleetId: Swift.String? = nil,
        instanceFleetType: EMRClientTypes.InstanceFleetType? = nil,
        instanceGroupId: Swift.String? = nil,
        instanceGroupTypes: [EMRClientTypes.InstanceGroupType]? = nil,
        instanceStates: [EMRClientTypes.InstanceState]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
        self.instanceFleetId = instanceFleetId
        self.instanceFleetType = instanceFleetType
        self.instanceGroupId = instanceGroupId
        self.instanceGroupTypes = instanceGroupTypes
        self.instanceStates = instanceStates
        self.marker = marker
    }
}

struct ListInstancesInputBody: Swift.Equatable {
    let clusterId: Swift.String?
    let instanceGroupId: Swift.String?
    let instanceGroupTypes: [EMRClientTypes.InstanceGroupType]?
    let instanceFleetId: Swift.String?
    let instanceFleetType: EMRClientTypes.InstanceFleetType?
    let instanceStates: [EMRClientTypes.InstanceState]?
    let marker: Swift.String?
}

extension ListInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case instanceFleetId = "InstanceFleetId"
        case instanceFleetType = "InstanceFleetType"
        case instanceGroupId = "InstanceGroupId"
        case instanceGroupTypes = "InstanceGroupTypes"
        case instanceStates = "InstanceStates"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let instanceGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceGroupId)
        instanceGroupId = instanceGroupIdDecoded
        let instanceGroupTypesContainer = try containerValues.decodeIfPresent([EMRClientTypes.InstanceGroupType?].self, forKey: .instanceGroupTypes)
        var instanceGroupTypesDecoded0:[EMRClientTypes.InstanceGroupType]? = nil
        if let instanceGroupTypesContainer = instanceGroupTypesContainer {
            instanceGroupTypesDecoded0 = [EMRClientTypes.InstanceGroupType]()
            for enum0 in instanceGroupTypesContainer {
                if let enum0 = enum0 {
                    instanceGroupTypesDecoded0?.append(enum0)
                }
            }
        }
        instanceGroupTypes = instanceGroupTypesDecoded0
        let instanceFleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceFleetId)
        instanceFleetId = instanceFleetIdDecoded
        let instanceFleetTypeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceFleetType.self, forKey: .instanceFleetType)
        instanceFleetType = instanceFleetTypeDecoded
        let instanceStatesContainer = try containerValues.decodeIfPresent([EMRClientTypes.InstanceState?].self, forKey: .instanceStates)
        var instanceStatesDecoded0:[EMRClientTypes.InstanceState]? = nil
        if let instanceStatesContainer = instanceStatesContainer {
            instanceStatesDecoded0 = [EMRClientTypes.InstanceState]()
            for enum0 in instanceStatesContainer {
                if let enum0 = enum0 {
                    instanceStatesDecoded0?.append(enum0)
                }
            }
        }
        instanceStates = instanceStatesDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListInstancesOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instances = output.instances
            self.marker = output.marker
        } else {
            self.instances = nil
            self.marker = nil
        }
    }
}

/// This output contains the list of instances.
public struct ListInstancesOutputResponse: Swift.Equatable {
    /// The list of instances for the cluster and given filters.
    public var instances: [EMRClientTypes.Instance]?
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?

    public init (
        instances: [EMRClientTypes.Instance]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.instances = instances
        self.marker = marker
    }
}

struct ListInstancesOutputResponseBody: Swift.Equatable {
    let instances: [EMRClientTypes.Instance]?
    let marker: Swift.String?
}

extension ListInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instances = "Instances"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instancesContainer = try containerValues.decodeIfPresent([EMRClientTypes.Instance?].self, forKey: .instances)
        var instancesDecoded0:[EMRClientTypes.Instance]? = nil
        if let instancesContainer = instancesContainer {
            instancesDecoded0 = [EMRClientTypes.Instance]()
            for structure0 in instancesContainer {
                if let structure0 = structure0 {
                    instancesDecoded0?.append(structure0)
                }
            }
        }
        instances = instancesDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListNotebookExecutionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case editorId = "EditorId"
        case from = "From"
        case marker = "Marker"
        case status = "Status"
        case to = "To"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let editorId = self.editorId {
            try encodeContainer.encode(editorId, forKey: .editorId)
        }
        if let from = self.from {
            try encodeContainer.encodeTimestamp(from, format: .epochSeconds, forKey: .from)
        }
        if let marker = self.marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let to = self.to {
            try encodeContainer.encodeTimestamp(to, format: .epochSeconds, forKey: .to)
        }
    }
}

extension ListNotebookExecutionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListNotebookExecutionsInput: Swift.Equatable {
    /// The unique ID of the editor associated with the notebook execution.
    public var editorId: Swift.String?
    /// The beginning of time range filter for listing notebook executions. The default is the timestamp of 30 days ago.
    public var from: ClientRuntime.Date?
    /// The pagination token, returned by a previous ListNotebookExecutions call, that indicates the start of the list for this ListNotebookExecutions call.
    public var marker: Swift.String?
    /// The status filter for listing notebook executions.
    ///
    /// * START_PENDING indicates that the cluster has received the execution request but execution has not begun.
    ///
    /// * STARTING indicates that the execution is starting on the cluster.
    ///
    /// * RUNNING indicates that the execution is being processed by the cluster.
    ///
    /// * FINISHING indicates that execution processing is in the final stages.
    ///
    /// * FINISHED indicates that the execution has completed without error.
    ///
    /// * FAILING indicates that the execution is failing and will not finish successfully.
    ///
    /// * FAILED indicates that the execution failed.
    ///
    /// * STOP_PENDING indicates that the cluster has received a StopNotebookExecution request and the stop is pending.
    ///
    /// * STOPPING indicates that the cluster is in the process of stopping the execution as a result of a StopNotebookExecution request.
    ///
    /// * STOPPED indicates that the execution stopped because of a StopNotebookExecution request.
    public var status: EMRClientTypes.NotebookExecutionStatus?
    /// The end of time range filter for listing notebook executions. The default is the current timestamp.
    public var to: ClientRuntime.Date?

    public init (
        editorId: Swift.String? = nil,
        from: ClientRuntime.Date? = nil,
        marker: Swift.String? = nil,
        status: EMRClientTypes.NotebookExecutionStatus? = nil,
        to: ClientRuntime.Date? = nil
    )
    {
        self.editorId = editorId
        self.from = from
        self.marker = marker
        self.status = status
        self.to = to
    }
}

struct ListNotebookExecutionsInputBody: Swift.Equatable {
    let editorId: Swift.String?
    let status: EMRClientTypes.NotebookExecutionStatus?
    let from: ClientRuntime.Date?
    let to: ClientRuntime.Date?
    let marker: Swift.String?
}

extension ListNotebookExecutionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case editorId = "EditorId"
        case from = "From"
        case marker = "Marker"
        case status = "Status"
        case to = "To"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let editorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .editorId)
        editorId = editorIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EMRClientTypes.NotebookExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let fromDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .from)
        from = fromDecoded
        let toDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .to)
        to = toDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListNotebookExecutionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListNotebookExecutionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailure" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListNotebookExecutionsOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListNotebookExecutionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListNotebookExecutionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.notebookExecutions = output.notebookExecutions
        } else {
            self.marker = nil
            self.notebookExecutions = nil
        }
    }
}

public struct ListNotebookExecutionsOutputResponse: Swift.Equatable {
    /// A pagination token that a subsequent ListNotebookExecutions can use to determine the next set of results to retrieve.
    public var marker: Swift.String?
    /// A list of notebook executions.
    public var notebookExecutions: [EMRClientTypes.NotebookExecutionSummary]?

    public init (
        marker: Swift.String? = nil,
        notebookExecutions: [EMRClientTypes.NotebookExecutionSummary]? = nil
    )
    {
        self.marker = marker
        self.notebookExecutions = notebookExecutions
    }
}

struct ListNotebookExecutionsOutputResponseBody: Swift.Equatable {
    let notebookExecutions: [EMRClientTypes.NotebookExecutionSummary]?
    let marker: Swift.String?
}

extension ListNotebookExecutionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case notebookExecutions = "NotebookExecutions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookExecutionsContainer = try containerValues.decodeIfPresent([EMRClientTypes.NotebookExecutionSummary?].self, forKey: .notebookExecutions)
        var notebookExecutionsDecoded0:[EMRClientTypes.NotebookExecutionSummary]? = nil
        if let notebookExecutionsContainer = notebookExecutionsContainer {
            notebookExecutionsDecoded0 = [EMRClientTypes.NotebookExecutionSummary]()
            for structure0 in notebookExecutionsContainer {
                if let structure0 = structure0 {
                    notebookExecutionsDecoded0?.append(structure0)
                }
            }
        }
        notebookExecutions = notebookExecutionsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListReleaseLabelsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = self.filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListReleaseLabelsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListReleaseLabelsInput: Swift.Equatable {
    /// Filters the results of the request. Prefix specifies the prefix of release labels to return. Application specifies the application (with/without version) of release labels to return.
    public var filters: EMRClientTypes.ReleaseLabelFilter?
    /// Defines the maximum number of release labels to return in a single response. The default is 100.
    public var maxResults: Swift.Int?
    /// Specifies the next page of results. If NextToken is not specified, which is usually the case for the first request of ListReleaseLabels, the first page of results are determined by other filtering parameters or by the latest version. The ListReleaseLabels request fails if the identity (Amazon Web Services account ID) and all filtering parameters are different from the original request, or if the NextToken is expired or tampered with.
    public var nextToken: Swift.String?

    public init (
        filters: EMRClientTypes.ReleaseLabelFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListReleaseLabelsInputBody: Swift.Equatable {
    let filters: EMRClientTypes.ReleaseLabelFilter?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListReleaseLabelsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ReleaseLabelFilter.self, forKey: .filters)
        filters = filtersDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListReleaseLabelsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListReleaseLabelsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListReleaseLabelsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListReleaseLabelsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListReleaseLabelsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.releaseLabels = output.releaseLabels
        } else {
            self.nextToken = nil
            self.releaseLabels = nil
        }
    }
}

public struct ListReleaseLabelsOutputResponse: Swift.Equatable {
    /// Used to paginate the next page of results if specified in the next ListReleaseLabels request.
    public var nextToken: Swift.String?
    /// The returned release labels.
    public var releaseLabels: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        releaseLabels: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.releaseLabels = releaseLabels
    }
}

struct ListReleaseLabelsOutputResponseBody: Swift.Equatable {
    let releaseLabels: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListReleaseLabelsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case releaseLabels = "ReleaseLabels"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let releaseLabelsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .releaseLabels)
        var releaseLabelsDecoded0:[Swift.String]? = nil
        if let releaseLabelsContainer = releaseLabelsContainer {
            releaseLabelsDecoded0 = [Swift.String]()
            for string0 in releaseLabelsContainer {
                if let string0 = string0 {
                    releaseLabelsDecoded0?.append(string0)
                }
            }
        }
        releaseLabels = releaseLabelsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListSecurityConfigurationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let marker = self.marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
    }
}

extension ListSecurityConfigurationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListSecurityConfigurationsInput: Swift.Equatable {
    /// The pagination token that indicates the set of results to retrieve.
    public var marker: Swift.String?

    public init (
        marker: Swift.String? = nil
    )
    {
        self.marker = marker
    }
}

struct ListSecurityConfigurationsInputBody: Swift.Equatable {
    let marker: Swift.String?
}

extension ListSecurityConfigurationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListSecurityConfigurationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSecurityConfigurationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListSecurityConfigurationsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSecurityConfigurationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListSecurityConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.securityConfigurations = output.securityConfigurations
        } else {
            self.marker = nil
            self.securityConfigurations = nil
        }
    }
}

public struct ListSecurityConfigurationsOutputResponse: Swift.Equatable {
    /// A pagination token that indicates the next set of results to retrieve. Include the marker in the next ListSecurityConfiguration call to retrieve the next page of results, if required.
    public var marker: Swift.String?
    /// The creation date and time, and name, of each security configuration.
    public var securityConfigurations: [EMRClientTypes.SecurityConfigurationSummary]?

    public init (
        marker: Swift.String? = nil,
        securityConfigurations: [EMRClientTypes.SecurityConfigurationSummary]? = nil
    )
    {
        self.marker = marker
        self.securityConfigurations = securityConfigurations
    }
}

struct ListSecurityConfigurationsOutputResponseBody: Swift.Equatable {
    let securityConfigurations: [EMRClientTypes.SecurityConfigurationSummary]?
    let marker: Swift.String?
}

extension ListSecurityConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case securityConfigurations = "SecurityConfigurations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityConfigurationsContainer = try containerValues.decodeIfPresent([EMRClientTypes.SecurityConfigurationSummary?].self, forKey: .securityConfigurations)
        var securityConfigurationsDecoded0:[EMRClientTypes.SecurityConfigurationSummary]? = nil
        if let securityConfigurationsContainer = securityConfigurationsContainer {
            securityConfigurationsDecoded0 = [EMRClientTypes.SecurityConfigurationSummary]()
            for structure0 in securityConfigurationsContainer {
                if let structure0 = structure0 {
                    securityConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        securityConfigurations = securityConfigurationsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListStepsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case marker = "Marker"
        case stepIds = "StepIds"
        case stepStates = "StepStates"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let marker = self.marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
        if let stepIds = stepIds {
            var stepIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stepIds)
            for xmlstring0 in stepIds {
                try stepIdsContainer.encode(xmlstring0)
            }
        }
        if let stepStates = stepStates {
            var stepStatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stepStates)
            for stepstate0 in stepStates {
                try stepStatesContainer.encode(stepstate0.rawValue)
            }
        }
    }
}

extension ListStepsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// This input determines which steps to list.
public struct ListStepsInput: Swift.Equatable {
    /// The identifier of the cluster for which to list the steps.
    /// This member is required.
    public var clusterId: Swift.String?
    /// The maximum number of steps that a single ListSteps action returns is 50. To return a longer list of steps, use multiple ListSteps actions along with the Marker parameter, which is a pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?
    /// The filter to limit the step list based on the identifier of the steps. You can specify a maximum of ten Step IDs. The character constraint applies to the overall length of the array.
    public var stepIds: [Swift.String]?
    /// The filter to limit the step list based on certain states.
    public var stepStates: [EMRClientTypes.StepState]?

    public init (
        clusterId: Swift.String? = nil,
        marker: Swift.String? = nil,
        stepIds: [Swift.String]? = nil,
        stepStates: [EMRClientTypes.StepState]? = nil
    )
    {
        self.clusterId = clusterId
        self.marker = marker
        self.stepIds = stepIds
        self.stepStates = stepStates
    }
}

struct ListStepsInputBody: Swift.Equatable {
    let clusterId: Swift.String?
    let stepStates: [EMRClientTypes.StepState]?
    let stepIds: [Swift.String]?
    let marker: Swift.String?
}

extension ListStepsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case marker = "Marker"
        case stepIds = "StepIds"
        case stepStates = "StepStates"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let stepStatesContainer = try containerValues.decodeIfPresent([EMRClientTypes.StepState?].self, forKey: .stepStates)
        var stepStatesDecoded0:[EMRClientTypes.StepState]? = nil
        if let stepStatesContainer = stepStatesContainer {
            stepStatesDecoded0 = [EMRClientTypes.StepState]()
            for enum0 in stepStatesContainer {
                if let enum0 = enum0 {
                    stepStatesDecoded0?.append(enum0)
                }
            }
        }
        stepStates = stepStatesDecoded0
        let stepIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .stepIds)
        var stepIdsDecoded0:[Swift.String]? = nil
        if let stepIdsContainer = stepIdsContainer {
            stepIdsDecoded0 = [Swift.String]()
            for string0 in stepIdsContainer {
                if let string0 = string0 {
                    stepIdsDecoded0?.append(string0)
                }
            }
        }
        stepIds = stepIdsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListStepsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListStepsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListStepsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStepsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListStepsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.steps = output.steps
        } else {
            self.marker = nil
            self.steps = nil
        }
    }
}

/// This output contains the list of steps returned in reverse order. This means that the last step is the first element in the list.
public struct ListStepsOutputResponse: Swift.Equatable {
    /// The maximum number of steps that a single ListSteps action returns is 50. To return a longer list of steps, use multiple ListSteps actions along with the Marker parameter, which is a pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?
    /// The filtered list of steps for the cluster.
    public var steps: [EMRClientTypes.StepSummary]?

    public init (
        marker: Swift.String? = nil,
        steps: [EMRClientTypes.StepSummary]? = nil
    )
    {
        self.marker = marker
        self.steps = steps
    }
}

struct ListStepsOutputResponseBody: Swift.Equatable {
    let steps: [EMRClientTypes.StepSummary]?
    let marker: Swift.String?
}

extension ListStepsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case steps = "Steps"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stepsContainer = try containerValues.decodeIfPresent([EMRClientTypes.StepSummary?].self, forKey: .steps)
        var stepsDecoded0:[EMRClientTypes.StepSummary]? = nil
        if let stepsContainer = stepsContainer {
            stepsDecoded0 = [EMRClientTypes.StepSummary]()
            for structure0 in stepsContainer {
                if let structure0 = structure0 {
                    stepsDecoded0?.append(structure0)
                }
            }
        }
        steps = stepsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListStudioSessionMappingsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityType = "IdentityType"
        case marker = "Marker"
        case studioId = "StudioId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identityType = self.identityType {
            try encodeContainer.encode(identityType.rawValue, forKey: .identityType)
        }
        if let marker = self.marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
        if let studioId = self.studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
    }
}

extension ListStudioSessionMappingsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListStudioSessionMappingsInput: Swift.Equatable {
    /// Specifies whether to return session mappings for users or groups. If not specified, the results include session mapping details for both users and groups.
    public var identityType: EMRClientTypes.IdentityType?
    /// The pagination token that indicates the set of results to retrieve.
    public var marker: Swift.String?
    /// The ID of the Amazon EMR Studio.
    public var studioId: Swift.String?

    public init (
        identityType: EMRClientTypes.IdentityType? = nil,
        marker: Swift.String? = nil,
        studioId: Swift.String? = nil
    )
    {
        self.identityType = identityType
        self.marker = marker
        self.studioId = studioId
    }
}

struct ListStudioSessionMappingsInputBody: Swift.Equatable {
    let studioId: Swift.String?
    let identityType: EMRClientTypes.IdentityType?
    let marker: Swift.String?
}

extension ListStudioSessionMappingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityType = "IdentityType"
        case marker = "Marker"
        case studioId = "StudioId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let identityTypeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListStudioSessionMappingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListStudioSessionMappingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailure" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListStudioSessionMappingsOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStudioSessionMappingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListStudioSessionMappingsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.sessionMappings = output.sessionMappings
        } else {
            self.marker = nil
            self.sessionMappings = nil
        }
    }
}

public struct ListStudioSessionMappingsOutputResponse: Swift.Equatable {
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?
    /// A list of session mapping summary objects. Each object includes session mapping details such as creation time, identity type (user or group), and Amazon EMR Studio ID.
    public var sessionMappings: [EMRClientTypes.SessionMappingSummary]?

    public init (
        marker: Swift.String? = nil,
        sessionMappings: [EMRClientTypes.SessionMappingSummary]? = nil
    )
    {
        self.marker = marker
        self.sessionMappings = sessionMappings
    }
}

struct ListStudioSessionMappingsOutputResponseBody: Swift.Equatable {
    let sessionMappings: [EMRClientTypes.SessionMappingSummary]?
    let marker: Swift.String?
}

extension ListStudioSessionMappingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case sessionMappings = "SessionMappings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sessionMappingsContainer = try containerValues.decodeIfPresent([EMRClientTypes.SessionMappingSummary?].self, forKey: .sessionMappings)
        var sessionMappingsDecoded0:[EMRClientTypes.SessionMappingSummary]? = nil
        if let sessionMappingsContainer = sessionMappingsContainer {
            sessionMappingsDecoded0 = [EMRClientTypes.SessionMappingSummary]()
            for structure0 in sessionMappingsContainer {
                if let structure0 = structure0 {
                    sessionMappingsDecoded0?.append(structure0)
                }
            }
        }
        sessionMappings = sessionMappingsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListStudiosInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let marker = self.marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
    }
}

extension ListStudiosInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListStudiosInput: Swift.Equatable {
    /// The pagination token that indicates the set of results to retrieve.
    public var marker: Swift.String?

    public init (
        marker: Swift.String? = nil
    )
    {
        self.marker = marker
    }
}

struct ListStudiosInputBody: Swift.Equatable {
    let marker: Swift.String?
}

extension ListStudiosInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListStudiosOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListStudiosOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListStudiosOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStudiosOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListStudiosOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.studios = output.studios
        } else {
            self.marker = nil
            self.studios = nil
        }
    }
}

public struct ListStudiosOutputResponse: Swift.Equatable {
    /// The pagination token that indicates the next set of results to retrieve.
    public var marker: Swift.String?
    /// The list of Studio summary objects.
    public var studios: [EMRClientTypes.StudioSummary]?

    public init (
        marker: Swift.String? = nil,
        studios: [EMRClientTypes.StudioSummary]? = nil
    )
    {
        self.marker = marker
        self.studios = studios
    }
}

struct ListStudiosOutputResponseBody: Swift.Equatable {
    let studios: [EMRClientTypes.StudioSummary]?
    let marker: Swift.String?
}

extension ListStudiosOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case studios = "Studios"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studiosContainer = try containerValues.decodeIfPresent([EMRClientTypes.StudioSummary?].self, forKey: .studios)
        var studiosDecoded0:[EMRClientTypes.StudioSummary]? = nil
        if let studiosContainer = studiosContainer {
            studiosDecoded0 = [EMRClientTypes.StudioSummary]()
            for structure0 in studiosContainer {
                if let structure0 = structure0 {
                    studiosDecoded0?.append(structure0)
                }
            }
        }
        studios = studiosDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension EMRClientTypes.ManagedScalingPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeLimits = "ComputeLimits"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeLimits = self.computeLimits {
            try encodeContainer.encode(computeLimits, forKey: .computeLimits)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeLimitsDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ComputeLimits.self, forKey: .computeLimits)
        computeLimits = computeLimitsDecoded
    }
}

extension EMRClientTypes {
    /// Managed scaling policy for an Amazon EMR cluster. The policy specifies the limits for resources that can be added or terminated from a cluster. The policy only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
    public struct ManagedScalingPolicy: Swift.Equatable {
        /// The EC2 unit limits for a managed scaling policy. The managed scaling activity of a cluster is not allowed to go above or below these limits. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
        public var computeLimits: EMRClientTypes.ComputeLimits?

        public init (
            computeLimits: EMRClientTypes.ComputeLimits? = nil
        )
        {
            self.computeLimits = computeLimits
        }
    }

}

extension EMRClientTypes {
    public enum MarketType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case onDemand
        case spot
        case sdkUnknown(Swift.String)

        public static var allCases: [MarketType] {
            return [
                .onDemand,
                .spot,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .onDemand: return "ON_DEMAND"
            case .spot: return "SPOT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MarketType(rawValue: rawValue) ?? MarketType.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.MetricDimension: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension EMRClientTypes {
    /// A CloudWatch dimension, which is specified using a Key (known as a Name in CloudWatch), Value pair. By default, Amazon EMR uses one dimension whose Key is JobFlowID and Value is a variable representing the cluster ID, which is ${emr.clusterId}. This enables the rule to bootstrap when the cluster ID becomes available.
    public struct MetricDimension: Swift.Equatable {
        /// The dimension name.
        public var key: Swift.String?
        /// The dimension value.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension ModifyClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case stepConcurrencyLevel = "StepConcurrencyLevel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let stepConcurrencyLevel = self.stepConcurrencyLevel {
            try encodeContainer.encode(stepConcurrencyLevel, forKey: .stepConcurrencyLevel)
        }
    }
}

extension ModifyClusterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ModifyClusterInput: Swift.Equatable {
    /// The unique identifier of the cluster.
    /// This member is required.
    public var clusterId: Swift.String?
    /// The number of steps that can be executed concurrently. You can specify a minimum of 1 step and a maximum of 256 steps. We recommend that you do not change this parameter while steps are running or the ActionOnFailure setting may not behave as expected. For more information see [Step$ActionOnFailure].
    public var stepConcurrencyLevel: Swift.Int?

    public init (
        clusterId: Swift.String? = nil,
        stepConcurrencyLevel: Swift.Int? = nil
    )
    {
        self.clusterId = clusterId
        self.stepConcurrencyLevel = stepConcurrencyLevel
    }
}

struct ModifyClusterInputBody: Swift.Equatable {
    let clusterId: Swift.String?
    let stepConcurrencyLevel: Swift.Int?
}

extension ModifyClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case stepConcurrencyLevel = "StepConcurrencyLevel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let stepConcurrencyLevelDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .stepConcurrencyLevel)
        stepConcurrencyLevel = stepConcurrencyLevelDecoded
    }
}

extension ModifyClusterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ModifyClusterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailure" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ModifyClusterOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ModifyClusterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ModifyClusterOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stepConcurrencyLevel = output.stepConcurrencyLevel
        } else {
            self.stepConcurrencyLevel = nil
        }
    }
}

public struct ModifyClusterOutputResponse: Swift.Equatable {
    /// The number of steps that can be executed concurrently.
    public var stepConcurrencyLevel: Swift.Int?

    public init (
        stepConcurrencyLevel: Swift.Int? = nil
    )
    {
        self.stepConcurrencyLevel = stepConcurrencyLevel
    }
}

struct ModifyClusterOutputResponseBody: Swift.Equatable {
    let stepConcurrencyLevel: Swift.Int?
}

extension ModifyClusterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stepConcurrencyLevel = "StepConcurrencyLevel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stepConcurrencyLevelDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .stepConcurrencyLevel)
        stepConcurrencyLevel = stepConcurrencyLevelDecoded
    }
}

extension ModifyInstanceFleetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case instanceFleet = "InstanceFleet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let instanceFleet = self.instanceFleet {
            try encodeContainer.encode(instanceFleet, forKey: .instanceFleet)
        }
    }
}

extension ModifyInstanceFleetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ModifyInstanceFleetInput: Swift.Equatable {
    /// The unique identifier of the cluster.
    /// This member is required.
    public var clusterId: Swift.String?
    /// The configuration parameters of the instance fleet.
    /// This member is required.
    public var instanceFleet: EMRClientTypes.InstanceFleetModifyConfig?

    public init (
        clusterId: Swift.String? = nil,
        instanceFleet: EMRClientTypes.InstanceFleetModifyConfig? = nil
    )
    {
        self.clusterId = clusterId
        self.instanceFleet = instanceFleet
    }
}

struct ModifyInstanceFleetInputBody: Swift.Equatable {
    let clusterId: Swift.String?
    let instanceFleet: EMRClientTypes.InstanceFleetModifyConfig?
}

extension ModifyInstanceFleetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case instanceFleet = "InstanceFleet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let instanceFleetDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceFleetModifyConfig.self, forKey: .instanceFleet)
        instanceFleet = instanceFleetDecoded
    }
}

extension ModifyInstanceFleetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ModifyInstanceFleetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ModifyInstanceFleetOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ModifyInstanceFleetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct ModifyInstanceFleetOutputResponse: Swift.Equatable {

    public init () { }
}

extension ModifyInstanceGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case instanceGroups = "InstanceGroups"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let instanceGroups = instanceGroups {
            var instanceGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceGroups)
            for instancegroupmodifyconfig0 in instanceGroups {
                try instanceGroupsContainer.encode(instancegroupmodifyconfig0)
            }
        }
    }
}

extension ModifyInstanceGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Change the size of some instance groups.
public struct ModifyInstanceGroupsInput: Swift.Equatable {
    /// The ID of the cluster to which the instance group belongs.
    public var clusterId: Swift.String?
    /// Instance groups to change.
    public var instanceGroups: [EMRClientTypes.InstanceGroupModifyConfig]?

    public init (
        clusterId: Swift.String? = nil,
        instanceGroups: [EMRClientTypes.InstanceGroupModifyConfig]? = nil
    )
    {
        self.clusterId = clusterId
        self.instanceGroups = instanceGroups
    }
}

struct ModifyInstanceGroupsInputBody: Swift.Equatable {
    let clusterId: Swift.String?
    let instanceGroups: [EMRClientTypes.InstanceGroupModifyConfig]?
}

extension ModifyInstanceGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case instanceGroups = "InstanceGroups"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let instanceGroupsContainer = try containerValues.decodeIfPresent([EMRClientTypes.InstanceGroupModifyConfig?].self, forKey: .instanceGroups)
        var instanceGroupsDecoded0:[EMRClientTypes.InstanceGroupModifyConfig]? = nil
        if let instanceGroupsContainer = instanceGroupsContainer {
            instanceGroupsDecoded0 = [EMRClientTypes.InstanceGroupModifyConfig]()
            for structure0 in instanceGroupsContainer {
                if let structure0 = structure0 {
                    instanceGroupsDecoded0?.append(structure0)
                }
            }
        }
        instanceGroups = instanceGroupsDecoded0
    }
}

extension ModifyInstanceGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ModifyInstanceGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailure" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ModifyInstanceGroupsOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension ModifyInstanceGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct ModifyInstanceGroupsOutputResponse: Swift.Equatable {

    public init () { }
}

extension EMRClientTypes.NotebookExecution: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case editorId = "EditorId"
        case endTime = "EndTime"
        case executionEngine = "ExecutionEngine"
        case lastStateChangeReason = "LastStateChangeReason"
        case notebookExecutionId = "NotebookExecutionId"
        case notebookExecutionName = "NotebookExecutionName"
        case notebookInstanceSecurityGroupId = "NotebookInstanceSecurityGroupId"
        case notebookParams = "NotebookParams"
        case outputNotebookURI = "OutputNotebookURI"
        case startTime = "StartTime"
        case status = "Status"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let editorId = self.editorId {
            try encodeContainer.encode(editorId, forKey: .editorId)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let executionEngine = self.executionEngine {
            try encodeContainer.encode(executionEngine, forKey: .executionEngine)
        }
        if let lastStateChangeReason = self.lastStateChangeReason {
            try encodeContainer.encode(lastStateChangeReason, forKey: .lastStateChangeReason)
        }
        if let notebookExecutionId = self.notebookExecutionId {
            try encodeContainer.encode(notebookExecutionId, forKey: .notebookExecutionId)
        }
        if let notebookExecutionName = self.notebookExecutionName {
            try encodeContainer.encode(notebookExecutionName, forKey: .notebookExecutionName)
        }
        if let notebookInstanceSecurityGroupId = self.notebookInstanceSecurityGroupId {
            try encodeContainer.encode(notebookInstanceSecurityGroupId, forKey: .notebookInstanceSecurityGroupId)
        }
        if let notebookParams = self.notebookParams {
            try encodeContainer.encode(notebookParams, forKey: .notebookParams)
        }
        if let outputNotebookURI = self.outputNotebookURI {
            try encodeContainer.encode(outputNotebookURI, forKey: .outputNotebookURI)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookExecutionId)
        notebookExecutionId = notebookExecutionIdDecoded
        let editorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .editorId)
        editorId = editorIdDecoded
        let executionEngineDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ExecutionEngineConfig.self, forKey: .executionEngine)
        executionEngine = executionEngineDecoded
        let notebookExecutionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookExecutionName)
        notebookExecutionName = notebookExecutionNameDecoded
        let notebookParamsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookParams)
        notebookParams = notebookParamsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EMRClientTypes.NotebookExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let outputNotebookURIDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputNotebookURI)
        outputNotebookURI = outputNotebookURIDecoded
        let lastStateChangeReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastStateChangeReason)
        lastStateChangeReason = lastStateChangeReasonDecoded
        let notebookInstanceSecurityGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceSecurityGroupId)
        notebookInstanceSecurityGroupId = notebookInstanceSecurityGroupIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([EMRClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[EMRClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [EMRClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension EMRClientTypes {
    /// A notebook execution. An execution is a specific instance that an EMR Notebook is run using the StartNotebookExecution action.
    public struct NotebookExecution: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the notebook execution.
        public var arn: Swift.String?
        /// The unique identifier of the EMR Notebook that is used for the notebook execution.
        public var editorId: Swift.String?
        /// The timestamp when notebook execution ended.
        public var endTime: ClientRuntime.Date?
        /// The execution engine, such as an EMR cluster, used to run the EMR notebook and perform the notebook execution.
        public var executionEngine: EMRClientTypes.ExecutionEngineConfig?
        /// The reason for the latest status change of the notebook execution.
        public var lastStateChangeReason: Swift.String?
        /// The unique identifier of a notebook execution.
        public var notebookExecutionId: Swift.String?
        /// A name for the notebook execution.
        public var notebookExecutionName: Swift.String?
        /// The unique identifier of the EC2 security group associated with the EMR Notebook instance. For more information see [Specifying EC2 Security Groups for EMR Notebooks](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-managed-notebooks-security-groups.html) in the EMR Management Guide.
        public var notebookInstanceSecurityGroupId: Swift.String?
        /// Input parameters in JSON format passed to the EMR Notebook at runtime for execution.
        public var notebookParams: Swift.String?
        /// The location of the notebook execution's output file in Amazon S3.
        public var outputNotebookURI: Swift.String?
        /// The timestamp when notebook execution started.
        public var startTime: ClientRuntime.Date?
        /// The status of the notebook execution.
        ///
        /// * START_PENDING indicates that the cluster has received the execution request but execution has not begun.
        ///
        /// * STARTING indicates that the execution is starting on the cluster.
        ///
        /// * RUNNING indicates that the execution is being processed by the cluster.
        ///
        /// * FINISHING indicates that execution processing is in the final stages.
        ///
        /// * FINISHED indicates that the execution has completed without error.
        ///
        /// * FAILING indicates that the execution is failing and will not finish successfully.
        ///
        /// * FAILED indicates that the execution failed.
        ///
        /// * STOP_PENDING indicates that the cluster has received a StopNotebookExecution request and the stop is pending.
        ///
        /// * STOPPING indicates that the cluster is in the process of stopping the execution as a result of a StopNotebookExecution request.
        ///
        /// * STOPPED indicates that the execution stopped because of a StopNotebookExecution request.
        public var status: EMRClientTypes.NotebookExecutionStatus?
        /// A list of tags associated with a notebook execution. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters and an optional value string with a maximum of 256 characters.
        public var tags: [EMRClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            editorId: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            executionEngine: EMRClientTypes.ExecutionEngineConfig? = nil,
            lastStateChangeReason: Swift.String? = nil,
            notebookExecutionId: Swift.String? = nil,
            notebookExecutionName: Swift.String? = nil,
            notebookInstanceSecurityGroupId: Swift.String? = nil,
            notebookParams: Swift.String? = nil,
            outputNotebookURI: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: EMRClientTypes.NotebookExecutionStatus? = nil,
            tags: [EMRClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.editorId = editorId
            self.endTime = endTime
            self.executionEngine = executionEngine
            self.lastStateChangeReason = lastStateChangeReason
            self.notebookExecutionId = notebookExecutionId
            self.notebookExecutionName = notebookExecutionName
            self.notebookInstanceSecurityGroupId = notebookInstanceSecurityGroupId
            self.notebookParams = notebookParams
            self.outputNotebookURI = outputNotebookURI
            self.startTime = startTime
            self.status = status
            self.tags = tags
        }
    }

}

extension EMRClientTypes {
    public enum NotebookExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case failing
        case finished
        case finishing
        case running
        case starting
        case startPending
        case stopped
        case stopping
        case stopPending
        case sdkUnknown(Swift.String)

        public static var allCases: [NotebookExecutionStatus] {
            return [
                .failed,
                .failing,
                .finished,
                .finishing,
                .running,
                .starting,
                .startPending,
                .stopped,
                .stopping,
                .stopPending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .failing: return "FAILING"
            case .finished: return "FINISHED"
            case .finishing: return "FINISHING"
            case .running: return "RUNNING"
            case .starting: return "STARTING"
            case .startPending: return "START_PENDING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case .stopPending: return "STOP_PENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NotebookExecutionStatus(rawValue: rawValue) ?? NotebookExecutionStatus.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.NotebookExecutionSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case editorId = "EditorId"
        case endTime = "EndTime"
        case notebookExecutionId = "NotebookExecutionId"
        case notebookExecutionName = "NotebookExecutionName"
        case startTime = "StartTime"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let editorId = self.editorId {
            try encodeContainer.encode(editorId, forKey: .editorId)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let notebookExecutionId = self.notebookExecutionId {
            try encodeContainer.encode(notebookExecutionId, forKey: .notebookExecutionId)
        }
        if let notebookExecutionName = self.notebookExecutionName {
            try encodeContainer.encode(notebookExecutionName, forKey: .notebookExecutionName)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookExecutionId)
        notebookExecutionId = notebookExecutionIdDecoded
        let editorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .editorId)
        editorId = editorIdDecoded
        let notebookExecutionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookExecutionName)
        notebookExecutionName = notebookExecutionNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EMRClientTypes.NotebookExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

extension EMRClientTypes {
    /// Details for a notebook execution. The details include information such as the unique ID and status of the notebook execution.
    public struct NotebookExecutionSummary: Swift.Equatable {
        /// The unique identifier of the editor associated with the notebook execution.
        public var editorId: Swift.String?
        /// The timestamp when notebook execution started.
        public var endTime: ClientRuntime.Date?
        /// The unique identifier of the notebook execution.
        public var notebookExecutionId: Swift.String?
        /// The name of the notebook execution.
        public var notebookExecutionName: Swift.String?
        /// The timestamp when notebook execution started.
        public var startTime: ClientRuntime.Date?
        /// The status of the notebook execution.
        ///
        /// * START_PENDING indicates that the cluster has received the execution request but execution has not begun.
        ///
        /// * STARTING indicates that the execution is starting on the cluster.
        ///
        /// * RUNNING indicates that the execution is being processed by the cluster.
        ///
        /// * FINISHING indicates that execution processing is in the final stages.
        ///
        /// * FINISHED indicates that the execution has completed without error.
        ///
        /// * FAILING indicates that the execution is failing and will not finish successfully.
        ///
        /// * FAILED indicates that the execution failed.
        ///
        /// * STOP_PENDING indicates that the cluster has received a StopNotebookExecution request and the stop is pending.
        ///
        /// * STOPPING indicates that the cluster is in the process of stopping the execution as a result of a StopNotebookExecution request.
        ///
        /// * STOPPED indicates that the execution stopped because of a StopNotebookExecution request.
        public var status: EMRClientTypes.NotebookExecutionStatus?

        public init (
            editorId: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            notebookExecutionId: Swift.String? = nil,
            notebookExecutionName: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: EMRClientTypes.NotebookExecutionStatus? = nil
        )
        {
            self.editorId = editorId
            self.endTime = endTime
            self.notebookExecutionId = notebookExecutionId
            self.notebookExecutionName = notebookExecutionName
            self.startTime = startTime
            self.status = status
        }
    }

}

extension EMRClientTypes.OSRelease: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case label = "Label"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let label = self.label {
            try encodeContainer.encode(label, forKey: .label)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
    }
}

extension EMRClientTypes {
    /// The Amazon Linux release specified for a cluster in the RunJobFlow request.
    public struct OSRelease: Swift.Equatable {
        /// The Amazon Linux release specified for a cluster in the RunJobFlow request. The format is as shown in [ Amazon Linux 2 Release Notes ](https://docs.aws.amazon.com/AL2/latest/relnotes/relnotes-20220218.html). For example, 2.0.20220218.1.
        public var label: Swift.String?

        public init (
            label: Swift.String? = nil
        )
        {
            self.label = label
        }
    }

}

extension EMRClientTypes.OnDemandCapacityReservationOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityReservationPreference = "CapacityReservationPreference"
        case capacityReservationResourceGroupArn = "CapacityReservationResourceGroupArn"
        case usageStrategy = "UsageStrategy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityReservationPreference = self.capacityReservationPreference {
            try encodeContainer.encode(capacityReservationPreference.rawValue, forKey: .capacityReservationPreference)
        }
        if let capacityReservationResourceGroupArn = self.capacityReservationResourceGroupArn {
            try encodeContainer.encode(capacityReservationResourceGroupArn, forKey: .capacityReservationResourceGroupArn)
        }
        if let usageStrategy = self.usageStrategy {
            try encodeContainer.encode(usageStrategy.rawValue, forKey: .usageStrategy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usageStrategyDecoded = try containerValues.decodeIfPresent(EMRClientTypes.OnDemandCapacityReservationUsageStrategy.self, forKey: .usageStrategy)
        usageStrategy = usageStrategyDecoded
        let capacityReservationPreferenceDecoded = try containerValues.decodeIfPresent(EMRClientTypes.OnDemandCapacityReservationPreference.self, forKey: .capacityReservationPreference)
        capacityReservationPreference = capacityReservationPreferenceDecoded
        let capacityReservationResourceGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .capacityReservationResourceGroupArn)
        capacityReservationResourceGroupArn = capacityReservationResourceGroupArnDecoded
    }
}

extension EMRClientTypes {
    /// Describes the strategy for using unused Capacity Reservations for fulfilling On-Demand capacity.
    public struct OnDemandCapacityReservationOptions: Swift.Equatable {
        /// Indicates the instance's Capacity Reservation preferences. Possible preferences include:
        ///
        /// * open - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
        ///
        /// * none - The instance avoids running in a Capacity Reservation even if one is available. The instance runs as an On-Demand Instance.
        public var capacityReservationPreference: EMRClientTypes.OnDemandCapacityReservationPreference?
        /// The ARN of the Capacity Reservation resource group in which to run the instance.
        public var capacityReservationResourceGroupArn: Swift.String?
        /// Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity. If you specify use-capacity-reservations-first, the fleet uses unused Capacity Reservations to fulfill On-Demand capacity up to the target On-Demand capacity. If multiple instance pools have unused Capacity Reservations, the On-Demand allocation strategy (lowest-price) is applied. If the number of unused Capacity Reservations is less than the On-Demand target capacity, the remaining On-Demand target capacity is launched according to the On-Demand allocation strategy (lowest-price). If you do not specify a value, the fleet fulfills the On-Demand capacity according to the chosen On-Demand allocation strategy.
        public var usageStrategy: EMRClientTypes.OnDemandCapacityReservationUsageStrategy?

        public init (
            capacityReservationPreference: EMRClientTypes.OnDemandCapacityReservationPreference? = nil,
            capacityReservationResourceGroupArn: Swift.String? = nil,
            usageStrategy: EMRClientTypes.OnDemandCapacityReservationUsageStrategy? = nil
        )
        {
            self.capacityReservationPreference = capacityReservationPreference
            self.capacityReservationResourceGroupArn = capacityReservationResourceGroupArn
            self.usageStrategy = usageStrategy
        }
    }

}

extension EMRClientTypes {
    public enum OnDemandCapacityReservationPreference: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case `open`
        case sdkUnknown(Swift.String)

        public static var allCases: [OnDemandCapacityReservationPreference] {
            return [
                .none,
                .open,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "none"
            case .open: return "open"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OnDemandCapacityReservationPreference(rawValue: rawValue) ?? OnDemandCapacityReservationPreference.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes {
    public enum OnDemandCapacityReservationUsageStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case useCapacityReservationsFirst
        case sdkUnknown(Swift.String)

        public static var allCases: [OnDemandCapacityReservationUsageStrategy] {
            return [
                .useCapacityReservationsFirst,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .useCapacityReservationsFirst: return "use-capacity-reservations-first"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OnDemandCapacityReservationUsageStrategy(rawValue: rawValue) ?? OnDemandCapacityReservationUsageStrategy.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes {
    public enum OnDemandProvisioningAllocationStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case lowestPrice
        case sdkUnknown(Swift.String)

        public static var allCases: [OnDemandProvisioningAllocationStrategy] {
            return [
                .lowestPrice,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .lowestPrice: return "lowest-price"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OnDemandProvisioningAllocationStrategy(rawValue: rawValue) ?? OnDemandProvisioningAllocationStrategy.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.OnDemandProvisioningSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocationStrategy = "AllocationStrategy"
        case capacityReservationOptions = "CapacityReservationOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allocationStrategy = self.allocationStrategy {
            try encodeContainer.encode(allocationStrategy.rawValue, forKey: .allocationStrategy)
        }
        if let capacityReservationOptions = self.capacityReservationOptions {
            try encodeContainer.encode(capacityReservationOptions, forKey: .capacityReservationOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allocationStrategyDecoded = try containerValues.decodeIfPresent(EMRClientTypes.OnDemandProvisioningAllocationStrategy.self, forKey: .allocationStrategy)
        allocationStrategy = allocationStrategyDecoded
        let capacityReservationOptionsDecoded = try containerValues.decodeIfPresent(EMRClientTypes.OnDemandCapacityReservationOptions.self, forKey: .capacityReservationOptions)
        capacityReservationOptions = capacityReservationOptionsDecoded
    }
}

extension EMRClientTypes {
    /// The launch specification for On-Demand Instances in the instance fleet, which determines the allocation strategy. The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions. On-Demand Instances allocation strategy is available in Amazon EMR version 5.12.1 and later.
    public struct OnDemandProvisioningSpecification: Swift.Equatable {
        /// Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is lowest-price (the default), which launches the lowest price first.
        /// This member is required.
        public var allocationStrategy: EMRClientTypes.OnDemandProvisioningAllocationStrategy?
        /// The launch specification for On-Demand instances in the instance fleet, which determines the allocation strategy.
        public var capacityReservationOptions: EMRClientTypes.OnDemandCapacityReservationOptions?

        public init (
            allocationStrategy: EMRClientTypes.OnDemandProvisioningAllocationStrategy? = nil,
            capacityReservationOptions: EMRClientTypes.OnDemandCapacityReservationOptions? = nil
        )
        {
            self.allocationStrategy = allocationStrategy
            self.capacityReservationOptions = capacityReservationOptions
        }
    }

}

extension EMRClientTypes.PlacementGroupConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceRole = "InstanceRole"
        case placementStrategy = "PlacementStrategy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceRole = self.instanceRole {
            try encodeContainer.encode(instanceRole.rawValue, forKey: .instanceRole)
        }
        if let placementStrategy = self.placementStrategy {
            try encodeContainer.encode(placementStrategy.rawValue, forKey: .placementStrategy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceRoleDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceRoleType.self, forKey: .instanceRole)
        instanceRole = instanceRoleDecoded
        let placementStrategyDecoded = try containerValues.decodeIfPresent(EMRClientTypes.PlacementGroupStrategy.self, forKey: .placementStrategy)
        placementStrategy = placementStrategyDecoded
    }
}

extension EMRClientTypes {
    /// Placement group configuration for an Amazon EMR cluster. The configuration specifies the placement strategy that can be applied to instance roles during cluster creation. To use this configuration, consider attaching managed policy AmazonElasticMapReducePlacementGroupPolicy to the EMR role.
    public struct PlacementGroupConfig: Swift.Equatable {
        /// Role of the instance in the cluster. Starting with Amazon EMR version 5.23.0, the only supported instance role is MASTER.
        /// This member is required.
        public var instanceRole: EMRClientTypes.InstanceRoleType?
        /// EC2 Placement Group strategy associated with instance role. Starting with Amazon EMR version 5.23.0, the only supported placement strategy is SPREAD for the MASTER instance role.
        public var placementStrategy: EMRClientTypes.PlacementGroupStrategy?

        public init (
            instanceRole: EMRClientTypes.InstanceRoleType? = nil,
            placementStrategy: EMRClientTypes.PlacementGroupStrategy? = nil
        )
        {
            self.instanceRole = instanceRole
            self.placementStrategy = placementStrategy
        }
    }

}

extension EMRClientTypes {
    public enum PlacementGroupStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cluster
        case `none`
        case partition
        case spread
        case sdkUnknown(Swift.String)

        public static var allCases: [PlacementGroupStrategy] {
            return [
                .cluster,
                .none,
                .partition,
                .spread,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cluster: return "CLUSTER"
            case .none: return "NONE"
            case .partition: return "PARTITION"
            case .spread: return "SPREAD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PlacementGroupStrategy(rawValue: rawValue) ?? PlacementGroupStrategy.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.PlacementType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "AvailabilityZone"
        case availabilityZones = "AvailabilityZones"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = self.availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for xmlstringmaxlen2560 in availabilityZones {
                try availabilityZonesContainer.encode(xmlstringmaxlen2560)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
    }
}

extension EMRClientTypes {
    /// The Amazon EC2 Availability Zone configuration of the cluster (job flow).
    public struct PlacementType: Swift.Equatable {
        /// The Amazon EC2 Availability Zone for the cluster. AvailabilityZone is used for uniform instance groups, while AvailabilityZones (plural) is used for instance fleets.
        public var availabilityZone: Swift.String?
        /// When multiple Availability Zones are specified, Amazon EMR evaluates them and launches instances in the optimal Availability Zone. AvailabilityZones is used for instance fleets, while AvailabilityZone (singular) is used for uniform instance groups. The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.
        public var availabilityZones: [Swift.String]?

        public init (
            availabilityZone: Swift.String? = nil,
            availabilityZones: [Swift.String]? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.availabilityZones = availabilityZones
        }
    }

}

extension EMRClientTypes.PortRange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxRange = "MaxRange"
        case minRange = "MinRange"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxRange = self.maxRange {
            try encodeContainer.encode(maxRange, forKey: .maxRange)
        }
        if let minRange = self.minRange {
            try encodeContainer.encode(minRange, forKey: .minRange)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minRangeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minRange)
        minRange = minRangeDecoded
        let maxRangeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRange)
        maxRange = maxRangeDecoded
    }
}

extension EMRClientTypes {
    /// A list of port ranges that are permitted to allow inbound traffic from all public IP addresses. To specify a single port, use the same value for MinRange and MaxRange.
    public struct PortRange: Swift.Equatable {
        /// The smallest port number in a specified range of port numbers.
        public var maxRange: Swift.Int?
        /// The smallest port number in a specified range of port numbers.
        /// This member is required.
        public var minRange: Swift.Int?

        public init (
            maxRange: Swift.Int? = nil,
            minRange: Swift.Int? = nil
        )
        {
            self.maxRange = maxRange
            self.minRange = minRange
        }
    }

}

extension PutAutoScalingPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingPolicy = "AutoScalingPolicy"
        case clusterId = "ClusterId"
        case instanceGroupId = "InstanceGroupId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingPolicy = self.autoScalingPolicy {
            try encodeContainer.encode(autoScalingPolicy, forKey: .autoScalingPolicy)
        }
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let instanceGroupId = self.instanceGroupId {
            try encodeContainer.encode(instanceGroupId, forKey: .instanceGroupId)
        }
    }
}

extension PutAutoScalingPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutAutoScalingPolicyInput: Swift.Equatable {
    /// Specifies the definition of the automatic scaling policy.
    /// This member is required.
    public var autoScalingPolicy: EMRClientTypes.AutoScalingPolicy?
    /// Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
    /// This member is required.
    public var clusterId: Swift.String?
    /// Specifies the ID of the instance group to which the automatic scaling policy is applied.
    /// This member is required.
    public var instanceGroupId: Swift.String?

    public init (
        autoScalingPolicy: EMRClientTypes.AutoScalingPolicy? = nil,
        clusterId: Swift.String? = nil,
        instanceGroupId: Swift.String? = nil
    )
    {
        self.autoScalingPolicy = autoScalingPolicy
        self.clusterId = clusterId
        self.instanceGroupId = instanceGroupId
    }
}

struct PutAutoScalingPolicyInputBody: Swift.Equatable {
    let clusterId: Swift.String?
    let instanceGroupId: Swift.String?
    let autoScalingPolicy: EMRClientTypes.AutoScalingPolicy?
}

extension PutAutoScalingPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingPolicy = "AutoScalingPolicy"
        case clusterId = "ClusterId"
        case instanceGroupId = "InstanceGroupId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let instanceGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceGroupId)
        instanceGroupId = instanceGroupIdDecoded
        let autoScalingPolicyDecoded = try containerValues.decodeIfPresent(EMRClientTypes.AutoScalingPolicy.self, forKey: .autoScalingPolicy)
        autoScalingPolicy = autoScalingPolicyDecoded
    }
}

extension PutAutoScalingPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutAutoScalingPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutAutoScalingPolicyOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutAutoScalingPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutAutoScalingPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.autoScalingPolicy = output.autoScalingPolicy
            self.clusterArn = output.clusterArn
            self.clusterId = output.clusterId
            self.instanceGroupId = output.instanceGroupId
        } else {
            self.autoScalingPolicy = nil
            self.clusterArn = nil
            self.clusterId = nil
            self.instanceGroupId = nil
        }
    }
}

public struct PutAutoScalingPolicyOutputResponse: Swift.Equatable {
    /// The automatic scaling policy definition.
    public var autoScalingPolicy: EMRClientTypes.AutoScalingPolicyDescription?
    /// The Amazon Resource Name (ARN) of the cluster.
    public var clusterArn: Swift.String?
    /// Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
    public var clusterId: Swift.String?
    /// Specifies the ID of the instance group to which the scaling policy is applied.
    public var instanceGroupId: Swift.String?

    public init (
        autoScalingPolicy: EMRClientTypes.AutoScalingPolicyDescription? = nil,
        clusterArn: Swift.String? = nil,
        clusterId: Swift.String? = nil,
        instanceGroupId: Swift.String? = nil
    )
    {
        self.autoScalingPolicy = autoScalingPolicy
        self.clusterArn = clusterArn
        self.clusterId = clusterId
        self.instanceGroupId = instanceGroupId
    }
}

struct PutAutoScalingPolicyOutputResponseBody: Swift.Equatable {
    let clusterId: Swift.String?
    let instanceGroupId: Swift.String?
    let autoScalingPolicy: EMRClientTypes.AutoScalingPolicyDescription?
    let clusterArn: Swift.String?
}

extension PutAutoScalingPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingPolicy = "AutoScalingPolicy"
        case clusterArn = "ClusterArn"
        case clusterId = "ClusterId"
        case instanceGroupId = "InstanceGroupId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let instanceGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceGroupId)
        instanceGroupId = instanceGroupIdDecoded
        let autoScalingPolicyDecoded = try containerValues.decodeIfPresent(EMRClientTypes.AutoScalingPolicyDescription.self, forKey: .autoScalingPolicy)
        autoScalingPolicy = autoScalingPolicyDecoded
        let clusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
    }
}

extension PutAutoTerminationPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoTerminationPolicy = "AutoTerminationPolicy"
        case clusterId = "ClusterId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoTerminationPolicy = self.autoTerminationPolicy {
            try encodeContainer.encode(autoTerminationPolicy, forKey: .autoTerminationPolicy)
        }
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
    }
}

extension PutAutoTerminationPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutAutoTerminationPolicyInput: Swift.Equatable {
    /// Specifies the auto-termination policy to attach to the cluster.
    public var autoTerminationPolicy: EMRClientTypes.AutoTerminationPolicy?
    /// Specifies the ID of the Amazon EMR cluster to which the auto-termination policy will be attached.
    /// This member is required.
    public var clusterId: Swift.String?

    public init (
        autoTerminationPolicy: EMRClientTypes.AutoTerminationPolicy? = nil,
        clusterId: Swift.String? = nil
    )
    {
        self.autoTerminationPolicy = autoTerminationPolicy
        self.clusterId = clusterId
    }
}

struct PutAutoTerminationPolicyInputBody: Swift.Equatable {
    let clusterId: Swift.String?
    let autoTerminationPolicy: EMRClientTypes.AutoTerminationPolicy?
}

extension PutAutoTerminationPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoTerminationPolicy = "AutoTerminationPolicy"
        case clusterId = "ClusterId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let autoTerminationPolicyDecoded = try containerValues.decodeIfPresent(EMRClientTypes.AutoTerminationPolicy.self, forKey: .autoTerminationPolicy)
        autoTerminationPolicy = autoTerminationPolicyDecoded
    }
}

extension PutAutoTerminationPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutAutoTerminationPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutAutoTerminationPolicyOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutAutoTerminationPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutAutoTerminationPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutBlockPublicAccessConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blockPublicAccessConfiguration = "BlockPublicAccessConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blockPublicAccessConfiguration = self.blockPublicAccessConfiguration {
            try encodeContainer.encode(blockPublicAccessConfiguration, forKey: .blockPublicAccessConfiguration)
        }
    }
}

extension PutBlockPublicAccessConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutBlockPublicAccessConfigurationInput: Swift.Equatable {
    /// A configuration for Amazon EMR block public access. The configuration applies to all clusters created in your account for the current Region. The configuration specifies whether block public access is enabled. If block public access is enabled, security groups associated with the cluster cannot have rules that allow inbound traffic from 0.0.0.0/0 or ::/0 on a port, unless the port is specified as an exception using PermittedPublicSecurityGroupRuleRanges in the BlockPublicAccessConfiguration. By default, Port 22 (SSH) is an exception, and public access is allowed on this port. You can change this by updating BlockPublicSecurityGroupRules to remove the exception. For accounts that created clusters in a Region before November 25, 2019, block public access is disabled by default in that Region. To use this feature, you must manually enable and configure it. For accounts that did not create an EMR cluster in a Region before this date, block public access is enabled by default in that Region.
    /// This member is required.
    public var blockPublicAccessConfiguration: EMRClientTypes.BlockPublicAccessConfiguration?

    public init (
        blockPublicAccessConfiguration: EMRClientTypes.BlockPublicAccessConfiguration? = nil
    )
    {
        self.blockPublicAccessConfiguration = blockPublicAccessConfiguration
    }
}

struct PutBlockPublicAccessConfigurationInputBody: Swift.Equatable {
    let blockPublicAccessConfiguration: EMRClientTypes.BlockPublicAccessConfiguration?
}

extension PutBlockPublicAccessConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blockPublicAccessConfiguration = "BlockPublicAccessConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blockPublicAccessConfigurationDecoded = try containerValues.decodeIfPresent(EMRClientTypes.BlockPublicAccessConfiguration.self, forKey: .blockPublicAccessConfiguration)
        blockPublicAccessConfiguration = blockPublicAccessConfigurationDecoded
    }
}

extension PutBlockPublicAccessConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutBlockPublicAccessConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutBlockPublicAccessConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutBlockPublicAccessConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutBlockPublicAccessConfigurationOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutManagedScalingPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case managedScalingPolicy = "ManagedScalingPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let managedScalingPolicy = self.managedScalingPolicy {
            try encodeContainer.encode(managedScalingPolicy, forKey: .managedScalingPolicy)
        }
    }
}

extension PutManagedScalingPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutManagedScalingPolicyInput: Swift.Equatable {
    /// Specifies the ID of an EMR cluster where the managed scaling policy is attached.
    /// This member is required.
    public var clusterId: Swift.String?
    /// Specifies the constraints for the managed scaling policy.
    /// This member is required.
    public var managedScalingPolicy: EMRClientTypes.ManagedScalingPolicy?

    public init (
        clusterId: Swift.String? = nil,
        managedScalingPolicy: EMRClientTypes.ManagedScalingPolicy? = nil
    )
    {
        self.clusterId = clusterId
        self.managedScalingPolicy = managedScalingPolicy
    }
}

struct PutManagedScalingPolicyInputBody: Swift.Equatable {
    let clusterId: Swift.String?
    let managedScalingPolicy: EMRClientTypes.ManagedScalingPolicy?
}

extension PutManagedScalingPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case managedScalingPolicy = "ManagedScalingPolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let managedScalingPolicyDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ManagedScalingPolicy.self, forKey: .managedScalingPolicy)
        managedScalingPolicy = managedScalingPolicyDecoded
    }
}

extension PutManagedScalingPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutManagedScalingPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutManagedScalingPolicyOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutManagedScalingPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutManagedScalingPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension EMRClientTypes {
    public enum ReconfigurationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case merge
        case overwrite
        case sdkUnknown(Swift.String)

        public static var allCases: [ReconfigurationType] {
            return [
                .merge,
                .overwrite,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .merge: return "MERGE"
            case .overwrite: return "OVERWRITE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReconfigurationType(rawValue: rawValue) ?? ReconfigurationType.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.ReleaseLabelFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case application = "Application"
        case `prefix` = "Prefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let application = self.application {
            try encodeContainer.encode(application, forKey: .application)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let applicationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .application)
        application = applicationDecoded
    }
}

extension EMRClientTypes {
    /// The release label filters by application or version prefix.
    public struct ReleaseLabelFilter: Swift.Equatable {
        /// Optional release label application filter. For example, spark@2.1.0.
        public var application: Swift.String?
        /// Optional release label version prefix filter. For example, emr-5.
        public var `prefix`: Swift.String?

        public init (
            application: Swift.String? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.application = application
            self.`prefix` = `prefix`
        }
    }

}

extension RemoveAutoScalingPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case instanceGroupId = "InstanceGroupId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let instanceGroupId = self.instanceGroupId {
            try encodeContainer.encode(instanceGroupId, forKey: .instanceGroupId)
        }
    }
}

extension RemoveAutoScalingPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RemoveAutoScalingPolicyInput: Swift.Equatable {
    /// Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
    /// This member is required.
    public var clusterId: Swift.String?
    /// Specifies the ID of the instance group to which the scaling policy is applied.
    /// This member is required.
    public var instanceGroupId: Swift.String?

    public init (
        clusterId: Swift.String? = nil,
        instanceGroupId: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
        self.instanceGroupId = instanceGroupId
    }
}

struct RemoveAutoScalingPolicyInputBody: Swift.Equatable {
    let clusterId: Swift.String?
    let instanceGroupId: Swift.String?
}

extension RemoveAutoScalingPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case instanceGroupId = "InstanceGroupId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let instanceGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceGroupId)
        instanceGroupId = instanceGroupIdDecoded
    }
}

extension RemoveAutoScalingPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveAutoScalingPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RemoveAutoScalingPolicyOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveAutoScalingPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RemoveAutoScalingPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension RemoveAutoTerminationPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
    }
}

extension RemoveAutoTerminationPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RemoveAutoTerminationPolicyInput: Swift.Equatable {
    /// Specifies the ID of the Amazon EMR cluster from which the auto-termination policy will be removed.
    /// This member is required.
    public var clusterId: Swift.String?

    public init (
        clusterId: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
    }
}

struct RemoveAutoTerminationPolicyInputBody: Swift.Equatable {
    let clusterId: Swift.String?
}

extension RemoveAutoTerminationPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
    }
}

extension RemoveAutoTerminationPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveAutoTerminationPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RemoveAutoTerminationPolicyOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveAutoTerminationPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RemoveAutoTerminationPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension RemoveManagedScalingPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
    }
}

extension RemoveManagedScalingPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RemoveManagedScalingPolicyInput: Swift.Equatable {
    /// Specifies the ID of the cluster from which the managed scaling policy will be removed.
    /// This member is required.
    public var clusterId: Swift.String?

    public init (
        clusterId: Swift.String? = nil
    )
    {
        self.clusterId = clusterId
    }
}

struct RemoveManagedScalingPolicyInputBody: Swift.Equatable {
    let clusterId: Swift.String?
}

extension RemoveManagedScalingPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
    }
}

extension RemoveManagedScalingPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveManagedScalingPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RemoveManagedScalingPolicyOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveManagedScalingPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RemoveManagedScalingPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension RemoveTagsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = self.resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for string0 in tagKeys {
                try tagKeysContainer.encode(string0)
            }
        }
    }
}

extension RemoveTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// This input identifies an Amazon EMR resource and a list of tags to remove.
public struct RemoveTagsInput: Swift.Equatable {
    /// The Amazon EMR resource identifier from which tags will be removed. For example, a cluster identifier or an Amazon EMR Studio ID.
    /// This member is required.
    public var resourceId: Swift.String?
    /// A list of tag keys to remove from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceId: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceId = resourceId
        self.tagKeys = tagKeys
    }
}

struct RemoveTagsInputBody: Swift.Equatable {
    let resourceId: Swift.String?
    let tagKeys: [Swift.String]?
}

extension RemoveTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension RemoveTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RemoveTagsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// This output indicates the result of removing tags from the resource.
public struct RemoveTagsOutputResponse: Swift.Equatable {

    public init () { }
}

extension EMRClientTypes {
    public enum RepoUpgradeOnBoot: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case security
        case sdkUnknown(Swift.String)

        public static var allCases: [RepoUpgradeOnBoot] {
            return [
                .none,
                .security,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .security: return "SECURITY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RepoUpgradeOnBoot(rawValue: rawValue) ?? RepoUpgradeOnBoot.sdkUnknown(rawValue)
        }
    }
}

extension RunJobFlowInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalInfo = "AdditionalInfo"
        case amiVersion = "AmiVersion"
        case applications = "Applications"
        case autoScalingRole = "AutoScalingRole"
        case autoTerminationPolicy = "AutoTerminationPolicy"
        case bootstrapActions = "BootstrapActions"
        case configurations = "Configurations"
        case customAmiId = "CustomAmiId"
        case ebsRootVolumeSize = "EbsRootVolumeSize"
        case instances = "Instances"
        case jobFlowRole = "JobFlowRole"
        case kerberosAttributes = "KerberosAttributes"
        case logEncryptionKmsKeyId = "LogEncryptionKmsKeyId"
        case logUri = "LogUri"
        case managedScalingPolicy = "ManagedScalingPolicy"
        case name = "Name"
        case newSupportedProducts = "NewSupportedProducts"
        case osReleaseLabel = "OSReleaseLabel"
        case placementGroupConfigs = "PlacementGroupConfigs"
        case releaseLabel = "ReleaseLabel"
        case repoUpgradeOnBoot = "RepoUpgradeOnBoot"
        case scaleDownBehavior = "ScaleDownBehavior"
        case securityConfiguration = "SecurityConfiguration"
        case serviceRole = "ServiceRole"
        case stepConcurrencyLevel = "StepConcurrencyLevel"
        case steps = "Steps"
        case supportedProducts = "SupportedProducts"
        case tags = "Tags"
        case visibleToAllUsers = "VisibleToAllUsers"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalInfo = self.additionalInfo {
            try encodeContainer.encode(additionalInfo, forKey: .additionalInfo)
        }
        if let amiVersion = self.amiVersion {
            try encodeContainer.encode(amiVersion, forKey: .amiVersion)
        }
        if let applications = applications {
            var applicationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .applications)
            for application0 in applications {
                try applicationsContainer.encode(application0)
            }
        }
        if let autoScalingRole = self.autoScalingRole {
            try encodeContainer.encode(autoScalingRole, forKey: .autoScalingRole)
        }
        if let autoTerminationPolicy = self.autoTerminationPolicy {
            try encodeContainer.encode(autoTerminationPolicy, forKey: .autoTerminationPolicy)
        }
        if let bootstrapActions = bootstrapActions {
            var bootstrapActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bootstrapActions)
            for bootstrapactionconfig0 in bootstrapActions {
                try bootstrapActionsContainer.encode(bootstrapactionconfig0)
            }
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configuration0 in configurations {
                try configurationsContainer.encode(configuration0)
            }
        }
        if let customAmiId = self.customAmiId {
            try encodeContainer.encode(customAmiId, forKey: .customAmiId)
        }
        if let ebsRootVolumeSize = self.ebsRootVolumeSize {
            try encodeContainer.encode(ebsRootVolumeSize, forKey: .ebsRootVolumeSize)
        }
        if let instances = self.instances {
            try encodeContainer.encode(instances, forKey: .instances)
        }
        if let jobFlowRole = self.jobFlowRole {
            try encodeContainer.encode(jobFlowRole, forKey: .jobFlowRole)
        }
        if let kerberosAttributes = self.kerberosAttributes {
            try encodeContainer.encode(kerberosAttributes, forKey: .kerberosAttributes)
        }
        if let logEncryptionKmsKeyId = self.logEncryptionKmsKeyId {
            try encodeContainer.encode(logEncryptionKmsKeyId, forKey: .logEncryptionKmsKeyId)
        }
        if let logUri = self.logUri {
            try encodeContainer.encode(logUri, forKey: .logUri)
        }
        if let managedScalingPolicy = self.managedScalingPolicy {
            try encodeContainer.encode(managedScalingPolicy, forKey: .managedScalingPolicy)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let newSupportedProducts = newSupportedProducts {
            var newSupportedProductsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .newSupportedProducts)
            for supportedproductconfig0 in newSupportedProducts {
                try newSupportedProductsContainer.encode(supportedproductconfig0)
            }
        }
        if let osReleaseLabel = self.osReleaseLabel {
            try encodeContainer.encode(osReleaseLabel, forKey: .osReleaseLabel)
        }
        if let placementGroupConfigs = placementGroupConfigs {
            var placementGroupConfigsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .placementGroupConfigs)
            for placementgroupconfig0 in placementGroupConfigs {
                try placementGroupConfigsContainer.encode(placementgroupconfig0)
            }
        }
        if let releaseLabel = self.releaseLabel {
            try encodeContainer.encode(releaseLabel, forKey: .releaseLabel)
        }
        if let repoUpgradeOnBoot = self.repoUpgradeOnBoot {
            try encodeContainer.encode(repoUpgradeOnBoot.rawValue, forKey: .repoUpgradeOnBoot)
        }
        if let scaleDownBehavior = self.scaleDownBehavior {
            try encodeContainer.encode(scaleDownBehavior.rawValue, forKey: .scaleDownBehavior)
        }
        if let securityConfiguration = self.securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
        if let serviceRole = self.serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let stepConcurrencyLevel = self.stepConcurrencyLevel {
            try encodeContainer.encode(stepConcurrencyLevel, forKey: .stepConcurrencyLevel)
        }
        if let steps = steps {
            var stepsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .steps)
            for stepconfig0 in steps {
                try stepsContainer.encode(stepconfig0)
            }
        }
        if let supportedProducts = supportedProducts {
            var supportedProductsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedProducts)
            for xmlstringmaxlen2560 in supportedProducts {
                try supportedProductsContainer.encode(xmlstringmaxlen2560)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if visibleToAllUsers != false {
            try encodeContainer.encode(visibleToAllUsers, forKey: .visibleToAllUsers)
        }
    }
}

extension RunJobFlowInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Input to the [RunJobFlow] operation.
public struct RunJobFlowInput: Swift.Equatable {
    /// A JSON string for selecting additional features.
    public var additionalInfo: Swift.String?
    /// Applies only to Amazon EMR AMI versions 3.x and 2.x. For Amazon EMR releases 4.0 and later, ReleaseLabel is used. To specify a custom AMI, use CustomAmiID.
    public var amiVersion: Swift.String?
    /// Applies to Amazon EMR releases 4.0 and later. A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster. For a list of applications available for each Amazon EMR release version, see the [Amazon EMRRelease Guide](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/).
    public var applications: [EMRClientTypes.Application]?
    /// An IAM role for automatic scaling policies. The default role is EMR_AutoScaling_DefaultRole. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
    public var autoScalingRole: Swift.String?
    /// An auto-termination policy for an Amazon EMR cluster. An auto-termination policy defines the amount of idle time in seconds after which a cluster automatically terminates. For alternative cluster termination options, see [Control cluster termination](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-termination.html).
    public var autoTerminationPolicy: EMRClientTypes.AutoTerminationPolicy?
    /// A list of bootstrap actions to run before Hadoop starts on the cluster nodes.
    public var bootstrapActions: [EMRClientTypes.BootstrapActionConfig]?
    /// For Amazon EMR releases 4.0 and later. The list of configurations supplied for the EMR cluster you are creating.
    public var configurations: [EMRClientTypes.Configuration]?
    /// Available only in Amazon EMR version 5.7.0 and later. The ID of a custom Amazon EBS-backed Linux AMI. If specified, Amazon EMR uses this AMI when it launches cluster EC2 instances. For more information about custom AMIs in Amazon EMR, see [Using a Custom AMI](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-custom-ami.html) in the Amazon EMR Management Guide. If omitted, the cluster uses the base Linux AMI for the ReleaseLabel specified. For Amazon EMR versions 2.x and 3.x, use AmiVersion instead. For information about creating a custom AMI, see [Creating an Amazon EBS-Backed Linux AMI](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html) in the Amazon Elastic Compute Cloud User Guide for Linux Instances. For information about finding an AMI ID, see [Finding a Linux AMI](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html).
    public var customAmiId: Swift.String?
    /// The size, in GiB, of the Amazon EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later.
    public var ebsRootVolumeSize: Swift.Int?
    /// A specification of the number and type of Amazon EC2 instances.
    /// This member is required.
    public var instances: EMRClientTypes.JobFlowInstancesConfig?
    /// Also called instance profile and EC2 role. An IAM role for an EMR cluster. The EC2 instances of the cluster assume this role. The default role is EMR_EC2_DefaultRole. In order to use the default role, you must have already created it using the CLI or console.
    public var jobFlowRole: Swift.String?
    /// Attributes for Kerberos configuration when Kerberos authentication is enabled using a security configuration. For more information see [Use Kerberos Authentication](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-kerberos.html) in the Amazon EMR Management Guide.
    public var kerberosAttributes: EMRClientTypes.KerberosAttributes?
    /// The KMS key used for encrypting log files. If a value is not provided, the logs remain encrypted by AES-256. This attribute is only available with Amazon EMR version 5.30.0 and later, excluding Amazon EMR 6.0.0.
    public var logEncryptionKmsKeyId: Swift.String?
    /// The location in Amazon S3 to write the log files of the job flow. If a value is not provided, logs are not created.
    public var logUri: Swift.String?
    /// The specified managed scaling policy for an Amazon EMR cluster.
    public var managedScalingPolicy: EMRClientTypes.ManagedScalingPolicy?
    /// The name of the job flow.
    /// This member is required.
    public var name: Swift.String?
    /// For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and later, use Applications. A list of strings that indicates third-party software to use with the job flow that accepts a user argument list. EMR accepts and forwards the argument list to the corresponding installation script as bootstrap action arguments. For more information, see "Launch a Job Flow on the MapR Distribution for Hadoop" in the [Amazon EMR Developer Guide](https://docs.aws.amazon.com/emr/latest/DeveloperGuide/emr-dg.pdf). Supported values are:
    ///
    /// * "mapr-m3" - launch the cluster using MapR M3 Edition.
    ///
    /// * "mapr-m5" - launch the cluster using MapR M5 Edition.
    ///
    /// * "mapr" with the user arguments specifying "--edition,m3" or "--edition,m5" - launch the job flow using MapR M3 or M5 Edition respectively.
    ///
    /// * "mapr-m7" - launch the cluster using MapR M7 Edition.
    ///
    /// * "hunk" - launch the cluster with the Hunk Big Data Analytics Platform.
    ///
    /// * "hue"- launch the cluster with Hue installed.
    ///
    /// * "spark" - launch the cluster with Apache Spark installed.
    ///
    /// * "ganglia" - launch the cluster with the Ganglia Monitoring System installed.
    public var newSupportedProducts: [EMRClientTypes.SupportedProductConfig]?
    /// Specifies a particular Amazon Linux release for all nodes in a cluster launch RunJobFlow request. If a release is not specified, Amazon EMR uses the latest validated Amazon Linux release for cluster launch.
    public var osReleaseLabel: Swift.String?
    /// The specified placement group configuration for an Amazon EMR cluster.
    public var placementGroupConfigs: [EMRClientTypes.PlacementGroupConfig]?
    /// The Amazon EMR release label, which determines the version of open-source application packages installed on the cluster. Release labels are in the form emr-x.x.x, where x.x.x is an Amazon EMR release version such as emr-5.14.0. For more information about Amazon EMR release versions and included application versions and features, see [https://docs.aws.amazon.com/emr/latest/ReleaseGuide/](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/). The release label applies only to Amazon EMR releases version 4.0 and later. Earlier versions use AmiVersion.
    public var releaseLabel: Swift.String?
    /// Applies only when CustomAmiID is used. Specifies which updates from the Amazon Linux AMI package repositories to apply automatically when the instance boots using the AMI. If omitted, the default is SECURITY, which indicates that only security updates are applied. If NONE is specified, no updates are applied, and all updates must be applied manually.
    public var repoUpgradeOnBoot: EMRClientTypes.RepoUpgradeOnBoot?
    /// Specifies the way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. TERMINATE_AT_INSTANCE_HOUR indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. TERMINATE_AT_TASK_COMPLETION indicates that Amazon EMR adds nodes to a deny list and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. TERMINATE_AT_TASK_COMPLETION available only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR earlier than 5.1.0.
    public var scaleDownBehavior: EMRClientTypes.ScaleDownBehavior?
    /// The name of a security configuration to apply to the cluster.
    public var securityConfiguration: Swift.String?
    /// The IAM role that Amazon EMR assumes in order to access Amazon Web Services resources on your behalf. If you've created a custom service role path, you must specify it for the service role when you launch your cluster.
    public var serviceRole: Swift.String?
    /// Specifies the number of steps that can be executed concurrently. The default value is 1. The maximum value is 256.
    public var stepConcurrencyLevel: Swift.Int?
    /// A list of steps to run.
    public var steps: [EMRClientTypes.StepConfig]?
    /// For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and later, use Applications. A list of strings that indicates third-party software to use. For more information, see the [Amazon EMR Developer Guide](https://docs.aws.amazon.com/emr/latest/DeveloperGuide/emr-dg.pdf). Currently supported values are:
    ///
    /// * "mapr-m3" - launch the job flow using MapR M3 Edition.
    ///
    /// * "mapr-m5" - launch the job flow using MapR M5 Edition.
    public var supportedProducts: [Swift.String]?
    /// A list of tags to associate with a cluster and propagate to Amazon EC2 instances.
    public var tags: [EMRClientTypes.Tag]?
    /// The VisibleToAllUsers parameter is no longer supported. By default, the value is set to true. Setting it to false now has no effect. Set this value to true so that IAM principals in the Amazon Web Services account associated with the cluster can perform EMR actions on the cluster that their IAM policies allow. This value defaults to true for clusters created using the EMR API or the CLI [create-cluster](https://docs.aws.amazon.com/cli/latest/reference/emr/create-cluster.html) command. When set to false, only the IAM principal that created the cluster and the Amazon Web Services account root user can perform EMR actions for the cluster, regardless of the IAM permissions policies attached to other IAM principals. For more information, see [Understanding the EMR Cluster VisibleToAllUsers Setting](https://docs.aws.amazon.com/emr/latest/ManagementGuide/security_iam_emr-with-iam.html#security_set_visible_to_all_users) in the Amazon EMRManagement Guide.
    public var visibleToAllUsers: Swift.Bool

    public init (
        additionalInfo: Swift.String? = nil,
        amiVersion: Swift.String? = nil,
        applications: [EMRClientTypes.Application]? = nil,
        autoScalingRole: Swift.String? = nil,
        autoTerminationPolicy: EMRClientTypes.AutoTerminationPolicy? = nil,
        bootstrapActions: [EMRClientTypes.BootstrapActionConfig]? = nil,
        configurations: [EMRClientTypes.Configuration]? = nil,
        customAmiId: Swift.String? = nil,
        ebsRootVolumeSize: Swift.Int? = nil,
        instances: EMRClientTypes.JobFlowInstancesConfig? = nil,
        jobFlowRole: Swift.String? = nil,
        kerberosAttributes: EMRClientTypes.KerberosAttributes? = nil,
        logEncryptionKmsKeyId: Swift.String? = nil,
        logUri: Swift.String? = nil,
        managedScalingPolicy: EMRClientTypes.ManagedScalingPolicy? = nil,
        name: Swift.String? = nil,
        newSupportedProducts: [EMRClientTypes.SupportedProductConfig]? = nil,
        osReleaseLabel: Swift.String? = nil,
        placementGroupConfigs: [EMRClientTypes.PlacementGroupConfig]? = nil,
        releaseLabel: Swift.String? = nil,
        repoUpgradeOnBoot: EMRClientTypes.RepoUpgradeOnBoot? = nil,
        scaleDownBehavior: EMRClientTypes.ScaleDownBehavior? = nil,
        securityConfiguration: Swift.String? = nil,
        serviceRole: Swift.String? = nil,
        stepConcurrencyLevel: Swift.Int? = nil,
        steps: [EMRClientTypes.StepConfig]? = nil,
        supportedProducts: [Swift.String]? = nil,
        tags: [EMRClientTypes.Tag]? = nil,
        visibleToAllUsers: Swift.Bool = false
    )
    {
        self.additionalInfo = additionalInfo
        self.amiVersion = amiVersion
        self.applications = applications
        self.autoScalingRole = autoScalingRole
        self.autoTerminationPolicy = autoTerminationPolicy
        self.bootstrapActions = bootstrapActions
        self.configurations = configurations
        self.customAmiId = customAmiId
        self.ebsRootVolumeSize = ebsRootVolumeSize
        self.instances = instances
        self.jobFlowRole = jobFlowRole
        self.kerberosAttributes = kerberosAttributes
        self.logEncryptionKmsKeyId = logEncryptionKmsKeyId
        self.logUri = logUri
        self.managedScalingPolicy = managedScalingPolicy
        self.name = name
        self.newSupportedProducts = newSupportedProducts
        self.osReleaseLabel = osReleaseLabel
        self.placementGroupConfigs = placementGroupConfigs
        self.releaseLabel = releaseLabel
        self.repoUpgradeOnBoot = repoUpgradeOnBoot
        self.scaleDownBehavior = scaleDownBehavior
        self.securityConfiguration = securityConfiguration
        self.serviceRole = serviceRole
        self.stepConcurrencyLevel = stepConcurrencyLevel
        self.steps = steps
        self.supportedProducts = supportedProducts
        self.tags = tags
        self.visibleToAllUsers = visibleToAllUsers
    }
}

struct RunJobFlowInputBody: Swift.Equatable {
    let name: Swift.String?
    let logUri: Swift.String?
    let logEncryptionKmsKeyId: Swift.String?
    let additionalInfo: Swift.String?
    let amiVersion: Swift.String?
    let releaseLabel: Swift.String?
    let instances: EMRClientTypes.JobFlowInstancesConfig?
    let steps: [EMRClientTypes.StepConfig]?
    let bootstrapActions: [EMRClientTypes.BootstrapActionConfig]?
    let supportedProducts: [Swift.String]?
    let newSupportedProducts: [EMRClientTypes.SupportedProductConfig]?
    let applications: [EMRClientTypes.Application]?
    let configurations: [EMRClientTypes.Configuration]?
    let visibleToAllUsers: Swift.Bool
    let jobFlowRole: Swift.String?
    let serviceRole: Swift.String?
    let tags: [EMRClientTypes.Tag]?
    let securityConfiguration: Swift.String?
    let autoScalingRole: Swift.String?
    let scaleDownBehavior: EMRClientTypes.ScaleDownBehavior?
    let customAmiId: Swift.String?
    let ebsRootVolumeSize: Swift.Int?
    let repoUpgradeOnBoot: EMRClientTypes.RepoUpgradeOnBoot?
    let kerberosAttributes: EMRClientTypes.KerberosAttributes?
    let stepConcurrencyLevel: Swift.Int?
    let managedScalingPolicy: EMRClientTypes.ManagedScalingPolicy?
    let placementGroupConfigs: [EMRClientTypes.PlacementGroupConfig]?
    let autoTerminationPolicy: EMRClientTypes.AutoTerminationPolicy?
    let osReleaseLabel: Swift.String?
}

extension RunJobFlowInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalInfo = "AdditionalInfo"
        case amiVersion = "AmiVersion"
        case applications = "Applications"
        case autoScalingRole = "AutoScalingRole"
        case autoTerminationPolicy = "AutoTerminationPolicy"
        case bootstrapActions = "BootstrapActions"
        case configurations = "Configurations"
        case customAmiId = "CustomAmiId"
        case ebsRootVolumeSize = "EbsRootVolumeSize"
        case instances = "Instances"
        case jobFlowRole = "JobFlowRole"
        case kerberosAttributes = "KerberosAttributes"
        case logEncryptionKmsKeyId = "LogEncryptionKmsKeyId"
        case logUri = "LogUri"
        case managedScalingPolicy = "ManagedScalingPolicy"
        case name = "Name"
        case newSupportedProducts = "NewSupportedProducts"
        case osReleaseLabel = "OSReleaseLabel"
        case placementGroupConfigs = "PlacementGroupConfigs"
        case releaseLabel = "ReleaseLabel"
        case repoUpgradeOnBoot = "RepoUpgradeOnBoot"
        case scaleDownBehavior = "ScaleDownBehavior"
        case securityConfiguration = "SecurityConfiguration"
        case serviceRole = "ServiceRole"
        case stepConcurrencyLevel = "StepConcurrencyLevel"
        case steps = "Steps"
        case supportedProducts = "SupportedProducts"
        case tags = "Tags"
        case visibleToAllUsers = "VisibleToAllUsers"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logUri)
        logUri = logUriDecoded
        let logEncryptionKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logEncryptionKmsKeyId)
        logEncryptionKmsKeyId = logEncryptionKmsKeyIdDecoded
        let additionalInfoDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .additionalInfo)
        additionalInfo = additionalInfoDecoded
        let amiVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amiVersion)
        amiVersion = amiVersionDecoded
        let releaseLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .releaseLabel)
        releaseLabel = releaseLabelDecoded
        let instancesDecoded = try containerValues.decodeIfPresent(EMRClientTypes.JobFlowInstancesConfig.self, forKey: .instances)
        instances = instancesDecoded
        let stepsContainer = try containerValues.decodeIfPresent([EMRClientTypes.StepConfig?].self, forKey: .steps)
        var stepsDecoded0:[EMRClientTypes.StepConfig]? = nil
        if let stepsContainer = stepsContainer {
            stepsDecoded0 = [EMRClientTypes.StepConfig]()
            for structure0 in stepsContainer {
                if let structure0 = structure0 {
                    stepsDecoded0?.append(structure0)
                }
            }
        }
        steps = stepsDecoded0
        let bootstrapActionsContainer = try containerValues.decodeIfPresent([EMRClientTypes.BootstrapActionConfig?].self, forKey: .bootstrapActions)
        var bootstrapActionsDecoded0:[EMRClientTypes.BootstrapActionConfig]? = nil
        if let bootstrapActionsContainer = bootstrapActionsContainer {
            bootstrapActionsDecoded0 = [EMRClientTypes.BootstrapActionConfig]()
            for structure0 in bootstrapActionsContainer {
                if let structure0 = structure0 {
                    bootstrapActionsDecoded0?.append(structure0)
                }
            }
        }
        bootstrapActions = bootstrapActionsDecoded0
        let supportedProductsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .supportedProducts)
        var supportedProductsDecoded0:[Swift.String]? = nil
        if let supportedProductsContainer = supportedProductsContainer {
            supportedProductsDecoded0 = [Swift.String]()
            for string0 in supportedProductsContainer {
                if let string0 = string0 {
                    supportedProductsDecoded0?.append(string0)
                }
            }
        }
        supportedProducts = supportedProductsDecoded0
        let newSupportedProductsContainer = try containerValues.decodeIfPresent([EMRClientTypes.SupportedProductConfig?].self, forKey: .newSupportedProducts)
        var newSupportedProductsDecoded0:[EMRClientTypes.SupportedProductConfig]? = nil
        if let newSupportedProductsContainer = newSupportedProductsContainer {
            newSupportedProductsDecoded0 = [EMRClientTypes.SupportedProductConfig]()
            for structure0 in newSupportedProductsContainer {
                if let structure0 = structure0 {
                    newSupportedProductsDecoded0?.append(structure0)
                }
            }
        }
        newSupportedProducts = newSupportedProductsDecoded0
        let applicationsContainer = try containerValues.decodeIfPresent([EMRClientTypes.Application?].self, forKey: .applications)
        var applicationsDecoded0:[EMRClientTypes.Application]? = nil
        if let applicationsContainer = applicationsContainer {
            applicationsDecoded0 = [EMRClientTypes.Application]()
            for structure0 in applicationsContainer {
                if let structure0 = structure0 {
                    applicationsDecoded0?.append(structure0)
                }
            }
        }
        applications = applicationsDecoded0
        let configurationsContainer = try containerValues.decodeIfPresent([EMRClientTypes.Configuration?].self, forKey: .configurations)
        var configurationsDecoded0:[EMRClientTypes.Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [EMRClientTypes.Configuration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
        let visibleToAllUsersDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .visibleToAllUsers) ?? false
        visibleToAllUsers = visibleToAllUsersDecoded
        let jobFlowRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobFlowRole)
        jobFlowRole = jobFlowRoleDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([EMRClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[EMRClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [EMRClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let autoScalingRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingRole)
        autoScalingRole = autoScalingRoleDecoded
        let scaleDownBehaviorDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ScaleDownBehavior.self, forKey: .scaleDownBehavior)
        scaleDownBehavior = scaleDownBehaviorDecoded
        let customAmiIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customAmiId)
        customAmiId = customAmiIdDecoded
        let ebsRootVolumeSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ebsRootVolumeSize)
        ebsRootVolumeSize = ebsRootVolumeSizeDecoded
        let repoUpgradeOnBootDecoded = try containerValues.decodeIfPresent(EMRClientTypes.RepoUpgradeOnBoot.self, forKey: .repoUpgradeOnBoot)
        repoUpgradeOnBoot = repoUpgradeOnBootDecoded
        let kerberosAttributesDecoded = try containerValues.decodeIfPresent(EMRClientTypes.KerberosAttributes.self, forKey: .kerberosAttributes)
        kerberosAttributes = kerberosAttributesDecoded
        let stepConcurrencyLevelDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .stepConcurrencyLevel)
        stepConcurrencyLevel = stepConcurrencyLevelDecoded
        let managedScalingPolicyDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ManagedScalingPolicy.self, forKey: .managedScalingPolicy)
        managedScalingPolicy = managedScalingPolicyDecoded
        let placementGroupConfigsContainer = try containerValues.decodeIfPresent([EMRClientTypes.PlacementGroupConfig?].self, forKey: .placementGroupConfigs)
        var placementGroupConfigsDecoded0:[EMRClientTypes.PlacementGroupConfig]? = nil
        if let placementGroupConfigsContainer = placementGroupConfigsContainer {
            placementGroupConfigsDecoded0 = [EMRClientTypes.PlacementGroupConfig]()
            for structure0 in placementGroupConfigsContainer {
                if let structure0 = structure0 {
                    placementGroupConfigsDecoded0?.append(structure0)
                }
            }
        }
        placementGroupConfigs = placementGroupConfigsDecoded0
        let autoTerminationPolicyDecoded = try containerValues.decodeIfPresent(EMRClientTypes.AutoTerminationPolicy.self, forKey: .autoTerminationPolicy)
        autoTerminationPolicy = autoTerminationPolicyDecoded
        let osReleaseLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .osReleaseLabel)
        osReleaseLabel = osReleaseLabelDecoded
    }
}

extension RunJobFlowOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RunJobFlowOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailure" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RunJobFlowOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension RunJobFlowOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RunJobFlowOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.clusterArn = output.clusterArn
            self.jobFlowId = output.jobFlowId
        } else {
            self.clusterArn = nil
            self.jobFlowId = nil
        }
    }
}

/// The result of the [RunJobFlow] operation.
public struct RunJobFlowOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the cluster.
    public var clusterArn: Swift.String?
    /// A unique identifier for the job flow.
    public var jobFlowId: Swift.String?

    public init (
        clusterArn: Swift.String? = nil,
        jobFlowId: Swift.String? = nil
    )
    {
        self.clusterArn = clusterArn
        self.jobFlowId = jobFlowId
    }
}

struct RunJobFlowOutputResponseBody: Swift.Equatable {
    let jobFlowId: Swift.String?
    let clusterArn: Swift.String?
}

extension RunJobFlowOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterArn = "ClusterArn"
        case jobFlowId = "JobFlowId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobFlowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobFlowId)
        jobFlowId = jobFlowIdDecoded
        let clusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
    }
}

extension EMRClientTypes {
    public enum ScaleDownBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case terminateAtInstanceHour
        case terminateAtTaskCompletion
        case sdkUnknown(Swift.String)

        public static var allCases: [ScaleDownBehavior] {
            return [
                .terminateAtInstanceHour,
                .terminateAtTaskCompletion,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .terminateAtInstanceHour: return "TERMINATE_AT_INSTANCE_HOUR"
            case .terminateAtTaskCompletion: return "TERMINATE_AT_TASK_COMPLETION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScaleDownBehavior(rawValue: rawValue) ?? ScaleDownBehavior.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.ScalingAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case market = "Market"
        case simpleScalingPolicyConfiguration = "SimpleScalingPolicyConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let market = self.market {
            try encodeContainer.encode(market.rawValue, forKey: .market)
        }
        if let simpleScalingPolicyConfiguration = self.simpleScalingPolicyConfiguration {
            try encodeContainer.encode(simpleScalingPolicyConfiguration, forKey: .simpleScalingPolicyConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let marketDecoded = try containerValues.decodeIfPresent(EMRClientTypes.MarketType.self, forKey: .market)
        market = marketDecoded
        let simpleScalingPolicyConfigurationDecoded = try containerValues.decodeIfPresent(EMRClientTypes.SimpleScalingPolicyConfiguration.self, forKey: .simpleScalingPolicyConfiguration)
        simpleScalingPolicyConfiguration = simpleScalingPolicyConfigurationDecoded
    }
}

extension EMRClientTypes {
    /// The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment.
    public struct ScalingAction: Swift.Equatable {
        /// Not available for instance groups. Instance groups use the market type specified for the group.
        public var market: EMRClientTypes.MarketType?
        /// The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment.
        /// This member is required.
        public var simpleScalingPolicyConfiguration: EMRClientTypes.SimpleScalingPolicyConfiguration?

        public init (
            market: EMRClientTypes.MarketType? = nil,
            simpleScalingPolicyConfiguration: EMRClientTypes.SimpleScalingPolicyConfiguration? = nil
        )
        {
            self.market = market
            self.simpleScalingPolicyConfiguration = simpleScalingPolicyConfiguration
        }
    }

}

extension EMRClientTypes.ScalingConstraints: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxCapacity = "MaxCapacity"
        case minCapacity = "MinCapacity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxCapacity = self.maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if let minCapacity = self.minCapacity {
            try encodeContainer.encode(minCapacity, forKey: .minCapacity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minCapacity)
        minCapacity = minCapacityDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
    }
}

extension EMRClientTypes {
    /// The upper and lower EC2 instance limits for an automatic scaling policy. Automatic scaling activities triggered by automatic scaling rules will not cause an instance group to grow above or below these limits.
    public struct ScalingConstraints: Swift.Equatable {
        /// The upper boundary of EC2 instances in an instance group beyond which scaling activities are not allowed to grow. Scale-out activities will not add instances beyond this boundary.
        /// This member is required.
        public var maxCapacity: Swift.Int?
        /// The lower boundary of EC2 instances in an instance group below which scaling activities are not allowed to shrink. Scale-in activities will not terminate instances below this boundary.
        /// This member is required.
        public var minCapacity: Swift.Int?

        public init (
            maxCapacity: Swift.Int? = nil,
            minCapacity: Swift.Int? = nil
        )
        {
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
        }
    }

}

extension EMRClientTypes.ScalingRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case description = "Description"
        case name = "Name"
        case trigger = "Trigger"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let trigger = self.trigger {
            try encodeContainer.encode(trigger, forKey: .trigger)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let actionDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ScalingAction.self, forKey: .action)
        action = actionDecoded
        let triggerDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ScalingTrigger.self, forKey: .trigger)
        trigger = triggerDecoded
    }
}

extension EMRClientTypes {
    /// A scale-in or scale-out rule that defines scaling activity, including the CloudWatch metric alarm that triggers activity, how EC2 instances are added or removed, and the periodicity of adjustments. The automatic scaling policy for an instance group can comprise one or more automatic scaling rules.
    public struct ScalingRule: Swift.Equatable {
        /// The conditions that trigger an automatic scaling activity.
        /// This member is required.
        public var action: EMRClientTypes.ScalingAction?
        /// A friendly, more verbose description of the automatic scaling rule.
        public var description: Swift.String?
        /// The name used to identify an automatic scaling rule. Rule names must be unique within a scaling policy.
        /// This member is required.
        public var name: Swift.String?
        /// The CloudWatch alarm definition that determines when automatic scaling activity is triggered.
        /// This member is required.
        public var trigger: EMRClientTypes.ScalingTrigger?

        public init (
            action: EMRClientTypes.ScalingAction? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            trigger: EMRClientTypes.ScalingTrigger? = nil
        )
        {
            self.action = action
            self.description = description
            self.name = name
            self.trigger = trigger
        }
    }

}

extension EMRClientTypes.ScalingTrigger: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchAlarmDefinition = "CloudWatchAlarmDefinition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchAlarmDefinition = self.cloudWatchAlarmDefinition {
            try encodeContainer.encode(cloudWatchAlarmDefinition, forKey: .cloudWatchAlarmDefinition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudWatchAlarmDefinitionDecoded = try containerValues.decodeIfPresent(EMRClientTypes.CloudWatchAlarmDefinition.self, forKey: .cloudWatchAlarmDefinition)
        cloudWatchAlarmDefinition = cloudWatchAlarmDefinitionDecoded
    }
}

extension EMRClientTypes {
    /// The conditions that trigger an automatic scaling activity.
    public struct ScalingTrigger: Swift.Equatable {
        /// The definition of a CloudWatch metric alarm. When the defined alarm conditions are met along with other trigger parameters, scaling activity begins.
        /// This member is required.
        public var cloudWatchAlarmDefinition: EMRClientTypes.CloudWatchAlarmDefinition?

        public init (
            cloudWatchAlarmDefinition: EMRClientTypes.CloudWatchAlarmDefinition? = nil
        )
        {
            self.cloudWatchAlarmDefinition = cloudWatchAlarmDefinition
        }
    }

}

extension EMRClientTypes.ScriptBootstrapActionConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case args = "Args"
        case path = "Path"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let args = args {
            var argsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .args)
            for xmlstring0 in args {
                try argsContainer.encode(xmlstring0)
            }
        }
        if let path = self.path {
            try encodeContainer.encode(path, forKey: .path)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let argsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .args)
        var argsDecoded0:[Swift.String]? = nil
        if let argsContainer = argsContainer {
            argsDecoded0 = [Swift.String]()
            for string0 in argsContainer {
                if let string0 = string0 {
                    argsDecoded0?.append(string0)
                }
            }
        }
        args = argsDecoded0
    }
}

extension EMRClientTypes {
    /// Configuration of the script to run during a bootstrap action.
    public struct ScriptBootstrapActionConfig: Swift.Equatable {
        /// A list of command line arguments to pass to the bootstrap action script.
        public var args: [Swift.String]?
        /// Location in Amazon S3 of the script to run during a bootstrap action.
        /// This member is required.
        public var path: Swift.String?

        public init (
            args: [Swift.String]? = nil,
            path: Swift.String? = nil
        )
        {
            self.args = args
            self.path = path
        }
    }

}

extension EMRClientTypes.SecurityConfigurationSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDateTime = "CreationDateTime"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDateTime = self.creationDateTime {
            try encodeContainer.encodeTimestamp(creationDateTime, format: .epochSeconds, forKey: .creationDateTime)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let creationDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
    }
}

extension EMRClientTypes {
    /// The creation date and time, and name, of a security configuration.
    public struct SecurityConfigurationSummary: Swift.Equatable {
        /// The date and time the security configuration was created.
        public var creationDateTime: ClientRuntime.Date?
        /// The name of the security configuration.
        public var name: Swift.String?

        public init (
            creationDateTime: ClientRuntime.Date? = nil,
            name: Swift.String? = nil
        )
        {
            self.creationDateTime = creationDateTime
            self.name = name
        }
    }

}

extension EMRClientTypes.SessionMappingDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case identityId = "IdentityId"
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case lastModifiedTime = "LastModifiedTime"
        case sessionPolicyArn = "SessionPolicyArn"
        case studioId = "StudioId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let identityId = self.identityId {
            try encodeContainer.encode(identityId, forKey: .identityId)
        }
        if let identityName = self.identityName {
            try encodeContainer.encode(identityName, forKey: .identityName)
        }
        if let identityType = self.identityType {
            try encodeContainer.encode(identityType.rawValue, forKey: .identityType)
        }
        if let lastModifiedTime = self.lastModifiedTime {
            try encodeContainer.encodeTimestamp(lastModifiedTime, format: .epochSeconds, forKey: .lastModifiedTime)
        }
        if let sessionPolicyArn = self.sessionPolicyArn {
            try encodeContainer.encode(sessionPolicyArn, forKey: .sessionPolicyArn)
        }
        if let studioId = self.studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let identityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityId)
        identityId = identityIdDecoded
        let identityNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityName)
        identityName = identityNameDecoded
        let identityTypeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let sessionPolicyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sessionPolicyArn)
        sessionPolicyArn = sessionPolicyArnDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension EMRClientTypes {
    /// Details for an Amazon EMR Studio session mapping including creation time, user or group ID, Studio ID, and so on.
    public struct SessionMappingDetail: Swift.Equatable {
        /// The time the session mapping was created.
        public var creationTime: ClientRuntime.Date?
        /// The globally unique identifier (GUID) of the user or group.
        public var identityId: Swift.String?
        /// The name of the user or group. For more information, see [UserName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName) and [DisplayName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName) in the IAM Identity Center Identity Store API Reference.
        public var identityName: Swift.String?
        /// Specifies whether the identity mapped to the Amazon EMR Studio is a user or a group.
        public var identityType: EMRClientTypes.IdentityType?
        /// The time the session mapping was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the session policy associated with the user or group.
        public var sessionPolicyArn: Swift.String?
        /// The ID of the Amazon EMR Studio.
        public var studioId: Swift.String?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            identityId: Swift.String? = nil,
            identityName: Swift.String? = nil,
            identityType: EMRClientTypes.IdentityType? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            sessionPolicyArn: Swift.String? = nil,
            studioId: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.identityId = identityId
            self.identityName = identityName
            self.identityType = identityType
            self.lastModifiedTime = lastModifiedTime
            self.sessionPolicyArn = sessionPolicyArn
            self.studioId = studioId
        }
    }

}

extension EMRClientTypes.SessionMappingSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case identityId = "IdentityId"
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case sessionPolicyArn = "SessionPolicyArn"
        case studioId = "StudioId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let identityId = self.identityId {
            try encodeContainer.encode(identityId, forKey: .identityId)
        }
        if let identityName = self.identityName {
            try encodeContainer.encode(identityName, forKey: .identityName)
        }
        if let identityType = self.identityType {
            try encodeContainer.encode(identityType.rawValue, forKey: .identityType)
        }
        if let sessionPolicyArn = self.sessionPolicyArn {
            try encodeContainer.encode(sessionPolicyArn, forKey: .sessionPolicyArn)
        }
        if let studioId = self.studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let identityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityId)
        identityId = identityIdDecoded
        let identityNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityName)
        identityName = identityNameDecoded
        let identityTypeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let sessionPolicyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sessionPolicyArn)
        sessionPolicyArn = sessionPolicyArnDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension EMRClientTypes {
    /// Details for an Amazon EMR Studio session mapping. The details do not include the time the session mapping was last modified.
    public struct SessionMappingSummary: Swift.Equatable {
        /// The time the session mapping was created.
        public var creationTime: ClientRuntime.Date?
        /// The globally unique identifier (GUID) of the user or group from the IAM Identity Center Identity Store.
        public var identityId: Swift.String?
        /// The name of the user or group. For more information, see [UserName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName) and [DisplayName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName) in the IAM Identity Center Identity Store API Reference.
        public var identityName: Swift.String?
        /// Specifies whether the identity mapped to the Amazon EMR Studio is a user or a group.
        public var identityType: EMRClientTypes.IdentityType?
        /// The Amazon Resource Name (ARN) of the session policy associated with the user or group.
        public var sessionPolicyArn: Swift.String?
        /// The ID of the Amazon EMR Studio.
        public var studioId: Swift.String?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            identityId: Swift.String? = nil,
            identityName: Swift.String? = nil,
            identityType: EMRClientTypes.IdentityType? = nil,
            sessionPolicyArn: Swift.String? = nil,
            studioId: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.identityId = identityId
            self.identityName = identityName
            self.identityType = identityType
            self.sessionPolicyArn = sessionPolicyArn
            self.studioId = studioId
        }
    }

}

extension SetTerminationProtectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobFlowIds = "JobFlowIds"
        case terminationProtected = "TerminationProtected"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobFlowIds = jobFlowIds {
            var jobFlowIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobFlowIds)
            for xmlstring0 in jobFlowIds {
                try jobFlowIdsContainer.encode(xmlstring0)
            }
        }
        if terminationProtected != false {
            try encodeContainer.encode(terminationProtected, forKey: .terminationProtected)
        }
    }
}

extension SetTerminationProtectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input argument to the [TerminationProtection] operation.
public struct SetTerminationProtectionInput: Swift.Equatable {
    /// A list of strings that uniquely identify the clusters to protect. This identifier is returned by [RunJobFlow] and can also be obtained from [DescribeJobFlows] .
    /// This member is required.
    public var jobFlowIds: [Swift.String]?
    /// A Boolean that indicates whether to protect the cluster and prevent the Amazon EC2 instances in the cluster from shutting down due to API calls, user intervention, or job-flow error.
    /// This member is required.
    public var terminationProtected: Swift.Bool

    public init (
        jobFlowIds: [Swift.String]? = nil,
        terminationProtected: Swift.Bool = false
    )
    {
        self.jobFlowIds = jobFlowIds
        self.terminationProtected = terminationProtected
    }
}

struct SetTerminationProtectionInputBody: Swift.Equatable {
    let jobFlowIds: [Swift.String]?
    let terminationProtected: Swift.Bool
}

extension SetTerminationProtectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobFlowIds = "JobFlowIds"
        case terminationProtected = "TerminationProtected"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobFlowIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .jobFlowIds)
        var jobFlowIdsDecoded0:[Swift.String]? = nil
        if let jobFlowIdsContainer = jobFlowIdsContainer {
            jobFlowIdsDecoded0 = [Swift.String]()
            for string0 in jobFlowIdsContainer {
                if let string0 = string0 {
                    jobFlowIdsDecoded0?.append(string0)
                }
            }
        }
        jobFlowIds = jobFlowIdsDecoded0
        let terminationProtectedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .terminationProtected) ?? false
        terminationProtected = terminationProtectedDecoded
    }
}

extension SetTerminationProtectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SetTerminationProtectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailure" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetTerminationProtectionOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetTerminationProtectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SetTerminationProtectionOutputResponse: Swift.Equatable {

    public init () { }
}

extension SetVisibleToAllUsersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobFlowIds = "JobFlowIds"
        case visibleToAllUsers = "VisibleToAllUsers"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobFlowIds = jobFlowIds {
            var jobFlowIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobFlowIds)
            for xmlstring0 in jobFlowIds {
                try jobFlowIdsContainer.encode(xmlstring0)
            }
        }
        if visibleToAllUsers != false {
            try encodeContainer.encode(visibleToAllUsers, forKey: .visibleToAllUsers)
        }
    }
}

extension SetVisibleToAllUsersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input to the SetVisibleToAllUsers action.
public struct SetVisibleToAllUsersInput: Swift.Equatable {
    /// The unique identifier of the job flow (cluster).
    /// This member is required.
    public var jobFlowIds: [Swift.String]?
    /// A value of true indicates that an IAM principal in the Amazon Web Services account can perform EMR actions on the cluster that the IAM policies attached to the principal allow. A value of false indicates that only the IAM principal that created the cluster and the Amazon Web Services root user can perform EMR actions on the cluster.
    /// This member is required.
    public var visibleToAllUsers: Swift.Bool

    public init (
        jobFlowIds: [Swift.String]? = nil,
        visibleToAllUsers: Swift.Bool = false
    )
    {
        self.jobFlowIds = jobFlowIds
        self.visibleToAllUsers = visibleToAllUsers
    }
}

struct SetVisibleToAllUsersInputBody: Swift.Equatable {
    let jobFlowIds: [Swift.String]?
    let visibleToAllUsers: Swift.Bool
}

extension SetVisibleToAllUsersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobFlowIds = "JobFlowIds"
        case visibleToAllUsers = "VisibleToAllUsers"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobFlowIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .jobFlowIds)
        var jobFlowIdsDecoded0:[Swift.String]? = nil
        if let jobFlowIdsContainer = jobFlowIdsContainer {
            jobFlowIdsDecoded0 = [Swift.String]()
            for string0 in jobFlowIdsContainer {
                if let string0 = string0 {
                    jobFlowIdsDecoded0?.append(string0)
                }
            }
        }
        jobFlowIds = jobFlowIdsDecoded0
        let visibleToAllUsersDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .visibleToAllUsers) ?? false
        visibleToAllUsers = visibleToAllUsersDecoded
    }
}

extension SetVisibleToAllUsersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SetVisibleToAllUsersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailure" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetVisibleToAllUsersOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetVisibleToAllUsersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SetVisibleToAllUsersOutputResponse: Swift.Equatable {

    public init () { }
}

extension EMRClientTypes.ShrinkPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case decommissionTimeout = "DecommissionTimeout"
        case instanceResizePolicy = "InstanceResizePolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let decommissionTimeout = self.decommissionTimeout {
            try encodeContainer.encode(decommissionTimeout, forKey: .decommissionTimeout)
        }
        if let instanceResizePolicy = self.instanceResizePolicy {
            try encodeContainer.encode(instanceResizePolicy, forKey: .instanceResizePolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let decommissionTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decommissionTimeout)
        decommissionTimeout = decommissionTimeoutDecoded
        let instanceResizePolicyDecoded = try containerValues.decodeIfPresent(EMRClientTypes.InstanceResizePolicy.self, forKey: .instanceResizePolicy)
        instanceResizePolicy = instanceResizePolicyDecoded
    }
}

extension EMRClientTypes {
    /// Policy for customizing shrink operations. Allows configuration of decommissioning timeout and targeted instance shrinking.
    public struct ShrinkPolicy: Swift.Equatable {
        /// The desired timeout for decommissioning an instance. Overrides the default YARN decommissioning timeout.
        public var decommissionTimeout: Swift.Int?
        /// Custom policy for requesting termination protection or termination of specific instances when shrinking an instance group.
        public var instanceResizePolicy: EMRClientTypes.InstanceResizePolicy?

        public init (
            decommissionTimeout: Swift.Int? = nil,
            instanceResizePolicy: EMRClientTypes.InstanceResizePolicy? = nil
        )
        {
            self.decommissionTimeout = decommissionTimeout
            self.instanceResizePolicy = instanceResizePolicy
        }
    }

}

extension EMRClientTypes.SimpleScalingPolicyConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adjustmentType = "AdjustmentType"
        case coolDown = "CoolDown"
        case scalingAdjustment = "ScalingAdjustment"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adjustmentType = self.adjustmentType {
            try encodeContainer.encode(adjustmentType.rawValue, forKey: .adjustmentType)
        }
        if let coolDown = self.coolDown {
            try encodeContainer.encode(coolDown, forKey: .coolDown)
        }
        if let scalingAdjustment = self.scalingAdjustment {
            try encodeContainer.encode(scalingAdjustment, forKey: .scalingAdjustment)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adjustmentTypeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.AdjustmentType.self, forKey: .adjustmentType)
        adjustmentType = adjustmentTypeDecoded
        let scalingAdjustmentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scalingAdjustment)
        scalingAdjustment = scalingAdjustmentDecoded
        let coolDownDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .coolDown)
        coolDown = coolDownDecoded
    }
}

extension EMRClientTypes {
    /// An automatic scaling configuration, which describes how the policy adds or removes instances, the cooldown period, and the number of EC2 instances that will be added each time the CloudWatch metric alarm condition is satisfied.
    public struct SimpleScalingPolicyConfiguration: Swift.Equatable {
        /// The way in which EC2 instances are added (if ScalingAdjustment is a positive number) or terminated (if ScalingAdjustment is a negative number) each time the scaling activity is triggered. CHANGE_IN_CAPACITY is the default. CHANGE_IN_CAPACITY indicates that the EC2 instance count increments or decrements by ScalingAdjustment, which should be expressed as an integer. PERCENT_CHANGE_IN_CAPACITY indicates the instance count increments or decrements by the percentage specified by ScalingAdjustment, which should be expressed as an integer. For example, 20 indicates an increase in 20% increments of cluster capacity. EXACT_CAPACITY indicates the scaling activity results in an instance group with the number of EC2 instances specified by ScalingAdjustment, which should be expressed as a positive integer.
        public var adjustmentType: EMRClientTypes.AdjustmentType?
        /// The amount of time, in seconds, after a scaling activity completes before any further trigger-related scaling activities can start. The default value is 0.
        public var coolDown: Swift.Int?
        /// The amount by which to scale in or scale out, based on the specified AdjustmentType. A positive value adds to the instance group's EC2 instance count while a negative number removes instances. If AdjustmentType is set to EXACT_CAPACITY, the number should only be a positive integer. If AdjustmentType is set to PERCENT_CHANGE_IN_CAPACITY, the value should express the percentage as an integer. For example, -20 indicates a decrease in 20% increments of cluster capacity.
        /// This member is required.
        public var scalingAdjustment: Swift.Int?

        public init (
            adjustmentType: EMRClientTypes.AdjustmentType? = nil,
            coolDown: Swift.Int? = nil,
            scalingAdjustment: Swift.Int? = nil
        )
        {
            self.adjustmentType = adjustmentType
            self.coolDown = coolDown
            self.scalingAdjustment = scalingAdjustment
        }
    }

}

extension EMRClientTypes.SimplifiedApplication: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension EMRClientTypes {
    /// The returned release label application names or versions.
    public struct SimplifiedApplication: Swift.Equatable {
        /// The returned release label application name. For example, hadoop.
        public var name: Swift.String?
        /// The returned release label application version. For example, 3.2.1.
        public var version: Swift.String?

        public init (
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.name = name
            self.version = version
        }
    }

}

extension EMRClientTypes {
    public enum SpotProvisioningAllocationStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case capacityOptimized
        case sdkUnknown(Swift.String)

        public static var allCases: [SpotProvisioningAllocationStrategy] {
            return [
                .capacityOptimized,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .capacityOptimized: return "capacity-optimized"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SpotProvisioningAllocationStrategy(rawValue: rawValue) ?? SpotProvisioningAllocationStrategy.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.SpotProvisioningSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocationStrategy = "AllocationStrategy"
        case blockDurationMinutes = "BlockDurationMinutes"
        case timeoutAction = "TimeoutAction"
        case timeoutDurationMinutes = "TimeoutDurationMinutes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allocationStrategy = self.allocationStrategy {
            try encodeContainer.encode(allocationStrategy.rawValue, forKey: .allocationStrategy)
        }
        if let blockDurationMinutes = self.blockDurationMinutes {
            try encodeContainer.encode(blockDurationMinutes, forKey: .blockDurationMinutes)
        }
        if let timeoutAction = self.timeoutAction {
            try encodeContainer.encode(timeoutAction.rawValue, forKey: .timeoutAction)
        }
        if let timeoutDurationMinutes = self.timeoutDurationMinutes {
            try encodeContainer.encode(timeoutDurationMinutes, forKey: .timeoutDurationMinutes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeoutDurationMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutDurationMinutes)
        timeoutDurationMinutes = timeoutDurationMinutesDecoded
        let timeoutActionDecoded = try containerValues.decodeIfPresent(EMRClientTypes.SpotProvisioningTimeoutAction.self, forKey: .timeoutAction)
        timeoutAction = timeoutActionDecoded
        let blockDurationMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .blockDurationMinutes)
        blockDurationMinutes = blockDurationMinutesDecoded
        let allocationStrategyDecoded = try containerValues.decodeIfPresent(EMRClientTypes.SpotProvisioningAllocationStrategy.self, forKey: .allocationStrategy)
        allocationStrategy = allocationStrategyDecoded
    }
}

extension EMRClientTypes {
    /// The launch specification for Spot Instances in the instance fleet, which determines the defined duration, provisioning timeout behavior, and allocation strategy. The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions. Spot Instance allocation strategy is available in Amazon EMR version 5.12.1 and later. Spot Instances with a defined duration (also known as Spot blocks) are no longer available to new customers from July 1, 2021. For customers who have previously used the feature, we will continue to support Spot Instances with a defined duration until December 31, 2022.
    public struct SpotProvisioningSpecification: Swift.Equatable {
        /// Specifies the strategy to use in launching Spot Instance fleets. Currently, the only option is capacity-optimized (the default), which launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.
        public var allocationStrategy: EMRClientTypes.SpotProvisioningAllocationStrategy?
        /// The defined duration for Spot Instances (also known as Spot blocks) in minutes. When specified, the Spot Instance does not terminate before the defined duration expires, and defined duration pricing for Spot Instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot Instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot Instance for termination and provides a Spot Instance termination notice, which gives the instance a two-minute warning before it terminates. Spot Instances with a defined duration (also known as Spot blocks) are no longer available to new customers from July 1, 2021. For customers who have previously used the feature, we will continue to support Spot Instances with a defined duration until December 31, 2022.
        public var blockDurationMinutes: Swift.Int?
        /// The action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot Instances could not be provisioned within the Spot provisioning timeout. Valid values are TERMINATE_CLUSTER and SWITCH_TO_ON_DEMAND. SWITCH_TO_ON_DEMAND specifies that if no Spot Instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
        /// This member is required.
        public var timeoutAction: EMRClientTypes.SpotProvisioningTimeoutAction?
        /// The spot provisioning timeout period in minutes. If Spot Instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
        /// This member is required.
        public var timeoutDurationMinutes: Swift.Int?

        public init (
            allocationStrategy: EMRClientTypes.SpotProvisioningAllocationStrategy? = nil,
            blockDurationMinutes: Swift.Int? = nil,
            timeoutAction: EMRClientTypes.SpotProvisioningTimeoutAction? = nil,
            timeoutDurationMinutes: Swift.Int? = nil
        )
        {
            self.allocationStrategy = allocationStrategy
            self.blockDurationMinutes = blockDurationMinutes
            self.timeoutAction = timeoutAction
            self.timeoutDurationMinutes = timeoutDurationMinutes
        }
    }

}

extension EMRClientTypes {
    public enum SpotProvisioningTimeoutAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case switchToOnDemand
        case terminateCluster
        case sdkUnknown(Swift.String)

        public static var allCases: [SpotProvisioningTimeoutAction] {
            return [
                .switchToOnDemand,
                .terminateCluster,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .switchToOnDemand: return "SWITCH_TO_ON_DEMAND"
            case .terminateCluster: return "TERMINATE_CLUSTER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SpotProvisioningTimeoutAction(rawValue: rawValue) ?? SpotProvisioningTimeoutAction.sdkUnknown(rawValue)
        }
    }
}

extension StartNotebookExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case editorId = "EditorId"
        case executionEngine = "ExecutionEngine"
        case notebookExecutionName = "NotebookExecutionName"
        case notebookInstanceSecurityGroupId = "NotebookInstanceSecurityGroupId"
        case notebookParams = "NotebookParams"
        case relativePath = "RelativePath"
        case serviceRole = "ServiceRole"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let editorId = self.editorId {
            try encodeContainer.encode(editorId, forKey: .editorId)
        }
        if let executionEngine = self.executionEngine {
            try encodeContainer.encode(executionEngine, forKey: .executionEngine)
        }
        if let notebookExecutionName = self.notebookExecutionName {
            try encodeContainer.encode(notebookExecutionName, forKey: .notebookExecutionName)
        }
        if let notebookInstanceSecurityGroupId = self.notebookInstanceSecurityGroupId {
            try encodeContainer.encode(notebookInstanceSecurityGroupId, forKey: .notebookInstanceSecurityGroupId)
        }
        if let notebookParams = self.notebookParams {
            try encodeContainer.encode(notebookParams, forKey: .notebookParams)
        }
        if let relativePath = self.relativePath {
            try encodeContainer.encode(relativePath, forKey: .relativePath)
        }
        if let serviceRole = self.serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension StartNotebookExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartNotebookExecutionInput: Swift.Equatable {
    /// The unique identifier of the EMR Notebook to use for notebook execution.
    /// This member is required.
    public var editorId: Swift.String?
    /// Specifies the execution engine (cluster) that runs the notebook execution.
    /// This member is required.
    public var executionEngine: EMRClientTypes.ExecutionEngineConfig?
    /// An optional name for the notebook execution.
    public var notebookExecutionName: Swift.String?
    /// The unique identifier of the Amazon EC2 security group to associate with the EMR Notebook for this notebook execution.
    public var notebookInstanceSecurityGroupId: Swift.String?
    /// Input parameters in JSON format passed to the EMR Notebook at runtime for execution.
    public var notebookParams: Swift.String?
    /// The path and file name of the notebook file for this execution, relative to the path specified for the EMR Notebook. For example, if you specify a path of s3://MyBucket/MyNotebooks when you create an EMR Notebook for a notebook with an ID of e-ABCDEFGHIJK1234567890ABCD (the EditorID of this request), and you specify a RelativePath of my_notebook_executions/notebook_execution.ipynb, the location of the file for the notebook execution is s3://MyBucket/MyNotebooks/e-ABCDEFGHIJK1234567890ABCD/my_notebook_executions/notebook_execution.ipynb.
    /// This member is required.
    public var relativePath: Swift.String?
    /// The name or ARN of the IAM role that is used as the service role for Amazon EMR (the EMR role) for the notebook execution.
    /// This member is required.
    public var serviceRole: Swift.String?
    /// A list of tags associated with a notebook execution. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters and an optional value string with a maximum of 256 characters.
    public var tags: [EMRClientTypes.Tag]?

    public init (
        editorId: Swift.String? = nil,
        executionEngine: EMRClientTypes.ExecutionEngineConfig? = nil,
        notebookExecutionName: Swift.String? = nil,
        notebookInstanceSecurityGroupId: Swift.String? = nil,
        notebookParams: Swift.String? = nil,
        relativePath: Swift.String? = nil,
        serviceRole: Swift.String? = nil,
        tags: [EMRClientTypes.Tag]? = nil
    )
    {
        self.editorId = editorId
        self.executionEngine = executionEngine
        self.notebookExecutionName = notebookExecutionName
        self.notebookInstanceSecurityGroupId = notebookInstanceSecurityGroupId
        self.notebookParams = notebookParams
        self.relativePath = relativePath
        self.serviceRole = serviceRole
        self.tags = tags
    }
}

struct StartNotebookExecutionInputBody: Swift.Equatable {
    let editorId: Swift.String?
    let relativePath: Swift.String?
    let notebookExecutionName: Swift.String?
    let notebookParams: Swift.String?
    let executionEngine: EMRClientTypes.ExecutionEngineConfig?
    let serviceRole: Swift.String?
    let notebookInstanceSecurityGroupId: Swift.String?
    let tags: [EMRClientTypes.Tag]?
}

extension StartNotebookExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case editorId = "EditorId"
        case executionEngine = "ExecutionEngine"
        case notebookExecutionName = "NotebookExecutionName"
        case notebookInstanceSecurityGroupId = "NotebookInstanceSecurityGroupId"
        case notebookParams = "NotebookParams"
        case relativePath = "RelativePath"
        case serviceRole = "ServiceRole"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let editorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .editorId)
        editorId = editorIdDecoded
        let relativePathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relativePath)
        relativePath = relativePathDecoded
        let notebookExecutionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookExecutionName)
        notebookExecutionName = notebookExecutionNameDecoded
        let notebookParamsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookParams)
        notebookParams = notebookParamsDecoded
        let executionEngineDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ExecutionEngineConfig.self, forKey: .executionEngine)
        executionEngine = executionEngineDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let notebookInstanceSecurityGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceSecurityGroupId)
        notebookInstanceSecurityGroupId = notebookInstanceSecurityGroupIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([EMRClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[EMRClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [EMRClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension StartNotebookExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartNotebookExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartNotebookExecutionOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartNotebookExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartNotebookExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.notebookExecutionId = output.notebookExecutionId
        } else {
            self.notebookExecutionId = nil
        }
    }
}

public struct StartNotebookExecutionOutputResponse: Swift.Equatable {
    /// The unique identifier of the notebook execution.
    public var notebookExecutionId: Swift.String?

    public init (
        notebookExecutionId: Swift.String? = nil
    )
    {
        self.notebookExecutionId = notebookExecutionId
    }
}

struct StartNotebookExecutionOutputResponseBody: Swift.Equatable {
    let notebookExecutionId: Swift.String?
}

extension StartNotebookExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookExecutionId = "NotebookExecutionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookExecutionId)
        notebookExecutionId = notebookExecutionIdDecoded
    }
}

extension EMRClientTypes {
    public enum Statistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case average
        case maximum
        case minimum
        case sampleCount
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [Statistic] {
            return [
                .average,
                .maximum,
                .minimum,
                .sampleCount,
                .sum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .average: return "AVERAGE"
            case .maximum: return "MAXIMUM"
            case .minimum: return "MINIMUM"
            case .sampleCount: return "SAMPLE_COUNT"
            case .sum: return "SUM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Statistic(rawValue: rawValue) ?? Statistic.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.Step: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionOnFailure = "ActionOnFailure"
        case config = "Config"
        case executionRoleArn = "ExecutionRoleArn"
        case id = "Id"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionOnFailure = self.actionOnFailure {
            try encodeContainer.encode(actionOnFailure.rawValue, forKey: .actionOnFailure)
        }
        if let config = self.config {
            try encodeContainer.encode(config, forKey: .config)
        }
        if let executionRoleArn = self.executionRoleArn {
            try encodeContainer.encode(executionRoleArn, forKey: .executionRoleArn)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let configDecoded = try containerValues.decodeIfPresent(EMRClientTypes.HadoopStepConfig.self, forKey: .config)
        config = configDecoded
        let actionOnFailureDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ActionOnFailure.self, forKey: .actionOnFailure)
        actionOnFailure = actionOnFailureDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EMRClientTypes.StepStatus.self, forKey: .status)
        status = statusDecoded
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
    }
}

extension EMRClientTypes {
    /// This represents a step in a cluster.
    public struct Step: Swift.Equatable {
        /// The action to take when the cluster step fails. Possible values are TERMINATE_CLUSTER, CANCEL_AND_WAIT, and CONTINUE. TERMINATE_JOB_FLOW is provided for backward compatibility. We recommend using TERMINATE_CLUSTER instead. If a cluster's StepConcurrencyLevel is greater than 1, do not use AddJobFlowSteps to submit a step with this parameter set to CANCEL_AND_WAIT or TERMINATE_CLUSTER. The step is not submitted and the action fails with a message that the ActionOnFailure setting is not valid. If you change a cluster's StepConcurrencyLevel to be greater than 1 while a step is running, the ActionOnFailure parameter may not behave as you expect. In this case, for a step that fails with this parameter set to CANCEL_AND_WAIT, pending steps and the running step are not canceled; for a step that fails with this parameter set to TERMINATE_CLUSTER, the cluster does not terminate.
        public var actionOnFailure: EMRClientTypes.ActionOnFailure?
        /// The Hadoop job configuration of the cluster step.
        public var config: EMRClientTypes.HadoopStepConfig?
        /// The Amazon Resource Name (ARN) of the runtime role for a step on the cluster. The runtime role can be a cross-account IAM role. The runtime role ARN is a combination of account ID, role name, and role type using the following format: arn:partition:service:region:account:resource. For example, arn:aws:iam::1234567890:role/ReadOnly is a correctly formatted runtime role ARN.
        public var executionRoleArn: Swift.String?
        /// The identifier of the cluster step.
        public var id: Swift.String?
        /// The name of the cluster step.
        public var name: Swift.String?
        /// The current execution status details of the cluster step.
        public var status: EMRClientTypes.StepStatus?

        public init (
            actionOnFailure: EMRClientTypes.ActionOnFailure? = nil,
            config: EMRClientTypes.HadoopStepConfig? = nil,
            executionRoleArn: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            status: EMRClientTypes.StepStatus? = nil
        )
        {
            self.actionOnFailure = actionOnFailure
            self.config = config
            self.executionRoleArn = executionRoleArn
            self.id = id
            self.name = name
            self.status = status
        }
    }

}

extension EMRClientTypes {
    public enum StepCancellationOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case sendInterrupt
        case terminateProcess
        case sdkUnknown(Swift.String)

        public static var allCases: [StepCancellationOption] {
            return [
                .sendInterrupt,
                .terminateProcess,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .sendInterrupt: return "SEND_INTERRUPT"
            case .terminateProcess: return "TERMINATE_PROCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StepCancellationOption(rawValue: rawValue) ?? StepCancellationOption.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.StepConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionOnFailure = "ActionOnFailure"
        case hadoopJarStep = "HadoopJarStep"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionOnFailure = self.actionOnFailure {
            try encodeContainer.encode(actionOnFailure.rawValue, forKey: .actionOnFailure)
        }
        if let hadoopJarStep = self.hadoopJarStep {
            try encodeContainer.encode(hadoopJarStep, forKey: .hadoopJarStep)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let actionOnFailureDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ActionOnFailure.self, forKey: .actionOnFailure)
        actionOnFailure = actionOnFailureDecoded
        let hadoopJarStepDecoded = try containerValues.decodeIfPresent(EMRClientTypes.HadoopJarStepConfig.self, forKey: .hadoopJarStep)
        hadoopJarStep = hadoopJarStepDecoded
    }
}

extension EMRClientTypes {
    /// Specification for a cluster (job flow) step.
    public struct StepConfig: Swift.Equatable {
        /// The action to take when the step fails. Use one of the following values:
        ///
        /// * TERMINATE_CLUSTER - Shuts down the cluster.
        ///
        /// * CANCEL_AND_WAIT - Cancels any pending steps and returns the cluster to the WAITING state.
        ///
        /// * CONTINUE - Continues to the next step in the queue.
        ///
        /// * TERMINATE_JOB_FLOW - Shuts down the cluster. TERMINATE_JOB_FLOW is provided for backward compatibility. We recommend using TERMINATE_CLUSTER instead.
        ///
        ///
        /// If a cluster's StepConcurrencyLevel is greater than 1, do not use AddJobFlowSteps to submit a step with this parameter set to CANCEL_AND_WAIT or TERMINATE_CLUSTER. The step is not submitted and the action fails with a message that the ActionOnFailure setting is not valid. If you change a cluster's StepConcurrencyLevel to be greater than 1 while a step is running, the ActionOnFailure parameter may not behave as you expect. In this case, for a step that fails with this parameter set to CANCEL_AND_WAIT, pending steps and the running step are not canceled; for a step that fails with this parameter set to TERMINATE_CLUSTER, the cluster does not terminate.
        public var actionOnFailure: EMRClientTypes.ActionOnFailure?
        /// The JAR file used for the step.
        /// This member is required.
        public var hadoopJarStep: EMRClientTypes.HadoopJarStepConfig?
        /// The name of the step.
        /// This member is required.
        public var name: Swift.String?

        public init (
            actionOnFailure: EMRClientTypes.ActionOnFailure? = nil,
            hadoopJarStep: EMRClientTypes.HadoopJarStepConfig? = nil,
            name: Swift.String? = nil
        )
        {
            self.actionOnFailure = actionOnFailure
            self.hadoopJarStep = hadoopJarStep
            self.name = name
        }
    }

}

extension EMRClientTypes.StepDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionStatusDetail = "ExecutionStatusDetail"
        case stepConfig = "StepConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionStatusDetail = self.executionStatusDetail {
            try encodeContainer.encode(executionStatusDetail, forKey: .executionStatusDetail)
        }
        if let stepConfig = self.stepConfig {
            try encodeContainer.encode(stepConfig, forKey: .stepConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stepConfigDecoded = try containerValues.decodeIfPresent(EMRClientTypes.StepConfig.self, forKey: .stepConfig)
        stepConfig = stepConfigDecoded
        let executionStatusDetailDecoded = try containerValues.decodeIfPresent(EMRClientTypes.StepExecutionStatusDetail.self, forKey: .executionStatusDetail)
        executionStatusDetail = executionStatusDetailDecoded
    }
}

extension EMRClientTypes {
    /// Combines the execution state and configuration of a step.
    public struct StepDetail: Swift.Equatable {
        /// The description of the step status.
        /// This member is required.
        public var executionStatusDetail: EMRClientTypes.StepExecutionStatusDetail?
        /// The step configuration.
        /// This member is required.
        public var stepConfig: EMRClientTypes.StepConfig?

        public init (
            executionStatusDetail: EMRClientTypes.StepExecutionStatusDetail? = nil,
            stepConfig: EMRClientTypes.StepConfig? = nil
        )
        {
            self.executionStatusDetail = executionStatusDetail
            self.stepConfig = stepConfig
        }
    }

}

extension EMRClientTypes {
    public enum StepExecutionState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case completed
        case `continue`
        case failed
        case interrupted
        case pending
        case running
        case sdkUnknown(Swift.String)

        public static var allCases: [StepExecutionState] {
            return [
                .cancelled,
                .completed,
                .continue,
                .failed,
                .interrupted,
                .pending,
                .running,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .completed: return "COMPLETED"
            case .continue: return "CONTINUE"
            case .failed: return "FAILED"
            case .interrupted: return "INTERRUPTED"
            case .pending: return "PENDING"
            case .running: return "RUNNING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StepExecutionState(rawValue: rawValue) ?? StepExecutionState.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.StepExecutionStatusDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDateTime = "CreationDateTime"
        case endDateTime = "EndDateTime"
        case lastStateChangeReason = "LastStateChangeReason"
        case startDateTime = "StartDateTime"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDateTime = self.creationDateTime {
            try encodeContainer.encodeTimestamp(creationDateTime, format: .epochSeconds, forKey: .creationDateTime)
        }
        if let endDateTime = self.endDateTime {
            try encodeContainer.encodeTimestamp(endDateTime, format: .epochSeconds, forKey: .endDateTime)
        }
        if let lastStateChangeReason = self.lastStateChangeReason {
            try encodeContainer.encode(lastStateChangeReason, forKey: .lastStateChangeReason)
        }
        if let startDateTime = self.startDateTime {
            try encodeContainer.encodeTimestamp(startDateTime, format: .epochSeconds, forKey: .startDateTime)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(EMRClientTypes.StepExecutionState.self, forKey: .state)
        state = stateDecoded
        let creationDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let startDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startDateTime)
        startDateTime = startDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
        let lastStateChangeReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastStateChangeReason)
        lastStateChangeReason = lastStateChangeReasonDecoded
    }
}

extension EMRClientTypes {
    /// The execution state of a step.
    public struct StepExecutionStatusDetail: Swift.Equatable {
        /// The creation date and time of the step.
        /// This member is required.
        public var creationDateTime: ClientRuntime.Date?
        /// The completion date and time of the step.
        public var endDateTime: ClientRuntime.Date?
        /// A description of the step's current state.
        public var lastStateChangeReason: Swift.String?
        /// The start date and time of the step.
        public var startDateTime: ClientRuntime.Date?
        /// The state of the step.
        /// This member is required.
        public var state: EMRClientTypes.StepExecutionState?

        public init (
            creationDateTime: ClientRuntime.Date? = nil,
            endDateTime: ClientRuntime.Date? = nil,
            lastStateChangeReason: Swift.String? = nil,
            startDateTime: ClientRuntime.Date? = nil,
            state: EMRClientTypes.StepExecutionState? = nil
        )
        {
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.lastStateChangeReason = lastStateChangeReason
            self.startDateTime = startDateTime
            self.state = state
        }
    }

}

extension EMRClientTypes {
    public enum StepState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case cancelPending
        case completed
        case failed
        case interrupted
        case pending
        case running
        case sdkUnknown(Swift.String)

        public static var allCases: [StepState] {
            return [
                .cancelled,
                .cancelPending,
                .completed,
                .failed,
                .interrupted,
                .pending,
                .running,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .cancelPending: return "CANCEL_PENDING"
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .interrupted: return "INTERRUPTED"
            case .pending: return "PENDING"
            case .running: return "RUNNING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StepState(rawValue: rawValue) ?? StepState.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.StepStateChangeReason: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.StepStateChangeReasonCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EMRClientTypes {
    /// The details of the step state change reason.
    public struct StepStateChangeReason: Swift.Equatable {
        /// The programmable code for the state change reason. Note: Currently, the service provides no code for the state change.
        public var code: EMRClientTypes.StepStateChangeReasonCode?
        /// The descriptive message for the state change reason.
        public var message: Swift.String?

        public init (
            code: EMRClientTypes.StepStateChangeReasonCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension EMRClientTypes {
    public enum StepStateChangeReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [StepStateChangeReasonCode] {
            return [
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StepStateChangeReasonCode(rawValue: rawValue) ?? StepStateChangeReasonCode.sdkUnknown(rawValue)
        }
    }
}

extension EMRClientTypes.StepStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureDetails = "FailureDetails"
        case state = "State"
        case stateChangeReason = "StateChangeReason"
        case timeline = "Timeline"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failureDetails = self.failureDetails {
            try encodeContainer.encode(failureDetails, forKey: .failureDetails)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateChangeReason = self.stateChangeReason {
            try encodeContainer.encode(stateChangeReason, forKey: .stateChangeReason)
        }
        if let timeline = self.timeline {
            try encodeContainer.encode(timeline, forKey: .timeline)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(EMRClientTypes.StepState.self, forKey: .state)
        state = stateDecoded
        let stateChangeReasonDecoded = try containerValues.decodeIfPresent(EMRClientTypes.StepStateChangeReason.self, forKey: .stateChangeReason)
        stateChangeReason = stateChangeReasonDecoded
        let failureDetailsDecoded = try containerValues.decodeIfPresent(EMRClientTypes.FailureDetails.self, forKey: .failureDetails)
        failureDetails = failureDetailsDecoded
        let timelineDecoded = try containerValues.decodeIfPresent(EMRClientTypes.StepTimeline.self, forKey: .timeline)
        timeline = timelineDecoded
    }
}

extension EMRClientTypes {
    /// The execution status details of the cluster step.
    public struct StepStatus: Swift.Equatable {
        /// The details for the step failure including reason, message, and log file path where the root cause was identified.
        public var failureDetails: EMRClientTypes.FailureDetails?
        /// The execution state of the cluster step.
        public var state: EMRClientTypes.StepState?
        /// The reason for the step execution status change.
        public var stateChangeReason: EMRClientTypes.StepStateChangeReason?
        /// The timeline of the cluster step status over time.
        public var timeline: EMRClientTypes.StepTimeline?

        public init (
            failureDetails: EMRClientTypes.FailureDetails? = nil,
            state: EMRClientTypes.StepState? = nil,
            stateChangeReason: EMRClientTypes.StepStateChangeReason? = nil,
            timeline: EMRClientTypes.StepTimeline? = nil
        )
        {
            self.failureDetails = failureDetails
            self.state = state
            self.stateChangeReason = stateChangeReason
            self.timeline = timeline
        }
    }

}

extension EMRClientTypes.StepSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionOnFailure = "ActionOnFailure"
        case config = "Config"
        case id = "Id"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionOnFailure = self.actionOnFailure {
            try encodeContainer.encode(actionOnFailure.rawValue, forKey: .actionOnFailure)
        }
        if let config = self.config {
            try encodeContainer.encode(config, forKey: .config)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let configDecoded = try containerValues.decodeIfPresent(EMRClientTypes.HadoopStepConfig.self, forKey: .config)
        config = configDecoded
        let actionOnFailureDecoded = try containerValues.decodeIfPresent(EMRClientTypes.ActionOnFailure.self, forKey: .actionOnFailure)
        actionOnFailure = actionOnFailureDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EMRClientTypes.StepStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension EMRClientTypes {
    /// The summary of the cluster step.
    public struct StepSummary: Swift.Equatable {
        /// The action to take when the cluster step fails. Possible values are TERMINATE_CLUSTER, CANCEL_AND_WAIT, and CONTINUE. TERMINATE_JOB_FLOW is available for backward compatibility.
        public var actionOnFailure: EMRClientTypes.ActionOnFailure?
        /// The Hadoop job configuration of the cluster step.
        public var config: EMRClientTypes.HadoopStepConfig?
        /// The identifier of the cluster step.
        public var id: Swift.String?
        /// The name of the cluster step.
        public var name: Swift.String?
        /// The current execution status details of the cluster step.
        public var status: EMRClientTypes.StepStatus?

        public init (
            actionOnFailure: EMRClientTypes.ActionOnFailure? = nil,
            config: EMRClientTypes.HadoopStepConfig? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            status: EMRClientTypes.StepStatus? = nil
        )
        {
            self.actionOnFailure = actionOnFailure
            self.config = config
            self.id = id
            self.name = name
            self.status = status
        }
    }

}

extension EMRClientTypes.StepTimeline: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDateTime = "CreationDateTime"
        case endDateTime = "EndDateTime"
        case startDateTime = "StartDateTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDateTime = self.creationDateTime {
            try encodeContainer.encodeTimestamp(creationDateTime, format: .epochSeconds, forKey: .creationDateTime)
        }
        if let endDateTime = self.endDateTime {
            try encodeContainer.encodeTimestamp(endDateTime, format: .epochSeconds, forKey: .endDateTime)
        }
        if let startDateTime = self.startDateTime {
            try encodeContainer.encodeTimestamp(startDateTime, format: .epochSeconds, forKey: .startDateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let startDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startDateTime)
        startDateTime = startDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
    }
}

extension EMRClientTypes {
    /// The timeline of the cluster step lifecycle.
    public struct StepTimeline: Swift.Equatable {
        /// The date and time when the cluster step was created.
        public var creationDateTime: ClientRuntime.Date?
        /// The date and time when the cluster step execution completed or failed.
        public var endDateTime: ClientRuntime.Date?
        /// The date and time when the cluster step execution started.
        public var startDateTime: ClientRuntime.Date?

        public init (
            creationDateTime: ClientRuntime.Date? = nil,
            endDateTime: ClientRuntime.Date? = nil,
            startDateTime: ClientRuntime.Date? = nil
        )
        {
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.startDateTime = startDateTime
        }
    }

}

extension StopNotebookExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookExecutionId = "NotebookExecutionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notebookExecutionId = self.notebookExecutionId {
            try encodeContainer.encode(notebookExecutionId, forKey: .notebookExecutionId)
        }
    }
}

extension StopNotebookExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopNotebookExecutionInput: Swift.Equatable {
    /// The unique identifier of the notebook execution.
    /// This member is required.
    public var notebookExecutionId: Swift.String?

    public init (
        notebookExecutionId: Swift.String? = nil
    )
    {
        self.notebookExecutionId = notebookExecutionId
    }
}

struct StopNotebookExecutionInputBody: Swift.Equatable {
    let notebookExecutionId: Swift.String?
}

extension StopNotebookExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookExecutionId = "NotebookExecutionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookExecutionId)
        notebookExecutionId = notebookExecutionIdDecoded
    }
}

extension StopNotebookExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopNotebookExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailure" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopNotebookExecutionOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopNotebookExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopNotebookExecutionOutputResponse: Swift.Equatable {

    public init () { }
}

extension EMRClientTypes.Studio: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authMode = "AuthMode"
        case creationTime = "CreationTime"
        case defaultS3Location = "DefaultS3Location"
        case description = "Description"
        case engineSecurityGroupId = "EngineSecurityGroupId"
        case idpAuthUrl = "IdpAuthUrl"
        case idpRelayStateParameterName = "IdpRelayStateParameterName"
        case name = "Name"
        case serviceRole = "ServiceRole"
        case studioArn = "StudioArn"
        case studioId = "StudioId"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case url = "Url"
        case userRole = "UserRole"
        case vpcId = "VpcId"
        case workspaceSecurityGroupId = "WorkspaceSecurityGroupId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authMode = self.authMode {
            try encodeContainer.encode(authMode.rawValue, forKey: .authMode)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let defaultS3Location = self.defaultS3Location {
            try encodeContainer.encode(defaultS3Location, forKey: .defaultS3Location)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let engineSecurityGroupId = self.engineSecurityGroupId {
            try encodeContainer.encode(engineSecurityGroupId, forKey: .engineSecurityGroupId)
        }
        if let idpAuthUrl = self.idpAuthUrl {
            try encodeContainer.encode(idpAuthUrl, forKey: .idpAuthUrl)
        }
        if let idpRelayStateParameterName = self.idpRelayStateParameterName {
            try encodeContainer.encode(idpRelayStateParameterName, forKey: .idpRelayStateParameterName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let serviceRole = self.serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let studioArn = self.studioArn {
            try encodeContainer.encode(studioArn, forKey: .studioArn)
        }
        if let studioId = self.studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for string0 in subnetIds {
                try subnetIdsContainer.encode(string0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
        if let userRole = self.userRole {
            try encodeContainer.encode(userRole, forKey: .userRole)
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
        if let workspaceSecurityGroupId = self.workspaceSecurityGroupId {
            try encodeContainer.encode(workspaceSecurityGroupId, forKey: .workspaceSecurityGroupId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let studioArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioArn)
        studioArn = studioArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let authModeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.AuthMode.self, forKey: .authMode)
        authMode = authModeDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let userRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userRole)
        userRole = userRoleDecoded
        let workspaceSecurityGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workspaceSecurityGroupId)
        workspaceSecurityGroupId = workspaceSecurityGroupIdDecoded
        let engineSecurityGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineSecurityGroupId)
        engineSecurityGroupId = engineSecurityGroupIdDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let defaultS3LocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultS3Location)
        defaultS3Location = defaultS3LocationDecoded
        let idpAuthUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idpAuthUrl)
        idpAuthUrl = idpAuthUrlDecoded
        let idpRelayStateParameterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idpRelayStateParameterName)
        idpRelayStateParameterName = idpRelayStateParameterNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([EMRClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[EMRClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [EMRClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension EMRClientTypes {
    /// Details for an Amazon EMR Studio including ID, creation time, name, and so on.
    public struct Studio: Swift.Equatable {
        /// Specifies whether the Amazon EMR Studio authenticates users using IAM or IAM Identity Center.
        public var authMode: EMRClientTypes.AuthMode?
        /// The time the Amazon EMR Studio was created.
        public var creationTime: ClientRuntime.Date?
        /// The Amazon S3 location to back up Amazon EMR Studio Workspaces and notebook files.
        public var defaultS3Location: Swift.String?
        /// The detailed description of the Amazon EMR Studio.
        public var description: Swift.String?
        /// The ID of the Engine security group associated with the Amazon EMR Studio. The Engine security group allows inbound network traffic from resources in the Workspace security group.
        public var engineSecurityGroupId: Swift.String?
        /// Your identity provider's authentication endpoint. Amazon EMR Studio redirects federated users to this endpoint for authentication when logging in to a Studio with the Studio URL.
        public var idpAuthUrl: Swift.String?
        /// The name of your identity provider's RelayState parameter.
        public var idpRelayStateParameterName: Swift.String?
        /// The name of the Amazon EMR Studio.
        public var name: Swift.String?
        /// The name of the IAM role assumed by the Amazon EMR Studio.
        public var serviceRole: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon EMR Studio.
        public var studioArn: Swift.String?
        /// The ID of the Amazon EMR Studio.
        public var studioId: Swift.String?
        /// The list of IDs of the subnets associated with the Amazon EMR Studio.
        public var subnetIds: [Swift.String]?
        /// A list of tags associated with the Amazon EMR Studio.
        public var tags: [EMRClientTypes.Tag]?
        /// The unique access URL of the Amazon EMR Studio.
        public var url: Swift.String?
        /// The name of the IAM role assumed by users logged in to the Amazon EMR Studio. A Studio only requires a UserRole when you use IAM authentication.
        public var userRole: Swift.String?
        /// The ID of the VPC associated with the Amazon EMR Studio.
        public var vpcId: Swift.String?
        /// The ID of the Workspace security group associated with the Amazon EMR Studio. The Workspace security group allows outbound network traffic to resources in the Engine security group and to the internet.
        public var workspaceSecurityGroupId: Swift.String?

        public init (
            authMode: EMRClientTypes.AuthMode? = nil,
            creationTime: ClientRuntime.Date? = nil,
            defaultS3Location: Swift.String? = nil,
            description: Swift.String? = nil,
            engineSecurityGroupId: Swift.String? = nil,
            idpAuthUrl: Swift.String? = nil,
            idpRelayStateParameterName: Swift.String? = nil,
            name: Swift.String? = nil,
            serviceRole: Swift.String? = nil,
            studioArn: Swift.String? = nil,
            studioId: Swift.String? = nil,
            subnetIds: [Swift.String]? = nil,
            tags: [EMRClientTypes.Tag]? = nil,
            url: Swift.String? = nil,
            userRole: Swift.String? = nil,
            vpcId: Swift.String? = nil,
            workspaceSecurityGroupId: Swift.String? = nil
        )
        {
            self.authMode = authMode
            self.creationTime = creationTime
            self.defaultS3Location = defaultS3Location
            self.description = description
            self.engineSecurityGroupId = engineSecurityGroupId
            self.idpAuthUrl = idpAuthUrl
            self.idpRelayStateParameterName = idpRelayStateParameterName
            self.name = name
            self.serviceRole = serviceRole
            self.studioArn = studioArn
            self.studioId = studioId
            self.subnetIds = subnetIds
            self.tags = tags
            self.url = url
            self.userRole = userRole
            self.vpcId = vpcId
            self.workspaceSecurityGroupId = workspaceSecurityGroupId
        }
    }

}

extension EMRClientTypes.StudioSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authMode = "AuthMode"
        case creationTime = "CreationTime"
        case description = "Description"
        case name = "Name"
        case studioId = "StudioId"
        case url = "Url"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authMode = self.authMode {
            try encodeContainer.encode(authMode.rawValue, forKey: .authMode)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let studioId = self.studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let authModeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.AuthMode.self, forKey: .authMode)
        authMode = authModeDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension EMRClientTypes {
    /// Details for an Amazon EMR Studio, including ID, Name, VPC, and Description. The details do not include subnets, IAM roles, security groups, or tags associated with the Studio.
    public struct StudioSummary: Swift.Equatable {
        /// Specifies whether the Studio authenticates users using IAM or IAM Identity Center.
        public var authMode: EMRClientTypes.AuthMode?
        /// The time when the Amazon EMR Studio was created.
        public var creationTime: ClientRuntime.Date?
        /// The detailed description of the Amazon EMR Studio.
        public var description: Swift.String?
        /// The name of the Amazon EMR Studio.
        public var name: Swift.String?
        /// The ID of the Amazon EMR Studio.
        public var studioId: Swift.String?
        /// The unique access URL of the Amazon EMR Studio.
        public var url: Swift.String?
        /// The ID of the Virtual Private Cloud (Amazon VPC) associated with the Amazon EMR Studio.
        public var vpcId: Swift.String?

        public init (
            authMode: EMRClientTypes.AuthMode? = nil,
            creationTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            studioId: Swift.String? = nil,
            url: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.authMode = authMode
            self.creationTime = creationTime
            self.description = description
            self.name = name
            self.studioId = studioId
            self.url = url
            self.vpcId = vpcId
        }
    }

}

extension EMRClientTypes.SupportedProductConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case args = "Args"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let args = args {
            var argsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .args)
            for xmlstring0 in args {
                try argsContainer.encode(xmlstring0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let argsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .args)
        var argsDecoded0:[Swift.String]? = nil
        if let argsContainer = argsContainer {
            argsDecoded0 = [Swift.String]()
            for string0 in argsContainer {
                if let string0 = string0 {
                    argsDecoded0?.append(string0)
                }
            }
        }
        args = argsDecoded0
    }
}

extension EMRClientTypes {
    /// The list of supported product configurations that allow user-supplied arguments. EMR accepts these arguments and forwards them to the corresponding installation script as bootstrap action arguments.
    public struct SupportedProductConfig: Swift.Equatable {
        /// The list of user-supplied arguments.
        public var args: [Swift.String]?
        /// The name of the product configuration.
        public var name: Swift.String?

        public init (
            args: [Swift.String]? = nil,
            name: Swift.String? = nil
        )
        {
            self.args = args
            self.name = name
        }
    }

}

extension EMRClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension EMRClientTypes {
    /// A key-value pair containing user-defined metadata that you can associate with an Amazon EMR resource. Tags make it easier to associate clusters in various ways, such as grouping clusters to track your Amazon EMR resource allocation costs. For more information, see [Tag Clusters](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-tags.html).
    public struct Tag: Swift.Equatable {
        /// A user-defined key, which is the minimum required information for a valid tag. For more information, see [Tag](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-tags.html).
        public var key: Swift.String?
        /// A user-defined value, which is optional in a tag. For more information, see [Tag Clusters](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-tags.html).
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TerminateJobFlowsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobFlowIds = "JobFlowIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobFlowIds = jobFlowIds {
            var jobFlowIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobFlowIds)
            for xmlstring0 in jobFlowIds {
                try jobFlowIdsContainer.encode(xmlstring0)
            }
        }
    }
}

extension TerminateJobFlowsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Input to the [TerminateJobFlows] operation.
public struct TerminateJobFlowsInput: Swift.Equatable {
    /// A list of job flows to be shut down.
    /// This member is required.
    public var jobFlowIds: [Swift.String]?

    public init (
        jobFlowIds: [Swift.String]? = nil
    )
    {
        self.jobFlowIds = jobFlowIds
    }
}

struct TerminateJobFlowsInputBody: Swift.Equatable {
    let jobFlowIds: [Swift.String]?
}

extension TerminateJobFlowsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobFlowIds = "JobFlowIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobFlowIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .jobFlowIds)
        var jobFlowIdsDecoded0:[Swift.String]? = nil
        if let jobFlowIdsContainer = jobFlowIdsContainer {
            jobFlowIdsDecoded0 = [Swift.String]()
            for string0 in jobFlowIdsContainer {
                if let string0 = string0 {
                    jobFlowIdsDecoded0?.append(string0)
                }
            }
        }
        jobFlowIds = jobFlowIdsDecoded0
    }
}

extension TerminateJobFlowsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TerminateJobFlowsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailure" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TerminateJobFlowsOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension TerminateJobFlowsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TerminateJobFlowsOutputResponse: Swift.Equatable {

    public init () { }
}

extension EMRClientTypes {
    public enum Unit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bits
        case bitsPerSecond
        case bytes
        case bytesPerSecond
        case count
        case countPerSecond
        case gigaBits
        case gigaBitsPerSecond
        case gigaBytes
        case gigaBytesPerSecond
        case kiloBits
        case kiloBitsPerSecond
        case kiloBytes
        case kiloBytesPerSecond
        case megaBits
        case megaBitsPerSecond
        case megaBytes
        case megaBytesPerSecond
        case microSeconds
        case milliSeconds
        case `none`
        case percent
        case seconds
        case teraBits
        case teraBitsPerSecond
        case teraBytes
        case teraBytesPerSecond
        case sdkUnknown(Swift.String)

        public static var allCases: [Unit] {
            return [
                .bits,
                .bitsPerSecond,
                .bytes,
                .bytesPerSecond,
                .count,
                .countPerSecond,
                .gigaBits,
                .gigaBitsPerSecond,
                .gigaBytes,
                .gigaBytesPerSecond,
                .kiloBits,
                .kiloBitsPerSecond,
                .kiloBytes,
                .kiloBytesPerSecond,
                .megaBits,
                .megaBitsPerSecond,
                .megaBytes,
                .megaBytesPerSecond,
                .microSeconds,
                .milliSeconds,
                .none,
                .percent,
                .seconds,
                .teraBits,
                .teraBitsPerSecond,
                .teraBytes,
                .teraBytesPerSecond,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bits: return "BITS"
            case .bitsPerSecond: return "BITS_PER_SECOND"
            case .bytes: return "BYTES"
            case .bytesPerSecond: return "BYTES_PER_SECOND"
            case .count: return "COUNT"
            case .countPerSecond: return "COUNT_PER_SECOND"
            case .gigaBits: return "GIGA_BITS"
            case .gigaBitsPerSecond: return "GIGA_BITS_PER_SECOND"
            case .gigaBytes: return "GIGA_BYTES"
            case .gigaBytesPerSecond: return "GIGA_BYTES_PER_SECOND"
            case .kiloBits: return "KILO_BITS"
            case .kiloBitsPerSecond: return "KILO_BITS_PER_SECOND"
            case .kiloBytes: return "KILO_BYTES"
            case .kiloBytesPerSecond: return "KILO_BYTES_PER_SECOND"
            case .megaBits: return "MEGA_BITS"
            case .megaBitsPerSecond: return "MEGA_BITS_PER_SECOND"
            case .megaBytes: return "MEGA_BYTES"
            case .megaBytesPerSecond: return "MEGA_BYTES_PER_SECOND"
            case .microSeconds: return "MICRO_SECONDS"
            case .milliSeconds: return "MILLI_SECONDS"
            case .none: return "NONE"
            case .percent: return "PERCENT"
            case .seconds: return "SECONDS"
            case .teraBits: return "TERA_BITS"
            case .teraBitsPerSecond: return "TERA_BITS_PER_SECOND"
            case .teraBytes: return "TERA_BYTES"
            case .teraBytesPerSecond: return "TERA_BYTES_PER_SECOND"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Unit(rawValue: rawValue) ?? Unit.sdkUnknown(rawValue)
        }
    }
}

extension UpdateStudioInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultS3Location = "DefaultS3Location"
        case description = "Description"
        case name = "Name"
        case studioId = "StudioId"
        case subnetIds = "SubnetIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultS3Location = self.defaultS3Location {
            try encodeContainer.encode(defaultS3Location, forKey: .defaultS3Location)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let studioId = self.studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for string0 in subnetIds {
                try subnetIdsContainer.encode(string0)
            }
        }
    }
}

extension UpdateStudioInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateStudioInput: Swift.Equatable {
    /// The Amazon S3 location to back up Workspaces and notebook files for the Amazon EMR Studio.
    public var defaultS3Location: Swift.String?
    /// A detailed description to assign to the Amazon EMR Studio.
    public var description: Swift.String?
    /// A descriptive name for the Amazon EMR Studio.
    public var name: Swift.String?
    /// The ID of the Amazon EMR Studio to update.
    /// This member is required.
    public var studioId: Swift.String?
    /// A list of subnet IDs to associate with the Amazon EMR Studio. The list can include new subnet IDs, but must also include all of the subnet IDs previously associated with the Studio. The list order does not matter. A Studio can have a maximum of 5 subnets. The subnets must belong to the same VPC as the Studio.
    public var subnetIds: [Swift.String]?

    public init (
        defaultS3Location: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        studioId: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil
    )
    {
        self.defaultS3Location = defaultS3Location
        self.description = description
        self.name = name
        self.studioId = studioId
        self.subnetIds = subnetIds
    }
}

struct UpdateStudioInputBody: Swift.Equatable {
    let studioId: Swift.String?
    let name: Swift.String?
    let description: Swift.String?
    let subnetIds: [Swift.String]?
    let defaultS3Location: Swift.String?
}

extension UpdateStudioInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultS3Location = "DefaultS3Location"
        case description = "Description"
        case name = "Name"
        case studioId = "StudioId"
        case subnetIds = "SubnetIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let defaultS3LocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultS3Location)
        defaultS3Location = defaultS3LocationDecoded
    }
}

extension UpdateStudioOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateStudioOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateStudioOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateStudioOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateStudioOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateStudioSessionMappingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityId = "IdentityId"
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case sessionPolicyArn = "SessionPolicyArn"
        case studioId = "StudioId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identityId = self.identityId {
            try encodeContainer.encode(identityId, forKey: .identityId)
        }
        if let identityName = self.identityName {
            try encodeContainer.encode(identityName, forKey: .identityName)
        }
        if let identityType = self.identityType {
            try encodeContainer.encode(identityType.rawValue, forKey: .identityType)
        }
        if let sessionPolicyArn = self.sessionPolicyArn {
            try encodeContainer.encode(sessionPolicyArn, forKey: .sessionPolicyArn)
        }
        if let studioId = self.studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
    }
}

extension UpdateStudioSessionMappingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateStudioSessionMappingInput: Swift.Equatable {
    /// The globally unique identifier (GUID) of the user or group. For more information, see [UserId](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId) and [GroupId](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId) in the IAM Identity Center Identity Store API Reference. Either IdentityName or IdentityId must be specified.
    public var identityId: Swift.String?
    /// The name of the user or group to update. For more information, see [UserName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName) and [DisplayName](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName) in the IAM Identity Center Identity Store API Reference. Either IdentityName or IdentityId must be specified.
    public var identityName: Swift.String?
    /// Specifies whether the identity to update is a user or a group.
    /// This member is required.
    public var identityType: EMRClientTypes.IdentityType?
    /// The Amazon Resource Name (ARN) of the session policy to associate with the specified user or group.
    /// This member is required.
    public var sessionPolicyArn: Swift.String?
    /// The ID of the Amazon EMR Studio.
    /// This member is required.
    public var studioId: Swift.String?

    public init (
        identityId: Swift.String? = nil,
        identityName: Swift.String? = nil,
        identityType: EMRClientTypes.IdentityType? = nil,
        sessionPolicyArn: Swift.String? = nil,
        studioId: Swift.String? = nil
    )
    {
        self.identityId = identityId
        self.identityName = identityName
        self.identityType = identityType
        self.sessionPolicyArn = sessionPolicyArn
        self.studioId = studioId
    }
}

struct UpdateStudioSessionMappingInputBody: Swift.Equatable {
    let studioId: Swift.String?
    let identityId: Swift.String?
    let identityName: Swift.String?
    let identityType: EMRClientTypes.IdentityType?
    let sessionPolicyArn: Swift.String?
}

extension UpdateStudioSessionMappingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityId = "IdentityId"
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case sessionPolicyArn = "SessionPolicyArn"
        case studioId = "StudioId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let identityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityId)
        identityId = identityIdDecoded
        let identityNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityName)
        identityName = identityNameDecoded
        let identityTypeDecoded = try containerValues.decodeIfPresent(EMRClientTypes.IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let sessionPolicyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sessionPolicyArn)
        sessionPolicyArn = sessionPolicyArnDecoded
    }
}

extension UpdateStudioSessionMappingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateStudioSessionMappingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailure" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateStudioSessionMappingOutputError: Swift.Error, Swift.Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateStudioSessionMappingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateStudioSessionMappingOutputResponse: Swift.Equatable {

    public init () { }
}

extension EMRClientTypes.UsernamePassword: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case password = "Password"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let password = self.password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
    }
}

extension EMRClientTypes.UsernamePassword: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension EMRClientTypes {
    /// The username and password that you use to connect to cluster endpoints.
    public struct UsernamePassword: Swift.Equatable {
        /// The password associated with the temporary credentials that you use to connect to cluster endpoints.
        public var password: Swift.String?
        /// The username associated with the temporary credentials that you use to connect to cluster endpoints.
        public var username: Swift.String?

        public init (
            password: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.password = password
            self.username = username
        }
    }

}

extension EMRClientTypes.VolumeSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case iops = "Iops"
        case sizeInGB = "SizeInGB"
        case throughput = "Throughput"
        case volumeType = "VolumeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let iops = self.iops {
            try encodeContainer.encode(iops, forKey: .iops)
        }
        if let sizeInGB = self.sizeInGB {
            try encodeContainer.encode(sizeInGB, forKey: .sizeInGB)
        }
        if let throughput = self.throughput {
            try encodeContainer.encode(throughput, forKey: .throughput)
        }
        if let volumeType = self.volumeType {
            try encodeContainer.encode(volumeType, forKey: .volumeType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeType)
        volumeType = volumeTypeDecoded
        let iopsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .iops)
        iops = iopsDecoded
        let sizeInGBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInGB)
        sizeInGB = sizeInGBDecoded
        let throughputDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .throughput)
        throughput = throughputDecoded
    }
}

extension EMRClientTypes {
    /// EBS volume specifications such as volume type, IOPS, size (GiB) and throughput (MiB/s) that are requested for the EBS volume attached to an EC2 instance in the cluster.
    public struct VolumeSpecification: Swift.Equatable {
        /// The number of I/O operations per second (IOPS) that the volume supports.
        public var iops: Swift.Int?
        /// The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.
        /// This member is required.
        public var sizeInGB: Swift.Int?
        /// The throughput, in mebibyte per second (MiB/s). This optional parameter can be a number from 125 - 1000 and is valid only for gp3 volumes.
        public var throughput: Swift.Int?
        /// The volume type. Volume types supported are gp3, gp2, io1, st1, sc1, and standard.
        /// This member is required.
        public var volumeType: Swift.String?

        public init (
            iops: Swift.Int? = nil,
            sizeInGB: Swift.Int? = nil,
            throughput: Swift.Int? = nil,
            volumeType: Swift.String? = nil
        )
        {
            self.iops = iops
            self.sizeInGB = sizeInGB
            self.throughput = throughput
            self.volumeType = volumeType
        }
    }

}
