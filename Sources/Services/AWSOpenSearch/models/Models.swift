// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension OpenSearchClientTypes.AWSDomainInformation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
        case ownerId = "OwnerId"
        case region = "Region"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let ownerId = self.ownerId {
            try encodeContainer.encode(ownerId, forKey: .ownerId)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
    }
}

extension OpenSearchClientTypes {
    /// Information about an Amazon OpenSearch Service domain.
    public struct AWSDomainInformation: Swift.Equatable {
        /// Name of the domain.
        /// This member is required.
        public var domainName: Swift.String?
        /// The Amazon Web Services account ID of the domain owner.
        public var ownerId: Swift.String?
        /// The Amazon Web Services Region in which the domain is located.
        public var region: Swift.String?

        public init (
            domainName: Swift.String? = nil,
            ownerId: Swift.String? = nil,
            region: Swift.String? = nil
        )
        {
            self.domainName = domainName
            self.ownerId = ownerId
            self.region = region
        }
    }

}

extension AcceptInboundConnectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let connectionId = connectionId else {
            return nil
        }
        return "/2021-01-01/opensearch/cc/inboundConnection/\(connectionId.urlPercentEncoding())/accept"
    }
}

/// Container for the parameters to the AcceptInboundConnection operation.
public struct AcceptInboundConnectionInput: Swift.Equatable {
    /// The ID of the inbound connection to accept.
    /// This member is required.
    public var connectionId: Swift.String?

    public init (
        connectionId: Swift.String? = nil
    )
    {
        self.connectionId = connectionId
    }
}

struct AcceptInboundConnectionInputBody: Swift.Equatable {
}

extension AcceptInboundConnectionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AcceptInboundConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AcceptInboundConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AcceptInboundConnectionOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AcceptInboundConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AcceptInboundConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.connection = output.connection
        } else {
            self.connection = nil
        }
    }
}

/// Contains details about the accepted inbound connection.
public struct AcceptInboundConnectionOutputResponse: Swift.Equatable {
    /// Information about the accepted inbound connection.
    public var connection: OpenSearchClientTypes.InboundConnection?

    public init (
        connection: OpenSearchClientTypes.InboundConnection? = nil
    )
    {
        self.connection = connection
    }
}

struct AcceptInboundConnectionOutputResponseBody: Swift.Equatable {
    let connection: OpenSearchClientTypes.InboundConnection?
}

extension AcceptInboundConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connection = "Connection"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.InboundConnection.self, forKey: .connection)
        connection = connectionDecoded
    }
}

extension AccessDeniedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An error occurred because you don't have permissions to access the resource.
public struct AccessDeniedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OpenSearchClientTypes.AccessPoliciesStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension OpenSearchClientTypes {
    /// The configured access rules for the domain's search endpoint, and the current status of those rules.
    public struct AccessPoliciesStatus: Swift.Equatable {
        /// The access policy configured for the domain. Access policies can be resource-based, IP-based, or IAM-based. For more information, see [Configuring access policies](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-access-policies).
        /// This member is required.
        public var options: Swift.String?
        /// The status of the access policy for the domain.
        /// This member is required.
        public var status: OpenSearchClientTypes.OptionStatus?

        public init (
            options: Swift.String? = nil,
            status: OpenSearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension AddTagsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case tagList = "TagList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for tag0 in tagList {
                try tagListContainer.encode(tag0)
            }
        }
    }
}

extension AddTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/tags"
    }
}

/// Container for the parameters to the AddTags operation. Specifies the tags to attach to the domain.
public struct AddTagsInput: Swift.Equatable {
    /// Amazon Resource Name (ARN) for the OpenSearch Service domain to which you want to attach resource tags.
    /// This member is required.
    public var arn: Swift.String?
    /// List of resource tags.
    /// This member is required.
    public var tagList: [OpenSearchClientTypes.Tag]?

    public init (
        arn: Swift.String? = nil,
        tagList: [OpenSearchClientTypes.Tag]? = nil
    )
    {
        self.arn = arn
        self.tagList = tagList
    }
}

struct AddTagsInputBody: Swift.Equatable {
    let arn: Swift.String?
    let tagList: [OpenSearchClientTypes.Tag]?
}

extension AddTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case tagList = "TagList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let tagListContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.Tag?].self, forKey: .tagList)
        var tagListDecoded0:[OpenSearchClientTypes.Tag]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [OpenSearchClientTypes.Tag]()
            for structure0 in tagListContainer {
                if let structure0 = structure0 {
                    tagListDecoded0?.append(structure0)
                }
            }
        }
        tagList = tagListDecoded0
    }
}

extension AddTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AddTagsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case limitExceededException(LimitExceededException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AddTagsOutputResponse: Swift.Equatable {

    public init () { }
}

extension OpenSearchClientTypes.AdditionalLimit: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limitName = "LimitName"
        case limitValues = "LimitValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limitName = self.limitName {
            try encodeContainer.encode(limitName, forKey: .limitName)
        }
        if let limitValues = limitValues {
            var limitValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .limitValues)
            for limitvalue0 in limitValues {
                try limitValuesContainer.encode(limitvalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .limitName)
        limitName = limitNameDecoded
        let limitValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .limitValues)
        var limitValuesDecoded0:[Swift.String]? = nil
        if let limitValuesContainer = limitValuesContainer {
            limitValuesDecoded0 = [Swift.String]()
            for string0 in limitValuesContainer {
                if let string0 = string0 {
                    limitValuesDecoded0?.append(string0)
                }
            }
        }
        limitValues = limitValuesDecoded0
    }
}

extension OpenSearchClientTypes {
    /// List of limits that are specific to a given instance type.
    public struct AdditionalLimit: Swift.Equatable {
        /// * MaximumNumberOfDataNodesSupported - This attribute only applies to master nodes and specifies the maximum number of data nodes of a given instance type a master node can support.
        ///
        /// * MaximumNumberOfDataNodesWithoutMasterNode - This attribute only applies to data nodes and specifies the maximum number of data nodes of a given instance type can exist without a master node governing them.
        public var limitName: Swift.String?
        /// The values of the additional instance type limits.
        public var limitValues: [Swift.String]?

        public init (
            limitName: Swift.String? = nil,
            limitValues: [Swift.String]? = nil
        )
        {
            self.limitName = limitName
            self.limitValues = limitValues
        }
    }

}

extension OpenSearchClientTypes.AdvancedOptionsStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            var optionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .options)
            for (dictKey0, advancedOptions0) in options {
                try optionsContainer.encode(advancedOptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .options)
        var optionsDecoded0: [Swift.String:Swift.String]? = nil
        if let optionsContainer = optionsContainer {
            optionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in optionsContainer {
                if let string0 = string0 {
                    optionsDecoded0?[key0] = string0
                }
            }
        }
        options = optionsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension OpenSearchClientTypes {
    /// Status of the advanced options for the specified domain. The following options are available:
    ///
    /// * "rest.action.multi.allow_explicit_index": "true" | "false" - Note the use of a string rather than a boolean. Specifies whether explicit references to indexes are allowed inside the body of HTTP requests. If you want to configure access policies for domain sub-resources, such as specific indexes and domain APIs, you must disable this property. Default is true.
    ///
    /// * "indices.fielddata.cache.size": "80"  - Note the use of a string rather than a boolean. Specifies the percentage of heap space allocated to field data. Default is unbounded.
    ///
    /// * "indices.query.bool.max_clause_count": "1024" - Note the use of a string rather than a boolean. Specifies the maximum number of clauses allowed in a Lucene boolean query. Default is 1,024. Queries with more than the permitted number of clauses result in a TooManyClauses error.
    ///
    /// * "override_main_response_version": "true" | "false" - Note the use of a string rather than a boolean. Specifies whether the domain reports its version as 7.10 to allow Elasticsearch OSS clients and plugins to continue working with it. Default is false when creating a domain and true when upgrading a domain.
    ///
    ///
    /// For more information, see [Advanced cluster parameters](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options).
    public struct AdvancedOptionsStatus: Swift.Equatable {
        /// The status of advanced options for the specified domain.
        /// This member is required.
        public var options: [Swift.String:Swift.String]?
        /// The status of advanced options for the specified domain.
        /// This member is required.
        public var status: OpenSearchClientTypes.OptionStatus?

        public init (
            options: [Swift.String:Swift.String]? = nil,
            status: OpenSearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension OpenSearchClientTypes.AdvancedSecurityOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anonymousAuthDisableDate = "AnonymousAuthDisableDate"
        case anonymousAuthEnabled = "AnonymousAuthEnabled"
        case enabled = "Enabled"
        case internalUserDatabaseEnabled = "InternalUserDatabaseEnabled"
        case samlOptions = "SAMLOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anonymousAuthDisableDate = self.anonymousAuthDisableDate {
            try encodeContainer.encodeTimestamp(anonymousAuthDisableDate, format: .epochSeconds, forKey: .anonymousAuthDisableDate)
        }
        if let anonymousAuthEnabled = self.anonymousAuthEnabled {
            try encodeContainer.encode(anonymousAuthEnabled, forKey: .anonymousAuthEnabled)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let internalUserDatabaseEnabled = self.internalUserDatabaseEnabled {
            try encodeContainer.encode(internalUserDatabaseEnabled, forKey: .internalUserDatabaseEnabled)
        }
        if let samlOptions = self.samlOptions {
            try encodeContainer.encode(samlOptions, forKey: .samlOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let internalUserDatabaseEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .internalUserDatabaseEnabled)
        internalUserDatabaseEnabled = internalUserDatabaseEnabledDecoded
        let samlOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.SAMLOptionsOutput.self, forKey: .samlOptions)
        samlOptions = samlOptionsDecoded
        let anonymousAuthDisableDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .anonymousAuthDisableDate)
        anonymousAuthDisableDate = anonymousAuthDisableDateDecoded
        let anonymousAuthEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .anonymousAuthEnabled)
        anonymousAuthEnabled = anonymousAuthEnabledDecoded
    }
}

extension OpenSearchClientTypes {
    /// Container for fine-grained access control settings.
    public struct AdvancedSecurityOptions: Swift.Equatable {
        /// Date and time when the migration period will be disabled. Only necessary when [enabling fine-grained access control on an existing domain](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/fgac.html#fgac-enabling-existing).
        public var anonymousAuthDisableDate: ClientRuntime.Date?
        /// True if a 30-day migration period is enabled, during which administrators can create role mappings. Only necessary when [enabling fine-grained access control on an existing domain](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/fgac.html#fgac-enabling-existing).
        public var anonymousAuthEnabled: Swift.Bool?
        /// True if fine-grained access control is enabled.
        public var enabled: Swift.Bool?
        /// True if the internal user database is enabled.
        public var internalUserDatabaseEnabled: Swift.Bool?
        /// Container for information about the SAML configuration for OpenSearch Dashboards.
        public var samlOptions: OpenSearchClientTypes.SAMLOptionsOutput?

        public init (
            anonymousAuthDisableDate: ClientRuntime.Date? = nil,
            anonymousAuthEnabled: Swift.Bool? = nil,
            enabled: Swift.Bool? = nil,
            internalUserDatabaseEnabled: Swift.Bool? = nil,
            samlOptions: OpenSearchClientTypes.SAMLOptionsOutput? = nil
        )
        {
            self.anonymousAuthDisableDate = anonymousAuthDisableDate
            self.anonymousAuthEnabled = anonymousAuthEnabled
            self.enabled = enabled
            self.internalUserDatabaseEnabled = internalUserDatabaseEnabled
            self.samlOptions = samlOptions
        }
    }

}

extension OpenSearchClientTypes.AdvancedSecurityOptionsInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anonymousAuthEnabled = "AnonymousAuthEnabled"
        case enabled = "Enabled"
        case internalUserDatabaseEnabled = "InternalUserDatabaseEnabled"
        case masterUserOptions = "MasterUserOptions"
        case samlOptions = "SAMLOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anonymousAuthEnabled = self.anonymousAuthEnabled {
            try encodeContainer.encode(anonymousAuthEnabled, forKey: .anonymousAuthEnabled)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let internalUserDatabaseEnabled = self.internalUserDatabaseEnabled {
            try encodeContainer.encode(internalUserDatabaseEnabled, forKey: .internalUserDatabaseEnabled)
        }
        if let masterUserOptions = self.masterUserOptions {
            try encodeContainer.encode(masterUserOptions, forKey: .masterUserOptions)
        }
        if let samlOptions = self.samlOptions {
            try encodeContainer.encode(samlOptions, forKey: .samlOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let internalUserDatabaseEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .internalUserDatabaseEnabled)
        internalUserDatabaseEnabled = internalUserDatabaseEnabledDecoded
        let masterUserOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.MasterUserOptions.self, forKey: .masterUserOptions)
        masterUserOptions = masterUserOptionsDecoded
        let samlOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.SAMLOptionsInput.self, forKey: .samlOptions)
        samlOptions = samlOptionsDecoded
        let anonymousAuthEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .anonymousAuthEnabled)
        anonymousAuthEnabled = anonymousAuthEnabledDecoded
    }
}

extension OpenSearchClientTypes {
    /// Options for enabling and configuring fine-grained access control. For more information, see [Fine-grained access control in Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/fgac.html).
    public struct AdvancedSecurityOptionsInput: Swift.Equatable {
        /// True to enable a 30-day migration period during which administrators can create role mappings. Only necessary when [enabling fine-grained access control on an existing domain](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/fgac.html#fgac-enabling-existing).
        public var anonymousAuthEnabled: Swift.Bool?
        /// True to enable fine-grained access control.
        public var enabled: Swift.Bool?
        /// True to enable the internal user database.
        public var internalUserDatabaseEnabled: Swift.Bool?
        /// Container for information about the master user.
        public var masterUserOptions: OpenSearchClientTypes.MasterUserOptions?
        /// Container for information about the SAML configuration for OpenSearch Dashboards.
        public var samlOptions: OpenSearchClientTypes.SAMLOptionsInput?

        public init (
            anonymousAuthEnabled: Swift.Bool? = nil,
            enabled: Swift.Bool? = nil,
            internalUserDatabaseEnabled: Swift.Bool? = nil,
            masterUserOptions: OpenSearchClientTypes.MasterUserOptions? = nil,
            samlOptions: OpenSearchClientTypes.SAMLOptionsInput? = nil
        )
        {
            self.anonymousAuthEnabled = anonymousAuthEnabled
            self.enabled = enabled
            self.internalUserDatabaseEnabled = internalUserDatabaseEnabled
            self.masterUserOptions = masterUserOptions
            self.samlOptions = samlOptions
        }
    }

}

extension OpenSearchClientTypes.AdvancedSecurityOptionsStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AdvancedSecurityOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension OpenSearchClientTypes {
    /// The status of fine-grained access control settings for a domain.
    public struct AdvancedSecurityOptionsStatus: Swift.Equatable {
        /// Container for fine-grained access control settings.
        /// This member is required.
        public var options: OpenSearchClientTypes.AdvancedSecurityOptions?
        /// Status of the fine-grained access control settings for a domain.
        /// This member is required.
        public var status: OpenSearchClientTypes.OptionStatus?

        public init (
            options: OpenSearchClientTypes.AdvancedSecurityOptions? = nil,
            status: OpenSearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension AssociatePackageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let packageID = packageID else {
            return nil
        }
        guard let domainName = domainName else {
            return nil
        }
        return "/2021-01-01/packages/associate/\(packageID.urlPercentEncoding())/\(domainName.urlPercentEncoding())"
    }
}

/// Container for the request parameters to the AssociatePackage operation.
public struct AssociatePackageInput: Swift.Equatable {
    /// Name of the domain to associate the package with.
    /// This member is required.
    public var domainName: Swift.String?
    /// Internal ID of the package to associate with a domain. Use DescribePackages to find this value.
    /// This member is required.
    public var packageID: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        packageID: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.packageID = packageID
    }
}

struct AssociatePackageInputBody: Swift.Equatable {
}

extension AssociatePackageInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AssociatePackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociatePackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AssociatePackageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case conflictException(ConflictException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociatePackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AssociatePackageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainPackageDetails = output.domainPackageDetails
        } else {
            self.domainPackageDetails = nil
        }
    }
}

/// Container for the response returned by the AssociatePackage operation.
public struct AssociatePackageOutputResponse: Swift.Equatable {
    /// Information about a package that is associated with a domain.
    public var domainPackageDetails: OpenSearchClientTypes.DomainPackageDetails?

    public init (
        domainPackageDetails: OpenSearchClientTypes.DomainPackageDetails? = nil
    )
    {
        self.domainPackageDetails = domainPackageDetails
    }
}

struct AssociatePackageOutputResponseBody: Swift.Equatable {
    let domainPackageDetails: OpenSearchClientTypes.DomainPackageDetails?
}

extension AssociatePackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainPackageDetails = "DomainPackageDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainPackageDetailsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainPackageDetails.self, forKey: .domainPackageDetails)
        domainPackageDetails = domainPackageDetailsDecoded
    }
}

extension AuthorizeVpcEndpointAccessInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let account = self.account {
            try encodeContainer.encode(account, forKey: .account)
        }
    }
}

extension AuthorizeVpcEndpointAccessInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2021-01-01/opensearch/domain/\(domainName.urlPercentEncoding())/authorizeVpcEndpointAccess"
    }
}

public struct AuthorizeVpcEndpointAccessInput: Swift.Equatable {
    /// The Amazon Web Services account ID to grant access to.
    /// This member is required.
    public var account: Swift.String?
    /// The name of the OpenSearch Service domain to provide access to.
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        account: Swift.String? = nil,
        domainName: Swift.String? = nil
    )
    {
        self.account = account
        self.domainName = domainName
    }
}

struct AuthorizeVpcEndpointAccessInputBody: Swift.Equatable {
    let account: Swift.String?
}

extension AuthorizeVpcEndpointAccessInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .account)
        account = accountDecoded
    }
}

extension AuthorizeVpcEndpointAccessOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AuthorizeVpcEndpointAccessOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AuthorizeVpcEndpointAccessOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AuthorizeVpcEndpointAccessOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AuthorizeVpcEndpointAccessOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.authorizedPrincipal = output.authorizedPrincipal
        } else {
            self.authorizedPrincipal = nil
        }
    }
}

public struct AuthorizeVpcEndpointAccessOutputResponse: Swift.Equatable {
    /// Information about the Amazon Web Services account or service that was provided access to the domain.
    /// This member is required.
    public var authorizedPrincipal: OpenSearchClientTypes.AuthorizedPrincipal?

    public init (
        authorizedPrincipal: OpenSearchClientTypes.AuthorizedPrincipal? = nil
    )
    {
        self.authorizedPrincipal = authorizedPrincipal
    }
}

struct AuthorizeVpcEndpointAccessOutputResponseBody: Swift.Equatable {
    let authorizedPrincipal: OpenSearchClientTypes.AuthorizedPrincipal?
}

extension AuthorizeVpcEndpointAccessOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizedPrincipal = "AuthorizedPrincipal"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizedPrincipalDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AuthorizedPrincipal.self, forKey: .authorizedPrincipal)
        authorizedPrincipal = authorizedPrincipalDecoded
    }
}

extension OpenSearchClientTypes.AuthorizedPrincipal: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case principal = "Principal"
        case principalType = "PrincipalType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let principal = self.principal {
            try encodeContainer.encode(principal, forKey: .principal)
        }
        if let principalType = self.principalType {
            try encodeContainer.encode(principalType.rawValue, forKey: .principalType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let principalTypeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.PrincipalType.self, forKey: .principalType)
        principalType = principalTypeDecoded
        let principalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .principal)
        principal = principalDecoded
    }
}

extension OpenSearchClientTypes {
    /// Information about an Amazon Web Services account or service that has access to an Amazon OpenSearch Service domain through the use of an interface VPC endpoint.
    public struct AuthorizedPrincipal: Swift.Equatable {
        /// The [IAM principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html) that is allowed access to the domain.
        public var principal: Swift.String?
        /// The type of principal.
        public var principalType: OpenSearchClientTypes.PrincipalType?

        public init (
            principal: Swift.String? = nil,
            principalType: OpenSearchClientTypes.PrincipalType? = nil
        )
        {
            self.principal = principal
            self.principalType = principalType
        }
    }

}

extension OpenSearchClientTypes.AutoTune: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoTuneDetails = "AutoTuneDetails"
        case autoTuneType = "AutoTuneType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoTuneDetails = self.autoTuneDetails {
            try encodeContainer.encode(autoTuneDetails, forKey: .autoTuneDetails)
        }
        if let autoTuneType = self.autoTuneType {
            try encodeContainer.encode(autoTuneType.rawValue, forKey: .autoTuneType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoTuneTypeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AutoTuneType.self, forKey: .autoTuneType)
        autoTuneType = autoTuneTypeDecoded
        let autoTuneDetailsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AutoTuneDetails.self, forKey: .autoTuneDetails)
        autoTuneDetails = autoTuneDetailsDecoded
    }
}

extension OpenSearchClientTypes {
    /// Information about an Auto-Tune action. For more information, see [Auto-Tune for Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/auto-tune.html).
    public struct AutoTune: Swift.Equatable {
        /// Details about an Auto-Tune action.
        public var autoTuneDetails: OpenSearchClientTypes.AutoTuneDetails?
        /// The type of Auto-Tune action.
        public var autoTuneType: OpenSearchClientTypes.AutoTuneType?

        public init (
            autoTuneDetails: OpenSearchClientTypes.AutoTuneDetails? = nil,
            autoTuneType: OpenSearchClientTypes.AutoTuneType? = nil
        )
        {
            self.autoTuneDetails = autoTuneDetails
            self.autoTuneType = autoTuneType
        }
    }

}

extension OpenSearchClientTypes {
    /// The Auto-Tune desired state. Valid values are ENABLED and DISABLED.
    public enum AutoTuneDesiredState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoTuneDesiredState] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoTuneDesiredState(rawValue: rawValue) ?? AutoTuneDesiredState.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes.AutoTuneDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scheduledAutoTuneDetails = "ScheduledAutoTuneDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scheduledAutoTuneDetails = self.scheduledAutoTuneDetails {
            try encodeContainer.encode(scheduledAutoTuneDetails, forKey: .scheduledAutoTuneDetails)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledAutoTuneDetailsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ScheduledAutoTuneDetails.self, forKey: .scheduledAutoTuneDetails)
        scheduledAutoTuneDetails = scheduledAutoTuneDetailsDecoded
    }
}

extension OpenSearchClientTypes {
    /// Specifies details about a scheduled Auto-Tune action. For more information, see [Auto-Tune for Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/auto-tune.html).
    public struct AutoTuneDetails: Swift.Equatable {
        /// Container for details about a scheduled Auto-Tune action.
        public var scheduledAutoTuneDetails: OpenSearchClientTypes.ScheduledAutoTuneDetails?

        public init (
            scheduledAutoTuneDetails: OpenSearchClientTypes.ScheduledAutoTuneDetails? = nil
        )
        {
            self.scheduledAutoTuneDetails = scheduledAutoTuneDetails
        }
    }

}

extension OpenSearchClientTypes.AutoTuneMaintenanceSchedule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cronExpressionForRecurrence = "CronExpressionForRecurrence"
        case duration = "Duration"
        case startAt = "StartAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cronExpressionForRecurrence = self.cronExpressionForRecurrence {
            try encodeContainer.encode(cronExpressionForRecurrence, forKey: .cronExpressionForRecurrence)
        }
        if let duration = self.duration {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let startAt = self.startAt {
            try encodeContainer.encodeTimestamp(startAt, format: .epochSeconds, forKey: .startAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startAt)
        startAt = startAtDecoded
        let durationDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.Duration.self, forKey: .duration)
        duration = durationDecoded
        let cronExpressionForRecurrenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cronExpressionForRecurrence)
        cronExpressionForRecurrence = cronExpressionForRecurrenceDecoded
    }
}

extension OpenSearchClientTypes {
    /// The Auto-Tune maintenance schedule. For more information, see [Auto-Tune for Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/auto-tune.html).
    public struct AutoTuneMaintenanceSchedule: Swift.Equatable {
        /// A cron expression for a recurring maintenance schedule during which Auto-Tune can deploy changes.
        public var cronExpressionForRecurrence: Swift.String?
        /// The duration of the maintenance schedule. For example, "Duration": {"Value": 2, "Unit": "HOURS"}.
        public var duration: OpenSearchClientTypes.Duration?
        /// The Epoch timestamp at which the Auto-Tune maintenance schedule starts.
        public var startAt: ClientRuntime.Date?

        public init (
            cronExpressionForRecurrence: Swift.String? = nil,
            duration: OpenSearchClientTypes.Duration? = nil,
            startAt: ClientRuntime.Date? = nil
        )
        {
            self.cronExpressionForRecurrence = cronExpressionForRecurrence
            self.duration = duration
            self.startAt = startAt
        }
    }

}

extension OpenSearchClientTypes.AutoTuneOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredState = "DesiredState"
        case maintenanceSchedules = "MaintenanceSchedules"
        case rollbackOnDisable = "RollbackOnDisable"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let desiredState = self.desiredState {
            try encodeContainer.encode(desiredState.rawValue, forKey: .desiredState)
        }
        if let maintenanceSchedules = maintenanceSchedules {
            var maintenanceSchedulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .maintenanceSchedules)
            for autotunemaintenanceschedule0 in maintenanceSchedules {
                try maintenanceSchedulesContainer.encode(autotunemaintenanceschedule0)
            }
        }
        if let rollbackOnDisable = self.rollbackOnDisable {
            try encodeContainer.encode(rollbackOnDisable.rawValue, forKey: .rollbackOnDisable)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let desiredStateDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AutoTuneDesiredState.self, forKey: .desiredState)
        desiredState = desiredStateDecoded
        let rollbackOnDisableDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.RollbackOnDisable.self, forKey: .rollbackOnDisable)
        rollbackOnDisable = rollbackOnDisableDecoded
        let maintenanceSchedulesContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.AutoTuneMaintenanceSchedule?].self, forKey: .maintenanceSchedules)
        var maintenanceSchedulesDecoded0:[OpenSearchClientTypes.AutoTuneMaintenanceSchedule]? = nil
        if let maintenanceSchedulesContainer = maintenanceSchedulesContainer {
            maintenanceSchedulesDecoded0 = [OpenSearchClientTypes.AutoTuneMaintenanceSchedule]()
            for structure0 in maintenanceSchedulesContainer {
                if let structure0 = structure0 {
                    maintenanceSchedulesDecoded0?.append(structure0)
                }
            }
        }
        maintenanceSchedules = maintenanceSchedulesDecoded0
    }
}

extension OpenSearchClientTypes {
    /// Auto-Tune settings when updating a domain. For more information, see [Auto-Tune for Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/auto-tune.html).
    public struct AutoTuneOptions: Swift.Equatable {
        /// Whether Auto-Tune is enabled or disabled.
        public var desiredState: OpenSearchClientTypes.AutoTuneDesiredState?
        /// A list of maintenance schedules during which Auto-Tune can deploy changes.
        public var maintenanceSchedules: [OpenSearchClientTypes.AutoTuneMaintenanceSchedule]?
        /// When disabling Auto-Tune, specify NO_ROLLBACK to retain all prior Auto-Tune settings or DEFAULT_ROLLBACK to revert to the OpenSearch Service defaults. If you specify DEFAULT_ROLLBACK, you must include a MaintenanceSchedule in the request. Otherwise, OpenSearch Service is unable to perform the rollback.
        public var rollbackOnDisable: OpenSearchClientTypes.RollbackOnDisable?

        public init (
            desiredState: OpenSearchClientTypes.AutoTuneDesiredState? = nil,
            maintenanceSchedules: [OpenSearchClientTypes.AutoTuneMaintenanceSchedule]? = nil,
            rollbackOnDisable: OpenSearchClientTypes.RollbackOnDisable? = nil
        )
        {
            self.desiredState = desiredState
            self.maintenanceSchedules = maintenanceSchedules
            self.rollbackOnDisable = rollbackOnDisable
        }
    }

}

extension OpenSearchClientTypes.AutoTuneOptionsInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredState = "DesiredState"
        case maintenanceSchedules = "MaintenanceSchedules"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let desiredState = self.desiredState {
            try encodeContainer.encode(desiredState.rawValue, forKey: .desiredState)
        }
        if let maintenanceSchedules = maintenanceSchedules {
            var maintenanceSchedulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .maintenanceSchedules)
            for autotunemaintenanceschedule0 in maintenanceSchedules {
                try maintenanceSchedulesContainer.encode(autotunemaintenanceschedule0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let desiredStateDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AutoTuneDesiredState.self, forKey: .desiredState)
        desiredState = desiredStateDecoded
        let maintenanceSchedulesContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.AutoTuneMaintenanceSchedule?].self, forKey: .maintenanceSchedules)
        var maintenanceSchedulesDecoded0:[OpenSearchClientTypes.AutoTuneMaintenanceSchedule]? = nil
        if let maintenanceSchedulesContainer = maintenanceSchedulesContainer {
            maintenanceSchedulesDecoded0 = [OpenSearchClientTypes.AutoTuneMaintenanceSchedule]()
            for structure0 in maintenanceSchedulesContainer {
                if let structure0 = structure0 {
                    maintenanceSchedulesDecoded0?.append(structure0)
                }
            }
        }
        maintenanceSchedules = maintenanceSchedulesDecoded0
    }
}

extension OpenSearchClientTypes {
    /// Options for configuring Auto-Tune. For more information, see [Auto-Tune for Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/auto-tune.html).
    public struct AutoTuneOptionsInput: Swift.Equatable {
        /// Whether Auto-Tune is enabled or disabled.
        public var desiredState: OpenSearchClientTypes.AutoTuneDesiredState?
        /// A list of maintenance schedules during which Auto-Tune can deploy changes. Maintenance schedules are overwrite, not append. If your request includes no schedules, the request deletes all existing schedules. To preserve existing schedules, make a call to DescribeDomainConfig first and use the MaintenanceSchedules portion of the response as the basis for this section.
        public var maintenanceSchedules: [OpenSearchClientTypes.AutoTuneMaintenanceSchedule]?

        public init (
            desiredState: OpenSearchClientTypes.AutoTuneDesiredState? = nil,
            maintenanceSchedules: [OpenSearchClientTypes.AutoTuneMaintenanceSchedule]? = nil
        )
        {
            self.desiredState = desiredState
            self.maintenanceSchedules = maintenanceSchedules
        }
    }

}

extension OpenSearchClientTypes.AutoTuneOptionsOutput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorMessage = "ErrorMessage"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AutoTuneState.self, forKey: .state)
        state = stateDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension OpenSearchClientTypes {
    /// The Auto-Tune settings for a domain, displayed when enabling or disabling Auto-Tune.
    public struct AutoTuneOptionsOutput: Swift.Equatable {
        /// Any errors that occurred while enabling or disabling Auto-Tune.
        public var errorMessage: Swift.String?
        /// The current state of Auto-Tune on the domain.
        public var state: OpenSearchClientTypes.AutoTuneState?

        public init (
            errorMessage: Swift.String? = nil,
            state: OpenSearchClientTypes.AutoTuneState? = nil
        )
        {
            self.errorMessage = errorMessage
            self.state = state
        }
    }

}

extension OpenSearchClientTypes.AutoTuneOptionsStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AutoTuneOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AutoTuneStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension OpenSearchClientTypes {
    /// The Auto-Tune status for the domain.
    public struct AutoTuneOptionsStatus: Swift.Equatable {
        /// Auto-Tune settings for updating a domain.
        public var options: OpenSearchClientTypes.AutoTuneOptions?
        /// The current status of Auto-Tune for a domain.
        public var status: OpenSearchClientTypes.AutoTuneStatus?

        public init (
            options: OpenSearchClientTypes.AutoTuneOptions? = nil,
            status: OpenSearchClientTypes.AutoTuneStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension OpenSearchClientTypes {
    /// The Auto-Tune state for the domain. For valid states see [ Auto-Tune for Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/auto-tune.html).
    public enum AutoTuneState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case disabledAndRollbackComplete
        case disabledAndRollbackError
        case disabledAndRollbackInProgress
        case disabledAndRollbackScheduled
        case disableInProgress
        case enabled
        case enableInProgress
        case error
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoTuneState] {
            return [
                .disabled,
                .disabledAndRollbackComplete,
                .disabledAndRollbackError,
                .disabledAndRollbackInProgress,
                .disabledAndRollbackScheduled,
                .disableInProgress,
                .enabled,
                .enableInProgress,
                .error,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .disabledAndRollbackComplete: return "DISABLED_AND_ROLLBACK_COMPLETE"
            case .disabledAndRollbackError: return "DISABLED_AND_ROLLBACK_ERROR"
            case .disabledAndRollbackInProgress: return "DISABLED_AND_ROLLBACK_IN_PROGRESS"
            case .disabledAndRollbackScheduled: return "DISABLED_AND_ROLLBACK_SCHEDULED"
            case .disableInProgress: return "DISABLE_IN_PROGRESS"
            case .enabled: return "ENABLED"
            case .enableInProgress: return "ENABLE_IN_PROGRESS"
            case .error: return "ERROR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoTuneState(rawValue: rawValue) ?? AutoTuneState.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes.AutoTuneStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate = "CreationDate"
        case errorMessage = "ErrorMessage"
        case pendingDeletion = "PendingDeletion"
        case state = "State"
        case updateDate = "UpdateDate"
        case updateVersion = "UpdateVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = self.creationDate {
            try encodeContainer.encodeTimestamp(creationDate, format: .epochSeconds, forKey: .creationDate)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let pendingDeletion = self.pendingDeletion {
            try encodeContainer.encode(pendingDeletion, forKey: .pendingDeletion)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let updateDate = self.updateDate {
            try encodeContainer.encodeTimestamp(updateDate, format: .epochSeconds, forKey: .updateDate)
        }
        if updateVersion != 0 {
            try encodeContainer.encode(updateVersion, forKey: .updateVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
        let updateDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updateDate)
        updateDate = updateDateDecoded
        let updateVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .updateVersion) ?? 0
        updateVersion = updateVersionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AutoTuneState.self, forKey: .state)
        state = stateDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let pendingDeletionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .pendingDeletion)
        pendingDeletion = pendingDeletionDecoded
    }
}

extension OpenSearchClientTypes {
    /// The current status of Auto-Tune for the domain. For more information, see [Auto-Tune for Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/auto-tune.html).
    public struct AutoTuneStatus: Swift.Equatable {
        /// Date and time when Auto-Tune was enabled for the domain.
        /// This member is required.
        public var creationDate: ClientRuntime.Date?
        /// Any errors that occurred while enabling or disabling Auto-Tune.
        public var errorMessage: Swift.String?
        /// Indicates whether the domain is being deleted.
        public var pendingDeletion: Swift.Bool?
        /// The current state of Auto-Tune on the domain.
        /// This member is required.
        public var state: OpenSearchClientTypes.AutoTuneState?
        /// Date and time when the Auto-Tune options were last updated for the domain.
        /// This member is required.
        public var updateDate: ClientRuntime.Date?
        /// The latest version of the Auto-Tune options.
        public var updateVersion: Swift.Int

        public init (
            creationDate: ClientRuntime.Date? = nil,
            errorMessage: Swift.String? = nil,
            pendingDeletion: Swift.Bool? = nil,
            state: OpenSearchClientTypes.AutoTuneState? = nil,
            updateDate: ClientRuntime.Date? = nil,
            updateVersion: Swift.Int = 0
        )
        {
            self.creationDate = creationDate
            self.errorMessage = errorMessage
            self.pendingDeletion = pendingDeletion
            self.state = state
            self.updateDate = updateDate
            self.updateVersion = updateVersion
        }
    }

}

extension OpenSearchClientTypes {
    /// Specifies the Auto-Tune type. Valid value is SCHEDULED_ACTION.
    public enum AutoTuneType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case scheduledAction
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoTuneType] {
            return [
                .scheduledAction,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .scheduledAction: return "SCHEDULED_ACTION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoTuneType(rawValue: rawValue) ?? AutoTuneType.sdkUnknown(rawValue)
        }
    }
}

extension BaseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BaseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An error occurred while processing the request.
public struct BaseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct BaseExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension BaseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CancelServiceSoftwareUpdateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
    }
}

extension CancelServiceSoftwareUpdateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/opensearch/serviceSoftwareUpdate/cancel"
    }
}

/// Container for the request parameters to cancel a service software update.
public struct CancelServiceSoftwareUpdateInput: Swift.Equatable {
    /// Name of the OpenSearch Service domain that you want to cancel the service software update on.
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct CancelServiceSoftwareUpdateInputBody: Swift.Equatable {
    let domainName: Swift.String?
}

extension CancelServiceSoftwareUpdateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
    }
}

extension CancelServiceSoftwareUpdateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelServiceSoftwareUpdateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CancelServiceSoftwareUpdateOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelServiceSoftwareUpdateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CancelServiceSoftwareUpdateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.serviceSoftwareOptions = output.serviceSoftwareOptions
        } else {
            self.serviceSoftwareOptions = nil
        }
    }
}

/// Container for the response to a CancelServiceSoftwareUpdate operation. Contains the status of the update.
public struct CancelServiceSoftwareUpdateOutputResponse: Swift.Equatable {
    /// Container for the state of your domain relative to the latest service software.
    public var serviceSoftwareOptions: OpenSearchClientTypes.ServiceSoftwareOptions?

    public init (
        serviceSoftwareOptions: OpenSearchClientTypes.ServiceSoftwareOptions? = nil
    )
    {
        self.serviceSoftwareOptions = serviceSoftwareOptions
    }
}

struct CancelServiceSoftwareUpdateOutputResponseBody: Swift.Equatable {
    let serviceSoftwareOptions: OpenSearchClientTypes.ServiceSoftwareOptions?
}

extension CancelServiceSoftwareUpdateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serviceSoftwareOptions = "ServiceSoftwareOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceSoftwareOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ServiceSoftwareOptions.self, forKey: .serviceSoftwareOptions)
        serviceSoftwareOptions = serviceSoftwareOptionsDecoded
    }
}

extension OpenSearchClientTypes.ChangeProgressDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeId = "ChangeId"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeId = self.changeId {
            try encodeContainer.encode(changeId, forKey: .changeId)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeId)
        changeId = changeIdDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OpenSearchClientTypes {
    /// Container for information about a configuration change happening on a domain.
    public struct ChangeProgressDetails: Swift.Equatable {
        /// The ID of the configuration change.
        public var changeId: Swift.String?
        /// A message corresponding to the status of the configuration change.
        public var message: Swift.String?

        public init (
            changeId: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.changeId = changeId
            self.message = message
        }
    }

}

extension OpenSearchClientTypes.ChangeProgressStage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case lastUpdated = "LastUpdated"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastUpdated = self.lastUpdated {
            try encodeContainer.encodeTimestamp(lastUpdated, format: .epochSeconds, forKey: .lastUpdated)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let lastUpdatedDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
    }
}

extension OpenSearchClientTypes {
    /// Progress details for each stage of a domain update.
    public struct ChangeProgressStage: Swift.Equatable {
        /// The description of the stage.
        public var description: Swift.String?
        /// The most recent updated timestamp of the stage.
        public var lastUpdated: ClientRuntime.Date?
        /// The name of the stage.
        public var name: Swift.String?
        /// The status of the stage.
        public var status: Swift.String?

        public init (
            description: Swift.String? = nil,
            lastUpdated: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.description = description
            self.lastUpdated = lastUpdated
            self.name = name
            self.status = status
        }
    }

}

extension OpenSearchClientTypes.ChangeProgressStatusDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeId = "ChangeId"
        case changeProgressStages = "ChangeProgressStages"
        case completedProperties = "CompletedProperties"
        case pendingProperties = "PendingProperties"
        case startTime = "StartTime"
        case status = "Status"
        case totalNumberOfStages = "TotalNumberOfStages"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeId = self.changeId {
            try encodeContainer.encode(changeId, forKey: .changeId)
        }
        if let changeProgressStages = changeProgressStages {
            var changeProgressStagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .changeProgressStages)
            for changeprogressstage0 in changeProgressStages {
                try changeProgressStagesContainer.encode(changeprogressstage0)
            }
        }
        if let completedProperties = completedProperties {
            var completedPropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .completedProperties)
            for string0 in completedProperties {
                try completedPropertiesContainer.encode(string0)
            }
        }
        if let pendingProperties = pendingProperties {
            var pendingPropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pendingProperties)
            for string0 in pendingProperties {
                try pendingPropertiesContainer.encode(string0)
            }
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if totalNumberOfStages != 0 {
            try encodeContainer.encode(totalNumberOfStages, forKey: .totalNumberOfStages)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeId)
        changeId = changeIdDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OverallChangeStatus.self, forKey: .status)
        status = statusDecoded
        let pendingPropertiesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .pendingProperties)
        var pendingPropertiesDecoded0:[Swift.String]? = nil
        if let pendingPropertiesContainer = pendingPropertiesContainer {
            pendingPropertiesDecoded0 = [Swift.String]()
            for string0 in pendingPropertiesContainer {
                if let string0 = string0 {
                    pendingPropertiesDecoded0?.append(string0)
                }
            }
        }
        pendingProperties = pendingPropertiesDecoded0
        let completedPropertiesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .completedProperties)
        var completedPropertiesDecoded0:[Swift.String]? = nil
        if let completedPropertiesContainer = completedPropertiesContainer {
            completedPropertiesDecoded0 = [Swift.String]()
            for string0 in completedPropertiesContainer {
                if let string0 = string0 {
                    completedPropertiesDecoded0?.append(string0)
                }
            }
        }
        completedProperties = completedPropertiesDecoded0
        let totalNumberOfStagesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalNumberOfStages) ?? 0
        totalNumberOfStages = totalNumberOfStagesDecoded
        let changeProgressStagesContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.ChangeProgressStage?].self, forKey: .changeProgressStages)
        var changeProgressStagesDecoded0:[OpenSearchClientTypes.ChangeProgressStage]? = nil
        if let changeProgressStagesContainer = changeProgressStagesContainer {
            changeProgressStagesDecoded0 = [OpenSearchClientTypes.ChangeProgressStage]()
            for structure0 in changeProgressStagesContainer {
                if let structure0 = structure0 {
                    changeProgressStagesDecoded0?.append(structure0)
                }
            }
        }
        changeProgressStages = changeProgressStagesDecoded0
    }
}

extension OpenSearchClientTypes {
    /// The progress details of a specific domain configuration change.
    public struct ChangeProgressStatusDetails: Swift.Equatable {
        /// The unique change identifier associated with a specific domain configuration change.
        public var changeId: Swift.String?
        /// The specific stages that the domain is going through to perform the configuration change.
        public var changeProgressStages: [OpenSearchClientTypes.ChangeProgressStage]?
        /// The list of properties in the domain configuration change that have completed.
        public var completedProperties: [Swift.String]?
        /// The list of properties in the domain configuration change that are still pending.
        public var pendingProperties: [Swift.String]?
        /// The time at which the configuration change is made on the domain.
        public var startTime: ClientRuntime.Date?
        /// The overall status of the domain configuration change.
        public var status: OpenSearchClientTypes.OverallChangeStatus?
        /// The total number of stages required for the configuration change.
        public var totalNumberOfStages: Swift.Int

        public init (
            changeId: Swift.String? = nil,
            changeProgressStages: [OpenSearchClientTypes.ChangeProgressStage]? = nil,
            completedProperties: [Swift.String]? = nil,
            pendingProperties: [Swift.String]? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: OpenSearchClientTypes.OverallChangeStatus? = nil,
            totalNumberOfStages: Swift.Int = 0
        )
        {
            self.changeId = changeId
            self.changeProgressStages = changeProgressStages
            self.completedProperties = completedProperties
            self.pendingProperties = pendingProperties
            self.startTime = startTime
            self.status = status
            self.totalNumberOfStages = totalNumberOfStages
        }
    }

}

extension OpenSearchClientTypes.ClusterConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case coldStorageOptions = "ColdStorageOptions"
        case dedicatedMasterCount = "DedicatedMasterCount"
        case dedicatedMasterEnabled = "DedicatedMasterEnabled"
        case dedicatedMasterType = "DedicatedMasterType"
        case instanceCount = "InstanceCount"
        case instanceType = "InstanceType"
        case warmCount = "WarmCount"
        case warmEnabled = "WarmEnabled"
        case warmType = "WarmType"
        case zoneAwarenessConfig = "ZoneAwarenessConfig"
        case zoneAwarenessEnabled = "ZoneAwarenessEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let coldStorageOptions = self.coldStorageOptions {
            try encodeContainer.encode(coldStorageOptions, forKey: .coldStorageOptions)
        }
        if let dedicatedMasterCount = self.dedicatedMasterCount {
            try encodeContainer.encode(dedicatedMasterCount, forKey: .dedicatedMasterCount)
        }
        if let dedicatedMasterEnabled = self.dedicatedMasterEnabled {
            try encodeContainer.encode(dedicatedMasterEnabled, forKey: .dedicatedMasterEnabled)
        }
        if let dedicatedMasterType = self.dedicatedMasterType {
            try encodeContainer.encode(dedicatedMasterType.rawValue, forKey: .dedicatedMasterType)
        }
        if let instanceCount = self.instanceCount {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let warmCount = self.warmCount {
            try encodeContainer.encode(warmCount, forKey: .warmCount)
        }
        if let warmEnabled = self.warmEnabled {
            try encodeContainer.encode(warmEnabled, forKey: .warmEnabled)
        }
        if let warmType = self.warmType {
            try encodeContainer.encode(warmType.rawValue, forKey: .warmType)
        }
        if let zoneAwarenessConfig = self.zoneAwarenessConfig {
            try encodeContainer.encode(zoneAwarenessConfig, forKey: .zoneAwarenessConfig)
        }
        if let zoneAwarenessEnabled = self.zoneAwarenessEnabled {
            try encodeContainer.encode(zoneAwarenessEnabled, forKey: .zoneAwarenessEnabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OpenSearchPartitionInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let dedicatedMasterEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dedicatedMasterEnabled)
        dedicatedMasterEnabled = dedicatedMasterEnabledDecoded
        let zoneAwarenessEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .zoneAwarenessEnabled)
        zoneAwarenessEnabled = zoneAwarenessEnabledDecoded
        let zoneAwarenessConfigDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ZoneAwarenessConfig.self, forKey: .zoneAwarenessConfig)
        zoneAwarenessConfig = zoneAwarenessConfigDecoded
        let dedicatedMasterTypeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OpenSearchPartitionInstanceType.self, forKey: .dedicatedMasterType)
        dedicatedMasterType = dedicatedMasterTypeDecoded
        let dedicatedMasterCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dedicatedMasterCount)
        dedicatedMasterCount = dedicatedMasterCountDecoded
        let warmEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .warmEnabled)
        warmEnabled = warmEnabledDecoded
        let warmTypeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OpenSearchWarmPartitionInstanceType.self, forKey: .warmType)
        warmType = warmTypeDecoded
        let warmCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .warmCount)
        warmCount = warmCountDecoded
        let coldStorageOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ColdStorageOptions.self, forKey: .coldStorageOptions)
        coldStorageOptions = coldStorageOptionsDecoded
    }
}

extension OpenSearchClientTypes {
    /// Container for the cluster configuration of an OpenSearch Service domain. For more information, see [Creating and managing Amazon OpenSearch Service domains](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html).
    public struct ClusterConfig: Swift.Equatable {
        /// Container for cold storage configuration options.
        public var coldStorageOptions: OpenSearchClientTypes.ColdStorageOptions?
        /// Number of dedicated master nodes in the cluster. This number must be greater than 1, otherwise you receive a validation exception.
        public var dedicatedMasterCount: Swift.Int?
        /// Indicates whether dedicated master nodes are enabled for the cluster.True if the cluster will use a dedicated master node.False if the cluster will not.
        public var dedicatedMasterEnabled: Swift.Bool?
        /// OpenSearch Service instance type of the dedicated master nodes in the cluster.
        public var dedicatedMasterType: OpenSearchClientTypes.OpenSearchPartitionInstanceType?
        /// Number of dedicated master nodes in the cluster. This number must be greater than 1, otherwise you receive a validation exception.
        public var instanceCount: Swift.Int?
        /// Instance type of data nodes in the cluster.
        public var instanceType: OpenSearchClientTypes.OpenSearchPartitionInstanceType?
        /// The number of warm nodes in the cluster.
        public var warmCount: Swift.Int?
        /// Whether to enable warm storage for the cluster.
        public var warmEnabled: Swift.Bool?
        /// The instance type for the cluster's warm nodes.
        public var warmType: OpenSearchClientTypes.OpenSearchWarmPartitionInstanceType?
        /// Container for zone awareness configuration options. Only required if ZoneAwarenessEnabled is true.
        public var zoneAwarenessConfig: OpenSearchClientTypes.ZoneAwarenessConfig?
        /// Indicates whether multiple Availability Zones are enabled. For more information, see [Configuring a multi-AZ domain in Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-multiaz.html).
        public var zoneAwarenessEnabled: Swift.Bool?

        public init (
            coldStorageOptions: OpenSearchClientTypes.ColdStorageOptions? = nil,
            dedicatedMasterCount: Swift.Int? = nil,
            dedicatedMasterEnabled: Swift.Bool? = nil,
            dedicatedMasterType: OpenSearchClientTypes.OpenSearchPartitionInstanceType? = nil,
            instanceCount: Swift.Int? = nil,
            instanceType: OpenSearchClientTypes.OpenSearchPartitionInstanceType? = nil,
            warmCount: Swift.Int? = nil,
            warmEnabled: Swift.Bool? = nil,
            warmType: OpenSearchClientTypes.OpenSearchWarmPartitionInstanceType? = nil,
            zoneAwarenessConfig: OpenSearchClientTypes.ZoneAwarenessConfig? = nil,
            zoneAwarenessEnabled: Swift.Bool? = nil
        )
        {
            self.coldStorageOptions = coldStorageOptions
            self.dedicatedMasterCount = dedicatedMasterCount
            self.dedicatedMasterEnabled = dedicatedMasterEnabled
            self.dedicatedMasterType = dedicatedMasterType
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.warmCount = warmCount
            self.warmEnabled = warmEnabled
            self.warmType = warmType
            self.zoneAwarenessConfig = zoneAwarenessConfig
            self.zoneAwarenessEnabled = zoneAwarenessEnabled
        }
    }

}

extension OpenSearchClientTypes.ClusterConfigStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ClusterConfig.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension OpenSearchClientTypes {
    /// The cluster configuration status for a domain.
    public struct ClusterConfigStatus: Swift.Equatable {
        /// Cluster configuration options for the specified domain.
        /// This member is required.
        public var options: OpenSearchClientTypes.ClusterConfig?
        /// The status of cluster configuration options for the specified domain.
        /// This member is required.
        public var status: OpenSearchClientTypes.OptionStatus?

        public init (
            options: OpenSearchClientTypes.ClusterConfig? = nil,
            status: OpenSearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension OpenSearchClientTypes.CognitoOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case identityPoolId = "IdentityPoolId"
        case roleArn = "RoleArn"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let identityPoolId = self.identityPoolId {
            try encodeContainer.encode(identityPoolId, forKey: .identityPoolId)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let identityPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityPoolId)
        identityPoolId = identityPoolIdDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension OpenSearchClientTypes {
    /// Container for the parameters required to enable Cognito authentication for an OpenSearch Service domain. For more information, see [Configuring Amazon Cognito authentication for OpenSearch Dashboards](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/cognito-auth.html).
    public struct CognitoOptions: Swift.Equatable {
        /// Whether to enable or disable Amazon Cognito authentication for OpenSearch Dashboards.
        public var enabled: Swift.Bool?
        /// The Amazon Cognito identity pool ID that you want OpenSearch Service to use for OpenSearch Dashboards authentication.
        public var identityPoolId: Swift.String?
        /// The AmazonOpenSearchServiceCognitoAccess role that allows OpenSearch Service to configure your user pool and identity pool.
        public var roleArn: Swift.String?
        /// The Amazon Cognito user pool ID that you want OpenSearch Service to use for OpenSearch Dashboards authentication.
        public var userPoolId: Swift.String?

        public init (
            enabled: Swift.Bool? = nil,
            identityPoolId: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            userPoolId: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.identityPoolId = identityPoolId
            self.roleArn = roleArn
            self.userPoolId = userPoolId
        }
    }

}

extension OpenSearchClientTypes.CognitoOptionsStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.CognitoOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension OpenSearchClientTypes {
    /// The status of the Cognito options for the specified domain.
    public struct CognitoOptionsStatus: Swift.Equatable {
        /// Cognito options for the specified domain.
        /// This member is required.
        public var options: OpenSearchClientTypes.CognitoOptions?
        /// The status of the Cognito options for the specified domain.
        /// This member is required.
        public var status: OpenSearchClientTypes.OptionStatus?

        public init (
            options: OpenSearchClientTypes.CognitoOptions? = nil,
            status: OpenSearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension OpenSearchClientTypes.ColdStorageOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension OpenSearchClientTypes {
    /// Container for the parameters required to enable cold storage for an OpenSearch Service domain. For more information, see [Cold storage for Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/cold-storage.html).
    public struct ColdStorageOptions: Swift.Equatable {
        /// Whether to enable or disable cold storage on the domain.
        /// This member is required.
        public var enabled: Swift.Bool?

        public init (
            enabled: Swift.Bool? = nil
        )
        {
            self.enabled = enabled
        }
    }

}

extension OpenSearchClientTypes.CompatibleVersionsMap: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceVersion = "SourceVersion"
        case targetVersions = "TargetVersions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourceVersion = self.sourceVersion {
            try encodeContainer.encode(sourceVersion, forKey: .sourceVersion)
        }
        if let targetVersions = targetVersions {
            var targetVersionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetVersions)
            for versionstring0 in targetVersions {
                try targetVersionsContainer.encode(versionstring0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceVersion)
        sourceVersion = sourceVersionDecoded
        let targetVersionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targetVersions)
        var targetVersionsDecoded0:[Swift.String]? = nil
        if let targetVersionsContainer = targetVersionsContainer {
            targetVersionsDecoded0 = [Swift.String]()
            for string0 in targetVersionsContainer {
                if let string0 = string0 {
                    targetVersionsDecoded0?.append(string0)
                }
            }
        }
        targetVersions = targetVersionsDecoded0
    }
}

extension OpenSearchClientTypes {
    /// A map of OpenSearch or Elasticsearch versions and the versions you can upgrade them to.
    public struct CompatibleVersionsMap: Swift.Equatable {
        /// The current version that the OpenSearch Service domain is running.
        public var sourceVersion: Swift.String?
        /// The possible versions that you can upgrade the domain to.
        public var targetVersions: [Swift.String]?

        public init (
            sourceVersion: Swift.String? = nil,
            targetVersions: [Swift.String]? = nil
        )
        {
            self.sourceVersion = sourceVersion
            self.targetVersions = targetVersions
        }
    }

}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An error occurred because the client attempts to remove a resource that's currently in use.
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OpenSearchClientTypes {
    /// The connection mode for the cross-cluster connection.
    ///
    /// * DIRECT - Used for cross-cluster search or cross-cluster replication.
    ///
    /// * VPC_ENDPOINT - Used for remote reindex between Amazon OpenSearch Service VPC domains.
    public enum ConnectionMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case direct
        case vpcEndpoint
        case sdkUnknown(Swift.String)

        public static var allCases: [ConnectionMode] {
            return [
                .direct,
                .vpcEndpoint,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .direct: return "DIRECT"
            case .vpcEndpoint: return "VPC_ENDPOINT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConnectionMode(rawValue: rawValue) ?? ConnectionMode.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes.ConnectionProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpoint = "Endpoint"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpoint = self.endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpoint)
        endpoint = endpointDecoded
    }
}

extension OpenSearchClientTypes {
    /// The connection properties of an outbound connection.
    public struct ConnectionProperties: Swift.Equatable {
        /// The endpoint of the remote domain.
        public var endpoint: Swift.String?

        public init (
            endpoint: Swift.String? = nil
        )
        {
            self.endpoint = endpoint
        }
    }

}

extension CreateDomainInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case clusterConfig = "ClusterConfig"
        case cognitoOptions = "CognitoOptions"
        case domainEndpointOptions = "DomainEndpointOptions"
        case domainName = "DomainName"
        case ebsOptions = "EBSOptions"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case engineVersion = "EngineVersion"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case snapshotOptions = "SnapshotOptions"
        case tagList = "TagList"
        case vpcOptions = "VPCOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPolicies = self.accessPolicies {
            try encodeContainer.encode(accessPolicies, forKey: .accessPolicies)
        }
        if let advancedOptions = advancedOptions {
            var advancedOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .advancedOptions)
            for (dictKey0, advancedOptions0) in advancedOptions {
                try advancedOptionsContainer.encode(advancedOptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let advancedSecurityOptions = self.advancedSecurityOptions {
            try encodeContainer.encode(advancedSecurityOptions, forKey: .advancedSecurityOptions)
        }
        if let autoTuneOptions = self.autoTuneOptions {
            try encodeContainer.encode(autoTuneOptions, forKey: .autoTuneOptions)
        }
        if let clusterConfig = self.clusterConfig {
            try encodeContainer.encode(clusterConfig, forKey: .clusterConfig)
        }
        if let cognitoOptions = self.cognitoOptions {
            try encodeContainer.encode(cognitoOptions, forKey: .cognitoOptions)
        }
        if let domainEndpointOptions = self.domainEndpointOptions {
            try encodeContainer.encode(domainEndpointOptions, forKey: .domainEndpointOptions)
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let ebsOptions = self.ebsOptions {
            try encodeContainer.encode(ebsOptions, forKey: .ebsOptions)
        }
        if let encryptionAtRestOptions = self.encryptionAtRestOptions {
            try encodeContainer.encode(encryptionAtRestOptions, forKey: .encryptionAtRestOptions)
        }
        if let engineVersion = self.engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let logPublishingOptions = logPublishingOptions {
            var logPublishingOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .logPublishingOptions)
            for (dictKey0, logPublishingOptions0) in logPublishingOptions {
                try logPublishingOptionsContainer.encode(logPublishingOptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let nodeToNodeEncryptionOptions = self.nodeToNodeEncryptionOptions {
            try encodeContainer.encode(nodeToNodeEncryptionOptions, forKey: .nodeToNodeEncryptionOptions)
        }
        if let snapshotOptions = self.snapshotOptions {
            try encodeContainer.encode(snapshotOptions, forKey: .snapshotOptions)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for tag0 in tagList {
                try tagListContainer.encode(tag0)
            }
        }
        if let vpcOptions = self.vpcOptions {
            try encodeContainer.encode(vpcOptions, forKey: .vpcOptions)
        }
    }
}

extension CreateDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/opensearch/domain"
    }
}

public struct CreateDomainInput: Swift.Equatable {
    /// Identity and Access Management (IAM) policy document specifying the access policies for the new domain.
    public var accessPolicies: Swift.String?
    /// Key-value pairs to specify advanced configuration options. The following key-value pairs are supported:
    ///
    /// * "rest.action.multi.allow_explicit_index": "true" | "false" - Note the use of a string rather than a boolean. Specifies whether explicit references to indexes are allowed inside the body of HTTP requests. If you want to configure access policies for domain sub-resources, such as specific indexes and domain APIs, you must disable this property. Default is true.
    ///
    /// * "indices.fielddata.cache.size": "80"  - Note the use of a string rather than a boolean. Specifies the percentage of heap space allocated to field data. Default is unbounded.
    ///
    /// * "indices.query.bool.max_clause_count": "1024" - Note the use of a string rather than a boolean. Specifies the maximum number of clauses allowed in a Lucene boolean query. Default is 1,024. Queries with more than the permitted number of clauses result in a TooManyClauses error.
    ///
    /// * "override_main_response_version": "true" | "false" - Note the use of a string rather than a boolean. Specifies whether the domain reports its version as 7.10 to allow Elasticsearch OSS clients and plugins to continue working with it. Default is false when creating a domain and true when upgrading a domain.
    ///
    ///
    /// For more information, see [Advanced cluster parameters](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options).
    public var advancedOptions: [Swift.String:Swift.String]?
    /// Options for fine-grained access control.
    public var advancedSecurityOptions: OpenSearchClientTypes.AdvancedSecurityOptionsInput?
    /// Options for Auto-Tune.
    public var autoTuneOptions: OpenSearchClientTypes.AutoTuneOptionsInput?
    /// Container for the cluster configuration of a domain.
    public var clusterConfig: OpenSearchClientTypes.ClusterConfig?
    /// Key-value pairs to configure Amazon Cognito authentication. For more information, see [Configuring Amazon Cognito authentication for OpenSearch Dashboards](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/cognito-auth.html).
    public var cognitoOptions: OpenSearchClientTypes.CognitoOptions?
    /// Additional options for the domain endpoint, such as whether to require HTTPS for all traffic.
    public var domainEndpointOptions: OpenSearchClientTypes.DomainEndpointOptions?
    /// Name of the OpenSearch Service domain to create. Domain names are unique across the domains owned by an account within an Amazon Web Services Region.
    /// This member is required.
    public var domainName: Swift.String?
    /// Container for the parameters required to enable EBS-based storage for an OpenSearch Service domain.
    public var ebsOptions: OpenSearchClientTypes.EBSOptions?
    /// Key-value pairs to enable encryption at rest.
    public var encryptionAtRestOptions: OpenSearchClientTypes.EncryptionAtRestOptions?
    /// String of format Elasticsearch_X.Y or OpenSearch_X.Y to specify the engine version for the OpenSearch Service domain. For example, OpenSearch_1.0 or Elasticsearch_7.9. For more information, see [Creating and managing Amazon OpenSearch Service domains](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomains).
    public var engineVersion: Swift.String?
    /// Key-value pairs to configure slow log publishing.
    public var logPublishingOptions: [Swift.String:OpenSearchClientTypes.LogPublishingOption]?
    /// Enables node-to-node encryption.
    public var nodeToNodeEncryptionOptions: OpenSearchClientTypes.NodeToNodeEncryptionOptions?
    /// DEPRECATED. Container for the parameters required to configure automated snapshots of domain indexes.
    public var snapshotOptions: OpenSearchClientTypes.SnapshotOptions?
    /// List of tags to add to the domain upon creation.
    public var tagList: [OpenSearchClientTypes.Tag]?
    /// Container for the values required to configure VPC access domains. If you don't specify these values, OpenSearch Service creates the domain with a public endpoint. For more information, see [Launching your Amazon OpenSearch Service domains using a VPC](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/vpc.html).
    public var vpcOptions: OpenSearchClientTypes.VPCOptions?

    public init (
        accessPolicies: Swift.String? = nil,
        advancedOptions: [Swift.String:Swift.String]? = nil,
        advancedSecurityOptions: OpenSearchClientTypes.AdvancedSecurityOptionsInput? = nil,
        autoTuneOptions: OpenSearchClientTypes.AutoTuneOptionsInput? = nil,
        clusterConfig: OpenSearchClientTypes.ClusterConfig? = nil,
        cognitoOptions: OpenSearchClientTypes.CognitoOptions? = nil,
        domainEndpointOptions: OpenSearchClientTypes.DomainEndpointOptions? = nil,
        domainName: Swift.String? = nil,
        ebsOptions: OpenSearchClientTypes.EBSOptions? = nil,
        encryptionAtRestOptions: OpenSearchClientTypes.EncryptionAtRestOptions? = nil,
        engineVersion: Swift.String? = nil,
        logPublishingOptions: [Swift.String:OpenSearchClientTypes.LogPublishingOption]? = nil,
        nodeToNodeEncryptionOptions: OpenSearchClientTypes.NodeToNodeEncryptionOptions? = nil,
        snapshotOptions: OpenSearchClientTypes.SnapshotOptions? = nil,
        tagList: [OpenSearchClientTypes.Tag]? = nil,
        vpcOptions: OpenSearchClientTypes.VPCOptions? = nil
    )
    {
        self.accessPolicies = accessPolicies
        self.advancedOptions = advancedOptions
        self.advancedSecurityOptions = advancedSecurityOptions
        self.autoTuneOptions = autoTuneOptions
        self.clusterConfig = clusterConfig
        self.cognitoOptions = cognitoOptions
        self.domainEndpointOptions = domainEndpointOptions
        self.domainName = domainName
        self.ebsOptions = ebsOptions
        self.encryptionAtRestOptions = encryptionAtRestOptions
        self.engineVersion = engineVersion
        self.logPublishingOptions = logPublishingOptions
        self.nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions
        self.snapshotOptions = snapshotOptions
        self.tagList = tagList
        self.vpcOptions = vpcOptions
    }
}

struct CreateDomainInputBody: Swift.Equatable {
    let domainName: Swift.String?
    let engineVersion: Swift.String?
    let clusterConfig: OpenSearchClientTypes.ClusterConfig?
    let ebsOptions: OpenSearchClientTypes.EBSOptions?
    let accessPolicies: Swift.String?
    let snapshotOptions: OpenSearchClientTypes.SnapshotOptions?
    let vpcOptions: OpenSearchClientTypes.VPCOptions?
    let cognitoOptions: OpenSearchClientTypes.CognitoOptions?
    let encryptionAtRestOptions: OpenSearchClientTypes.EncryptionAtRestOptions?
    let nodeToNodeEncryptionOptions: OpenSearchClientTypes.NodeToNodeEncryptionOptions?
    let advancedOptions: [Swift.String:Swift.String]?
    let logPublishingOptions: [Swift.String:OpenSearchClientTypes.LogPublishingOption]?
    let domainEndpointOptions: OpenSearchClientTypes.DomainEndpointOptions?
    let advancedSecurityOptions: OpenSearchClientTypes.AdvancedSecurityOptionsInput?
    let tagList: [OpenSearchClientTypes.Tag]?
    let autoTuneOptions: OpenSearchClientTypes.AutoTuneOptionsInput?
}

extension CreateDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case clusterConfig = "ClusterConfig"
        case cognitoOptions = "CognitoOptions"
        case domainEndpointOptions = "DomainEndpointOptions"
        case domainName = "DomainName"
        case ebsOptions = "EBSOptions"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case engineVersion = "EngineVersion"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case snapshotOptions = "SnapshotOptions"
        case tagList = "TagList"
        case vpcOptions = "VPCOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let clusterConfigDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ClusterConfig.self, forKey: .clusterConfig)
        clusterConfig = clusterConfigDecoded
        let ebsOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.EBSOptions.self, forKey: .ebsOptions)
        ebsOptions = ebsOptionsDecoded
        let accessPoliciesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPolicies)
        accessPolicies = accessPoliciesDecoded
        let snapshotOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.SnapshotOptions.self, forKey: .snapshotOptions)
        snapshotOptions = snapshotOptionsDecoded
        let vpcOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.VPCOptions.self, forKey: .vpcOptions)
        vpcOptions = vpcOptionsDecoded
        let cognitoOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.CognitoOptions.self, forKey: .cognitoOptions)
        cognitoOptions = cognitoOptionsDecoded
        let encryptionAtRestOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.EncryptionAtRestOptions.self, forKey: .encryptionAtRestOptions)
        encryptionAtRestOptions = encryptionAtRestOptionsDecoded
        let nodeToNodeEncryptionOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.NodeToNodeEncryptionOptions.self, forKey: .nodeToNodeEncryptionOptions)
        nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptionsDecoded
        let advancedOptionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .advancedOptions)
        var advancedOptionsDecoded0: [Swift.String:Swift.String]? = nil
        if let advancedOptionsContainer = advancedOptionsContainer {
            advancedOptionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in advancedOptionsContainer {
                if let string0 = string0 {
                    advancedOptionsDecoded0?[key0] = string0
                }
            }
        }
        advancedOptions = advancedOptionsDecoded0
        let logPublishingOptionsContainer = try containerValues.decodeIfPresent([Swift.String: OpenSearchClientTypes.LogPublishingOption?].self, forKey: .logPublishingOptions)
        var logPublishingOptionsDecoded0: [Swift.String:OpenSearchClientTypes.LogPublishingOption]? = nil
        if let logPublishingOptionsContainer = logPublishingOptionsContainer {
            logPublishingOptionsDecoded0 = [Swift.String:OpenSearchClientTypes.LogPublishingOption]()
            for (key0, logpublishingoption0) in logPublishingOptionsContainer {
                if let logpublishingoption0 = logpublishingoption0 {
                    logPublishingOptionsDecoded0?[key0] = logpublishingoption0
                }
            }
        }
        logPublishingOptions = logPublishingOptionsDecoded0
        let domainEndpointOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainEndpointOptions.self, forKey: .domainEndpointOptions)
        domainEndpointOptions = domainEndpointOptionsDecoded
        let advancedSecurityOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AdvancedSecurityOptionsInput.self, forKey: .advancedSecurityOptions)
        advancedSecurityOptions = advancedSecurityOptionsDecoded
        let tagListContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.Tag?].self, forKey: .tagList)
        var tagListDecoded0:[OpenSearchClientTypes.Tag]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [OpenSearchClientTypes.Tag]()
            for structure0 in tagListContainer {
                if let structure0 = structure0 {
                    tagListDecoded0?.append(structure0)
                }
            }
        }
        tagList = tagListDecoded0
        let autoTuneOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AutoTuneOptionsInput.self, forKey: .autoTuneOptions)
        autoTuneOptions = autoTuneOptionsDecoded
    }
}

extension CreateDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTypeException" : self = .invalidTypeException(try InvalidTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDomainOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case invalidTypeException(InvalidTypeException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainStatus = output.domainStatus
        } else {
            self.domainStatus = nil
        }
    }
}

/// The result of a CreateDomain operation. Contains the status of the newly created domain.
public struct CreateDomainOutputResponse: Swift.Equatable {
    /// The status of the newly created domain.
    public var domainStatus: OpenSearchClientTypes.DomainStatus?

    public init (
        domainStatus: OpenSearchClientTypes.DomainStatus? = nil
    )
    {
        self.domainStatus = domainStatus
    }
}

struct CreateDomainOutputResponseBody: Swift.Equatable {
    let domainStatus: OpenSearchClientTypes.DomainStatus?
}

extension CreateDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainStatus = "DomainStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainStatusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainStatus.self, forKey: .domainStatus)
        domainStatus = domainStatusDecoded
    }
}

extension CreateOutboundConnectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionAlias = "ConnectionAlias"
        case connectionMode = "ConnectionMode"
        case localDomainInfo = "LocalDomainInfo"
        case remoteDomainInfo = "RemoteDomainInfo"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionAlias = self.connectionAlias {
            try encodeContainer.encode(connectionAlias, forKey: .connectionAlias)
        }
        if let connectionMode = self.connectionMode {
            try encodeContainer.encode(connectionMode.rawValue, forKey: .connectionMode)
        }
        if let localDomainInfo = self.localDomainInfo {
            try encodeContainer.encode(localDomainInfo, forKey: .localDomainInfo)
        }
        if let remoteDomainInfo = self.remoteDomainInfo {
            try encodeContainer.encode(remoteDomainInfo, forKey: .remoteDomainInfo)
        }
    }
}

extension CreateOutboundConnectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/opensearch/cc/outboundConnection"
    }
}

/// Container for the parameters to the CreateOutboundConnection operation.
public struct CreateOutboundConnectionInput: Swift.Equatable {
    /// Name of the connection.
    /// This member is required.
    public var connectionAlias: Swift.String?
    /// The connection mode.
    public var connectionMode: OpenSearchClientTypes.ConnectionMode?
    /// Name and Region of the source (local) domain.
    /// This member is required.
    public var localDomainInfo: OpenSearchClientTypes.DomainInformationContainer?
    /// Name and Region of the destination (remote) domain.
    /// This member is required.
    public var remoteDomainInfo: OpenSearchClientTypes.DomainInformationContainer?

    public init (
        connectionAlias: Swift.String? = nil,
        connectionMode: OpenSearchClientTypes.ConnectionMode? = nil,
        localDomainInfo: OpenSearchClientTypes.DomainInformationContainer? = nil,
        remoteDomainInfo: OpenSearchClientTypes.DomainInformationContainer? = nil
    )
    {
        self.connectionAlias = connectionAlias
        self.connectionMode = connectionMode
        self.localDomainInfo = localDomainInfo
        self.remoteDomainInfo = remoteDomainInfo
    }
}

struct CreateOutboundConnectionInputBody: Swift.Equatable {
    let localDomainInfo: OpenSearchClientTypes.DomainInformationContainer?
    let remoteDomainInfo: OpenSearchClientTypes.DomainInformationContainer?
    let connectionAlias: Swift.String?
    let connectionMode: OpenSearchClientTypes.ConnectionMode?
}

extension CreateOutboundConnectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionAlias = "ConnectionAlias"
        case connectionMode = "ConnectionMode"
        case localDomainInfo = "LocalDomainInfo"
        case remoteDomainInfo = "RemoteDomainInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let localDomainInfoDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainInformationContainer.self, forKey: .localDomainInfo)
        localDomainInfo = localDomainInfoDecoded
        let remoteDomainInfoDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainInformationContainer.self, forKey: .remoteDomainInfo)
        remoteDomainInfo = remoteDomainInfoDecoded
        let connectionAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionAlias)
        connectionAlias = connectionAliasDecoded
        let connectionModeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ConnectionMode.self, forKey: .connectionMode)
        connectionMode = connectionModeDecoded
    }
}

extension CreateOutboundConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateOutboundConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateOutboundConnectionOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateOutboundConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateOutboundConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.connectionAlias = output.connectionAlias
            self.connectionId = output.connectionId
            self.connectionMode = output.connectionMode
            self.connectionProperties = output.connectionProperties
            self.connectionStatus = output.connectionStatus
            self.localDomainInfo = output.localDomainInfo
            self.remoteDomainInfo = output.remoteDomainInfo
        } else {
            self.connectionAlias = nil
            self.connectionId = nil
            self.connectionMode = nil
            self.connectionProperties = nil
            self.connectionStatus = nil
            self.localDomainInfo = nil
            self.remoteDomainInfo = nil
        }
    }
}

/// The result of a CreateOutboundConnection request. Contains details about the newly created cross-cluster connection.
public struct CreateOutboundConnectionOutputResponse: Swift.Equatable {
    /// Name of the connection.
    public var connectionAlias: Swift.String?
    /// The unique identifier for the created outbound connection, which is used for subsequent operations on the connection.
    public var connectionId: Swift.String?
    /// The connection mode.
    public var connectionMode: OpenSearchClientTypes.ConnectionMode?
    /// The ConnectionProperties for the newly created connection.
    public var connectionProperties: OpenSearchClientTypes.ConnectionProperties?
    /// The status of the connection.
    public var connectionStatus: OpenSearchClientTypes.OutboundConnectionStatus?
    /// Information about the source (local) domain.
    public var localDomainInfo: OpenSearchClientTypes.DomainInformationContainer?
    /// Information about the destination (remote) domain.
    public var remoteDomainInfo: OpenSearchClientTypes.DomainInformationContainer?

    public init (
        connectionAlias: Swift.String? = nil,
        connectionId: Swift.String? = nil,
        connectionMode: OpenSearchClientTypes.ConnectionMode? = nil,
        connectionProperties: OpenSearchClientTypes.ConnectionProperties? = nil,
        connectionStatus: OpenSearchClientTypes.OutboundConnectionStatus? = nil,
        localDomainInfo: OpenSearchClientTypes.DomainInformationContainer? = nil,
        remoteDomainInfo: OpenSearchClientTypes.DomainInformationContainer? = nil
    )
    {
        self.connectionAlias = connectionAlias
        self.connectionId = connectionId
        self.connectionMode = connectionMode
        self.connectionProperties = connectionProperties
        self.connectionStatus = connectionStatus
        self.localDomainInfo = localDomainInfo
        self.remoteDomainInfo = remoteDomainInfo
    }
}

struct CreateOutboundConnectionOutputResponseBody: Swift.Equatable {
    let localDomainInfo: OpenSearchClientTypes.DomainInformationContainer?
    let remoteDomainInfo: OpenSearchClientTypes.DomainInformationContainer?
    let connectionAlias: Swift.String?
    let connectionStatus: OpenSearchClientTypes.OutboundConnectionStatus?
    let connectionId: Swift.String?
    let connectionMode: OpenSearchClientTypes.ConnectionMode?
    let connectionProperties: OpenSearchClientTypes.ConnectionProperties?
}

extension CreateOutboundConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionAlias = "ConnectionAlias"
        case connectionId = "ConnectionId"
        case connectionMode = "ConnectionMode"
        case connectionProperties = "ConnectionProperties"
        case connectionStatus = "ConnectionStatus"
        case localDomainInfo = "LocalDomainInfo"
        case remoteDomainInfo = "RemoteDomainInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let localDomainInfoDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainInformationContainer.self, forKey: .localDomainInfo)
        localDomainInfo = localDomainInfoDecoded
        let remoteDomainInfoDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainInformationContainer.self, forKey: .remoteDomainInfo)
        remoteDomainInfo = remoteDomainInfoDecoded
        let connectionAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionAlias)
        connectionAlias = connectionAliasDecoded
        let connectionStatusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OutboundConnectionStatus.self, forKey: .connectionStatus)
        connectionStatus = connectionStatusDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let connectionModeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ConnectionMode.self, forKey: .connectionMode)
        connectionMode = connectionModeDecoded
        let connectionPropertiesDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ConnectionProperties.self, forKey: .connectionProperties)
        connectionProperties = connectionPropertiesDecoded
    }
}

extension CreatePackageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case packageDescription = "PackageDescription"
        case packageName = "PackageName"
        case packageSource = "PackageSource"
        case packageType = "PackageType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let packageDescription = self.packageDescription {
            try encodeContainer.encode(packageDescription, forKey: .packageDescription)
        }
        if let packageName = self.packageName {
            try encodeContainer.encode(packageName, forKey: .packageName)
        }
        if let packageSource = self.packageSource {
            try encodeContainer.encode(packageSource, forKey: .packageSource)
        }
        if let packageType = self.packageType {
            try encodeContainer.encode(packageType.rawValue, forKey: .packageType)
        }
    }
}

extension CreatePackageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/packages"
    }
}

/// Container for request parameters to the CreatePackage operation.
public struct CreatePackageInput: Swift.Equatable {
    /// Description of the package.
    public var packageDescription: Swift.String?
    /// Unique name for the package.
    /// This member is required.
    public var packageName: Swift.String?
    /// The Amazon S3 location from which to import the package.
    /// This member is required.
    public var packageSource: OpenSearchClientTypes.PackageSource?
    /// Type of package.
    /// This member is required.
    public var packageType: OpenSearchClientTypes.PackageType?

    public init (
        packageDescription: Swift.String? = nil,
        packageName: Swift.String? = nil,
        packageSource: OpenSearchClientTypes.PackageSource? = nil,
        packageType: OpenSearchClientTypes.PackageType? = nil
    )
    {
        self.packageDescription = packageDescription
        self.packageName = packageName
        self.packageSource = packageSource
        self.packageType = packageType
    }
}

struct CreatePackageInputBody: Swift.Equatable {
    let packageName: Swift.String?
    let packageType: OpenSearchClientTypes.PackageType?
    let packageDescription: Swift.String?
    let packageSource: OpenSearchClientTypes.PackageSource?
}

extension CreatePackageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case packageDescription = "PackageDescription"
        case packageName = "PackageName"
        case packageSource = "PackageSource"
        case packageType = "PackageType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageName)
        packageName = packageNameDecoded
        let packageTypeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.PackageType.self, forKey: .packageType)
        packageType = packageTypeDecoded
        let packageDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageDescription)
        packageDescription = packageDescriptionDecoded
        let packageSourceDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.PackageSource.self, forKey: .packageSource)
        packageSource = packageSourceDecoded
    }
}

extension CreatePackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTypeException" : self = .invalidTypeException(try InvalidTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreatePackageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case internalException(InternalException)
    case invalidTypeException(InvalidTypeException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreatePackageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.packageDetails = output.packageDetails
        } else {
            self.packageDetails = nil
        }
    }
}

/// Container for the response returned by the CreatePackage operation.
public struct CreatePackageOutputResponse: Swift.Equatable {
    /// Basic information about an OpenSearch Service package.
    public var packageDetails: OpenSearchClientTypes.PackageDetails?

    public init (
        packageDetails: OpenSearchClientTypes.PackageDetails? = nil
    )
    {
        self.packageDetails = packageDetails
    }
}

struct CreatePackageOutputResponseBody: Swift.Equatable {
    let packageDetails: OpenSearchClientTypes.PackageDetails?
}

extension CreatePackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case packageDetails = "PackageDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageDetailsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.PackageDetails.self, forKey: .packageDetails)
        packageDetails = packageDetailsDecoded
    }
}

extension CreateVpcEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case domainArn = "DomainArn"
        case vpcOptions = "VpcOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let domainArn = self.domainArn {
            try encodeContainer.encode(domainArn, forKey: .domainArn)
        }
        if let vpcOptions = self.vpcOptions {
            try encodeContainer.encode(vpcOptions, forKey: .vpcOptions)
        }
    }
}

extension CreateVpcEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/opensearch/vpcEndpoints"
    }
}

public struct CreateVpcEndpointInput: Swift.Equatable {
    /// Unique, case-sensitive identifier to ensure idempotency of the request.
    public var clientToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the domain to create the endpoint for.
    /// This member is required.
    public var domainArn: Swift.String?
    /// Options to specify the subnets and security groups for the endpoint.
    /// This member is required.
    public var vpcOptions: OpenSearchClientTypes.VPCOptions?

    public init (
        clientToken: Swift.String? = nil,
        domainArn: Swift.String? = nil,
        vpcOptions: OpenSearchClientTypes.VPCOptions? = nil
    )
    {
        self.clientToken = clientToken
        self.domainArn = domainArn
        self.vpcOptions = vpcOptions
    }
}

struct CreateVpcEndpointInputBody: Swift.Equatable {
    let domainArn: Swift.String?
    let vpcOptions: OpenSearchClientTypes.VPCOptions?
    let clientToken: Swift.String?
}

extension CreateVpcEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case domainArn = "DomainArn"
        case vpcOptions = "VpcOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainArn)
        domainArn = domainArnDecoded
        let vpcOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.VPCOptions.self, forKey: .vpcOptions)
        vpcOptions = vpcOptionsDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension CreateVpcEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateVpcEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateVpcEndpointOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case conflictException(ConflictException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case limitExceededException(LimitExceededException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateVpcEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateVpcEndpointOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.vpcEndpoint = output.vpcEndpoint
        } else {
            self.vpcEndpoint = nil
        }
    }
}

public struct CreateVpcEndpointOutputResponse: Swift.Equatable {
    /// Information about the newly created VPC endpoint.
    /// This member is required.
    public var vpcEndpoint: OpenSearchClientTypes.VpcEndpoint?

    public init (
        vpcEndpoint: OpenSearchClientTypes.VpcEndpoint? = nil
    )
    {
        self.vpcEndpoint = vpcEndpoint
    }
}

struct CreateVpcEndpointOutputResponseBody: Swift.Equatable {
    let vpcEndpoint: OpenSearchClientTypes.VpcEndpoint?
}

extension CreateVpcEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vpcEndpoint = "VpcEndpoint"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.VpcEndpoint.self, forKey: .vpcEndpoint)
        vpcEndpoint = vpcEndpointDecoded
    }
}

extension DeleteDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2021-01-01/opensearch/domain/\(domainName.urlPercentEncoding())"
    }
}

/// Container for the parameters to the DeleteDomain operation.
public struct DeleteDomainInput: Swift.Equatable {
    /// The name of the domain you want to permanently delete.
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct DeleteDomainInputBody: Swift.Equatable {
}

extension DeleteDomainInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteDomainOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainStatus = output.domainStatus
        } else {
            self.domainStatus = nil
        }
    }
}

/// The results of a DeleteDomain request. Contains the status of the pending deletion, or a "domain not found" error if the domain and all of its resources have been deleted.
public struct DeleteDomainOutputResponse: Swift.Equatable {
    /// The status of the domain being deleted.
    public var domainStatus: OpenSearchClientTypes.DomainStatus?

    public init (
        domainStatus: OpenSearchClientTypes.DomainStatus? = nil
    )
    {
        self.domainStatus = domainStatus
    }
}

struct DeleteDomainOutputResponseBody: Swift.Equatable {
    let domainStatus: OpenSearchClientTypes.DomainStatus?
}

extension DeleteDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainStatus = "DomainStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainStatusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainStatus.self, forKey: .domainStatus)
        domainStatus = domainStatusDecoded
    }
}

extension DeleteInboundConnectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let connectionId = connectionId else {
            return nil
        }
        return "/2021-01-01/opensearch/cc/inboundConnection/\(connectionId.urlPercentEncoding())"
    }
}

/// Container for the parameters to the DeleteInboundConnection operation.
public struct DeleteInboundConnectionInput: Swift.Equatable {
    /// The ID of the inbound connection to permanently delete.
    /// This member is required.
    public var connectionId: Swift.String?

    public init (
        connectionId: Swift.String? = nil
    )
    {
        self.connectionId = connectionId
    }
}

struct DeleteInboundConnectionInputBody: Swift.Equatable {
}

extension DeleteInboundConnectionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteInboundConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteInboundConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteInboundConnectionOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteInboundConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteInboundConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.connection = output.connection
        } else {
            self.connection = nil
        }
    }
}

/// The results of a DeleteInboundConnection operation. Contains details about the deleted inbound connection.
public struct DeleteInboundConnectionOutputResponse: Swift.Equatable {
    /// The deleted inbound connection.
    public var connection: OpenSearchClientTypes.InboundConnection?

    public init (
        connection: OpenSearchClientTypes.InboundConnection? = nil
    )
    {
        self.connection = connection
    }
}

struct DeleteInboundConnectionOutputResponseBody: Swift.Equatable {
    let connection: OpenSearchClientTypes.InboundConnection?
}

extension DeleteInboundConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connection = "Connection"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.InboundConnection.self, forKey: .connection)
        connection = connectionDecoded
    }
}

extension DeleteOutboundConnectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let connectionId = connectionId else {
            return nil
        }
        return "/2021-01-01/opensearch/cc/outboundConnection/\(connectionId.urlPercentEncoding())"
    }
}

/// Container for the parameters to the DeleteOutboundConnection operation.
public struct DeleteOutboundConnectionInput: Swift.Equatable {
    /// The ID of the outbound connection you want to permanently delete.
    /// This member is required.
    public var connectionId: Swift.String?

    public init (
        connectionId: Swift.String? = nil
    )
    {
        self.connectionId = connectionId
    }
}

struct DeleteOutboundConnectionInputBody: Swift.Equatable {
}

extension DeleteOutboundConnectionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteOutboundConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteOutboundConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteOutboundConnectionOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteOutboundConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteOutboundConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.connection = output.connection
        } else {
            self.connection = nil
        }
    }
}

/// Details about the deleted outbound connection.
public struct DeleteOutboundConnectionOutputResponse: Swift.Equatable {
    /// The deleted inbound connection.
    public var connection: OpenSearchClientTypes.OutboundConnection?

    public init (
        connection: OpenSearchClientTypes.OutboundConnection? = nil
    )
    {
        self.connection = connection
    }
}

struct DeleteOutboundConnectionOutputResponseBody: Swift.Equatable {
    let connection: OpenSearchClientTypes.OutboundConnection?
}

extension DeleteOutboundConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connection = "Connection"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OutboundConnection.self, forKey: .connection)
        connection = connectionDecoded
    }
}

extension DeletePackageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let packageID = packageID else {
            return nil
        }
        return "/2021-01-01/packages/\(packageID.urlPercentEncoding())"
    }
}

/// Deletes a package from OpenSearch Service. The package can't be associated with any OpenSearch Service domain.
public struct DeletePackageInput: Swift.Equatable {
    /// The internal ID of the package you want to delete. Use DescribePackages to find this value.
    /// This member is required.
    public var packageID: Swift.String?

    public init (
        packageID: Swift.String? = nil
    )
    {
        self.packageID = packageID
    }
}

struct DeletePackageInputBody: Swift.Equatable {
}

extension DeletePackageInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeletePackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeletePackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeletePackageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case conflictException(ConflictException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeletePackageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.packageDetails = output.packageDetails
        } else {
            self.packageDetails = nil
        }
    }
}

/// Container for the response parameters to the DeletePackage operation.
public struct DeletePackageOutputResponse: Swift.Equatable {
    /// Information about the deleted package.
    public var packageDetails: OpenSearchClientTypes.PackageDetails?

    public init (
        packageDetails: OpenSearchClientTypes.PackageDetails? = nil
    )
    {
        self.packageDetails = packageDetails
    }
}

struct DeletePackageOutputResponseBody: Swift.Equatable {
    let packageDetails: OpenSearchClientTypes.PackageDetails?
}

extension DeletePackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case packageDetails = "PackageDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageDetailsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.PackageDetails.self, forKey: .packageDetails)
        packageDetails = packageDetailsDecoded
    }
}

extension DeleteVpcEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let vpcEndpointId = vpcEndpointId else {
            return nil
        }
        return "/2021-01-01/opensearch/vpcEndpoints/\(vpcEndpointId.urlPercentEncoding())"
    }
}

public struct DeleteVpcEndpointInput: Swift.Equatable {
    /// The unique identifier of the endpoint.
    /// This member is required.
    public var vpcEndpointId: Swift.String?

    public init (
        vpcEndpointId: Swift.String? = nil
    )
    {
        self.vpcEndpointId = vpcEndpointId
    }
}

struct DeleteVpcEndpointInputBody: Swift.Equatable {
}

extension DeleteVpcEndpointInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteVpcEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteVpcEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteVpcEndpointOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteVpcEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteVpcEndpointOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.vpcEndpointSummary = output.vpcEndpointSummary
        } else {
            self.vpcEndpointSummary = nil
        }
    }
}

public struct DeleteVpcEndpointOutputResponse: Swift.Equatable {
    /// Information about the deleted endpoint, including its current status (DELETING or DELETE_FAILED).
    /// This member is required.
    public var vpcEndpointSummary: OpenSearchClientTypes.VpcEndpointSummary?

    public init (
        vpcEndpointSummary: OpenSearchClientTypes.VpcEndpointSummary? = nil
    )
    {
        self.vpcEndpointSummary = vpcEndpointSummary
    }
}

struct DeleteVpcEndpointOutputResponseBody: Swift.Equatable {
    let vpcEndpointSummary: OpenSearchClientTypes.VpcEndpointSummary?
}

extension DeleteVpcEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vpcEndpointSummary = "VpcEndpointSummary"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointSummaryDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.VpcEndpointSummary.self, forKey: .vpcEndpointSummary)
        vpcEndpointSummary = vpcEndpointSummaryDecoded
    }
}

extension OpenSearchClientTypes {
    public enum DeploymentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case eligible
        case inProgress
        case notEligible
        case pendingUpdate
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentStatus] {
            return [
                .completed,
                .eligible,
                .inProgress,
                .notEligible,
                .pendingUpdate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .eligible: return "ELIGIBLE"
            case .inProgress: return "IN_PROGRESS"
            case .notEligible: return "NOT_ELIGIBLE"
            case .pendingUpdate: return "PENDING_UPDATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeploymentStatus(rawValue: rawValue) ?? DeploymentStatus.sdkUnknown(rawValue)
        }
    }
}

extension DescribeDomainAutoTunesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeDomainAutoTunesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2021-01-01/opensearch/domain/\(domainName.urlPercentEncoding())/autoTunes"
    }
}

/// Container for the parameters to the DescribeDomainAutoTunes operation.
public struct DescribeDomainAutoTunesInput: Swift.Equatable {
    /// Name of the domain that you want Auto-Tune details about.
    /// This member is required.
    public var domainName: Swift.String?
    /// An optional parameter that specifies the maximum number of results to return. You can use nextToken to get the next page of results.
    public var maxResults: Swift.Int?
    /// If your initial DescribeDomainAutoTunes operation returns a nextToken, you can include the returned nextToken in subsequent DescribeDomainAutoTunes operations, which returns results in the next page.
    public var nextToken: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeDomainAutoTunesInputBody: Swift.Equatable {
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeDomainAutoTunesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeDomainAutoTunesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDomainAutoTunesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeDomainAutoTunesOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDomainAutoTunesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeDomainAutoTunesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.autoTunes = output.autoTunes
            self.nextToken = output.nextToken
        } else {
            self.autoTunes = nil
            self.nextToken = nil
        }
    }
}

/// The result of a DescribeDomainAutoTunes request.
public struct DescribeDomainAutoTunesOutputResponse: Swift.Equatable {
    /// The list of setting adjustments that Auto-Tune has made to the domain.
    public var autoTunes: [OpenSearchClientTypes.AutoTune]?
    /// When nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.
    public var nextToken: Swift.String?

    public init (
        autoTunes: [OpenSearchClientTypes.AutoTune]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoTunes = autoTunes
        self.nextToken = nextToken
    }
}

struct DescribeDomainAutoTunesOutputResponseBody: Swift.Equatable {
    let autoTunes: [OpenSearchClientTypes.AutoTune]?
    let nextToken: Swift.String?
}

extension DescribeDomainAutoTunesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoTunes = "AutoTunes"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoTunesContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.AutoTune?].self, forKey: .autoTunes)
        var autoTunesDecoded0:[OpenSearchClientTypes.AutoTune]? = nil
        if let autoTunesContainer = autoTunesContainer {
            autoTunesDecoded0 = [OpenSearchClientTypes.AutoTune]()
            for structure0 in autoTunesContainer {
                if let structure0 = structure0 {
                    autoTunesDecoded0?.append(structure0)
                }
            }
        }
        autoTunes = autoTunesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeDomainChangeProgressInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let changeId = changeId {
                let changeIdQueryItem = ClientRuntime.URLQueryItem(name: "changeid".urlPercentEncoding(), value: Swift.String(changeId).urlPercentEncoding())
                items.append(changeIdQueryItem)
            }
            return items
        }
    }
}

extension DescribeDomainChangeProgressInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2021-01-01/opensearch/domain/\(domainName.urlPercentEncoding())/progress"
    }
}

/// Container for the parameters to the DescribeDomainChangeProgress operation.
public struct DescribeDomainChangeProgressInput: Swift.Equatable {
    /// The specific change ID for which you want to get progress information. If omitted, the request returns information about the most recent configuration change.
    public var changeId: Swift.String?
    /// The name of the domain to get progress information for.
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        changeId: Swift.String? = nil,
        domainName: Swift.String? = nil
    )
    {
        self.changeId = changeId
        self.domainName = domainName
    }
}

struct DescribeDomainChangeProgressInputBody: Swift.Equatable {
}

extension DescribeDomainChangeProgressInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeDomainChangeProgressOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDomainChangeProgressOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeDomainChangeProgressOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDomainChangeProgressOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeDomainChangeProgressOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeProgressStatus = output.changeProgressStatus
        } else {
            self.changeProgressStatus = nil
        }
    }
}

/// The result of a DescribeDomainChangeProgress request. Contains progress information for the requested domain change.
public struct DescribeDomainChangeProgressOutputResponse: Swift.Equatable {
    /// Container for information about the stages of a configuration change happening on a domain.
    public var changeProgressStatus: OpenSearchClientTypes.ChangeProgressStatusDetails?

    public init (
        changeProgressStatus: OpenSearchClientTypes.ChangeProgressStatusDetails? = nil
    )
    {
        self.changeProgressStatus = changeProgressStatus
    }
}

struct DescribeDomainChangeProgressOutputResponseBody: Swift.Equatable {
    let changeProgressStatus: OpenSearchClientTypes.ChangeProgressStatusDetails?
}

extension DescribeDomainChangeProgressOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeProgressStatus = "ChangeProgressStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeProgressStatusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ChangeProgressStatusDetails.self, forKey: .changeProgressStatus)
        changeProgressStatus = changeProgressStatusDecoded
    }
}

extension DescribeDomainConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2021-01-01/opensearch/domain/\(domainName.urlPercentEncoding())/config"
    }
}

/// Container for the parameters to the DescribeDomainConfig operation.
public struct DescribeDomainConfigInput: Swift.Equatable {
    /// Name of the OpenSearch Service domain configuration that you want to describe.
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct DescribeDomainConfigInputBody: Swift.Equatable {
}

extension DescribeDomainConfigInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeDomainConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDomainConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeDomainConfigOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDomainConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeDomainConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainConfig = output.domainConfig
        } else {
            self.domainConfig = nil
        }
    }
}

/// Contains the configuration information of the requested domain.
public struct DescribeDomainConfigOutputResponse: Swift.Equatable {
    /// Container for the configuration of the OpenSearch Service domain.
    /// This member is required.
    public var domainConfig: OpenSearchClientTypes.DomainConfig?

    public init (
        domainConfig: OpenSearchClientTypes.DomainConfig? = nil
    )
    {
        self.domainConfig = domainConfig
    }
}

struct DescribeDomainConfigOutputResponseBody: Swift.Equatable {
    let domainConfig: OpenSearchClientTypes.DomainConfig?
}

extension DescribeDomainConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainConfig = "DomainConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainConfigDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainConfig.self, forKey: .domainConfig)
        domainConfig = domainConfigDecoded
    }
}

extension DescribeDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2021-01-01/opensearch/domain/\(domainName.urlPercentEncoding())"
    }
}

/// Container for the parameters to the DescribeDomain operation.
public struct DescribeDomainInput: Swift.Equatable {
    /// The name of the domain that you want information about.
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct DescribeDomainInputBody: Swift.Equatable {
}

extension DescribeDomainInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeDomainOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainStatus = output.domainStatus
        } else {
            self.domainStatus = nil
        }
    }
}

/// Contains the status of the domain specified in the request.
public struct DescribeDomainOutputResponse: Swift.Equatable {
    /// List that contains the status of each specified OpenSearch Service domain.
    /// This member is required.
    public var domainStatus: OpenSearchClientTypes.DomainStatus?

    public init (
        domainStatus: OpenSearchClientTypes.DomainStatus? = nil
    )
    {
        self.domainStatus = domainStatus
    }
}

struct DescribeDomainOutputResponseBody: Swift.Equatable {
    let domainStatus: OpenSearchClientTypes.DomainStatus?
}

extension DescribeDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainStatus = "DomainStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainStatusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainStatus.self, forKey: .domainStatus)
        domainStatus = domainStatusDecoded
    }
}

extension DescribeDomainsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainNames = "DomainNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainNames = domainNames {
            var domainNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainNames)
            for domainname0 in domainNames {
                try domainNamesContainer.encode(domainname0)
            }
        }
    }
}

extension DescribeDomainsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/opensearch/domain-info"
    }
}

/// Container for the parameters to the DescribeDomains operation.
public struct DescribeDomainsInput: Swift.Equatable {
    /// Array of OpenSearch Service domain names that you want information about. If you don't specify any domains, OpenSearch Service returns information about all domains owned by the account.
    /// This member is required.
    public var domainNames: [Swift.String]?

    public init (
        domainNames: [Swift.String]? = nil
    )
    {
        self.domainNames = domainNames
    }
}

struct DescribeDomainsInputBody: Swift.Equatable {
    let domainNames: [Swift.String]?
}

extension DescribeDomainsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainNames = "DomainNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .domainNames)
        var domainNamesDecoded0:[Swift.String]? = nil
        if let domainNamesContainer = domainNamesContainer {
            domainNamesDecoded0 = [Swift.String]()
            for string0 in domainNamesContainer {
                if let string0 = string0 {
                    domainNamesDecoded0?.append(string0)
                }
            }
        }
        domainNames = domainNamesDecoded0
    }
}

extension DescribeDomainsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDomainsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeDomainsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDomainsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeDomainsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainStatusList = output.domainStatusList
        } else {
            self.domainStatusList = nil
        }
    }
}

/// Contains the status of the specified domains or all domains owned by the account.
public struct DescribeDomainsOutputResponse: Swift.Equatable {
    /// The status of the requested domains.
    /// This member is required.
    public var domainStatusList: [OpenSearchClientTypes.DomainStatus]?

    public init (
        domainStatusList: [OpenSearchClientTypes.DomainStatus]? = nil
    )
    {
        self.domainStatusList = domainStatusList
    }
}

struct DescribeDomainsOutputResponseBody: Swift.Equatable {
    let domainStatusList: [OpenSearchClientTypes.DomainStatus]?
}

extension DescribeDomainsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainStatusList = "DomainStatusList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainStatusListContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.DomainStatus?].self, forKey: .domainStatusList)
        var domainStatusListDecoded0:[OpenSearchClientTypes.DomainStatus]? = nil
        if let domainStatusListContainer = domainStatusListContainer {
            domainStatusListDecoded0 = [OpenSearchClientTypes.DomainStatus]()
            for structure0 in domainStatusListContainer {
                if let structure0 = structure0 {
                    domainStatusListDecoded0?.append(structure0)
                }
            }
        }
        domainStatusList = domainStatusListDecoded0
    }
}

extension DescribeDryRunProgressInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let dryRunId = dryRunId {
                let dryRunIdQueryItem = ClientRuntime.URLQueryItem(name: "dryRunId".urlPercentEncoding(), value: Swift.String(dryRunId).urlPercentEncoding())
                items.append(dryRunIdQueryItem)
            }
            if let loadDryRunConfig = loadDryRunConfig {
                let loadDryRunConfigQueryItem = ClientRuntime.URLQueryItem(name: "loadDryRunConfig".urlPercentEncoding(), value: Swift.String(loadDryRunConfig).urlPercentEncoding())
                items.append(loadDryRunConfigQueryItem)
            }
            return items
        }
    }
}

extension DescribeDryRunProgressInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2021-01-01/opensearch/domain/\(domainName.urlPercentEncoding())/dryRun"
    }
}

public struct DescribeDryRunProgressInput: Swift.Equatable {
    /// The name of the domain.
    /// This member is required.
    public var domainName: Swift.String?
    /// The unique identifier of the dry run.
    public var dryRunId: Swift.String?
    /// Whether to include the configuration of the dry run in the response. The configuration specifies the updates that you're planning to make on the domain.
    public var loadDryRunConfig: Swift.Bool?

    public init (
        domainName: Swift.String? = nil,
        dryRunId: Swift.String? = nil,
        loadDryRunConfig: Swift.Bool? = nil
    )
    {
        self.domainName = domainName
        self.dryRunId = dryRunId
        self.loadDryRunConfig = loadDryRunConfig
    }
}

struct DescribeDryRunProgressInputBody: Swift.Equatable {
}

extension DescribeDryRunProgressInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeDryRunProgressOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDryRunProgressOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeDryRunProgressOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDryRunProgressOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeDryRunProgressOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dryRunConfig = output.dryRunConfig
            self.dryRunProgressStatus = output.dryRunProgressStatus
            self.dryRunResults = output.dryRunResults
        } else {
            self.dryRunConfig = nil
            self.dryRunProgressStatus = nil
            self.dryRunResults = nil
        }
    }
}

public struct DescribeDryRunProgressOutputResponse: Swift.Equatable {
    /// Details about the changes you're planning to make on the domain.
    public var dryRunConfig: OpenSearchClientTypes.DomainStatus?
    /// The current status of the dry run, including any validation errors.
    public var dryRunProgressStatus: OpenSearchClientTypes.DryRunProgressStatus?
    /// The results of the dry run.
    public var dryRunResults: OpenSearchClientTypes.DryRunResults?

    public init (
        dryRunConfig: OpenSearchClientTypes.DomainStatus? = nil,
        dryRunProgressStatus: OpenSearchClientTypes.DryRunProgressStatus? = nil,
        dryRunResults: OpenSearchClientTypes.DryRunResults? = nil
    )
    {
        self.dryRunConfig = dryRunConfig
        self.dryRunProgressStatus = dryRunProgressStatus
        self.dryRunResults = dryRunResults
    }
}

struct DescribeDryRunProgressOutputResponseBody: Swift.Equatable {
    let dryRunProgressStatus: OpenSearchClientTypes.DryRunProgressStatus?
    let dryRunConfig: OpenSearchClientTypes.DomainStatus?
    let dryRunResults: OpenSearchClientTypes.DryRunResults?
}

extension DescribeDryRunProgressOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRunConfig = "DryRunConfig"
        case dryRunProgressStatus = "DryRunProgressStatus"
        case dryRunResults = "DryRunResults"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunProgressStatusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DryRunProgressStatus.self, forKey: .dryRunProgressStatus)
        dryRunProgressStatus = dryRunProgressStatusDecoded
        let dryRunConfigDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainStatus.self, forKey: .dryRunConfig)
        dryRunConfig = dryRunConfigDecoded
        let dryRunResultsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DryRunResults.self, forKey: .dryRunResults)
        dryRunResults = dryRunResultsDecoded
    }
}

extension DescribeInboundConnectionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filter0 in filters {
                try filtersContainer.encode(filter0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeInboundConnectionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/opensearch/cc/inboundConnection/search"
    }
}

/// Container for the parameters to the DescribeInboundConnections operation.
public struct DescribeInboundConnectionsInput: Swift.Equatable {
    /// A list of filters used to match properties for inbound cross-cluster connections.
    public var filters: [OpenSearchClientTypes.Filter]?
    /// An optional parameter that specifies the maximum number of results to return. You can use nextToken to get the next page of results.
    public var maxResults: Swift.Int?
    /// If your initial DescribeInboundConnections operation returns a nextToken, you can include the returned nextToken in subsequent DescribeInboundConnections operations, which returns results in the next page.
    public var nextToken: Swift.String?

    public init (
        filters: [OpenSearchClientTypes.Filter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeInboundConnectionsInputBody: Swift.Equatable {
    let filters: [OpenSearchClientTypes.Filter]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeInboundConnectionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[OpenSearchClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [OpenSearchClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeInboundConnectionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInboundConnectionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationTokenException" : self = .invalidPaginationTokenException(try InvalidPaginationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeInboundConnectionsOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case invalidPaginationTokenException(InvalidPaginationTokenException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInboundConnectionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeInboundConnectionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.connections = output.connections
            self.nextToken = output.nextToken
        } else {
            self.connections = nil
            self.nextToken = nil
        }
    }
}

/// Contains a list of connections matching the filter criteria.
public struct DescribeInboundConnectionsOutputResponse: Swift.Equatable {
    /// List of inbound connections.
    public var connections: [OpenSearchClientTypes.InboundConnection]?
    /// When nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.
    public var nextToken: Swift.String?

    public init (
        connections: [OpenSearchClientTypes.InboundConnection]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.connections = connections
        self.nextToken = nextToken
    }
}

struct DescribeInboundConnectionsOutputResponseBody: Swift.Equatable {
    let connections: [OpenSearchClientTypes.InboundConnection]?
    let nextToken: Swift.String?
}

extension DescribeInboundConnectionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connections = "Connections"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionsContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.InboundConnection?].self, forKey: .connections)
        var connectionsDecoded0:[OpenSearchClientTypes.InboundConnection]? = nil
        if let connectionsContainer = connectionsContainer {
            connectionsDecoded0 = [OpenSearchClientTypes.InboundConnection]()
            for structure0 in connectionsContainer {
                if let structure0 = structure0 {
                    connectionsDecoded0?.append(structure0)
                }
            }
        }
        connections = connectionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeInstanceTypeLimitsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let domainName = domainName {
                let domainNameQueryItem = ClientRuntime.URLQueryItem(name: "domainName".urlPercentEncoding(), value: Swift.String(domainName).urlPercentEncoding())
                items.append(domainNameQueryItem)
            }
            return items
        }
    }
}

extension DescribeInstanceTypeLimitsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let engineVersion = engineVersion else {
            return nil
        }
        guard let instanceType = instanceType else {
            return nil
        }
        return "/2021-01-01/opensearch/instanceTypeLimits/\(engineVersion.urlPercentEncoding())/\(instanceType.rawValue.urlPercentEncoding())"
    }
}

/// Container for the parameters to the DescribeInstanceTypeLimits operation.
public struct DescribeInstanceTypeLimitsInput: Swift.Equatable {
    /// The name of the domain. Only specify if you need the limits for an existing domain.
    public var domainName: Swift.String?
    /// Version of OpenSearch or Elasticsearch, in the format Elasticsearch_X.Y or OpenSearch_X.Y. Defaults to the latest version of OpenSearch.
    /// This member is required.
    public var engineVersion: Swift.String?
    /// The OpenSearch Service instance type for which you need limit information.
    /// This member is required.
    public var instanceType: OpenSearchClientTypes.OpenSearchPartitionInstanceType?

    public init (
        domainName: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        instanceType: OpenSearchClientTypes.OpenSearchPartitionInstanceType? = nil
    )
    {
        self.domainName = domainName
        self.engineVersion = engineVersion
        self.instanceType = instanceType
    }
}

struct DescribeInstanceTypeLimitsInputBody: Swift.Equatable {
}

extension DescribeInstanceTypeLimitsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeInstanceTypeLimitsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInstanceTypeLimitsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTypeException" : self = .invalidTypeException(try InvalidTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeInstanceTypeLimitsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case invalidTypeException(InvalidTypeException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInstanceTypeLimitsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeInstanceTypeLimitsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.limitsByRole = output.limitsByRole
        } else {
            self.limitsByRole = nil
        }
    }
}

/// Container for the parameters received from the DescribeInstanceTypeLimits operation.
public struct DescribeInstanceTypeLimitsOutputResponse: Swift.Equatable {
    /// Map that contains all applicable instance type limits.data refers to data nodes.master refers to dedicated master nodes.
    public var limitsByRole: [Swift.String:OpenSearchClientTypes.Limits]?

    public init (
        limitsByRole: [Swift.String:OpenSearchClientTypes.Limits]? = nil
    )
    {
        self.limitsByRole = limitsByRole
    }
}

struct DescribeInstanceTypeLimitsOutputResponseBody: Swift.Equatable {
    let limitsByRole: [Swift.String:OpenSearchClientTypes.Limits]?
}

extension DescribeInstanceTypeLimitsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limitsByRole = "LimitsByRole"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitsByRoleContainer = try containerValues.decodeIfPresent([Swift.String: OpenSearchClientTypes.Limits?].self, forKey: .limitsByRole)
        var limitsByRoleDecoded0: [Swift.String:OpenSearchClientTypes.Limits]? = nil
        if let limitsByRoleContainer = limitsByRoleContainer {
            limitsByRoleDecoded0 = [Swift.String:OpenSearchClientTypes.Limits]()
            for (key0, limits0) in limitsByRoleContainer {
                if let limits0 = limits0 {
                    limitsByRoleDecoded0?[key0] = limits0
                }
            }
        }
        limitsByRole = limitsByRoleDecoded0
    }
}

extension DescribeOutboundConnectionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filter0 in filters {
                try filtersContainer.encode(filter0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeOutboundConnectionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/opensearch/cc/outboundConnection/search"
    }
}

/// Container for the parameters to the DescribeOutboundConnections operation.
public struct DescribeOutboundConnectionsInput: Swift.Equatable {
    /// List of filter names and values that you can use for requests.
    public var filters: [OpenSearchClientTypes.Filter]?
    /// An optional parameter that specifies the maximum number of results to return. You can use nextToken to get the next page of results.
    public var maxResults: Swift.Int?
    /// If your initial DescribeOutboundConnections operation returns a nextToken, you can include the returned nextToken in subsequent DescribeOutboundConnections operations, which returns results in the next page.
    public var nextToken: Swift.String?

    public init (
        filters: [OpenSearchClientTypes.Filter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeOutboundConnectionsInputBody: Swift.Equatable {
    let filters: [OpenSearchClientTypes.Filter]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeOutboundConnectionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[OpenSearchClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [OpenSearchClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeOutboundConnectionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeOutboundConnectionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationTokenException" : self = .invalidPaginationTokenException(try InvalidPaginationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeOutboundConnectionsOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case invalidPaginationTokenException(InvalidPaginationTokenException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeOutboundConnectionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeOutboundConnectionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.connections = output.connections
            self.nextToken = output.nextToken
        } else {
            self.connections = nil
            self.nextToken = nil
        }
    }
}

/// Contains a list of connections matching the filter criteria.
public struct DescribeOutboundConnectionsOutputResponse: Swift.Equatable {
    /// List of outbound connections that match the filter criteria.
    public var connections: [OpenSearchClientTypes.OutboundConnection]?
    /// When nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.
    public var nextToken: Swift.String?

    public init (
        connections: [OpenSearchClientTypes.OutboundConnection]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.connections = connections
        self.nextToken = nextToken
    }
}

struct DescribeOutboundConnectionsOutputResponseBody: Swift.Equatable {
    let connections: [OpenSearchClientTypes.OutboundConnection]?
    let nextToken: Swift.String?
}

extension DescribeOutboundConnectionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connections = "Connections"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionsContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.OutboundConnection?].self, forKey: .connections)
        var connectionsDecoded0:[OpenSearchClientTypes.OutboundConnection]? = nil
        if let connectionsContainer = connectionsContainer {
            connectionsDecoded0 = [OpenSearchClientTypes.OutboundConnection]()
            for structure0 in connectionsContainer {
                if let structure0 = structure0 {
                    connectionsDecoded0?.append(structure0)
                }
            }
        }
        connections = connectionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension OpenSearchClientTypes.DescribePackagesFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let value = value {
            var valueContainer = encodeContainer.nestedUnkeyedContainer(forKey: .value)
            for describepackagesfiltervalue0 in value {
                try valueContainer.encode(describepackagesfiltervalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DescribePackagesFilterName.self, forKey: .name)
        name = nameDecoded
        let valueContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .value)
        var valueDecoded0:[Swift.String]? = nil
        if let valueContainer = valueContainer {
            valueDecoded0 = [Swift.String]()
            for string0 in valueContainer {
                if let string0 = string0 {
                    valueDecoded0?.append(string0)
                }
            }
        }
        value = valueDecoded0
    }
}

extension OpenSearchClientTypes {
    /// A filter to apply to the DescribePackage response.
    public struct DescribePackagesFilter: Swift.Equatable {
        /// Any field from PackageDetails.
        public var name: OpenSearchClientTypes.DescribePackagesFilterName?
        /// A list of values for the specified filter field.
        public var value: [Swift.String]?

        public init (
            name: OpenSearchClientTypes.DescribePackagesFilterName? = nil,
            value: [Swift.String]? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension OpenSearchClientTypes {
    public enum DescribePackagesFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case packageid
        case packagename
        case packagestatus
        case sdkUnknown(Swift.String)

        public static var allCases: [DescribePackagesFilterName] {
            return [
                .packageid,
                .packagename,
                .packagestatus,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .packageid: return "PackageID"
            case .packagename: return "PackageName"
            case .packagestatus: return "PackageStatus"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DescribePackagesFilterName(rawValue: rawValue) ?? DescribePackagesFilterName.sdkUnknown(rawValue)
        }
    }
}

extension DescribePackagesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for describepackagesfilter0 in filters {
                try filtersContainer.encode(describepackagesfilter0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribePackagesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/packages/describe"
    }
}

/// Container for the request parameters to the DescribePackage operation.
public struct DescribePackagesInput: Swift.Equatable {
    /// Only returns packages that match the DescribePackagesFilterList values.
    public var filters: [OpenSearchClientTypes.DescribePackagesFilter]?
    /// An optional parameter that specifies the maximum number of results to return. You can use nextToken to get the next page of results.
    public var maxResults: Swift.Int?
    /// If your initial DescribePackageFilters operation returns a nextToken, you can include the returned nextToken in subsequent DescribePackageFilters operations, which returns results in the next page.
    public var nextToken: Swift.String?

    public init (
        filters: [OpenSearchClientTypes.DescribePackagesFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribePackagesInputBody: Swift.Equatable {
    let filters: [OpenSearchClientTypes.DescribePackagesFilter]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribePackagesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.DescribePackagesFilter?].self, forKey: .filters)
        var filtersDecoded0:[OpenSearchClientTypes.DescribePackagesFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [OpenSearchClientTypes.DescribePackagesFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribePackagesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribePackagesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribePackagesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribePackagesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribePackagesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.packageDetailsList = output.packageDetailsList
        } else {
            self.nextToken = nil
            self.packageDetailsList = nil
        }
    }
}

/// Container for the response returned by the DescribePackages operation.
public struct DescribePackagesOutputResponse: Swift.Equatable {
    /// When nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.
    public var nextToken: Swift.String?
    /// Basic information about a package.
    public var packageDetailsList: [OpenSearchClientTypes.PackageDetails]?

    public init (
        nextToken: Swift.String? = nil,
        packageDetailsList: [OpenSearchClientTypes.PackageDetails]? = nil
    )
    {
        self.nextToken = nextToken
        self.packageDetailsList = packageDetailsList
    }
}

struct DescribePackagesOutputResponseBody: Swift.Equatable {
    let packageDetailsList: [OpenSearchClientTypes.PackageDetails]?
    let nextToken: Swift.String?
}

extension DescribePackagesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case packageDetailsList = "PackageDetailsList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageDetailsListContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.PackageDetails?].self, forKey: .packageDetailsList)
        var packageDetailsListDecoded0:[OpenSearchClientTypes.PackageDetails]? = nil
        if let packageDetailsListContainer = packageDetailsListContainer {
            packageDetailsListDecoded0 = [OpenSearchClientTypes.PackageDetails]()
            for structure0 in packageDetailsListContainer {
                if let structure0 = structure0 {
                    packageDetailsListDecoded0?.append(structure0)
                }
            }
        }
        packageDetailsList = packageDetailsListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeReservedInstanceOfferingsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            if let reservedInstanceOfferingId = reservedInstanceOfferingId {
                let reservedInstanceOfferingIdQueryItem = ClientRuntime.URLQueryItem(name: "offeringId".urlPercentEncoding(), value: Swift.String(reservedInstanceOfferingId).urlPercentEncoding())
                items.append(reservedInstanceOfferingIdQueryItem)
            }
            return items
        }
    }
}

extension DescribeReservedInstanceOfferingsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/opensearch/reservedInstanceOfferings"
    }
}

/// Container for the request parameters to a DescribeReservedInstanceOfferings operation.
public struct DescribeReservedInstanceOfferingsInput: Swift.Equatable {
    /// An optional parameter that specifies the maximum number of results to return. You can use nextToken to get the next page of results.
    public var maxResults: Swift.Int?
    /// If your initial DescribeReservedInstanceOfferings operation returns a nextToken, you can include the returned nextToken in subsequent DescribeReservedInstanceOfferings operations, which returns results in the next page.
    public var nextToken: Swift.String?
    /// The Reserved Instance identifier filter value. Use this parameter to show only the available instance types that match the specified reservation identifier.
    public var reservedInstanceOfferingId: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        reservedInstanceOfferingId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.reservedInstanceOfferingId = reservedInstanceOfferingId
    }
}

struct DescribeReservedInstanceOfferingsInputBody: Swift.Equatable {
}

extension DescribeReservedInstanceOfferingsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeReservedInstanceOfferingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeReservedInstanceOfferingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeReservedInstanceOfferingsOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeReservedInstanceOfferingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeReservedInstanceOfferingsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.reservedInstanceOfferings = output.reservedInstanceOfferings
        } else {
            self.nextToken = nil
            self.reservedInstanceOfferings = nil
        }
    }
}

/// Container for results of a DescribeReservedInstanceOfferings request.
public struct DescribeReservedInstanceOfferingsOutputResponse: Swift.Equatable {
    /// When nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.
    public var nextToken: Swift.String?
    /// List of Reserved Instance offerings.
    public var reservedInstanceOfferings: [OpenSearchClientTypes.ReservedInstanceOffering]?

    public init (
        nextToken: Swift.String? = nil,
        reservedInstanceOfferings: [OpenSearchClientTypes.ReservedInstanceOffering]? = nil
    )
    {
        self.nextToken = nextToken
        self.reservedInstanceOfferings = reservedInstanceOfferings
    }
}

struct DescribeReservedInstanceOfferingsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let reservedInstanceOfferings: [OpenSearchClientTypes.ReservedInstanceOffering]?
}

extension DescribeReservedInstanceOfferingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case reservedInstanceOfferings = "ReservedInstanceOfferings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let reservedInstanceOfferingsContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.ReservedInstanceOffering?].self, forKey: .reservedInstanceOfferings)
        var reservedInstanceOfferingsDecoded0:[OpenSearchClientTypes.ReservedInstanceOffering]? = nil
        if let reservedInstanceOfferingsContainer = reservedInstanceOfferingsContainer {
            reservedInstanceOfferingsDecoded0 = [OpenSearchClientTypes.ReservedInstanceOffering]()
            for structure0 in reservedInstanceOfferingsContainer {
                if let structure0 = structure0 {
                    reservedInstanceOfferingsDecoded0?.append(structure0)
                }
            }
        }
        reservedInstanceOfferings = reservedInstanceOfferingsDecoded0
    }
}

extension DescribeReservedInstancesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            if let reservedInstanceId = reservedInstanceId {
                let reservedInstanceIdQueryItem = ClientRuntime.URLQueryItem(name: "reservationId".urlPercentEncoding(), value: Swift.String(reservedInstanceId).urlPercentEncoding())
                items.append(reservedInstanceIdQueryItem)
            }
            return items
        }
    }
}

extension DescribeReservedInstancesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/opensearch/reservedInstances"
    }
}

/// Container for the request parameters to the DescribeReservedInstances operation.
public struct DescribeReservedInstancesInput: Swift.Equatable {
    /// An optional parameter that specifies the maximum number of results to return. You can use nextToken to get the next page of results.
    public var maxResults: Swift.Int?
    /// If your initial DescribeReservedInstances operation returns a nextToken, you can include the returned nextToken in subsequent DescribeReservedInstances operations, which returns results in the next page.
    public var nextToken: Swift.String?
    /// The reserved instance identifier filter value. Use this parameter to show only the reservation that matches the specified reserved OpenSearch instance ID.
    public var reservedInstanceId: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        reservedInstanceId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.reservedInstanceId = reservedInstanceId
    }
}

struct DescribeReservedInstancesInputBody: Swift.Equatable {
}

extension DescribeReservedInstancesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeReservedInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeReservedInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeReservedInstancesOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeReservedInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeReservedInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.reservedInstances = output.reservedInstances
        } else {
            self.nextToken = nil
            self.reservedInstances = nil
        }
    }
}

/// Container for results from DescribeReservedInstances
public struct DescribeReservedInstancesOutputResponse: Swift.Equatable {
    /// When nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.
    public var nextToken: Swift.String?
    /// List of Reserved Instances in the current Region.
    public var reservedInstances: [OpenSearchClientTypes.ReservedInstance]?

    public init (
        nextToken: Swift.String? = nil,
        reservedInstances: [OpenSearchClientTypes.ReservedInstance]? = nil
    )
    {
        self.nextToken = nextToken
        self.reservedInstances = reservedInstances
    }
}

struct DescribeReservedInstancesOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let reservedInstances: [OpenSearchClientTypes.ReservedInstance]?
}

extension DescribeReservedInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case reservedInstances = "ReservedInstances"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let reservedInstancesContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.ReservedInstance?].self, forKey: .reservedInstances)
        var reservedInstancesDecoded0:[OpenSearchClientTypes.ReservedInstance]? = nil
        if let reservedInstancesContainer = reservedInstancesContainer {
            reservedInstancesDecoded0 = [OpenSearchClientTypes.ReservedInstance]()
            for structure0 in reservedInstancesContainer {
                if let structure0 = structure0 {
                    reservedInstancesDecoded0?.append(structure0)
                }
            }
        }
        reservedInstances = reservedInstancesDecoded0
    }
}

extension DescribeVpcEndpointsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vpcEndpointIds = "VpcEndpointIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let vpcEndpointIds = vpcEndpointIds {
            var vpcEndpointIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vpcEndpointIds)
            for vpcendpointid0 in vpcEndpointIds {
                try vpcEndpointIdsContainer.encode(vpcendpointid0)
            }
        }
    }
}

extension DescribeVpcEndpointsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/opensearch/vpcEndpoints/describe"
    }
}

public struct DescribeVpcEndpointsInput: Swift.Equatable {
    /// The unique identifiers of the endpoints to get information about.
    /// This member is required.
    public var vpcEndpointIds: [Swift.String]?

    public init (
        vpcEndpointIds: [Swift.String]? = nil
    )
    {
        self.vpcEndpointIds = vpcEndpointIds
    }
}

struct DescribeVpcEndpointsInputBody: Swift.Equatable {
    let vpcEndpointIds: [Swift.String]?
}

extension DescribeVpcEndpointsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vpcEndpointIds = "VpcEndpointIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .vpcEndpointIds)
        var vpcEndpointIdsDecoded0:[Swift.String]? = nil
        if let vpcEndpointIdsContainer = vpcEndpointIdsContainer {
            vpcEndpointIdsDecoded0 = [Swift.String]()
            for string0 in vpcEndpointIdsContainer {
                if let string0 = string0 {
                    vpcEndpointIdsDecoded0?.append(string0)
                }
            }
        }
        vpcEndpointIds = vpcEndpointIdsDecoded0
    }
}

extension DescribeVpcEndpointsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeVpcEndpointsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeVpcEndpointsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeVpcEndpointsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeVpcEndpointsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.vpcEndpointErrors = output.vpcEndpointErrors
            self.vpcEndpoints = output.vpcEndpoints
        } else {
            self.vpcEndpointErrors = nil
            self.vpcEndpoints = nil
        }
    }
}

public struct DescribeVpcEndpointsOutputResponse: Swift.Equatable {
    /// Any errors associated with the request.
    /// This member is required.
    public var vpcEndpointErrors: [OpenSearchClientTypes.VpcEndpointError]?
    /// Information about each requested VPC endpoint.
    /// This member is required.
    public var vpcEndpoints: [OpenSearchClientTypes.VpcEndpoint]?

    public init (
        vpcEndpointErrors: [OpenSearchClientTypes.VpcEndpointError]? = nil,
        vpcEndpoints: [OpenSearchClientTypes.VpcEndpoint]? = nil
    )
    {
        self.vpcEndpointErrors = vpcEndpointErrors
        self.vpcEndpoints = vpcEndpoints
    }
}

struct DescribeVpcEndpointsOutputResponseBody: Swift.Equatable {
    let vpcEndpoints: [OpenSearchClientTypes.VpcEndpoint]?
    let vpcEndpointErrors: [OpenSearchClientTypes.VpcEndpointError]?
}

extension DescribeVpcEndpointsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vpcEndpointErrors = "VpcEndpointErrors"
        case vpcEndpoints = "VpcEndpoints"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointsContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.VpcEndpoint?].self, forKey: .vpcEndpoints)
        var vpcEndpointsDecoded0:[OpenSearchClientTypes.VpcEndpoint]? = nil
        if let vpcEndpointsContainer = vpcEndpointsContainer {
            vpcEndpointsDecoded0 = [OpenSearchClientTypes.VpcEndpoint]()
            for structure0 in vpcEndpointsContainer {
                if let structure0 = structure0 {
                    vpcEndpointsDecoded0?.append(structure0)
                }
            }
        }
        vpcEndpoints = vpcEndpointsDecoded0
        let vpcEndpointErrorsContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.VpcEndpointError?].self, forKey: .vpcEndpointErrors)
        var vpcEndpointErrorsDecoded0:[OpenSearchClientTypes.VpcEndpointError]? = nil
        if let vpcEndpointErrorsContainer = vpcEndpointErrorsContainer {
            vpcEndpointErrorsDecoded0 = [OpenSearchClientTypes.VpcEndpointError]()
            for structure0 in vpcEndpointErrorsContainer {
                if let structure0 = structure0 {
                    vpcEndpointErrorsDecoded0?.append(structure0)
                }
            }
        }
        vpcEndpointErrors = vpcEndpointErrorsDecoded0
    }
}

extension DisabledOperationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DisabledOperationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An error occured because the client wanted to access an unsupported operation.
public struct DisabledOperationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DisabledOperationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DisabledOperationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DissociatePackageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let packageID = packageID else {
            return nil
        }
        guard let domainName = domainName else {
            return nil
        }
        return "/2021-01-01/packages/dissociate/\(packageID.urlPercentEncoding())/\(domainName.urlPercentEncoding())"
    }
}

/// Container for the request parameters to the DissociatePackage operation.
public struct DissociatePackageInput: Swift.Equatable {
    /// Name of the domain to dissociate the package from.
    /// This member is required.
    public var domainName: Swift.String?
    /// Internal ID of the package to dissociate from the domain. Use ListPackagesForDomain to find this value.
    /// This member is required.
    public var packageID: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        packageID: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.packageID = packageID
    }
}

struct DissociatePackageInputBody: Swift.Equatable {
}

extension DissociatePackageInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DissociatePackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DissociatePackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DissociatePackageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case conflictException(ConflictException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DissociatePackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DissociatePackageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainPackageDetails = output.domainPackageDetails
        } else {
            self.domainPackageDetails = nil
        }
    }
}

/// Container for the response returned by an DissociatePackage operation.
public struct DissociatePackageOutputResponse: Swift.Equatable {
    /// Information about a package that has been dissociated from the domain.
    public var domainPackageDetails: OpenSearchClientTypes.DomainPackageDetails?

    public init (
        domainPackageDetails: OpenSearchClientTypes.DomainPackageDetails? = nil
    )
    {
        self.domainPackageDetails = domainPackageDetails
    }
}

struct DissociatePackageOutputResponseBody: Swift.Equatable {
    let domainPackageDetails: OpenSearchClientTypes.DomainPackageDetails?
}

extension DissociatePackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainPackageDetails = "DomainPackageDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainPackageDetailsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainPackageDetails.self, forKey: .domainPackageDetails)
        domainPackageDetails = domainPackageDetailsDecoded
    }
}

extension OpenSearchClientTypes.DomainConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case changeProgressDetails = "ChangeProgressDetails"
        case clusterConfig = "ClusterConfig"
        case cognitoOptions = "CognitoOptions"
        case domainEndpointOptions = "DomainEndpointOptions"
        case ebsOptions = "EBSOptions"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case engineVersion = "EngineVersion"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case snapshotOptions = "SnapshotOptions"
        case vpcOptions = "VPCOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPolicies = self.accessPolicies {
            try encodeContainer.encode(accessPolicies, forKey: .accessPolicies)
        }
        if let advancedOptions = self.advancedOptions {
            try encodeContainer.encode(advancedOptions, forKey: .advancedOptions)
        }
        if let advancedSecurityOptions = self.advancedSecurityOptions {
            try encodeContainer.encode(advancedSecurityOptions, forKey: .advancedSecurityOptions)
        }
        if let autoTuneOptions = self.autoTuneOptions {
            try encodeContainer.encode(autoTuneOptions, forKey: .autoTuneOptions)
        }
        if let changeProgressDetails = self.changeProgressDetails {
            try encodeContainer.encode(changeProgressDetails, forKey: .changeProgressDetails)
        }
        if let clusterConfig = self.clusterConfig {
            try encodeContainer.encode(clusterConfig, forKey: .clusterConfig)
        }
        if let cognitoOptions = self.cognitoOptions {
            try encodeContainer.encode(cognitoOptions, forKey: .cognitoOptions)
        }
        if let domainEndpointOptions = self.domainEndpointOptions {
            try encodeContainer.encode(domainEndpointOptions, forKey: .domainEndpointOptions)
        }
        if let ebsOptions = self.ebsOptions {
            try encodeContainer.encode(ebsOptions, forKey: .ebsOptions)
        }
        if let encryptionAtRestOptions = self.encryptionAtRestOptions {
            try encodeContainer.encode(encryptionAtRestOptions, forKey: .encryptionAtRestOptions)
        }
        if let engineVersion = self.engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let logPublishingOptions = self.logPublishingOptions {
            try encodeContainer.encode(logPublishingOptions, forKey: .logPublishingOptions)
        }
        if let nodeToNodeEncryptionOptions = self.nodeToNodeEncryptionOptions {
            try encodeContainer.encode(nodeToNodeEncryptionOptions, forKey: .nodeToNodeEncryptionOptions)
        }
        if let snapshotOptions = self.snapshotOptions {
            try encodeContainer.encode(snapshotOptions, forKey: .snapshotOptions)
        }
        if let vpcOptions = self.vpcOptions {
            try encodeContainer.encode(vpcOptions, forKey: .vpcOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let engineVersionDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.VersionStatus.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let clusterConfigDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ClusterConfigStatus.self, forKey: .clusterConfig)
        clusterConfig = clusterConfigDecoded
        let ebsOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.EBSOptionsStatus.self, forKey: .ebsOptions)
        ebsOptions = ebsOptionsDecoded
        let accessPoliciesDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AccessPoliciesStatus.self, forKey: .accessPolicies)
        accessPolicies = accessPoliciesDecoded
        let snapshotOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.SnapshotOptionsStatus.self, forKey: .snapshotOptions)
        snapshotOptions = snapshotOptionsDecoded
        let vpcOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.VPCDerivedInfoStatus.self, forKey: .vpcOptions)
        vpcOptions = vpcOptionsDecoded
        let cognitoOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.CognitoOptionsStatus.self, forKey: .cognitoOptions)
        cognitoOptions = cognitoOptionsDecoded
        let encryptionAtRestOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.EncryptionAtRestOptionsStatus.self, forKey: .encryptionAtRestOptions)
        encryptionAtRestOptions = encryptionAtRestOptionsDecoded
        let nodeToNodeEncryptionOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.NodeToNodeEncryptionOptionsStatus.self, forKey: .nodeToNodeEncryptionOptions)
        nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptionsDecoded
        let advancedOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AdvancedOptionsStatus.self, forKey: .advancedOptions)
        advancedOptions = advancedOptionsDecoded
        let logPublishingOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.LogPublishingOptionsStatus.self, forKey: .logPublishingOptions)
        logPublishingOptions = logPublishingOptionsDecoded
        let domainEndpointOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainEndpointOptionsStatus.self, forKey: .domainEndpointOptions)
        domainEndpointOptions = domainEndpointOptionsDecoded
        let advancedSecurityOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AdvancedSecurityOptionsStatus.self, forKey: .advancedSecurityOptions)
        advancedSecurityOptions = advancedSecurityOptionsDecoded
        let autoTuneOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AutoTuneOptionsStatus.self, forKey: .autoTuneOptions)
        autoTuneOptions = autoTuneOptionsDecoded
        let changeProgressDetailsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ChangeProgressDetails.self, forKey: .changeProgressDetails)
        changeProgressDetails = changeProgressDetailsDecoded
    }
}

extension OpenSearchClientTypes {
    /// Container for the configuration of an OpenSearch Service domain.
    public struct DomainConfig: Swift.Equatable {
        /// Specifies the access policies for the domain.
        public var accessPolicies: OpenSearchClientTypes.AccessPoliciesStatus?
        /// Key-value pairs to specify advanced configuration options. For more information, see [Advanced options](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options).
        public var advancedOptions: OpenSearchClientTypes.AdvancedOptionsStatus?
        /// Container for fine-grained access control settings for the domain.
        public var advancedSecurityOptions: OpenSearchClientTypes.AdvancedSecurityOptionsStatus?
        /// Container for Auto-Tune settings for the domain.
        public var autoTuneOptions: OpenSearchClientTypes.AutoTuneOptionsStatus?
        /// Container for information about the progress of an existing configuration change.
        public var changeProgressDetails: OpenSearchClientTypes.ChangeProgressDetails?
        /// Container for the cluster configuration of a the domain.
        public var clusterConfig: OpenSearchClientTypes.ClusterConfigStatus?
        /// Container for Amazon Cognito options for the domain.
        public var cognitoOptions: OpenSearchClientTypes.CognitoOptionsStatus?
        /// Additional options for the domain endpoint, such as whether to require HTTPS for all traffic.
        public var domainEndpointOptions: OpenSearchClientTypes.DomainEndpointOptionsStatus?
        /// Container for EBS options configured for an OpenSearch Service domain.
        public var ebsOptions: OpenSearchClientTypes.EBSOptionsStatus?
        /// Key-value pairs to enable encryption at rest.
        public var encryptionAtRestOptions: OpenSearchClientTypes.EncryptionAtRestOptionsStatus?
        /// The OpenSearch or Elasticsearch version that the domain is running.
        public var engineVersion: OpenSearchClientTypes.VersionStatus?
        /// Key-value pairs to configure slow log publishing.
        public var logPublishingOptions: OpenSearchClientTypes.LogPublishingOptionsStatus?
        /// Whether node-to-node encryption is enabled or disabled.
        public var nodeToNodeEncryptionOptions: OpenSearchClientTypes.NodeToNodeEncryptionOptionsStatus?
        /// DEPRECATED. Container for parameters required to configure automated snapshots of domain indexes.
        public var snapshotOptions: OpenSearchClientTypes.SnapshotOptionsStatus?
        /// The current VPC options for the domain and the status of any updates to their configuration.
        public var vpcOptions: OpenSearchClientTypes.VPCDerivedInfoStatus?

        public init (
            accessPolicies: OpenSearchClientTypes.AccessPoliciesStatus? = nil,
            advancedOptions: OpenSearchClientTypes.AdvancedOptionsStatus? = nil,
            advancedSecurityOptions: OpenSearchClientTypes.AdvancedSecurityOptionsStatus? = nil,
            autoTuneOptions: OpenSearchClientTypes.AutoTuneOptionsStatus? = nil,
            changeProgressDetails: OpenSearchClientTypes.ChangeProgressDetails? = nil,
            clusterConfig: OpenSearchClientTypes.ClusterConfigStatus? = nil,
            cognitoOptions: OpenSearchClientTypes.CognitoOptionsStatus? = nil,
            domainEndpointOptions: OpenSearchClientTypes.DomainEndpointOptionsStatus? = nil,
            ebsOptions: OpenSearchClientTypes.EBSOptionsStatus? = nil,
            encryptionAtRestOptions: OpenSearchClientTypes.EncryptionAtRestOptionsStatus? = nil,
            engineVersion: OpenSearchClientTypes.VersionStatus? = nil,
            logPublishingOptions: OpenSearchClientTypes.LogPublishingOptionsStatus? = nil,
            nodeToNodeEncryptionOptions: OpenSearchClientTypes.NodeToNodeEncryptionOptionsStatus? = nil,
            snapshotOptions: OpenSearchClientTypes.SnapshotOptionsStatus? = nil,
            vpcOptions: OpenSearchClientTypes.VPCDerivedInfoStatus? = nil
        )
        {
            self.accessPolicies = accessPolicies
            self.advancedOptions = advancedOptions
            self.advancedSecurityOptions = advancedSecurityOptions
            self.autoTuneOptions = autoTuneOptions
            self.changeProgressDetails = changeProgressDetails
            self.clusterConfig = clusterConfig
            self.cognitoOptions = cognitoOptions
            self.domainEndpointOptions = domainEndpointOptions
            self.ebsOptions = ebsOptions
            self.encryptionAtRestOptions = encryptionAtRestOptions
            self.engineVersion = engineVersion
            self.logPublishingOptions = logPublishingOptions
            self.nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions
            self.snapshotOptions = snapshotOptions
            self.vpcOptions = vpcOptions
        }
    }

}

extension OpenSearchClientTypes.DomainEndpointOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customEndpoint = "CustomEndpoint"
        case customEndpointCertificateArn = "CustomEndpointCertificateArn"
        case customEndpointEnabled = "CustomEndpointEnabled"
        case enforceHTTPS = "EnforceHTTPS"
        case tlsSecurityPolicy = "TLSSecurityPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customEndpoint = self.customEndpoint {
            try encodeContainer.encode(customEndpoint, forKey: .customEndpoint)
        }
        if let customEndpointCertificateArn = self.customEndpointCertificateArn {
            try encodeContainer.encode(customEndpointCertificateArn, forKey: .customEndpointCertificateArn)
        }
        if let customEndpointEnabled = self.customEndpointEnabled {
            try encodeContainer.encode(customEndpointEnabled, forKey: .customEndpointEnabled)
        }
        if let enforceHTTPS = self.enforceHTTPS {
            try encodeContainer.encode(enforceHTTPS, forKey: .enforceHTTPS)
        }
        if let tlsSecurityPolicy = self.tlsSecurityPolicy {
            try encodeContainer.encode(tlsSecurityPolicy.rawValue, forKey: .tlsSecurityPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enforceHTTPSDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enforceHTTPS)
        enforceHTTPS = enforceHTTPSDecoded
        let tlsSecurityPolicyDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.TLSSecurityPolicy.self, forKey: .tlsSecurityPolicy)
        tlsSecurityPolicy = tlsSecurityPolicyDecoded
        let customEndpointEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .customEndpointEnabled)
        customEndpointEnabled = customEndpointEnabledDecoded
        let customEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customEndpoint)
        customEndpoint = customEndpointDecoded
        let customEndpointCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customEndpointCertificateArn)
        customEndpointCertificateArn = customEndpointCertificateArnDecoded
    }
}

extension OpenSearchClientTypes {
    /// Options to configure a custom endpoint for an OpenSearch Service domain.
    public struct DomainEndpointOptions: Swift.Equatable {
        /// The fully qualified URL for the custom endpoint.
        public var customEndpoint: Swift.String?
        /// The ARN for your security certificate, managed in Amazon Web Services Certificate Manager (ACM).
        public var customEndpointCertificateArn: Swift.String?
        /// Whether to enable a custom endpoint for the domain.
        public var customEndpointEnabled: Swift.Bool?
        /// True to require that all traffic to the domain arrive over HTTPS.
        public var enforceHTTPS: Swift.Bool?
        /// Specify the TLS security policy to apply to the HTTPS endpoint of the domain. Can be one of the following values:
        ///
        /// * Policy-Min-TLS-1-0-2019-07: TLS security policy which supports TLS version 1.0 and higher.
        ///
        /// * Policy-Min-TLS-1-2-2019-07: TLS security policy which supports only TLS version 1.2
        public var tlsSecurityPolicy: OpenSearchClientTypes.TLSSecurityPolicy?

        public init (
            customEndpoint: Swift.String? = nil,
            customEndpointCertificateArn: Swift.String? = nil,
            customEndpointEnabled: Swift.Bool? = nil,
            enforceHTTPS: Swift.Bool? = nil,
            tlsSecurityPolicy: OpenSearchClientTypes.TLSSecurityPolicy? = nil
        )
        {
            self.customEndpoint = customEndpoint
            self.customEndpointCertificateArn = customEndpointCertificateArn
            self.customEndpointEnabled = customEndpointEnabled
            self.enforceHTTPS = enforceHTTPS
            self.tlsSecurityPolicy = tlsSecurityPolicy
        }
    }

}

extension OpenSearchClientTypes.DomainEndpointOptionsStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainEndpointOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension OpenSearchClientTypes {
    /// The configured endpoint options for a domain and their current status.
    public struct DomainEndpointOptionsStatus: Swift.Equatable {
        /// Options to configure the endpoint for a domain.
        /// This member is required.
        public var options: OpenSearchClientTypes.DomainEndpointOptions?
        /// The status of the endpoint options for a domain.
        /// This member is required.
        public var status: OpenSearchClientTypes.OptionStatus?

        public init (
            options: OpenSearchClientTypes.DomainEndpointOptions? = nil,
            status: OpenSearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension OpenSearchClientTypes.DomainInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
        case engineType = "EngineType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let engineType = self.engineType {
            try encodeContainer.encode(engineType.rawValue, forKey: .engineType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let engineTypeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.EngineType.self, forKey: .engineType)
        engineType = engineTypeDecoded
    }
}

extension OpenSearchClientTypes {
    /// Information about an OpenSearch Service domain.
    public struct DomainInfo: Swift.Equatable {
        /// Name of the domain.
        public var domainName: Swift.String?
        /// The type of search engine that the domain is running.OpenSearch for an OpenSearch engine, or Elasticsearch for a legacy Elasticsearch OSS engine.
        public var engineType: OpenSearchClientTypes.EngineType?

        public init (
            domainName: Swift.String? = nil,
            engineType: OpenSearchClientTypes.EngineType? = nil
        )
        {
            self.domainName = domainName
            self.engineType = engineType
        }
    }

}

extension OpenSearchClientTypes.DomainInformationContainer: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsDomainInformation = "AWSDomainInformation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsDomainInformation = self.awsDomainInformation {
            try encodeContainer.encode(awsDomainInformation, forKey: .awsDomainInformation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let awsDomainInformationDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AWSDomainInformation.self, forKey: .awsDomainInformation)
        awsDomainInformation = awsDomainInformationDecoded
    }
}

extension OpenSearchClientTypes {
    /// Container for information about an OpenSearch Service domain.
    public struct DomainInformationContainer: Swift.Equatable {
        /// Information about an Amazon OpenSearch Service domain.
        public var awsDomainInformation: OpenSearchClientTypes.AWSDomainInformation?

        public init (
            awsDomainInformation: OpenSearchClientTypes.AWSDomainInformation? = nil
        )
        {
            self.awsDomainInformation = awsDomainInformation
        }
    }

}

extension OpenSearchClientTypes.DomainPackageDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
        case domainPackageStatus = "DomainPackageStatus"
        case errorDetails = "ErrorDetails"
        case lastUpdated = "LastUpdated"
        case packageID = "PackageID"
        case packageName = "PackageName"
        case packageType = "PackageType"
        case packageVersion = "PackageVersion"
        case referencePath = "ReferencePath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let domainPackageStatus = self.domainPackageStatus {
            try encodeContainer.encode(domainPackageStatus.rawValue, forKey: .domainPackageStatus)
        }
        if let errorDetails = self.errorDetails {
            try encodeContainer.encode(errorDetails, forKey: .errorDetails)
        }
        if let lastUpdated = self.lastUpdated {
            try encodeContainer.encodeTimestamp(lastUpdated, format: .epochSeconds, forKey: .lastUpdated)
        }
        if let packageID = self.packageID {
            try encodeContainer.encode(packageID, forKey: .packageID)
        }
        if let packageName = self.packageName {
            try encodeContainer.encode(packageName, forKey: .packageName)
        }
        if let packageType = self.packageType {
            try encodeContainer.encode(packageType.rawValue, forKey: .packageType)
        }
        if let packageVersion = self.packageVersion {
            try encodeContainer.encode(packageVersion, forKey: .packageVersion)
        }
        if let referencePath = self.referencePath {
            try encodeContainer.encode(referencePath, forKey: .referencePath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageID)
        packageID = packageIDDecoded
        let packageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageName)
        packageName = packageNameDecoded
        let packageTypeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.PackageType.self, forKey: .packageType)
        packageType = packageTypeDecoded
        let lastUpdatedDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let domainPackageStatusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainPackageStatus.self, forKey: .domainPackageStatus)
        domainPackageStatus = domainPackageStatusDecoded
        let packageVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageVersion)
        packageVersion = packageVersionDecoded
        let referencePathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .referencePath)
        referencePath = referencePathDecoded
        let errorDetailsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ErrorDetails.self, forKey: .errorDetails)
        errorDetails = errorDetailsDecoded
    }
}

extension OpenSearchClientTypes {
    /// Information about a package that is associated with a domain. For more information, see [Custom packages for Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/custom-packages.html).
    public struct DomainPackageDetails: Swift.Equatable {
        /// Name of the domain that the package is associated with.
        public var domainName: Swift.String?
        /// State of the association.
        public var domainPackageStatus: OpenSearchClientTypes.DomainPackageStatus?
        /// Additional information if the package is in an error state. Null otherwise.
        public var errorDetails: OpenSearchClientTypes.ErrorDetails?
        /// Timestamp of the most recent update to the package association status.
        public var lastUpdated: ClientRuntime.Date?
        /// Internal ID of the package.
        public var packageID: Swift.String?
        /// User-specified name of the package.
        public var packageName: Swift.String?
        /// The type of package.
        public var packageType: OpenSearchClientTypes.PackageType?
        /// The current version of the package.
        public var packageVersion: Swift.String?
        /// Denotes the location of the package on the OpenSearch Service cluster nodes. It's the same as synonym_path for dictionary files.
        public var referencePath: Swift.String?

        public init (
            domainName: Swift.String? = nil,
            domainPackageStatus: OpenSearchClientTypes.DomainPackageStatus? = nil,
            errorDetails: OpenSearchClientTypes.ErrorDetails? = nil,
            lastUpdated: ClientRuntime.Date? = nil,
            packageID: Swift.String? = nil,
            packageName: Swift.String? = nil,
            packageType: OpenSearchClientTypes.PackageType? = nil,
            packageVersion: Swift.String? = nil,
            referencePath: Swift.String? = nil
        )
        {
            self.domainName = domainName
            self.domainPackageStatus = domainPackageStatus
            self.errorDetails = errorDetails
            self.lastUpdated = lastUpdated
            self.packageID = packageID
            self.packageName = packageName
            self.packageType = packageType
            self.packageVersion = packageVersion
            self.referencePath = referencePath
        }
    }

}

extension OpenSearchClientTypes {
    public enum DomainPackageStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case associating
        case associationFailed
        case dissociating
        case dissociationFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [DomainPackageStatus] {
            return [
                .active,
                .associating,
                .associationFailed,
                .dissociating,
                .dissociationFailed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .associating: return "ASSOCIATING"
            case .associationFailed: return "ASSOCIATION_FAILED"
            case .dissociating: return "DISSOCIATING"
            case .dissociationFailed: return "DISSOCIATION_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DomainPackageStatus(rawValue: rawValue) ?? DomainPackageStatus.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes.DomainStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case changeProgressDetails = "ChangeProgressDetails"
        case clusterConfig = "ClusterConfig"
        case cognitoOptions = "CognitoOptions"
        case created = "Created"
        case deleted = "Deleted"
        case domainEndpointOptions = "DomainEndpointOptions"
        case domainId = "DomainId"
        case domainName = "DomainName"
        case ebsOptions = "EBSOptions"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case endpoint = "Endpoint"
        case endpoints = "Endpoints"
        case engineVersion = "EngineVersion"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case processing = "Processing"
        case serviceSoftwareOptions = "ServiceSoftwareOptions"
        case snapshotOptions = "SnapshotOptions"
        case upgradeProcessing = "UpgradeProcessing"
        case vpcOptions = "VPCOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let accessPolicies = self.accessPolicies {
            try encodeContainer.encode(accessPolicies, forKey: .accessPolicies)
        }
        if let advancedOptions = advancedOptions {
            var advancedOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .advancedOptions)
            for (dictKey0, advancedOptions0) in advancedOptions {
                try advancedOptionsContainer.encode(advancedOptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let advancedSecurityOptions = self.advancedSecurityOptions {
            try encodeContainer.encode(advancedSecurityOptions, forKey: .advancedSecurityOptions)
        }
        if let autoTuneOptions = self.autoTuneOptions {
            try encodeContainer.encode(autoTuneOptions, forKey: .autoTuneOptions)
        }
        if let changeProgressDetails = self.changeProgressDetails {
            try encodeContainer.encode(changeProgressDetails, forKey: .changeProgressDetails)
        }
        if let clusterConfig = self.clusterConfig {
            try encodeContainer.encode(clusterConfig, forKey: .clusterConfig)
        }
        if let cognitoOptions = self.cognitoOptions {
            try encodeContainer.encode(cognitoOptions, forKey: .cognitoOptions)
        }
        if let created = self.created {
            try encodeContainer.encode(created, forKey: .created)
        }
        if let deleted = self.deleted {
            try encodeContainer.encode(deleted, forKey: .deleted)
        }
        if let domainEndpointOptions = self.domainEndpointOptions {
            try encodeContainer.encode(domainEndpointOptions, forKey: .domainEndpointOptions)
        }
        if let domainId = self.domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let ebsOptions = self.ebsOptions {
            try encodeContainer.encode(ebsOptions, forKey: .ebsOptions)
        }
        if let encryptionAtRestOptions = self.encryptionAtRestOptions {
            try encodeContainer.encode(encryptionAtRestOptions, forKey: .encryptionAtRestOptions)
        }
        if let endpoint = self.endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let endpoints = endpoints {
            var endpointsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .endpoints)
            for (dictKey0, endpointsMap0) in endpoints {
                try endpointsContainer.encode(endpointsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let engineVersion = self.engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let logPublishingOptions = logPublishingOptions {
            var logPublishingOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .logPublishingOptions)
            for (dictKey0, logPublishingOptions0) in logPublishingOptions {
                try logPublishingOptionsContainer.encode(logPublishingOptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let nodeToNodeEncryptionOptions = self.nodeToNodeEncryptionOptions {
            try encodeContainer.encode(nodeToNodeEncryptionOptions, forKey: .nodeToNodeEncryptionOptions)
        }
        if let processing = self.processing {
            try encodeContainer.encode(processing, forKey: .processing)
        }
        if let serviceSoftwareOptions = self.serviceSoftwareOptions {
            try encodeContainer.encode(serviceSoftwareOptions, forKey: .serviceSoftwareOptions)
        }
        if let snapshotOptions = self.snapshotOptions {
            try encodeContainer.encode(snapshotOptions, forKey: .snapshotOptions)
        }
        if let upgradeProcessing = self.upgradeProcessing {
            try encodeContainer.encode(upgradeProcessing, forKey: .upgradeProcessing)
        }
        if let vpcOptions = self.vpcOptions {
            try encodeContainer.encode(vpcOptions, forKey: .vpcOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createdDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .created)
        created = createdDecoded
        let deletedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleted)
        deleted = deletedDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let endpointsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .endpoints)
        var endpointsDecoded0: [Swift.String:Swift.String]? = nil
        if let endpointsContainer = endpointsContainer {
            endpointsDecoded0 = [Swift.String:Swift.String]()
            for (key0, serviceurl0) in endpointsContainer {
                if let serviceurl0 = serviceurl0 {
                    endpointsDecoded0?[key0] = serviceurl0
                }
            }
        }
        endpoints = endpointsDecoded0
        let processingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .processing)
        processing = processingDecoded
        let upgradeProcessingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .upgradeProcessing)
        upgradeProcessing = upgradeProcessingDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let clusterConfigDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ClusterConfig.self, forKey: .clusterConfig)
        clusterConfig = clusterConfigDecoded
        let ebsOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.EBSOptions.self, forKey: .ebsOptions)
        ebsOptions = ebsOptionsDecoded
        let accessPoliciesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPolicies)
        accessPolicies = accessPoliciesDecoded
        let snapshotOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.SnapshotOptions.self, forKey: .snapshotOptions)
        snapshotOptions = snapshotOptionsDecoded
        let vpcOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.VPCDerivedInfo.self, forKey: .vpcOptions)
        vpcOptions = vpcOptionsDecoded
        let cognitoOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.CognitoOptions.self, forKey: .cognitoOptions)
        cognitoOptions = cognitoOptionsDecoded
        let encryptionAtRestOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.EncryptionAtRestOptions.self, forKey: .encryptionAtRestOptions)
        encryptionAtRestOptions = encryptionAtRestOptionsDecoded
        let nodeToNodeEncryptionOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.NodeToNodeEncryptionOptions.self, forKey: .nodeToNodeEncryptionOptions)
        nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptionsDecoded
        let advancedOptionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .advancedOptions)
        var advancedOptionsDecoded0: [Swift.String:Swift.String]? = nil
        if let advancedOptionsContainer = advancedOptionsContainer {
            advancedOptionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in advancedOptionsContainer {
                if let string0 = string0 {
                    advancedOptionsDecoded0?[key0] = string0
                }
            }
        }
        advancedOptions = advancedOptionsDecoded0
        let logPublishingOptionsContainer = try containerValues.decodeIfPresent([Swift.String: OpenSearchClientTypes.LogPublishingOption?].self, forKey: .logPublishingOptions)
        var logPublishingOptionsDecoded0: [Swift.String:OpenSearchClientTypes.LogPublishingOption]? = nil
        if let logPublishingOptionsContainer = logPublishingOptionsContainer {
            logPublishingOptionsDecoded0 = [Swift.String:OpenSearchClientTypes.LogPublishingOption]()
            for (key0, logpublishingoption0) in logPublishingOptionsContainer {
                if let logpublishingoption0 = logpublishingoption0 {
                    logPublishingOptionsDecoded0?[key0] = logpublishingoption0
                }
            }
        }
        logPublishingOptions = logPublishingOptionsDecoded0
        let serviceSoftwareOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ServiceSoftwareOptions.self, forKey: .serviceSoftwareOptions)
        serviceSoftwareOptions = serviceSoftwareOptionsDecoded
        let domainEndpointOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainEndpointOptions.self, forKey: .domainEndpointOptions)
        domainEndpointOptions = domainEndpointOptionsDecoded
        let advancedSecurityOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AdvancedSecurityOptions.self, forKey: .advancedSecurityOptions)
        advancedSecurityOptions = advancedSecurityOptionsDecoded
        let autoTuneOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AutoTuneOptionsOutput.self, forKey: .autoTuneOptions)
        autoTuneOptions = autoTuneOptionsDecoded
        let changeProgressDetailsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ChangeProgressDetails.self, forKey: .changeProgressDetails)
        changeProgressDetails = changeProgressDetailsDecoded
    }
}

extension OpenSearchClientTypes {
    /// The current status of an OpenSearch Service domain.
    public struct DomainStatus: Swift.Equatable {
        /// Identity and Access Management (IAM) policy document specifying the access policies for the domain.
        public var accessPolicies: Swift.String?
        /// Key-value pairs that specify advanced configuration options.
        public var advancedOptions: [Swift.String:Swift.String]?
        /// Settings for fine-grained access control.
        public var advancedSecurityOptions: OpenSearchClientTypes.AdvancedSecurityOptions?
        /// The Amazon Resource Name (ARN) of the domain. For more information, see [IAM identifiers ](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html) in the AWS Identity and Access Management User Guide.
        /// This member is required.
        public var arn: Swift.String?
        /// Auto-Tune settings for the domain.
        public var autoTuneOptions: OpenSearchClientTypes.AutoTuneOptionsOutput?
        /// Information about a configuration change happening on the domain.
        public var changeProgressDetails: OpenSearchClientTypes.ChangeProgressDetails?
        /// Container for the cluster configuration of the domain.
        /// This member is required.
        public var clusterConfig: OpenSearchClientTypes.ClusterConfig?
        /// Key-value pairs to configure Amazon Cognito authentication for OpenSearch Dashboards.
        public var cognitoOptions: OpenSearchClientTypes.CognitoOptions?
        /// Creation status of an OpenSearch Service domain. True if domain creation is complete. False if domain creation is still in progress.
        public var created: Swift.Bool?
        /// Deletion status of an OpenSearch Service domain. True if domain deletion is complete. False if domain deletion is still in progress. Once deletion is complete, the status of the domain is no longer returned.
        public var deleted: Swift.Bool?
        /// Additional options for the domain endpoint, such as whether to require HTTPS for all traffic.
        public var domainEndpointOptions: OpenSearchClientTypes.DomainEndpointOptions?
        /// Unique identifier for the domain.
        /// This member is required.
        public var domainId: Swift.String?
        /// Name of the domain. Domain names are unique across all domains owned by the same account within an Amazon Web Services Region.
        /// This member is required.
        public var domainName: Swift.String?
        /// Container for EBS-based storage settings for the domain.
        public var ebsOptions: OpenSearchClientTypes.EBSOptions?
        /// Encryption at rest settings for the domain.
        public var encryptionAtRestOptions: OpenSearchClientTypes.EncryptionAtRestOptions?
        /// Domain-specific endpoint used to submit index, search, and data upload requests to the domain.
        public var endpoint: Swift.String?
        /// The key-value pair that exists if the OpenSearch Service domain uses VPC endpoints.. Example key, value: 'vpc','vpc-endpoint-h2dsd34efgyghrtguk5gt6j2foh4.us-east-1.es.amazonaws.com'.
        public var endpoints: [Swift.String:Swift.String]?
        /// Version of OpenSearch or Elasticsearch that the domain is running, in the format Elasticsearch_X.Y or OpenSearch_X.Y.
        public var engineVersion: Swift.String?
        /// Log publishing options for the domain.
        public var logPublishingOptions: [Swift.String:OpenSearchClientTypes.LogPublishingOption]?
        /// Whether node-to-node encryption is enabled or disabled.
        public var nodeToNodeEncryptionOptions: OpenSearchClientTypes.NodeToNodeEncryptionOptions?
        /// The status of the domain configuration. True if OpenSearch Service is processing configuration changes. False if the configuration is active.
        public var processing: Swift.Bool?
        /// The current status of the domain's service software.
        public var serviceSoftwareOptions: OpenSearchClientTypes.ServiceSoftwareOptions?
        /// DEPRECATED. Container for parameters required to configure automated snapshots of domain indexes.
        public var snapshotOptions: OpenSearchClientTypes.SnapshotOptions?
        /// The status of a domain version upgrade to a new version of OpenSearch or Elasticsearch. True if OpenSearch Service is in the process of a version upgrade. False if the configuration is active.
        public var upgradeProcessing: Swift.Bool?
        /// The VPC configuration for the domain.
        public var vpcOptions: OpenSearchClientTypes.VPCDerivedInfo?

        public init (
            accessPolicies: Swift.String? = nil,
            advancedOptions: [Swift.String:Swift.String]? = nil,
            advancedSecurityOptions: OpenSearchClientTypes.AdvancedSecurityOptions? = nil,
            arn: Swift.String? = nil,
            autoTuneOptions: OpenSearchClientTypes.AutoTuneOptionsOutput? = nil,
            changeProgressDetails: OpenSearchClientTypes.ChangeProgressDetails? = nil,
            clusterConfig: OpenSearchClientTypes.ClusterConfig? = nil,
            cognitoOptions: OpenSearchClientTypes.CognitoOptions? = nil,
            created: Swift.Bool? = nil,
            deleted: Swift.Bool? = nil,
            domainEndpointOptions: OpenSearchClientTypes.DomainEndpointOptions? = nil,
            domainId: Swift.String? = nil,
            domainName: Swift.String? = nil,
            ebsOptions: OpenSearchClientTypes.EBSOptions? = nil,
            encryptionAtRestOptions: OpenSearchClientTypes.EncryptionAtRestOptions? = nil,
            endpoint: Swift.String? = nil,
            endpoints: [Swift.String:Swift.String]? = nil,
            engineVersion: Swift.String? = nil,
            logPublishingOptions: [Swift.String:OpenSearchClientTypes.LogPublishingOption]? = nil,
            nodeToNodeEncryptionOptions: OpenSearchClientTypes.NodeToNodeEncryptionOptions? = nil,
            processing: Swift.Bool? = nil,
            serviceSoftwareOptions: OpenSearchClientTypes.ServiceSoftwareOptions? = nil,
            snapshotOptions: OpenSearchClientTypes.SnapshotOptions? = nil,
            upgradeProcessing: Swift.Bool? = nil,
            vpcOptions: OpenSearchClientTypes.VPCDerivedInfo? = nil
        )
        {
            self.accessPolicies = accessPolicies
            self.advancedOptions = advancedOptions
            self.advancedSecurityOptions = advancedSecurityOptions
            self.arn = arn
            self.autoTuneOptions = autoTuneOptions
            self.changeProgressDetails = changeProgressDetails
            self.clusterConfig = clusterConfig
            self.cognitoOptions = cognitoOptions
            self.created = created
            self.deleted = deleted
            self.domainEndpointOptions = domainEndpointOptions
            self.domainId = domainId
            self.domainName = domainName
            self.ebsOptions = ebsOptions
            self.encryptionAtRestOptions = encryptionAtRestOptions
            self.endpoint = endpoint
            self.endpoints = endpoints
            self.engineVersion = engineVersion
            self.logPublishingOptions = logPublishingOptions
            self.nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions
            self.processing = processing
            self.serviceSoftwareOptions = serviceSoftwareOptions
            self.snapshotOptions = snapshotOptions
            self.upgradeProcessing = upgradeProcessing
            self.vpcOptions = vpcOptions
        }
    }

}

extension OpenSearchClientTypes {
    public enum DryRunMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case basic
        case verbose
        case sdkUnknown(Swift.String)

        public static var allCases: [DryRunMode] {
            return [
                .basic,
                .verbose,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .basic: return "Basic"
            case .verbose: return "Verbose"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DryRunMode(rawValue: rawValue) ?? DryRunMode.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes.DryRunProgressStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate = "CreationDate"
        case dryRunId = "DryRunId"
        case dryRunStatus = "DryRunStatus"
        case updateDate = "UpdateDate"
        case validationFailures = "ValidationFailures"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let dryRunId = self.dryRunId {
            try encodeContainer.encode(dryRunId, forKey: .dryRunId)
        }
        if let dryRunStatus = self.dryRunStatus {
            try encodeContainer.encode(dryRunStatus, forKey: .dryRunStatus)
        }
        if let updateDate = self.updateDate {
            try encodeContainer.encode(updateDate, forKey: .updateDate)
        }
        if let validationFailures = validationFailures {
            var validationFailuresContainer = encodeContainer.nestedUnkeyedContainer(forKey: .validationFailures)
            for validationfailure0 in validationFailures {
                try validationFailuresContainer.encode(validationfailure0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dryRunId)
        dryRunId = dryRunIdDecoded
        let dryRunStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dryRunStatus)
        dryRunStatus = dryRunStatusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let updateDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateDate)
        updateDate = updateDateDecoded
        let validationFailuresContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.ValidationFailure?].self, forKey: .validationFailures)
        var validationFailuresDecoded0:[OpenSearchClientTypes.ValidationFailure]? = nil
        if let validationFailuresContainer = validationFailuresContainer {
            validationFailuresDecoded0 = [OpenSearchClientTypes.ValidationFailure]()
            for structure0 in validationFailuresContainer {
                if let structure0 = structure0 {
                    validationFailuresDecoded0?.append(structure0)
                }
            }
        }
        validationFailures = validationFailuresDecoded0
    }
}

extension OpenSearchClientTypes {
    /// Information about the progress of a pre-upgrade dry run analysis.
    public struct DryRunProgressStatus: Swift.Equatable {
        /// The timestamp when the dry run was initiated.
        /// This member is required.
        public var creationDate: Swift.String?
        /// The unique identifier of the dry run.
        /// This member is required.
        public var dryRunId: Swift.String?
        /// The current status of the dry run.
        /// This member is required.
        public var dryRunStatus: Swift.String?
        /// The timestamp when the dry run was last updated.
        /// This member is required.
        public var updateDate: Swift.String?
        /// Any validation failures that occurred as a result of the dry run.
        public var validationFailures: [OpenSearchClientTypes.ValidationFailure]?

        public init (
            creationDate: Swift.String? = nil,
            dryRunId: Swift.String? = nil,
            dryRunStatus: Swift.String? = nil,
            updateDate: Swift.String? = nil,
            validationFailures: [OpenSearchClientTypes.ValidationFailure]? = nil
        )
        {
            self.creationDate = creationDate
            self.dryRunId = dryRunId
            self.dryRunStatus = dryRunStatus
            self.updateDate = updateDate
            self.validationFailures = validationFailures
        }
    }

}

extension OpenSearchClientTypes.DryRunResults: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentType = "DeploymentType"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentType = self.deploymentType {
            try encodeContainer.encode(deploymentType, forKey: .deploymentType)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentType)
        deploymentType = deploymentTypeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OpenSearchClientTypes {
    /// Results of a dry run performed in an update domain request.
    public struct DryRunResults: Swift.Equatable {
        /// Specifies the way in which OpenSearch Service will apply an update. Possible values are:
        ///
        /// * Blue/Green - The update requires a blue/green deployment.
        ///
        /// * DynamicUpdate - No blue/green deployment required
        ///
        /// * Undetermined - The domain is in the middle of an update and can't predict the deployment type. Try again after the update is complete.
        ///
        /// * None - The request doesn't include any configuration changes.
        public var deploymentType: Swift.String?
        /// A message corresponding to the deployment type.
        public var message: Swift.String?

        public init (
            deploymentType: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.deploymentType = deploymentType
            self.message = message
        }
    }

}

extension OpenSearchClientTypes.Duration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case unit = "Unit"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let unit = self.unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
        if value != 0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .value) ?? 0
        value = valueDecoded
        let unitDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.TimeUnit.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension OpenSearchClientTypes {
    /// The duration of a maintenance schedule. For more information, see [Auto-Tune for Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/auto-tune.html).
    public struct Duration: Swift.Equatable {
        /// The unit of measurement for the duration of a maintenance schedule.
        public var unit: OpenSearchClientTypes.TimeUnit?
        /// Integer to specify the value of a maintenance schedule duration.
        public var value: Swift.Int

        public init (
            unit: OpenSearchClientTypes.TimeUnit? = nil,
            value: Swift.Int = 0
        )
        {
            self.unit = unit
            self.value = value
        }
    }

}

extension OpenSearchClientTypes.EBSOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ebsEnabled = "EBSEnabled"
        case iops = "Iops"
        case throughput = "Throughput"
        case volumeSize = "VolumeSize"
        case volumeType = "VolumeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ebsEnabled = self.ebsEnabled {
            try encodeContainer.encode(ebsEnabled, forKey: .ebsEnabled)
        }
        if let iops = self.iops {
            try encodeContainer.encode(iops, forKey: .iops)
        }
        if let throughput = self.throughput {
            try encodeContainer.encode(throughput, forKey: .throughput)
        }
        if let volumeSize = self.volumeSize {
            try encodeContainer.encode(volumeSize, forKey: .volumeSize)
        }
        if let volumeType = self.volumeType {
            try encodeContainer.encode(volumeType.rawValue, forKey: .volumeType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ebsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ebsEnabled)
        ebsEnabled = ebsEnabledDecoded
        let volumeTypeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.VolumeType.self, forKey: .volumeType)
        volumeType = volumeTypeDecoded
        let volumeSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeSize)
        volumeSize = volumeSizeDecoded
        let iopsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .iops)
        iops = iopsDecoded
        let throughputDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .throughput)
        throughput = throughputDecoded
    }
}

extension OpenSearchClientTypes {
    /// Container for the parameters required to enable EBS-based storage for an OpenSearch Service domain.
    public struct EBSOptions: Swift.Equatable {
        /// Indicates whether EBS volumes are attached to data nodes in an OpenSearch Service domain.
        public var ebsEnabled: Swift.Bool?
        /// Specifies the baseline input/output (I/O) performance of EBS volumes attached to data nodes. Applicable only for the gp3 and provisioned IOPS EBS volume types.
        public var iops: Swift.Int?
        /// Specifies the throughput (in MiB/s) of the EBS volumes attached to data nodes. Applicable only for the gp3 volume type.
        public var throughput: Swift.Int?
        /// Specifies the size (in GiB) of EBS volumes attached to data nodes.
        public var volumeSize: Swift.Int?
        /// Specifies the type of EBS volumes attached to data nodes.
        public var volumeType: OpenSearchClientTypes.VolumeType?

        public init (
            ebsEnabled: Swift.Bool? = nil,
            iops: Swift.Int? = nil,
            throughput: Swift.Int? = nil,
            volumeSize: Swift.Int? = nil,
            volumeType: OpenSearchClientTypes.VolumeType? = nil
        )
        {
            self.ebsEnabled = ebsEnabled
            self.iops = iops
            self.throughput = throughput
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }
    }

}

extension OpenSearchClientTypes.EBSOptionsStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.EBSOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension OpenSearchClientTypes {
    /// The status of the EBS options for the specified OpenSearch Service domain.
    public struct EBSOptionsStatus: Swift.Equatable {
        /// The configured EBS options for the specified domain.
        /// This member is required.
        public var options: OpenSearchClientTypes.EBSOptions?
        /// The status of the EBS options for the specified domain.
        /// This member is required.
        public var status: OpenSearchClientTypes.OptionStatus?

        public init (
            options: OpenSearchClientTypes.EBSOptions? = nil,
            status: OpenSearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension OpenSearchClientTypes.EncryptionAtRestOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case kmsKeyId = "KmsKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension OpenSearchClientTypes {
    /// Specifies whether the domain should encrypt data at rest, and if so, the Key Management Service (KMS) key to use. Can be used only to create a new domain, not update an existing one.
    public struct EncryptionAtRestOptions: Swift.Equatable {
        /// True to enable encryption at rest.
        public var enabled: Swift.Bool?
        /// The KMS key ID. Takes the form 1a2a3a4-1a2a-3a4a-5a6a-1a2a3a4a5a6a.
        public var kmsKeyId: Swift.String?

        public init (
            enabled: Swift.Bool? = nil,
            kmsKeyId: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.kmsKeyId = kmsKeyId
        }
    }

}

extension OpenSearchClientTypes.EncryptionAtRestOptionsStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.EncryptionAtRestOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension OpenSearchClientTypes {
    /// Status of the encryption at rest options for the specified OpenSearch Service domain.
    public struct EncryptionAtRestOptionsStatus: Swift.Equatable {
        /// Encryption at rest options for the specified domain.
        /// This member is required.
        public var options: OpenSearchClientTypes.EncryptionAtRestOptions?
        /// The status of the encryption at rest options for the specified domain.
        /// This member is required.
        public var status: OpenSearchClientTypes.OptionStatus?

        public init (
            options: OpenSearchClientTypes.EncryptionAtRestOptions? = nil,
            status: OpenSearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension OpenSearchClientTypes {
    public enum EngineType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case elasticsearch
        case opensearch
        case sdkUnknown(Swift.String)

        public static var allCases: [EngineType] {
            return [
                .elasticsearch,
                .opensearch,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .elasticsearch: return "Elasticsearch"
            case .opensearch: return "OpenSearch"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EngineType(rawValue: rawValue) ?? EngineType.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes.ErrorDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorMessage = "ErrorMessage"
        case errorType = "ErrorType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let errorType = self.errorType {
            try encodeContainer.encode(errorType, forKey: .errorType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorType)
        errorType = errorTypeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension OpenSearchClientTypes {
    /// Additional information if the package is in an error state. Null otherwise.
    public struct ErrorDetails: Swift.Equatable {
        /// A message describing the error.
        public var errorMessage: Swift.String?
        /// The type of error that occurred.
        public var errorType: Swift.String?

        public init (
            errorMessage: Swift.String? = nil,
            errorType: Swift.String? = nil
        )
        {
            self.errorMessage = errorMessage
            self.errorType = errorType
        }
    }

}

extension OpenSearchClientTypes.Filter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for nonemptystring0 in values {
                try valuesContainer.encode(nonemptystring0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension OpenSearchClientTypes {
    /// A filter used to limit results when describing inbound or outbound cross-cluster connections. You can specify multiple values per filter. A cross-cluster connection must match at least one of the specified values for it to be returned from an operation.
    public struct Filter: Swift.Equatable {
        /// The name of the filter.
        public var name: Swift.String?
        /// One or more values for the filter.
        public var values: [Swift.String]?

        public init (
            name: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension GetCompatibleVersionsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let domainName = domainName {
                let domainNameQueryItem = ClientRuntime.URLQueryItem(name: "domainName".urlPercentEncoding(), value: Swift.String(domainName).urlPercentEncoding())
                items.append(domainNameQueryItem)
            }
            return items
        }
    }
}

extension GetCompatibleVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/opensearch/compatibleVersions"
    }
}

/// Container for the request parameters to GetCompatibleVersions operation.
public struct GetCompatibleVersionsInput: Swift.Equatable {
    /// The name of an existing domain. Provide this parameter to limit the results to a single domain.
    public var domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct GetCompatibleVersionsInputBody: Swift.Equatable {
}

extension GetCompatibleVersionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetCompatibleVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCompatibleVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetCompatibleVersionsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCompatibleVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetCompatibleVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.compatibleVersions = output.compatibleVersions
        } else {
            self.compatibleVersions = nil
        }
    }
}

/// Container for the response returned by the GetCompatibleVersions operation.
public struct GetCompatibleVersionsOutputResponse: Swift.Equatable {
    /// A map of OpenSearch or Elasticsearch versions and the versions you can upgrade them to.
    public var compatibleVersions: [OpenSearchClientTypes.CompatibleVersionsMap]?

    public init (
        compatibleVersions: [OpenSearchClientTypes.CompatibleVersionsMap]? = nil
    )
    {
        self.compatibleVersions = compatibleVersions
    }
}

struct GetCompatibleVersionsOutputResponseBody: Swift.Equatable {
    let compatibleVersions: [OpenSearchClientTypes.CompatibleVersionsMap]?
}

extension GetCompatibleVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compatibleVersions = "CompatibleVersions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let compatibleVersionsContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.CompatibleVersionsMap?].self, forKey: .compatibleVersions)
        var compatibleVersionsDecoded0:[OpenSearchClientTypes.CompatibleVersionsMap]? = nil
        if let compatibleVersionsContainer = compatibleVersionsContainer {
            compatibleVersionsDecoded0 = [OpenSearchClientTypes.CompatibleVersionsMap]()
            for structure0 in compatibleVersionsContainer {
                if let structure0 = structure0 {
                    compatibleVersionsDecoded0?.append(structure0)
                }
            }
        }
        compatibleVersions = compatibleVersionsDecoded0
    }
}

extension GetPackageVersionHistoryInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension GetPackageVersionHistoryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let packageID = packageID else {
            return nil
        }
        return "/2021-01-01/packages/\(packageID.urlPercentEncoding())/history"
    }
}

/// Container for the request parameters to the GetPackageVersionHistory operation.
public struct GetPackageVersionHistoryInput: Swift.Equatable {
    /// An optional parameter that specifies the maximum number of results to return. You can use nextToken to get the next page of results.
    public var maxResults: Swift.Int?
    /// If your initial GetPackageVersionHistory operation returns a nextToken, you can include the returned nextToken in subsequent GetPackageVersionHistory operations, which returns results in the next page.
    public var nextToken: Swift.String?
    /// The unique identifier of the package.
    /// This member is required.
    public var packageID: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        packageID: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.packageID = packageID
    }
}

struct GetPackageVersionHistoryInputBody: Swift.Equatable {
}

extension GetPackageVersionHistoryInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetPackageVersionHistoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetPackageVersionHistoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetPackageVersionHistoryOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPackageVersionHistoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetPackageVersionHistoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.packageID = output.packageID
            self.packageVersionHistoryList = output.packageVersionHistoryList
        } else {
            self.nextToken = nil
            self.packageID = nil
            self.packageVersionHistoryList = nil
        }
    }
}

/// Container for response returned by GetPackageVersionHistory operation.
public struct GetPackageVersionHistoryOutputResponse: Swift.Equatable {
    /// When nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.
    public var nextToken: Swift.String?
    /// The unique identifier of the package.
    public var packageID: Swift.String?
    /// A list of package versions, along with their creation time and commit message.
    public var packageVersionHistoryList: [OpenSearchClientTypes.PackageVersionHistory]?

    public init (
        nextToken: Swift.String? = nil,
        packageID: Swift.String? = nil,
        packageVersionHistoryList: [OpenSearchClientTypes.PackageVersionHistory]? = nil
    )
    {
        self.nextToken = nextToken
        self.packageID = packageID
        self.packageVersionHistoryList = packageVersionHistoryList
    }
}

struct GetPackageVersionHistoryOutputResponseBody: Swift.Equatable {
    let packageID: Swift.String?
    let packageVersionHistoryList: [OpenSearchClientTypes.PackageVersionHistory]?
    let nextToken: Swift.String?
}

extension GetPackageVersionHistoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case packageID = "PackageID"
        case packageVersionHistoryList = "PackageVersionHistoryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageID)
        packageID = packageIDDecoded
        let packageVersionHistoryListContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.PackageVersionHistory?].self, forKey: .packageVersionHistoryList)
        var packageVersionHistoryListDecoded0:[OpenSearchClientTypes.PackageVersionHistory]? = nil
        if let packageVersionHistoryListContainer = packageVersionHistoryListContainer {
            packageVersionHistoryListDecoded0 = [OpenSearchClientTypes.PackageVersionHistory]()
            for structure0 in packageVersionHistoryListContainer {
                if let structure0 = structure0 {
                    packageVersionHistoryListDecoded0?.append(structure0)
                }
            }
        }
        packageVersionHistoryList = packageVersionHistoryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetUpgradeHistoryInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension GetUpgradeHistoryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2021-01-01/opensearch/upgradeDomain/\(domainName.urlPercentEncoding())/history"
    }
}

/// Container for the request parameters to the GetUpgradeHistory operation.
public struct GetUpgradeHistoryInput: Swift.Equatable {
    /// The name of an existing domain.
    /// This member is required.
    public var domainName: Swift.String?
    /// An optional parameter that specifies the maximum number of results to return. You can use nextToken to get the next page of results.
    public var maxResults: Swift.Int?
    /// If your initial GetUpgradeHistory operation returns a nextToken, you can include the returned nextToken in subsequent GetUpgradeHistory operations, which returns results in the next page.
    public var nextToken: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetUpgradeHistoryInputBody: Swift.Equatable {
}

extension GetUpgradeHistoryInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetUpgradeHistoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetUpgradeHistoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetUpgradeHistoryOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetUpgradeHistoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetUpgradeHistoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.upgradeHistories = output.upgradeHistories
        } else {
            self.nextToken = nil
            self.upgradeHistories = nil
        }
    }
}

/// Container for the response returned by the GetUpgradeHistory operation.
public struct GetUpgradeHistoryOutputResponse: Swift.Equatable {
    /// When nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.
    public var nextToken: Swift.String?
    /// A list of objects corresponding to each upgrade or upgrade eligibility check performed on a domain.
    public var upgradeHistories: [OpenSearchClientTypes.UpgradeHistory]?

    public init (
        nextToken: Swift.String? = nil,
        upgradeHistories: [OpenSearchClientTypes.UpgradeHistory]? = nil
    )
    {
        self.nextToken = nextToken
        self.upgradeHistories = upgradeHistories
    }
}

struct GetUpgradeHistoryOutputResponseBody: Swift.Equatable {
    let upgradeHistories: [OpenSearchClientTypes.UpgradeHistory]?
    let nextToken: Swift.String?
}

extension GetUpgradeHistoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case upgradeHistories = "UpgradeHistories"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let upgradeHistoriesContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.UpgradeHistory?].self, forKey: .upgradeHistories)
        var upgradeHistoriesDecoded0:[OpenSearchClientTypes.UpgradeHistory]? = nil
        if let upgradeHistoriesContainer = upgradeHistoriesContainer {
            upgradeHistoriesDecoded0 = [OpenSearchClientTypes.UpgradeHistory]()
            for structure0 in upgradeHistoriesContainer {
                if let structure0 = structure0 {
                    upgradeHistoriesDecoded0?.append(structure0)
                }
            }
        }
        upgradeHistories = upgradeHistoriesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetUpgradeStatusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2021-01-01/opensearch/upgradeDomain/\(domainName.urlPercentEncoding())/status"
    }
}

/// Container for the request parameters to the GetUpgradeStatus operation.
public struct GetUpgradeStatusInput: Swift.Equatable {
    /// The domain of the domain to get upgrade status information for.
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct GetUpgradeStatusInputBody: Swift.Equatable {
}

extension GetUpgradeStatusInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetUpgradeStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetUpgradeStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetUpgradeStatusOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetUpgradeStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetUpgradeStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stepStatus = output.stepStatus
            self.upgradeName = output.upgradeName
            self.upgradeStep = output.upgradeStep
        } else {
            self.stepStatus = nil
            self.upgradeName = nil
            self.upgradeStep = nil
        }
    }
}

/// Container for the response returned by the GetUpgradeStatus operation.
public struct GetUpgradeStatusOutputResponse: Swift.Equatable {
    /// The status of the current step that an upgrade is on.
    public var stepStatus: OpenSearchClientTypes.UpgradeStatus?
    /// A string that describes the update.
    public var upgradeName: Swift.String?
    /// One of three steps that an upgrade or upgrade eligibility check goes through.
    public var upgradeStep: OpenSearchClientTypes.UpgradeStep?

    public init (
        stepStatus: OpenSearchClientTypes.UpgradeStatus? = nil,
        upgradeName: Swift.String? = nil,
        upgradeStep: OpenSearchClientTypes.UpgradeStep? = nil
    )
    {
        self.stepStatus = stepStatus
        self.upgradeName = upgradeName
        self.upgradeStep = upgradeStep
    }
}

struct GetUpgradeStatusOutputResponseBody: Swift.Equatable {
    let upgradeStep: OpenSearchClientTypes.UpgradeStep?
    let stepStatus: OpenSearchClientTypes.UpgradeStatus?
    let upgradeName: Swift.String?
}

extension GetUpgradeStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stepStatus = "StepStatus"
        case upgradeName = "UpgradeName"
        case upgradeStep = "UpgradeStep"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let upgradeStepDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.UpgradeStep.self, forKey: .upgradeStep)
        upgradeStep = upgradeStepDecoded
        let stepStatusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.UpgradeStatus.self, forKey: .stepStatus)
        stepStatus = stepStatusDecoded
        let upgradeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .upgradeName)
        upgradeName = upgradeNameDecoded
    }
}

extension OpenSearchClientTypes.InboundConnection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionId = "ConnectionId"
        case connectionMode = "ConnectionMode"
        case connectionStatus = "ConnectionStatus"
        case localDomainInfo = "LocalDomainInfo"
        case remoteDomainInfo = "RemoteDomainInfo"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionId = self.connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let connectionMode = self.connectionMode {
            try encodeContainer.encode(connectionMode.rawValue, forKey: .connectionMode)
        }
        if let connectionStatus = self.connectionStatus {
            try encodeContainer.encode(connectionStatus, forKey: .connectionStatus)
        }
        if let localDomainInfo = self.localDomainInfo {
            try encodeContainer.encode(localDomainInfo, forKey: .localDomainInfo)
        }
        if let remoteDomainInfo = self.remoteDomainInfo {
            try encodeContainer.encode(remoteDomainInfo, forKey: .remoteDomainInfo)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let localDomainInfoDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainInformationContainer.self, forKey: .localDomainInfo)
        localDomainInfo = localDomainInfoDecoded
        let remoteDomainInfoDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainInformationContainer.self, forKey: .remoteDomainInfo)
        remoteDomainInfo = remoteDomainInfoDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let connectionStatusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.InboundConnectionStatus.self, forKey: .connectionStatus)
        connectionStatus = connectionStatusDecoded
        let connectionModeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ConnectionMode.self, forKey: .connectionMode)
        connectionMode = connectionModeDecoded
    }
}

extension OpenSearchClientTypes {
    /// Describes an inbound cross-cluster connection for Amazon OpenSearch Service. For more information, see [Cross-cluster search for Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/cross-cluster-search.html).
    public struct InboundConnection: Swift.Equatable {
        /// The unique identifier of the connection.
        public var connectionId: Swift.String?
        /// The connection mode.
        public var connectionMode: OpenSearchClientTypes.ConnectionMode?
        /// The current status of the connection.
        public var connectionStatus: OpenSearchClientTypes.InboundConnectionStatus?
        /// Information about the source (local) domain.
        public var localDomainInfo: OpenSearchClientTypes.DomainInformationContainer?
        /// Information about the destination (remote) domain.
        public var remoteDomainInfo: OpenSearchClientTypes.DomainInformationContainer?

        public init (
            connectionId: Swift.String? = nil,
            connectionMode: OpenSearchClientTypes.ConnectionMode? = nil,
            connectionStatus: OpenSearchClientTypes.InboundConnectionStatus? = nil,
            localDomainInfo: OpenSearchClientTypes.DomainInformationContainer? = nil,
            remoteDomainInfo: OpenSearchClientTypes.DomainInformationContainer? = nil
        )
        {
            self.connectionId = connectionId
            self.connectionMode = connectionMode
            self.connectionStatus = connectionStatus
            self.localDomainInfo = localDomainInfo
            self.remoteDomainInfo = remoteDomainInfo
        }
    }

}

extension OpenSearchClientTypes.InboundConnectionStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case statusCode = "StatusCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let statusCode = self.statusCode {
            try encodeContainer.encode(statusCode.rawValue, forKey: .statusCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusCodeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.InboundConnectionStatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OpenSearchClientTypes {
    /// The status of an inbound cross-cluster connection for OpenSearch Service.
    public struct InboundConnectionStatus: Swift.Equatable {
        /// Information about the connection.
        public var message: Swift.String?
        /// The status code for the connection. Can be one of the following:
        ///
        /// * PENDING_ACCEPTANCE - Inbound connection is not yet accepted by the remote domain owner.
        ///
        /// * APPROVED: Inbound connection is pending acceptance by the remote domain owner.
        ///
        /// * PROVISIONING: Inbound connection is being provisioned.
        ///
        /// * ACTIVE: Inbound connection is active and ready to use.
        ///
        /// * REJECTING: Inbound connection rejection is in process.
        ///
        /// * REJECTED: Inbound connection is rejected.
        ///
        /// * DELETING: Inbound connection deletion is in progress.
        ///
        /// * DELETED: Inbound connection is deleted and can no longer be used.
        public var statusCode: OpenSearchClientTypes.InboundConnectionStatusCode?

        public init (
            message: Swift.String? = nil,
            statusCode: OpenSearchClientTypes.InboundConnectionStatusCode? = nil
        )
        {
            self.message = message
            self.statusCode = statusCode
        }
    }

}

extension OpenSearchClientTypes {
    public enum InboundConnectionStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case approved
        case deleted
        case deleting
        case pendingAcceptance
        case provisioning
        case rejected
        case rejecting
        case sdkUnknown(Swift.String)

        public static var allCases: [InboundConnectionStatusCode] {
            return [
                .active,
                .approved,
                .deleted,
                .deleting,
                .pendingAcceptance,
                .provisioning,
                .rejected,
                .rejecting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .approved: return "APPROVED"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .pendingAcceptance: return "PENDING_ACCEPTANCE"
            case .provisioning: return "PROVISIONING"
            case .rejected: return "REJECTED"
            case .rejecting: return "REJECTING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InboundConnectionStatusCode(rawValue: rawValue) ?? InboundConnectionStatusCode.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes.InstanceCountLimits: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maximumInstanceCount = "MaximumInstanceCount"
        case minimumInstanceCount = "MinimumInstanceCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maximumInstanceCount != 0 {
            try encodeContainer.encode(maximumInstanceCount, forKey: .maximumInstanceCount)
        }
        if minimumInstanceCount != 0 {
            try encodeContainer.encode(minimumInstanceCount, forKey: .minimumInstanceCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minimumInstanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumInstanceCount) ?? 0
        minimumInstanceCount = minimumInstanceCountDecoded
        let maximumInstanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumInstanceCount) ?? 0
        maximumInstanceCount = maximumInstanceCountDecoded
    }
}

extension OpenSearchClientTypes {
    /// Limits on the number of instances that can be created in OpenSearch Service for a given instance type.
    public struct InstanceCountLimits: Swift.Equatable {
        /// The minimum allowed number of instances.
        public var maximumInstanceCount: Swift.Int
        /// The maximum allowed number of instances.
        public var minimumInstanceCount: Swift.Int

        public init (
            maximumInstanceCount: Swift.Int = 0,
            minimumInstanceCount: Swift.Int = 0
        )
        {
            self.maximumInstanceCount = maximumInstanceCount
            self.minimumInstanceCount = minimumInstanceCount
        }
    }

}

extension OpenSearchClientTypes.InstanceLimits: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceCountLimits = "InstanceCountLimits"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceCountLimits = self.instanceCountLimits {
            try encodeContainer.encode(instanceCountLimits, forKey: .instanceCountLimits)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceCountLimitsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.InstanceCountLimits.self, forKey: .instanceCountLimits)
        instanceCountLimits = instanceCountLimitsDecoded
    }
}

extension OpenSearchClientTypes {
    /// Instance-related attributes that are available for a given instance type.
    public struct InstanceLimits: Swift.Equatable {
        /// Limits on the number of instances that can be created for a given instance type.
        public var instanceCountLimits: OpenSearchClientTypes.InstanceCountLimits?

        public init (
            instanceCountLimits: OpenSearchClientTypes.InstanceCountLimits? = nil
        )
        {
            self.instanceCountLimits = instanceCountLimits
        }
    }

}

extension OpenSearchClientTypes.InstanceTypeDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case advancedSecurityEnabled = "AdvancedSecurityEnabled"
        case appLogsEnabled = "AppLogsEnabled"
        case cognitoEnabled = "CognitoEnabled"
        case encryptionEnabled = "EncryptionEnabled"
        case instanceRole = "InstanceRole"
        case instanceType = "InstanceType"
        case warmEnabled = "WarmEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let advancedSecurityEnabled = self.advancedSecurityEnabled {
            try encodeContainer.encode(advancedSecurityEnabled, forKey: .advancedSecurityEnabled)
        }
        if let appLogsEnabled = self.appLogsEnabled {
            try encodeContainer.encode(appLogsEnabled, forKey: .appLogsEnabled)
        }
        if let cognitoEnabled = self.cognitoEnabled {
            try encodeContainer.encode(cognitoEnabled, forKey: .cognitoEnabled)
        }
        if let encryptionEnabled = self.encryptionEnabled {
            try encodeContainer.encode(encryptionEnabled, forKey: .encryptionEnabled)
        }
        if let instanceRole = instanceRole {
            var instanceRoleContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceRole)
            for instancerole0 in instanceRole {
                try instanceRoleContainer.encode(instancerole0)
            }
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let warmEnabled = self.warmEnabled {
            try encodeContainer.encode(warmEnabled, forKey: .warmEnabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OpenSearchPartitionInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let encryptionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encryptionEnabled)
        encryptionEnabled = encryptionEnabledDecoded
        let cognitoEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .cognitoEnabled)
        cognitoEnabled = cognitoEnabledDecoded
        let appLogsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .appLogsEnabled)
        appLogsEnabled = appLogsEnabledDecoded
        let advancedSecurityEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .advancedSecurityEnabled)
        advancedSecurityEnabled = advancedSecurityEnabledDecoded
        let warmEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .warmEnabled)
        warmEnabled = warmEnabledDecoded
        let instanceRoleContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceRole)
        var instanceRoleDecoded0:[Swift.String]? = nil
        if let instanceRoleContainer = instanceRoleContainer {
            instanceRoleDecoded0 = [Swift.String]()
            for string0 in instanceRoleContainer {
                if let string0 = string0 {
                    instanceRoleDecoded0?.append(string0)
                }
            }
        }
        instanceRole = instanceRoleDecoded0
    }
}

extension OpenSearchClientTypes {
    /// Lists all instance types and available features for a given OpenSearch or Elasticsearch version.
    public struct InstanceTypeDetails: Swift.Equatable {
        /// Whether fine-grained access control is supported for the instance type.
        public var advancedSecurityEnabled: Swift.Bool?
        /// Whether logging is supported for the instance type.
        public var appLogsEnabled: Swift.Bool?
        /// Whether Amazon Cognito access is supported for the instance type.
        public var cognitoEnabled: Swift.Bool?
        /// Whether encryption at rest and node-to-node encryption are supported for the instance type.
        public var encryptionEnabled: Swift.Bool?
        /// Whether the instance acts as a data node, a dedicated master node, or an UltraWarm node.
        public var instanceRole: [Swift.String]?
        /// The instance type.
        public var instanceType: OpenSearchClientTypes.OpenSearchPartitionInstanceType?
        /// Whether UltraWarm is supported for the instance type.
        public var warmEnabled: Swift.Bool?

        public init (
            advancedSecurityEnabled: Swift.Bool? = nil,
            appLogsEnabled: Swift.Bool? = nil,
            cognitoEnabled: Swift.Bool? = nil,
            encryptionEnabled: Swift.Bool? = nil,
            instanceRole: [Swift.String]? = nil,
            instanceType: OpenSearchClientTypes.OpenSearchPartitionInstanceType? = nil,
            warmEnabled: Swift.Bool? = nil
        )
        {
            self.advancedSecurityEnabled = advancedSecurityEnabled
            self.appLogsEnabled = appLogsEnabled
            self.cognitoEnabled = cognitoEnabled
            self.encryptionEnabled = encryptionEnabled
            self.instanceRole = instanceRole
            self.instanceType = instanceType
            self.warmEnabled = warmEnabled
        }
    }

}

extension InternalException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Request processing failed because of an unknown error, exception, or internal failure.
public struct InternalException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidPaginationTokenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidPaginationTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request processing has failed because you provided an invalid pagination token.
public struct InvalidPaginationTokenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidPaginationTokenExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidPaginationTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTypeException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidTypeExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An exception for trying to create or access a sub-resource that's either invalid or not supported.
public struct InvalidTypeException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTypeExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidTypeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An exception for trying to create more than the allowed number of resources or sub-resources.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OpenSearchClientTypes.Limits: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalLimits = "AdditionalLimits"
        case instanceLimits = "InstanceLimits"
        case storageTypes = "StorageTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalLimits = additionalLimits {
            var additionalLimitsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalLimits)
            for additionallimit0 in additionalLimits {
                try additionalLimitsContainer.encode(additionallimit0)
            }
        }
        if let instanceLimits = self.instanceLimits {
            try encodeContainer.encode(instanceLimits, forKey: .instanceLimits)
        }
        if let storageTypes = storageTypes {
            var storageTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .storageTypes)
            for storagetype0 in storageTypes {
                try storageTypesContainer.encode(storagetype0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageTypesContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.StorageType?].self, forKey: .storageTypes)
        var storageTypesDecoded0:[OpenSearchClientTypes.StorageType]? = nil
        if let storageTypesContainer = storageTypesContainer {
            storageTypesDecoded0 = [OpenSearchClientTypes.StorageType]()
            for structure0 in storageTypesContainer {
                if let structure0 = structure0 {
                    storageTypesDecoded0?.append(structure0)
                }
            }
        }
        storageTypes = storageTypesDecoded0
        let instanceLimitsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.InstanceLimits.self, forKey: .instanceLimits)
        instanceLimits = instanceLimitsDecoded
        let additionalLimitsContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.AdditionalLimit?].self, forKey: .additionalLimits)
        var additionalLimitsDecoded0:[OpenSearchClientTypes.AdditionalLimit]? = nil
        if let additionalLimitsContainer = additionalLimitsContainer {
            additionalLimitsDecoded0 = [OpenSearchClientTypes.AdditionalLimit]()
            for structure0 in additionalLimitsContainer {
                if let structure0 = structure0 {
                    additionalLimitsDecoded0?.append(structure0)
                }
            }
        }
        additionalLimits = additionalLimitsDecoded0
    }
}

extension OpenSearchClientTypes {
    /// Limits for a given instance type and for each of its roles.
    public struct Limits: Swift.Equatable {
        /// List of additional limits that are specific to a given instance type for each of its instance roles.
        public var additionalLimits: [OpenSearchClientTypes.AdditionalLimit]?
        /// The limits for a given instance type.
        public var instanceLimits: OpenSearchClientTypes.InstanceLimits?
        /// Storage-related attributes that are available for a given instance type.
        public var storageTypes: [OpenSearchClientTypes.StorageType]?

        public init (
            additionalLimits: [OpenSearchClientTypes.AdditionalLimit]? = nil,
            instanceLimits: OpenSearchClientTypes.InstanceLimits? = nil,
            storageTypes: [OpenSearchClientTypes.StorageType]? = nil
        )
        {
            self.additionalLimits = additionalLimits
            self.instanceLimits = instanceLimits
            self.storageTypes = storageTypes
        }
    }

}

extension ListDomainNamesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let engineType = engineType {
                let engineTypeQueryItem = ClientRuntime.URLQueryItem(name: "engineType".urlPercentEncoding(), value: Swift.String(engineType.rawValue).urlPercentEncoding())
                items.append(engineTypeQueryItem)
            }
            return items
        }
    }
}

extension ListDomainNamesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/domain"
    }
}

/// Container for the parameters to the ListDomainNames operation.
public struct ListDomainNamesInput: Swift.Equatable {
    /// Filters the output by domain engine type.
    public var engineType: OpenSearchClientTypes.EngineType?

    public init (
        engineType: OpenSearchClientTypes.EngineType? = nil
    )
    {
        self.engineType = engineType
    }
}

struct ListDomainNamesInputBody: Swift.Equatable {
}

extension ListDomainNamesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDomainNamesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDomainNamesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDomainNamesOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDomainNamesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDomainNamesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainNames = output.domainNames
        } else {
            self.domainNames = nil
        }
    }
}

/// The results of a ListDomainNames operation. Contains the names of all domains owned by this account and their respective engine types.
public struct ListDomainNamesOutputResponse: Swift.Equatable {
    /// The names of all OpenSearch Service domains owned by the current user and their respective engine types.
    public var domainNames: [OpenSearchClientTypes.DomainInfo]?

    public init (
        domainNames: [OpenSearchClientTypes.DomainInfo]? = nil
    )
    {
        self.domainNames = domainNames
    }
}

struct ListDomainNamesOutputResponseBody: Swift.Equatable {
    let domainNames: [OpenSearchClientTypes.DomainInfo]?
}

extension ListDomainNamesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainNames = "DomainNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNamesContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.DomainInfo?].self, forKey: .domainNames)
        var domainNamesDecoded0:[OpenSearchClientTypes.DomainInfo]? = nil
        if let domainNamesContainer = domainNamesContainer {
            domainNamesDecoded0 = [OpenSearchClientTypes.DomainInfo]()
            for structure0 in domainNamesContainer {
                if let structure0 = structure0 {
                    domainNamesDecoded0?.append(structure0)
                }
            }
        }
        domainNames = domainNamesDecoded0
    }
}

extension ListDomainsForPackageInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListDomainsForPackageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let packageID = packageID else {
            return nil
        }
        return "/2021-01-01/packages/\(packageID.urlPercentEncoding())/domains"
    }
}

/// Container for the request parameters to the ListDomainsForPackage operation.
public struct ListDomainsForPackageInput: Swift.Equatable {
    /// An optional parameter that specifies the maximum number of results to return. You can use nextToken to get the next page of results.
    public var maxResults: Swift.Int?
    /// If your initial ListDomainsForPackage operation returns a nextToken, you can include the returned nextToken in subsequent ListDomainsForPackage operations, which returns results in the next page.
    public var nextToken: Swift.String?
    /// The unique identifier of the package for which to list associated domains.
    /// This member is required.
    public var packageID: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        packageID: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.packageID = packageID
    }
}

struct ListDomainsForPackageInputBody: Swift.Equatable {
}

extension ListDomainsForPackageInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDomainsForPackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDomainsForPackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDomainsForPackageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDomainsForPackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDomainsForPackageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainPackageDetailsList = output.domainPackageDetailsList
            self.nextToken = output.nextToken
        } else {
            self.domainPackageDetailsList = nil
            self.nextToken = nil
        }
    }
}

/// Container for the response parameters to the ListDomainsForPackage operation.
public struct ListDomainsForPackageOutputResponse: Swift.Equatable {
    /// Information about all domains associated with a package.
    public var domainPackageDetailsList: [OpenSearchClientTypes.DomainPackageDetails]?
    /// When nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.
    public var nextToken: Swift.String?

    public init (
        domainPackageDetailsList: [OpenSearchClientTypes.DomainPackageDetails]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainPackageDetailsList = domainPackageDetailsList
        self.nextToken = nextToken
    }
}

struct ListDomainsForPackageOutputResponseBody: Swift.Equatable {
    let domainPackageDetailsList: [OpenSearchClientTypes.DomainPackageDetails]?
    let nextToken: Swift.String?
}

extension ListDomainsForPackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainPackageDetailsList = "DomainPackageDetailsList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainPackageDetailsListContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.DomainPackageDetails?].self, forKey: .domainPackageDetailsList)
        var domainPackageDetailsListDecoded0:[OpenSearchClientTypes.DomainPackageDetails]? = nil
        if let domainPackageDetailsListContainer = domainPackageDetailsListContainer {
            domainPackageDetailsListDecoded0 = [OpenSearchClientTypes.DomainPackageDetails]()
            for structure0 in domainPackageDetailsListContainer {
                if let structure0 = structure0 {
                    domainPackageDetailsListDecoded0?.append(structure0)
                }
            }
        }
        domainPackageDetailsList = domainPackageDetailsListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListInstanceTypeDetailsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let domainName = domainName {
                let domainNameQueryItem = ClientRuntime.URLQueryItem(name: "domainName".urlPercentEncoding(), value: Swift.String(domainName).urlPercentEncoding())
                items.append(domainNameQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListInstanceTypeDetailsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let engineVersion = engineVersion else {
            return nil
        }
        return "/2021-01-01/opensearch/instanceTypeDetails/\(engineVersion.urlPercentEncoding())"
    }
}

public struct ListInstanceTypeDetailsInput: Swift.Equatable {
    /// Name of the domain to list instance type details for.
    public var domainName: Swift.String?
    /// Version of OpenSearch or Elasticsearch, in the format Elasticsearch_X.Y or OpenSearch_X.Y. Defaults to the latest version of OpenSearch.
    /// This member is required.
    public var engineVersion: Swift.String?
    /// An optional parameter that specifies the maximum number of results to return. You can use nextToken to get the next page of results.
    public var maxResults: Swift.Int?
    /// If your initial ListInstanceTypeDetails operation returns a nextToken, you can include the returned nextToken in subsequent ListInstanceTypeDetails operations, which returns results in the next page.
    public var nextToken: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.engineVersion = engineVersion
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListInstanceTypeDetailsInputBody: Swift.Equatable {
}

extension ListInstanceTypeDetailsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListInstanceTypeDetailsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInstanceTypeDetailsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListInstanceTypeDetailsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInstanceTypeDetailsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListInstanceTypeDetailsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceTypeDetails = output.instanceTypeDetails
            self.nextToken = output.nextToken
        } else {
            self.instanceTypeDetails = nil
            self.nextToken = nil
        }
    }
}

public struct ListInstanceTypeDetailsOutputResponse: Swift.Equatable {
    /// Lists all supported instance types and features for the given OpenSearch or Elasticsearch version.
    public var instanceTypeDetails: [OpenSearchClientTypes.InstanceTypeDetails]?
    /// When nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.
    public var nextToken: Swift.String?

    public init (
        instanceTypeDetails: [OpenSearchClientTypes.InstanceTypeDetails]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceTypeDetails = instanceTypeDetails
        self.nextToken = nextToken
    }
}

struct ListInstanceTypeDetailsOutputResponseBody: Swift.Equatable {
    let instanceTypeDetails: [OpenSearchClientTypes.InstanceTypeDetails]?
    let nextToken: Swift.String?
}

extension ListInstanceTypeDetailsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceTypeDetails = "InstanceTypeDetails"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDetailsContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.InstanceTypeDetails?].self, forKey: .instanceTypeDetails)
        var instanceTypeDetailsDecoded0:[OpenSearchClientTypes.InstanceTypeDetails]? = nil
        if let instanceTypeDetailsContainer = instanceTypeDetailsContainer {
            instanceTypeDetailsDecoded0 = [OpenSearchClientTypes.InstanceTypeDetails]()
            for structure0 in instanceTypeDetailsContainer {
                if let structure0 = structure0 {
                    instanceTypeDetailsDecoded0?.append(structure0)
                }
            }
        }
        instanceTypeDetails = instanceTypeDetailsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListPackagesForDomainInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListPackagesForDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2021-01-01/domain/\(domainName.urlPercentEncoding())/packages"
    }
}

/// Container for the request parameters to the ListPackagesForDomain operation.
public struct ListPackagesForDomainInput: Swift.Equatable {
    /// The name of the domain for which you want to list associated packages.
    /// This member is required.
    public var domainName: Swift.String?
    /// An optional parameter that specifies the maximum number of results to return. You can use nextToken to get the next page of results.
    public var maxResults: Swift.Int?
    /// If your initial ListPackagesForDomain operation returns a nextToken, you can include the returned nextToken in subsequent ListPackagesForDomain operations, which returns results in the next page.
    public var nextToken: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListPackagesForDomainInputBody: Swift.Equatable {
}

extension ListPackagesForDomainInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListPackagesForDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPackagesForDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListPackagesForDomainOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPackagesForDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListPackagesForDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainPackageDetailsList = output.domainPackageDetailsList
            self.nextToken = output.nextToken
        } else {
            self.domainPackageDetailsList = nil
            self.nextToken = nil
        }
    }
}

/// Container for the response parameters to the ListPackagesForDomain operation.
public struct ListPackagesForDomainOutputResponse: Swift.Equatable {
    /// List of all packages associated with a domain.
    public var domainPackageDetailsList: [OpenSearchClientTypes.DomainPackageDetails]?
    /// When nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.
    public var nextToken: Swift.String?

    public init (
        domainPackageDetailsList: [OpenSearchClientTypes.DomainPackageDetails]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainPackageDetailsList = domainPackageDetailsList
        self.nextToken = nextToken
    }
}

struct ListPackagesForDomainOutputResponseBody: Swift.Equatable {
    let domainPackageDetailsList: [OpenSearchClientTypes.DomainPackageDetails]?
    let nextToken: Swift.String?
}

extension ListPackagesForDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainPackageDetailsList = "DomainPackageDetailsList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainPackageDetailsListContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.DomainPackageDetails?].self, forKey: .domainPackageDetailsList)
        var domainPackageDetailsListDecoded0:[OpenSearchClientTypes.DomainPackageDetails]? = nil
        if let domainPackageDetailsListContainer = domainPackageDetailsListContainer {
            domainPackageDetailsListDecoded0 = [OpenSearchClientTypes.DomainPackageDetails]()
            for structure0 in domainPackageDetailsListContainer {
                if let structure0 = structure0 {
                    domainPackageDetailsListDecoded0?.append(structure0)
                }
            }
        }
        domainPackageDetailsList = domainPackageDetailsListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let arn = arn else {
                let message = "Creating a URL Query Item failed. arn is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let arnQueryItem = ClientRuntime.URLQueryItem(name: "arn".urlPercentEncoding(), value: Swift.String(arn).urlPercentEncoding())
            items.append(arnQueryItem)
            return items
        }
    }
}

extension ListTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/tags"
    }
}

/// Container for the parameters to the ListTags operation.
public struct ListTagsInput: Swift.Equatable {
    /// Amazon Resource Name (ARN) for the domain to view tags for.
    /// This member is required.
    public var arn: Swift.String?

    public init (
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

struct ListTagsInputBody: Swift.Equatable {
}

extension ListTagsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tagList = output.tagList
        } else {
            self.tagList = nil
        }
    }
}

/// The results of a ListTags operation.
public struct ListTagsOutputResponse: Swift.Equatable {
    /// List of resource tags associated with the specified domain.
    public var tagList: [OpenSearchClientTypes.Tag]?

    public init (
        tagList: [OpenSearchClientTypes.Tag]? = nil
    )
    {
        self.tagList = tagList
    }
}

struct ListTagsOutputResponseBody: Swift.Equatable {
    let tagList: [OpenSearchClientTypes.Tag]?
}

extension ListTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagList = "TagList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagListContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.Tag?].self, forKey: .tagList)
        var tagListDecoded0:[OpenSearchClientTypes.Tag]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [OpenSearchClientTypes.Tag]()
            for structure0 in tagListContainer {
                if let structure0 = structure0 {
                    tagListDecoded0?.append(structure0)
                }
            }
        }
        tagList = tagListDecoded0
    }
}

extension ListVersionsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/opensearch/versions"
    }
}

/// Container for the request parameters to the ListVersions operation.
public struct ListVersionsInput: Swift.Equatable {
    /// An optional parameter that specifies the maximum number of results to return. You can use nextToken to get the next page of results.
    public var maxResults: Swift.Int?
    /// If your initial ListVersions operation returns a nextToken, you can include the returned nextToken in subsequent ListVersions operations, which returns results in the next page.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListVersionsInputBody: Swift.Equatable {
}

extension ListVersionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListVersionsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.versions = output.versions
        } else {
            self.nextToken = nil
            self.versions = nil
        }
    }
}

/// Container for the parameters for response received from the ListVersions operation.
public struct ListVersionsOutputResponse: Swift.Equatable {
    /// When nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.
    public var nextToken: Swift.String?
    /// A list of all versions of OpenSearch and Elasticsearch that Amazon OpenSearch Service supports.
    public var versions: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        versions: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.versions = versions
    }
}

struct ListVersionsOutputResponseBody: Swift.Equatable {
    let versions: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case versions = "Versions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .versions)
        var versionsDecoded0:[Swift.String]? = nil
        if let versionsContainer = versionsContainer {
            versionsDecoded0 = [Swift.String]()
            for string0 in versionsContainer {
                if let string0 = string0 {
                    versionsDecoded0?.append(string0)
                }
            }
        }
        versions = versionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListVpcEndpointAccessInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            return items
        }
    }
}

extension ListVpcEndpointAccessInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2021-01-01/opensearch/domain/\(domainName.urlPercentEncoding())/listVpcEndpointAccess"
    }
}

public struct ListVpcEndpointAccessInput: Swift.Equatable {
    /// The name of the OpenSearch Service domain to retrieve access information for.
    /// This member is required.
    public var domainName: Swift.String?
    /// If your initial ListVpcEndpointAccess operation returns a nextToken, you can include the returned nextToken in subsequent ListVpcEndpointAccess operations, which returns results in the next page.
    public var nextToken: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.nextToken = nextToken
    }
}

struct ListVpcEndpointAccessInputBody: Swift.Equatable {
}

extension ListVpcEndpointAccessInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListVpcEndpointAccessOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListVpcEndpointAccessOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListVpcEndpointAccessOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListVpcEndpointAccessOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListVpcEndpointAccessOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.authorizedPrincipalList = output.authorizedPrincipalList
            self.nextToken = output.nextToken
        } else {
            self.authorizedPrincipalList = nil
            self.nextToken = nil
        }
    }
}

public struct ListVpcEndpointAccessOutputResponse: Swift.Equatable {
    /// A list of [IAM principals](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html) that can currently access the domain.
    /// This member is required.
    public var authorizedPrincipalList: [OpenSearchClientTypes.AuthorizedPrincipal]?
    /// When nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.
    /// This member is required.
    public var nextToken: Swift.String?

    public init (
        authorizedPrincipalList: [OpenSearchClientTypes.AuthorizedPrincipal]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.authorizedPrincipalList = authorizedPrincipalList
        self.nextToken = nextToken
    }
}

struct ListVpcEndpointAccessOutputResponseBody: Swift.Equatable {
    let authorizedPrincipalList: [OpenSearchClientTypes.AuthorizedPrincipal]?
    let nextToken: Swift.String?
}

extension ListVpcEndpointAccessOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizedPrincipalList = "AuthorizedPrincipalList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizedPrincipalListContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.AuthorizedPrincipal?].self, forKey: .authorizedPrincipalList)
        var authorizedPrincipalListDecoded0:[OpenSearchClientTypes.AuthorizedPrincipal]? = nil
        if let authorizedPrincipalListContainer = authorizedPrincipalListContainer {
            authorizedPrincipalListDecoded0 = [OpenSearchClientTypes.AuthorizedPrincipal]()
            for structure0 in authorizedPrincipalListContainer {
                if let structure0 = structure0 {
                    authorizedPrincipalListDecoded0?.append(structure0)
                }
            }
        }
        authorizedPrincipalList = authorizedPrincipalListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListVpcEndpointsForDomainInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            return items
        }
    }
}

extension ListVpcEndpointsForDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2021-01-01/opensearch/domain/\(domainName.urlPercentEncoding())/vpcEndpoints"
    }
}

public struct ListVpcEndpointsForDomainInput: Swift.Equatable {
    /// The name of the domain to list associated VPC endpoints for.
    /// This member is required.
    public var domainName: Swift.String?
    /// If your initial ListEndpointsForDomain operation returns a nextToken, you can include the returned nextToken in subsequent ListEndpointsForDomain operations, which returns results in the next page.
    public var nextToken: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.nextToken = nextToken
    }
}

struct ListVpcEndpointsForDomainInputBody: Swift.Equatable {
}

extension ListVpcEndpointsForDomainInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListVpcEndpointsForDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListVpcEndpointsForDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListVpcEndpointsForDomainOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListVpcEndpointsForDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListVpcEndpointsForDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.vpcEndpointSummaryList = output.vpcEndpointSummaryList
        } else {
            self.nextToken = nil
            self.vpcEndpointSummaryList = nil
        }
    }
}

public struct ListVpcEndpointsForDomainOutputResponse: Swift.Equatable {
    /// When nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.
    /// This member is required.
    public var nextToken: Swift.String?
    /// Information about each endpoint associated with the domain.
    /// This member is required.
    public var vpcEndpointSummaryList: [OpenSearchClientTypes.VpcEndpointSummary]?

    public init (
        nextToken: Swift.String? = nil,
        vpcEndpointSummaryList: [OpenSearchClientTypes.VpcEndpointSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.vpcEndpointSummaryList = vpcEndpointSummaryList
    }
}

struct ListVpcEndpointsForDomainOutputResponseBody: Swift.Equatable {
    let vpcEndpointSummaryList: [OpenSearchClientTypes.VpcEndpointSummary]?
    let nextToken: Swift.String?
}

extension ListVpcEndpointsForDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case vpcEndpointSummaryList = "VpcEndpointSummaryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointSummaryListContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.VpcEndpointSummary?].self, forKey: .vpcEndpointSummaryList)
        var vpcEndpointSummaryListDecoded0:[OpenSearchClientTypes.VpcEndpointSummary]? = nil
        if let vpcEndpointSummaryListContainer = vpcEndpointSummaryListContainer {
            vpcEndpointSummaryListDecoded0 = [OpenSearchClientTypes.VpcEndpointSummary]()
            for structure0 in vpcEndpointSummaryListContainer {
                if let structure0 = structure0 {
                    vpcEndpointSummaryListDecoded0?.append(structure0)
                }
            }
        }
        vpcEndpointSummaryList = vpcEndpointSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListVpcEndpointsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            return items
        }
    }
}

extension ListVpcEndpointsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/opensearch/vpcEndpoints"
    }
}

public struct ListVpcEndpointsInput: Swift.Equatable {
    /// If your initial ListVpcEndpoints operation returns a nextToken, you can include the returned nextToken in subsequent ListVpcEndpoints operations, which returns results in the next page.
    public var nextToken: Swift.String?

    public init (
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

struct ListVpcEndpointsInputBody: Swift.Equatable {
}

extension ListVpcEndpointsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListVpcEndpointsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListVpcEndpointsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListVpcEndpointsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListVpcEndpointsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListVpcEndpointsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.vpcEndpointSummaryList = output.vpcEndpointSummaryList
        } else {
            self.nextToken = nil
            self.vpcEndpointSummaryList = nil
        }
    }
}

public struct ListVpcEndpointsOutputResponse: Swift.Equatable {
    /// When nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.
    /// This member is required.
    public var nextToken: Swift.String?
    /// Information about each endpoint.
    /// This member is required.
    public var vpcEndpointSummaryList: [OpenSearchClientTypes.VpcEndpointSummary]?

    public init (
        nextToken: Swift.String? = nil,
        vpcEndpointSummaryList: [OpenSearchClientTypes.VpcEndpointSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.vpcEndpointSummaryList = vpcEndpointSummaryList
    }
}

struct ListVpcEndpointsOutputResponseBody: Swift.Equatable {
    let vpcEndpointSummaryList: [OpenSearchClientTypes.VpcEndpointSummary]?
    let nextToken: Swift.String?
}

extension ListVpcEndpointsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case vpcEndpointSummaryList = "VpcEndpointSummaryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointSummaryListContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.VpcEndpointSummary?].self, forKey: .vpcEndpointSummaryList)
        var vpcEndpointSummaryListDecoded0:[OpenSearchClientTypes.VpcEndpointSummary]? = nil
        if let vpcEndpointSummaryListContainer = vpcEndpointSummaryListContainer {
            vpcEndpointSummaryListDecoded0 = [OpenSearchClientTypes.VpcEndpointSummary]()
            for structure0 in vpcEndpointSummaryListContainer {
                if let structure0 = structure0 {
                    vpcEndpointSummaryListDecoded0?.append(structure0)
                }
            }
        }
        vpcEndpointSummaryList = vpcEndpointSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension OpenSearchClientTypes.LogPublishingOption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogsLogGroupArn = "CloudWatchLogsLogGroupArn"
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLogsLogGroupArn = self.cloudWatchLogsLogGroupArn {
            try encodeContainer.encode(cloudWatchLogsLogGroupArn, forKey: .cloudWatchLogsLogGroupArn)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudWatchLogsLogGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogsLogGroupArn)
        cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArnDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension OpenSearchClientTypes {
    /// Specifies whether the Amazon OpenSearch Service domain publishes the OpenSearch application and slow logs to Amazon CloudWatch. For more information, see [Monitoring OpenSearch logs with Amazon CloudWatch Logs](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createdomain-configure-slow-logs.html). After you enable log publishing, you still have to enable the collection of slow logs using the OpenSearch REST API.
    public struct LogPublishingOption: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the CloudWatch Logs group to publish logs to.
        public var cloudWatchLogsLogGroupArn: Swift.String?
        /// Whether the log should be published.
        public var enabled: Swift.Bool?

        public init (
            cloudWatchLogsLogGroupArn: Swift.String? = nil,
            enabled: Swift.Bool? = nil
        )
        {
            self.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn
            self.enabled = enabled
        }
    }

}

extension OpenSearchClientTypes.LogPublishingOptionsStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            var optionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .options)
            for (dictKey0, logPublishingOptions0) in options {
                try optionsContainer.encode(logPublishingOptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsContainer = try containerValues.decodeIfPresent([Swift.String: OpenSearchClientTypes.LogPublishingOption?].self, forKey: .options)
        var optionsDecoded0: [Swift.String:OpenSearchClientTypes.LogPublishingOption]? = nil
        if let optionsContainer = optionsContainer {
            optionsDecoded0 = [Swift.String:OpenSearchClientTypes.LogPublishingOption]()
            for (key0, logpublishingoption0) in optionsContainer {
                if let logpublishingoption0 = logpublishingoption0 {
                    optionsDecoded0?[key0] = logpublishingoption0
                }
            }
        }
        options = optionsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension OpenSearchClientTypes {
    /// The configured log publishing options for the domain and their current status.
    public struct LogPublishingOptionsStatus: Swift.Equatable {
        /// The log publishing options configured for the domain.
        public var options: [Swift.String:OpenSearchClientTypes.LogPublishingOption]?
        /// The status of the log publishing options for the domain.
        public var status: OpenSearchClientTypes.OptionStatus?

        public init (
            options: [Swift.String:OpenSearchClientTypes.LogPublishingOption]? = nil,
            status: OpenSearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension OpenSearchClientTypes {
    /// The type of log file. Can be one of the following:
    ///
    /// * INDEX_SLOW_LOGS - Index slow logs contain insert requests that took more time than the configured index query log threshold to execute.
    ///
    /// * SEARCH_SLOW_LOGS - Search slow logs contain search queries that took more time than the configured search query log threshold to execute.
    ///
    /// * ES_APPLICATION_LOGS - OpenSearch application logs contain information about errors and warnings raised during the operation of the service and can be useful for troubleshooting.
    ///
    /// * AUDIT_LOGS - Audit logs contain records of user requests for access to the domain.
    public enum LogType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case auditLogs
        case esApplicationLogs
        case indexSlowLogs
        case searchSlowLogs
        case sdkUnknown(Swift.String)

        public static var allCases: [LogType] {
            return [
                .auditLogs,
                .esApplicationLogs,
                .indexSlowLogs,
                .searchSlowLogs,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .auditLogs: return "AUDIT_LOGS"
            case .esApplicationLogs: return "ES_APPLICATION_LOGS"
            case .indexSlowLogs: return "INDEX_SLOW_LOGS"
            case .searchSlowLogs: return "SEARCH_SLOW_LOGS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogType(rawValue: rawValue) ?? LogType.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes.MasterUserOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case masterUserARN = "MasterUserARN"
        case masterUserName = "MasterUserName"
        case masterUserPassword = "MasterUserPassword"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let masterUserARN = self.masterUserARN {
            try encodeContainer.encode(masterUserARN, forKey: .masterUserARN)
        }
        if let masterUserName = self.masterUserName {
            try encodeContainer.encode(masterUserName, forKey: .masterUserName)
        }
        if let masterUserPassword = self.masterUserPassword {
            try encodeContainer.encode(masterUserPassword, forKey: .masterUserPassword)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let masterUserARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserARN)
        masterUserARN = masterUserARNDecoded
        let masterUserNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserName)
        masterUserName = masterUserNameDecoded
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
    }
}

extension OpenSearchClientTypes.MasterUserOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MasterUserOptions(masterUserARN: \(Swift.String(describing: masterUserARN)), masterUserName: \"CONTENT_REDACTED\", masterUserPassword: \"CONTENT_REDACTED\")"}
}

extension OpenSearchClientTypes {
    /// Credentials for the master user for a domain.
    public struct MasterUserOptions: Swift.Equatable {
        /// Amazon Resource Name (ARN) for the master user. Only specify if InternalUserDatabaseEnabled is false.
        public var masterUserARN: Swift.String?
        /// User name for the master user. Only specify if InternalUserDatabaseEnabled is true.
        public var masterUserName: Swift.String?
        /// Password for the master user. Only specify if InternalUserDatabaseEnabled is true.
        public var masterUserPassword: Swift.String?

        public init (
            masterUserARN: Swift.String? = nil,
            masterUserName: Swift.String? = nil,
            masterUserPassword: Swift.String? = nil
        )
        {
            self.masterUserARN = masterUserARN
            self.masterUserName = masterUserName
            self.masterUserPassword = masterUserPassword
        }
    }

}

extension OpenSearchClientTypes.NodeToNodeEncryptionOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension OpenSearchClientTypes {
    /// Enables or disables node-to-node encryption. For more information, see [Node-to-node encryption for Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ntn.html).
    public struct NodeToNodeEncryptionOptions: Swift.Equatable {
        /// True to enable node-to-node encryption.
        public var enabled: Swift.Bool?

        public init (
            enabled: Swift.Bool? = nil
        )
        {
            self.enabled = enabled
        }
    }

}

extension OpenSearchClientTypes.NodeToNodeEncryptionOptionsStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.NodeToNodeEncryptionOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension OpenSearchClientTypes {
    /// Status of the node-to-node encryption options for the specified domain.
    public struct NodeToNodeEncryptionOptionsStatus: Swift.Equatable {
        /// The node-to-node encryption options for the specified domain.
        /// This member is required.
        public var options: OpenSearchClientTypes.NodeToNodeEncryptionOptions?
        /// The status of the node-to-node encryption options for the specified domain.
        /// This member is required.
        public var status: OpenSearchClientTypes.OptionStatus?

        public init (
            options: OpenSearchClientTypes.NodeToNodeEncryptionOptions? = nil,
            status: OpenSearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension OpenSearchClientTypes {
    public enum OpenSearchPartitionInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case c42xlargeSearch
        case c44xlargeSearch
        case c48xlargeSearch
        case c4LargeSearch
        case c4XlargeSearch
        case c518xlargeSearch
        case c52xlargeSearch
        case c54xlargeSearch
        case c59xlargeSearch
        case c5LargeSearch
        case c5XlargeSearch
        case c6g12xlargeSearch
        case c6g2xlargeSearch
        case c6g4xlargeSearch
        case c6g8xlargeSearch
        case c6gLargeSearch
        case c6gXlargeSearch
        case d22xlargeSearch
        case d24xlargeSearch
        case d28xlargeSearch
        case d2XlargeSearch
        case i22xlargeSearch
        case i2XlargeSearch
        case i316xlargeSearch
        case i32xlargeSearch
        case i34xlargeSearch
        case i38xlargeSearch
        case i3LargeSearch
        case i3XlargeSearch
        case m32xlargeSearch
        case m3LargeSearch
        case m3MediumSearch
        case m3XlargeSearch
        case m410xlargeSearch
        case m42xlargeSearch
        case m44xlargeSearch
        case m4LargeSearch
        case m4XlargeSearch
        case m512xlargeSearch
        case m524xlargeSearch
        case m52xlargeSearch
        case m54xlargeSearch
        case m5LargeSearch
        case m5XlargeSearch
        case m6g12xlargeSearch
        case m6g2xlargeSearch
        case m6g4xlargeSearch
        case m6g8xlargeSearch
        case m6gLargeSearch
        case m6gXlargeSearch
        case r32xlargeSearch
        case r34xlargeSearch
        case r38xlargeSearch
        case r3LargeSearch
        case r3XlargeSearch
        case r416xlargeSearch
        case r42xlargeSearch
        case r44xlargeSearch
        case r48xlargeSearch
        case r4LargeSearch
        case r4XlargeSearch
        case r512xlargeSearch
        case r524xlargeSearch
        case r52xlargeSearch
        case r54xlargeSearch
        case r5LargeSearch
        case r5XlargeSearch
        case r6g12xlargeSearch
        case r6g2xlargeSearch
        case r6g4xlargeSearch
        case r6g8xlargeSearch
        case r6gLargeSearch
        case r6gXlargeSearch
        case r6gd12xlargeSearch
        case r6gd16xlargeSearch
        case r6gd2xlargeSearch
        case r6gd4xlargeSearch
        case r6gd8xlargeSearch
        case r6gdLargeSearch
        case r6gdXlargeSearch
        case t2MediumSearch
        case t2MicroSearch
        case t2SmallSearch
        case t32xlargeSearch
        case t3LargeSearch
        case t3MediumSearch
        case t3MicroSearch
        case t3NanoSearch
        case t3SmallSearch
        case t3XlargeSearch
        case t4gMediumSearch
        case t4gSmallSearch
        case ultrawarm1LargeSearch
        case ultrawarm1MediumSearch
        case ultrawarm1XlargeSearch
        case sdkUnknown(Swift.String)

        public static var allCases: [OpenSearchPartitionInstanceType] {
            return [
                .c42xlargeSearch,
                .c44xlargeSearch,
                .c48xlargeSearch,
                .c4LargeSearch,
                .c4XlargeSearch,
                .c518xlargeSearch,
                .c52xlargeSearch,
                .c54xlargeSearch,
                .c59xlargeSearch,
                .c5LargeSearch,
                .c5XlargeSearch,
                .c6g12xlargeSearch,
                .c6g2xlargeSearch,
                .c6g4xlargeSearch,
                .c6g8xlargeSearch,
                .c6gLargeSearch,
                .c6gXlargeSearch,
                .d22xlargeSearch,
                .d24xlargeSearch,
                .d28xlargeSearch,
                .d2XlargeSearch,
                .i22xlargeSearch,
                .i2XlargeSearch,
                .i316xlargeSearch,
                .i32xlargeSearch,
                .i34xlargeSearch,
                .i38xlargeSearch,
                .i3LargeSearch,
                .i3XlargeSearch,
                .m32xlargeSearch,
                .m3LargeSearch,
                .m3MediumSearch,
                .m3XlargeSearch,
                .m410xlargeSearch,
                .m42xlargeSearch,
                .m44xlargeSearch,
                .m4LargeSearch,
                .m4XlargeSearch,
                .m512xlargeSearch,
                .m524xlargeSearch,
                .m52xlargeSearch,
                .m54xlargeSearch,
                .m5LargeSearch,
                .m5XlargeSearch,
                .m6g12xlargeSearch,
                .m6g2xlargeSearch,
                .m6g4xlargeSearch,
                .m6g8xlargeSearch,
                .m6gLargeSearch,
                .m6gXlargeSearch,
                .r32xlargeSearch,
                .r34xlargeSearch,
                .r38xlargeSearch,
                .r3LargeSearch,
                .r3XlargeSearch,
                .r416xlargeSearch,
                .r42xlargeSearch,
                .r44xlargeSearch,
                .r48xlargeSearch,
                .r4LargeSearch,
                .r4XlargeSearch,
                .r512xlargeSearch,
                .r524xlargeSearch,
                .r52xlargeSearch,
                .r54xlargeSearch,
                .r5LargeSearch,
                .r5XlargeSearch,
                .r6g12xlargeSearch,
                .r6g2xlargeSearch,
                .r6g4xlargeSearch,
                .r6g8xlargeSearch,
                .r6gLargeSearch,
                .r6gXlargeSearch,
                .r6gd12xlargeSearch,
                .r6gd16xlargeSearch,
                .r6gd2xlargeSearch,
                .r6gd4xlargeSearch,
                .r6gd8xlargeSearch,
                .r6gdLargeSearch,
                .r6gdXlargeSearch,
                .t2MediumSearch,
                .t2MicroSearch,
                .t2SmallSearch,
                .t32xlargeSearch,
                .t3LargeSearch,
                .t3MediumSearch,
                .t3MicroSearch,
                .t3NanoSearch,
                .t3SmallSearch,
                .t3XlargeSearch,
                .t4gMediumSearch,
                .t4gSmallSearch,
                .ultrawarm1LargeSearch,
                .ultrawarm1MediumSearch,
                .ultrawarm1XlargeSearch,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .c42xlargeSearch: return "c4.2xlarge.search"
            case .c44xlargeSearch: return "c4.4xlarge.search"
            case .c48xlargeSearch: return "c4.8xlarge.search"
            case .c4LargeSearch: return "c4.large.search"
            case .c4XlargeSearch: return "c4.xlarge.search"
            case .c518xlargeSearch: return "c5.18xlarge.search"
            case .c52xlargeSearch: return "c5.2xlarge.search"
            case .c54xlargeSearch: return "c5.4xlarge.search"
            case .c59xlargeSearch: return "c5.9xlarge.search"
            case .c5LargeSearch: return "c5.large.search"
            case .c5XlargeSearch: return "c5.xlarge.search"
            case .c6g12xlargeSearch: return "c6g.12xlarge.search"
            case .c6g2xlargeSearch: return "c6g.2xlarge.search"
            case .c6g4xlargeSearch: return "c6g.4xlarge.search"
            case .c6g8xlargeSearch: return "c6g.8xlarge.search"
            case .c6gLargeSearch: return "c6g.large.search"
            case .c6gXlargeSearch: return "c6g.xlarge.search"
            case .d22xlargeSearch: return "d2.2xlarge.search"
            case .d24xlargeSearch: return "d2.4xlarge.search"
            case .d28xlargeSearch: return "d2.8xlarge.search"
            case .d2XlargeSearch: return "d2.xlarge.search"
            case .i22xlargeSearch: return "i2.2xlarge.search"
            case .i2XlargeSearch: return "i2.xlarge.search"
            case .i316xlargeSearch: return "i3.16xlarge.search"
            case .i32xlargeSearch: return "i3.2xlarge.search"
            case .i34xlargeSearch: return "i3.4xlarge.search"
            case .i38xlargeSearch: return "i3.8xlarge.search"
            case .i3LargeSearch: return "i3.large.search"
            case .i3XlargeSearch: return "i3.xlarge.search"
            case .m32xlargeSearch: return "m3.2xlarge.search"
            case .m3LargeSearch: return "m3.large.search"
            case .m3MediumSearch: return "m3.medium.search"
            case .m3XlargeSearch: return "m3.xlarge.search"
            case .m410xlargeSearch: return "m4.10xlarge.search"
            case .m42xlargeSearch: return "m4.2xlarge.search"
            case .m44xlargeSearch: return "m4.4xlarge.search"
            case .m4LargeSearch: return "m4.large.search"
            case .m4XlargeSearch: return "m4.xlarge.search"
            case .m512xlargeSearch: return "m5.12xlarge.search"
            case .m524xlargeSearch: return "m5.24xlarge.search"
            case .m52xlargeSearch: return "m5.2xlarge.search"
            case .m54xlargeSearch: return "m5.4xlarge.search"
            case .m5LargeSearch: return "m5.large.search"
            case .m5XlargeSearch: return "m5.xlarge.search"
            case .m6g12xlargeSearch: return "m6g.12xlarge.search"
            case .m6g2xlargeSearch: return "m6g.2xlarge.search"
            case .m6g4xlargeSearch: return "m6g.4xlarge.search"
            case .m6g8xlargeSearch: return "m6g.8xlarge.search"
            case .m6gLargeSearch: return "m6g.large.search"
            case .m6gXlargeSearch: return "m6g.xlarge.search"
            case .r32xlargeSearch: return "r3.2xlarge.search"
            case .r34xlargeSearch: return "r3.4xlarge.search"
            case .r38xlargeSearch: return "r3.8xlarge.search"
            case .r3LargeSearch: return "r3.large.search"
            case .r3XlargeSearch: return "r3.xlarge.search"
            case .r416xlargeSearch: return "r4.16xlarge.search"
            case .r42xlargeSearch: return "r4.2xlarge.search"
            case .r44xlargeSearch: return "r4.4xlarge.search"
            case .r48xlargeSearch: return "r4.8xlarge.search"
            case .r4LargeSearch: return "r4.large.search"
            case .r4XlargeSearch: return "r4.xlarge.search"
            case .r512xlargeSearch: return "r5.12xlarge.search"
            case .r524xlargeSearch: return "r5.24xlarge.search"
            case .r52xlargeSearch: return "r5.2xlarge.search"
            case .r54xlargeSearch: return "r5.4xlarge.search"
            case .r5LargeSearch: return "r5.large.search"
            case .r5XlargeSearch: return "r5.xlarge.search"
            case .r6g12xlargeSearch: return "r6g.12xlarge.search"
            case .r6g2xlargeSearch: return "r6g.2xlarge.search"
            case .r6g4xlargeSearch: return "r6g.4xlarge.search"
            case .r6g8xlargeSearch: return "r6g.8xlarge.search"
            case .r6gLargeSearch: return "r6g.large.search"
            case .r6gXlargeSearch: return "r6g.xlarge.search"
            case .r6gd12xlargeSearch: return "r6gd.12xlarge.search"
            case .r6gd16xlargeSearch: return "r6gd.16xlarge.search"
            case .r6gd2xlargeSearch: return "r6gd.2xlarge.search"
            case .r6gd4xlargeSearch: return "r6gd.4xlarge.search"
            case .r6gd8xlargeSearch: return "r6gd.8xlarge.search"
            case .r6gdLargeSearch: return "r6gd.large.search"
            case .r6gdXlargeSearch: return "r6gd.xlarge.search"
            case .t2MediumSearch: return "t2.medium.search"
            case .t2MicroSearch: return "t2.micro.search"
            case .t2SmallSearch: return "t2.small.search"
            case .t32xlargeSearch: return "t3.2xlarge.search"
            case .t3LargeSearch: return "t3.large.search"
            case .t3MediumSearch: return "t3.medium.search"
            case .t3MicroSearch: return "t3.micro.search"
            case .t3NanoSearch: return "t3.nano.search"
            case .t3SmallSearch: return "t3.small.search"
            case .t3XlargeSearch: return "t3.xlarge.search"
            case .t4gMediumSearch: return "t4g.medium.search"
            case .t4gSmallSearch: return "t4g.small.search"
            case .ultrawarm1LargeSearch: return "ultrawarm1.large.search"
            case .ultrawarm1MediumSearch: return "ultrawarm1.medium.search"
            case .ultrawarm1XlargeSearch: return "ultrawarm1.xlarge.search"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OpenSearchPartitionInstanceType(rawValue: rawValue) ?? OpenSearchPartitionInstanceType.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes {
    public enum OpenSearchWarmPartitionInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ultrawarm1LargeSearch
        case ultrawarm1MediumSearch
        case ultrawarm1XlargeSearch
        case sdkUnknown(Swift.String)

        public static var allCases: [OpenSearchWarmPartitionInstanceType] {
            return [
                .ultrawarm1LargeSearch,
                .ultrawarm1MediumSearch,
                .ultrawarm1XlargeSearch,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ultrawarm1LargeSearch: return "ultrawarm1.large.search"
            case .ultrawarm1MediumSearch: return "ultrawarm1.medium.search"
            case .ultrawarm1XlargeSearch: return "ultrawarm1.xlarge.search"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OpenSearchWarmPartitionInstanceType(rawValue: rawValue) ?? OpenSearchWarmPartitionInstanceType.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes {
    /// The state of a requested domain configuration change. Can be one of the following:
    ///
    /// * Processing - The requested change is still in progress.
    ///
    /// * Active - The requested change is processed and deployed to the domain.
    public enum OptionState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case processing
        case requiresindexdocuments
        case sdkUnknown(Swift.String)

        public static var allCases: [OptionState] {
            return [
                .active,
                .processing,
                .requiresindexdocuments,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .processing: return "Processing"
            case .requiresindexdocuments: return "RequiresIndexDocuments"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OptionState(rawValue: rawValue) ?? OptionState.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes.OptionStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate = "CreationDate"
        case pendingDeletion = "PendingDeletion"
        case state = "State"
        case updateDate = "UpdateDate"
        case updateVersion = "UpdateVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = self.creationDate {
            try encodeContainer.encodeTimestamp(creationDate, format: .epochSeconds, forKey: .creationDate)
        }
        if let pendingDeletion = self.pendingDeletion {
            try encodeContainer.encode(pendingDeletion, forKey: .pendingDeletion)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let updateDate = self.updateDate {
            try encodeContainer.encodeTimestamp(updateDate, format: .epochSeconds, forKey: .updateDate)
        }
        if updateVersion != 0 {
            try encodeContainer.encode(updateVersion, forKey: .updateVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
        let updateDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updateDate)
        updateDate = updateDateDecoded
        let updateVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .updateVersion) ?? 0
        updateVersion = updateVersionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OptionState.self, forKey: .state)
        state = stateDecoded
        let pendingDeletionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .pendingDeletion)
        pendingDeletion = pendingDeletionDecoded
    }
}

extension OpenSearchClientTypes {
    /// Provides the current status of an entity.
    public struct OptionStatus: Swift.Equatable {
        /// The timestamp when the entity was created.
        /// This member is required.
        public var creationDate: ClientRuntime.Date?
        /// Indicates whether the entity is being deleted.
        public var pendingDeletion: Swift.Bool?
        /// The state of the entity.
        /// This member is required.
        public var state: OpenSearchClientTypes.OptionState?
        /// The timestamp of the last time the entity was updated.
        /// This member is required.
        public var updateDate: ClientRuntime.Date?
        /// The latest version of the entity.
        public var updateVersion: Swift.Int

        public init (
            creationDate: ClientRuntime.Date? = nil,
            pendingDeletion: Swift.Bool? = nil,
            state: OpenSearchClientTypes.OptionState? = nil,
            updateDate: ClientRuntime.Date? = nil,
            updateVersion: Swift.Int = 0
        )
        {
            self.creationDate = creationDate
            self.pendingDeletion = pendingDeletion
            self.state = state
            self.updateDate = updateDate
            self.updateVersion = updateVersion
        }
    }

}

extension OpenSearchClientTypes.OutboundConnection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionAlias = "ConnectionAlias"
        case connectionId = "ConnectionId"
        case connectionMode = "ConnectionMode"
        case connectionProperties = "ConnectionProperties"
        case connectionStatus = "ConnectionStatus"
        case localDomainInfo = "LocalDomainInfo"
        case remoteDomainInfo = "RemoteDomainInfo"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionAlias = self.connectionAlias {
            try encodeContainer.encode(connectionAlias, forKey: .connectionAlias)
        }
        if let connectionId = self.connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let connectionMode = self.connectionMode {
            try encodeContainer.encode(connectionMode.rawValue, forKey: .connectionMode)
        }
        if let connectionProperties = self.connectionProperties {
            try encodeContainer.encode(connectionProperties, forKey: .connectionProperties)
        }
        if let connectionStatus = self.connectionStatus {
            try encodeContainer.encode(connectionStatus, forKey: .connectionStatus)
        }
        if let localDomainInfo = self.localDomainInfo {
            try encodeContainer.encode(localDomainInfo, forKey: .localDomainInfo)
        }
        if let remoteDomainInfo = self.remoteDomainInfo {
            try encodeContainer.encode(remoteDomainInfo, forKey: .remoteDomainInfo)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let localDomainInfoDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainInformationContainer.self, forKey: .localDomainInfo)
        localDomainInfo = localDomainInfoDecoded
        let remoteDomainInfoDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainInformationContainer.self, forKey: .remoteDomainInfo)
        remoteDomainInfo = remoteDomainInfoDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let connectionAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionAlias)
        connectionAlias = connectionAliasDecoded
        let connectionStatusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OutboundConnectionStatus.self, forKey: .connectionStatus)
        connectionStatus = connectionStatusDecoded
        let connectionModeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ConnectionMode.self, forKey: .connectionMode)
        connectionMode = connectionModeDecoded
        let connectionPropertiesDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ConnectionProperties.self, forKey: .connectionProperties)
        connectionProperties = connectionPropertiesDecoded
    }
}

extension OpenSearchClientTypes {
    /// Specifies details about an outbound cross-cluster connection.
    public struct OutboundConnection: Swift.Equatable {
        /// Name of the connection.
        public var connectionAlias: Swift.String?
        /// Unique identifier of the connection.
        public var connectionId: Swift.String?
        /// The connection mode.
        public var connectionMode: OpenSearchClientTypes.ConnectionMode?
        /// Properties for the outbound connection.
        public var connectionProperties: OpenSearchClientTypes.ConnectionProperties?
        /// Status of the connection.
        public var connectionStatus: OpenSearchClientTypes.OutboundConnectionStatus?
        /// Information about the source (local) domain.
        public var localDomainInfo: OpenSearchClientTypes.DomainInformationContainer?
        /// Information about the destination (remote) domain.
        public var remoteDomainInfo: OpenSearchClientTypes.DomainInformationContainer?

        public init (
            connectionAlias: Swift.String? = nil,
            connectionId: Swift.String? = nil,
            connectionMode: OpenSearchClientTypes.ConnectionMode? = nil,
            connectionProperties: OpenSearchClientTypes.ConnectionProperties? = nil,
            connectionStatus: OpenSearchClientTypes.OutboundConnectionStatus? = nil,
            localDomainInfo: OpenSearchClientTypes.DomainInformationContainer? = nil,
            remoteDomainInfo: OpenSearchClientTypes.DomainInformationContainer? = nil
        )
        {
            self.connectionAlias = connectionAlias
            self.connectionId = connectionId
            self.connectionMode = connectionMode
            self.connectionProperties = connectionProperties
            self.connectionStatus = connectionStatus
            self.localDomainInfo = localDomainInfo
            self.remoteDomainInfo = remoteDomainInfo
        }
    }

}

extension OpenSearchClientTypes.OutboundConnectionStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case statusCode = "StatusCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let statusCode = self.statusCode {
            try encodeContainer.encode(statusCode.rawValue, forKey: .statusCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusCodeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OutboundConnectionStatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OpenSearchClientTypes {
    /// The status of an outbound cross-cluster connection.
    public struct OutboundConnectionStatus: Swift.Equatable {
        /// Verbose information for the outbound connection.
        public var message: Swift.String?
        /// The status code for the outbound connection. Can be one of the following:
        ///
        /// * VALIDATING - The outbound connection request is being validated.
        ///
        /// * VALIDATION_FAILED - Validation failed for the connection request.
        ///
        /// * PENDING_ACCEPTANCE: Outbound connection request is validated and is not yet accepted by the remote domain owner.
        ///
        /// * APPROVED - Outbound connection has been approved by the remote domain owner for getting provisioned.
        ///
        /// * PROVISIONING - Outbound connection request is in process.
        ///
        /// * ACTIVE - Outbound connection is active and ready to use.
        ///
        /// * REJECTING - Outbound connection rejection by remote domain owner is in progress.
        ///
        /// * REJECTED - Outbound connection request is rejected by remote domain owner.
        ///
        /// * DELETING - Outbound connection deletion is in progress.
        ///
        /// * DELETED - Outbound connection is deleted and can no longer be used.
        public var statusCode: OpenSearchClientTypes.OutboundConnectionStatusCode?

        public init (
            message: Swift.String? = nil,
            statusCode: OpenSearchClientTypes.OutboundConnectionStatusCode? = nil
        )
        {
            self.message = message
            self.statusCode = statusCode
        }
    }

}

extension OpenSearchClientTypes {
    public enum OutboundConnectionStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case approved
        case deleted
        case deleting
        case pendingAcceptance
        case provisioning
        case rejected
        case rejecting
        case validating
        case validationFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [OutboundConnectionStatusCode] {
            return [
                .active,
                .approved,
                .deleted,
                .deleting,
                .pendingAcceptance,
                .provisioning,
                .rejected,
                .rejecting,
                .validating,
                .validationFailed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .approved: return "APPROVED"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .pendingAcceptance: return "PENDING_ACCEPTANCE"
            case .provisioning: return "PROVISIONING"
            case .rejected: return "REJECTED"
            case .rejecting: return "REJECTING"
            case .validating: return "VALIDATING"
            case .validationFailed: return "VALIDATION_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OutboundConnectionStatusCode(rawValue: rawValue) ?? OutboundConnectionStatusCode.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes {
    /// The overall status value of the domain configuration change.
    public enum OverallChangeStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case pending
        case processing
        case sdkUnknown(Swift.String)

        public static var allCases: [OverallChangeStatus] {
            return [
                .completed,
                .failed,
                .pending,
                .processing,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .processing: return "PROCESSING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OverallChangeStatus(rawValue: rawValue) ?? OverallChangeStatus.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes.PackageDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availablePackageVersion = "AvailablePackageVersion"
        case createdAt = "CreatedAt"
        case errorDetails = "ErrorDetails"
        case lastUpdatedAt = "LastUpdatedAt"
        case packageDescription = "PackageDescription"
        case packageID = "PackageID"
        case packageName = "PackageName"
        case packageStatus = "PackageStatus"
        case packageType = "PackageType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availablePackageVersion = self.availablePackageVersion {
            try encodeContainer.encode(availablePackageVersion, forKey: .availablePackageVersion)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let errorDetails = self.errorDetails {
            try encodeContainer.encode(errorDetails, forKey: .errorDetails)
        }
        if let lastUpdatedAt = self.lastUpdatedAt {
            try encodeContainer.encodeTimestamp(lastUpdatedAt, format: .epochSeconds, forKey: .lastUpdatedAt)
        }
        if let packageDescription = self.packageDescription {
            try encodeContainer.encode(packageDescription, forKey: .packageDescription)
        }
        if let packageID = self.packageID {
            try encodeContainer.encode(packageID, forKey: .packageID)
        }
        if let packageName = self.packageName {
            try encodeContainer.encode(packageName, forKey: .packageName)
        }
        if let packageStatus = self.packageStatus {
            try encodeContainer.encode(packageStatus.rawValue, forKey: .packageStatus)
        }
        if let packageType = self.packageType {
            try encodeContainer.encode(packageType.rawValue, forKey: .packageType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageID)
        packageID = packageIDDecoded
        let packageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageName)
        packageName = packageNameDecoded
        let packageTypeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.PackageType.self, forKey: .packageType)
        packageType = packageTypeDecoded
        let packageDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageDescription)
        packageDescription = packageDescriptionDecoded
        let packageStatusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.PackageStatus.self, forKey: .packageStatus)
        packageStatus = packageStatusDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let availablePackageVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availablePackageVersion)
        availablePackageVersion = availablePackageVersionDecoded
        let errorDetailsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ErrorDetails.self, forKey: .errorDetails)
        errorDetails = errorDetailsDecoded
    }
}

extension OpenSearchClientTypes {
    /// Basic information about a package.
    public struct PackageDetails: Swift.Equatable {
        /// The package version.
        public var availablePackageVersion: Swift.String?
        /// The timestamp when the package was created.
        public var createdAt: ClientRuntime.Date?
        /// Additional information if the package is in an error state. Null otherwise.
        public var errorDetails: OpenSearchClientTypes.ErrorDetails?
        /// Date and time when the package was last updated.
        public var lastUpdatedAt: ClientRuntime.Date?
        /// User-specified description of the package.
        public var packageDescription: Swift.String?
        /// The unique identifier of the package.
        public var packageID: Swift.String?
        /// User-specified name of the package.
        public var packageName: Swift.String?
        /// Current status of the package.
        public var packageStatus: OpenSearchClientTypes.PackageStatus?
        /// The type of package.
        public var packageType: OpenSearchClientTypes.PackageType?

        public init (
            availablePackageVersion: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            errorDetails: OpenSearchClientTypes.ErrorDetails? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            packageDescription: Swift.String? = nil,
            packageID: Swift.String? = nil,
            packageName: Swift.String? = nil,
            packageStatus: OpenSearchClientTypes.PackageStatus? = nil,
            packageType: OpenSearchClientTypes.PackageType? = nil
        )
        {
            self.availablePackageVersion = availablePackageVersion
            self.createdAt = createdAt
            self.errorDetails = errorDetails
            self.lastUpdatedAt = lastUpdatedAt
            self.packageDescription = packageDescription
            self.packageID = packageID
            self.packageName = packageName
            self.packageStatus = packageStatus
            self.packageType = packageType
        }
    }

}

extension OpenSearchClientTypes.PackageSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3BucketName = "S3BucketName"
        case s3Key = "S3Key"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3BucketName = self.s3BucketName {
            try encodeContainer.encode(s3BucketName, forKey: .s3BucketName)
        }
        if let s3Key = self.s3Key {
            try encodeContainer.encode(s3Key, forKey: .s3Key)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3BucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3BucketName)
        s3BucketName = s3BucketNameDecoded
        let s3KeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Key)
        s3Key = s3KeyDecoded
    }
}

extension OpenSearchClientTypes {
    /// The Amazon S3 location to import the package from.
    public struct PackageSource: Swift.Equatable {
        /// The name of the Amazon S3 bucket containing the package.
        public var s3BucketName: Swift.String?
        /// Key (file name) of the package.
        public var s3Key: Swift.String?

        public init (
            s3BucketName: Swift.String? = nil,
            s3Key: Swift.String? = nil
        )
        {
            self.s3BucketName = s3BucketName
            self.s3Key = s3Key
        }
    }

}

extension OpenSearchClientTypes {
    public enum PackageStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case copying
        case copyFailed
        case deleted
        case deleteFailed
        case deleting
        case validating
        case validationFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [PackageStatus] {
            return [
                .available,
                .copying,
                .copyFailed,
                .deleted,
                .deleteFailed,
                .deleting,
                .validating,
                .validationFailed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .copying: return "COPYING"
            case .copyFailed: return "COPY_FAILED"
            case .deleted: return "DELETED"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case .validating: return "VALIDATING"
            case .validationFailed: return "VALIDATION_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PackageStatus(rawValue: rawValue) ?? PackageStatus.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes {
    public enum PackageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case txtDictionary
        case sdkUnknown(Swift.String)

        public static var allCases: [PackageType] {
            return [
                .txtDictionary,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .txtDictionary: return "TXT-DICTIONARY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PackageType(rawValue: rawValue) ?? PackageType.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes.PackageVersionHistory: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commitMessage = "CommitMessage"
        case createdAt = "CreatedAt"
        case packageVersion = "PackageVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let commitMessage = self.commitMessage {
            try encodeContainer.encode(commitMessage, forKey: .commitMessage)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let packageVersion = self.packageVersion {
            try encodeContainer.encode(packageVersion, forKey: .packageVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageVersion)
        packageVersion = packageVersionDecoded
        let commitMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .commitMessage)
        commitMessage = commitMessageDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}

extension OpenSearchClientTypes {
    /// Details about a package version.
    public struct PackageVersionHistory: Swift.Equatable {
        /// A message associated with the package version when it was uploaded.
        public var commitMessage: Swift.String?
        /// The date and time when the package was created.
        public var createdAt: ClientRuntime.Date?
        /// The package version.
        public var packageVersion: Swift.String?

        public init (
            commitMessage: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            packageVersion: Swift.String? = nil
        )
        {
            self.commitMessage = commitMessage
            self.createdAt = createdAt
            self.packageVersion = packageVersion
        }
    }

}

extension OpenSearchClientTypes {
    public enum PrincipalType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsAccount
        case awsService
        case sdkUnknown(Swift.String)

        public static var allCases: [PrincipalType] {
            return [
                .awsAccount,
                .awsService,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsAccount: return "AWS_ACCOUNT"
            case .awsService: return "AWS_SERVICE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PrincipalType(rawValue: rawValue) ?? PrincipalType.sdkUnknown(rawValue)
        }
    }
}

extension PurchaseReservedInstanceOfferingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceCount = "InstanceCount"
        case reservationName = "ReservationName"
        case reservedInstanceOfferingId = "ReservedInstanceOfferingId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceCount = self.instanceCount {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let reservationName = self.reservationName {
            try encodeContainer.encode(reservationName, forKey: .reservationName)
        }
        if let reservedInstanceOfferingId = self.reservedInstanceOfferingId {
            try encodeContainer.encode(reservedInstanceOfferingId, forKey: .reservedInstanceOfferingId)
        }
    }
}

extension PurchaseReservedInstanceOfferingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/opensearch/purchaseReservedInstanceOffering"
    }
}

/// Container for request parameters to the PurchaseReservedInstanceOffering operation.
public struct PurchaseReservedInstanceOfferingInput: Swift.Equatable {
    /// The number of OpenSearch instances to reserve.
    public var instanceCount: Swift.Int?
    /// A customer-specified identifier to track this reservation.
    /// This member is required.
    public var reservationName: Swift.String?
    /// The ID of the Reserved Instance offering to purchase.
    /// This member is required.
    public var reservedInstanceOfferingId: Swift.String?

    public init (
        instanceCount: Swift.Int? = nil,
        reservationName: Swift.String? = nil,
        reservedInstanceOfferingId: Swift.String? = nil
    )
    {
        self.instanceCount = instanceCount
        self.reservationName = reservationName
        self.reservedInstanceOfferingId = reservedInstanceOfferingId
    }
}

struct PurchaseReservedInstanceOfferingInputBody: Swift.Equatable {
    let reservedInstanceOfferingId: Swift.String?
    let reservationName: Swift.String?
    let instanceCount: Swift.Int?
}

extension PurchaseReservedInstanceOfferingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceCount = "InstanceCount"
        case reservationName = "ReservationName"
        case reservedInstanceOfferingId = "ReservedInstanceOfferingId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedInstanceOfferingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedInstanceOfferingId)
        reservedInstanceOfferingId = reservedInstanceOfferingIdDecoded
        let reservationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservationName)
        reservationName = reservationNameDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
    }
}

extension PurchaseReservedInstanceOfferingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PurchaseReservedInstanceOfferingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PurchaseReservedInstanceOfferingOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PurchaseReservedInstanceOfferingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PurchaseReservedInstanceOfferingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.reservationName = output.reservationName
            self.reservedInstanceId = output.reservedInstanceId
        } else {
            self.reservationName = nil
            self.reservedInstanceId = nil
        }
    }
}

/// Represents the output of a PurchaseReservedInstanceOffering operation.
public struct PurchaseReservedInstanceOfferingOutputResponse: Swift.Equatable {
    /// The customer-specified identifier used to track this reservation.
    public var reservationName: Swift.String?
    /// The ID of the Reserved Instance offering that was purchased.
    public var reservedInstanceId: Swift.String?

    public init (
        reservationName: Swift.String? = nil,
        reservedInstanceId: Swift.String? = nil
    )
    {
        self.reservationName = reservationName
        self.reservedInstanceId = reservedInstanceId
    }
}

struct PurchaseReservedInstanceOfferingOutputResponseBody: Swift.Equatable {
    let reservedInstanceId: Swift.String?
    let reservationName: Swift.String?
}

extension PurchaseReservedInstanceOfferingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reservationName = "ReservationName"
        case reservedInstanceId = "ReservedInstanceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedInstanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedInstanceId)
        reservedInstanceId = reservedInstanceIdDecoded
        let reservationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservationName)
        reservationName = reservationNameDecoded
    }
}

extension OpenSearchClientTypes.RecurringCharge: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recurringChargeAmount = "RecurringChargeAmount"
        case recurringChargeFrequency = "RecurringChargeFrequency"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let recurringChargeAmount = self.recurringChargeAmount {
            try encodeContainer.encode(recurringChargeAmount, forKey: .recurringChargeAmount)
        }
        if let recurringChargeFrequency = self.recurringChargeFrequency {
            try encodeContainer.encode(recurringChargeFrequency, forKey: .recurringChargeFrequency)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recurringChargeAmountDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .recurringChargeAmount)
        recurringChargeAmount = recurringChargeAmountDecoded
        let recurringChargeFrequencyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recurringChargeFrequency)
        recurringChargeFrequency = recurringChargeFrequencyDecoded
    }
}

extension OpenSearchClientTypes {
    /// Contains the specific price and frequency of a recurring charges for an OpenSearch Reserved Instance, or for a Reserved Instance offering.
    public struct RecurringCharge: Swift.Equatable {
        /// The monetary amount of the recurring charge.
        public var recurringChargeAmount: Swift.Double?
        /// The frequency of the recurring charge.
        public var recurringChargeFrequency: Swift.String?

        public init (
            recurringChargeAmount: Swift.Double? = nil,
            recurringChargeFrequency: Swift.String? = nil
        )
        {
            self.recurringChargeAmount = recurringChargeAmount
            self.recurringChargeFrequency = recurringChargeFrequency
        }
    }

}

extension RejectInboundConnectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let connectionId = connectionId else {
            return nil
        }
        return "/2021-01-01/opensearch/cc/inboundConnection/\(connectionId.urlPercentEncoding())/reject"
    }
}

/// Container for the request parameters to the RejectInboundConnection operation.
public struct RejectInboundConnectionInput: Swift.Equatable {
    /// The unique identifier of the inbound connection to reject.
    /// This member is required.
    public var connectionId: Swift.String?

    public init (
        connectionId: Swift.String? = nil
    )
    {
        self.connectionId = connectionId
    }
}

struct RejectInboundConnectionInputBody: Swift.Equatable {
}

extension RejectInboundConnectionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension RejectInboundConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RejectInboundConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RejectInboundConnectionOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RejectInboundConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RejectInboundConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.connection = output.connection
        } else {
            self.connection = nil
        }
    }
}

/// Represents the output of a RejectInboundConnection operation.
public struct RejectInboundConnectionOutputResponse: Swift.Equatable {
    /// Contains details about the rejected inbound connection.
    public var connection: OpenSearchClientTypes.InboundConnection?

    public init (
        connection: OpenSearchClientTypes.InboundConnection? = nil
    )
    {
        self.connection = connection
    }
}

struct RejectInboundConnectionOutputResponseBody: Swift.Equatable {
    let connection: OpenSearchClientTypes.InboundConnection?
}

extension RejectInboundConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connection = "Connection"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.InboundConnection.self, forKey: .connection)
        connection = connectionDecoded
    }
}

extension RemoveTagsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for string0 in tagKeys {
                try tagKeysContainer.encode(string0)
            }
        }
    }
}

extension RemoveTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/tags-removal"
    }
}

/// Container for the request parameters to the RemoveTags operation.
public struct RemoveTagsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the domain from which you want to delete the specified tags.
    /// This member is required.
    public var arn: Swift.String?
    /// The list of tag keys to remove from the domain.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        arn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.arn = arn
        self.tagKeys = tagKeys
    }
}

struct RemoveTagsInputBody: Swift.Equatable {
    let arn: Swift.String?
    let tagKeys: [Swift.String]?
}

extension RemoveTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension RemoveTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RemoveTagsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RemoveTagsOutputResponse: Swift.Equatable {

    public init () { }
}

extension OpenSearchClientTypes.ReservedInstance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingSubscriptionId = "BillingSubscriptionId"
        case currencyCode = "CurrencyCode"
        case duration = "Duration"
        case fixedPrice = "FixedPrice"
        case instanceCount = "InstanceCount"
        case instanceType = "InstanceType"
        case paymentOption = "PaymentOption"
        case recurringCharges = "RecurringCharges"
        case reservationName = "ReservationName"
        case reservedInstanceId = "ReservedInstanceId"
        case reservedInstanceOfferingId = "ReservedInstanceOfferingId"
        case startTime = "StartTime"
        case state = "State"
        case usagePrice = "UsagePrice"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let billingSubscriptionId = self.billingSubscriptionId {
            try encodeContainer.encode(billingSubscriptionId, forKey: .billingSubscriptionId)
        }
        if let currencyCode = self.currencyCode {
            try encodeContainer.encode(currencyCode, forKey: .currencyCode)
        }
        if duration != 0 {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let fixedPrice = self.fixedPrice {
            try encodeContainer.encode(fixedPrice, forKey: .fixedPrice)
        }
        if instanceCount != 0 {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let paymentOption = self.paymentOption {
            try encodeContainer.encode(paymentOption.rawValue, forKey: .paymentOption)
        }
        if let recurringCharges = recurringCharges {
            var recurringChargesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recurringCharges)
            for recurringcharge0 in recurringCharges {
                try recurringChargesContainer.encode(recurringcharge0)
            }
        }
        if let reservationName = self.reservationName {
            try encodeContainer.encode(reservationName, forKey: .reservationName)
        }
        if let reservedInstanceId = self.reservedInstanceId {
            try encodeContainer.encode(reservedInstanceId, forKey: .reservedInstanceId)
        }
        if let reservedInstanceOfferingId = self.reservedInstanceOfferingId {
            try encodeContainer.encode(reservedInstanceOfferingId, forKey: .reservedInstanceOfferingId)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let usagePrice = self.usagePrice {
            try encodeContainer.encode(usagePrice, forKey: .usagePrice)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservationName)
        reservationName = reservationNameDecoded
        let reservedInstanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedInstanceId)
        reservedInstanceId = reservedInstanceIdDecoded
        let billingSubscriptionIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .billingSubscriptionId)
        billingSubscriptionId = billingSubscriptionIdDecoded
        let reservedInstanceOfferingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedInstanceOfferingId)
        reservedInstanceOfferingId = reservedInstanceOfferingIdDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OpenSearchPartitionInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration) ?? 0
        duration = durationDecoded
        let fixedPriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let usagePriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceCount) ?? 0
        instanceCount = instanceCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let paymentOptionDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ReservedInstancePaymentOption.self, forKey: .paymentOption)
        paymentOption = paymentOptionDecoded
        let recurringChargesContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.RecurringCharge?].self, forKey: .recurringCharges)
        var recurringChargesDecoded0:[OpenSearchClientTypes.RecurringCharge]? = nil
        if let recurringChargesContainer = recurringChargesContainer {
            recurringChargesDecoded0 = [OpenSearchClientTypes.RecurringCharge]()
            for structure0 in recurringChargesContainer {
                if let structure0 = structure0 {
                    recurringChargesDecoded0?.append(structure0)
                }
            }
        }
        recurringCharges = recurringChargesDecoded0
    }
}

extension OpenSearchClientTypes {
    /// Details of an OpenSearch Reserved Instance.
    public struct ReservedInstance: Swift.Equatable {
        /// The unique identifier of the billing subscription.
        public var billingSubscriptionId: Swift.Int?
        /// The currency code for the offering.
        public var currencyCode: Swift.String?
        /// The duration, in seconds, for which the OpenSearch instance is reserved.
        public var duration: Swift.Int
        /// The upfront fixed charge you will paid to purchase the specific Reserved Instance offering.
        public var fixedPrice: Swift.Double?
        /// The number of OpenSearch instances that have been reserved.
        public var instanceCount: Swift.Int
        /// The OpenSearch instance type offered by theReserved Instance offering.
        public var instanceType: OpenSearchClientTypes.OpenSearchPartitionInstanceType?
        /// The payment option as defined in the Reserved Instance offering.
        public var paymentOption: OpenSearchClientTypes.ReservedInstancePaymentOption?
        /// The recurring charge to your account, regardless of whether you create any domains using the Reserved Instance offering.
        public var recurringCharges: [OpenSearchClientTypes.RecurringCharge]?
        /// The customer-specified identifier to track this reservation.
        public var reservationName: Swift.String?
        /// The unique identifier for the reservation.
        public var reservedInstanceId: Swift.String?
        /// The unique identifier of the Reserved Instance offering.
        public var reservedInstanceOfferingId: Swift.String?
        /// The date and time when the reservation was purchased.
        public var startTime: ClientRuntime.Date?
        /// The state of the Reserved Instance.
        public var state: Swift.String?
        /// The hourly rate at which you're charged for the domain using this Reserved Instance.
        public var usagePrice: Swift.Double?

        public init (
            billingSubscriptionId: Swift.Int? = nil,
            currencyCode: Swift.String? = nil,
            duration: Swift.Int = 0,
            fixedPrice: Swift.Double? = nil,
            instanceCount: Swift.Int = 0,
            instanceType: OpenSearchClientTypes.OpenSearchPartitionInstanceType? = nil,
            paymentOption: OpenSearchClientTypes.ReservedInstancePaymentOption? = nil,
            recurringCharges: [OpenSearchClientTypes.RecurringCharge]? = nil,
            reservationName: Swift.String? = nil,
            reservedInstanceId: Swift.String? = nil,
            reservedInstanceOfferingId: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            state: Swift.String? = nil,
            usagePrice: Swift.Double? = nil
        )
        {
            self.billingSubscriptionId = billingSubscriptionId
            self.currencyCode = currencyCode
            self.duration = duration
            self.fixedPrice = fixedPrice
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.paymentOption = paymentOption
            self.recurringCharges = recurringCharges
            self.reservationName = reservationName
            self.reservedInstanceId = reservedInstanceId
            self.reservedInstanceOfferingId = reservedInstanceOfferingId
            self.startTime = startTime
            self.state = state
            self.usagePrice = usagePrice
        }
    }

}

extension OpenSearchClientTypes.ReservedInstanceOffering: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currencyCode = "CurrencyCode"
        case duration = "Duration"
        case fixedPrice = "FixedPrice"
        case instanceType = "InstanceType"
        case paymentOption = "PaymentOption"
        case recurringCharges = "RecurringCharges"
        case reservedInstanceOfferingId = "ReservedInstanceOfferingId"
        case usagePrice = "UsagePrice"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currencyCode = self.currencyCode {
            try encodeContainer.encode(currencyCode, forKey: .currencyCode)
        }
        if duration != 0 {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let fixedPrice = self.fixedPrice {
            try encodeContainer.encode(fixedPrice, forKey: .fixedPrice)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let paymentOption = self.paymentOption {
            try encodeContainer.encode(paymentOption.rawValue, forKey: .paymentOption)
        }
        if let recurringCharges = recurringCharges {
            var recurringChargesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recurringCharges)
            for recurringcharge0 in recurringCharges {
                try recurringChargesContainer.encode(recurringcharge0)
            }
        }
        if let reservedInstanceOfferingId = self.reservedInstanceOfferingId {
            try encodeContainer.encode(reservedInstanceOfferingId, forKey: .reservedInstanceOfferingId)
        }
        if let usagePrice = self.usagePrice {
            try encodeContainer.encode(usagePrice, forKey: .usagePrice)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedInstanceOfferingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedInstanceOfferingId)
        reservedInstanceOfferingId = reservedInstanceOfferingIdDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OpenSearchPartitionInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration) ?? 0
        duration = durationDecoded
        let fixedPriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let usagePriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let paymentOptionDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ReservedInstancePaymentOption.self, forKey: .paymentOption)
        paymentOption = paymentOptionDecoded
        let recurringChargesContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.RecurringCharge?].self, forKey: .recurringCharges)
        var recurringChargesDecoded0:[OpenSearchClientTypes.RecurringCharge]? = nil
        if let recurringChargesContainer = recurringChargesContainer {
            recurringChargesDecoded0 = [OpenSearchClientTypes.RecurringCharge]()
            for structure0 in recurringChargesContainer {
                if let structure0 = structure0 {
                    recurringChargesDecoded0?.append(structure0)
                }
            }
        }
        recurringCharges = recurringChargesDecoded0
    }
}

extension OpenSearchClientTypes {
    /// Details of an OpenSearch Reserved Instance offering.
    public struct ReservedInstanceOffering: Swift.Equatable {
        /// The currency code for the Reserved Instance offering.
        public var currencyCode: Swift.String?
        /// The duration, in seconds, for which the offering will reserve the OpenSearch instance.
        public var duration: Swift.Int
        /// The upfront fixed charge you will pay to purchase the specific Reserved Instance offering.
        public var fixedPrice: Swift.Double?
        /// The OpenSearch instance type offered by the Reserved Instance offering.
        public var instanceType: OpenSearchClientTypes.OpenSearchPartitionInstanceType?
        /// Payment option for the Reserved Instance offering
        public var paymentOption: OpenSearchClientTypes.ReservedInstancePaymentOption?
        /// The recurring charge to your account, regardless of whether you creates any domains using the offering.
        public var recurringCharges: [OpenSearchClientTypes.RecurringCharge]?
        /// The unique identifier of the Reserved Instance offering.
        public var reservedInstanceOfferingId: Swift.String?
        /// The hourly rate at which you're charged for the domain using this Reserved Instance.
        public var usagePrice: Swift.Double?

        public init (
            currencyCode: Swift.String? = nil,
            duration: Swift.Int = 0,
            fixedPrice: Swift.Double? = nil,
            instanceType: OpenSearchClientTypes.OpenSearchPartitionInstanceType? = nil,
            paymentOption: OpenSearchClientTypes.ReservedInstancePaymentOption? = nil,
            recurringCharges: [OpenSearchClientTypes.RecurringCharge]? = nil,
            reservedInstanceOfferingId: Swift.String? = nil,
            usagePrice: Swift.Double? = nil
        )
        {
            self.currencyCode = currencyCode
            self.duration = duration
            self.fixedPrice = fixedPrice
            self.instanceType = instanceType
            self.paymentOption = paymentOption
            self.recurringCharges = recurringCharges
            self.reservedInstanceOfferingId = reservedInstanceOfferingId
            self.usagePrice = usagePrice
        }
    }

}

extension OpenSearchClientTypes {
    public enum ReservedInstancePaymentOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allUpfront
        case noUpfront
        case partialUpfront
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservedInstancePaymentOption] {
            return [
                .allUpfront,
                .noUpfront,
                .partialUpfront,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allUpfront: return "ALL_UPFRONT"
            case .noUpfront: return "NO_UPFRONT"
            case .partialUpfront: return "PARTIAL_UPFRONT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReservedInstancePaymentOption(rawValue: rawValue) ?? ReservedInstancePaymentOption.sdkUnknown(rawValue)
        }
    }
}

extension ResourceAlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An exception for creating a resource that already exists.
public struct ResourceAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceAlreadyExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An exception for accessing or deleting a resource that doesn't exist.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RevokeVpcEndpointAccessInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let account = self.account {
            try encodeContainer.encode(account, forKey: .account)
        }
    }
}

extension RevokeVpcEndpointAccessInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2021-01-01/opensearch/domain/\(domainName.urlPercentEncoding())/revokeVpcEndpointAccess"
    }
}

public struct RevokeVpcEndpointAccessInput: Swift.Equatable {
    /// The account ID to revoke access from.
    /// This member is required.
    public var account: Swift.String?
    /// The name of the OpenSearch Service domain.
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        account: Swift.String? = nil,
        domainName: Swift.String? = nil
    )
    {
        self.account = account
        self.domainName = domainName
    }
}

struct RevokeVpcEndpointAccessInputBody: Swift.Equatable {
    let account: Swift.String?
}

extension RevokeVpcEndpointAccessInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .account)
        account = accountDecoded
    }
}

extension RevokeVpcEndpointAccessOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RevokeVpcEndpointAccessOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RevokeVpcEndpointAccessOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RevokeVpcEndpointAccessOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RevokeVpcEndpointAccessOutputResponse: Swift.Equatable {

    public init () { }
}

extension OpenSearchClientTypes {
    /// The rollback state while disabling Auto-Tune for the domain.
    public enum RollbackOnDisable: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case defaultRollback
        case noRollback
        case sdkUnknown(Swift.String)

        public static var allCases: [RollbackOnDisable] {
            return [
                .defaultRollback,
                .noRollback,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .defaultRollback: return "DEFAULT_ROLLBACK"
            case .noRollback: return "NO_ROLLBACK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RollbackOnDisable(rawValue: rawValue) ?? RollbackOnDisable.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes.SAMLIdp: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityId = "EntityId"
        case metadataContent = "MetadataContent"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entityId = self.entityId {
            try encodeContainer.encode(entityId, forKey: .entityId)
        }
        if let metadataContent = self.metadataContent {
            try encodeContainer.encode(metadataContent, forKey: .metadataContent)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metadataContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metadataContent)
        metadataContent = metadataContentDecoded
        let entityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityId)
        entityId = entityIdDecoded
    }
}

extension OpenSearchClientTypes {
    /// The SAML identity povider information.
    public struct SAMLIdp: Swift.Equatable {
        /// The unique entity ID of the application in the SAML identity provider.
        /// This member is required.
        public var entityId: Swift.String?
        /// The metadata of the SAML application, in XML format.
        /// This member is required.
        public var metadataContent: Swift.String?

        public init (
            entityId: Swift.String? = nil,
            metadataContent: Swift.String? = nil
        )
        {
            self.entityId = entityId
            self.metadataContent = metadataContent
        }
    }

}

extension OpenSearchClientTypes.SAMLOptionsInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case idp = "Idp"
        case masterBackendRole = "MasterBackendRole"
        case masterUserName = "MasterUserName"
        case rolesKey = "RolesKey"
        case sessionTimeoutMinutes = "SessionTimeoutMinutes"
        case subjectKey = "SubjectKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let idp = self.idp {
            try encodeContainer.encode(idp, forKey: .idp)
        }
        if let masterBackendRole = self.masterBackendRole {
            try encodeContainer.encode(masterBackendRole, forKey: .masterBackendRole)
        }
        if let masterUserName = self.masterUserName {
            try encodeContainer.encode(masterUserName, forKey: .masterUserName)
        }
        if let rolesKey = self.rolesKey {
            try encodeContainer.encode(rolesKey, forKey: .rolesKey)
        }
        if let sessionTimeoutMinutes = self.sessionTimeoutMinutes {
            try encodeContainer.encode(sessionTimeoutMinutes, forKey: .sessionTimeoutMinutes)
        }
        if let subjectKey = self.subjectKey {
            try encodeContainer.encode(subjectKey, forKey: .subjectKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let idpDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.SAMLIdp.self, forKey: .idp)
        idp = idpDecoded
        let masterUserNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserName)
        masterUserName = masterUserNameDecoded
        let masterBackendRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterBackendRole)
        masterBackendRole = masterBackendRoleDecoded
        let subjectKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subjectKey)
        subjectKey = subjectKeyDecoded
        let rolesKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rolesKey)
        rolesKey = rolesKeyDecoded
        let sessionTimeoutMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sessionTimeoutMinutes)
        sessionTimeoutMinutes = sessionTimeoutMinutesDecoded
    }
}

extension OpenSearchClientTypes.SAMLOptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SAMLOptionsInput(enabled: \(Swift.String(describing: enabled)), idp: \(Swift.String(describing: idp)), masterBackendRole: \(Swift.String(describing: masterBackendRole)), rolesKey: \(Swift.String(describing: rolesKey)), sessionTimeoutMinutes: \(Swift.String(describing: sessionTimeoutMinutes)), subjectKey: \(Swift.String(describing: subjectKey)), masterUserName: \"CONTENT_REDACTED\")"}
}

extension OpenSearchClientTypes {
    /// The SAML authentication configuration for an Amazon OpenSearch Service domain.
    public struct SAMLOptionsInput: Swift.Equatable {
        /// True to enable SAML authentication for a domain.
        public var enabled: Swift.Bool?
        /// The SAML Identity Provider's information.
        public var idp: OpenSearchClientTypes.SAMLIdp?
        /// The backend role that the SAML master user is mapped to.
        public var masterBackendRole: Swift.String?
        /// The SAML master user name, which is stored in the domain's internal user database.
        public var masterUserName: Swift.String?
        /// Element of the SAML assertion to use for backend roles. Default is roles.
        public var rolesKey: Swift.String?
        /// The duration, in minutes, after which a user session becomes inactive. Acceptable values are between 1 and 1440, and the default value is 60.
        public var sessionTimeoutMinutes: Swift.Int?
        /// Element of the SAML assertion to use for the user name. Default is NameID.
        public var subjectKey: Swift.String?

        public init (
            enabled: Swift.Bool? = nil,
            idp: OpenSearchClientTypes.SAMLIdp? = nil,
            masterBackendRole: Swift.String? = nil,
            masterUserName: Swift.String? = nil,
            rolesKey: Swift.String? = nil,
            sessionTimeoutMinutes: Swift.Int? = nil,
            subjectKey: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.idp = idp
            self.masterBackendRole = masterBackendRole
            self.masterUserName = masterUserName
            self.rolesKey = rolesKey
            self.sessionTimeoutMinutes = sessionTimeoutMinutes
            self.subjectKey = subjectKey
        }
    }

}

extension OpenSearchClientTypes.SAMLOptionsOutput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case idp = "Idp"
        case rolesKey = "RolesKey"
        case sessionTimeoutMinutes = "SessionTimeoutMinutes"
        case subjectKey = "SubjectKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let idp = self.idp {
            try encodeContainer.encode(idp, forKey: .idp)
        }
        if let rolesKey = self.rolesKey {
            try encodeContainer.encode(rolesKey, forKey: .rolesKey)
        }
        if let sessionTimeoutMinutes = self.sessionTimeoutMinutes {
            try encodeContainer.encode(sessionTimeoutMinutes, forKey: .sessionTimeoutMinutes)
        }
        if let subjectKey = self.subjectKey {
            try encodeContainer.encode(subjectKey, forKey: .subjectKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let idpDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.SAMLIdp.self, forKey: .idp)
        idp = idpDecoded
        let subjectKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subjectKey)
        subjectKey = subjectKeyDecoded
        let rolesKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rolesKey)
        rolesKey = rolesKeyDecoded
        let sessionTimeoutMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sessionTimeoutMinutes)
        sessionTimeoutMinutes = sessionTimeoutMinutesDecoded
    }
}

extension OpenSearchClientTypes {
    /// Describes the SAML application configured for the domain.
    public struct SAMLOptionsOutput: Swift.Equatable {
        /// True if SAML is enabled.
        public var enabled: Swift.Bool?
        /// Describes the SAML identity provider's information.
        public var idp: OpenSearchClientTypes.SAMLIdp?
        /// The key used for matching the SAML roles attribute.
        public var rolesKey: Swift.String?
        /// The duration, in minutes, after which a user session becomes inactive.
        public var sessionTimeoutMinutes: Swift.Int?
        /// The key used for matching the SAML subject attribute.
        public var subjectKey: Swift.String?

        public init (
            enabled: Swift.Bool? = nil,
            idp: OpenSearchClientTypes.SAMLIdp? = nil,
            rolesKey: Swift.String? = nil,
            sessionTimeoutMinutes: Swift.Int? = nil,
            subjectKey: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.idp = idp
            self.rolesKey = rolesKey
            self.sessionTimeoutMinutes = sessionTimeoutMinutes
            self.subjectKey = subjectKey
        }
    }

}

extension OpenSearchClientTypes {
    /// The Auto-Tune action type.
    public enum ScheduledAutoTuneActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case jvmHeapSizeTuning
        case jvmYoungGenTuning
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduledAutoTuneActionType] {
            return [
                .jvmHeapSizeTuning,
                .jvmYoungGenTuning,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .jvmHeapSizeTuning: return "JVM_HEAP_SIZE_TUNING"
            case .jvmYoungGenTuning: return "JVM_YOUNG_GEN_TUNING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScheduledAutoTuneActionType(rawValue: rawValue) ?? ScheduledAutoTuneActionType.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes.ScheduledAutoTuneDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case actionType = "ActionType"
        case date = "Date"
        case severity = "Severity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let actionType = self.actionType {
            try encodeContainer.encode(actionType.rawValue, forKey: .actionType)
        }
        if let date = self.date {
            try encodeContainer.encodeTimestamp(date, format: .epochSeconds, forKey: .date)
        }
        if let severity = self.severity {
            try encodeContainer.encode(severity.rawValue, forKey: .severity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .date)
        date = dateDecoded
        let actionTypeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ScheduledAutoTuneActionType.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let actionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .action)
        action = actionDecoded
        let severityDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ScheduledAutoTuneSeverityType.self, forKey: .severity)
        severity = severityDecoded
    }
}

extension OpenSearchClientTypes {
    /// Specifies details about a scheduled Auto-Tune action. For more information, see [Auto-Tune for Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/auto-tune.html).
    public struct ScheduledAutoTuneDetails: Swift.Equatable {
        /// A description of the Auto-Tune action.
        public var action: Swift.String?
        /// The type of Auto-Tune action.
        public var actionType: OpenSearchClientTypes.ScheduledAutoTuneActionType?
        /// The date and time when the Auto-Tune action is scheduled for the domain.
        public var date: ClientRuntime.Date?
        /// The severity of the Auto-Tune action. Valid values are LOW, MEDIUM, and HIGH.
        public var severity: OpenSearchClientTypes.ScheduledAutoTuneSeverityType?

        public init (
            action: Swift.String? = nil,
            actionType: OpenSearchClientTypes.ScheduledAutoTuneActionType? = nil,
            date: ClientRuntime.Date? = nil,
            severity: OpenSearchClientTypes.ScheduledAutoTuneSeverityType? = nil
        )
        {
            self.action = action
            self.actionType = actionType
            self.date = date
            self.severity = severity
        }
    }

}

extension OpenSearchClientTypes {
    /// The Auto-Tune action severity.
    public enum ScheduledAutoTuneSeverityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case high
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduledAutoTuneSeverityType] {
            return [
                .high,
                .low,
                .medium,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScheduledAutoTuneSeverityType(rawValue: rawValue) ?? ScheduledAutoTuneSeverityType.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes.ServiceSoftwareOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automatedUpdateDate = "AutomatedUpdateDate"
        case cancellable = "Cancellable"
        case currentVersion = "CurrentVersion"
        case description = "Description"
        case newVersion = "NewVersion"
        case optionalDeployment = "OptionalDeployment"
        case updateAvailable = "UpdateAvailable"
        case updateStatus = "UpdateStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let automatedUpdateDate = self.automatedUpdateDate {
            try encodeContainer.encodeTimestamp(automatedUpdateDate, format: .epochSeconds, forKey: .automatedUpdateDate)
        }
        if let cancellable = self.cancellable {
            try encodeContainer.encode(cancellable, forKey: .cancellable)
        }
        if let currentVersion = self.currentVersion {
            try encodeContainer.encode(currentVersion, forKey: .currentVersion)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let newVersion = self.newVersion {
            try encodeContainer.encode(newVersion, forKey: .newVersion)
        }
        if let optionalDeployment = self.optionalDeployment {
            try encodeContainer.encode(optionalDeployment, forKey: .optionalDeployment)
        }
        if let updateAvailable = self.updateAvailable {
            try encodeContainer.encode(updateAvailable, forKey: .updateAvailable)
        }
        if let updateStatus = self.updateStatus {
            try encodeContainer.encode(updateStatus.rawValue, forKey: .updateStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let currentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentVersion)
        currentVersion = currentVersionDecoded
        let newVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .newVersion)
        newVersion = newVersionDecoded
        let updateAvailableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .updateAvailable)
        updateAvailable = updateAvailableDecoded
        let cancellableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .cancellable)
        cancellable = cancellableDecoded
        let updateStatusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DeploymentStatus.self, forKey: .updateStatus)
        updateStatus = updateStatusDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let automatedUpdateDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .automatedUpdateDate)
        automatedUpdateDate = automatedUpdateDateDecoded
        let optionalDeploymentDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .optionalDeployment)
        optionalDeployment = optionalDeploymentDecoded
    }
}

extension OpenSearchClientTypes {
    /// The current status of the service software for an Amazon OpenSearch Service domain. For more information, see [Service software updates in Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/service-software.html).
    public struct ServiceSoftwareOptions: Swift.Equatable {
        /// The timestamp, in Epoch time, until which you can manually request a service software update. After this date, we automatically update your service software.
        public var automatedUpdateDate: ClientRuntime.Date?
        /// True if you're able to cancel your service software version update. False if you can't cancel your service software update.
        public var cancellable: Swift.Bool?
        /// The current service software version present on the domain.
        public var currentVersion: Swift.String?
        /// A description of the service software update status.
        public var description: Swift.String?
        /// The new service software version, if one is available.
        public var newVersion: Swift.String?
        /// True if a service software is never automatically updated. False if a service software is automatically updated after the automated update date.
        public var optionalDeployment: Swift.Bool?
        /// True if you're able to update your service software version. False if you can't update your service software version.
        public var updateAvailable: Swift.Bool?
        /// The status of your service software update.
        public var updateStatus: OpenSearchClientTypes.DeploymentStatus?

        public init (
            automatedUpdateDate: ClientRuntime.Date? = nil,
            cancellable: Swift.Bool? = nil,
            currentVersion: Swift.String? = nil,
            description: Swift.String? = nil,
            newVersion: Swift.String? = nil,
            optionalDeployment: Swift.Bool? = nil,
            updateAvailable: Swift.Bool? = nil,
            updateStatus: OpenSearchClientTypes.DeploymentStatus? = nil
        )
        {
            self.automatedUpdateDate = automatedUpdateDate
            self.cancellable = cancellable
            self.currentVersion = currentVersion
            self.description = description
            self.newVersion = newVersion
            self.optionalDeployment = optionalDeployment
            self.updateAvailable = updateAvailable
            self.updateStatus = updateStatus
        }
    }

}

extension OpenSearchClientTypes.SnapshotOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automatedSnapshotStartHour = "AutomatedSnapshotStartHour"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let automatedSnapshotStartHour = self.automatedSnapshotStartHour {
            try encodeContainer.encode(automatedSnapshotStartHour, forKey: .automatedSnapshotStartHour)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let automatedSnapshotStartHourDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automatedSnapshotStartHour)
        automatedSnapshotStartHour = automatedSnapshotStartHourDecoded
    }
}

extension OpenSearchClientTypes {
    /// The time, in UTC format, when OpenSearch Service takes a daily automated snapshot of the specified domain. Default is 0 hours.
    public struct SnapshotOptions: Swift.Equatable {
        /// The time, in UTC format, when OpenSearch Service takes a daily automated snapshot of the specified domain. Default is 0 hours.
        public var automatedSnapshotStartHour: Swift.Int?

        public init (
            automatedSnapshotStartHour: Swift.Int? = nil
        )
        {
            self.automatedSnapshotStartHour = automatedSnapshotStartHour
        }
    }

}

extension OpenSearchClientTypes.SnapshotOptionsStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.SnapshotOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension OpenSearchClientTypes {
    /// Container for information about a daily automated snapshot for an OpenSearch Service domain.
    public struct SnapshotOptionsStatus: Swift.Equatable {
        /// The daily snapshot options specified for the domain.
        /// This member is required.
        public var options: OpenSearchClientTypes.SnapshotOptions?
        /// The status of a daily automated snapshot.
        /// This member is required.
        public var status: OpenSearchClientTypes.OptionStatus?

        public init (
            options: OpenSearchClientTypes.SnapshotOptions? = nil,
            status: OpenSearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension StartServiceSoftwareUpdateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
    }
}

extension StartServiceSoftwareUpdateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/opensearch/serviceSoftwareUpdate/start"
    }
}

/// Container for the request parameters to the StartServiceSoftwareUpdate operation.
public struct StartServiceSoftwareUpdateInput: Swift.Equatable {
    /// The name of the domain that you want to update to the latest service software.
    /// This member is required.
    public var domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct StartServiceSoftwareUpdateInputBody: Swift.Equatable {
    let domainName: Swift.String?
}

extension StartServiceSoftwareUpdateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
    }
}

extension StartServiceSoftwareUpdateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartServiceSoftwareUpdateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartServiceSoftwareUpdateOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartServiceSoftwareUpdateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartServiceSoftwareUpdateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.serviceSoftwareOptions = output.serviceSoftwareOptions
        } else {
            self.serviceSoftwareOptions = nil
        }
    }
}

/// Represents the output of a StartServiceSoftwareUpdate operation. Contains the status of the update.
public struct StartServiceSoftwareUpdateOutputResponse: Swift.Equatable {
    /// The current status of the OpenSearch Service software update.
    public var serviceSoftwareOptions: OpenSearchClientTypes.ServiceSoftwareOptions?

    public init (
        serviceSoftwareOptions: OpenSearchClientTypes.ServiceSoftwareOptions? = nil
    )
    {
        self.serviceSoftwareOptions = serviceSoftwareOptions
    }
}

struct StartServiceSoftwareUpdateOutputResponseBody: Swift.Equatable {
    let serviceSoftwareOptions: OpenSearchClientTypes.ServiceSoftwareOptions?
}

extension StartServiceSoftwareUpdateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serviceSoftwareOptions = "ServiceSoftwareOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceSoftwareOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ServiceSoftwareOptions.self, forKey: .serviceSoftwareOptions)
        serviceSoftwareOptions = serviceSoftwareOptionsDecoded
    }
}

extension OpenSearchClientTypes.StorageType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case storageSubTypeName = "StorageSubTypeName"
        case storageTypeLimits = "StorageTypeLimits"
        case storageTypeName = "StorageTypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let storageSubTypeName = self.storageSubTypeName {
            try encodeContainer.encode(storageSubTypeName, forKey: .storageSubTypeName)
        }
        if let storageTypeLimits = storageTypeLimits {
            var storageTypeLimitsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .storageTypeLimits)
            for storagetypelimit0 in storageTypeLimits {
                try storageTypeLimitsContainer.encode(storagetypelimit0)
            }
        }
        if let storageTypeName = self.storageTypeName {
            try encodeContainer.encode(storageTypeName, forKey: .storageTypeName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageTypeName)
        storageTypeName = storageTypeNameDecoded
        let storageSubTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageSubTypeName)
        storageSubTypeName = storageSubTypeNameDecoded
        let storageTypeLimitsContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.StorageTypeLimit?].self, forKey: .storageTypeLimits)
        var storageTypeLimitsDecoded0:[OpenSearchClientTypes.StorageTypeLimit]? = nil
        if let storageTypeLimitsContainer = storageTypeLimitsContainer {
            storageTypeLimitsDecoded0 = [OpenSearchClientTypes.StorageTypeLimit]()
            for structure0 in storageTypeLimitsContainer {
                if let structure0 = structure0 {
                    storageTypeLimitsDecoded0?.append(structure0)
                }
            }
        }
        storageTypeLimits = storageTypeLimitsDecoded0
    }
}

extension OpenSearchClientTypes {
    /// A list of storage types for an Amazon OpenSearch Service domain that are available for a given intance type.
    public struct StorageType: Swift.Equatable {
        /// The storage sub-type, such as gp3 or io1.
        public var storageSubTypeName: Swift.String?
        /// Limits that are applicable for the given storage type.
        public var storageTypeLimits: [OpenSearchClientTypes.StorageTypeLimit]?
        /// The name of the storage type.
        public var storageTypeName: Swift.String?

        public init (
            storageSubTypeName: Swift.String? = nil,
            storageTypeLimits: [OpenSearchClientTypes.StorageTypeLimit]? = nil,
            storageTypeName: Swift.String? = nil
        )
        {
            self.storageSubTypeName = storageSubTypeName
            self.storageTypeLimits = storageTypeLimits
            self.storageTypeName = storageTypeName
        }
    }

}

extension OpenSearchClientTypes.StorageTypeLimit: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limitName = "LimitName"
        case limitValues = "LimitValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limitName = self.limitName {
            try encodeContainer.encode(limitName, forKey: .limitName)
        }
        if let limitValues = limitValues {
            var limitValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .limitValues)
            for limitvalue0 in limitValues {
                try limitValuesContainer.encode(limitvalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .limitName)
        limitName = limitNameDecoded
        let limitValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .limitValues)
        var limitValuesDecoded0:[Swift.String]? = nil
        if let limitValuesContainer = limitValuesContainer {
            limitValuesDecoded0 = [Swift.String]()
            for string0 in limitValuesContainer {
                if let string0 = string0 {
                    limitValuesDecoded0?.append(string0)
                }
            }
        }
        limitValues = limitValuesDecoded0
    }
}

extension OpenSearchClientTypes {
    /// Limits that are applicable for the given Amazon OpenSearch Service storage type.
    public struct StorageTypeLimit: Swift.Equatable {
        /// Name of storage limits that are applicable for the given storage type. If StorageType is ebs, the following options are available:
        ///
        /// * MinimumVolumeSize - Minimum volume size that is available for the given storage type. Can be empty if not applicable.
        ///
        /// * MaximumVolumeSize - Maximum volume size that is available for the given storage type. Can be empty if not applicable.
        ///
        /// * MaximumIops - Maximum amount of IOPS that is available for the given the storage type. Can be empty if not applicable.
        ///
        /// * MinimumIops - Minimum amount of IOPS that is available for the given the storage type. Can be empty if not applicable.
        ///
        /// * MaximumThroughput - Maximum amount of throughput that is available for the given the storage type. Can be empty if not applicable.
        ///
        /// * MinimumThroughput - Minimum amount of throughput that is available for the given the storage type. Can be empty if not applicable.
        public var limitName: Swift.String?
        /// The limit values.
        public var limitValues: [Swift.String]?

        public init (
            limitName: Swift.String? = nil,
            limitValues: [Swift.String]? = nil
        )
        {
            self.limitName = limitName
            self.limitValues = limitValues
        }
    }

}

extension OpenSearchClientTypes {
    public enum TLSSecurityPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case policyMinTls10201907
        case policyMinTls12201907
        case sdkUnknown(Swift.String)

        public static var allCases: [TLSSecurityPolicy] {
            return [
                .policyMinTls10201907,
                .policyMinTls12201907,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .policyMinTls10201907: return "Policy-Min-TLS-1-0-2019-07"
            case .policyMinTls12201907: return "Policy-Min-TLS-1-2-2019-07"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TLSSecurityPolicy(rawValue: rawValue) ?? TLSSecurityPolicy.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension OpenSearchClientTypes {
    /// A tag (key-value pair) for an Amazon OpenSearch Service resource.
    public struct Tag: Swift.Equatable {
        /// The tag key. Tag keys must be unique for the domain to which they are attached.
        /// This member is required.
        public var key: Swift.String?
        /// The value assigned to the corresponding tag key. Tag values can be null and don't have to be unique in a tag set. For example, you can have a key value pair in a tag set of project : Trinity and cost-center : Trinity
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension OpenSearchClientTypes {
    /// The unit of a maintenance schedule duration. Valid value is HOUR.
    public enum TimeUnit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hours
        case sdkUnknown(Swift.String)

        public static var allCases: [TimeUnit] {
            return [
                .hours,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hours: return "HOURS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TimeUnit(rawValue: rawValue) ?? TimeUnit.sdkUnknown(rawValue)
        }
    }
}

extension UpdateDomainConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case clusterConfig = "ClusterConfig"
        case cognitoOptions = "CognitoOptions"
        case domainEndpointOptions = "DomainEndpointOptions"
        case dryRun = "DryRun"
        case dryRunMode = "DryRunMode"
        case ebsOptions = "EBSOptions"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case snapshotOptions = "SnapshotOptions"
        case vpcOptions = "VPCOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPolicies = self.accessPolicies {
            try encodeContainer.encode(accessPolicies, forKey: .accessPolicies)
        }
        if let advancedOptions = advancedOptions {
            var advancedOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .advancedOptions)
            for (dictKey0, advancedOptions0) in advancedOptions {
                try advancedOptionsContainer.encode(advancedOptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let advancedSecurityOptions = self.advancedSecurityOptions {
            try encodeContainer.encode(advancedSecurityOptions, forKey: .advancedSecurityOptions)
        }
        if let autoTuneOptions = self.autoTuneOptions {
            try encodeContainer.encode(autoTuneOptions, forKey: .autoTuneOptions)
        }
        if let clusterConfig = self.clusterConfig {
            try encodeContainer.encode(clusterConfig, forKey: .clusterConfig)
        }
        if let cognitoOptions = self.cognitoOptions {
            try encodeContainer.encode(cognitoOptions, forKey: .cognitoOptions)
        }
        if let domainEndpointOptions = self.domainEndpointOptions {
            try encodeContainer.encode(domainEndpointOptions, forKey: .domainEndpointOptions)
        }
        if let dryRun = self.dryRun {
            try encodeContainer.encode(dryRun, forKey: .dryRun)
        }
        if let dryRunMode = self.dryRunMode {
            try encodeContainer.encode(dryRunMode.rawValue, forKey: .dryRunMode)
        }
        if let ebsOptions = self.ebsOptions {
            try encodeContainer.encode(ebsOptions, forKey: .ebsOptions)
        }
        if let encryptionAtRestOptions = self.encryptionAtRestOptions {
            try encodeContainer.encode(encryptionAtRestOptions, forKey: .encryptionAtRestOptions)
        }
        if let logPublishingOptions = logPublishingOptions {
            var logPublishingOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .logPublishingOptions)
            for (dictKey0, logPublishingOptions0) in logPublishingOptions {
                try logPublishingOptionsContainer.encode(logPublishingOptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let nodeToNodeEncryptionOptions = self.nodeToNodeEncryptionOptions {
            try encodeContainer.encode(nodeToNodeEncryptionOptions, forKey: .nodeToNodeEncryptionOptions)
        }
        if let snapshotOptions = self.snapshotOptions {
            try encodeContainer.encode(snapshotOptions, forKey: .snapshotOptions)
        }
        if let vpcOptions = self.vpcOptions {
            try encodeContainer.encode(vpcOptions, forKey: .vpcOptions)
        }
    }
}

extension UpdateDomainConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let domainName = domainName else {
            return nil
        }
        return "/2021-01-01/opensearch/domain/\(domainName.urlPercentEncoding())/config"
    }
}

/// Container for the request parameters to the UpdateDomain operation.
public struct UpdateDomainConfigInput: Swift.Equatable {
    /// Identity and Access Management (IAM) access policy as a JSON-formatted string.
    public var accessPolicies: Swift.String?
    /// Key-value pairs to specify advanced configuration options. The following key-value pairs are supported:
    ///
    /// * "rest.action.multi.allow_explicit_index": "true" | "false" - Note the use of a string rather than a boolean. Specifies whether explicit references to indexes are allowed inside the body of HTTP requests. If you want to configure access policies for domain sub-resources, such as specific indexes and domain APIs, you must disable this property. Default is true.
    ///
    /// * "indices.fielddata.cache.size": "80"  - Note the use of a string rather than a boolean. Specifies the percentage of heap space allocated to field data. Default is unbounded.
    ///
    /// * "indices.query.bool.max_clause_count": "1024" - Note the use of a string rather than a boolean. Specifies the maximum number of clauses allowed in a Lucene boolean query. Default is 1,024. Queries with more than the permitted number of clauses result in a TooManyClauses error.
    ///
    /// * "override_main_response_version": "true" | "false" - Note the use of a string rather than a boolean. Specifies whether the domain reports its version as 7.10 to allow Elasticsearch OSS clients and plugins to continue working with it. Default is false when creating a domain and true when upgrading a domain.
    ///
    ///
    /// For more information, see [Advanced cluster parameters](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options).
    public var advancedOptions: [Swift.String:Swift.String]?
    /// Options for fine-grained access control.
    public var advancedSecurityOptions: OpenSearchClientTypes.AdvancedSecurityOptionsInput?
    /// Options for Auto-Tune.
    public var autoTuneOptions: OpenSearchClientTypes.AutoTuneOptions?
    /// Changes that you want to make to the cluster configuration, such as the instance type and number of EC2 instances.
    public var clusterConfig: OpenSearchClientTypes.ClusterConfig?
    /// Key-value pairs to configure Amazon Cognito authentication for OpenSearch Dashboards.
    public var cognitoOptions: OpenSearchClientTypes.CognitoOptions?
    /// Additional options for the domain endpoint, such as whether to require HTTPS for all traffic.
    public var domainEndpointOptions: OpenSearchClientTypes.DomainEndpointOptions?
    /// The name of the domain that you're updating.
    /// This member is required.
    public var domainName: Swift.String?
    /// This flag, when set to True, specifies whether the UpdateDomain request should return the results of a dry run analysis without actually applying the change. A dry run determines what type of deployment the update will cause.
    public var dryRun: Swift.Bool?
    /// The type of dry run to perform.
    ///
    /// * Basic only returns the type of deployment (blue/green or dynamic) that the update will cause.
    ///
    /// * Verbose runs an additional check to validate the changes you're making. For more information, see [Validating a domain update](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-configuration-changes#validation-check).
    public var dryRunMode: OpenSearchClientTypes.DryRunMode?
    /// The type and size of the EBS volume to attach to instances in the domain.
    public var ebsOptions: OpenSearchClientTypes.EBSOptions?
    /// Encryption at rest options for the domain.
    public var encryptionAtRestOptions: OpenSearchClientTypes.EncryptionAtRestOptions?
    /// Options to publish OpenSearch lots to Amazon CloudWatch Logs.
    public var logPublishingOptions: [Swift.String:OpenSearchClientTypes.LogPublishingOption]?
    /// Node-To-Node Encryption options for the domain.
    public var nodeToNodeEncryptionOptions: OpenSearchClientTypes.NodeToNodeEncryptionOptions?
    /// Option to set the time, in UTC format, for the daily automated snapshot. Default value is 0 hours.
    public var snapshotOptions: OpenSearchClientTypes.SnapshotOptions?
    /// Options to specify the subnets and security groups for a VPC endpoint. For more information, see [Launching your Amazon OpenSearch Service domains using a VPC](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/vpc.html).
    public var vpcOptions: OpenSearchClientTypes.VPCOptions?

    public init (
        accessPolicies: Swift.String? = nil,
        advancedOptions: [Swift.String:Swift.String]? = nil,
        advancedSecurityOptions: OpenSearchClientTypes.AdvancedSecurityOptionsInput? = nil,
        autoTuneOptions: OpenSearchClientTypes.AutoTuneOptions? = nil,
        clusterConfig: OpenSearchClientTypes.ClusterConfig? = nil,
        cognitoOptions: OpenSearchClientTypes.CognitoOptions? = nil,
        domainEndpointOptions: OpenSearchClientTypes.DomainEndpointOptions? = nil,
        domainName: Swift.String? = nil,
        dryRun: Swift.Bool? = nil,
        dryRunMode: OpenSearchClientTypes.DryRunMode? = nil,
        ebsOptions: OpenSearchClientTypes.EBSOptions? = nil,
        encryptionAtRestOptions: OpenSearchClientTypes.EncryptionAtRestOptions? = nil,
        logPublishingOptions: [Swift.String:OpenSearchClientTypes.LogPublishingOption]? = nil,
        nodeToNodeEncryptionOptions: OpenSearchClientTypes.NodeToNodeEncryptionOptions? = nil,
        snapshotOptions: OpenSearchClientTypes.SnapshotOptions? = nil,
        vpcOptions: OpenSearchClientTypes.VPCOptions? = nil
    )
    {
        self.accessPolicies = accessPolicies
        self.advancedOptions = advancedOptions
        self.advancedSecurityOptions = advancedSecurityOptions
        self.autoTuneOptions = autoTuneOptions
        self.clusterConfig = clusterConfig
        self.cognitoOptions = cognitoOptions
        self.domainEndpointOptions = domainEndpointOptions
        self.domainName = domainName
        self.dryRun = dryRun
        self.dryRunMode = dryRunMode
        self.ebsOptions = ebsOptions
        self.encryptionAtRestOptions = encryptionAtRestOptions
        self.logPublishingOptions = logPublishingOptions
        self.nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions
        self.snapshotOptions = snapshotOptions
        self.vpcOptions = vpcOptions
    }
}

struct UpdateDomainConfigInputBody: Swift.Equatable {
    let clusterConfig: OpenSearchClientTypes.ClusterConfig?
    let ebsOptions: OpenSearchClientTypes.EBSOptions?
    let snapshotOptions: OpenSearchClientTypes.SnapshotOptions?
    let vpcOptions: OpenSearchClientTypes.VPCOptions?
    let cognitoOptions: OpenSearchClientTypes.CognitoOptions?
    let advancedOptions: [Swift.String:Swift.String]?
    let accessPolicies: Swift.String?
    let logPublishingOptions: [Swift.String:OpenSearchClientTypes.LogPublishingOption]?
    let encryptionAtRestOptions: OpenSearchClientTypes.EncryptionAtRestOptions?
    let domainEndpointOptions: OpenSearchClientTypes.DomainEndpointOptions?
    let nodeToNodeEncryptionOptions: OpenSearchClientTypes.NodeToNodeEncryptionOptions?
    let advancedSecurityOptions: OpenSearchClientTypes.AdvancedSecurityOptionsInput?
    let autoTuneOptions: OpenSearchClientTypes.AutoTuneOptions?
    let dryRun: Swift.Bool?
    let dryRunMode: OpenSearchClientTypes.DryRunMode?
}

extension UpdateDomainConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case clusterConfig = "ClusterConfig"
        case cognitoOptions = "CognitoOptions"
        case domainEndpointOptions = "DomainEndpointOptions"
        case dryRun = "DryRun"
        case dryRunMode = "DryRunMode"
        case ebsOptions = "EBSOptions"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case snapshotOptions = "SnapshotOptions"
        case vpcOptions = "VPCOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterConfigDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ClusterConfig.self, forKey: .clusterConfig)
        clusterConfig = clusterConfigDecoded
        let ebsOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.EBSOptions.self, forKey: .ebsOptions)
        ebsOptions = ebsOptionsDecoded
        let snapshotOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.SnapshotOptions.self, forKey: .snapshotOptions)
        snapshotOptions = snapshotOptionsDecoded
        let vpcOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.VPCOptions.self, forKey: .vpcOptions)
        vpcOptions = vpcOptionsDecoded
        let cognitoOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.CognitoOptions.self, forKey: .cognitoOptions)
        cognitoOptions = cognitoOptionsDecoded
        let advancedOptionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .advancedOptions)
        var advancedOptionsDecoded0: [Swift.String:Swift.String]? = nil
        if let advancedOptionsContainer = advancedOptionsContainer {
            advancedOptionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in advancedOptionsContainer {
                if let string0 = string0 {
                    advancedOptionsDecoded0?[key0] = string0
                }
            }
        }
        advancedOptions = advancedOptionsDecoded0
        let accessPoliciesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPolicies)
        accessPolicies = accessPoliciesDecoded
        let logPublishingOptionsContainer = try containerValues.decodeIfPresent([Swift.String: OpenSearchClientTypes.LogPublishingOption?].self, forKey: .logPublishingOptions)
        var logPublishingOptionsDecoded0: [Swift.String:OpenSearchClientTypes.LogPublishingOption]? = nil
        if let logPublishingOptionsContainer = logPublishingOptionsContainer {
            logPublishingOptionsDecoded0 = [Swift.String:OpenSearchClientTypes.LogPublishingOption]()
            for (key0, logpublishingoption0) in logPublishingOptionsContainer {
                if let logpublishingoption0 = logpublishingoption0 {
                    logPublishingOptionsDecoded0?[key0] = logpublishingoption0
                }
            }
        }
        logPublishingOptions = logPublishingOptionsDecoded0
        let encryptionAtRestOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.EncryptionAtRestOptions.self, forKey: .encryptionAtRestOptions)
        encryptionAtRestOptions = encryptionAtRestOptionsDecoded
        let domainEndpointOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainEndpointOptions.self, forKey: .domainEndpointOptions)
        domainEndpointOptions = domainEndpointOptionsDecoded
        let nodeToNodeEncryptionOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.NodeToNodeEncryptionOptions.self, forKey: .nodeToNodeEncryptionOptions)
        nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptionsDecoded
        let advancedSecurityOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AdvancedSecurityOptionsInput.self, forKey: .advancedSecurityOptions)
        advancedSecurityOptions = advancedSecurityOptionsDecoded
        let autoTuneOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AutoTuneOptions.self, forKey: .autoTuneOptions)
        autoTuneOptions = autoTuneOptionsDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let dryRunModeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DryRunMode.self, forKey: .dryRunMode)
        dryRunMode = dryRunModeDecoded
    }
}

extension UpdateDomainConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDomainConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTypeException" : self = .invalidTypeException(try InvalidTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateDomainConfigOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case invalidTypeException(InvalidTypeException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDomainConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateDomainConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainConfig = output.domainConfig
            self.dryRunProgressStatus = output.dryRunProgressStatus
            self.dryRunResults = output.dryRunResults
        } else {
            self.domainConfig = nil
            self.dryRunProgressStatus = nil
            self.dryRunResults = nil
        }
    }
}

/// The results of an UpdateDomain request. Contains the status of the domain being updated.
public struct UpdateDomainConfigOutputResponse: Swift.Equatable {
    /// The status of the updated domain.
    /// This member is required.
    public var domainConfig: OpenSearchClientTypes.DomainConfig?
    /// The status of the dry run being performed on the domain, if any.
    public var dryRunProgressStatus: OpenSearchClientTypes.DryRunProgressStatus?
    /// Results of the dry run performed in the update domain request.
    public var dryRunResults: OpenSearchClientTypes.DryRunResults?

    public init (
        domainConfig: OpenSearchClientTypes.DomainConfig? = nil,
        dryRunProgressStatus: OpenSearchClientTypes.DryRunProgressStatus? = nil,
        dryRunResults: OpenSearchClientTypes.DryRunResults? = nil
    )
    {
        self.domainConfig = domainConfig
        self.dryRunProgressStatus = dryRunProgressStatus
        self.dryRunResults = dryRunResults
    }
}

struct UpdateDomainConfigOutputResponseBody: Swift.Equatable {
    let domainConfig: OpenSearchClientTypes.DomainConfig?
    let dryRunResults: OpenSearchClientTypes.DryRunResults?
    let dryRunProgressStatus: OpenSearchClientTypes.DryRunProgressStatus?
}

extension UpdateDomainConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainConfig = "DomainConfig"
        case dryRunProgressStatus = "DryRunProgressStatus"
        case dryRunResults = "DryRunResults"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainConfigDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainConfig.self, forKey: .domainConfig)
        domainConfig = domainConfigDecoded
        let dryRunResultsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DryRunResults.self, forKey: .dryRunResults)
        dryRunResults = dryRunResultsDecoded
        let dryRunProgressStatusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DryRunProgressStatus.self, forKey: .dryRunProgressStatus)
        dryRunProgressStatus = dryRunProgressStatusDecoded
    }
}

extension UpdatePackageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commitMessage = "CommitMessage"
        case packageDescription = "PackageDescription"
        case packageID = "PackageID"
        case packageSource = "PackageSource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let commitMessage = self.commitMessage {
            try encodeContainer.encode(commitMessage, forKey: .commitMessage)
        }
        if let packageDescription = self.packageDescription {
            try encodeContainer.encode(packageDescription, forKey: .packageDescription)
        }
        if let packageID = self.packageID {
            try encodeContainer.encode(packageID, forKey: .packageID)
        }
        if let packageSource = self.packageSource {
            try encodeContainer.encode(packageSource, forKey: .packageSource)
        }
    }
}

extension UpdatePackageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/packages/update"
    }
}

/// Container for request parameters to the UpdatePackage operation.
public struct UpdatePackageInput: Swift.Equatable {
    /// Commit message for the updated file, which is shown as part of GetPackageVersionHistoryResponse.
    public var commitMessage: Swift.String?
    /// A new description of the package.
    public var packageDescription: Swift.String?
    /// The unique identifier for the package.
    /// This member is required.
    public var packageID: Swift.String?
    /// Amazon S3 bucket and key for the package.
    /// This member is required.
    public var packageSource: OpenSearchClientTypes.PackageSource?

    public init (
        commitMessage: Swift.String? = nil,
        packageDescription: Swift.String? = nil,
        packageID: Swift.String? = nil,
        packageSource: OpenSearchClientTypes.PackageSource? = nil
    )
    {
        self.commitMessage = commitMessage
        self.packageDescription = packageDescription
        self.packageID = packageID
        self.packageSource = packageSource
    }
}

struct UpdatePackageInputBody: Swift.Equatable {
    let packageID: Swift.String?
    let packageSource: OpenSearchClientTypes.PackageSource?
    let packageDescription: Swift.String?
    let commitMessage: Swift.String?
}

extension UpdatePackageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commitMessage = "CommitMessage"
        case packageDescription = "PackageDescription"
        case packageID = "PackageID"
        case packageSource = "PackageSource"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageID)
        packageID = packageIDDecoded
        let packageSourceDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.PackageSource.self, forKey: .packageSource)
        packageSource = packageSourceDecoded
        let packageDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageDescription)
        packageDescription = packageDescriptionDecoded
        let commitMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .commitMessage)
        commitMessage = commitMessageDecoded
    }
}

extension UpdatePackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdatePackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdatePackageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case internalException(InternalException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdatePackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdatePackageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.packageDetails = output.packageDetails
        } else {
            self.packageDetails = nil
        }
    }
}

/// Container for the response returned by the UpdatePackage operation.
public struct UpdatePackageOutputResponse: Swift.Equatable {
    /// Information about a package.
    public var packageDetails: OpenSearchClientTypes.PackageDetails?

    public init (
        packageDetails: OpenSearchClientTypes.PackageDetails? = nil
    )
    {
        self.packageDetails = packageDetails
    }
}

struct UpdatePackageOutputResponseBody: Swift.Equatable {
    let packageDetails: OpenSearchClientTypes.PackageDetails?
}

extension UpdatePackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case packageDetails = "PackageDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageDetailsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.PackageDetails.self, forKey: .packageDetails)
        packageDetails = packageDetailsDecoded
    }
}

extension UpdateVpcEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vpcEndpointId = "VpcEndpointId"
        case vpcOptions = "VpcOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let vpcEndpointId = self.vpcEndpointId {
            try encodeContainer.encode(vpcEndpointId, forKey: .vpcEndpointId)
        }
        if let vpcOptions = self.vpcOptions {
            try encodeContainer.encode(vpcOptions, forKey: .vpcOptions)
        }
    }
}

extension UpdateVpcEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/opensearch/vpcEndpoints/update"
    }
}

public struct UpdateVpcEndpointInput: Swift.Equatable {
    /// The unique identifier of the endpoint.
    /// This member is required.
    public var vpcEndpointId: Swift.String?
    /// The security groups and/or subnets to add, remove, or modify.
    /// This member is required.
    public var vpcOptions: OpenSearchClientTypes.VPCOptions?

    public init (
        vpcEndpointId: Swift.String? = nil,
        vpcOptions: OpenSearchClientTypes.VPCOptions? = nil
    )
    {
        self.vpcEndpointId = vpcEndpointId
        self.vpcOptions = vpcOptions
    }
}

struct UpdateVpcEndpointInputBody: Swift.Equatable {
    let vpcEndpointId: Swift.String?
    let vpcOptions: OpenSearchClientTypes.VPCOptions?
}

extension UpdateVpcEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vpcEndpointId = "VpcEndpointId"
        case vpcOptions = "VpcOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointId)
        vpcEndpointId = vpcEndpointIdDecoded
        let vpcOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.VPCOptions.self, forKey: .vpcOptions)
        vpcOptions = vpcOptionsDecoded
    }
}

extension UpdateVpcEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateVpcEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateVpcEndpointOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case conflictException(ConflictException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateVpcEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateVpcEndpointOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.vpcEndpoint = output.vpcEndpoint
        } else {
            self.vpcEndpoint = nil
        }
    }
}

public struct UpdateVpcEndpointOutputResponse: Swift.Equatable {
    /// The endpoint to be updated.
    /// This member is required.
    public var vpcEndpoint: OpenSearchClientTypes.VpcEndpoint?

    public init (
        vpcEndpoint: OpenSearchClientTypes.VpcEndpoint? = nil
    )
    {
        self.vpcEndpoint = vpcEndpoint
    }
}

struct UpdateVpcEndpointOutputResponseBody: Swift.Equatable {
    let vpcEndpoint: OpenSearchClientTypes.VpcEndpoint?
}

extension UpdateVpcEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vpcEndpoint = "VpcEndpoint"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.VpcEndpoint.self, forKey: .vpcEndpoint)
        vpcEndpoint = vpcEndpointDecoded
    }
}

extension UpgradeDomainInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case advancedOptions = "AdvancedOptions"
        case domainName = "DomainName"
        case performCheckOnly = "PerformCheckOnly"
        case targetVersion = "TargetVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let advancedOptions = advancedOptions {
            var advancedOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .advancedOptions)
            for (dictKey0, advancedOptions0) in advancedOptions {
                try advancedOptionsContainer.encode(advancedOptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let performCheckOnly = self.performCheckOnly {
            try encodeContainer.encode(performCheckOnly, forKey: .performCheckOnly)
        }
        if let targetVersion = self.targetVersion {
            try encodeContainer.encode(targetVersion, forKey: .targetVersion)
        }
    }
}

extension UpgradeDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2021-01-01/opensearch/upgradeDomain"
    }
}

/// Container for the request parameters to the UpgradeDomain operation.
public struct UpgradeDomainInput: Swift.Equatable {
    /// Only supports the override_main_response_version parameter and not other advanced options. You can only include this option when upgrading to an OpenSearch version. Specifies whether the domain reports its version as 7.10 so that it continues to work with Elasticsearch OSS clients and plugins.
    public var advancedOptions: [Swift.String:Swift.String]?
    /// Name of the OpenSearch Service domain that you want to upgrade.
    /// This member is required.
    public var domainName: Swift.String?
    /// When true, indicates that an upgrade eligibility check needs to be performed. Does not actually perform the upgrade.
    public var performCheckOnly: Swift.Bool?
    /// OpenSearch or Elasticsearch version to which you want to upgrade, in the format Opensearch_X.Y or Elasticsearch_X.Y.
    /// This member is required.
    public var targetVersion: Swift.String?

    public init (
        advancedOptions: [Swift.String:Swift.String]? = nil,
        domainName: Swift.String? = nil,
        performCheckOnly: Swift.Bool? = nil,
        targetVersion: Swift.String? = nil
    )
    {
        self.advancedOptions = advancedOptions
        self.domainName = domainName
        self.performCheckOnly = performCheckOnly
        self.targetVersion = targetVersion
    }
}

struct UpgradeDomainInputBody: Swift.Equatable {
    let domainName: Swift.String?
    let targetVersion: Swift.String?
    let performCheckOnly: Swift.Bool?
    let advancedOptions: [Swift.String:Swift.String]?
}

extension UpgradeDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case advancedOptions = "AdvancedOptions"
        case domainName = "DomainName"
        case performCheckOnly = "PerformCheckOnly"
        case targetVersion = "TargetVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let targetVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetVersion)
        targetVersion = targetVersionDecoded
        let performCheckOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .performCheckOnly)
        performCheckOnly = performCheckOnlyDecoded
        let advancedOptionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .advancedOptions)
        var advancedOptionsDecoded0: [Swift.String:Swift.String]? = nil
        if let advancedOptionsContainer = advancedOptionsContainer {
            advancedOptionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in advancedOptionsContainer {
                if let string0 = string0 {
                    advancedOptionsDecoded0?[key0] = string0
                }
            }
        }
        advancedOptions = advancedOptionsDecoded0
    }
}

extension UpgradeDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpgradeDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpgradeDomainOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpgradeDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpgradeDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.advancedOptions = output.advancedOptions
            self.changeProgressDetails = output.changeProgressDetails
            self.domainName = output.domainName
            self.performCheckOnly = output.performCheckOnly
            self.targetVersion = output.targetVersion
            self.upgradeId = output.upgradeId
        } else {
            self.advancedOptions = nil
            self.changeProgressDetails = nil
            self.domainName = nil
            self.performCheckOnly = nil
            self.targetVersion = nil
            self.upgradeId = nil
        }
    }
}

/// Container for the response returned by UpgradeDomain operation.
public struct UpgradeDomainOutputResponse: Swift.Equatable {
    /// The advanced options configuration for the domain.
    public var advancedOptions: [Swift.String:Swift.String]?
    /// Container for information about a configuration change happening on a domain.
    public var changeProgressDetails: OpenSearchClientTypes.ChangeProgressDetails?
    /// The name of the domain that was upgraded.
    public var domainName: Swift.String?
    /// When true, indicates that an upgrade eligibility check was performed.
    public var performCheckOnly: Swift.Bool?
    /// OpenSearch or Elasticsearch version that the domain was upgraded to.
    public var targetVersion: Swift.String?
    /// The unique identifier of the domain upgrade.
    public var upgradeId: Swift.String?

    public init (
        advancedOptions: [Swift.String:Swift.String]? = nil,
        changeProgressDetails: OpenSearchClientTypes.ChangeProgressDetails? = nil,
        domainName: Swift.String? = nil,
        performCheckOnly: Swift.Bool? = nil,
        targetVersion: Swift.String? = nil,
        upgradeId: Swift.String? = nil
    )
    {
        self.advancedOptions = advancedOptions
        self.changeProgressDetails = changeProgressDetails
        self.domainName = domainName
        self.performCheckOnly = performCheckOnly
        self.targetVersion = targetVersion
        self.upgradeId = upgradeId
    }
}

struct UpgradeDomainOutputResponseBody: Swift.Equatable {
    let upgradeId: Swift.String?
    let domainName: Swift.String?
    let targetVersion: Swift.String?
    let performCheckOnly: Swift.Bool?
    let advancedOptions: [Swift.String:Swift.String]?
    let changeProgressDetails: OpenSearchClientTypes.ChangeProgressDetails?
}

extension UpgradeDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case advancedOptions = "AdvancedOptions"
        case changeProgressDetails = "ChangeProgressDetails"
        case domainName = "DomainName"
        case performCheckOnly = "PerformCheckOnly"
        case targetVersion = "TargetVersion"
        case upgradeId = "UpgradeId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let upgradeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .upgradeId)
        upgradeId = upgradeIdDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let targetVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetVersion)
        targetVersion = targetVersionDecoded
        let performCheckOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .performCheckOnly)
        performCheckOnly = performCheckOnlyDecoded
        let advancedOptionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .advancedOptions)
        var advancedOptionsDecoded0: [Swift.String:Swift.String]? = nil
        if let advancedOptionsContainer = advancedOptionsContainer {
            advancedOptionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in advancedOptionsContainer {
                if let string0 = string0 {
                    advancedOptionsDecoded0?[key0] = string0
                }
            }
        }
        advancedOptions = advancedOptionsDecoded0
        let changeProgressDetailsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ChangeProgressDetails.self, forKey: .changeProgressDetails)
        changeProgressDetails = changeProgressDetailsDecoded
    }
}

extension OpenSearchClientTypes.UpgradeHistory: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case startTimestamp = "StartTimestamp"
        case stepsList = "StepsList"
        case upgradeName = "UpgradeName"
        case upgradeStatus = "UpgradeStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let startTimestamp = self.startTimestamp {
            try encodeContainer.encodeTimestamp(startTimestamp, format: .epochSeconds, forKey: .startTimestamp)
        }
        if let stepsList = stepsList {
            var stepsListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stepsList)
            for upgradestepitem0 in stepsList {
                try stepsListContainer.encode(upgradestepitem0)
            }
        }
        if let upgradeName = self.upgradeName {
            try encodeContainer.encode(upgradeName, forKey: .upgradeName)
        }
        if let upgradeStatus = self.upgradeStatus {
            try encodeContainer.encode(upgradeStatus.rawValue, forKey: .upgradeStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let upgradeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .upgradeName)
        upgradeName = upgradeNameDecoded
        let startTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTimestamp)
        startTimestamp = startTimestampDecoded
        let upgradeStatusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.UpgradeStatus.self, forKey: .upgradeStatus)
        upgradeStatus = upgradeStatusDecoded
        let stepsListContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.UpgradeStepItem?].self, forKey: .stepsList)
        var stepsListDecoded0:[OpenSearchClientTypes.UpgradeStepItem]? = nil
        if let stepsListContainer = stepsListContainer {
            stepsListDecoded0 = [OpenSearchClientTypes.UpgradeStepItem]()
            for structure0 in stepsListContainer {
                if let structure0 = structure0 {
                    stepsListDecoded0?.append(structure0)
                }
            }
        }
        stepsList = stepsListDecoded0
    }
}

extension OpenSearchClientTypes {
    /// History of the last 10 upgrades and upgrade eligibility checks for an Amazon OpenSearch Service domain.
    public struct UpgradeHistory: Swift.Equatable {
        /// UTC timestamp at which the upgrade API call was made, in the format yyyy-MM-ddTHH:mm:ssZ.
        public var startTimestamp: ClientRuntime.Date?
        /// A list of each step performed as part of a specific upgrade or upgrade eligibility check.
        public var stepsList: [OpenSearchClientTypes.UpgradeStepItem]?
        /// A string that describes the upgrade.
        public var upgradeName: Swift.String?
        /// The current status of the upgrade. The status can take one of the following values:
        ///
        /// * In Progress
        ///
        /// * Succeeded
        ///
        /// * Succeeded with Issues
        ///
        /// * Failed
        public var upgradeStatus: OpenSearchClientTypes.UpgradeStatus?

        public init (
            startTimestamp: ClientRuntime.Date? = nil,
            stepsList: [OpenSearchClientTypes.UpgradeStepItem]? = nil,
            upgradeName: Swift.String? = nil,
            upgradeStatus: OpenSearchClientTypes.UpgradeStatus? = nil
        )
        {
            self.startTimestamp = startTimestamp
            self.stepsList = stepsList
            self.upgradeName = upgradeName
            self.upgradeStatus = upgradeStatus
        }
    }

}

extension OpenSearchClientTypes {
    public enum UpgradeStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case succeeded
        case succeededWithIssues
        case sdkUnknown(Swift.String)

        public static var allCases: [UpgradeStatus] {
            return [
                .failed,
                .inProgress,
                .succeeded,
                .succeededWithIssues,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .succeeded: return "SUCCEEDED"
            case .succeededWithIssues: return "SUCCEEDED_WITH_ISSUES"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UpgradeStatus(rawValue: rawValue) ?? UpgradeStatus.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes {
    public enum UpgradeStep: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case preUpgradeCheck
        case snapshot
        case upgrade
        case sdkUnknown(Swift.String)

        public static var allCases: [UpgradeStep] {
            return [
                .preUpgradeCheck,
                .snapshot,
                .upgrade,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .preUpgradeCheck: return "PRE_UPGRADE_CHECK"
            case .snapshot: return "SNAPSHOT"
            case .upgrade: return "UPGRADE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UpgradeStep(rawValue: rawValue) ?? UpgradeStep.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes.UpgradeStepItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case issues = "Issues"
        case progressPercent = "ProgressPercent"
        case upgradeStep = "UpgradeStep"
        case upgradeStepStatus = "UpgradeStepStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let issues = issues {
            var issuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .issues)
            for issue0 in issues {
                try issuesContainer.encode(issue0)
            }
        }
        if let progressPercent = self.progressPercent {
            try encodeContainer.encode(progressPercent, forKey: .progressPercent)
        }
        if let upgradeStep = self.upgradeStep {
            try encodeContainer.encode(upgradeStep.rawValue, forKey: .upgradeStep)
        }
        if let upgradeStepStatus = self.upgradeStepStatus {
            try encodeContainer.encode(upgradeStepStatus.rawValue, forKey: .upgradeStepStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let upgradeStepDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.UpgradeStep.self, forKey: .upgradeStep)
        upgradeStep = upgradeStepDecoded
        let upgradeStepStatusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.UpgradeStatus.self, forKey: .upgradeStepStatus)
        upgradeStepStatus = upgradeStepStatusDecoded
        let issuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .issues)
        var issuesDecoded0:[Swift.String]? = nil
        if let issuesContainer = issuesContainer {
            issuesDecoded0 = [Swift.String]()
            for string0 in issuesContainer {
                if let string0 = string0 {
                    issuesDecoded0?.append(string0)
                }
            }
        }
        issues = issuesDecoded0
        let progressPercentDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .progressPercent)
        progressPercent = progressPercentDecoded
    }
}

extension OpenSearchClientTypes {
    /// Represents a single step of an upgrade or upgrade eligibility check workflow.
    public struct UpgradeStepItem: Swift.Equatable {
        /// A list of strings containing detailed information about the errors encountered in a particular step.
        public var issues: [Swift.String]?
        /// The floating point value representing the progress percentage of a particular step.
        public var progressPercent: Swift.Double?
        /// One of three steps that an upgrade or upgrade eligibility check goes through:
        ///
        /// * PreUpgradeCheck
        ///
        /// * Snapshot
        ///
        /// * Upgrade
        public var upgradeStep: OpenSearchClientTypes.UpgradeStep?
        /// The current status of the upgrade. The status can take one of the following values:
        ///
        /// * In Progress
        ///
        /// * Succeeded
        ///
        /// * Succeeded with Issues
        ///
        /// * Failed
        public var upgradeStepStatus: OpenSearchClientTypes.UpgradeStatus?

        public init (
            issues: [Swift.String]? = nil,
            progressPercent: Swift.Double? = nil,
            upgradeStep: OpenSearchClientTypes.UpgradeStep? = nil,
            upgradeStepStatus: OpenSearchClientTypes.UpgradeStatus? = nil
        )
        {
            self.issues = issues
            self.progressPercent = progressPercent
            self.upgradeStep = upgradeStep
            self.upgradeStepStatus = upgradeStepStatus
        }
    }

}

extension OpenSearchClientTypes.VPCDerivedInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "AvailabilityZones"
        case securityGroupIds = "SecurityGroupIds"
        case subnetIds = "SubnetIds"
        case vpcId = "VPCId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for string0 in availabilityZones {
                try availabilityZonesContainer.encode(string0)
            }
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for string0 in securityGroupIds {
                try securityGroupIdsContainer.encode(string0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for string0 in subnetIds {
                try subnetIdsContainer.encode(string0)
            }
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
    }
}

extension OpenSearchClientTypes {
    /// Information about the subnets and security groups for an Amazon OpenSearch Service domain provisioned within a virtual private cloud (VPC). For more information, see [Launching your Amazon OpenSearch Service domains using a VPC](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/vpc.html). This information only exists if the domain was created with VPCOptions.
    public struct VPCDerivedInfo: Swift.Equatable {
        /// The list of Availability Zones associated with the VPC subnets.
        public var availabilityZones: [Swift.String]?
        /// The list of security group IDs associated with the VPC endpoints for the domain.
        public var securityGroupIds: [Swift.String]?
        /// A list of subnet IDs associated with the VPC endpoints for the domain.
        public var subnetIds: [Swift.String]?
        /// The ID for your VPC. Amazon VPC generates this value when you create a VPC.
        public var vpcId: Swift.String?

        public init (
            availabilityZones: [Swift.String]? = nil,
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }
    }

}

extension OpenSearchClientTypes.VPCDerivedInfoStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.VPCDerivedInfo.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension OpenSearchClientTypes {
    /// Status of the VPC options for a specified domain.
    public struct VPCDerivedInfoStatus: Swift.Equatable {
        /// The VPC options for the specified domain.
        /// This member is required.
        public var options: OpenSearchClientTypes.VPCDerivedInfo?
        /// The status of the VPC options for the specified domain.
        /// This member is required.
        public var status: OpenSearchClientTypes.OptionStatus?

        public init (
            options: OpenSearchClientTypes.VPCDerivedInfo? = nil,
            status: OpenSearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension OpenSearchClientTypes.VPCOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityGroupIds = "SecurityGroupIds"
        case subnetIds = "SubnetIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for string0 in securityGroupIds {
                try securityGroupIdsContainer.encode(string0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for string0 in subnetIds {
                try subnetIdsContainer.encode(string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
    }
}

extension OpenSearchClientTypes {
    /// Options to specify the subnets and security groups for an Amazon OpenSearch Service VPC endpoint. For more information, see [Launching your Amazon OpenSearch Service domains using a VPC](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/vpc.html).
    public struct VPCOptions: Swift.Equatable {
        /// The list of security group IDs associated with the VPC endpoints for the domain. If you do not provide a security group ID, OpenSearch Service uses the default security group for the VPC.
        public var securityGroupIds: [Swift.String]?
        /// A list of subnet IDs associated with the VPC endpoints for the domain. If your domain uses multiple Availability Zones, you need to provide two subnet IDs, one per zone. Otherwise, provide only one.
        public var subnetIds: [Swift.String]?

        public init (
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }
    }

}

extension ValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An exception for missing or invalid input fields.
public struct ValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OpenSearchClientTypes.ValidationFailure: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OpenSearchClientTypes {
    /// A validation failure that occurred as the result of a pre-update validation check (verbose dry run) on a domain.
    public struct ValidationFailure: Swift.Equatable {
        /// The error code of the failure.
        public var code: Swift.String?
        /// A message corresponding to the failure.
        public var message: Swift.String?

        public init (
            code: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension OpenSearchClientTypes.VersionStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension OpenSearchClientTypes {
    /// The status of the the OpenSearch or Elasticsearch version options for the specified Amazon OpenSearch Service domain.
    public struct VersionStatus: Swift.Equatable {
        /// The OpenSearch or Elasticsearch version for the specified domain.
        /// This member is required.
        public var options: Swift.String?
        /// The status of the version options for the specified domain.
        /// This member is required.
        public var status: OpenSearchClientTypes.OptionStatus?

        public init (
            options: Swift.String? = nil,
            status: OpenSearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension OpenSearchClientTypes {
    /// The type of EBS volume that a domain uses. For more information, see [Configuring EBS-based storage](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-createupdatedomains.html#opensearch-createdomain-configure-ebs).
    public enum VolumeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case gp2
        case gp3
        case io1
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [VolumeType] {
            return [
                .gp2,
                .gp3,
                .io1,
                .standard,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .gp2: return "gp2"
            case .gp3: return "gp3"
            case .io1: return "io1"
            case .standard: return "standard"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VolumeType(rawValue: rawValue) ?? VolumeType.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes.VpcEndpoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainArn = "DomainArn"
        case endpoint = "Endpoint"
        case status = "Status"
        case vpcEndpointId = "VpcEndpointId"
        case vpcEndpointOwner = "VpcEndpointOwner"
        case vpcOptions = "VpcOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainArn = self.domainArn {
            try encodeContainer.encode(domainArn, forKey: .domainArn)
        }
        if let endpoint = self.endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let vpcEndpointId = self.vpcEndpointId {
            try encodeContainer.encode(vpcEndpointId, forKey: .vpcEndpointId)
        }
        if let vpcEndpointOwner = self.vpcEndpointOwner {
            try encodeContainer.encode(vpcEndpointOwner, forKey: .vpcEndpointOwner)
        }
        if let vpcOptions = self.vpcOptions {
            try encodeContainer.encode(vpcOptions, forKey: .vpcOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointId)
        vpcEndpointId = vpcEndpointIdDecoded
        let vpcEndpointOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointOwner)
        vpcEndpointOwner = vpcEndpointOwnerDecoded
        let domainArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainArn)
        domainArn = domainArnDecoded
        let vpcOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.VPCDerivedInfo.self, forKey: .vpcOptions)
        vpcOptions = vpcOptionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.VpcEndpointStatus.self, forKey: .status)
        status = statusDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpoint)
        endpoint = endpointDecoded
    }
}

extension OpenSearchClientTypes {
    /// The connection endpoint for connecting to an Amazon OpenSearch Service domain through a proxy.
    public struct VpcEndpoint: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the domain associated with the endpoint.
        public var domainArn: Swift.String?
        /// The connection endpoint ID for connecting to the domain.
        public var endpoint: Swift.String?
        /// The current status of the endpoint.
        public var status: OpenSearchClientTypes.VpcEndpointStatus?
        /// The unique identifier of the endpoint.
        public var vpcEndpointId: Swift.String?
        /// The creator of the endpoint.
        public var vpcEndpointOwner: Swift.String?
        /// Options to specify the subnets and security groups for an Amazon OpenSearch Service VPC endpoint.
        public var vpcOptions: OpenSearchClientTypes.VPCDerivedInfo?

        public init (
            domainArn: Swift.String? = nil,
            endpoint: Swift.String? = nil,
            status: OpenSearchClientTypes.VpcEndpointStatus? = nil,
            vpcEndpointId: Swift.String? = nil,
            vpcEndpointOwner: Swift.String? = nil,
            vpcOptions: OpenSearchClientTypes.VPCDerivedInfo? = nil
        )
        {
            self.domainArn = domainArn
            self.endpoint = endpoint
            self.status = status
            self.vpcEndpointId = vpcEndpointId
            self.vpcEndpointOwner = vpcEndpointOwner
            self.vpcOptions = vpcOptions
        }
    }

}

extension OpenSearchClientTypes.VpcEndpointError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case vpcEndpointId = "VpcEndpointId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode.rawValue, forKey: .errorCode)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let vpcEndpointId = self.vpcEndpointId {
            try encodeContainer.encode(vpcEndpointId, forKey: .vpcEndpointId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointId)
        vpcEndpointId = vpcEndpointIdDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.VpcEndpointErrorCode.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension OpenSearchClientTypes {
    /// Error information when attempting to describe an Amazon OpenSearch Service-managed VPC endpoint.
    public struct VpcEndpointError: Swift.Equatable {
        /// The code associated with the error.
        public var errorCode: OpenSearchClientTypes.VpcEndpointErrorCode?
        /// A message describing the error.
        public var errorMessage: Swift.String?
        /// The unique identifier of the endpoint.
        public var vpcEndpointId: Swift.String?

        public init (
            errorCode: OpenSearchClientTypes.VpcEndpointErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            vpcEndpointId: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.vpcEndpointId = vpcEndpointId
        }
    }

}

extension OpenSearchClientTypes {
    public enum VpcEndpointErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case endpointNotFound
        case serverError
        case sdkUnknown(Swift.String)

        public static var allCases: [VpcEndpointErrorCode] {
            return [
                .endpointNotFound,
                .serverError,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .endpointNotFound: return "ENDPOINT_NOT_FOUND"
            case .serverError: return "SERVER_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VpcEndpointErrorCode(rawValue: rawValue) ?? VpcEndpointErrorCode.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes {
    public enum VpcEndpointStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case createFailed
        case creating
        case deleteFailed
        case deleting
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [VpcEndpointStatus] {
            return [
                .active,
                .createFailed,
                .creating,
                .deleteFailed,
                .deleting,
                .updateFailed,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case .updateFailed: return "UPDATE_FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VpcEndpointStatus(rawValue: rawValue) ?? VpcEndpointStatus.sdkUnknown(rawValue)
        }
    }
}

extension OpenSearchClientTypes.VpcEndpointSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainArn = "DomainArn"
        case status = "Status"
        case vpcEndpointId = "VpcEndpointId"
        case vpcEndpointOwner = "VpcEndpointOwner"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainArn = self.domainArn {
            try encodeContainer.encode(domainArn, forKey: .domainArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let vpcEndpointId = self.vpcEndpointId {
            try encodeContainer.encode(vpcEndpointId, forKey: .vpcEndpointId)
        }
        if let vpcEndpointOwner = self.vpcEndpointOwner {
            try encodeContainer.encode(vpcEndpointOwner, forKey: .vpcEndpointOwner)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointId)
        vpcEndpointId = vpcEndpointIdDecoded
        let vpcEndpointOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointOwner)
        vpcEndpointOwner = vpcEndpointOwnerDecoded
        let domainArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainArn)
        domainArn = domainArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.VpcEndpointStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension OpenSearchClientTypes {
    /// Summary information for an Amazon OpenSearch Service-managed VPC endpoint.
    public struct VpcEndpointSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the domain associated with the endpoint.
        public var domainArn: Swift.String?
        /// The current status of the endpoint.
        public var status: OpenSearchClientTypes.VpcEndpointStatus?
        /// The unique identifier of the endpoint.
        public var vpcEndpointId: Swift.String?
        /// The creator of the endpoint.
        public var vpcEndpointOwner: Swift.String?

        public init (
            domainArn: Swift.String? = nil,
            status: OpenSearchClientTypes.VpcEndpointStatus? = nil,
            vpcEndpointId: Swift.String? = nil,
            vpcEndpointOwner: Swift.String? = nil
        )
        {
            self.domainArn = domainArn
            self.status = status
            self.vpcEndpointId = vpcEndpointId
            self.vpcEndpointOwner = vpcEndpointOwner
        }
    }

}

extension OpenSearchClientTypes.ZoneAwarenessConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZoneCount = "AvailabilityZoneCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZoneCount = self.availabilityZoneCount {
            try encodeContainer.encode(availabilityZoneCount, forKey: .availabilityZoneCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .availabilityZoneCount)
        availabilityZoneCount = availabilityZoneCountDecoded
    }
}

extension OpenSearchClientTypes {
    /// The zone awareness configuration for an Amazon OpenSearch Service domain.
    public struct ZoneAwarenessConfig: Swift.Equatable {
        /// If you enabled multiple Availability Zones, this value is the number of zones that you want the domain to use. Valid values are 2 and 3. If your domain is provisioned within a VPC, this value be equal to number of subnets.
        public var availabilityZoneCount: Swift.Int?

        public init (
            availabilityZoneCount: Swift.Int? = nil
        )
        {
            self.availabilityZoneCount = availabilityZoneCount
        }
    }

}
