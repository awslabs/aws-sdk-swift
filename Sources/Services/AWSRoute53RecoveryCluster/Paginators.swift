// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[ListRoutingControlsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListRoutingControlsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListRoutingControlsOutputResponse`
extension Route53RecoveryClusterClient {
    public func listRoutingControlsPaginated(input: ListRoutingControlsInput) -> ClientRuntime.PaginatorSequence<ListRoutingControlsInput, ListRoutingControlsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListRoutingControlsInput, ListRoutingControlsOutputResponse>(input: input, inputKey: \ListRoutingControlsInput.nextToken, outputKey: \ListRoutingControlsOutputResponse.nextToken, paginationFunction: self.listRoutingControls(input:))
    }
}

extension ListRoutingControlsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListRoutingControlsInput {
        return ListRoutingControlsInput(
            controlPanelArn: self.controlPanelArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
