//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox


public struct DeleteEventsConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct DeletePhoneNumberOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteRoomMembershipOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteRoomOutput: Swift.Sendable {

    public init() { }
}

public struct GetGlobalSettingsInput: Swift.Sendable {

    public init() { }
}

public struct GetPhoneNumberSettingsInput: Swift.Sendable {

    public init() { }
}

public struct UpdateGlobalSettingsOutput: Swift.Sendable {

    public init() { }
}

public struct UpdatePhoneNumberSettingsOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateUserSettingsOutput: Swift.Sendable {

    public init() { }
}

extension ChimeClientTypes {

    public enum ErrorCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accessdenied
        case badrequest
        case conflict
        case forbidden
        case notfound
        case phonenumberassociationsexist
        case preconditionfailed
        case resourcelimitexceeded
        case servicefailure
        case serviceunavailable
        case throttled
        case throttling
        case unauthorized
        case unprocessable
        case voiceconnectorgroupassociationsexist
        case sdkUnknown(Swift.String)

        public static var allCases: [ErrorCode] {
            return [
                .accessdenied,
                .badrequest,
                .conflict,
                .forbidden,
                .notfound,
                .phonenumberassociationsexist,
                .preconditionfailed,
                .resourcelimitexceeded,
                .servicefailure,
                .serviceunavailable,
                .throttled,
                .throttling,
                .unauthorized,
                .unprocessable,
                .voiceconnectorgroupassociationsexist
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accessdenied: return "AccessDenied"
            case .badrequest: return "BadRequest"
            case .conflict: return "Conflict"
            case .forbidden: return "Forbidden"
            case .notfound: return "NotFound"
            case .phonenumberassociationsexist: return "PhoneNumberAssociationsExist"
            case .preconditionfailed: return "PreconditionFailed"
            case .resourcelimitexceeded: return "ResourceLimitExceeded"
            case .servicefailure: return "ServiceFailure"
            case .serviceunavailable: return "ServiceUnavailable"
            case .throttled: return "Throttled"
            case .throttling: return "Throttling"
            case .unauthorized: return "Unauthorized"
            case .unprocessable: return "Unprocessable"
            case .voiceconnectorgroupassociationsexist: return "VoiceConnectorGroupAssociationsExist"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// You don't have permissions to perform the requested operation.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        public internal(set) var code: ChimeClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    ) {
        self.properties.code = code
        self.properties.message = message
    }
}

extension ChimeClientTypes {

    public enum AccountStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case suspended
        case sdkUnknown(Swift.String)

        public static var allCases: [AccountStatus] {
            return [
                .active,
                .suspended
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .suspended: return "Suspended"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeClientTypes {

    public enum AccountType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case enterprisedirectory
        case enterpriselwa
        case enterpriseoidc
        case team
        case sdkUnknown(Swift.String)

        public static var allCases: [AccountType] {
            return [
                .enterprisedirectory,
                .enterpriselwa,
                .enterpriseoidc,
                .team
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .enterprisedirectory: return "EnterpriseDirectory"
            case .enterpriselwa: return "EnterpriseLWA"
            case .enterpriseoidc: return "EnterpriseOIDC"
            case .team: return "Team"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeClientTypes {

    public enum License: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case basic
        case plus
        case pro
        case protrial
        case sdkUnknown(Swift.String)

        public static var allCases: [License] {
            return [
                .basic,
                .plus,
                .pro,
                .protrial
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .basic: return "Basic"
            case .plus: return "Plus"
            case .pro: return "Pro"
            case .protrial: return "ProTrial"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeClientTypes {

    /// An Active Directory (AD) group whose members are granted permission to act as delegates.
    public struct SigninDelegateGroup: Swift.Sendable {
        /// The group name.
        public var groupName: Swift.String?

        public init(
            groupName: Swift.String? = nil
        ) {
            self.groupName = groupName
        }
    }
}

extension ChimeClientTypes {

    /// The Amazon Chime account details. An AWS account can have multiple Amazon Chime accounts.
    public struct Account: Swift.Sendable {
        /// The Amazon Chime account ID.
        /// This member is required.
        public var accountId: Swift.String?
        /// The status of the account.
        public var accountStatus: ChimeClientTypes.AccountStatus?
        /// The Amazon Chime account type. For more information about different account types, see [Managing Your Amazon Chime Accounts](https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html) in the Amazon Chime Administration Guide.
        public var accountType: ChimeClientTypes.AccountType?
        /// The AWS account ID.
        /// This member is required.
        public var awsAccountId: Swift.String?
        /// The Amazon Chime account creation timestamp, in ISO 8601 format.
        public var createdTimestamp: Foundation.Date?
        /// The default license for the Amazon Chime account.
        public var defaultLicense: ChimeClientTypes.License?
        /// The Amazon Chime account name.
        /// This member is required.
        public var name: Swift.String?
        /// The sign-in delegate groups associated with the account.
        public var signinDelegateGroups: [ChimeClientTypes.SigninDelegateGroup]?
        /// Supported licenses for the Amazon Chime account.
        public var supportedLicenses: [ChimeClientTypes.License]?

        public init(
            accountId: Swift.String? = nil,
            accountStatus: ChimeClientTypes.AccountStatus? = nil,
            accountType: ChimeClientTypes.AccountType? = nil,
            awsAccountId: Swift.String? = nil,
            createdTimestamp: Foundation.Date? = nil,
            defaultLicense: ChimeClientTypes.License? = nil,
            name: Swift.String? = nil,
            signinDelegateGroups: [ChimeClientTypes.SigninDelegateGroup]? = nil,
            supportedLicenses: [ChimeClientTypes.License]? = nil
        ) {
            self.accountId = accountId
            self.accountStatus = accountStatus
            self.accountType = accountType
            self.awsAccountId = awsAccountId
            self.createdTimestamp = createdTimestamp
            self.defaultLicense = defaultLicense
            self.name = name
            self.signinDelegateGroups = signinDelegateGroups
            self.supportedLicenses = supportedLicenses
        }
    }
}

extension ChimeClientTypes {

    /// Settings related to the Amazon Chime account. This includes settings that start or stop remote control of shared screens, or start or stop the dial-out option in the Amazon Chime web application. For more information about these settings, see [Use the Policies Page](https://docs.aws.amazon.com/chime/latest/ag/policies.html) in the Amazon Chime Administration Guide.
    public struct AccountSettings: Swift.Sendable {
        /// Setting that stops or starts remote control of shared screens during meetings.
        public var disableRemoteControl: Swift.Bool?
        /// Setting that allows meeting participants to choose the Call me at a phone number option. For more information, see [Join a Meeting without the Amazon Chime App](https://docs.aws.amazon.com/chime/latest/ug/chime-join-meeting.html).
        public var enableDialOut: Swift.Bool?

        public init(
            disableRemoteControl: Swift.Bool? = nil,
            enableDialOut: Swift.Bool? = nil
        ) {
            self.disableRemoteControl = disableRemoteControl
            self.enableDialOut = enableDialOut
        }
    }
}

extension ChimeClientTypes {

    /// The Alexa for Business metadata associated with an Amazon Chime user, used to integrate Alexa for Business with a device.
    public struct AlexaForBusinessMetadata: Swift.Sendable {
        /// The ARN of the room resource.
        public var alexaForBusinessRoomArn: Swift.String?
        /// Starts or stops Alexa for Business.
        public var isAlexaForBusinessEnabled: Swift.Bool?

        public init(
            alexaForBusinessRoomArn: Swift.String? = nil,
            isAlexaForBusinessEnabled: Swift.Bool? = nil
        ) {
            self.alexaForBusinessRoomArn = alexaForBusinessRoomArn
            self.isAlexaForBusinessEnabled = isAlexaForBusinessEnabled
        }
    }
}

extension ChimeClientTypes.AlexaForBusinessMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AlexaForBusinessMetadata(isAlexaForBusinessEnabled: \(Swift.String(describing: isAlexaForBusinessEnabled)), alexaForBusinessRoomArn: \"CONTENT_REDACTED\")"}
}

/// The input parameters don't match the service's restrictions.
public struct BadRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        public internal(set) var code: ChimeClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BadRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    ) {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The client is permanently forbidden from making the request.
public struct ForbiddenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        public internal(set) var code: ChimeClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ForbiddenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    ) {
        self.properties.code = code
        self.properties.message = message
    }
}

/// One or more of the resources in the request does not exist in the system.
public struct NotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        public internal(set) var code: ChimeClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    ) {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The service encountered an unexpected error.
public struct ServiceFailureException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        public internal(set) var code: ChimeClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceFailureException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    ) {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The service is currently unavailable.
public struct ServiceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        public internal(set) var code: ChimeClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceUnavailableException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    ) {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The client exceeded its request rate limit.
public struct ThrottledClientException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        public internal(set) var code: ChimeClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottledClientException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    ) {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The client is not currently authorized to make the request.
public struct UnauthorizedClientException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        public internal(set) var code: ChimeClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnauthorizedClientException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    ) {
        self.properties.code = code
        self.properties.message = message
    }
}

public struct AssociatePhoneNumberWithUserInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The phone number, in E.164 format.
    /// This member is required.
    public var e164PhoneNumber: Swift.String?
    /// The user ID.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        e164PhoneNumber: Swift.String? = nil,
        userId: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.e164PhoneNumber = e164PhoneNumber
        self.userId = userId
    }
}

extension AssociatePhoneNumberWithUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociatePhoneNumberWithUserInput(accountId: \(Swift.String(describing: accountId)), userId: \(Swift.String(describing: userId)), e164PhoneNumber: \"CONTENT_REDACTED\")"}
}

public struct AssociatePhoneNumberWithUserOutput: Swift.Sendable {

    public init() { }
}

public struct AssociateSigninDelegateGroupsWithAccountInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The sign-in delegate groups.
    /// This member is required.
    public var signinDelegateGroups: [ChimeClientTypes.SigninDelegateGroup]?

    public init(
        accountId: Swift.String? = nil,
        signinDelegateGroups: [ChimeClientTypes.SigninDelegateGroup]? = nil
    ) {
        self.accountId = accountId
        self.signinDelegateGroups = signinDelegateGroups
    }
}

public struct AssociateSigninDelegateGroupsWithAccountOutput: Swift.Sendable {

    public init() { }
}

extension ChimeClientTypes {

    public enum RoomMembershipRole: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case administrator
        case member
        case sdkUnknown(Swift.String)

        public static var allCases: [RoomMembershipRole] {
            return [
                .administrator,
                .member
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .administrator: return "Administrator"
            case .member: return "Member"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeClientTypes {

    /// Membership details, such as member ID and member role.
    public struct MembershipItem: Swift.Sendable {
        /// The member ID.
        public var memberId: Swift.String?
        /// The member role.
        public var role: ChimeClientTypes.RoomMembershipRole?

        public init(
            memberId: Swift.String? = nil,
            role: ChimeClientTypes.RoomMembershipRole? = nil
        ) {
            self.memberId = memberId
            self.role = role
        }
    }
}

public struct BatchCreateRoomMembershipInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The list of membership items.
    /// This member is required.
    public var membershipItemList: [ChimeClientTypes.MembershipItem]?
    /// The room ID.
    /// This member is required.
    public var roomId: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        membershipItemList: [ChimeClientTypes.MembershipItem]? = nil,
        roomId: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.membershipItemList = membershipItemList
        self.roomId = roomId
    }
}

extension ChimeClientTypes {

    /// The list of errors returned when a member action results in an error.
    public struct MemberError: Swift.Sendable {
        /// The error code.
        public var errorCode: ChimeClientTypes.ErrorCode?
        /// The error message.
        public var errorMessage: Swift.String?
        /// The member ID.
        public var memberId: Swift.String?

        public init(
            errorCode: ChimeClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            memberId: Swift.String? = nil
        ) {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.memberId = memberId
        }
    }
}

public struct BatchCreateRoomMembershipOutput: Swift.Sendable {
    /// If the action fails for one or more of the member IDs in the request, a list of the member IDs is returned, along with error codes and error messages.
    public var errors: [ChimeClientTypes.MemberError]?

    public init(
        errors: [ChimeClientTypes.MemberError]? = nil
    ) {
        self.errors = errors
    }
}

public struct BatchDeletePhoneNumberInput: Swift.Sendable {
    /// List of phone number IDs.
    /// This member is required.
    public var phoneNumberIds: [Swift.String]?

    public init(
        phoneNumberIds: [Swift.String]? = nil
    ) {
        self.phoneNumberIds = phoneNumberIds
    }
}

extension ChimeClientTypes {

    /// If the phone number action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.
    public struct PhoneNumberError: Swift.Sendable {
        /// The error code.
        public var errorCode: ChimeClientTypes.ErrorCode?
        /// The error message.
        public var errorMessage: Swift.String?
        /// The phone number ID for which the action failed.
        public var phoneNumberId: Swift.String?

        public init(
            errorCode: ChimeClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            phoneNumberId: Swift.String? = nil
        ) {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.phoneNumberId = phoneNumberId
        }
    }
}

public struct BatchDeletePhoneNumberOutput: Swift.Sendable {
    /// If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.
    public var phoneNumberErrors: [ChimeClientTypes.PhoneNumberError]?

    public init(
        phoneNumberErrors: [ChimeClientTypes.PhoneNumberError]? = nil
    ) {
        self.phoneNumberErrors = phoneNumberErrors
    }
}

public struct BatchSuspendUserInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The request containing the user IDs to suspend.
    /// This member is required.
    public var userIdList: [Swift.String]?

    public init(
        accountId: Swift.String? = nil,
        userIdList: [Swift.String]? = nil
    ) {
        self.accountId = accountId
        self.userIdList = userIdList
    }
}

extension ChimeClientTypes {

    /// The list of errors returned when errors are encountered during the [BatchSuspendUser], [BatchUnsuspendUser], or [BatchUpdateUser] actions. This includes user IDs, error codes, and error messages.
    public struct UserError: Swift.Sendable {
        /// The error code.
        public var errorCode: ChimeClientTypes.ErrorCode?
        /// The error message.
        public var errorMessage: Swift.String?
        /// The user ID for which the action failed.
        public var userId: Swift.String?

        public init(
            errorCode: ChimeClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            userId: Swift.String? = nil
        ) {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.userId = userId
        }
    }
}

public struct BatchSuspendUserOutput: Swift.Sendable {
    /// If the [BatchSuspendUser] action fails for one or more of the user IDs in the request, a list of the user IDs is returned, along with error codes and error messages.
    public var userErrors: [ChimeClientTypes.UserError]?

    public init(
        userErrors: [ChimeClientTypes.UserError]? = nil
    ) {
        self.userErrors = userErrors
    }
}

public struct BatchUnsuspendUserInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The request containing the user IDs to unsuspend.
    /// This member is required.
    public var userIdList: [Swift.String]?

    public init(
        accountId: Swift.String? = nil,
        userIdList: [Swift.String]? = nil
    ) {
        self.accountId = accountId
        self.userIdList = userIdList
    }
}

public struct BatchUnsuspendUserOutput: Swift.Sendable {
    /// If the [BatchUnsuspendUser] action fails for one or more of the user IDs in the request, a list of the user IDs is returned, along with error codes and error messages.
    public var userErrors: [ChimeClientTypes.UserError]?

    public init(
        userErrors: [ChimeClientTypes.UserError]? = nil
    ) {
        self.userErrors = userErrors
    }
}

extension ChimeClientTypes {

    public enum PhoneNumberProductType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case businesscalling
        case sipmediaapplicationdialin
        case voiceconnector
        case sdkUnknown(Swift.String)

        public static var allCases: [PhoneNumberProductType] {
            return [
                .businesscalling,
                .sipmediaapplicationdialin,
                .voiceconnector
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .businesscalling: return "BusinessCalling"
            case .sipmediaapplicationdialin: return "SipMediaApplicationDialIn"
            case .voiceconnector: return "VoiceConnector"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeClientTypes {

    /// The phone number ID, product type, or calling name fields to update, used with the [BatchUpdatePhoneNumber] and [UpdatePhoneNumber] actions.
    public struct UpdatePhoneNumberRequestItem: Swift.Sendable {
        /// The outbound calling name to update.
        public var callingName: Swift.String?
        /// The phone number ID to update.
        /// This member is required.
        public var phoneNumberId: Swift.String?
        /// The product type to update.
        public var productType: ChimeClientTypes.PhoneNumberProductType?

        public init(
            callingName: Swift.String? = nil,
            phoneNumberId: Swift.String? = nil,
            productType: ChimeClientTypes.PhoneNumberProductType? = nil
        ) {
            self.callingName = callingName
            self.phoneNumberId = phoneNumberId
            self.productType = productType
        }
    }
}

extension ChimeClientTypes.UpdatePhoneNumberRequestItem: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdatePhoneNumberRequestItem(phoneNumberId: \(Swift.String(describing: phoneNumberId)), productType: \(Swift.String(describing: productType)), callingName: \"CONTENT_REDACTED\")"}
}

public struct BatchUpdatePhoneNumberInput: Swift.Sendable {
    /// The request containing the phone number IDs and product types or calling names to update.
    /// This member is required.
    public var updatePhoneNumberRequestItems: [ChimeClientTypes.UpdatePhoneNumberRequestItem]?

    public init(
        updatePhoneNumberRequestItems: [ChimeClientTypes.UpdatePhoneNumberRequestItem]? = nil
    ) {
        self.updatePhoneNumberRequestItems = updatePhoneNumberRequestItems
    }
}

public struct BatchUpdatePhoneNumberOutput: Swift.Sendable {
    /// If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.
    public var phoneNumberErrors: [ChimeClientTypes.PhoneNumberError]?

    public init(
        phoneNumberErrors: [ChimeClientTypes.PhoneNumberError]? = nil
    ) {
        self.phoneNumberErrors = phoneNumberErrors
    }
}

extension ChimeClientTypes {

    public enum UserType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case privateuser
        case shareddevice
        case sdkUnknown(Swift.String)

        public static var allCases: [UserType] {
            return [
                .privateuser,
                .shareddevice
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .privateuser: return "PrivateUser"
            case .shareddevice: return "SharedDevice"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeClientTypes {

    /// The user ID and user fields to update, used with the [BatchUpdateUser] action.
    public struct UpdateUserRequestItem: Swift.Sendable {
        /// The Alexa for Business metadata.
        public var alexaForBusinessMetadata: ChimeClientTypes.AlexaForBusinessMetadata?
        /// The user license type.
        public var licenseType: ChimeClientTypes.License?
        /// The user ID.
        /// This member is required.
        public var userId: Swift.String?
        /// The user type.
        public var userType: ChimeClientTypes.UserType?

        public init(
            alexaForBusinessMetadata: ChimeClientTypes.AlexaForBusinessMetadata? = nil,
            licenseType: ChimeClientTypes.License? = nil,
            userId: Swift.String? = nil,
            userType: ChimeClientTypes.UserType? = nil
        ) {
            self.alexaForBusinessMetadata = alexaForBusinessMetadata
            self.licenseType = licenseType
            self.userId = userId
            self.userType = userType
        }
    }
}

public struct BatchUpdateUserInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The request containing the user IDs and details to update.
    /// This member is required.
    public var updateUserRequestItems: [ChimeClientTypes.UpdateUserRequestItem]?

    public init(
        accountId: Swift.String? = nil,
        updateUserRequestItems: [ChimeClientTypes.UpdateUserRequestItem]? = nil
    ) {
        self.accountId = accountId
        self.updateUserRequestItems = updateUserRequestItems
    }
}

public struct BatchUpdateUserOutput: Swift.Sendable {
    /// If the [BatchUpdateUser] action fails for one or more of the user IDs in the request, a list of the user IDs is returned, along with error codes and error messages.
    public var userErrors: [ChimeClientTypes.UserError]?

    public init(
        userErrors: [ChimeClientTypes.UserError]? = nil
    ) {
        self.userErrors = userErrors
    }
}

extension ChimeClientTypes {

    public enum BotType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case chatbot
        case sdkUnknown(Swift.String)

        public static var allCases: [BotType] {
            return [
                .chatbot
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .chatbot: return "ChatBot"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeClientTypes {

    /// A resource that allows Enterprise account administrators to configure an interface to receive events from Amazon Chime.
    public struct Bot: Swift.Sendable {
        /// The bot email address.
        public var botEmail: Swift.String?
        /// The bot ID.
        public var botId: Swift.String?
        /// The bot type.
        public var botType: ChimeClientTypes.BotType?
        /// The bot creation timestamp, in ISO 8601 format.
        public var createdTimestamp: Foundation.Date?
        /// When true, the bot is stopped from running in your account.
        public var disabled: Swift.Bool?
        /// The bot display name.
        public var displayName: Swift.String?
        /// The security token used to authenticate Amazon Chime with the outgoing event endpoint.
        public var securityToken: Swift.String?
        /// The updated bot timestamp, in ISO 8601 format.
        public var updatedTimestamp: Foundation.Date?
        /// The unique ID for the bot user.
        public var userId: Swift.String?

        public init(
            botEmail: Swift.String? = nil,
            botId: Swift.String? = nil,
            botType: ChimeClientTypes.BotType? = nil,
            createdTimestamp: Foundation.Date? = nil,
            disabled: Swift.Bool? = nil,
            displayName: Swift.String? = nil,
            securityToken: Swift.String? = nil,
            updatedTimestamp: Foundation.Date? = nil,
            userId: Swift.String? = nil
        ) {
            self.botEmail = botEmail
            self.botId = botId
            self.botType = botType
            self.createdTimestamp = createdTimestamp
            self.disabled = disabled
            self.displayName = displayName
            self.securityToken = securityToken
            self.updatedTimestamp = updatedTimestamp
            self.userId = userId
        }
    }
}

extension ChimeClientTypes.Bot: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Bot(botId: \(Swift.String(describing: botId)), botType: \(Swift.String(describing: botType)), createdTimestamp: \(Swift.String(describing: createdTimestamp)), disabled: \(Swift.String(describing: disabled)), updatedTimestamp: \(Swift.String(describing: updatedTimestamp)), userId: \(Swift.String(describing: userId)), botEmail: \"CONTENT_REDACTED\", displayName: \"CONTENT_REDACTED\", securityToken: \"CONTENT_REDACTED\")"}
}

extension ChimeClientTypes {

    /// The Amazon Chime Business Calling settings for the administrator's AWS account. Includes any Amazon S3 buckets designated for storing call detail records.
    public struct BusinessCallingSettings: Swift.Sendable {
        /// The Amazon S3 bucket designated for call detail record storage.
        public var cdrBucket: Swift.String?

        public init(
            cdrBucket: Swift.String? = nil
        ) {
            self.cdrBucket = cdrBucket
        }
    }
}

extension ChimeClientTypes {

    public enum CallingNameStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case unassigned
        case updatefailed
        case updateinprogress
        case updatesucceeded
        case sdkUnknown(Swift.String)

        public static var allCases: [CallingNameStatus] {
            return [
                .unassigned,
                .updatefailed,
                .updateinprogress,
                .updatesucceeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .unassigned: return "Unassigned"
            case .updatefailed: return "UpdateFailed"
            case .updateinprogress: return "UpdateInProgress"
            case .updatesucceeded: return "UpdateSucceeded"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The request could not be processed because of conflict in the current state of the resource.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        public internal(set) var code: ChimeClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    ) {
        self.properties.code = code
        self.properties.message = message
    }
}

extension ChimeClientTypes {

    /// The retention settings that determine how long to retain conversation messages for an Amazon Chime Enterprise account.
    public struct ConversationRetentionSettings: Swift.Sendable {
        /// The number of days for which to retain conversation messages.
        public var retentionDays: Swift.Int?

        public init(
            retentionDays: Swift.Int? = nil
        ) {
            self.retentionDays = retentionDays
        }
    }
}

public struct CreateAccountInput: Swift.Sendable {
    /// The name of the Amazon Chime account.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    ) {
        self.name = name
    }
}

public struct CreateAccountOutput: Swift.Sendable {
    /// The Amazon Chime account details.
    public var account: ChimeClientTypes.Account?

    public init(
        account: ChimeClientTypes.Account? = nil
    ) {
        self.account = account
    }
}

/// The request exceeds the resource limit.
public struct ResourceLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        public internal(set) var code: ChimeClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    ) {
        self.properties.code = code
        self.properties.message = message
    }
}

public struct CreateBotInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The bot display name.
    /// This member is required.
    public var displayName: Swift.String?
    /// The domain of the Amazon Chime Enterprise account.
    public var domain: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        displayName: Swift.String? = nil,
        domain: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.displayName = displayName
        self.domain = domain
    }
}

extension CreateBotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateBotInput(accountId: \(Swift.String(describing: accountId)), domain: \(Swift.String(describing: domain)), displayName: \"CONTENT_REDACTED\")"}
}

public struct CreateBotOutput: Swift.Sendable {
    /// The bot details.
    public var bot: ChimeClientTypes.Bot?

    public init(
        bot: ChimeClientTypes.Bot? = nil
    ) {
        self.bot = bot
    }
}

public struct CreateMeetingDialOutInput: Swift.Sendable {
    /// Phone number used as the caller ID when the remote party receives a call.
    /// This member is required.
    public var fromPhoneNumber: Swift.String?
    /// Token used by the Amazon Chime SDK attendee. Call the [CreateAttendee](https://docs.aws.amazon.com/chime/latest/APIReference/API_CreateAttendee.html) action to get a join token.
    /// This member is required.
    public var joinToken: Swift.String?
    /// The Amazon Chime SDK meeting ID.
    /// This member is required.
    public var meetingId: Swift.String?
    /// Phone number called when inviting someone to a meeting.
    /// This member is required.
    public var toPhoneNumber: Swift.String?

    public init(
        fromPhoneNumber: Swift.String? = nil,
        joinToken: Swift.String? = nil,
        meetingId: Swift.String? = nil,
        toPhoneNumber: Swift.String? = nil
    ) {
        self.fromPhoneNumber = fromPhoneNumber
        self.joinToken = joinToken
        self.meetingId = meetingId
        self.toPhoneNumber = toPhoneNumber
    }
}

extension CreateMeetingDialOutInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateMeetingDialOutInput(meetingId: \(Swift.String(describing: meetingId)), fromPhoneNumber: \"CONTENT_REDACTED\", joinToken: \"CONTENT_REDACTED\", toPhoneNumber: \"CONTENT_REDACTED\")"}
}

public struct CreateMeetingDialOutOutput: Swift.Sendable {
    /// Unique ID that tracks API calls.
    public var transactionId: Swift.String?

    public init(
        transactionId: Swift.String? = nil
    ) {
        self.transactionId = transactionId
    }
}

public struct CreatePhoneNumberOrderInput: Swift.Sendable {
    /// List of phone numbers, in E.164 format.
    /// This member is required.
    public var e164PhoneNumbers: [Swift.String]?
    /// The phone number product type.
    /// This member is required.
    public var productType: ChimeClientTypes.PhoneNumberProductType?

    public init(
        e164PhoneNumbers: [Swift.String]? = nil,
        productType: ChimeClientTypes.PhoneNumberProductType? = nil
    ) {
        self.e164PhoneNumbers = e164PhoneNumbers
        self.productType = productType
    }
}

extension CreatePhoneNumberOrderInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatePhoneNumberOrderInput(productType: \(Swift.String(describing: productType)), e164PhoneNumbers: \"CONTENT_REDACTED\")"}
}

extension ChimeClientTypes {

    public enum OrderedPhoneNumberStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case acquired
        case failed
        case processing
        case sdkUnknown(Swift.String)

        public static var allCases: [OrderedPhoneNumberStatus] {
            return [
                .acquired,
                .failed,
                .processing
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .acquired: return "Acquired"
            case .failed: return "Failed"
            case .processing: return "Processing"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeClientTypes {

    /// A phone number for which an order has been placed.
    public struct OrderedPhoneNumber: Swift.Sendable {
        /// The phone number, in E.164 format.
        public var e164PhoneNumber: Swift.String?
        /// The phone number status.
        public var status: ChimeClientTypes.OrderedPhoneNumberStatus?

        public init(
            e164PhoneNumber: Swift.String? = nil,
            status: ChimeClientTypes.OrderedPhoneNumberStatus? = nil
        ) {
            self.e164PhoneNumber = e164PhoneNumber
            self.status = status
        }
    }
}

extension ChimeClientTypes.OrderedPhoneNumber: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OrderedPhoneNumber(status: \(Swift.String(describing: status)), e164PhoneNumber: \"CONTENT_REDACTED\")"}
}

extension ChimeClientTypes {

    public enum PhoneNumberOrderStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case partial
        case processing
        case successful
        case sdkUnknown(Swift.String)

        public static var allCases: [PhoneNumberOrderStatus] {
            return [
                .failed,
                .partial,
                .processing,
                .successful
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .partial: return "Partial"
            case .processing: return "Processing"
            case .successful: return "Successful"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeClientTypes {

    /// The details of a phone number order created for Amazon Chime.
    public struct PhoneNumberOrder: Swift.Sendable {
        /// The phone number order creation time stamp, in ISO 8601 format.
        public var createdTimestamp: Foundation.Date?
        /// The ordered phone number details, such as the phone number in E.164 format and the phone number status.
        public var orderedPhoneNumbers: [ChimeClientTypes.OrderedPhoneNumber]?
        /// The phone number order ID.
        public var phoneNumberOrderId: Swift.String?
        /// The phone number order product type.
        public var productType: ChimeClientTypes.PhoneNumberProductType?
        /// The status of the phone number order.
        public var status: ChimeClientTypes.PhoneNumberOrderStatus?
        /// The updated phone number order time stamp, in ISO 8601 format.
        public var updatedTimestamp: Foundation.Date?

        public init(
            createdTimestamp: Foundation.Date? = nil,
            orderedPhoneNumbers: [ChimeClientTypes.OrderedPhoneNumber]? = nil,
            phoneNumberOrderId: Swift.String? = nil,
            productType: ChimeClientTypes.PhoneNumberProductType? = nil,
            status: ChimeClientTypes.PhoneNumberOrderStatus? = nil,
            updatedTimestamp: Foundation.Date? = nil
        ) {
            self.createdTimestamp = createdTimestamp
            self.orderedPhoneNumbers = orderedPhoneNumbers
            self.phoneNumberOrderId = phoneNumberOrderId
            self.productType = productType
            self.status = status
            self.updatedTimestamp = updatedTimestamp
        }
    }
}

public struct CreatePhoneNumberOrderOutput: Swift.Sendable {
    /// The phone number order details.
    public var phoneNumberOrder: ChimeClientTypes.PhoneNumberOrder?

    public init(
        phoneNumberOrder: ChimeClientTypes.PhoneNumberOrder? = nil
    ) {
        self.phoneNumberOrder = phoneNumberOrder
    }
}

public struct CreateRoomInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The idempotency token for the request.
    public var clientRequestToken: Swift.String?
    /// The room name.
    /// This member is required.
    public var name: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        name: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.clientRequestToken = clientRequestToken
        self.name = name
    }
}

extension CreateRoomInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRoomInput(accountId: \(Swift.String(describing: accountId)), clientRequestToken: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

extension ChimeClientTypes {

    /// The Amazon Chime chat room details.
    public struct Room: Swift.Sendable {
        /// The Amazon Chime account ID.
        public var accountId: Swift.String?
        /// The identifier of the room creator.
        public var createdBy: Swift.String?
        /// The room creation timestamp, in ISO 8601 format.
        public var createdTimestamp: Foundation.Date?
        /// The room name.
        public var name: Swift.String?
        /// The room ID.
        public var roomId: Swift.String?
        /// The room update timestamp, in ISO 8601 format.
        public var updatedTimestamp: Foundation.Date?

        public init(
            accountId: Swift.String? = nil,
            createdBy: Swift.String? = nil,
            createdTimestamp: Foundation.Date? = nil,
            name: Swift.String? = nil,
            roomId: Swift.String? = nil,
            updatedTimestamp: Foundation.Date? = nil
        ) {
            self.accountId = accountId
            self.createdBy = createdBy
            self.createdTimestamp = createdTimestamp
            self.name = name
            self.roomId = roomId
            self.updatedTimestamp = updatedTimestamp
        }
    }
}

extension ChimeClientTypes.Room: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Room(accountId: \(Swift.String(describing: accountId)), createdBy: \(Swift.String(describing: createdBy)), createdTimestamp: \(Swift.String(describing: createdTimestamp)), roomId: \(Swift.String(describing: roomId)), updatedTimestamp: \(Swift.String(describing: updatedTimestamp)), name: \"CONTENT_REDACTED\")"}
}

public struct CreateRoomOutput: Swift.Sendable {
    /// The room details.
    public var room: ChimeClientTypes.Room?

    public init(
        room: ChimeClientTypes.Room? = nil
    ) {
        self.room = room
    }
}

public struct CreateRoomMembershipInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The Amazon Chime member ID (user ID or bot ID).
    /// This member is required.
    public var memberId: Swift.String?
    /// The role of the member.
    public var role: ChimeClientTypes.RoomMembershipRole?
    /// The room ID.
    /// This member is required.
    public var roomId: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        memberId: Swift.String? = nil,
        role: ChimeClientTypes.RoomMembershipRole? = nil,
        roomId: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.memberId = memberId
        self.role = role
        self.roomId = roomId
    }
}

extension ChimeClientTypes {

    public enum MemberType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bot
        case user
        case webhook
        case sdkUnknown(Swift.String)

        public static var allCases: [MemberType] {
            return [
                .bot,
                .user,
                .webhook
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bot: return "Bot"
            case .user: return "User"
            case .webhook: return "Webhook"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeClientTypes {

    /// The member details, such as email address, name, member ID, and member type.
    public struct Member: Swift.Sendable {
        /// The Amazon Chime account ID.
        public var accountId: Swift.String?
        /// The member email address.
        public var email: Swift.String?
        /// The member name.
        public var fullName: Swift.String?
        /// The member ID (user ID or bot ID).
        public var memberId: Swift.String?
        /// The member type.
        public var memberType: ChimeClientTypes.MemberType?

        public init(
            accountId: Swift.String? = nil,
            email: Swift.String? = nil,
            fullName: Swift.String? = nil,
            memberId: Swift.String? = nil,
            memberType: ChimeClientTypes.MemberType? = nil
        ) {
            self.accountId = accountId
            self.email = email
            self.fullName = fullName
            self.memberId = memberId
            self.memberType = memberType
        }
    }
}

extension ChimeClientTypes.Member: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Member(accountId: \(Swift.String(describing: accountId)), memberId: \(Swift.String(describing: memberId)), memberType: \(Swift.String(describing: memberType)), email: \"CONTENT_REDACTED\", fullName: \"CONTENT_REDACTED\")"}
}

extension ChimeClientTypes {

    /// The room membership details.
    public struct RoomMembership: Swift.Sendable {
        /// The identifier of the user that invited the room member.
        public var invitedBy: Swift.String?
        /// The member details, such as email address, name, member ID, and member type.
        public var member: ChimeClientTypes.Member?
        /// The membership role.
        public var role: ChimeClientTypes.RoomMembershipRole?
        /// The room ID.
        public var roomId: Swift.String?
        /// The room membership update timestamp, in ISO 8601 format.
        public var updatedTimestamp: Foundation.Date?

        public init(
            invitedBy: Swift.String? = nil,
            member: ChimeClientTypes.Member? = nil,
            role: ChimeClientTypes.RoomMembershipRole? = nil,
            roomId: Swift.String? = nil,
            updatedTimestamp: Foundation.Date? = nil
        ) {
            self.invitedBy = invitedBy
            self.member = member
            self.role = role
            self.roomId = roomId
            self.updatedTimestamp = updatedTimestamp
        }
    }
}

public struct CreateRoomMembershipOutput: Swift.Sendable {
    /// The room membership details.
    public var roomMembership: ChimeClientTypes.RoomMembership?

    public init(
        roomMembership: ChimeClientTypes.RoomMembership? = nil
    ) {
        self.roomMembership = roomMembership
    }
}

public struct CreateUserInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The user's email address.
    public var email: Swift.String?
    /// The user type.
    public var userType: ChimeClientTypes.UserType?
    /// The user name.
    public var username: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        email: Swift.String? = nil,
        userType: ChimeClientTypes.UserType? = nil,
        username: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.email = email
        self.userType = userType
        self.username = username
    }
}

extension CreateUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateUserInput(accountId: \(Swift.String(describing: accountId)), userType: \(Swift.String(describing: userType)), username: \(Swift.String(describing: username)), email: \"CONTENT_REDACTED\")"}
}

extension ChimeClientTypes {

    public enum InviteStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accepted
        case failed
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [InviteStatus] {
            return [
                .accepted,
                .failed,
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accepted: return "Accepted"
            case .failed: return "Failed"
            case .pending: return "Pending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeClientTypes {

    public enum RegistrationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case registered
        case suspended
        case unregistered
        case sdkUnknown(Swift.String)

        public static var allCases: [RegistrationStatus] {
            return [
                .registered,
                .suspended,
                .unregistered
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .registered: return "Registered"
            case .suspended: return "Suspended"
            case .unregistered: return "Unregistered"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeClientTypes {

    /// The user on the Amazon Chime account.
    public struct User: Swift.Sendable {
        /// The Amazon Chime account ID.
        public var accountId: Swift.String?
        /// The Alexa for Business metadata.
        public var alexaForBusinessMetadata: ChimeClientTypes.AlexaForBusinessMetadata?
        /// The display name of the user.
        public var displayName: Swift.String?
        /// Date and time when the user is invited to the Amazon Chime account, in ISO 8601 format.
        public var invitedOn: Foundation.Date?
        /// The license type for the user.
        public var licenseType: ChimeClientTypes.License?
        /// The user's personal meeting PIN.
        public var personalPIN: Swift.String?
        /// The primary email address of the user.
        public var primaryEmail: Swift.String?
        /// The primary phone number associated with the user.
        public var primaryProvisionedNumber: Swift.String?
        /// Date and time when the user is registered, in ISO 8601 format.
        public var registeredOn: Foundation.Date?
        /// The user ID.
        /// This member is required.
        public var userId: Swift.String?
        /// The user invite status.
        public var userInvitationStatus: ChimeClientTypes.InviteStatus?
        /// The user registration status.
        public var userRegistrationStatus: ChimeClientTypes.RegistrationStatus?
        /// The user type.
        public var userType: ChimeClientTypes.UserType?

        public init(
            accountId: Swift.String? = nil,
            alexaForBusinessMetadata: ChimeClientTypes.AlexaForBusinessMetadata? = nil,
            displayName: Swift.String? = nil,
            invitedOn: Foundation.Date? = nil,
            licenseType: ChimeClientTypes.License? = nil,
            personalPIN: Swift.String? = nil,
            primaryEmail: Swift.String? = nil,
            primaryProvisionedNumber: Swift.String? = nil,
            registeredOn: Foundation.Date? = nil,
            userId: Swift.String? = nil,
            userInvitationStatus: ChimeClientTypes.InviteStatus? = nil,
            userRegistrationStatus: ChimeClientTypes.RegistrationStatus? = nil,
            userType: ChimeClientTypes.UserType? = nil
        ) {
            self.accountId = accountId
            self.alexaForBusinessMetadata = alexaForBusinessMetadata
            self.displayName = displayName
            self.invitedOn = invitedOn
            self.licenseType = licenseType
            self.personalPIN = personalPIN
            self.primaryEmail = primaryEmail
            self.primaryProvisionedNumber = primaryProvisionedNumber
            self.registeredOn = registeredOn
            self.userId = userId
            self.userInvitationStatus = userInvitationStatus
            self.userRegistrationStatus = userRegistrationStatus
            self.userType = userType
        }
    }
}

extension ChimeClientTypes.User: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "User(accountId: \(Swift.String(describing: accountId)), alexaForBusinessMetadata: \(Swift.String(describing: alexaForBusinessMetadata)), invitedOn: \(Swift.String(describing: invitedOn)), licenseType: \(Swift.String(describing: licenseType)), personalPIN: \(Swift.String(describing: personalPIN)), registeredOn: \(Swift.String(describing: registeredOn)), userId: \(Swift.String(describing: userId)), userInvitationStatus: \(Swift.String(describing: userInvitationStatus)), userRegistrationStatus: \(Swift.String(describing: userRegistrationStatus)), userType: \(Swift.String(describing: userType)), displayName: \"CONTENT_REDACTED\", primaryEmail: \"CONTENT_REDACTED\", primaryProvisionedNumber: \"CONTENT_REDACTED\")"}
}

public struct CreateUserOutput: Swift.Sendable {
    /// The user on the Amazon Chime account.
    public var user: ChimeClientTypes.User?

    public init(
        user: ChimeClientTypes.User? = nil
    ) {
        self.user = user
    }
}

/// The request was well-formed but was unable to be followed due to semantic errors.
public struct UnprocessableEntityException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        public internal(set) var code: ChimeClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnprocessableEntityException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    ) {
        self.properties.code = code
        self.properties.message = message
    }
}

public struct DeleteAccountInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?

    public init(
        accountId: Swift.String? = nil
    ) {
        self.accountId = accountId
    }
}

public struct DeleteAccountOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteEventsConfigurationInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The bot ID.
    /// This member is required.
    public var botId: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        botId: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.botId = botId
    }
}

public struct DeletePhoneNumberInput: Swift.Sendable {
    /// The phone number ID.
    /// This member is required.
    public var phoneNumberId: Swift.String?

    public init(
        phoneNumberId: Swift.String? = nil
    ) {
        self.phoneNumberId = phoneNumberId
    }
}

public struct DeleteRoomInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The chat room ID.
    /// This member is required.
    public var roomId: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        roomId: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.roomId = roomId
    }
}

public struct DeleteRoomMembershipInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The member ID (user ID or bot ID).
    /// This member is required.
    public var memberId: Swift.String?
    /// The room ID.
    /// This member is required.
    public var roomId: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        memberId: Swift.String? = nil,
        roomId: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.memberId = memberId
        self.roomId = roomId
    }
}

public struct DisassociatePhoneNumberFromUserInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The user ID.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        userId: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.userId = userId
    }
}

public struct DisassociatePhoneNumberFromUserOutput: Swift.Sendable {

    public init() { }
}

public struct DisassociateSigninDelegateGroupsFromAccountInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The sign-in delegate group names.
    /// This member is required.
    public var groupNames: [Swift.String]?

    public init(
        accountId: Swift.String? = nil,
        groupNames: [Swift.String]? = nil
    ) {
        self.accountId = accountId
        self.groupNames = groupNames
    }
}

public struct DisassociateSigninDelegateGroupsFromAccountOutput: Swift.Sendable {

    public init() { }
}

extension ChimeClientTypes {

    public enum EmailStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case notsent
        case sent
        case sdkUnknown(Swift.String)

        public static var allCases: [EmailStatus] {
            return [
                .failed,
                .notsent,
                .sent
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .notsent: return "NotSent"
            case .sent: return "Sent"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeClientTypes {

    /// The configuration that allows a bot to receive outgoing events. Can be either an HTTPS endpoint or a Lambda function ARN.
    public struct EventsConfiguration: Swift.Sendable {
        /// The bot ID.
        public var botId: Swift.String?
        /// Lambda function ARN that allows a bot to receive outgoing events.
        public var lambdaFunctionArn: Swift.String?
        /// HTTPS endpoint that allows a bot to receive outgoing events.
        public var outboundEventsHTTPSEndpoint: Swift.String?

        public init(
            botId: Swift.String? = nil,
            lambdaFunctionArn: Swift.String? = nil,
            outboundEventsHTTPSEndpoint: Swift.String? = nil
        ) {
            self.botId = botId
            self.lambdaFunctionArn = lambdaFunctionArn
            self.outboundEventsHTTPSEndpoint = outboundEventsHTTPSEndpoint
        }
    }
}

extension ChimeClientTypes.EventsConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EventsConfiguration(botId: \(Swift.String(describing: botId)), lambdaFunctionArn: \"CONTENT_REDACTED\", outboundEventsHTTPSEndpoint: \"CONTENT_REDACTED\")"}
}

public struct GetAccountInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?

    public init(
        accountId: Swift.String? = nil
    ) {
        self.accountId = accountId
    }
}

public struct GetAccountOutput: Swift.Sendable {
    /// The Amazon Chime account details.
    public var account: ChimeClientTypes.Account?

    public init(
        account: ChimeClientTypes.Account? = nil
    ) {
        self.account = account
    }
}

public struct GetAccountSettingsInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?

    public init(
        accountId: Swift.String? = nil
    ) {
        self.accountId = accountId
    }
}

public struct GetAccountSettingsOutput: Swift.Sendable {
    /// The Amazon Chime account settings.
    public var accountSettings: ChimeClientTypes.AccountSettings?

    public init(
        accountSettings: ChimeClientTypes.AccountSettings? = nil
    ) {
        self.accountSettings = accountSettings
    }
}

public struct GetBotInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The bot ID.
    /// This member is required.
    public var botId: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        botId: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.botId = botId
    }
}

public struct GetBotOutput: Swift.Sendable {
    /// The chat bot details.
    public var bot: ChimeClientTypes.Bot?

    public init(
        bot: ChimeClientTypes.Bot? = nil
    ) {
        self.bot = bot
    }
}

public struct GetEventsConfigurationInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The bot ID.
    /// This member is required.
    public var botId: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        botId: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.botId = botId
    }
}

public struct GetEventsConfigurationOutput: Swift.Sendable {
    /// The events configuration details.
    public var eventsConfiguration: ChimeClientTypes.EventsConfiguration?

    public init(
        eventsConfiguration: ChimeClientTypes.EventsConfiguration? = nil
    ) {
        self.eventsConfiguration = eventsConfiguration
    }
}

extension ChimeClientTypes {

    /// The Amazon Chime Voice Connector settings. Includes any Amazon S3 buckets designated for storing call detail records.
    public struct VoiceConnectorSettings: Swift.Sendable {
        /// The Amazon S3 bucket designated for call detail record storage.
        public var cdrBucket: Swift.String?

        public init(
            cdrBucket: Swift.String? = nil
        ) {
            self.cdrBucket = cdrBucket
        }
    }
}

public struct GetGlobalSettingsOutput: Swift.Sendable {
    /// The Amazon Chime Business Calling settings.
    public var businessCalling: ChimeClientTypes.BusinessCallingSettings?
    /// The Amazon Chime Voice Connector settings.
    public var voiceConnector: ChimeClientTypes.VoiceConnectorSettings?

    public init(
        businessCalling: ChimeClientTypes.BusinessCallingSettings? = nil,
        voiceConnector: ChimeClientTypes.VoiceConnectorSettings? = nil
    ) {
        self.businessCalling = businessCalling
        self.voiceConnector = voiceConnector
    }
}

public struct GetPhoneNumberInput: Swift.Sendable {
    /// The phone number ID.
    /// This member is required.
    public var phoneNumberId: Swift.String?

    public init(
        phoneNumberId: Swift.String? = nil
    ) {
        self.phoneNumberId = phoneNumberId
    }
}

extension ChimeClientTypes {

    public enum PhoneNumberAssociationName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountid
        case sipruleid
        case userid
        case voiceconnectorgroupid
        case voiceconnectorid
        case sdkUnknown(Swift.String)

        public static var allCases: [PhoneNumberAssociationName] {
            return [
                .accountid,
                .sipruleid,
                .userid,
                .voiceconnectorgroupid,
                .voiceconnectorid
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountid: return "AccountId"
            case .sipruleid: return "SipRuleId"
            case .userid: return "UserId"
            case .voiceconnectorgroupid: return "VoiceConnectorGroupId"
            case .voiceconnectorid: return "VoiceConnectorId"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeClientTypes {

    /// The phone number associations, such as Amazon Chime account ID, Amazon Chime user ID, Amazon Chime Voice Connector ID, or Amazon Chime Voice Connector group ID.
    public struct PhoneNumberAssociation: Swift.Sendable {
        /// The timestamp of the phone number association, in ISO 8601 format.
        public var associatedTimestamp: Foundation.Date?
        /// Defines the association with an Amazon Chime account ID, user ID, Amazon Chime Voice Connector ID, or Amazon Chime Voice Connector group ID.
        public var name: ChimeClientTypes.PhoneNumberAssociationName?
        /// Contains the ID for the entity specified in Name.
        public var value: Swift.String?

        public init(
            associatedTimestamp: Foundation.Date? = nil,
            name: ChimeClientTypes.PhoneNumberAssociationName? = nil,
            value: Swift.String? = nil
        ) {
            self.associatedTimestamp = associatedTimestamp
            self.name = name
            self.value = value
        }
    }
}

extension ChimeClientTypes {

    /// The phone number capabilities for Amazon Chime Business Calling phone numbers, such as enabled inbound and outbound calling and text messaging.
    public struct PhoneNumberCapabilities: Swift.Sendable {
        /// Allows or denies inbound calling for the specified phone number.
        public var inboundCall: Swift.Bool?
        /// Allows or denies inbound MMS messaging for the specified phone number.
        public var inboundMMS: Swift.Bool?
        /// Allows or denies inbound SMS messaging for the specified phone number.
        public var inboundSMS: Swift.Bool?
        /// Allows or denies outbound calling for the specified phone number.
        public var outboundCall: Swift.Bool?
        /// Allows or denies outbound MMS messaging for the specified phone number.
        public var outboundMMS: Swift.Bool?
        /// Allows or denies outbound SMS messaging for the specified phone number.
        public var outboundSMS: Swift.Bool?

        public init(
            inboundCall: Swift.Bool? = nil,
            inboundMMS: Swift.Bool? = nil,
            inboundSMS: Swift.Bool? = nil,
            outboundCall: Swift.Bool? = nil,
            outboundMMS: Swift.Bool? = nil,
            outboundSMS: Swift.Bool? = nil
        ) {
            self.inboundCall = inboundCall
            self.inboundMMS = inboundMMS
            self.inboundSMS = inboundSMS
            self.outboundCall = outboundCall
            self.outboundMMS = outboundMMS
            self.outboundSMS = outboundSMS
        }
    }
}

extension ChimeClientTypes {

    public enum PhoneNumberStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case acquirefailed
        case acquireinprogress
        case assigned
        case deletefailed
        case deleteinprogress
        case releasefailed
        case releaseinprogress
        case unassigned
        case sdkUnknown(Swift.String)

        public static var allCases: [PhoneNumberStatus] {
            return [
                .acquirefailed,
                .acquireinprogress,
                .assigned,
                .deletefailed,
                .deleteinprogress,
                .releasefailed,
                .releaseinprogress,
                .unassigned
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .acquirefailed: return "AcquireFailed"
            case .acquireinprogress: return "AcquireInProgress"
            case .assigned: return "Assigned"
            case .deletefailed: return "DeleteFailed"
            case .deleteinprogress: return "DeleteInProgress"
            case .releasefailed: return "ReleaseFailed"
            case .releaseinprogress: return "ReleaseInProgress"
            case .unassigned: return "Unassigned"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeClientTypes {

    public enum PhoneNumberType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case local
        case tollfree
        case sdkUnknown(Swift.String)

        public static var allCases: [PhoneNumberType] {
            return [
                .local,
                .tollfree
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .local: return "Local"
            case .tollfree: return "TollFree"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeClientTypes {

    /// A phone number used for Amazon Chime Business Calling or an Amazon Chime Voice Connector.
    public struct PhoneNumber: Swift.Sendable {
        /// The phone number associations.
        public var associations: [ChimeClientTypes.PhoneNumberAssociation]?
        /// The outbound calling name associated with the phone number.
        public var callingName: Swift.String?
        /// The outbound calling name status.
        public var callingNameStatus: ChimeClientTypes.CallingNameStatus?
        /// The phone number capabilities.
        public var capabilities: ChimeClientTypes.PhoneNumberCapabilities?
        /// The phone number country. Format: ISO 3166-1 alpha-2.
        public var country: Swift.String?
        /// The phone number creation timestamp, in ISO 8601 format.
        public var createdTimestamp: Foundation.Date?
        /// The deleted phone number timestamp, in ISO 8601 format.
        public var deletionTimestamp: Foundation.Date?
        /// The phone number, in E.164 format.
        public var e164PhoneNumber: Swift.String?
        /// The phone number ID.
        public var phoneNumberId: Swift.String?
        /// The phone number product type.
        public var productType: ChimeClientTypes.PhoneNumberProductType?
        /// The phone number status.
        public var status: ChimeClientTypes.PhoneNumberStatus?
        /// The phone number type.
        public var type: ChimeClientTypes.PhoneNumberType?
        /// The updated phone number timestamp, in ISO 8601 format.
        public var updatedTimestamp: Foundation.Date?

        public init(
            associations: [ChimeClientTypes.PhoneNumberAssociation]? = nil,
            callingName: Swift.String? = nil,
            callingNameStatus: ChimeClientTypes.CallingNameStatus? = nil,
            capabilities: ChimeClientTypes.PhoneNumberCapabilities? = nil,
            country: Swift.String? = nil,
            createdTimestamp: Foundation.Date? = nil,
            deletionTimestamp: Foundation.Date? = nil,
            e164PhoneNumber: Swift.String? = nil,
            phoneNumberId: Swift.String? = nil,
            productType: ChimeClientTypes.PhoneNumberProductType? = nil,
            status: ChimeClientTypes.PhoneNumberStatus? = nil,
            type: ChimeClientTypes.PhoneNumberType? = nil,
            updatedTimestamp: Foundation.Date? = nil
        ) {
            self.associations = associations
            self.callingName = callingName
            self.callingNameStatus = callingNameStatus
            self.capabilities = capabilities
            self.country = country
            self.createdTimestamp = createdTimestamp
            self.deletionTimestamp = deletionTimestamp
            self.e164PhoneNumber = e164PhoneNumber
            self.phoneNumberId = phoneNumberId
            self.productType = productType
            self.status = status
            self.type = type
            self.updatedTimestamp = updatedTimestamp
        }
    }
}

extension ChimeClientTypes.PhoneNumber: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PhoneNumber(associations: \(Swift.String(describing: associations)), callingNameStatus: \(Swift.String(describing: callingNameStatus)), capabilities: \(Swift.String(describing: capabilities)), country: \(Swift.String(describing: country)), createdTimestamp: \(Swift.String(describing: createdTimestamp)), deletionTimestamp: \(Swift.String(describing: deletionTimestamp)), phoneNumberId: \(Swift.String(describing: phoneNumberId)), productType: \(Swift.String(describing: productType)), status: \(Swift.String(describing: status)), type: \(Swift.String(describing: type)), updatedTimestamp: \(Swift.String(describing: updatedTimestamp)), callingName: \"CONTENT_REDACTED\", e164PhoneNumber: \"CONTENT_REDACTED\")"}
}

public struct GetPhoneNumberOutput: Swift.Sendable {
    /// The phone number details.
    public var phoneNumber: ChimeClientTypes.PhoneNumber?

    public init(
        phoneNumber: ChimeClientTypes.PhoneNumber? = nil
    ) {
        self.phoneNumber = phoneNumber
    }
}

public struct GetPhoneNumberOrderInput: Swift.Sendable {
    /// The ID for the phone number order.
    /// This member is required.
    public var phoneNumberOrderId: Swift.String?

    public init(
        phoneNumberOrderId: Swift.String? = nil
    ) {
        self.phoneNumberOrderId = phoneNumberOrderId
    }
}

public struct GetPhoneNumberOrderOutput: Swift.Sendable {
    /// The phone number order details.
    public var phoneNumberOrder: ChimeClientTypes.PhoneNumberOrder?

    public init(
        phoneNumberOrder: ChimeClientTypes.PhoneNumberOrder? = nil
    ) {
        self.phoneNumberOrder = phoneNumberOrder
    }
}

public struct GetPhoneNumberSettingsOutput: Swift.Sendable {
    /// The default outbound calling name for the account.
    public var callingName: Swift.String?
    /// The updated outbound calling name timestamp, in ISO 8601 format.
    public var callingNameUpdatedTimestamp: Foundation.Date?

    public init(
        callingName: Swift.String? = nil,
        callingNameUpdatedTimestamp: Foundation.Date? = nil
    ) {
        self.callingName = callingName
        self.callingNameUpdatedTimestamp = callingNameUpdatedTimestamp
    }
}

extension GetPhoneNumberSettingsOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPhoneNumberSettingsOutput(callingNameUpdatedTimestamp: \(Swift.String(describing: callingNameUpdatedTimestamp)), callingName: \"CONTENT_REDACTED\")"}
}

public struct GetRetentionSettingsInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?

    public init(
        accountId: Swift.String? = nil
    ) {
        self.accountId = accountId
    }
}

extension ChimeClientTypes {

    /// The retention settings that determine how long to retain chat-room messages for an Amazon Chime Enterprise account.
    public struct RoomRetentionSettings: Swift.Sendable {
        /// The number of days for which to retain chat-room messages.
        public var retentionDays: Swift.Int?

        public init(
            retentionDays: Swift.Int? = nil
        ) {
            self.retentionDays = retentionDays
        }
    }
}

extension ChimeClientTypes {

    /// The retention settings for an Amazon Chime Enterprise account that determine how long to retain items such as chat-room messages and chat-conversation messages.
    public struct RetentionSettings: Swift.Sendable {
        /// The chat conversation retention settings.
        public var conversationRetentionSettings: ChimeClientTypes.ConversationRetentionSettings?
        /// The chat room retention settings.
        public var roomRetentionSettings: ChimeClientTypes.RoomRetentionSettings?

        public init(
            conversationRetentionSettings: ChimeClientTypes.ConversationRetentionSettings? = nil,
            roomRetentionSettings: ChimeClientTypes.RoomRetentionSettings? = nil
        ) {
            self.conversationRetentionSettings = conversationRetentionSettings
            self.roomRetentionSettings = roomRetentionSettings
        }
    }
}

public struct GetRetentionSettingsOutput: Swift.Sendable {
    /// The timestamp representing the time at which the specified items are permanently deleted, in ISO 8601 format.
    public var initiateDeletionTimestamp: Foundation.Date?
    /// The retention settings.
    public var retentionSettings: ChimeClientTypes.RetentionSettings?

    public init(
        initiateDeletionTimestamp: Foundation.Date? = nil,
        retentionSettings: ChimeClientTypes.RetentionSettings? = nil
    ) {
        self.initiateDeletionTimestamp = initiateDeletionTimestamp
        self.retentionSettings = retentionSettings
    }
}

public struct GetRoomInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The room ID.
    /// This member is required.
    public var roomId: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        roomId: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.roomId = roomId
    }
}

public struct GetRoomOutput: Swift.Sendable {
    /// The room details.
    public var room: ChimeClientTypes.Room?

    public init(
        room: ChimeClientTypes.Room? = nil
    ) {
        self.room = room
    }
}

public struct GetUserInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The user ID.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        userId: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.userId = userId
    }
}

public struct GetUserOutput: Swift.Sendable {
    /// The user details.
    public var user: ChimeClientTypes.User?

    public init(
        user: ChimeClientTypes.User? = nil
    ) {
        self.user = user
    }
}

public struct GetUserSettingsInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The user ID.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        userId: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.userId = userId
    }
}

extension ChimeClientTypes {

    /// Settings that allow management of telephony permissions for an Amazon Chime user, such as inbound and outbound calling and text messaging.
    public struct TelephonySettings: Swift.Sendable {
        /// Allows or denies inbound calling.
        /// This member is required.
        public var inboundCalling: Swift.Bool?
        /// Allows or denies outbound calling.
        /// This member is required.
        public var outboundCalling: Swift.Bool?
        /// Allows or denies SMS messaging.
        /// This member is required.
        public var sms: Swift.Bool?

        public init(
            inboundCalling: Swift.Bool? = nil,
            outboundCalling: Swift.Bool? = nil,
            sms: Swift.Bool? = nil
        ) {
            self.inboundCalling = inboundCalling
            self.outboundCalling = outboundCalling
            self.sms = sms
        }
    }
}

extension ChimeClientTypes {

    /// Settings associated with an Amazon Chime user, including inbound and outbound calling and text messaging.
    public struct UserSettings: Swift.Sendable {
        /// The telephony settings associated with the user.
        /// This member is required.
        public var telephony: ChimeClientTypes.TelephonySettings?

        public init(
            telephony: ChimeClientTypes.TelephonySettings? = nil
        ) {
            self.telephony = telephony
        }
    }
}

public struct GetUserSettingsOutput: Swift.Sendable {
    /// The user settings.
    public var userSettings: ChimeClientTypes.UserSettings?

    public init(
        userSettings: ChimeClientTypes.UserSettings? = nil
    ) {
        self.userSettings = userSettings
    }
}

extension ChimeClientTypes {

    /// Invitation object returned after emailing users to invite them to join the Amazon Chime Team account.
    public struct Invite: Swift.Sendable {
        /// The email address to which the invite is sent.
        public var emailAddress: Swift.String?
        /// The status of the invite email.
        public var emailStatus: ChimeClientTypes.EmailStatus?
        /// The invite ID.
        public var inviteId: Swift.String?
        /// The status of the invite.
        public var status: ChimeClientTypes.InviteStatus?

        public init(
            emailAddress: Swift.String? = nil,
            emailStatus: ChimeClientTypes.EmailStatus? = nil,
            inviteId: Swift.String? = nil,
            status: ChimeClientTypes.InviteStatus? = nil
        ) {
            self.emailAddress = emailAddress
            self.emailStatus = emailStatus
            self.inviteId = inviteId
            self.status = status
        }
    }
}

extension ChimeClientTypes.Invite: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Invite(emailStatus: \(Swift.String(describing: emailStatus)), inviteId: \(Swift.String(describing: inviteId)), status: \(Swift.String(describing: status)), emailAddress: \"CONTENT_REDACTED\")"}
}

public struct InviteUsersInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The user email addresses to which to send the email invitation.
    /// This member is required.
    public var userEmailList: [Swift.String]?
    /// The user type.
    public var userType: ChimeClientTypes.UserType?

    public init(
        accountId: Swift.String? = nil,
        userEmailList: [Swift.String]? = nil,
        userType: ChimeClientTypes.UserType? = nil
    ) {
        self.accountId = accountId
        self.userEmailList = userEmailList
        self.userType = userType
    }
}

extension InviteUsersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InviteUsersInput(accountId: \(Swift.String(describing: accountId)), userType: \(Swift.String(describing: userType)), userEmailList: \"CONTENT_REDACTED\")"}
}

public struct InviteUsersOutput: Swift.Sendable {
    /// The email invitation details.
    public var invites: [ChimeClientTypes.Invite]?

    public init(
        invites: [ChimeClientTypes.Invite]? = nil
    ) {
        self.invites = invites
    }
}

public struct ListAccountsInput: Swift.Sendable {
    /// The maximum number of results to return in a single call. Defaults to 100.
    public var maxResults: Swift.Int?
    /// Amazon Chime account name prefix with which to filter results.
    public var name: Swift.String?
    /// The token to use to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// User email address with which to filter results.
    public var userEmail: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        userEmail: Swift.String? = nil
    ) {
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
        self.userEmail = userEmail
    }
}

extension ListAccountsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAccountsInput(maxResults: \(Swift.String(describing: maxResults)), name: \(Swift.String(describing: name)), nextToken: \(Swift.String(describing: nextToken)), userEmail: \"CONTENT_REDACTED\")"}
}

public struct ListAccountsOutput: Swift.Sendable {
    /// List of Amazon Chime accounts and account details.
    public var accounts: [ChimeClientTypes.Account]?
    /// The token to use to retrieve the next page of results.
    public var nextToken: Swift.String?

    public init(
        accounts: [ChimeClientTypes.Account]? = nil,
        nextToken: Swift.String? = nil
    ) {
        self.accounts = accounts
        self.nextToken = nextToken
    }
}

public struct ListBotsInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The maximum number of results to return in a single call. The default is 10.
    public var maxResults: Swift.Int?
    /// The token to use to retrieve the next page of results.
    public var nextToken: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListBotsOutput: Swift.Sendable {
    /// List of bots and bot details.
    public var bots: [ChimeClientTypes.Bot]?
    /// The token to use to retrieve the next page of results.
    public var nextToken: Swift.String?

    public init(
        bots: [ChimeClientTypes.Bot]? = nil,
        nextToken: Swift.String? = nil
    ) {
        self.bots = bots
        self.nextToken = nextToken
    }
}

public struct ListPhoneNumberOrdersInput: Swift.Sendable {
    /// The maximum number of results to return in a single call.
    public var maxResults: Swift.Int?
    /// The token to use to retrieve the next page of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    ) {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListPhoneNumberOrdersOutput: Swift.Sendable {
    /// The token to use to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// The phone number order details.
    public var phoneNumberOrders: [ChimeClientTypes.PhoneNumberOrder]?

    public init(
        nextToken: Swift.String? = nil,
        phoneNumberOrders: [ChimeClientTypes.PhoneNumberOrder]? = nil
    ) {
        self.nextToken = nextToken
        self.phoneNumberOrders = phoneNumberOrders
    }
}

public struct ListPhoneNumbersInput: Swift.Sendable {
    /// The filter to use to limit the number of results.
    public var filterName: ChimeClientTypes.PhoneNumberAssociationName?
    /// The value to use for the filter.
    public var filterValue: Swift.String?
    /// The maximum number of results to return in a single call.
    public var maxResults: Swift.Int?
    /// The token to use to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// The phone number product type.
    public var productType: ChimeClientTypes.PhoneNumberProductType?
    /// The phone number status.
    public var status: ChimeClientTypes.PhoneNumberStatus?

    public init(
        filterName: ChimeClientTypes.PhoneNumberAssociationName? = nil,
        filterValue: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        productType: ChimeClientTypes.PhoneNumberProductType? = nil,
        status: ChimeClientTypes.PhoneNumberStatus? = nil
    ) {
        self.filterName = filterName
        self.filterValue = filterValue
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.productType = productType
        self.status = status
    }
}

public struct ListPhoneNumbersOutput: Swift.Sendable {
    /// The token to use to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// The phone number details.
    public var phoneNumbers: [ChimeClientTypes.PhoneNumber]?

    public init(
        nextToken: Swift.String? = nil,
        phoneNumbers: [ChimeClientTypes.PhoneNumber]? = nil
    ) {
        self.nextToken = nextToken
        self.phoneNumbers = phoneNumbers
    }
}

public struct ListRoomMembershipsInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The maximum number of results to return in a single call.
    public var maxResults: Swift.Int?
    /// The token to use to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// The room ID.
    /// This member is required.
    public var roomId: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        roomId: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.roomId = roomId
    }
}

public struct ListRoomMembershipsOutput: Swift.Sendable {
    /// The token to use to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// The room membership details.
    public var roomMemberships: [ChimeClientTypes.RoomMembership]?

    public init(
        nextToken: Swift.String? = nil,
        roomMemberships: [ChimeClientTypes.RoomMembership]? = nil
    ) {
        self.nextToken = nextToken
        self.roomMemberships = roomMemberships
    }
}

public struct ListRoomsInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The maximum number of results to return in a single call.
    public var maxResults: Swift.Int?
    /// The member ID (user ID or bot ID).
    public var memberId: Swift.String?
    /// The token to use to retrieve the next page of results.
    public var nextToken: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        memberId: Swift.String? = nil,
        nextToken: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.maxResults = maxResults
        self.memberId = memberId
        self.nextToken = nextToken
    }
}

public struct ListRoomsOutput: Swift.Sendable {
    /// The token to use to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// The room details.
    public var rooms: [ChimeClientTypes.Room]?

    public init(
        nextToken: Swift.String? = nil,
        rooms: [ChimeClientTypes.Room]? = nil
    ) {
        self.nextToken = nextToken
        self.rooms = rooms
    }
}

public struct ListSupportedPhoneNumberCountriesInput: Swift.Sendable {
    /// The phone number product type.
    /// This member is required.
    public var productType: ChimeClientTypes.PhoneNumberProductType?

    public init(
        productType: ChimeClientTypes.PhoneNumberProductType? = nil
    ) {
        self.productType = productType
    }
}

extension ChimeClientTypes {

    /// The phone number country.
    public struct PhoneNumberCountry: Swift.Sendable {
        /// The phone number country code. Format: ISO 3166-1 alpha-2.
        public var countryCode: Swift.String?
        /// The supported phone number types.
        public var supportedPhoneNumberTypes: [ChimeClientTypes.PhoneNumberType]?

        public init(
            countryCode: Swift.String? = nil,
            supportedPhoneNumberTypes: [ChimeClientTypes.PhoneNumberType]? = nil
        ) {
            self.countryCode = countryCode
            self.supportedPhoneNumberTypes = supportedPhoneNumberTypes
        }
    }
}

public struct ListSupportedPhoneNumberCountriesOutput: Swift.Sendable {
    /// The supported phone number countries.
    public var phoneNumberCountries: [ChimeClientTypes.PhoneNumberCountry]?

    public init(
        phoneNumberCountries: [ChimeClientTypes.PhoneNumberCountry]? = nil
    ) {
        self.phoneNumberCountries = phoneNumberCountries
    }
}

public struct ListUsersInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The maximum number of results to return in a single call. Defaults to 100.
    public var maxResults: Swift.Int?
    /// The token to use to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// Optional. The user email address used to filter results. Maximum 1.
    public var userEmail: Swift.String?
    /// The user type.
    public var userType: ChimeClientTypes.UserType?

    public init(
        accountId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        userEmail: Swift.String? = nil,
        userType: ChimeClientTypes.UserType? = nil
    ) {
        self.accountId = accountId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.userEmail = userEmail
        self.userType = userType
    }
}

extension ListUsersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListUsersInput(accountId: \(Swift.String(describing: accountId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), userType: \(Swift.String(describing: userType)), userEmail: \"CONTENT_REDACTED\")"}
}

public struct ListUsersOutput: Swift.Sendable {
    /// The token to use to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// List of users and user details.
    public var users: [ChimeClientTypes.User]?

    public init(
        nextToken: Swift.String? = nil,
        users: [ChimeClientTypes.User]? = nil
    ) {
        self.nextToken = nextToken
        self.users = users
    }
}

public struct LogoutUserInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The user ID.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        userId: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.userId = userId
    }
}

public struct LogoutUserOutput: Swift.Sendable {

    public init() { }
}

public struct PutEventsConfigurationInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The bot ID.
    /// This member is required.
    public var botId: Swift.String?
    /// Lambda function ARN that allows the bot to receive outgoing events.
    public var lambdaFunctionArn: Swift.String?
    /// HTTPS endpoint that allows the bot to receive outgoing events.
    public var outboundEventsHTTPSEndpoint: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        botId: Swift.String? = nil,
        lambdaFunctionArn: Swift.String? = nil,
        outboundEventsHTTPSEndpoint: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.botId = botId
        self.lambdaFunctionArn = lambdaFunctionArn
        self.outboundEventsHTTPSEndpoint = outboundEventsHTTPSEndpoint
    }
}

extension PutEventsConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutEventsConfigurationInput(accountId: \(Swift.String(describing: accountId)), botId: \(Swift.String(describing: botId)), lambdaFunctionArn: \"CONTENT_REDACTED\", outboundEventsHTTPSEndpoint: \"CONTENT_REDACTED\")"}
}

public struct PutEventsConfigurationOutput: Swift.Sendable {
    /// The configuration that allows a bot to receive outgoing events. Can be an HTTPS endpoint or an AWS Lambda function ARN.
    public var eventsConfiguration: ChimeClientTypes.EventsConfiguration?

    public init(
        eventsConfiguration: ChimeClientTypes.EventsConfiguration? = nil
    ) {
        self.eventsConfiguration = eventsConfiguration
    }
}

public struct PutRetentionSettingsInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The retention settings.
    /// This member is required.
    public var retentionSettings: ChimeClientTypes.RetentionSettings?

    public init(
        accountId: Swift.String? = nil,
        retentionSettings: ChimeClientTypes.RetentionSettings? = nil
    ) {
        self.accountId = accountId
        self.retentionSettings = retentionSettings
    }
}

public struct PutRetentionSettingsOutput: Swift.Sendable {
    /// The timestamp representing the time at which the specified items are permanently deleted, in ISO 8601 format.
    public var initiateDeletionTimestamp: Foundation.Date?
    /// The retention settings.
    public var retentionSettings: ChimeClientTypes.RetentionSettings?

    public init(
        initiateDeletionTimestamp: Foundation.Date? = nil,
        retentionSettings: ChimeClientTypes.RetentionSettings? = nil
    ) {
        self.initiateDeletionTimestamp = initiateDeletionTimestamp
        self.retentionSettings = retentionSettings
    }
}

public struct RedactConversationMessageInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The conversation ID.
    /// This member is required.
    public var conversationId: Swift.String?
    /// The message ID.
    /// This member is required.
    public var messageId: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        conversationId: Swift.String? = nil,
        messageId: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.conversationId = conversationId
        self.messageId = messageId
    }
}

public struct RedactConversationMessageOutput: Swift.Sendable {

    public init() { }
}

public struct RedactRoomMessageInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The message ID.
    /// This member is required.
    public var messageId: Swift.String?
    /// The room ID.
    /// This member is required.
    public var roomId: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        messageId: Swift.String? = nil,
        roomId: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.messageId = messageId
        self.roomId = roomId
    }
}

public struct RedactRoomMessageOutput: Swift.Sendable {

    public init() { }
}

public struct RegenerateSecurityTokenInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The bot ID.
    /// This member is required.
    public var botId: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        botId: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.botId = botId
    }
}

public struct RegenerateSecurityTokenOutput: Swift.Sendable {
    /// A resource that allows Enterprise account administrators to configure an interface that receives events from Amazon Chime.
    public var bot: ChimeClientTypes.Bot?

    public init(
        bot: ChimeClientTypes.Bot? = nil
    ) {
        self.bot = bot
    }
}

public struct ResetPersonalPINInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The user ID.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        userId: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.userId = userId
    }
}

public struct ResetPersonalPINOutput: Swift.Sendable {
    /// The user details and new personal meeting PIN.
    public var user: ChimeClientTypes.User?

    public init(
        user: ChimeClientTypes.User? = nil
    ) {
        self.user = user
    }
}

public struct RestorePhoneNumberInput: Swift.Sendable {
    /// The phone number.
    /// This member is required.
    public var phoneNumberId: Swift.String?

    public init(
        phoneNumberId: Swift.String? = nil
    ) {
        self.phoneNumberId = phoneNumberId
    }
}

public struct RestorePhoneNumberOutput: Swift.Sendable {
    /// The phone number details.
    public var phoneNumber: ChimeClientTypes.PhoneNumber?

    public init(
        phoneNumber: ChimeClientTypes.PhoneNumber? = nil
    ) {
        self.phoneNumber = phoneNumber
    }
}

public struct SearchAvailablePhoneNumbersInput: Swift.Sendable {
    /// The area code used to filter results. Only applies to the US.
    public var areaCode: Swift.String?
    /// The city used to filter results. Only applies to the US.
    public var city: Swift.String?
    /// The country used to filter results. Defaults to the US Format: ISO 3166-1 alpha-2.
    public var country: Swift.String?
    /// The maximum number of results to return in a single call.
    public var maxResults: Swift.Int?
    /// The token used to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// The phone number type used to filter results. Required for non-US numbers.
    public var phoneNumberType: ChimeClientTypes.PhoneNumberType?
    /// The state used to filter results. Required only if you provide City. Only applies to the US.
    public var state: Swift.String?
    /// The toll-free prefix that you use to filter results. Only applies to the US.
    public var tollFreePrefix: Swift.String?

    public init(
        areaCode: Swift.String? = nil,
        city: Swift.String? = nil,
        country: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        phoneNumberType: ChimeClientTypes.PhoneNumberType? = nil,
        state: Swift.String? = nil,
        tollFreePrefix: Swift.String? = nil
    ) {
        self.areaCode = areaCode
        self.city = city
        self.country = country
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.phoneNumberType = phoneNumberType
        self.state = state
        self.tollFreePrefix = tollFreePrefix
    }
}

public struct SearchAvailablePhoneNumbersOutput: Swift.Sendable {
    /// List of phone numbers, in E.164 format.
    public var e164PhoneNumbers: [Swift.String]?
    /// The token used to retrieve the next page of search results.
    public var nextToken: Swift.String?

    public init(
        e164PhoneNumbers: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    ) {
        self.e164PhoneNumbers = e164PhoneNumbers
        self.nextToken = nextToken
    }
}

extension SearchAvailablePhoneNumbersOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SearchAvailablePhoneNumbersOutput(nextToken: \(Swift.String(describing: nextToken)), e164PhoneNumbers: \"CONTENT_REDACTED\")"}
}

public struct UpdateAccountInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The default license applied when you add users to an Amazon Chime account.
    public var defaultLicense: ChimeClientTypes.License?
    /// The new name for the specified Amazon Chime account.
    public var name: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        defaultLicense: ChimeClientTypes.License? = nil,
        name: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.defaultLicense = defaultLicense
        self.name = name
    }
}

public struct UpdateAccountOutput: Swift.Sendable {
    /// The updated Amazon Chime account details.
    public var account: ChimeClientTypes.Account?

    public init(
        account: ChimeClientTypes.Account? = nil
    ) {
        self.account = account
    }
}

public struct UpdateAccountSettingsInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The Amazon Chime account settings to update.
    /// This member is required.
    public var accountSettings: ChimeClientTypes.AccountSettings?

    public init(
        accountId: Swift.String? = nil,
        accountSettings: ChimeClientTypes.AccountSettings? = nil
    ) {
        self.accountId = accountId
        self.accountSettings = accountSettings
    }
}

public struct UpdateAccountSettingsOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateBotInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The bot ID.
    /// This member is required.
    public var botId: Swift.String?
    /// When true, stops the specified bot from running in your account.
    public var disabled: Swift.Bool?

    public init(
        accountId: Swift.String? = nil,
        botId: Swift.String? = nil,
        disabled: Swift.Bool? = nil
    ) {
        self.accountId = accountId
        self.botId = botId
        self.disabled = disabled
    }
}

public struct UpdateBotOutput: Swift.Sendable {
    /// The updated bot details.
    public var bot: ChimeClientTypes.Bot?

    public init(
        bot: ChimeClientTypes.Bot? = nil
    ) {
        self.bot = bot
    }
}

public struct UpdateGlobalSettingsInput: Swift.Sendable {
    /// The Amazon Chime Business Calling settings.
    public var businessCalling: ChimeClientTypes.BusinessCallingSettings?
    /// The Amazon Chime Voice Connector settings.
    public var voiceConnector: ChimeClientTypes.VoiceConnectorSettings?

    public init(
        businessCalling: ChimeClientTypes.BusinessCallingSettings? = nil,
        voiceConnector: ChimeClientTypes.VoiceConnectorSettings? = nil
    ) {
        self.businessCalling = businessCalling
        self.voiceConnector = voiceConnector
    }
}

public struct UpdatePhoneNumberInput: Swift.Sendable {
    /// The outbound calling name associated with the phone number.
    public var callingName: Swift.String?
    /// The phone number ID.
    /// This member is required.
    public var phoneNumberId: Swift.String?
    /// The product type.
    public var productType: ChimeClientTypes.PhoneNumberProductType?

    public init(
        callingName: Swift.String? = nil,
        phoneNumberId: Swift.String? = nil,
        productType: ChimeClientTypes.PhoneNumberProductType? = nil
    ) {
        self.callingName = callingName
        self.phoneNumberId = phoneNumberId
        self.productType = productType
    }
}

extension UpdatePhoneNumberInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdatePhoneNumberInput(phoneNumberId: \(Swift.String(describing: phoneNumberId)), productType: \(Swift.String(describing: productType)), callingName: \"CONTENT_REDACTED\")"}
}

public struct UpdatePhoneNumberOutput: Swift.Sendable {
    /// The updated phone number details.
    public var phoneNumber: ChimeClientTypes.PhoneNumber?

    public init(
        phoneNumber: ChimeClientTypes.PhoneNumber? = nil
    ) {
        self.phoneNumber = phoneNumber
    }
}

public struct UpdatePhoneNumberSettingsInput: Swift.Sendable {
    /// The default outbound calling name for the account.
    /// This member is required.
    public var callingName: Swift.String?

    public init(
        callingName: Swift.String? = nil
    ) {
        self.callingName = callingName
    }
}

extension UpdatePhoneNumberSettingsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdatePhoneNumberSettingsInput(callingName: \"CONTENT_REDACTED\")"}
}

public struct UpdateRoomInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The room name.
    public var name: Swift.String?
    /// The room ID.
    /// This member is required.
    public var roomId: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        name: Swift.String? = nil,
        roomId: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.name = name
        self.roomId = roomId
    }
}

extension UpdateRoomInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRoomInput(accountId: \(Swift.String(describing: accountId)), roomId: \(Swift.String(describing: roomId)), name: \"CONTENT_REDACTED\")"}
}

public struct UpdateRoomOutput: Swift.Sendable {
    /// The room details.
    public var room: ChimeClientTypes.Room?

    public init(
        room: ChimeClientTypes.Room? = nil
    ) {
        self.room = room
    }
}

public struct UpdateRoomMembershipInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The member ID.
    /// This member is required.
    public var memberId: Swift.String?
    /// The role of the member.
    public var role: ChimeClientTypes.RoomMembershipRole?
    /// The room ID.
    /// This member is required.
    public var roomId: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        memberId: Swift.String? = nil,
        role: ChimeClientTypes.RoomMembershipRole? = nil,
        roomId: Swift.String? = nil
    ) {
        self.accountId = accountId
        self.memberId = memberId
        self.role = role
        self.roomId = roomId
    }
}

public struct UpdateRoomMembershipOutput: Swift.Sendable {
    /// The room membership details.
    public var roomMembership: ChimeClientTypes.RoomMembership?

    public init(
        roomMembership: ChimeClientTypes.RoomMembership? = nil
    ) {
        self.roomMembership = roomMembership
    }
}

public struct UpdateUserInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The Alexa for Business metadata.
    public var alexaForBusinessMetadata: ChimeClientTypes.AlexaForBusinessMetadata?
    /// The user license type to update. This must be a supported license type for the Amazon Chime account that the user belongs to.
    public var licenseType: ChimeClientTypes.License?
    /// The user ID.
    /// This member is required.
    public var userId: Swift.String?
    /// The user type.
    public var userType: ChimeClientTypes.UserType?

    public init(
        accountId: Swift.String? = nil,
        alexaForBusinessMetadata: ChimeClientTypes.AlexaForBusinessMetadata? = nil,
        licenseType: ChimeClientTypes.License? = nil,
        userId: Swift.String? = nil,
        userType: ChimeClientTypes.UserType? = nil
    ) {
        self.accountId = accountId
        self.alexaForBusinessMetadata = alexaForBusinessMetadata
        self.licenseType = licenseType
        self.userId = userId
        self.userType = userType
    }
}

public struct UpdateUserOutput: Swift.Sendable {
    /// The updated user details.
    public var user: ChimeClientTypes.User?

    public init(
        user: ChimeClientTypes.User? = nil
    ) {
        self.user = user
    }
}

public struct UpdateUserSettingsInput: Swift.Sendable {
    /// The Amazon Chime account ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The user ID.
    /// This member is required.
    public var userId: Swift.String?
    /// The user settings to update.
    /// This member is required.
    public var userSettings: ChimeClientTypes.UserSettings?

    public init(
        accountId: Swift.String? = nil,
        userId: Swift.String? = nil,
        userSettings: ChimeClientTypes.UserSettings? = nil
    ) {
        self.accountId = accountId
        self.userId = userId
        self.userSettings = userSettings
    }
}

extension AssociatePhoneNumberWithUserInput {

    static func urlPathProvider(_ value: AssociatePhoneNumberWithUserInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let userId = value.userId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/users/\(userId.urlPercentEncoding())"
    }
}

extension AssociatePhoneNumberWithUserInput {

    static func queryItemProvider(_ value: AssociatePhoneNumberWithUserInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "associate-phone-number"))
        return items
    }
}

extension AssociateSigninDelegateGroupsWithAccountInput {

    static func urlPathProvider(_ value: AssociateSigninDelegateGroupsWithAccountInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())"
    }
}

extension AssociateSigninDelegateGroupsWithAccountInput {

    static func queryItemProvider(_ value: AssociateSigninDelegateGroupsWithAccountInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "associate-signin-delegate-groups"))
        return items
    }
}

extension BatchCreateRoomMembershipInput {

    static func urlPathProvider(_ value: BatchCreateRoomMembershipInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let roomId = value.roomId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/rooms/\(roomId.urlPercentEncoding())/memberships"
    }
}

extension BatchCreateRoomMembershipInput {

    static func queryItemProvider(_ value: BatchCreateRoomMembershipInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "batch-create"))
        return items
    }
}

extension BatchDeletePhoneNumberInput {

    static func urlPathProvider(_ value: BatchDeletePhoneNumberInput) -> Swift.String? {
        return "/phone-numbers"
    }
}

extension BatchDeletePhoneNumberInput {

    static func queryItemProvider(_ value: BatchDeletePhoneNumberInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "batch-delete"))
        return items
    }
}

extension BatchSuspendUserInput {

    static func urlPathProvider(_ value: BatchSuspendUserInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/users"
    }
}

extension BatchSuspendUserInput {

    static func queryItemProvider(_ value: BatchSuspendUserInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "suspend"))
        return items
    }
}

extension BatchUnsuspendUserInput {

    static func urlPathProvider(_ value: BatchUnsuspendUserInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/users"
    }
}

extension BatchUnsuspendUserInput {

    static func queryItemProvider(_ value: BatchUnsuspendUserInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "unsuspend"))
        return items
    }
}

extension BatchUpdatePhoneNumberInput {

    static func urlPathProvider(_ value: BatchUpdatePhoneNumberInput) -> Swift.String? {
        return "/phone-numbers"
    }
}

extension BatchUpdatePhoneNumberInput {

    static func queryItemProvider(_ value: BatchUpdatePhoneNumberInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "batch-update"))
        return items
    }
}

extension BatchUpdateUserInput {

    static func urlPathProvider(_ value: BatchUpdateUserInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/users"
    }
}

extension CreateAccountInput {

    static func urlPathProvider(_ value: CreateAccountInput) -> Swift.String? {
        return "/accounts"
    }
}

extension CreateBotInput {

    static func urlPathProvider(_ value: CreateBotInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/bots"
    }
}

extension CreateMeetingDialOutInput {

    static func urlPathProvider(_ value: CreateMeetingDialOutInput) -> Swift.String? {
        guard let meetingId = value.meetingId else {
            return nil
        }
        return "/meetings/\(meetingId.urlPercentEncoding())/dial-outs"
    }
}

extension CreatePhoneNumberOrderInput {

    static func urlPathProvider(_ value: CreatePhoneNumberOrderInput) -> Swift.String? {
        return "/phone-number-orders"
    }
}

extension CreateRoomInput {

    static func urlPathProvider(_ value: CreateRoomInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/rooms"
    }
}

extension CreateRoomMembershipInput {

    static func urlPathProvider(_ value: CreateRoomMembershipInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let roomId = value.roomId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/rooms/\(roomId.urlPercentEncoding())/memberships"
    }
}

extension CreateUserInput {

    static func urlPathProvider(_ value: CreateUserInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/users"
    }
}

extension CreateUserInput {

    static func queryItemProvider(_ value: CreateUserInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "create"))
        return items
    }
}

extension DeleteAccountInput {

    static func urlPathProvider(_ value: DeleteAccountInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())"
    }
}

extension DeleteEventsConfigurationInput {

    static func urlPathProvider(_ value: DeleteEventsConfigurationInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let botId = value.botId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/bots/\(botId.urlPercentEncoding())/events-configuration"
    }
}

extension DeletePhoneNumberInput {

    static func urlPathProvider(_ value: DeletePhoneNumberInput) -> Swift.String? {
        guard let phoneNumberId = value.phoneNumberId else {
            return nil
        }
        return "/phone-numbers/\(phoneNumberId.urlPercentEncoding())"
    }
}

extension DeleteRoomInput {

    static func urlPathProvider(_ value: DeleteRoomInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let roomId = value.roomId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/rooms/\(roomId.urlPercentEncoding())"
    }
}

extension DeleteRoomMembershipInput {

    static func urlPathProvider(_ value: DeleteRoomMembershipInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let roomId = value.roomId else {
            return nil
        }
        guard let memberId = value.memberId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/rooms/\(roomId.urlPercentEncoding())/memberships/\(memberId.urlPercentEncoding())"
    }
}

extension DisassociatePhoneNumberFromUserInput {

    static func urlPathProvider(_ value: DisassociatePhoneNumberFromUserInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let userId = value.userId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/users/\(userId.urlPercentEncoding())"
    }
}

extension DisassociatePhoneNumberFromUserInput {

    static func queryItemProvider(_ value: DisassociatePhoneNumberFromUserInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "disassociate-phone-number"))
        return items
    }
}

extension DisassociateSigninDelegateGroupsFromAccountInput {

    static func urlPathProvider(_ value: DisassociateSigninDelegateGroupsFromAccountInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())"
    }
}

extension DisassociateSigninDelegateGroupsFromAccountInput {

    static func queryItemProvider(_ value: DisassociateSigninDelegateGroupsFromAccountInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "disassociate-signin-delegate-groups"))
        return items
    }
}

extension GetAccountInput {

    static func urlPathProvider(_ value: GetAccountInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())"
    }
}

extension GetAccountSettingsInput {

    static func urlPathProvider(_ value: GetAccountSettingsInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/settings"
    }
}

extension GetBotInput {

    static func urlPathProvider(_ value: GetBotInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let botId = value.botId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/bots/\(botId.urlPercentEncoding())"
    }
}

extension GetEventsConfigurationInput {

    static func urlPathProvider(_ value: GetEventsConfigurationInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let botId = value.botId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/bots/\(botId.urlPercentEncoding())/events-configuration"
    }
}

extension GetGlobalSettingsInput {

    static func urlPathProvider(_ value: GetGlobalSettingsInput) -> Swift.String? {
        return "/settings"
    }
}

extension GetPhoneNumberInput {

    static func urlPathProvider(_ value: GetPhoneNumberInput) -> Swift.String? {
        guard let phoneNumberId = value.phoneNumberId else {
            return nil
        }
        return "/phone-numbers/\(phoneNumberId.urlPercentEncoding())"
    }
}

extension GetPhoneNumberOrderInput {

    static func urlPathProvider(_ value: GetPhoneNumberOrderInput) -> Swift.String? {
        guard let phoneNumberOrderId = value.phoneNumberOrderId else {
            return nil
        }
        return "/phone-number-orders/\(phoneNumberOrderId.urlPercentEncoding())"
    }
}

extension GetPhoneNumberSettingsInput {

    static func urlPathProvider(_ value: GetPhoneNumberSettingsInput) -> Swift.String? {
        return "/settings/phone-number"
    }
}

extension GetRetentionSettingsInput {

    static func urlPathProvider(_ value: GetRetentionSettingsInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/retention-settings"
    }
}

extension GetRoomInput {

    static func urlPathProvider(_ value: GetRoomInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let roomId = value.roomId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/rooms/\(roomId.urlPercentEncoding())"
    }
}

extension GetUserInput {

    static func urlPathProvider(_ value: GetUserInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let userId = value.userId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/users/\(userId.urlPercentEncoding())"
    }
}

extension GetUserSettingsInput {

    static func urlPathProvider(_ value: GetUserSettingsInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let userId = value.userId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/users/\(userId.urlPercentEncoding())/settings"
    }
}

extension InviteUsersInput {

    static func urlPathProvider(_ value: InviteUsersInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/users"
    }
}

extension InviteUsersInput {

    static func queryItemProvider(_ value: InviteUsersInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "add"))
        return items
    }
}

extension ListAccountsInput {

    static func urlPathProvider(_ value: ListAccountsInput) -> Swift.String? {
        return "/accounts"
    }
}

extension ListAccountsInput {

    static func queryItemProvider(_ value: ListAccountsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let userEmail = value.userEmail {
            let userEmailQueryItem = Smithy.URIQueryItem(name: "user-email".urlPercentEncoding(), value: Swift.String(userEmail).urlPercentEncoding())
            items.append(userEmailQueryItem)
        }
        if let name = value.name {
            let nameQueryItem = Smithy.URIQueryItem(name: "name".urlPercentEncoding(), value: Swift.String(name).urlPercentEncoding())
            items.append(nameQueryItem)
        }
        return items
    }
}

extension ListBotsInput {

    static func urlPathProvider(_ value: ListBotsInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/bots"
    }
}

extension ListBotsInput {

    static func queryItemProvider(_ value: ListBotsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListPhoneNumberOrdersInput {

    static func urlPathProvider(_ value: ListPhoneNumberOrdersInput) -> Swift.String? {
        return "/phone-number-orders"
    }
}

extension ListPhoneNumberOrdersInput {

    static func queryItemProvider(_ value: ListPhoneNumberOrdersInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListPhoneNumbersInput {

    static func urlPathProvider(_ value: ListPhoneNumbersInput) -> Swift.String? {
        return "/phone-numbers"
    }
}

extension ListPhoneNumbersInput {

    static func queryItemProvider(_ value: ListPhoneNumbersInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let status = value.status {
            let statusQueryItem = Smithy.URIQueryItem(name: "status".urlPercentEncoding(), value: Swift.String(status.rawValue).urlPercentEncoding())
            items.append(statusQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let productType = value.productType {
            let productTypeQueryItem = Smithy.URIQueryItem(name: "product-type".urlPercentEncoding(), value: Swift.String(productType.rawValue).urlPercentEncoding())
            items.append(productTypeQueryItem)
        }
        if let filterName = value.filterName {
            let filterNameQueryItem = Smithy.URIQueryItem(name: "filter-name".urlPercentEncoding(), value: Swift.String(filterName.rawValue).urlPercentEncoding())
            items.append(filterNameQueryItem)
        }
        if let filterValue = value.filterValue {
            let filterValueQueryItem = Smithy.URIQueryItem(name: "filter-value".urlPercentEncoding(), value: Swift.String(filterValue).urlPercentEncoding())
            items.append(filterValueQueryItem)
        }
        return items
    }
}

extension ListRoomMembershipsInput {

    static func urlPathProvider(_ value: ListRoomMembershipsInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let roomId = value.roomId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/rooms/\(roomId.urlPercentEncoding())/memberships"
    }
}

extension ListRoomMembershipsInput {

    static func queryItemProvider(_ value: ListRoomMembershipsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListRoomsInput {

    static func urlPathProvider(_ value: ListRoomsInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/rooms"
    }
}

extension ListRoomsInput {

    static func queryItemProvider(_ value: ListRoomsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let memberId = value.memberId {
            let memberIdQueryItem = Smithy.URIQueryItem(name: "member-id".urlPercentEncoding(), value: Swift.String(memberId).urlPercentEncoding())
            items.append(memberIdQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListSupportedPhoneNumberCountriesInput {

    static func urlPathProvider(_ value: ListSupportedPhoneNumberCountriesInput) -> Swift.String? {
        return "/phone-number-countries"
    }
}

extension ListSupportedPhoneNumberCountriesInput {

    static func queryItemProvider(_ value: ListSupportedPhoneNumberCountriesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let productType = value.productType else {
            let message = "Creating a URL Query Item failed. productType is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let productTypeQueryItem = Smithy.URIQueryItem(name: "product-type".urlPercentEncoding(), value: Swift.String(productType.rawValue).urlPercentEncoding())
        items.append(productTypeQueryItem)
        return items
    }
}

extension ListUsersInput {

    static func urlPathProvider(_ value: ListUsersInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/users"
    }
}

extension ListUsersInput {

    static func queryItemProvider(_ value: ListUsersInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let userEmail = value.userEmail {
            let userEmailQueryItem = Smithy.URIQueryItem(name: "user-email".urlPercentEncoding(), value: Swift.String(userEmail).urlPercentEncoding())
            items.append(userEmailQueryItem)
        }
        if let userType = value.userType {
            let userTypeQueryItem = Smithy.URIQueryItem(name: "user-type".urlPercentEncoding(), value: Swift.String(userType.rawValue).urlPercentEncoding())
            items.append(userTypeQueryItem)
        }
        return items
    }
}

extension LogoutUserInput {

    static func urlPathProvider(_ value: LogoutUserInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let userId = value.userId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/users/\(userId.urlPercentEncoding())"
    }
}

extension LogoutUserInput {

    static func queryItemProvider(_ value: LogoutUserInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "logout"))
        return items
    }
}

extension PutEventsConfigurationInput {

    static func urlPathProvider(_ value: PutEventsConfigurationInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let botId = value.botId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/bots/\(botId.urlPercentEncoding())/events-configuration"
    }
}

extension PutRetentionSettingsInput {

    static func urlPathProvider(_ value: PutRetentionSettingsInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/retention-settings"
    }
}

extension RedactConversationMessageInput {

    static func urlPathProvider(_ value: RedactConversationMessageInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let conversationId = value.conversationId else {
            return nil
        }
        guard let messageId = value.messageId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/conversations/\(conversationId.urlPercentEncoding())/messages/\(messageId.urlPercentEncoding())"
    }
}

extension RedactConversationMessageInput {

    static func queryItemProvider(_ value: RedactConversationMessageInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "redact"))
        return items
    }
}

extension RedactRoomMessageInput {

    static func urlPathProvider(_ value: RedactRoomMessageInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let roomId = value.roomId else {
            return nil
        }
        guard let messageId = value.messageId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/rooms/\(roomId.urlPercentEncoding())/messages/\(messageId.urlPercentEncoding())"
    }
}

extension RedactRoomMessageInput {

    static func queryItemProvider(_ value: RedactRoomMessageInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "redact"))
        return items
    }
}

extension RegenerateSecurityTokenInput {

    static func urlPathProvider(_ value: RegenerateSecurityTokenInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let botId = value.botId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/bots/\(botId.urlPercentEncoding())"
    }
}

extension RegenerateSecurityTokenInput {

    static func queryItemProvider(_ value: RegenerateSecurityTokenInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "regenerate-security-token"))
        return items
    }
}

extension ResetPersonalPINInput {

    static func urlPathProvider(_ value: ResetPersonalPINInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let userId = value.userId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/users/\(userId.urlPercentEncoding())"
    }
}

extension ResetPersonalPINInput {

    static func queryItemProvider(_ value: ResetPersonalPINInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "reset-personal-pin"))
        return items
    }
}

extension RestorePhoneNumberInput {

    static func urlPathProvider(_ value: RestorePhoneNumberInput) -> Swift.String? {
        guard let phoneNumberId = value.phoneNumberId else {
            return nil
        }
        return "/phone-numbers/\(phoneNumberId.urlPercentEncoding())"
    }
}

extension RestorePhoneNumberInput {

    static func queryItemProvider(_ value: RestorePhoneNumberInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "restore"))
        return items
    }
}

extension SearchAvailablePhoneNumbersInput {

    static func urlPathProvider(_ value: SearchAvailablePhoneNumbersInput) -> Swift.String? {
        return "/search"
    }
}

extension SearchAvailablePhoneNumbersInput {

    static func queryItemProvider(_ value: SearchAvailablePhoneNumbersInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "type", value: "phone-numbers"))
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let state = value.state {
            let stateQueryItem = Smithy.URIQueryItem(name: "state".urlPercentEncoding(), value: Swift.String(state).urlPercentEncoding())
            items.append(stateQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let areaCode = value.areaCode {
            let areaCodeQueryItem = Smithy.URIQueryItem(name: "area-code".urlPercentEncoding(), value: Swift.String(areaCode).urlPercentEncoding())
            items.append(areaCodeQueryItem)
        }
        if let country = value.country {
            let countryQueryItem = Smithy.URIQueryItem(name: "country".urlPercentEncoding(), value: Swift.String(country).urlPercentEncoding())
            items.append(countryQueryItem)
        }
        if let city = value.city {
            let cityQueryItem = Smithy.URIQueryItem(name: "city".urlPercentEncoding(), value: Swift.String(city).urlPercentEncoding())
            items.append(cityQueryItem)
        }
        if let phoneNumberType = value.phoneNumberType {
            let phoneNumberTypeQueryItem = Smithy.URIQueryItem(name: "phone-number-type".urlPercentEncoding(), value: Swift.String(phoneNumberType.rawValue).urlPercentEncoding())
            items.append(phoneNumberTypeQueryItem)
        }
        if let tollFreePrefix = value.tollFreePrefix {
            let tollFreePrefixQueryItem = Smithy.URIQueryItem(name: "toll-free-prefix".urlPercentEncoding(), value: Swift.String(tollFreePrefix).urlPercentEncoding())
            items.append(tollFreePrefixQueryItem)
        }
        return items
    }
}

extension UpdateAccountInput {

    static func urlPathProvider(_ value: UpdateAccountInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())"
    }
}

extension UpdateAccountSettingsInput {

    static func urlPathProvider(_ value: UpdateAccountSettingsInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/settings"
    }
}

extension UpdateBotInput {

    static func urlPathProvider(_ value: UpdateBotInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let botId = value.botId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/bots/\(botId.urlPercentEncoding())"
    }
}

extension UpdateGlobalSettingsInput {

    static func urlPathProvider(_ value: UpdateGlobalSettingsInput) -> Swift.String? {
        return "/settings"
    }
}

extension UpdatePhoneNumberInput {

    static func urlPathProvider(_ value: UpdatePhoneNumberInput) -> Swift.String? {
        guard let phoneNumberId = value.phoneNumberId else {
            return nil
        }
        return "/phone-numbers/\(phoneNumberId.urlPercentEncoding())"
    }
}

extension UpdatePhoneNumberSettingsInput {

    static func urlPathProvider(_ value: UpdatePhoneNumberSettingsInput) -> Swift.String? {
        return "/settings/phone-number"
    }
}

extension UpdateRoomInput {

    static func urlPathProvider(_ value: UpdateRoomInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let roomId = value.roomId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/rooms/\(roomId.urlPercentEncoding())"
    }
}

extension UpdateRoomMembershipInput {

    static func urlPathProvider(_ value: UpdateRoomMembershipInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let roomId = value.roomId else {
            return nil
        }
        guard let memberId = value.memberId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/rooms/\(roomId.urlPercentEncoding())/memberships/\(memberId.urlPercentEncoding())"
    }
}

extension UpdateUserInput {

    static func urlPathProvider(_ value: UpdateUserInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let userId = value.userId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/users/\(userId.urlPercentEncoding())"
    }
}

extension UpdateUserSettingsInput {

    static func urlPathProvider(_ value: UpdateUserSettingsInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let userId = value.userId else {
            return nil
        }
        return "/accounts/\(accountId.urlPercentEncoding())/users/\(userId.urlPercentEncoding())/settings"
    }
}

extension AssociatePhoneNumberWithUserInput {

    static func write(value: AssociatePhoneNumberWithUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["E164PhoneNumber"].write(value.e164PhoneNumber)
    }
}

extension AssociateSigninDelegateGroupsWithAccountInput {

    static func write(value: AssociateSigninDelegateGroupsWithAccountInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SigninDelegateGroups"].writeList(value.signinDelegateGroups, memberWritingClosure: ChimeClientTypes.SigninDelegateGroup.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchCreateRoomMembershipInput {

    static func write(value: BatchCreateRoomMembershipInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MembershipItemList"].writeList(value.membershipItemList, memberWritingClosure: ChimeClientTypes.MembershipItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchDeletePhoneNumberInput {

    static func write(value: BatchDeletePhoneNumberInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PhoneNumberIds"].writeList(value.phoneNumberIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchSuspendUserInput {

    static func write(value: BatchSuspendUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["UserIdList"].writeList(value.userIdList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchUnsuspendUserInput {

    static func write(value: BatchUnsuspendUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["UserIdList"].writeList(value.userIdList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchUpdatePhoneNumberInput {

    static func write(value: BatchUpdatePhoneNumberInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["UpdatePhoneNumberRequestItems"].writeList(value.updatePhoneNumberRequestItems, memberWritingClosure: ChimeClientTypes.UpdatePhoneNumberRequestItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchUpdateUserInput {

    static func write(value: BatchUpdateUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["UpdateUserRequestItems"].writeList(value.updateUserRequestItems, memberWritingClosure: ChimeClientTypes.UpdateUserRequestItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateAccountInput {

    static func write(value: CreateAccountInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension CreateBotInput {

    static func write(value: CreateBotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DisplayName"].write(value.displayName)
        try writer["Domain"].write(value.domain)
    }
}

extension CreateMeetingDialOutInput {

    static func write(value: CreateMeetingDialOutInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FromPhoneNumber"].write(value.fromPhoneNumber)
        try writer["JoinToken"].write(value.joinToken)
        try writer["ToPhoneNumber"].write(value.toPhoneNumber)
    }
}

extension CreatePhoneNumberOrderInput {

    static func write(value: CreatePhoneNumberOrderInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["E164PhoneNumbers"].writeList(value.e164PhoneNumbers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ProductType"].write(value.productType)
    }
}

extension CreateRoomInput {

    static func write(value: CreateRoomInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["Name"].write(value.name)
    }
}

extension CreateRoomMembershipInput {

    static func write(value: CreateRoomMembershipInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MemberId"].write(value.memberId)
        try writer["Role"].write(value.role)
    }
}

extension CreateUserInput {

    static func write(value: CreateUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Email"].write(value.email)
        try writer["UserType"].write(value.userType)
        try writer["Username"].write(value.username)
    }
}

extension DisassociateSigninDelegateGroupsFromAccountInput {

    static func write(value: DisassociateSigninDelegateGroupsFromAccountInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GroupNames"].writeList(value.groupNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension InviteUsersInput {

    static func write(value: InviteUsersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["UserEmailList"].writeList(value.userEmailList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserType"].write(value.userType)
    }
}

extension PutEventsConfigurationInput {

    static func write(value: PutEventsConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LambdaFunctionArn"].write(value.lambdaFunctionArn)
        try writer["OutboundEventsHTTPSEndpoint"].write(value.outboundEventsHTTPSEndpoint)
    }
}

extension PutRetentionSettingsInput {

    static func write(value: PutRetentionSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RetentionSettings"].write(value.retentionSettings, with: ChimeClientTypes.RetentionSettings.write(value:to:))
    }
}

extension UpdateAccountInput {

    static func write(value: UpdateAccountInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DefaultLicense"].write(value.defaultLicense)
        try writer["Name"].write(value.name)
    }
}

extension UpdateAccountSettingsInput {

    static func write(value: UpdateAccountSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountSettings"].write(value.accountSettings, with: ChimeClientTypes.AccountSettings.write(value:to:))
    }
}

extension UpdateBotInput {

    static func write(value: UpdateBotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Disabled"].write(value.disabled)
    }
}

extension UpdateGlobalSettingsInput {

    static func write(value: UpdateGlobalSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BusinessCalling"].write(value.businessCalling, with: ChimeClientTypes.BusinessCallingSettings.write(value:to:))
        try writer["VoiceConnector"].write(value.voiceConnector, with: ChimeClientTypes.VoiceConnectorSettings.write(value:to:))
    }
}

extension UpdatePhoneNumberInput {

    static func write(value: UpdatePhoneNumberInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CallingName"].write(value.callingName)
        try writer["ProductType"].write(value.productType)
    }
}

extension UpdatePhoneNumberSettingsInput {

    static func write(value: UpdatePhoneNumberSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CallingName"].write(value.callingName)
    }
}

extension UpdateRoomInput {

    static func write(value: UpdateRoomInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension UpdateRoomMembershipInput {

    static func write(value: UpdateRoomMembershipInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Role"].write(value.role)
    }
}

extension UpdateUserInput {

    static func write(value: UpdateUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlexaForBusinessMetadata"].write(value.alexaForBusinessMetadata, with: ChimeClientTypes.AlexaForBusinessMetadata.write(value:to:))
        try writer["LicenseType"].write(value.licenseType)
        try writer["UserType"].write(value.userType)
    }
}

extension UpdateUserSettingsInput {

    static func write(value: UpdateUserSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["UserSettings"].write(value.userSettings, with: ChimeClientTypes.UserSettings.write(value:to:))
    }
}

extension AssociatePhoneNumberWithUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociatePhoneNumberWithUserOutput {
        return AssociatePhoneNumberWithUserOutput()
    }
}

extension AssociateSigninDelegateGroupsWithAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateSigninDelegateGroupsWithAccountOutput {
        return AssociateSigninDelegateGroupsWithAccountOutput()
    }
}

extension BatchCreateRoomMembershipOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchCreateRoomMembershipOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchCreateRoomMembershipOutput()
        value.errors = try reader["Errors"].readListIfPresent(memberReadingClosure: ChimeClientTypes.MemberError.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchDeletePhoneNumberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchDeletePhoneNumberOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchDeletePhoneNumberOutput()
        value.phoneNumberErrors = try reader["PhoneNumberErrors"].readListIfPresent(memberReadingClosure: ChimeClientTypes.PhoneNumberError.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchSuspendUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchSuspendUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchSuspendUserOutput()
        value.userErrors = try reader["UserErrors"].readListIfPresent(memberReadingClosure: ChimeClientTypes.UserError.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchUnsuspendUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchUnsuspendUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchUnsuspendUserOutput()
        value.userErrors = try reader["UserErrors"].readListIfPresent(memberReadingClosure: ChimeClientTypes.UserError.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchUpdatePhoneNumberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchUpdatePhoneNumberOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchUpdatePhoneNumberOutput()
        value.phoneNumberErrors = try reader["PhoneNumberErrors"].readListIfPresent(memberReadingClosure: ChimeClientTypes.PhoneNumberError.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchUpdateUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchUpdateUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchUpdateUserOutput()
        value.userErrors = try reader["UserErrors"].readListIfPresent(memberReadingClosure: ChimeClientTypes.UserError.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAccountOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAccountOutput()
        value.account = try reader["Account"].readIfPresent(with: ChimeClientTypes.Account.read(from:))
        return value
    }
}

extension CreateBotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateBotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateBotOutput()
        value.bot = try reader["Bot"].readIfPresent(with: ChimeClientTypes.Bot.read(from:))
        return value
    }
}

extension CreateMeetingDialOutOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateMeetingDialOutOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateMeetingDialOutOutput()
        value.transactionId = try reader["TransactionId"].readIfPresent()
        return value
    }
}

extension CreatePhoneNumberOrderOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePhoneNumberOrderOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePhoneNumberOrderOutput()
        value.phoneNumberOrder = try reader["PhoneNumberOrder"].readIfPresent(with: ChimeClientTypes.PhoneNumberOrder.read(from:))
        return value
    }
}

extension CreateRoomOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateRoomOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateRoomOutput()
        value.room = try reader["Room"].readIfPresent(with: ChimeClientTypes.Room.read(from:))
        return value
    }
}

extension CreateRoomMembershipOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateRoomMembershipOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateRoomMembershipOutput()
        value.roomMembership = try reader["RoomMembership"].readIfPresent(with: ChimeClientTypes.RoomMembership.read(from:))
        return value
    }
}

extension CreateUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateUserOutput()
        value.user = try reader["User"].readIfPresent(with: ChimeClientTypes.User.read(from:))
        return value
    }
}

extension DeleteAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAccountOutput {
        return DeleteAccountOutput()
    }
}

extension DeleteEventsConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEventsConfigurationOutput {
        return DeleteEventsConfigurationOutput()
    }
}

extension DeletePhoneNumberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePhoneNumberOutput {
        return DeletePhoneNumberOutput()
    }
}

extension DeleteRoomOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRoomOutput {
        return DeleteRoomOutput()
    }
}

extension DeleteRoomMembershipOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRoomMembershipOutput {
        return DeleteRoomMembershipOutput()
    }
}

extension DisassociatePhoneNumberFromUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociatePhoneNumberFromUserOutput {
        return DisassociatePhoneNumberFromUserOutput()
    }
}

extension DisassociateSigninDelegateGroupsFromAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateSigninDelegateGroupsFromAccountOutput {
        return DisassociateSigninDelegateGroupsFromAccountOutput()
    }
}

extension GetAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAccountOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAccountOutput()
        value.account = try reader["Account"].readIfPresent(with: ChimeClientTypes.Account.read(from:))
        return value
    }
}

extension GetAccountSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAccountSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAccountSettingsOutput()
        value.accountSettings = try reader["AccountSettings"].readIfPresent(with: ChimeClientTypes.AccountSettings.read(from:))
        return value
    }
}

extension GetBotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBotOutput()
        value.bot = try reader["Bot"].readIfPresent(with: ChimeClientTypes.Bot.read(from:))
        return value
    }
}

extension GetEventsConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetEventsConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetEventsConfigurationOutput()
        value.eventsConfiguration = try reader["EventsConfiguration"].readIfPresent(with: ChimeClientTypes.EventsConfiguration.read(from:))
        return value
    }
}

extension GetGlobalSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetGlobalSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetGlobalSettingsOutput()
        value.businessCalling = try reader["BusinessCalling"].readIfPresent(with: ChimeClientTypes.BusinessCallingSettings.read(from:))
        value.voiceConnector = try reader["VoiceConnector"].readIfPresent(with: ChimeClientTypes.VoiceConnectorSettings.read(from:))
        return value
    }
}

extension GetPhoneNumberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPhoneNumberOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetPhoneNumberOutput()
        value.phoneNumber = try reader["PhoneNumber"].readIfPresent(with: ChimeClientTypes.PhoneNumber.read(from:))
        return value
    }
}

extension GetPhoneNumberOrderOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPhoneNumberOrderOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetPhoneNumberOrderOutput()
        value.phoneNumberOrder = try reader["PhoneNumberOrder"].readIfPresent(with: ChimeClientTypes.PhoneNumberOrder.read(from:))
        return value
    }
}

extension GetPhoneNumberSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPhoneNumberSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetPhoneNumberSettingsOutput()
        value.callingName = try reader["CallingName"].readIfPresent()
        value.callingNameUpdatedTimestamp = try reader["CallingNameUpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension GetRetentionSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRetentionSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRetentionSettingsOutput()
        value.initiateDeletionTimestamp = try reader["InitiateDeletionTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.retentionSettings = try reader["RetentionSettings"].readIfPresent(with: ChimeClientTypes.RetentionSettings.read(from:))
        return value
    }
}

extension GetRoomOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRoomOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRoomOutput()
        value.room = try reader["Room"].readIfPresent(with: ChimeClientTypes.Room.read(from:))
        return value
    }
}

extension GetUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetUserOutput()
        value.user = try reader["User"].readIfPresent(with: ChimeClientTypes.User.read(from:))
        return value
    }
}

extension GetUserSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetUserSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetUserSettingsOutput()
        value.userSettings = try reader["UserSettings"].readIfPresent(with: ChimeClientTypes.UserSettings.read(from:))
        return value
    }
}

extension InviteUsersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> InviteUsersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = InviteUsersOutput()
        value.invites = try reader["Invites"].readListIfPresent(memberReadingClosure: ChimeClientTypes.Invite.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListAccountsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAccountsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAccountsOutput()
        value.accounts = try reader["Accounts"].readListIfPresent(memberReadingClosure: ChimeClientTypes.Account.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListBotsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBotsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListBotsOutput()
        value.bots = try reader["Bots"].readListIfPresent(memberReadingClosure: ChimeClientTypes.Bot.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListPhoneNumberOrdersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPhoneNumberOrdersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPhoneNumberOrdersOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.phoneNumberOrders = try reader["PhoneNumberOrders"].readListIfPresent(memberReadingClosure: ChimeClientTypes.PhoneNumberOrder.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListPhoneNumbersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPhoneNumbersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPhoneNumbersOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.phoneNumbers = try reader["PhoneNumbers"].readListIfPresent(memberReadingClosure: ChimeClientTypes.PhoneNumber.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListRoomMembershipsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRoomMembershipsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRoomMembershipsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.roomMemberships = try reader["RoomMemberships"].readListIfPresent(memberReadingClosure: ChimeClientTypes.RoomMembership.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListRoomsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRoomsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRoomsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.rooms = try reader["Rooms"].readListIfPresent(memberReadingClosure: ChimeClientTypes.Room.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSupportedPhoneNumberCountriesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSupportedPhoneNumberCountriesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSupportedPhoneNumberCountriesOutput()
        value.phoneNumberCountries = try reader["PhoneNumberCountries"].readListIfPresent(memberReadingClosure: ChimeClientTypes.PhoneNumberCountry.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListUsersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListUsersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListUsersOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.users = try reader["Users"].readListIfPresent(memberReadingClosure: ChimeClientTypes.User.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LogoutUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> LogoutUserOutput {
        return LogoutUserOutput()
    }
}

extension PutEventsConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutEventsConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutEventsConfigurationOutput()
        value.eventsConfiguration = try reader["EventsConfiguration"].readIfPresent(with: ChimeClientTypes.EventsConfiguration.read(from:))
        return value
    }
}

extension PutRetentionSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutRetentionSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutRetentionSettingsOutput()
        value.initiateDeletionTimestamp = try reader["InitiateDeletionTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.retentionSettings = try reader["RetentionSettings"].readIfPresent(with: ChimeClientTypes.RetentionSettings.read(from:))
        return value
    }
}

extension RedactConversationMessageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RedactConversationMessageOutput {
        return RedactConversationMessageOutput()
    }
}

extension RedactRoomMessageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RedactRoomMessageOutput {
        return RedactRoomMessageOutput()
    }
}

extension RegenerateSecurityTokenOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RegenerateSecurityTokenOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RegenerateSecurityTokenOutput()
        value.bot = try reader["Bot"].readIfPresent(with: ChimeClientTypes.Bot.read(from:))
        return value
    }
}

extension ResetPersonalPINOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ResetPersonalPINOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ResetPersonalPINOutput()
        value.user = try reader["User"].readIfPresent(with: ChimeClientTypes.User.read(from:))
        return value
    }
}

extension RestorePhoneNumberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RestorePhoneNumberOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RestorePhoneNumberOutput()
        value.phoneNumber = try reader["PhoneNumber"].readIfPresent(with: ChimeClientTypes.PhoneNumber.read(from:))
        return value
    }
}

extension SearchAvailablePhoneNumbersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SearchAvailablePhoneNumbersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SearchAvailablePhoneNumbersOutput()
        value.e164PhoneNumbers = try reader["E164PhoneNumbers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension UpdateAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAccountOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAccountOutput()
        value.account = try reader["Account"].readIfPresent(with: ChimeClientTypes.Account.read(from:))
        return value
    }
}

extension UpdateAccountSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAccountSettingsOutput {
        return UpdateAccountSettingsOutput()
    }
}

extension UpdateBotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateBotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateBotOutput()
        value.bot = try reader["Bot"].readIfPresent(with: ChimeClientTypes.Bot.read(from:))
        return value
    }
}

extension UpdateGlobalSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateGlobalSettingsOutput {
        return UpdateGlobalSettingsOutput()
    }
}

extension UpdatePhoneNumberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdatePhoneNumberOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdatePhoneNumberOutput()
        value.phoneNumber = try reader["PhoneNumber"].readIfPresent(with: ChimeClientTypes.PhoneNumber.read(from:))
        return value
    }
}

extension UpdatePhoneNumberSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdatePhoneNumberSettingsOutput {
        return UpdatePhoneNumberSettingsOutput()
    }
}

extension UpdateRoomOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateRoomOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateRoomOutput()
        value.room = try reader["Room"].readIfPresent(with: ChimeClientTypes.Room.read(from:))
        return value
    }
}

extension UpdateRoomMembershipOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateRoomMembershipOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateRoomMembershipOutput()
        value.roomMembership = try reader["RoomMembership"].readIfPresent(with: ChimeClientTypes.RoomMembership.read(from:))
        return value
    }
}

extension UpdateUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateUserOutput()
        value.user = try reader["User"].readIfPresent(with: ChimeClientTypes.User.read(from:))
        return value
    }
}

extension UpdateUserSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateUserSettingsOutput {
        return UpdateUserSettingsOutput()
    }
}

enum AssociatePhoneNumberWithUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AssociateSigninDelegateGroupsWithAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchCreateRoomMembershipOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchDeletePhoneNumberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchSuspendUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchUnsuspendUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchUpdatePhoneNumberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchUpdateUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateBotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateMeetingDialOutOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePhoneNumberOrderOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateRoomOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateRoomMembershipOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEventsConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePhoneNumberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteRoomOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteRoomMembershipOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociatePhoneNumberFromUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateSigninDelegateGroupsFromAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAccountSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetEventsConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetGlobalSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPhoneNumberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPhoneNumberOrderOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPhoneNumberSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRetentionSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRoomOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetUserSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum InviteUsersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAccountsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBotsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPhoneNumberOrdersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPhoneNumbersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRoomMembershipsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRoomsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSupportedPhoneNumberCountriesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListUsersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum LogoutUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutEventsConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutRetentionSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RedactConversationMessageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RedactRoomMessageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RegenerateSecurityTokenOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ResetPersonalPINOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RestorePhoneNumberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SearchAvailablePhoneNumbersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAccountSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateBotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateGlobalSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdatePhoneNumberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdatePhoneNumberSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateRoomOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateRoomMembershipOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateUserSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ServiceFailureException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceFailureException {
        let reader = baseError.errorBodyReader
        var value = ServiceFailureException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BadRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> BadRequestException {
        let reader = baseError.errorBodyReader
        var value = BadRequestException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> NotFoundException {
        let reader = baseError.errorBodyReader
        var value = NotFoundException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnauthorizedClientException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> UnauthorizedClientException {
        let reader = baseError.errorBodyReader
        var value = UnauthorizedClientException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottledClientException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottledClientException {
        let reader = baseError.errorBodyReader
        var value = ThrottledClientException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceUnavailableException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceUnavailableException {
        let reader = baseError.errorBodyReader
        var value = ServiceUnavailableException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ForbiddenException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ForbiddenException {
        let reader = baseError.errorBodyReader
        var value = ForbiddenException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = ResourceLimitExceededException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnprocessableEntityException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> UnprocessableEntityException {
        let reader = baseError.errorBodyReader
        var value = UnprocessableEntityException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ChimeClientTypes.MemberError {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.MemberError {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.MemberError()
        value.memberId = try reader["MemberId"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension ChimeClientTypes.PhoneNumberError {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.PhoneNumberError {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.PhoneNumberError()
        value.phoneNumberId = try reader["PhoneNumberId"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension ChimeClientTypes.UserError {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.UserError {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.UserError()
        value.userId = try reader["UserId"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension ChimeClientTypes.Account {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.Account {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.Account()
        value.awsAccountId = try reader["AwsAccountId"].readIfPresent() ?? ""
        value.accountId = try reader["AccountId"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.accountType = try reader["AccountType"].readIfPresent()
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.defaultLicense = try reader["DefaultLicense"].readIfPresent()
        value.supportedLicenses = try reader["SupportedLicenses"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ChimeClientTypes.License>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.accountStatus = try reader["AccountStatus"].readIfPresent()
        value.signinDelegateGroups = try reader["SigninDelegateGroups"].readListIfPresent(memberReadingClosure: ChimeClientTypes.SigninDelegateGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ChimeClientTypes.SigninDelegateGroup {

    static func write(value: ChimeClientTypes.SigninDelegateGroup?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GroupName"].write(value.groupName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.SigninDelegateGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.SigninDelegateGroup()
        value.groupName = try reader["GroupName"].readIfPresent()
        return value
    }
}

extension ChimeClientTypes.Bot {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.Bot {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.Bot()
        value.botId = try reader["BotId"].readIfPresent()
        value.userId = try reader["UserId"].readIfPresent()
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.botType = try reader["BotType"].readIfPresent()
        value.disabled = try reader["Disabled"].readIfPresent()
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.updatedTimestamp = try reader["UpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.botEmail = try reader["BotEmail"].readIfPresent()
        value.securityToken = try reader["SecurityToken"].readIfPresent()
        return value
    }
}

extension ChimeClientTypes.PhoneNumberOrder {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.PhoneNumberOrder {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.PhoneNumberOrder()
        value.phoneNumberOrderId = try reader["PhoneNumberOrderId"].readIfPresent()
        value.productType = try reader["ProductType"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.orderedPhoneNumbers = try reader["OrderedPhoneNumbers"].readListIfPresent(memberReadingClosure: ChimeClientTypes.OrderedPhoneNumber.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.updatedTimestamp = try reader["UpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension ChimeClientTypes.OrderedPhoneNumber {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.OrderedPhoneNumber {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.OrderedPhoneNumber()
        value.e164PhoneNumber = try reader["E164PhoneNumber"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension ChimeClientTypes.Room {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.Room {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.Room()
        value.roomId = try reader["RoomId"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.accountId = try reader["AccountId"].readIfPresent()
        value.createdBy = try reader["CreatedBy"].readIfPresent()
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.updatedTimestamp = try reader["UpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension ChimeClientTypes.RoomMembership {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.RoomMembership {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.RoomMembership()
        value.roomId = try reader["RoomId"].readIfPresent()
        value.member = try reader["Member"].readIfPresent(with: ChimeClientTypes.Member.read(from:))
        value.role = try reader["Role"].readIfPresent()
        value.invitedBy = try reader["InvitedBy"].readIfPresent()
        value.updatedTimestamp = try reader["UpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension ChimeClientTypes.Member {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.Member {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.Member()
        value.memberId = try reader["MemberId"].readIfPresent()
        value.memberType = try reader["MemberType"].readIfPresent()
        value.email = try reader["Email"].readIfPresent()
        value.fullName = try reader["FullName"].readIfPresent()
        value.accountId = try reader["AccountId"].readIfPresent()
        return value
    }
}

extension ChimeClientTypes.User {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.User {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.User()
        value.userId = try reader["UserId"].readIfPresent() ?? ""
        value.accountId = try reader["AccountId"].readIfPresent()
        value.primaryEmail = try reader["PrimaryEmail"].readIfPresent()
        value.primaryProvisionedNumber = try reader["PrimaryProvisionedNumber"].readIfPresent()
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.licenseType = try reader["LicenseType"].readIfPresent()
        value.userType = try reader["UserType"].readIfPresent()
        value.userRegistrationStatus = try reader["UserRegistrationStatus"].readIfPresent()
        value.userInvitationStatus = try reader["UserInvitationStatus"].readIfPresent()
        value.registeredOn = try reader["RegisteredOn"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.invitedOn = try reader["InvitedOn"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.alexaForBusinessMetadata = try reader["AlexaForBusinessMetadata"].readIfPresent(with: ChimeClientTypes.AlexaForBusinessMetadata.read(from:))
        value.personalPIN = try reader["PersonalPIN"].readIfPresent()
        return value
    }
}

extension ChimeClientTypes.AlexaForBusinessMetadata {

    static func write(value: ChimeClientTypes.AlexaForBusinessMetadata?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlexaForBusinessRoomArn"].write(value.alexaForBusinessRoomArn)
        try writer["IsAlexaForBusinessEnabled"].write(value.isAlexaForBusinessEnabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.AlexaForBusinessMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.AlexaForBusinessMetadata()
        value.isAlexaForBusinessEnabled = try reader["IsAlexaForBusinessEnabled"].readIfPresent()
        value.alexaForBusinessRoomArn = try reader["AlexaForBusinessRoomArn"].readIfPresent()
        return value
    }
}

extension ChimeClientTypes.AccountSettings {

    static func write(value: ChimeClientTypes.AccountSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DisableRemoteControl"].write(value.disableRemoteControl)
        try writer["EnableDialOut"].write(value.enableDialOut)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.AccountSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.AccountSettings()
        value.disableRemoteControl = try reader["DisableRemoteControl"].readIfPresent()
        value.enableDialOut = try reader["EnableDialOut"].readIfPresent()
        return value
    }
}

extension ChimeClientTypes.EventsConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.EventsConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.EventsConfiguration()
        value.botId = try reader["BotId"].readIfPresent()
        value.outboundEventsHTTPSEndpoint = try reader["OutboundEventsHTTPSEndpoint"].readIfPresent()
        value.lambdaFunctionArn = try reader["LambdaFunctionArn"].readIfPresent()
        return value
    }
}

extension ChimeClientTypes.BusinessCallingSettings {

    static func write(value: ChimeClientTypes.BusinessCallingSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CdrBucket"].write(value.cdrBucket)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.BusinessCallingSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.BusinessCallingSettings()
        value.cdrBucket = try reader["CdrBucket"].readIfPresent()
        return value
    }
}

extension ChimeClientTypes.VoiceConnectorSettings {

    static func write(value: ChimeClientTypes.VoiceConnectorSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CdrBucket"].write(value.cdrBucket)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.VoiceConnectorSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.VoiceConnectorSettings()
        value.cdrBucket = try reader["CdrBucket"].readIfPresent()
        return value
    }
}

extension ChimeClientTypes.PhoneNumber {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.PhoneNumber {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.PhoneNumber()
        value.phoneNumberId = try reader["PhoneNumberId"].readIfPresent()
        value.e164PhoneNumber = try reader["E164PhoneNumber"].readIfPresent()
        value.country = try reader["Country"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.productType = try reader["ProductType"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.capabilities = try reader["Capabilities"].readIfPresent(with: ChimeClientTypes.PhoneNumberCapabilities.read(from:))
        value.associations = try reader["Associations"].readListIfPresent(memberReadingClosure: ChimeClientTypes.PhoneNumberAssociation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.callingName = try reader["CallingName"].readIfPresent()
        value.callingNameStatus = try reader["CallingNameStatus"].readIfPresent()
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.updatedTimestamp = try reader["UpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.deletionTimestamp = try reader["DeletionTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension ChimeClientTypes.PhoneNumberAssociation {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.PhoneNumberAssociation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.PhoneNumberAssociation()
        value.value = try reader["Value"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.associatedTimestamp = try reader["AssociatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension ChimeClientTypes.PhoneNumberCapabilities {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.PhoneNumberCapabilities {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.PhoneNumberCapabilities()
        value.inboundCall = try reader["InboundCall"].readIfPresent()
        value.outboundCall = try reader["OutboundCall"].readIfPresent()
        value.inboundSMS = try reader["InboundSMS"].readIfPresent()
        value.outboundSMS = try reader["OutboundSMS"].readIfPresent()
        value.inboundMMS = try reader["InboundMMS"].readIfPresent()
        value.outboundMMS = try reader["OutboundMMS"].readIfPresent()
        return value
    }
}

extension ChimeClientTypes.RetentionSettings {

    static func write(value: ChimeClientTypes.RetentionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConversationRetentionSettings"].write(value.conversationRetentionSettings, with: ChimeClientTypes.ConversationRetentionSettings.write(value:to:))
        try writer["RoomRetentionSettings"].write(value.roomRetentionSettings, with: ChimeClientTypes.RoomRetentionSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.RetentionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.RetentionSettings()
        value.roomRetentionSettings = try reader["RoomRetentionSettings"].readIfPresent(with: ChimeClientTypes.RoomRetentionSettings.read(from:))
        value.conversationRetentionSettings = try reader["ConversationRetentionSettings"].readIfPresent(with: ChimeClientTypes.ConversationRetentionSettings.read(from:))
        return value
    }
}

extension ChimeClientTypes.ConversationRetentionSettings {

    static func write(value: ChimeClientTypes.ConversationRetentionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RetentionDays"].write(value.retentionDays)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.ConversationRetentionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.ConversationRetentionSettings()
        value.retentionDays = try reader["RetentionDays"].readIfPresent()
        return value
    }
}

extension ChimeClientTypes.RoomRetentionSettings {

    static func write(value: ChimeClientTypes.RoomRetentionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RetentionDays"].write(value.retentionDays)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.RoomRetentionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.RoomRetentionSettings()
        value.retentionDays = try reader["RetentionDays"].readIfPresent()
        return value
    }
}

extension ChimeClientTypes.UserSettings {

    static func write(value: ChimeClientTypes.UserSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Telephony"].write(value.telephony, with: ChimeClientTypes.TelephonySettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.UserSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.UserSettings()
        value.telephony = try reader["Telephony"].readIfPresent(with: ChimeClientTypes.TelephonySettings.read(from:))
        return value
    }
}

extension ChimeClientTypes.TelephonySettings {

    static func write(value: ChimeClientTypes.TelephonySettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InboundCalling"].write(value.inboundCalling)
        try writer["OutboundCalling"].write(value.outboundCalling)
        try writer["SMS"].write(value.sms)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.TelephonySettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.TelephonySettings()
        value.inboundCalling = try reader["InboundCalling"].readIfPresent() ?? false
        value.outboundCalling = try reader["OutboundCalling"].readIfPresent() ?? false
        value.sms = try reader["SMS"].readIfPresent() ?? false
        return value
    }
}

extension ChimeClientTypes.Invite {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.Invite {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.Invite()
        value.inviteId = try reader["InviteId"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.emailAddress = try reader["EmailAddress"].readIfPresent()
        value.emailStatus = try reader["EmailStatus"].readIfPresent()
        return value
    }
}

extension ChimeClientTypes.PhoneNumberCountry {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeClientTypes.PhoneNumberCountry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeClientTypes.PhoneNumberCountry()
        value.countryCode = try reader["CountryCode"].readIfPresent()
        value.supportedPhoneNumberTypes = try reader["SupportedPhoneNumberTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ChimeClientTypes.PhoneNumberType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ChimeClientTypes.MembershipItem {

    static func write(value: ChimeClientTypes.MembershipItem?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MemberId"].write(value.memberId)
        try writer["Role"].write(value.role)
    }
}

extension ChimeClientTypes.UpdatePhoneNumberRequestItem {

    static func write(value: ChimeClientTypes.UpdatePhoneNumberRequestItem?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CallingName"].write(value.callingName)
        try writer["PhoneNumberId"].write(value.phoneNumberId)
        try writer["ProductType"].write(value.productType)
    }
}

extension ChimeClientTypes.UpdateUserRequestItem {

    static func write(value: ChimeClientTypes.UpdateUserRequestItem?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlexaForBusinessMetadata"].write(value.alexaForBusinessMetadata, with: ChimeClientTypes.AlexaForBusinessMetadata.write(value:to:))
        try writer["LicenseType"].write(value.licenseType)
        try writer["UserId"].write(value.userId)
        try writer["UserType"].write(value.userType)
    }
}

public enum ChimeClientTypes {}
