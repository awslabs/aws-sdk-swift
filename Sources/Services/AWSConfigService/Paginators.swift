// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConfigClient {
    /// Paginate over `[DescribeAggregateComplianceByConfigRulesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeAggregateComplianceByConfigRulesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeAggregateComplianceByConfigRulesOutput`
    public func describeAggregateComplianceByConfigRulesPaginated(input: DescribeAggregateComplianceByConfigRulesInput) -> ClientRuntime.PaginatorSequence<DescribeAggregateComplianceByConfigRulesInput, DescribeAggregateComplianceByConfigRulesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribeAggregateComplianceByConfigRulesInput, DescribeAggregateComplianceByConfigRulesOutput>(input: input, inputKey: \DescribeAggregateComplianceByConfigRulesInput.nextToken, outputKey: \DescribeAggregateComplianceByConfigRulesOutput.nextToken, paginationFunction: self.describeAggregateComplianceByConfigRules(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribeAggregateComplianceByConfigRulesInput, DescribeAggregateComplianceByConfigRulesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeAggregateComplianceByConfigRules(input:))
>>>>>>> main
    }
}

extension DescribeAggregateComplianceByConfigRulesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeAggregateComplianceByConfigRulesInput {
        return DescribeAggregateComplianceByConfigRulesInput(
            configurationAggregatorName: self.configurationAggregatorName,
            filters: self.filters,
            limit: self.limit,
            nextToken: token
        )}
}
extension ConfigClient {
    /// Paginate over `[DescribeAggregateComplianceByConformancePacksOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeAggregateComplianceByConformancePacksInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeAggregateComplianceByConformancePacksOutput`
    public func describeAggregateComplianceByConformancePacksPaginated(input: DescribeAggregateComplianceByConformancePacksInput) -> ClientRuntime.PaginatorSequence<DescribeAggregateComplianceByConformancePacksInput, DescribeAggregateComplianceByConformancePacksOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribeAggregateComplianceByConformancePacksInput, DescribeAggregateComplianceByConformancePacksOutput>(input: input, inputKey: \DescribeAggregateComplianceByConformancePacksInput.nextToken, outputKey: \DescribeAggregateComplianceByConformancePacksOutput.nextToken, paginationFunction: self.describeAggregateComplianceByConformancePacks(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribeAggregateComplianceByConformancePacksInput, DescribeAggregateComplianceByConformancePacksOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeAggregateComplianceByConformancePacks(input:))
>>>>>>> main
    }
}

extension DescribeAggregateComplianceByConformancePacksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeAggregateComplianceByConformancePacksInput {
        return DescribeAggregateComplianceByConformancePacksInput(
            configurationAggregatorName: self.configurationAggregatorName,
            filters: self.filters,
            limit: self.limit,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == DescribeAggregateComplianceByConformancePacksInput, Output == DescribeAggregateComplianceByConformancePacksOutput {
=======
extension PaginatorSequence where OperationStackInput == DescribeAggregateComplianceByConformancePacksInput, OperationStackOutput == DescribeAggregateComplianceByConformancePacksOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `describeAggregateComplianceByConformancePacksPaginated`
    /// to access the nested member `[ConfigClientTypes.AggregateComplianceByConformancePack]`
    /// - Returns: `[ConfigClientTypes.AggregateComplianceByConformancePack]`
    public func aggregateComplianceByConformancePacks() async throws -> [ConfigClientTypes.AggregateComplianceByConformancePack] {
        return try await self.asyncCompactMap { item in item.aggregateComplianceByConformancePacks }
    }
}
extension ConfigClient {
    /// Paginate over `[DescribeAggregationAuthorizationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeAggregationAuthorizationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeAggregationAuthorizationsOutput`
    public func describeAggregationAuthorizationsPaginated(input: DescribeAggregationAuthorizationsInput) -> ClientRuntime.PaginatorSequence<DescribeAggregationAuthorizationsInput, DescribeAggregationAuthorizationsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribeAggregationAuthorizationsInput, DescribeAggregationAuthorizationsOutput>(input: input, inputKey: \DescribeAggregationAuthorizationsInput.nextToken, outputKey: \DescribeAggregationAuthorizationsOutput.nextToken, paginationFunction: self.describeAggregationAuthorizations(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribeAggregationAuthorizationsInput, DescribeAggregationAuthorizationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeAggregationAuthorizations(input:))
>>>>>>> main
    }
}

extension DescribeAggregationAuthorizationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeAggregationAuthorizationsInput {
        return DescribeAggregationAuthorizationsInput(
            limit: self.limit,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == DescribeAggregationAuthorizationsInput, Output == DescribeAggregationAuthorizationsOutput {
=======
extension PaginatorSequence where OperationStackInput == DescribeAggregationAuthorizationsInput, OperationStackOutput == DescribeAggregationAuthorizationsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `describeAggregationAuthorizationsPaginated`
    /// to access the nested member `[ConfigClientTypes.AggregationAuthorization]`
    /// - Returns: `[ConfigClientTypes.AggregationAuthorization]`
    public func aggregationAuthorizations() async throws -> [ConfigClientTypes.AggregationAuthorization] {
        return try await self.asyncCompactMap { item in item.aggregationAuthorizations }
    }
}
extension ConfigClient {
    /// Paginate over `[DescribeComplianceByConfigRuleOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeComplianceByConfigRuleInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeComplianceByConfigRuleOutput`
    public func describeComplianceByConfigRulePaginated(input: DescribeComplianceByConfigRuleInput) -> ClientRuntime.PaginatorSequence<DescribeComplianceByConfigRuleInput, DescribeComplianceByConfigRuleOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribeComplianceByConfigRuleInput, DescribeComplianceByConfigRuleOutput>(input: input, inputKey: \DescribeComplianceByConfigRuleInput.nextToken, outputKey: \DescribeComplianceByConfigRuleOutput.nextToken, paginationFunction: self.describeComplianceByConfigRule(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribeComplianceByConfigRuleInput, DescribeComplianceByConfigRuleOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeComplianceByConfigRule(input:))
>>>>>>> main
    }
}

extension DescribeComplianceByConfigRuleInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeComplianceByConfigRuleInput {
        return DescribeComplianceByConfigRuleInput(
            complianceTypes: self.complianceTypes,
            configRuleNames: self.configRuleNames,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == DescribeComplianceByConfigRuleInput, Output == DescribeComplianceByConfigRuleOutput {
=======
extension PaginatorSequence where OperationStackInput == DescribeComplianceByConfigRuleInput, OperationStackOutput == DescribeComplianceByConfigRuleOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `describeComplianceByConfigRulePaginated`
    /// to access the nested member `[ConfigClientTypes.ComplianceByConfigRule]`
    /// - Returns: `[ConfigClientTypes.ComplianceByConfigRule]`
    public func complianceByConfigRules() async throws -> [ConfigClientTypes.ComplianceByConfigRule] {
        return try await self.asyncCompactMap { item in item.complianceByConfigRules }
    }
}
extension ConfigClient {
    /// Paginate over `[DescribeComplianceByResourceOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeComplianceByResourceInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeComplianceByResourceOutput`
    public func describeComplianceByResourcePaginated(input: DescribeComplianceByResourceInput) -> ClientRuntime.PaginatorSequence<DescribeComplianceByResourceInput, DescribeComplianceByResourceOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribeComplianceByResourceInput, DescribeComplianceByResourceOutput>(input: input, inputKey: \DescribeComplianceByResourceInput.nextToken, outputKey: \DescribeComplianceByResourceOutput.nextToken, paginationFunction: self.describeComplianceByResource(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribeComplianceByResourceInput, DescribeComplianceByResourceOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeComplianceByResource(input:))
>>>>>>> main
    }
}

extension DescribeComplianceByResourceInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeComplianceByResourceInput {
        return DescribeComplianceByResourceInput(
            complianceTypes: self.complianceTypes,
            limit: self.limit,
            nextToken: token,
            resourceId: self.resourceId,
            resourceType: self.resourceType
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == DescribeComplianceByResourceInput, Output == DescribeComplianceByResourceOutput {
=======
extension PaginatorSequence where OperationStackInput == DescribeComplianceByResourceInput, OperationStackOutput == DescribeComplianceByResourceOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `describeComplianceByResourcePaginated`
    /// to access the nested member `[ConfigClientTypes.ComplianceByResource]`
    /// - Returns: `[ConfigClientTypes.ComplianceByResource]`
    public func complianceByResources() async throws -> [ConfigClientTypes.ComplianceByResource] {
        return try await self.asyncCompactMap { item in item.complianceByResources }
    }
}
extension ConfigClient {
    /// Paginate over `[DescribeConfigRuleEvaluationStatusOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeConfigRuleEvaluationStatusInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeConfigRuleEvaluationStatusOutput`
    public func describeConfigRuleEvaluationStatusPaginated(input: DescribeConfigRuleEvaluationStatusInput) -> ClientRuntime.PaginatorSequence<DescribeConfigRuleEvaluationStatusInput, DescribeConfigRuleEvaluationStatusOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribeConfigRuleEvaluationStatusInput, DescribeConfigRuleEvaluationStatusOutput>(input: input, inputKey: \DescribeConfigRuleEvaluationStatusInput.nextToken, outputKey: \DescribeConfigRuleEvaluationStatusOutput.nextToken, paginationFunction: self.describeConfigRuleEvaluationStatus(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribeConfigRuleEvaluationStatusInput, DescribeConfigRuleEvaluationStatusOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeConfigRuleEvaluationStatus(input:))
>>>>>>> main
    }
}

extension DescribeConfigRuleEvaluationStatusInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeConfigRuleEvaluationStatusInput {
        return DescribeConfigRuleEvaluationStatusInput(
            configRuleNames: self.configRuleNames,
            limit: self.limit,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == DescribeConfigRuleEvaluationStatusInput, Output == DescribeConfigRuleEvaluationStatusOutput {
=======
extension PaginatorSequence where OperationStackInput == DescribeConfigRuleEvaluationStatusInput, OperationStackOutput == DescribeConfigRuleEvaluationStatusOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `describeConfigRuleEvaluationStatusPaginated`
    /// to access the nested member `[ConfigClientTypes.ConfigRuleEvaluationStatus]`
    /// - Returns: `[ConfigClientTypes.ConfigRuleEvaluationStatus]`
    public func configRulesEvaluationStatus() async throws -> [ConfigClientTypes.ConfigRuleEvaluationStatus] {
        return try await self.asyncCompactMap { item in item.configRulesEvaluationStatus }
    }
}
extension ConfigClient {
    /// Paginate over `[DescribeConfigRulesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeConfigRulesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeConfigRulesOutput`
    public func describeConfigRulesPaginated(input: DescribeConfigRulesInput) -> ClientRuntime.PaginatorSequence<DescribeConfigRulesInput, DescribeConfigRulesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribeConfigRulesInput, DescribeConfigRulesOutput>(input: input, inputKey: \DescribeConfigRulesInput.nextToken, outputKey: \DescribeConfigRulesOutput.nextToken, paginationFunction: self.describeConfigRules(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribeConfigRulesInput, DescribeConfigRulesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeConfigRules(input:))
>>>>>>> main
    }
}

extension DescribeConfigRulesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeConfigRulesInput {
        return DescribeConfigRulesInput(
            configRuleNames: self.configRuleNames,
            filters: self.filters,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == DescribeConfigRulesInput, Output == DescribeConfigRulesOutput {
=======
extension PaginatorSequence where OperationStackInput == DescribeConfigRulesInput, OperationStackOutput == DescribeConfigRulesOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `describeConfigRulesPaginated`
    /// to access the nested member `[ConfigClientTypes.ConfigRule]`
    /// - Returns: `[ConfigClientTypes.ConfigRule]`
    public func configRules() async throws -> [ConfigClientTypes.ConfigRule] {
        return try await self.asyncCompactMap { item in item.configRules }
    }
}
extension ConfigClient {
    /// Paginate over `[DescribeConfigurationAggregatorsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeConfigurationAggregatorsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeConfigurationAggregatorsOutput`
    public func describeConfigurationAggregatorsPaginated(input: DescribeConfigurationAggregatorsInput) -> ClientRuntime.PaginatorSequence<DescribeConfigurationAggregatorsInput, DescribeConfigurationAggregatorsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribeConfigurationAggregatorsInput, DescribeConfigurationAggregatorsOutput>(input: input, inputKey: \DescribeConfigurationAggregatorsInput.nextToken, outputKey: \DescribeConfigurationAggregatorsOutput.nextToken, paginationFunction: self.describeConfigurationAggregators(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribeConfigurationAggregatorsInput, DescribeConfigurationAggregatorsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeConfigurationAggregators(input:))
>>>>>>> main
    }
}

extension DescribeConfigurationAggregatorsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeConfigurationAggregatorsInput {
        return DescribeConfigurationAggregatorsInput(
            configurationAggregatorNames: self.configurationAggregatorNames,
            limit: self.limit,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == DescribeConfigurationAggregatorsInput, Output == DescribeConfigurationAggregatorsOutput {
=======
extension PaginatorSequence where OperationStackInput == DescribeConfigurationAggregatorsInput, OperationStackOutput == DescribeConfigurationAggregatorsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `describeConfigurationAggregatorsPaginated`
    /// to access the nested member `[ConfigClientTypes.ConfigurationAggregator]`
    /// - Returns: `[ConfigClientTypes.ConfigurationAggregator]`
    public func configurationAggregators() async throws -> [ConfigClientTypes.ConfigurationAggregator] {
        return try await self.asyncCompactMap { item in item.configurationAggregators }
    }
}
extension ConfigClient {
    /// Paginate over `[DescribeConfigurationAggregatorSourcesStatusOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeConfigurationAggregatorSourcesStatusInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeConfigurationAggregatorSourcesStatusOutput`
    public func describeConfigurationAggregatorSourcesStatusPaginated(input: DescribeConfigurationAggregatorSourcesStatusInput) -> ClientRuntime.PaginatorSequence<DescribeConfigurationAggregatorSourcesStatusInput, DescribeConfigurationAggregatorSourcesStatusOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribeConfigurationAggregatorSourcesStatusInput, DescribeConfigurationAggregatorSourcesStatusOutput>(input: input, inputKey: \DescribeConfigurationAggregatorSourcesStatusInput.nextToken, outputKey: \DescribeConfigurationAggregatorSourcesStatusOutput.nextToken, paginationFunction: self.describeConfigurationAggregatorSourcesStatus(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribeConfigurationAggregatorSourcesStatusInput, DescribeConfigurationAggregatorSourcesStatusOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeConfigurationAggregatorSourcesStatus(input:))
>>>>>>> main
    }
}

extension DescribeConfigurationAggregatorSourcesStatusInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeConfigurationAggregatorSourcesStatusInput {
        return DescribeConfigurationAggregatorSourcesStatusInput(
            configurationAggregatorName: self.configurationAggregatorName,
            limit: self.limit,
            nextToken: token,
            updateStatus: self.updateStatus
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == DescribeConfigurationAggregatorSourcesStatusInput, Output == DescribeConfigurationAggregatorSourcesStatusOutput {
=======
extension PaginatorSequence where OperationStackInput == DescribeConfigurationAggregatorSourcesStatusInput, OperationStackOutput == DescribeConfigurationAggregatorSourcesStatusOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `describeConfigurationAggregatorSourcesStatusPaginated`
    /// to access the nested member `[ConfigClientTypes.AggregatedSourceStatus]`
    /// - Returns: `[ConfigClientTypes.AggregatedSourceStatus]`
    public func aggregatedSourceStatusList() async throws -> [ConfigClientTypes.AggregatedSourceStatus] {
        return try await self.asyncCompactMap { item in item.aggregatedSourceStatusList }
    }
}
extension ConfigClient {
    /// Paginate over `[DescribeConformancePackComplianceOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeConformancePackComplianceInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeConformancePackComplianceOutput`
    public func describeConformancePackCompliancePaginated(input: DescribeConformancePackComplianceInput) -> ClientRuntime.PaginatorSequence<DescribeConformancePackComplianceInput, DescribeConformancePackComplianceOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribeConformancePackComplianceInput, DescribeConformancePackComplianceOutput>(input: input, inputKey: \DescribeConformancePackComplianceInput.nextToken, outputKey: \DescribeConformancePackComplianceOutput.nextToken, paginationFunction: self.describeConformancePackCompliance(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribeConformancePackComplianceInput, DescribeConformancePackComplianceOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeConformancePackCompliance(input:))
>>>>>>> main
    }
}

extension DescribeConformancePackComplianceInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeConformancePackComplianceInput {
        return DescribeConformancePackComplianceInput(
            conformancePackName: self.conformancePackName,
            filters: self.filters,
            limit: self.limit,
            nextToken: token
        )}
}
extension ConfigClient {
    /// Paginate over `[DescribeConformancePacksOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeConformancePacksInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeConformancePacksOutput`
    public func describeConformancePacksPaginated(input: DescribeConformancePacksInput) -> ClientRuntime.PaginatorSequence<DescribeConformancePacksInput, DescribeConformancePacksOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribeConformancePacksInput, DescribeConformancePacksOutput>(input: input, inputKey: \DescribeConformancePacksInput.nextToken, outputKey: \DescribeConformancePacksOutput.nextToken, paginationFunction: self.describeConformancePacks(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribeConformancePacksInput, DescribeConformancePacksOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeConformancePacks(input:))
>>>>>>> main
    }
}

extension DescribeConformancePacksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeConformancePacksInput {
        return DescribeConformancePacksInput(
            conformancePackNames: self.conformancePackNames,
            limit: self.limit,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == DescribeConformancePacksInput, Output == DescribeConformancePacksOutput {
=======
extension PaginatorSequence where OperationStackInput == DescribeConformancePacksInput, OperationStackOutput == DescribeConformancePacksOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `describeConformancePacksPaginated`
    /// to access the nested member `[ConfigClientTypes.ConformancePackDetail]`
    /// - Returns: `[ConfigClientTypes.ConformancePackDetail]`
    public func conformancePackDetails() async throws -> [ConfigClientTypes.ConformancePackDetail] {
        return try await self.asyncCompactMap { item in item.conformancePackDetails }
    }
}
extension ConfigClient {
    /// Paginate over `[DescribeConformancePackStatusOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeConformancePackStatusInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeConformancePackStatusOutput`
    public func describeConformancePackStatusPaginated(input: DescribeConformancePackStatusInput) -> ClientRuntime.PaginatorSequence<DescribeConformancePackStatusInput, DescribeConformancePackStatusOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribeConformancePackStatusInput, DescribeConformancePackStatusOutput>(input: input, inputKey: \DescribeConformancePackStatusInput.nextToken, outputKey: \DescribeConformancePackStatusOutput.nextToken, paginationFunction: self.describeConformancePackStatus(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribeConformancePackStatusInput, DescribeConformancePackStatusOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeConformancePackStatus(input:))
>>>>>>> main
    }
}

extension DescribeConformancePackStatusInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeConformancePackStatusInput {
        return DescribeConformancePackStatusInput(
            conformancePackNames: self.conformancePackNames,
            limit: self.limit,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == DescribeConformancePackStatusInput, Output == DescribeConformancePackStatusOutput {
=======
extension PaginatorSequence where OperationStackInput == DescribeConformancePackStatusInput, OperationStackOutput == DescribeConformancePackStatusOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `describeConformancePackStatusPaginated`
    /// to access the nested member `[ConfigClientTypes.ConformancePackStatusDetail]`
    /// - Returns: `[ConfigClientTypes.ConformancePackStatusDetail]`
    public func conformancePackStatusDetails() async throws -> [ConfigClientTypes.ConformancePackStatusDetail] {
        return try await self.asyncCompactMap { item in item.conformancePackStatusDetails }
    }
}
extension ConfigClient {
    /// Paginate over `[DescribeOrganizationConfigRulesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeOrganizationConfigRulesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeOrganizationConfigRulesOutput`
    public func describeOrganizationConfigRulesPaginated(input: DescribeOrganizationConfigRulesInput) -> ClientRuntime.PaginatorSequence<DescribeOrganizationConfigRulesInput, DescribeOrganizationConfigRulesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribeOrganizationConfigRulesInput, DescribeOrganizationConfigRulesOutput>(input: input, inputKey: \DescribeOrganizationConfigRulesInput.nextToken, outputKey: \DescribeOrganizationConfigRulesOutput.nextToken, paginationFunction: self.describeOrganizationConfigRules(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribeOrganizationConfigRulesInput, DescribeOrganizationConfigRulesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeOrganizationConfigRules(input:))
>>>>>>> main
    }
}

extension DescribeOrganizationConfigRulesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeOrganizationConfigRulesInput {
        return DescribeOrganizationConfigRulesInput(
            limit: self.limit,
            nextToken: token,
            organizationConfigRuleNames: self.organizationConfigRuleNames
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == DescribeOrganizationConfigRulesInput, Output == DescribeOrganizationConfigRulesOutput {
=======
extension PaginatorSequence where OperationStackInput == DescribeOrganizationConfigRulesInput, OperationStackOutput == DescribeOrganizationConfigRulesOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `describeOrganizationConfigRulesPaginated`
    /// to access the nested member `[ConfigClientTypes.OrganizationConfigRule]`
    /// - Returns: `[ConfigClientTypes.OrganizationConfigRule]`
    public func organizationConfigRules() async throws -> [ConfigClientTypes.OrganizationConfigRule] {
        return try await self.asyncCompactMap { item in item.organizationConfigRules }
    }
}
extension ConfigClient {
    /// Paginate over `[DescribeOrganizationConfigRuleStatusesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeOrganizationConfigRuleStatusesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeOrganizationConfigRuleStatusesOutput`
    public func describeOrganizationConfigRuleStatusesPaginated(input: DescribeOrganizationConfigRuleStatusesInput) -> ClientRuntime.PaginatorSequence<DescribeOrganizationConfigRuleStatusesInput, DescribeOrganizationConfigRuleStatusesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribeOrganizationConfigRuleStatusesInput, DescribeOrganizationConfigRuleStatusesOutput>(input: input, inputKey: \DescribeOrganizationConfigRuleStatusesInput.nextToken, outputKey: \DescribeOrganizationConfigRuleStatusesOutput.nextToken, paginationFunction: self.describeOrganizationConfigRuleStatuses(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribeOrganizationConfigRuleStatusesInput, DescribeOrganizationConfigRuleStatusesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeOrganizationConfigRuleStatuses(input:))
>>>>>>> main
    }
}

extension DescribeOrganizationConfigRuleStatusesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeOrganizationConfigRuleStatusesInput {
        return DescribeOrganizationConfigRuleStatusesInput(
            limit: self.limit,
            nextToken: token,
            organizationConfigRuleNames: self.organizationConfigRuleNames
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == DescribeOrganizationConfigRuleStatusesInput, Output == DescribeOrganizationConfigRuleStatusesOutput {
=======
extension PaginatorSequence where OperationStackInput == DescribeOrganizationConfigRuleStatusesInput, OperationStackOutput == DescribeOrganizationConfigRuleStatusesOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `describeOrganizationConfigRuleStatusesPaginated`
    /// to access the nested member `[ConfigClientTypes.OrganizationConfigRuleStatus]`
    /// - Returns: `[ConfigClientTypes.OrganizationConfigRuleStatus]`
    public func organizationConfigRuleStatuses() async throws -> [ConfigClientTypes.OrganizationConfigRuleStatus] {
        return try await self.asyncCompactMap { item in item.organizationConfigRuleStatuses }
    }
}
extension ConfigClient {
    /// Paginate over `[DescribeOrganizationConformancePacksOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeOrganizationConformancePacksInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeOrganizationConformancePacksOutput`
    public func describeOrganizationConformancePacksPaginated(input: DescribeOrganizationConformancePacksInput) -> ClientRuntime.PaginatorSequence<DescribeOrganizationConformancePacksInput, DescribeOrganizationConformancePacksOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribeOrganizationConformancePacksInput, DescribeOrganizationConformancePacksOutput>(input: input, inputKey: \DescribeOrganizationConformancePacksInput.nextToken, outputKey: \DescribeOrganizationConformancePacksOutput.nextToken, paginationFunction: self.describeOrganizationConformancePacks(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribeOrganizationConformancePacksInput, DescribeOrganizationConformancePacksOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeOrganizationConformancePacks(input:))
>>>>>>> main
    }
}

extension DescribeOrganizationConformancePacksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeOrganizationConformancePacksInput {
        return DescribeOrganizationConformancePacksInput(
            limit: self.limit,
            nextToken: token,
            organizationConformancePackNames: self.organizationConformancePackNames
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == DescribeOrganizationConformancePacksInput, Output == DescribeOrganizationConformancePacksOutput {
=======
extension PaginatorSequence where OperationStackInput == DescribeOrganizationConformancePacksInput, OperationStackOutput == DescribeOrganizationConformancePacksOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `describeOrganizationConformancePacksPaginated`
    /// to access the nested member `[ConfigClientTypes.OrganizationConformancePack]`
    /// - Returns: `[ConfigClientTypes.OrganizationConformancePack]`
    public func organizationConformancePacks() async throws -> [ConfigClientTypes.OrganizationConformancePack] {
        return try await self.asyncCompactMap { item in item.organizationConformancePacks }
    }
}
extension ConfigClient {
    /// Paginate over `[DescribeOrganizationConformancePackStatusesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeOrganizationConformancePackStatusesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeOrganizationConformancePackStatusesOutput`
    public func describeOrganizationConformancePackStatusesPaginated(input: DescribeOrganizationConformancePackStatusesInput) -> ClientRuntime.PaginatorSequence<DescribeOrganizationConformancePackStatusesInput, DescribeOrganizationConformancePackStatusesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribeOrganizationConformancePackStatusesInput, DescribeOrganizationConformancePackStatusesOutput>(input: input, inputKey: \DescribeOrganizationConformancePackStatusesInput.nextToken, outputKey: \DescribeOrganizationConformancePackStatusesOutput.nextToken, paginationFunction: self.describeOrganizationConformancePackStatuses(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribeOrganizationConformancePackStatusesInput, DescribeOrganizationConformancePackStatusesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeOrganizationConformancePackStatuses(input:))
>>>>>>> main
    }
}

extension DescribeOrganizationConformancePackStatusesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeOrganizationConformancePackStatusesInput {
        return DescribeOrganizationConformancePackStatusesInput(
            limit: self.limit,
            nextToken: token,
            organizationConformancePackNames: self.organizationConformancePackNames
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == DescribeOrganizationConformancePackStatusesInput, Output == DescribeOrganizationConformancePackStatusesOutput {
=======
extension PaginatorSequence where OperationStackInput == DescribeOrganizationConformancePackStatusesInput, OperationStackOutput == DescribeOrganizationConformancePackStatusesOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `describeOrganizationConformancePackStatusesPaginated`
    /// to access the nested member `[ConfigClientTypes.OrganizationConformancePackStatus]`
    /// - Returns: `[ConfigClientTypes.OrganizationConformancePackStatus]`
    public func organizationConformancePackStatuses() async throws -> [ConfigClientTypes.OrganizationConformancePackStatus] {
        return try await self.asyncCompactMap { item in item.organizationConformancePackStatuses }
    }
}
extension ConfigClient {
    /// Paginate over `[DescribePendingAggregationRequestsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribePendingAggregationRequestsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribePendingAggregationRequestsOutput`
    public func describePendingAggregationRequestsPaginated(input: DescribePendingAggregationRequestsInput) -> ClientRuntime.PaginatorSequence<DescribePendingAggregationRequestsInput, DescribePendingAggregationRequestsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribePendingAggregationRequestsInput, DescribePendingAggregationRequestsOutput>(input: input, inputKey: \DescribePendingAggregationRequestsInput.nextToken, outputKey: \DescribePendingAggregationRequestsOutput.nextToken, paginationFunction: self.describePendingAggregationRequests(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribePendingAggregationRequestsInput, DescribePendingAggregationRequestsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describePendingAggregationRequests(input:))
>>>>>>> main
    }
}

extension DescribePendingAggregationRequestsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribePendingAggregationRequestsInput {
        return DescribePendingAggregationRequestsInput(
            limit: self.limit,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == DescribePendingAggregationRequestsInput, Output == DescribePendingAggregationRequestsOutput {
=======
extension PaginatorSequence where OperationStackInput == DescribePendingAggregationRequestsInput, OperationStackOutput == DescribePendingAggregationRequestsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `describePendingAggregationRequestsPaginated`
    /// to access the nested member `[ConfigClientTypes.PendingAggregationRequest]`
    /// - Returns: `[ConfigClientTypes.PendingAggregationRequest]`
    public func pendingAggregationRequests() async throws -> [ConfigClientTypes.PendingAggregationRequest] {
        return try await self.asyncCompactMap { item in item.pendingAggregationRequests }
    }
}
extension ConfigClient {
    /// Paginate over `[DescribeRemediationExceptionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeRemediationExceptionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeRemediationExceptionsOutput`
    public func describeRemediationExceptionsPaginated(input: DescribeRemediationExceptionsInput) -> ClientRuntime.PaginatorSequence<DescribeRemediationExceptionsInput, DescribeRemediationExceptionsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribeRemediationExceptionsInput, DescribeRemediationExceptionsOutput>(input: input, inputKey: \DescribeRemediationExceptionsInput.nextToken, outputKey: \DescribeRemediationExceptionsOutput.nextToken, paginationFunction: self.describeRemediationExceptions(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribeRemediationExceptionsInput, DescribeRemediationExceptionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeRemediationExceptions(input:))
>>>>>>> main
    }
}

extension DescribeRemediationExceptionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeRemediationExceptionsInput {
        return DescribeRemediationExceptionsInput(
            configRuleName: self.configRuleName,
            limit: self.limit,
            nextToken: token,
            resourceKeys: self.resourceKeys
        )}
}
extension ConfigClient {
    /// Paginate over `[DescribeRemediationExecutionStatusOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeRemediationExecutionStatusInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeRemediationExecutionStatusOutput`
    public func describeRemediationExecutionStatusPaginated(input: DescribeRemediationExecutionStatusInput) -> ClientRuntime.PaginatorSequence<DescribeRemediationExecutionStatusInput, DescribeRemediationExecutionStatusOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribeRemediationExecutionStatusInput, DescribeRemediationExecutionStatusOutput>(input: input, inputKey: \DescribeRemediationExecutionStatusInput.nextToken, outputKey: \DescribeRemediationExecutionStatusOutput.nextToken, paginationFunction: self.describeRemediationExecutionStatus(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribeRemediationExecutionStatusInput, DescribeRemediationExecutionStatusOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeRemediationExecutionStatus(input:))
>>>>>>> main
    }
}

extension DescribeRemediationExecutionStatusInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeRemediationExecutionStatusInput {
        return DescribeRemediationExecutionStatusInput(
            configRuleName: self.configRuleName,
            limit: self.limit,
            nextToken: token,
            resourceKeys: self.resourceKeys
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == DescribeRemediationExecutionStatusInput, Output == DescribeRemediationExecutionStatusOutput {
=======
extension PaginatorSequence where OperationStackInput == DescribeRemediationExecutionStatusInput, OperationStackOutput == DescribeRemediationExecutionStatusOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `describeRemediationExecutionStatusPaginated`
    /// to access the nested member `[ConfigClientTypes.RemediationExecutionStatus]`
    /// - Returns: `[ConfigClientTypes.RemediationExecutionStatus]`
    public func remediationExecutionStatuses() async throws -> [ConfigClientTypes.RemediationExecutionStatus] {
        return try await self.asyncCompactMap { item in item.remediationExecutionStatuses }
    }
}
extension ConfigClient {
    /// Paginate over `[DescribeRetentionConfigurationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeRetentionConfigurationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeRetentionConfigurationsOutput`
    public func describeRetentionConfigurationsPaginated(input: DescribeRetentionConfigurationsInput) -> ClientRuntime.PaginatorSequence<DescribeRetentionConfigurationsInput, DescribeRetentionConfigurationsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribeRetentionConfigurationsInput, DescribeRetentionConfigurationsOutput>(input: input, inputKey: \DescribeRetentionConfigurationsInput.nextToken, outputKey: \DescribeRetentionConfigurationsOutput.nextToken, paginationFunction: self.describeRetentionConfigurations(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribeRetentionConfigurationsInput, DescribeRetentionConfigurationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeRetentionConfigurations(input:))
>>>>>>> main
    }
}

extension DescribeRetentionConfigurationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeRetentionConfigurationsInput {
        return DescribeRetentionConfigurationsInput(
            nextToken: token,
            retentionConfigurationNames: self.retentionConfigurationNames
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == DescribeRetentionConfigurationsInput, Output == DescribeRetentionConfigurationsOutput {
=======
extension PaginatorSequence where OperationStackInput == DescribeRetentionConfigurationsInput, OperationStackOutput == DescribeRetentionConfigurationsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `describeRetentionConfigurationsPaginated`
    /// to access the nested member `[ConfigClientTypes.RetentionConfiguration]`
    /// - Returns: `[ConfigClientTypes.RetentionConfiguration]`
    public func retentionConfigurations() async throws -> [ConfigClientTypes.RetentionConfiguration] {
        return try await self.asyncCompactMap { item in item.retentionConfigurations }
    }
}
extension ConfigClient {
    /// Paginate over `[GetAggregateComplianceDetailsByConfigRuleOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetAggregateComplianceDetailsByConfigRuleInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetAggregateComplianceDetailsByConfigRuleOutput`
    public func getAggregateComplianceDetailsByConfigRulePaginated(input: GetAggregateComplianceDetailsByConfigRuleInput) -> ClientRuntime.PaginatorSequence<GetAggregateComplianceDetailsByConfigRuleInput, GetAggregateComplianceDetailsByConfigRuleOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<GetAggregateComplianceDetailsByConfigRuleInput, GetAggregateComplianceDetailsByConfigRuleOutput>(input: input, inputKey: \GetAggregateComplianceDetailsByConfigRuleInput.nextToken, outputKey: \GetAggregateComplianceDetailsByConfigRuleOutput.nextToken, paginationFunction: self.getAggregateComplianceDetailsByConfigRule(input:))
=======
        return ClientRuntime.PaginatorSequence<GetAggregateComplianceDetailsByConfigRuleInput, GetAggregateComplianceDetailsByConfigRuleOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.getAggregateComplianceDetailsByConfigRule(input:))
>>>>>>> main
    }
}

extension GetAggregateComplianceDetailsByConfigRuleInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetAggregateComplianceDetailsByConfigRuleInput {
        return GetAggregateComplianceDetailsByConfigRuleInput(
            accountId: self.accountId,
            awsRegion: self.awsRegion,
            complianceType: self.complianceType,
            configRuleName: self.configRuleName,
            configurationAggregatorName: self.configurationAggregatorName,
            limit: self.limit,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == GetAggregateComplianceDetailsByConfigRuleInput, Output == GetAggregateComplianceDetailsByConfigRuleOutput {
=======
extension PaginatorSequence where OperationStackInput == GetAggregateComplianceDetailsByConfigRuleInput, OperationStackOutput == GetAggregateComplianceDetailsByConfigRuleOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `getAggregateComplianceDetailsByConfigRulePaginated`
    /// to access the nested member `[ConfigClientTypes.AggregateEvaluationResult]`
    /// - Returns: `[ConfigClientTypes.AggregateEvaluationResult]`
    public func aggregateEvaluationResults() async throws -> [ConfigClientTypes.AggregateEvaluationResult] {
        return try await self.asyncCompactMap { item in item.aggregateEvaluationResults }
    }
}
extension ConfigClient {
    /// Paginate over `[GetAggregateConfigRuleComplianceSummaryOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetAggregateConfigRuleComplianceSummaryInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetAggregateConfigRuleComplianceSummaryOutput`
    public func getAggregateConfigRuleComplianceSummaryPaginated(input: GetAggregateConfigRuleComplianceSummaryInput) -> ClientRuntime.PaginatorSequence<GetAggregateConfigRuleComplianceSummaryInput, GetAggregateConfigRuleComplianceSummaryOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<GetAggregateConfigRuleComplianceSummaryInput, GetAggregateConfigRuleComplianceSummaryOutput>(input: input, inputKey: \GetAggregateConfigRuleComplianceSummaryInput.nextToken, outputKey: \GetAggregateConfigRuleComplianceSummaryOutput.nextToken, paginationFunction: self.getAggregateConfigRuleComplianceSummary(input:))
=======
        return ClientRuntime.PaginatorSequence<GetAggregateConfigRuleComplianceSummaryInput, GetAggregateConfigRuleComplianceSummaryOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.getAggregateConfigRuleComplianceSummary(input:))
>>>>>>> main
    }
}

extension GetAggregateConfigRuleComplianceSummaryInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetAggregateConfigRuleComplianceSummaryInput {
        return GetAggregateConfigRuleComplianceSummaryInput(
            configurationAggregatorName: self.configurationAggregatorName,
            filters: self.filters,
            groupByKey: self.groupByKey,
            limit: self.limit,
            nextToken: token
        )}
}
extension ConfigClient {
    /// Paginate over `[GetAggregateConformancePackComplianceSummaryOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetAggregateConformancePackComplianceSummaryInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetAggregateConformancePackComplianceSummaryOutput`
    public func getAggregateConformancePackComplianceSummaryPaginated(input: GetAggregateConformancePackComplianceSummaryInput) -> ClientRuntime.PaginatorSequence<GetAggregateConformancePackComplianceSummaryInput, GetAggregateConformancePackComplianceSummaryOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<GetAggregateConformancePackComplianceSummaryInput, GetAggregateConformancePackComplianceSummaryOutput>(input: input, inputKey: \GetAggregateConformancePackComplianceSummaryInput.nextToken, outputKey: \GetAggregateConformancePackComplianceSummaryOutput.nextToken, paginationFunction: self.getAggregateConformancePackComplianceSummary(input:))
=======
        return ClientRuntime.PaginatorSequence<GetAggregateConformancePackComplianceSummaryInput, GetAggregateConformancePackComplianceSummaryOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.getAggregateConformancePackComplianceSummary(input:))
>>>>>>> main
    }
}

extension GetAggregateConformancePackComplianceSummaryInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetAggregateConformancePackComplianceSummaryInput {
        return GetAggregateConformancePackComplianceSummaryInput(
            configurationAggregatorName: self.configurationAggregatorName,
            filters: self.filters,
            groupByKey: self.groupByKey,
            limit: self.limit,
            nextToken: token
        )}
}
extension ConfigClient {
    /// Paginate over `[GetAggregateDiscoveredResourceCountsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetAggregateDiscoveredResourceCountsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetAggregateDiscoveredResourceCountsOutput`
    public func getAggregateDiscoveredResourceCountsPaginated(input: GetAggregateDiscoveredResourceCountsInput) -> ClientRuntime.PaginatorSequence<GetAggregateDiscoveredResourceCountsInput, GetAggregateDiscoveredResourceCountsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<GetAggregateDiscoveredResourceCountsInput, GetAggregateDiscoveredResourceCountsOutput>(input: input, inputKey: \GetAggregateDiscoveredResourceCountsInput.nextToken, outputKey: \GetAggregateDiscoveredResourceCountsOutput.nextToken, paginationFunction: self.getAggregateDiscoveredResourceCounts(input:))
=======
        return ClientRuntime.PaginatorSequence<GetAggregateDiscoveredResourceCountsInput, GetAggregateDiscoveredResourceCountsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.getAggregateDiscoveredResourceCounts(input:))
>>>>>>> main
    }
}

extension GetAggregateDiscoveredResourceCountsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetAggregateDiscoveredResourceCountsInput {
        return GetAggregateDiscoveredResourceCountsInput(
            configurationAggregatorName: self.configurationAggregatorName,
            filters: self.filters,
            groupByKey: self.groupByKey,
            limit: self.limit,
            nextToken: token
        )}
}
extension ConfigClient {
    /// Paginate over `[GetComplianceDetailsByConfigRuleOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetComplianceDetailsByConfigRuleInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetComplianceDetailsByConfigRuleOutput`
    public func getComplianceDetailsByConfigRulePaginated(input: GetComplianceDetailsByConfigRuleInput) -> ClientRuntime.PaginatorSequence<GetComplianceDetailsByConfigRuleInput, GetComplianceDetailsByConfigRuleOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<GetComplianceDetailsByConfigRuleInput, GetComplianceDetailsByConfigRuleOutput>(input: input, inputKey: \GetComplianceDetailsByConfigRuleInput.nextToken, outputKey: \GetComplianceDetailsByConfigRuleOutput.nextToken, paginationFunction: self.getComplianceDetailsByConfigRule(input:))
=======
        return ClientRuntime.PaginatorSequence<GetComplianceDetailsByConfigRuleInput, GetComplianceDetailsByConfigRuleOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.getComplianceDetailsByConfigRule(input:))
>>>>>>> main
    }
}

extension GetComplianceDetailsByConfigRuleInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetComplianceDetailsByConfigRuleInput {
        return GetComplianceDetailsByConfigRuleInput(
            complianceTypes: self.complianceTypes,
            configRuleName: self.configRuleName,
            limit: self.limit,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == GetComplianceDetailsByConfigRuleInput, Output == GetComplianceDetailsByConfigRuleOutput {
=======
extension PaginatorSequence where OperationStackInput == GetComplianceDetailsByConfigRuleInput, OperationStackOutput == GetComplianceDetailsByConfigRuleOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `getComplianceDetailsByConfigRulePaginated`
    /// to access the nested member `[ConfigClientTypes.EvaluationResult]`
    /// - Returns: `[ConfigClientTypes.EvaluationResult]`
    public func evaluationResults() async throws -> [ConfigClientTypes.EvaluationResult] {
        return try await self.asyncCompactMap { item in item.evaluationResults }
    }
}
extension ConfigClient {
    /// Paginate over `[GetComplianceDetailsByResourceOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetComplianceDetailsByResourceInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetComplianceDetailsByResourceOutput`
    public func getComplianceDetailsByResourcePaginated(input: GetComplianceDetailsByResourceInput) -> ClientRuntime.PaginatorSequence<GetComplianceDetailsByResourceInput, GetComplianceDetailsByResourceOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<GetComplianceDetailsByResourceInput, GetComplianceDetailsByResourceOutput>(input: input, inputKey: \GetComplianceDetailsByResourceInput.nextToken, outputKey: \GetComplianceDetailsByResourceOutput.nextToken, paginationFunction: self.getComplianceDetailsByResource(input:))
=======
        return ClientRuntime.PaginatorSequence<GetComplianceDetailsByResourceInput, GetComplianceDetailsByResourceOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.getComplianceDetailsByResource(input:))
>>>>>>> main
    }
}

extension GetComplianceDetailsByResourceInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetComplianceDetailsByResourceInput {
        return GetComplianceDetailsByResourceInput(
            complianceTypes: self.complianceTypes,
            nextToken: token,
            resourceEvaluationId: self.resourceEvaluationId,
            resourceId: self.resourceId,
            resourceType: self.resourceType
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == GetComplianceDetailsByResourceInput, Output == GetComplianceDetailsByResourceOutput {
=======
extension PaginatorSequence where OperationStackInput == GetComplianceDetailsByResourceInput, OperationStackOutput == GetComplianceDetailsByResourceOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `getComplianceDetailsByResourcePaginated`
    /// to access the nested member `[ConfigClientTypes.EvaluationResult]`
    /// - Returns: `[ConfigClientTypes.EvaluationResult]`
    public func evaluationResults() async throws -> [ConfigClientTypes.EvaluationResult] {
        return try await self.asyncCompactMap { item in item.evaluationResults }
    }
}
extension ConfigClient {
    /// Paginate over `[GetConformancePackComplianceDetailsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetConformancePackComplianceDetailsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetConformancePackComplianceDetailsOutput`
    public func getConformancePackComplianceDetailsPaginated(input: GetConformancePackComplianceDetailsInput) -> ClientRuntime.PaginatorSequence<GetConformancePackComplianceDetailsInput, GetConformancePackComplianceDetailsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<GetConformancePackComplianceDetailsInput, GetConformancePackComplianceDetailsOutput>(input: input, inputKey: \GetConformancePackComplianceDetailsInput.nextToken, outputKey: \GetConformancePackComplianceDetailsOutput.nextToken, paginationFunction: self.getConformancePackComplianceDetails(input:))
=======
        return ClientRuntime.PaginatorSequence<GetConformancePackComplianceDetailsInput, GetConformancePackComplianceDetailsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.getConformancePackComplianceDetails(input:))
>>>>>>> main
    }
}

extension GetConformancePackComplianceDetailsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetConformancePackComplianceDetailsInput {
        return GetConformancePackComplianceDetailsInput(
            conformancePackName: self.conformancePackName,
            filters: self.filters,
            limit: self.limit,
            nextToken: token
        )}
}
extension ConfigClient {
    /// Paginate over `[GetConformancePackComplianceSummaryOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetConformancePackComplianceSummaryInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetConformancePackComplianceSummaryOutput`
    public func getConformancePackComplianceSummaryPaginated(input: GetConformancePackComplianceSummaryInput) -> ClientRuntime.PaginatorSequence<GetConformancePackComplianceSummaryInput, GetConformancePackComplianceSummaryOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<GetConformancePackComplianceSummaryInput, GetConformancePackComplianceSummaryOutput>(input: input, inputKey: \GetConformancePackComplianceSummaryInput.nextToken, outputKey: \GetConformancePackComplianceSummaryOutput.nextToken, paginationFunction: self.getConformancePackComplianceSummary(input:))
=======
        return ClientRuntime.PaginatorSequence<GetConformancePackComplianceSummaryInput, GetConformancePackComplianceSummaryOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.getConformancePackComplianceSummary(input:))
>>>>>>> main
    }
}

extension GetConformancePackComplianceSummaryInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetConformancePackComplianceSummaryInput {
        return GetConformancePackComplianceSummaryInput(
            conformancePackNames: self.conformancePackNames,
            limit: self.limit,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == GetConformancePackComplianceSummaryInput, Output == GetConformancePackComplianceSummaryOutput {
=======
extension PaginatorSequence where OperationStackInput == GetConformancePackComplianceSummaryInput, OperationStackOutput == GetConformancePackComplianceSummaryOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `getConformancePackComplianceSummaryPaginated`
    /// to access the nested member `[ConfigClientTypes.ConformancePackComplianceSummary]`
    /// - Returns: `[ConfigClientTypes.ConformancePackComplianceSummary]`
    public func conformancePackComplianceSummaryList() async throws -> [ConfigClientTypes.ConformancePackComplianceSummary] {
        return try await self.asyncCompactMap { item in item.conformancePackComplianceSummaryList }
    }
}
extension ConfigClient {
    /// Paginate over `[GetDiscoveredResourceCountsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetDiscoveredResourceCountsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetDiscoveredResourceCountsOutput`
    public func getDiscoveredResourceCountsPaginated(input: GetDiscoveredResourceCountsInput) -> ClientRuntime.PaginatorSequence<GetDiscoveredResourceCountsInput, GetDiscoveredResourceCountsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<GetDiscoveredResourceCountsInput, GetDiscoveredResourceCountsOutput>(input: input, inputKey: \GetDiscoveredResourceCountsInput.nextToken, outputKey: \GetDiscoveredResourceCountsOutput.nextToken, paginationFunction: self.getDiscoveredResourceCounts(input:))
=======
        return ClientRuntime.PaginatorSequence<GetDiscoveredResourceCountsInput, GetDiscoveredResourceCountsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.getDiscoveredResourceCounts(input:))
>>>>>>> main
    }
}

extension GetDiscoveredResourceCountsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetDiscoveredResourceCountsInput {
        return GetDiscoveredResourceCountsInput(
            limit: self.limit,
            nextToken: token,
            resourceTypes: self.resourceTypes
        )}
}
extension ConfigClient {
    /// Paginate over `[GetOrganizationConfigRuleDetailedStatusOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetOrganizationConfigRuleDetailedStatusInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetOrganizationConfigRuleDetailedStatusOutput`
    public func getOrganizationConfigRuleDetailedStatusPaginated(input: GetOrganizationConfigRuleDetailedStatusInput) -> ClientRuntime.PaginatorSequence<GetOrganizationConfigRuleDetailedStatusInput, GetOrganizationConfigRuleDetailedStatusOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<GetOrganizationConfigRuleDetailedStatusInput, GetOrganizationConfigRuleDetailedStatusOutput>(input: input, inputKey: \GetOrganizationConfigRuleDetailedStatusInput.nextToken, outputKey: \GetOrganizationConfigRuleDetailedStatusOutput.nextToken, paginationFunction: self.getOrganizationConfigRuleDetailedStatus(input:))
=======
        return ClientRuntime.PaginatorSequence<GetOrganizationConfigRuleDetailedStatusInput, GetOrganizationConfigRuleDetailedStatusOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.getOrganizationConfigRuleDetailedStatus(input:))
>>>>>>> main
    }
}

extension GetOrganizationConfigRuleDetailedStatusInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetOrganizationConfigRuleDetailedStatusInput {
        return GetOrganizationConfigRuleDetailedStatusInput(
            filters: self.filters,
            limit: self.limit,
            nextToken: token,
            organizationConfigRuleName: self.organizationConfigRuleName
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == GetOrganizationConfigRuleDetailedStatusInput, Output == GetOrganizationConfigRuleDetailedStatusOutput {
=======
extension PaginatorSequence where OperationStackInput == GetOrganizationConfigRuleDetailedStatusInput, OperationStackOutput == GetOrganizationConfigRuleDetailedStatusOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `getOrganizationConfigRuleDetailedStatusPaginated`
    /// to access the nested member `[ConfigClientTypes.MemberAccountStatus]`
    /// - Returns: `[ConfigClientTypes.MemberAccountStatus]`
    public func organizationConfigRuleDetailedStatus() async throws -> [ConfigClientTypes.MemberAccountStatus] {
        return try await self.asyncCompactMap { item in item.organizationConfigRuleDetailedStatus }
    }
}
extension ConfigClient {
    /// Paginate over `[GetOrganizationConformancePackDetailedStatusOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetOrganizationConformancePackDetailedStatusInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetOrganizationConformancePackDetailedStatusOutput`
    public func getOrganizationConformancePackDetailedStatusPaginated(input: GetOrganizationConformancePackDetailedStatusInput) -> ClientRuntime.PaginatorSequence<GetOrganizationConformancePackDetailedStatusInput, GetOrganizationConformancePackDetailedStatusOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<GetOrganizationConformancePackDetailedStatusInput, GetOrganizationConformancePackDetailedStatusOutput>(input: input, inputKey: \GetOrganizationConformancePackDetailedStatusInput.nextToken, outputKey: \GetOrganizationConformancePackDetailedStatusOutput.nextToken, paginationFunction: self.getOrganizationConformancePackDetailedStatus(input:))
=======
        return ClientRuntime.PaginatorSequence<GetOrganizationConformancePackDetailedStatusInput, GetOrganizationConformancePackDetailedStatusOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.getOrganizationConformancePackDetailedStatus(input:))
>>>>>>> main
    }
}

extension GetOrganizationConformancePackDetailedStatusInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetOrganizationConformancePackDetailedStatusInput {
        return GetOrganizationConformancePackDetailedStatusInput(
            filters: self.filters,
            limit: self.limit,
            nextToken: token,
            organizationConformancePackName: self.organizationConformancePackName
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == GetOrganizationConformancePackDetailedStatusInput, Output == GetOrganizationConformancePackDetailedStatusOutput {
=======
extension PaginatorSequence where OperationStackInput == GetOrganizationConformancePackDetailedStatusInput, OperationStackOutput == GetOrganizationConformancePackDetailedStatusOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `getOrganizationConformancePackDetailedStatusPaginated`
    /// to access the nested member `[ConfigClientTypes.OrganizationConformancePackDetailedStatus]`
    /// - Returns: `[ConfigClientTypes.OrganizationConformancePackDetailedStatus]`
    public func organizationConformancePackDetailedStatuses() async throws -> [ConfigClientTypes.OrganizationConformancePackDetailedStatus] {
        return try await self.asyncCompactMap { item in item.organizationConformancePackDetailedStatuses }
    }
}
extension ConfigClient {
    /// Paginate over `[GetResourceConfigHistoryOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetResourceConfigHistoryInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetResourceConfigHistoryOutput`
    public func getResourceConfigHistoryPaginated(input: GetResourceConfigHistoryInput) -> ClientRuntime.PaginatorSequence<GetResourceConfigHistoryInput, GetResourceConfigHistoryOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<GetResourceConfigHistoryInput, GetResourceConfigHistoryOutput>(input: input, inputKey: \GetResourceConfigHistoryInput.nextToken, outputKey: \GetResourceConfigHistoryOutput.nextToken, paginationFunction: self.getResourceConfigHistory(input:))
=======
        return ClientRuntime.PaginatorSequence<GetResourceConfigHistoryInput, GetResourceConfigHistoryOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.getResourceConfigHistory(input:))
>>>>>>> main
    }
}

extension GetResourceConfigHistoryInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetResourceConfigHistoryInput {
        return GetResourceConfigHistoryInput(
            chronologicalOrder: self.chronologicalOrder,
            earlierTime: self.earlierTime,
            laterTime: self.laterTime,
            limit: self.limit,
            nextToken: token,
            resourceId: self.resourceId,
            resourceType: self.resourceType
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == GetResourceConfigHistoryInput, Output == GetResourceConfigHistoryOutput {
=======
extension PaginatorSequence where OperationStackInput == GetResourceConfigHistoryInput, OperationStackOutput == GetResourceConfigHistoryOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `getResourceConfigHistoryPaginated`
    /// to access the nested member `[ConfigClientTypes.ConfigurationItem]`
    /// - Returns: `[ConfigClientTypes.ConfigurationItem]`
    public func configurationItems() async throws -> [ConfigClientTypes.ConfigurationItem] {
        return try await self.asyncCompactMap { item in item.configurationItems }
    }
}
extension ConfigClient {
    /// Paginate over `[ListAggregateDiscoveredResourcesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAggregateDiscoveredResourcesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAggregateDiscoveredResourcesOutput`
    public func listAggregateDiscoveredResourcesPaginated(input: ListAggregateDiscoveredResourcesInput) -> ClientRuntime.PaginatorSequence<ListAggregateDiscoveredResourcesInput, ListAggregateDiscoveredResourcesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListAggregateDiscoveredResourcesInput, ListAggregateDiscoveredResourcesOutput>(input: input, inputKey: \ListAggregateDiscoveredResourcesInput.nextToken, outputKey: \ListAggregateDiscoveredResourcesOutput.nextToken, paginationFunction: self.listAggregateDiscoveredResources(input:))
=======
        return ClientRuntime.PaginatorSequence<ListAggregateDiscoveredResourcesInput, ListAggregateDiscoveredResourcesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listAggregateDiscoveredResources(input:))
>>>>>>> main
    }
}

extension ListAggregateDiscoveredResourcesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAggregateDiscoveredResourcesInput {
        return ListAggregateDiscoveredResourcesInput(
            configurationAggregatorName: self.configurationAggregatorName,
            filters: self.filters,
            limit: self.limit,
            nextToken: token,
            resourceType: self.resourceType
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListAggregateDiscoveredResourcesInput, Output == ListAggregateDiscoveredResourcesOutput {
=======
extension PaginatorSequence where OperationStackInput == ListAggregateDiscoveredResourcesInput, OperationStackOutput == ListAggregateDiscoveredResourcesOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listAggregateDiscoveredResourcesPaginated`
    /// to access the nested member `[ConfigClientTypes.AggregateResourceIdentifier]`
    /// - Returns: `[ConfigClientTypes.AggregateResourceIdentifier]`
    public func resourceIdentifiers() async throws -> [ConfigClientTypes.AggregateResourceIdentifier] {
        return try await self.asyncCompactMap { item in item.resourceIdentifiers }
    }
}
extension ConfigClient {
    /// Paginate over `[ListConformancePackComplianceScoresOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListConformancePackComplianceScoresInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListConformancePackComplianceScoresOutput`
    public func listConformancePackComplianceScoresPaginated(input: ListConformancePackComplianceScoresInput) -> ClientRuntime.PaginatorSequence<ListConformancePackComplianceScoresInput, ListConformancePackComplianceScoresOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListConformancePackComplianceScoresInput, ListConformancePackComplianceScoresOutput>(input: input, inputKey: \ListConformancePackComplianceScoresInput.nextToken, outputKey: \ListConformancePackComplianceScoresOutput.nextToken, paginationFunction: self.listConformancePackComplianceScores(input:))
=======
        return ClientRuntime.PaginatorSequence<ListConformancePackComplianceScoresInput, ListConformancePackComplianceScoresOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listConformancePackComplianceScores(input:))
>>>>>>> main
    }
}

extension ListConformancePackComplianceScoresInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListConformancePackComplianceScoresInput {
        return ListConformancePackComplianceScoresInput(
            filters: self.filters,
            limit: self.limit,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )}
}
extension ConfigClient {
    /// Paginate over `[ListDiscoveredResourcesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDiscoveredResourcesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDiscoveredResourcesOutput`
    public func listDiscoveredResourcesPaginated(input: ListDiscoveredResourcesInput) -> ClientRuntime.PaginatorSequence<ListDiscoveredResourcesInput, ListDiscoveredResourcesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListDiscoveredResourcesInput, ListDiscoveredResourcesOutput>(input: input, inputKey: \ListDiscoveredResourcesInput.nextToken, outputKey: \ListDiscoveredResourcesOutput.nextToken, paginationFunction: self.listDiscoveredResources(input:))
=======
        return ClientRuntime.PaginatorSequence<ListDiscoveredResourcesInput, ListDiscoveredResourcesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listDiscoveredResources(input:))
>>>>>>> main
    }
}

extension ListDiscoveredResourcesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDiscoveredResourcesInput {
        return ListDiscoveredResourcesInput(
            includeDeletedResources: self.includeDeletedResources,
            limit: self.limit,
            nextToken: token,
            resourceIds: self.resourceIds,
            resourceName: self.resourceName,
            resourceType: self.resourceType
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListDiscoveredResourcesInput, Output == ListDiscoveredResourcesOutput {
=======
extension PaginatorSequence where OperationStackInput == ListDiscoveredResourcesInput, OperationStackOutput == ListDiscoveredResourcesOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listDiscoveredResourcesPaginated`
    /// to access the nested member `[ConfigClientTypes.ResourceIdentifier]`
    /// - Returns: `[ConfigClientTypes.ResourceIdentifier]`
    public func resourceIdentifiers() async throws -> [ConfigClientTypes.ResourceIdentifier] {
        return try await self.asyncCompactMap { item in item.resourceIdentifiers }
    }
}
extension ConfigClient {
    /// Paginate over `[ListResourceEvaluationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListResourceEvaluationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListResourceEvaluationsOutput`
    public func listResourceEvaluationsPaginated(input: ListResourceEvaluationsInput) -> ClientRuntime.PaginatorSequence<ListResourceEvaluationsInput, ListResourceEvaluationsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListResourceEvaluationsInput, ListResourceEvaluationsOutput>(input: input, inputKey: \ListResourceEvaluationsInput.nextToken, outputKey: \ListResourceEvaluationsOutput.nextToken, paginationFunction: self.listResourceEvaluations(input:))
=======
        return ClientRuntime.PaginatorSequence<ListResourceEvaluationsInput, ListResourceEvaluationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listResourceEvaluations(input:))
>>>>>>> main
    }
}

extension ListResourceEvaluationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListResourceEvaluationsInput {
        return ListResourceEvaluationsInput(
            filters: self.filters,
            limit: self.limit,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListResourceEvaluationsInput, Output == ListResourceEvaluationsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListResourceEvaluationsInput, OperationStackOutput == ListResourceEvaluationsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listResourceEvaluationsPaginated`
    /// to access the nested member `[ConfigClientTypes.ResourceEvaluation]`
    /// - Returns: `[ConfigClientTypes.ResourceEvaluation]`
    public func resourceEvaluations() async throws -> [ConfigClientTypes.ResourceEvaluation] {
        return try await self.asyncCompactMap { item in item.resourceEvaluations }
    }
}
extension ConfigClient {
    /// Paginate over `[ListStoredQueriesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListStoredQueriesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListStoredQueriesOutput`
    public func listStoredQueriesPaginated(input: ListStoredQueriesInput) -> ClientRuntime.PaginatorSequence<ListStoredQueriesInput, ListStoredQueriesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListStoredQueriesInput, ListStoredQueriesOutput>(input: input, inputKey: \ListStoredQueriesInput.nextToken, outputKey: \ListStoredQueriesOutput.nextToken, paginationFunction: self.listStoredQueries(input:))
=======
        return ClientRuntime.PaginatorSequence<ListStoredQueriesInput, ListStoredQueriesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listStoredQueries(input:))
>>>>>>> main
    }
}

extension ListStoredQueriesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListStoredQueriesInput {
        return ListStoredQueriesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension ConfigClient {
    /// Paginate over `[ListTagsForResourceOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTagsForResourceInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTagsForResourceOutput`
    public func listTagsForResourcePaginated(input: ListTagsForResourceInput) -> ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutput>(input: input, inputKey: \ListTagsForResourceInput.nextToken, outputKey: \ListTagsForResourceOutput.nextToken, paginationFunction: self.listTagsForResource(input:))
=======
        return ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listTagsForResource(input:))
>>>>>>> main
    }
}

extension ListTagsForResourceInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTagsForResourceInput {
        return ListTagsForResourceInput(
            limit: self.limit,
            nextToken: token,
            resourceArn: self.resourceArn
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListTagsForResourceInput, Output == ListTagsForResourceOutput {
=======
extension PaginatorSequence where OperationStackInput == ListTagsForResourceInput, OperationStackOutput == ListTagsForResourceOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listTagsForResourcePaginated`
    /// to access the nested member `[ConfigClientTypes.Tag]`
    /// - Returns: `[ConfigClientTypes.Tag]`
    public func tags() async throws -> [ConfigClientTypes.Tag] {
        return try await self.asyncCompactMap { item in item.tags }
    }
}
extension ConfigClient {
    /// Paginate over `[SelectAggregateResourceConfigOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[SelectAggregateResourceConfigInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `SelectAggregateResourceConfigOutput`
    public func selectAggregateResourceConfigPaginated(input: SelectAggregateResourceConfigInput) -> ClientRuntime.PaginatorSequence<SelectAggregateResourceConfigInput, SelectAggregateResourceConfigOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<SelectAggregateResourceConfigInput, SelectAggregateResourceConfigOutput>(input: input, inputKey: \SelectAggregateResourceConfigInput.nextToken, outputKey: \SelectAggregateResourceConfigOutput.nextToken, paginationFunction: self.selectAggregateResourceConfig(input:))
=======
        return ClientRuntime.PaginatorSequence<SelectAggregateResourceConfigInput, SelectAggregateResourceConfigOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.selectAggregateResourceConfig(input:))
>>>>>>> main
    }
}

extension SelectAggregateResourceConfigInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SelectAggregateResourceConfigInput {
        return SelectAggregateResourceConfigInput(
            configurationAggregatorName: self.configurationAggregatorName,
            expression: self.expression,
            limit: self.limit,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == SelectAggregateResourceConfigInput, Output == SelectAggregateResourceConfigOutput {
=======
extension PaginatorSequence where OperationStackInput == SelectAggregateResourceConfigInput, OperationStackOutput == SelectAggregateResourceConfigOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `selectAggregateResourceConfigPaginated`
    /// to access the nested member `[Swift.String]`
    /// - Returns: `[Swift.String]`
    public func results() async throws -> [Swift.String] {
        return try await self.asyncCompactMap { item in item.results }
    }
}
extension ConfigClient {
    /// Paginate over `[SelectResourceConfigOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[SelectResourceConfigInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `SelectResourceConfigOutput`
    public func selectResourceConfigPaginated(input: SelectResourceConfigInput) -> ClientRuntime.PaginatorSequence<SelectResourceConfigInput, SelectResourceConfigOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<SelectResourceConfigInput, SelectResourceConfigOutput>(input: input, inputKey: \SelectResourceConfigInput.nextToken, outputKey: \SelectResourceConfigOutput.nextToken, paginationFunction: self.selectResourceConfig(input:))
=======
        return ClientRuntime.PaginatorSequence<SelectResourceConfigInput, SelectResourceConfigOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.selectResourceConfig(input:))
>>>>>>> main
    }
}

extension SelectResourceConfigInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SelectResourceConfigInput {
        return SelectResourceConfigInput(
            expression: self.expression,
            limit: self.limit,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == SelectResourceConfigInput, Output == SelectResourceConfigOutput {
=======
extension PaginatorSequence where OperationStackInput == SelectResourceConfigInput, OperationStackOutput == SelectResourceConfigOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `selectResourceConfigPaginated`
    /// to access the nested member `[Swift.String]`
    /// - Returns: `[Swift.String]`
    public func results() async throws -> [Swift.String] {
        return try await self.asyncCompactMap { item in item.results }
    }
}
